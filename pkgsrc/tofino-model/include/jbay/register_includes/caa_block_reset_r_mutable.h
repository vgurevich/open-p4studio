/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_CAA_BLOCK_RESET_R_MUTABLE_H__
#define __REGISTER_INCLUDES_CAA_BLOCK_RESET_R_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class CaaBlockResetRMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  CaaBlockResetRMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 24, true, write_callback, read_callback, std::string("CaaBlockResetRMutable"))
    {
    }
  CaaBlockResetRMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "CaaBlockResetRMutable")
    {
    }
public:







  uint8_t value(int j0) { return value_[j0]; }
  void value(int j0,const uint8_t &v) { value_[j0]=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (value_[0] & 0x1);
      *data |= ((value_[1] & 0x1) << 1);
      *data |= ((value_[2] & 0x1) << 2);
      *data |= ((value_[3] & 0x1) << 3);
      *data |= ((value_[4] & 0x1) << 4);
      *data |= ((value_[5] & 0x1) << 5);
      *data |= ((value_[6] & 0x1) << 6);
      *data |= ((value_[7] & 0x1) << 7);
      *data |= ((value_[8] & 0x1) << 8);
      *data |= ((value_[9] & 0x1) << 9);
      *data |= ((value_[10] & 0x1) << 10);
      *data |= ((value_[11] & 0x1) << 11);
      *data |= ((value_[12] & 0x1) << 12);
      *data |= ((value_[13] & 0x1) << 13);
      *data |= ((value_[14] & 0x1) << 14);
      *data |= ((value_[15] & 0x1) << 15);
      *data |= ((value_[16] & 0x1) << 16);
      *data |= ((value_[17] & 0x1) << 17);
      *data |= ((value_[18] & 0x1) << 18);
      *data |= ((value_[19] & 0x1) << 19);
      *data |= ((value_[20] & 0x1) << 20);
      *data |= ((value_[21] & 0x1) << 21);
      *data |= ((value_[22] & 0x1) << 22);
      *data |= ((value_[23] & 0x1) << 23);
      *data |= ((value_[24] & 0x1) << 24);
      *data |= ((value_[25] & 0x1) << 25);
      *data |= ((value_[26] & 0x1) << 26);
      *data |= ((value_[27] & 0x1) << 27);
      *data |= ((value_[28] & 0x1) << 28);
      *data |= ((value_[29] & 0x1) << 29);
      *data |= ((value_[30] & 0x1) << 30);
      *data |= ((value_[31] & 0x1) << 31);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (value_[32] & 0x1);
      *data |= ((value_[33] & 0x1) << 1);
      *data |= ((value_[34] & 0x1) << 2);
      *data |= ((value_[35] & 0x1) << 3);
      *data |= ((value_[36] & 0x1) << 4);
      *data |= ((value_[37] & 0x1) << 5);
      *data |= ((value_[38] & 0x1) << 6);
      *data |= ((value_[39] & 0x1) << 7);
      *data |= ((value_[40] & 0x1) << 8);
      *data |= ((value_[41] & 0x1) << 9);
      *data |= ((value_[42] & 0x1) << 10);
      *data |= ((value_[43] & 0x1) << 11);
      *data |= ((value_[44] & 0x1) << 12);
      *data |= ((value_[45] & 0x1) << 13);
      *data |= ((value_[46] & 0x1) << 14);
      *data |= ((value_[47] & 0x1) << 15);
      *data |= ((value_[48] & 0x1) << 16);
      *data |= ((value_[49] & 0x1) << 17);
      *data |= ((value_[50] & 0x1) << 18);
      *data |= ((value_[51] & 0x1) << 19);
      *data |= ((value_[52] & 0x1) << 20);
      *data |= ((value_[53] & 0x1) << 21);
      *data |= ((value_[54] & 0x1) << 22);
      *data |= ((value_[55] & 0x1) << 23);
      *data |= ((value_[56] & 0x1) << 24);
      *data |= ((value_[57] & 0x1) << 25);
      *data |= ((value_[58] & 0x1) << 26);
      *data |= ((value_[59] & 0x1) << 27);
      *data |= ((value_[60] & 0x1) << 28);
      *data |= ((value_[61] & 0x1) << 29);
      *data |= ((value_[62] & 0x1) << 30);
      *data |= ((value_[63] & 0x1) << 31);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = (value_[64] & 0x1);
      *data |= ((value_[65] & 0x1) << 1);
      *data |= ((value_[66] & 0x1) << 2);
      *data |= ((value_[67] & 0x1) << 3);
      *data |= ((value_[68] & 0x1) << 4);
      *data |= ((value_[69] & 0x1) << 5);
      *data |= ((value_[70] & 0x1) << 6);
      *data |= ((value_[71] & 0x1) << 7);
      *data |= ((value_[72] & 0x1) << 8);
      *data |= ((value_[73] & 0x1) << 9);
      *data |= ((value_[74] & 0x1) << 10);
      *data |= ((value_[75] & 0x1) << 11);
      *data |= ((value_[76] & 0x1) << 12);
      *data |= ((value_[77] & 0x1) << 13);
      *data |= ((value_[78] & 0x1) << 14);
      *data |= ((value_[79] & 0x1) << 15);
      *data |= ((value_[80] & 0x1) << 16);
      *data |= ((value_[81] & 0x1) << 17);
      *data |= ((value_[82] & 0x1) << 18);
      *data |= ((value_[83] & 0x1) << 19);
      *data |= ((value_[84] & 0x1) << 20);
      *data |= ((value_[85] & 0x1) << 21);
      *data |= ((value_[86] & 0x1) << 22);
      *data |= ((value_[87] & 0x1) << 23);
      *data |= ((value_[88] & 0x1) << 24);
      *data |= ((value_[89] & 0x1) << 25);
      *data |= ((value_[90] & 0x1) << 26);
      *data |= ((value_[91] & 0x1) << 27);
      *data |= ((value_[92] & 0x1) << 28);
      *data |= ((value_[93] & 0x1) << 29);
      *data |= ((value_[94] & 0x1) << 30);
      *data |= ((value_[95] & 0x1) << 31);
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = (value_[96] & 0x1);
      *data |= ((value_[97] & 0x1) << 1);
      *data |= ((value_[98] & 0x1) << 2);
      *data |= ((value_[99] & 0x1) << 3);
      *data |= ((value_[100] & 0x1) << 4);
      *data |= ((value_[101] & 0x1) << 5);
      *data |= ((value_[102] & 0x1) << 6);
      *data |= ((value_[103] & 0x1) << 7);
      *data |= ((value_[104] & 0x1) << 8);
      *data |= ((value_[105] & 0x1) << 9);
      *data |= ((value_[106] & 0x1) << 10);
      *data |= ((value_[107] & 0x1) << 11);
      *data |= ((value_[108] & 0x1) << 12);
      *data |= ((value_[109] & 0x1) << 13);
      *data |= ((value_[110] & 0x1) << 14);
      *data |= ((value_[111] & 0x1) << 15);
      *data |= ((value_[112] & 0x1) << 16);
      *data |= ((value_[113] & 0x1) << 17);
      *data |= ((value_[114] & 0x1) << 18);
      *data |= ((value_[115] & 0x1) << 19);
      *data |= ((value_[116] & 0x1) << 20);
      *data |= ((value_[117] & 0x1) << 21);
      *data |= ((value_[118] & 0x1) << 22);
      *data |= ((value_[119] & 0x1) << 23);
      *data |= ((value_[120] & 0x1) << 24);
      *data |= ((value_[121] & 0x1) << 25);
      *data |= ((value_[122] & 0x1) << 26);
      *data |= ((value_[123] & 0x1) << 27);
      *data |= ((value_[124] & 0x1) << 28);
      *data |= ((value_[125] & 0x1) << 29);
      *data |= ((value_[126] & 0x1) << 30);
      *data |= ((value_[127] & 0x1) << 31);
    }
    else if (offset >= 0x10 && offset < 0x14) {
      if (read_callback_) read_callback_();
      *data = (value_[128] & 0x1);
      *data |= ((value_[129] & 0x1) << 1);
      *data |= ((value_[130] & 0x1) << 2);
      *data |= ((value_[131] & 0x1) << 3);
      *data |= ((value_[132] & 0x1) << 4);
      *data |= ((value_[133] & 0x1) << 5);
      *data |= ((value_[134] & 0x1) << 6);
      *data |= ((value_[135] & 0x1) << 7);
      *data |= ((value_[136] & 0x1) << 8);
      *data |= ((value_[137] & 0x1) << 9);
      *data |= ((value_[138] & 0x1) << 10);
      *data |= ((value_[139] & 0x1) << 11);
      *data |= ((value_[140] & 0x1) << 12);
      *data |= ((value_[141] & 0x1) << 13);
      *data |= ((value_[142] & 0x1) << 14);
      *data |= ((value_[143] & 0x1) << 15);
      *data |= ((value_[144] & 0x1) << 16);
      *data |= ((value_[145] & 0x1) << 17);
      *data |= ((value_[146] & 0x1) << 18);
      *data |= ((value_[147] & 0x1) << 19);
      *data |= ((value_[148] & 0x1) << 20);
      *data |= ((value_[149] & 0x1) << 21);
      *data |= ((value_[150] & 0x1) << 22);
      *data |= ((value_[151] & 0x1) << 23);
      *data |= ((value_[152] & 0x1) << 24);
      *data |= ((value_[153] & 0x1) << 25);
      *data |= ((value_[154] & 0x1) << 26);
      *data |= ((value_[155] & 0x1) << 27);
      *data |= ((value_[156] & 0x1) << 28);
      *data |= ((value_[157] & 0x1) << 29);
      *data |= ((value_[158] & 0x1) << 30);
      *data |= ((value_[159] & 0x1) << 31);
    }
    else if (offset >= 0x14 && offset < 0x18) {
      if (read_callback_) read_callback_();
      *data = (value_[160] & 0x1);
      *data |= ((value_[161] & 0x1) << 1);
      *data |= ((value_[162] & 0x1) << 2);
      *data |= ((value_[163] & 0x1) << 3);
      *data |= ((value_[164] & 0x1) << 4);
      *data |= ((value_[165] & 0x1) << 5);
      *data |= ((value_[166] & 0x1) << 6);
      *data |= ((value_[167] & 0x1) << 7);
      *data |= ((value_[168] & 0x1) << 8);
      *data |= ((value_[169] & 0x1) << 9);
      *data |= ((value_[170] & 0x1) << 10);
      *data |= ((value_[171] & 0x1) << 11);
      *data |= ((value_[172] & 0x1) << 12);
      *data |= ((value_[173] & 0x1) << 13);
      *data |= ((value_[174] & 0x1) << 14);
      *data |= ((value_[175] & 0x1) << 15);
      *data |= ((value_[176] & 0x1) << 16);
      *data |= ((value_[177] & 0x1) << 17);
      *data |= ((value_[178] & 0x1) << 18);
      *data |= ((value_[179] & 0x1) << 19);
      *data |= ((value_[180] & 0x1) << 20);
      *data |= ((value_[181] & 0x1) << 21);
      *data |= ((value_[182] & 0x1) << 22);
      *data |= ((value_[183] & 0x1) << 23);
      *data |= ((value_[184] & 0x1) << 24);
      *data |= ((value_[185] & 0x1) << 25);
      *data |= ((value_[186] & 0x1) << 26);
      *data |= ((value_[187] & 0x1) << 27);
      *data |= ((value_[188] & 0x1) << 28);
      *data |= ((value_[189] & 0x1) << 29);
      *data |= ((value_[190] & 0x1) << 30);
      *data |= ((value_[191] & 0x1) << 31);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      value_[0] = (data & 0x1);
      value_[1] = ((data >> 1) & 0x1);
      value_[2] = ((data >> 2) & 0x1);
      value_[3] = ((data >> 3) & 0x1);
      value_[4] = ((data >> 4) & 0x1);
      value_[5] = ((data >> 5) & 0x1);
      value_[6] = ((data >> 6) & 0x1);
      value_[7] = ((data >> 7) & 0x1);
      value_[8] = ((data >> 8) & 0x1);
      value_[9] = ((data >> 9) & 0x1);
      value_[10] = ((data >> 10) & 0x1);
      value_[11] = ((data >> 11) & 0x1);
      value_[12] = ((data >> 12) & 0x1);
      value_[13] = ((data >> 13) & 0x1);
      value_[14] = ((data >> 14) & 0x1);
      value_[15] = ((data >> 15) & 0x1);
      value_[16] = ((data >> 16) & 0x1);
      value_[17] = ((data >> 17) & 0x1);
      value_[18] = ((data >> 18) & 0x1);
      value_[19] = ((data >> 19) & 0x1);
      value_[20] = ((data >> 20) & 0x1);
      value_[21] = ((data >> 21) & 0x1);
      value_[22] = ((data >> 22) & 0x1);
      value_[23] = ((data >> 23) & 0x1);
      value_[24] = ((data >> 24) & 0x1);
      value_[25] = ((data >> 25) & 0x1);
      value_[26] = ((data >> 26) & 0x1);
      value_[27] = ((data >> 27) & 0x1);
      value_[28] = ((data >> 28) & 0x1);
      value_[29] = ((data >> 29) & 0x1);
      value_[30] = ((data >> 30) & 0x1);
      value_[31] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      value_[32] = (data & 0x1);
      value_[33] = ((data >> 1) & 0x1);
      value_[34] = ((data >> 2) & 0x1);
      value_[35] = ((data >> 3) & 0x1);
      value_[36] = ((data >> 4) & 0x1);
      value_[37] = ((data >> 5) & 0x1);
      value_[38] = ((data >> 6) & 0x1);
      value_[39] = ((data >> 7) & 0x1);
      value_[40] = ((data >> 8) & 0x1);
      value_[41] = ((data >> 9) & 0x1);
      value_[42] = ((data >> 10) & 0x1);
      value_[43] = ((data >> 11) & 0x1);
      value_[44] = ((data >> 12) & 0x1);
      value_[45] = ((data >> 13) & 0x1);
      value_[46] = ((data >> 14) & 0x1);
      value_[47] = ((data >> 15) & 0x1);
      value_[48] = ((data >> 16) & 0x1);
      value_[49] = ((data >> 17) & 0x1);
      value_[50] = ((data >> 18) & 0x1);
      value_[51] = ((data >> 19) & 0x1);
      value_[52] = ((data >> 20) & 0x1);
      value_[53] = ((data >> 21) & 0x1);
      value_[54] = ((data >> 22) & 0x1);
      value_[55] = ((data >> 23) & 0x1);
      value_[56] = ((data >> 24) & 0x1);
      value_[57] = ((data >> 25) & 0x1);
      value_[58] = ((data >> 26) & 0x1);
      value_[59] = ((data >> 27) & 0x1);
      value_[60] = ((data >> 28) & 0x1);
      value_[61] = ((data >> 29) & 0x1);
      value_[62] = ((data >> 30) & 0x1);
      value_[63] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      value_[64] = (data & 0x1);
      value_[65] = ((data >> 1) & 0x1);
      value_[66] = ((data >> 2) & 0x1);
      value_[67] = ((data >> 3) & 0x1);
      value_[68] = ((data >> 4) & 0x1);
      value_[69] = ((data >> 5) & 0x1);
      value_[70] = ((data >> 6) & 0x1);
      value_[71] = ((data >> 7) & 0x1);
      value_[72] = ((data >> 8) & 0x1);
      value_[73] = ((data >> 9) & 0x1);
      value_[74] = ((data >> 10) & 0x1);
      value_[75] = ((data >> 11) & 0x1);
      value_[76] = ((data >> 12) & 0x1);
      value_[77] = ((data >> 13) & 0x1);
      value_[78] = ((data >> 14) & 0x1);
      value_[79] = ((data >> 15) & 0x1);
      value_[80] = ((data >> 16) & 0x1);
      value_[81] = ((data >> 17) & 0x1);
      value_[82] = ((data >> 18) & 0x1);
      value_[83] = ((data >> 19) & 0x1);
      value_[84] = ((data >> 20) & 0x1);
      value_[85] = ((data >> 21) & 0x1);
      value_[86] = ((data >> 22) & 0x1);
      value_[87] = ((data >> 23) & 0x1);
      value_[88] = ((data >> 24) & 0x1);
      value_[89] = ((data >> 25) & 0x1);
      value_[90] = ((data >> 26) & 0x1);
      value_[91] = ((data >> 27) & 0x1);
      value_[92] = ((data >> 28) & 0x1);
      value_[93] = ((data >> 29) & 0x1);
      value_[94] = ((data >> 30) & 0x1);
      value_[95] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      value_[96] = (data & 0x1);
      value_[97] = ((data >> 1) & 0x1);
      value_[98] = ((data >> 2) & 0x1);
      value_[99] = ((data >> 3) & 0x1);
      value_[100] = ((data >> 4) & 0x1);
      value_[101] = ((data >> 5) & 0x1);
      value_[102] = ((data >> 6) & 0x1);
      value_[103] = ((data >> 7) & 0x1);
      value_[104] = ((data >> 8) & 0x1);
      value_[105] = ((data >> 9) & 0x1);
      value_[106] = ((data >> 10) & 0x1);
      value_[107] = ((data >> 11) & 0x1);
      value_[108] = ((data >> 12) & 0x1);
      value_[109] = ((data >> 13) & 0x1);
      value_[110] = ((data >> 14) & 0x1);
      value_[111] = ((data >> 15) & 0x1);
      value_[112] = ((data >> 16) & 0x1);
      value_[113] = ((data >> 17) & 0x1);
      value_[114] = ((data >> 18) & 0x1);
      value_[115] = ((data >> 19) & 0x1);
      value_[116] = ((data >> 20) & 0x1);
      value_[117] = ((data >> 21) & 0x1);
      value_[118] = ((data >> 22) & 0x1);
      value_[119] = ((data >> 23) & 0x1);
      value_[120] = ((data >> 24) & 0x1);
      value_[121] = ((data >> 25) & 0x1);
      value_[122] = ((data >> 26) & 0x1);
      value_[123] = ((data >> 27) & 0x1);
      value_[124] = ((data >> 28) & 0x1);
      value_[125] = ((data >> 29) & 0x1);
      value_[126] = ((data >> 30) & 0x1);
      value_[127] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      value_[128] = (data & 0x1);
      value_[129] = ((data >> 1) & 0x1);
      value_[130] = ((data >> 2) & 0x1);
      value_[131] = ((data >> 3) & 0x1);
      value_[132] = ((data >> 4) & 0x1);
      value_[133] = ((data >> 5) & 0x1);
      value_[134] = ((data >> 6) & 0x1);
      value_[135] = ((data >> 7) & 0x1);
      value_[136] = ((data >> 8) & 0x1);
      value_[137] = ((data >> 9) & 0x1);
      value_[138] = ((data >> 10) & 0x1);
      value_[139] = ((data >> 11) & 0x1);
      value_[140] = ((data >> 12) & 0x1);
      value_[141] = ((data >> 13) & 0x1);
      value_[142] = ((data >> 14) & 0x1);
      value_[143] = ((data >> 15) & 0x1);
      value_[144] = ((data >> 16) & 0x1);
      value_[145] = ((data >> 17) & 0x1);
      value_[146] = ((data >> 18) & 0x1);
      value_[147] = ((data >> 19) & 0x1);
      value_[148] = ((data >> 20) & 0x1);
      value_[149] = ((data >> 21) & 0x1);
      value_[150] = ((data >> 22) & 0x1);
      value_[151] = ((data >> 23) & 0x1);
      value_[152] = ((data >> 24) & 0x1);
      value_[153] = ((data >> 25) & 0x1);
      value_[154] = ((data >> 26) & 0x1);
      value_[155] = ((data >> 27) & 0x1);
      value_[156] = ((data >> 28) & 0x1);
      value_[157] = ((data >> 29) & 0x1);
      value_[158] = ((data >> 30) & 0x1);
      value_[159] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      value_[160] = (data & 0x1);
      value_[161] = ((data >> 1) & 0x1);
      value_[162] = ((data >> 2) & 0x1);
      value_[163] = ((data >> 3) & 0x1);
      value_[164] = ((data >> 4) & 0x1);
      value_[165] = ((data >> 5) & 0x1);
      value_[166] = ((data >> 6) & 0x1);
      value_[167] = ((data >> 7) & 0x1);
      value_[168] = ((data >> 8) & 0x1);
      value_[169] = ((data >> 9) & 0x1);
      value_[170] = ((data >> 10) & 0x1);
      value_[171] = ((data >> 11) & 0x1);
      value_[172] = ((data >> 12) & 0x1);
      value_[173] = ((data >> 13) & 0x1);
      value_[174] = ((data >> 14) & 0x1);
      value_[175] = ((data >> 15) & 0x1);
      value_[176] = ((data >> 16) & 0x1);
      value_[177] = ((data >> 17) & 0x1);
      value_[178] = ((data >> 18) & 0x1);
      value_[179] = ((data >> 19) & 0x1);
      value_[180] = ((data >> 20) & 0x1);
      value_[181] = ((data >> 21) & 0x1);
      value_[182] = ((data >> 22) & 0x1);
      value_[183] = ((data >> 23) & 0x1);
      value_[184] = ((data >> 24) & 0x1);
      value_[185] = ((data >> 25) & 0x1);
      value_[186] = ((data >> 26) & 0x1);
      value_[187] = ((data >> 27) & 0x1);
      value_[188] = ((data >> 28) & 0x1);
      value_[189] = ((data >> 29) & 0x1);
      value_[190] = ((data >> 30) & 0x1);
      value_[191] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    value_[0] = 0x1;
    value_[1] = 0x1;
    value_[2] = 0x1;
    value_[3] = 0x1;
    value_[4] = 0x1;
    value_[5] = 0x1;
    value_[6] = 0x1;
    value_[7] = 0x1;
    value_[8] = 0x1;
    value_[9] = 0x1;
    value_[10] = 0x1;
    value_[11] = 0x1;
    value_[12] = 0x1;
    value_[13] = 0x1;
    value_[14] = 0x1;
    value_[15] = 0x1;
    value_[16] = 0x1;
    value_[17] = 0x1;
    value_[18] = 0x1;
    value_[19] = 0x1;
    value_[20] = 0x1;
    value_[21] = 0x1;
    value_[22] = 0x1;
    value_[23] = 0x1;
    value_[24] = 0x1;
    value_[25] = 0x1;
    value_[26] = 0x1;
    value_[27] = 0x1;
    value_[28] = 0x1;
    value_[29] = 0x1;
    value_[30] = 0x1;
    value_[31] = 0x1;
    value_[32] = 0x1;
    value_[33] = 0x1;
    value_[34] = 0x1;
    value_[35] = 0x1;
    value_[36] = 0x1;
    value_[37] = 0x1;
    value_[38] = 0x1;
    value_[39] = 0x1;
    value_[40] = 0x1;
    value_[41] = 0x1;
    value_[42] = 0x1;
    value_[43] = 0x1;
    value_[44] = 0x1;
    value_[45] = 0x1;
    value_[46] = 0x1;
    value_[47] = 0x1;
    value_[48] = 0x1;
    value_[49] = 0x1;
    value_[50] = 0x1;
    value_[51] = 0x1;
    value_[52] = 0x1;
    value_[53] = 0x1;
    value_[54] = 0x1;
    value_[55] = 0x1;
    value_[56] = 0x1;
    value_[57] = 0x1;
    value_[58] = 0x1;
    value_[59] = 0x1;
    value_[60] = 0x1;
    value_[61] = 0x1;
    value_[62] = 0x1;
    value_[63] = 0x1;
    value_[64] = 0x1;
    value_[65] = 0x1;
    value_[66] = 0x1;
    value_[67] = 0x1;
    value_[68] = 0x1;
    value_[69] = 0x1;
    value_[70] = 0x1;
    value_[71] = 0x1;
    value_[72] = 0x1;
    value_[73] = 0x1;
    value_[74] = 0x1;
    value_[75] = 0x1;
    value_[76] = 0x1;
    value_[77] = 0x1;
    value_[78] = 0x1;
    value_[79] = 0x1;
    value_[80] = 0x1;
    value_[81] = 0x1;
    value_[82] = 0x1;
    value_[83] = 0x1;
    value_[84] = 0x1;
    value_[85] = 0x1;
    value_[86] = 0x1;
    value_[87] = 0x1;
    value_[88] = 0x1;
    value_[89] = 0x1;
    value_[90] = 0x1;
    value_[91] = 0x1;
    value_[92] = 0x1;
    value_[93] = 0x1;
    value_[94] = 0x1;
    value_[95] = 0x1;
    value_[96] = 0x1;
    value_[97] = 0x1;
    value_[98] = 0x1;
    value_[99] = 0x1;
    value_[100] = 0x1;
    value_[101] = 0x1;
    value_[102] = 0x1;
    value_[103] = 0x1;
    value_[104] = 0x1;
    value_[105] = 0x1;
    value_[106] = 0x1;
    value_[107] = 0x1;
    value_[108] = 0x1;
    value_[109] = 0x1;
    value_[110] = 0x1;
    value_[111] = 0x1;
    value_[112] = 0x1;
    value_[113] = 0x1;
    value_[114] = 0x1;
    value_[115] = 0x1;
    value_[116] = 0x1;
    value_[117] = 0x1;
    value_[118] = 0x1;
    value_[119] = 0x1;
    value_[120] = 0x1;
    value_[121] = 0x1;
    value_[122] = 0x1;
    value_[123] = 0x1;
    value_[124] = 0x1;
    value_[125] = 0x1;
    value_[126] = 0x1;
    value_[127] = 0x1;
    value_[128] = 0x1;
    value_[129] = 0x1;
    value_[130] = 0x1;
    value_[131] = 0x1;
    value_[132] = 0x1;
    value_[133] = 0x1;
    value_[134] = 0x1;
    value_[135] = 0x1;
    value_[136] = 0x1;
    value_[137] = 0x1;
    value_[138] = 0x1;
    value_[139] = 0x1;
    value_[140] = 0x1;
    value_[141] = 0x1;
    value_[142] = 0x1;
    value_[143] = 0x1;
    value_[144] = 0x1;
    value_[145] = 0x1;
    value_[146] = 0x1;
    value_[147] = 0x1;
    value_[148] = 0x1;
    value_[149] = 0x1;
    value_[150] = 0x1;
    value_[151] = 0x1;
    value_[152] = 0x1;
    value_[153] = 0x1;
    value_[154] = 0x1;
    value_[155] = 0x1;
    value_[156] = 0x1;
    value_[157] = 0x1;
    value_[158] = 0x1;
    value_[159] = 0x1;
    value_[160] = 0x1;
    value_[161] = 0x1;
    value_[162] = 0x1;
    value_[163] = 0x1;
    value_[164] = 0x1;
    value_[165] = 0x1;
    value_[166] = 0x1;
    value_[167] = 0x1;
    value_[168] = 0x1;
    value_[169] = 0x1;
    value_[170] = 0x1;
    value_[171] = 0x1;
    value_[172] = 0x1;
    value_[173] = 0x1;
    value_[174] = 0x1;
    value_[175] = 0x1;
    value_[176] = 0x1;
    value_[177] = 0x1;
    value_[178] = 0x1;
    value_[179] = 0x1;
    value_[180] = 0x1;
    value_[181] = 0x1;
    value_[182] = 0x1;
    value_[183] = 0x1;
    value_[184] = 0x1;
    value_[185] = 0x1;
    value_[186] = 0x1;
    value_[187] = 0x1;
    value_[188] = 0x1;
    value_[189] = 0x1;
    value_[190] = 0x1;
    value_[191] = 0x1;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("CaaBlockResetRMutable") + ":\n";
    for (uint32_t f=0;f<192;++f) {
      r += indent_string + "  " + std::string("value") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(value_[f]) ) + "\n";
      all_zeros &= (0 == value_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("CaaBlockResetRMutable") + ":\n";
    for (uint32_t f=0;f<192;++f) {
      r += indent_string + "  " + std::string("value") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(value_[f]) ) + "\n";
      all_zeros &= (0 == value_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 192 > value_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    offset += 0x80000; // to get to tm_caa_top
    offset += 0x220; // to get to block_reset
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_CAA_BLOCK_RESET_R_MUTABLE_H__
