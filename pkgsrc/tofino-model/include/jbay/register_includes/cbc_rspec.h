/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_CBC_RSPEC_H__
#define __REGISTER_INCLUDES_CBC_RSPEC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "cbus_rspec.h"
#include "dru_rspec.h"

namespace jbay {
  namespace register_classes {

class CbcRspec : public model_core::RegisterBlock<RegisterCallback> {
public:
  CbcRspec(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 1652, false, write_callback, read_callback, std::string("CbcRspec"))
    {
    }
  CbcRspec(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "CbcRspec")
    {
    }
public:





  CbusRspec &cbc_cbus() { return cbc_cbus_; }





  DruRspec &cbc_wl0_tx_dr() { return cbc_wl0_tx_dr_; }





  DruRspec &cbc_wl0_cpl_dr() { return cbc_wl0_cpl_dr_; }





  DruRspec &cbc_wl1_tx_dr() { return cbc_wl1_tx_dr_; }





  DruRspec &cbc_wl1_cpl_dr() { return cbc_wl1_cpl_dr_; }





  DruRspec &cbc_rb0_tx_dr() { return cbc_rb0_tx_dr_; }





  DruRspec &cbc_rb0_cpl_dr() { return cbc_rb0_cpl_dr_; }





  DruRspec &cbc_rb1_tx_dr() { return cbc_rb1_tx_dr_; }





  DruRspec &cbc_rb1_cpl_dr() { return cbc_rb1_cpl_dr_; }





  DruRspec &cbc_lq_fm_dr() { return cbc_lq_fm_dr_; }





  DruRspec &cbc_lq_rx_dr() { return cbc_lq_rx_dr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0xf0) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      cbc_cbus_.read( offset, data );
    }
    else if (offset >= 0x400 && offset < 0x434) {
      offset -= 0x400;
      if (read_callback_) read_callback_();
      cbc_wl0_tx_dr_.read( offset, data );
    }
    else if (offset >= 0x440 && offset < 0x474) {
      offset -= 0x440;
      if (read_callback_) read_callback_();
      cbc_wl0_cpl_dr_.read( offset, data );
    }
    else if (offset >= 0x480 && offset < 0x4b4) {
      offset -= 0x480;
      if (read_callback_) read_callback_();
      cbc_wl1_tx_dr_.read( offset, data );
    }
    else if (offset >= 0x4c0 && offset < 0x4f4) {
      offset -= 0x4c0;
      if (read_callback_) read_callback_();
      cbc_wl1_cpl_dr_.read( offset, data );
    }
    else if (offset >= 0x500 && offset < 0x534) {
      offset -= 0x500;
      if (read_callback_) read_callback_();
      cbc_rb0_tx_dr_.read( offset, data );
    }
    else if (offset >= 0x540 && offset < 0x574) {
      offset -= 0x540;
      if (read_callback_) read_callback_();
      cbc_rb0_cpl_dr_.read( offset, data );
    }
    else if (offset >= 0x580 && offset < 0x5b4) {
      offset -= 0x580;
      if (read_callback_) read_callback_();
      cbc_rb1_tx_dr_.read( offset, data );
    }
    else if (offset >= 0x5c0 && offset < 0x5f4) {
      offset -= 0x5c0;
      if (read_callback_) read_callback_();
      cbc_rb1_cpl_dr_.read( offset, data );
    }
    else if (offset >= 0x600 && offset < 0x634) {
      offset -= 0x600;
      if (read_callback_) read_callback_();
      cbc_lq_fm_dr_.read( offset, data );
    }
    else if (offset >= 0x640 && offset < 0x674) {
      offset -= 0x640;
      if (read_callback_) read_callback_();
      cbc_lq_rx_dr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0xf0) {
      offset -= 0x0;
      cbc_cbus_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400 && offset < 0x434) {
      offset -= 0x400;
      cbc_wl0_tx_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x440 && offset < 0x474) {
      offset -= 0x440;
      cbc_wl0_cpl_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x480 && offset < 0x4b4) {
      offset -= 0x480;
      cbc_wl1_tx_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c0 && offset < 0x4f4) {
      offset -= 0x4c0;
      cbc_wl1_cpl_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x500 && offset < 0x534) {
      offset -= 0x500;
      cbc_rb0_tx_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x540 && offset < 0x574) {
      offset -= 0x540;
      cbc_rb0_cpl_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x580 && offset < 0x5b4) {
      offset -= 0x580;
      cbc_rb1_tx_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c0 && offset < 0x5f4) {
      offset -= 0x5c0;
      cbc_rb1_cpl_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x600 && offset < 0x634) {
      offset -= 0x600;
      cbc_lq_fm_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x640 && offset < 0x674) {
      offset -= 0x640;
      cbc_lq_rx_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    cbc_cbus_.reset();
    cbc_wl0_tx_dr_.reset();
    cbc_wl0_cpl_dr_.reset();
    cbc_wl1_tx_dr_.reset();
    cbc_wl1_cpl_dr_.reset();
    cbc_rb0_tx_dr_.reset();
    cbc_rb0_cpl_dr_.reset();
    cbc_rb1_tx_dr_.reset();
    cbc_rb1_cpl_dr_.reset();
    cbc_lq_fm_dr_.reset();
    cbc_lq_rx_dr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0xf0) {
      offset -= 0x0;
      r += cbc_cbus_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400 && offset < 0x434) {
      offset -= 0x400;
      r += cbc_wl0_tx_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x440 && offset < 0x474) {
      offset -= 0x440;
      r += cbc_wl0_cpl_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x480 && offset < 0x4b4) {
      offset -= 0x480;
      r += cbc_wl1_tx_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c0 && offset < 0x4f4) {
      offset -= 0x4c0;
      r += cbc_wl1_cpl_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x500 && offset < 0x534) {
      offset -= 0x500;
      r += cbc_rb0_tx_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x540 && offset < 0x574) {
      offset -= 0x540;
      r += cbc_rb0_cpl_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x580 && offset < 0x5b4) {
      offset -= 0x580;
      r += cbc_rb1_tx_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5c0 && offset < 0x5f4) {
      offset -= 0x5c0;
      r += cbc_rb1_cpl_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x600 && offset < 0x634) {
      offset -= 0x600;
      r += cbc_lq_fm_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x640 && offset < 0x674) {
      offset -= 0x640;
      r += cbc_lq_rx_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += cbc_cbus_.to_string(print_zeros,indent_string) ;
    r += cbc_wl0_tx_dr_.to_string(print_zeros,indent_string) ;
    r += cbc_wl0_cpl_dr_.to_string(print_zeros,indent_string) ;
    r += cbc_wl1_tx_dr_.to_string(print_zeros,indent_string) ;
    r += cbc_wl1_cpl_dr_.to_string(print_zeros,indent_string) ;
    r += cbc_rb0_tx_dr_.to_string(print_zeros,indent_string) ;
    r += cbc_rb0_cpl_dr_.to_string(print_zeros,indent_string) ;
    r += cbc_rb1_tx_dr_.to_string(print_zeros,indent_string) ;
    r += cbc_rb1_cpl_dr_.to_string(print_zeros,indent_string) ;
    r += cbc_lq_fm_dr_.to_string(print_zeros,indent_string) ;
    r += cbc_lq_rx_dr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  CbusRspec cbc_cbus_;
  DruRspec cbc_wl0_tx_dr_;
  DruRspec cbc_wl0_cpl_dr_;
  DruRspec cbc_wl1_tx_dr_;
  DruRspec cbc_wl1_cpl_dr_;
  DruRspec cbc_rb0_tx_dr_;
  DruRspec cbc_rb0_cpl_dr_;
  DruRspec cbc_rb1_tx_dr_;
  DruRspec cbc_rb1_cpl_dr_;
  DruRspec cbc_lq_fm_dr_;
  DruRspec cbc_lq_rx_dr_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x280000; // to get to cbc
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_CBC_RSPEC_H__
