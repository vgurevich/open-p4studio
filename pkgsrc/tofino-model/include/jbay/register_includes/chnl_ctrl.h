/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_CHNL_CTRL_H__
#define __REGISTER_INCLUDES_CHNL_CTRL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class ChnlCtrl : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum IpbRspecEnum {
    kChan0Group,
    kChan1Group,
    kChan2Group,
    kChan3Group,
    kChan4Group,
    kChan5Group,
    kChan6Group,
    kChan7Group
  };
public:
  ChnlCtrl(
      int chipNumber, int index_pipe_addrmap, int index_ipb_prsr4_reg, IpbRspecEnum selector_ipb_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ipb_prsr4_reg, selector_ipb_rspec), 8, false, write_callback, read_callback, std::string("ChnlCtrl")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ipb_prsr4_reg) + "," + boost::lexical_cast<std::string>(selector_ipb_rspec))
    {
    }
  ChnlCtrl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "ChnlCtrl")
    {
    }
public:






  uint8_t &rsvd() { return rsvd_; }






  uint8_t &chnl_clean() { return chnl_clean_; }






  uint8_t &dis_cong() { return dis_cong_; }






  uint8_t &en_tx_xoff() { return en_tx_xoff_; }






  uint8_t &allow_tm_pfc() { return allow_tm_pfc_; }






  uint8_t &allow_tm_xoff() { return allow_tm_xoff_; }





  uint16_t &ingress_port() { return ingress_port_; }





  uint8_t &version() { return version_; }





  uint8_t &overwrite_meta1() { return overwrite_meta1_; }






  uint16_t &init_dprsr_credit() { return init_dprsr_credit_; }





  uint8_t &en_clean_drop() { return en_clean_drop_; }








  uint8_t &en_resubmit_prio_drop() { return en_resubmit_prio_drop_; }






  uint8_t &init_dprsr_barrel_credit() { return init_dprsr_barrel_credit_; }






  uint8_t &mchn_dprsr_port() { return mchn_dprsr_port_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (rsvd_ & 0x1);
      *data |= ((chnl_clean_ & 0x1) << 1);
      *data |= ((dis_cong_ & 0x1) << 2);
      *data |= ((en_tx_xoff_ & 0x1) << 3);
      *data |= ((allow_tm_pfc_ & 0x1) << 4);
      *data |= ((allow_tm_xoff_ & 0x1) << 5);
      *data |= ((ingress_port_ & 0x1ff) << 6);
      *data |= ((version_ & 0x3) << 15);
      *data |= ((overwrite_meta1_ & 0x1) << 17);
      *data |= ((init_dprsr_credit_ & 0x7ff) << 18);
      *data |= ((en_clean_drop_ & 0x1) << 29);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = en_resubmit_prio_drop_;
      *data |= ((init_dprsr_barrel_credit_ & 0xf) << 8);
      *data |= ((mchn_dprsr_port_ & 0x7f) << 12);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      rsvd_ = (data & 0x1);
      chnl_clean_ = ((data >> 1) & 0x1);
      dis_cong_ = ((data >> 2) & 0x1);
      en_tx_xoff_ = ((data >> 3) & 0x1);
      allow_tm_pfc_ = ((data >> 4) & 0x1);
      allow_tm_xoff_ = ((data >> 5) & 0x1);
      ingress_port_ = ((data >> 6) & 0x1ff);
      version_ = ((data >> 15) & 0x3);
      overwrite_meta1_ = ((data >> 17) & 0x1);
      init_dprsr_credit_ = ((data >> 18) & 0x7ff);
      en_clean_drop_ = ((data >> 29) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      en_resubmit_prio_drop_ = data;
      init_dprsr_barrel_credit_ = ((data >> 8) & 0xf);
      mchn_dprsr_port_ = ((data >> 12) & 0x7f);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    rsvd_ = 0x0;
    chnl_clean_ = 0x0;
    dis_cong_ = 0x0;
    en_tx_xoff_ = 0x1;
    allow_tm_pfc_ = 0x1;
    allow_tm_xoff_ = 0x1;
    ingress_port_ = 0x0;
    version_ = 0x0;
    overwrite_meta1_ = 0x0;
    init_dprsr_credit_ = 0x160;
    en_clean_drop_ = 0x1;
    en_resubmit_prio_drop_ = 0x0;
    init_dprsr_barrel_credit_ = 0x8;
    mchn_dprsr_port_ = 0x7f;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("ChnlCtrl") + ":\n";
    r += indent_string + "  " + std::string("rsvd") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rsvd_) ) + "\n";
    all_zeros &= (0 == rsvd_);
    r += indent_string + "  " + std::string("chnl_clean") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_clean_) ) + "\n";
    all_zeros &= (0 == chnl_clean_);
    r += indent_string + "  " + std::string("dis_cong") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dis_cong_) ) + "\n";
    all_zeros &= (0 == dis_cong_);
    r += indent_string + "  " + std::string("en_tx_xoff") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(en_tx_xoff_) ) + "\n";
    all_zeros &= (0 == en_tx_xoff_);
    r += indent_string + "  " + std::string("allow_tm_pfc") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(allow_tm_pfc_) ) + "\n";
    all_zeros &= (0 == allow_tm_pfc_);
    r += indent_string + "  " + std::string("allow_tm_xoff") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(allow_tm_xoff_) ) + "\n";
    all_zeros &= (0 == allow_tm_xoff_);
    r += indent_string + "  " + std::string("ingress_port") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ingress_port_) ) + "\n";
    all_zeros &= (0 == ingress_port_);
    r += indent_string + "  " + std::string("version") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(version_) ) + "\n";
    all_zeros &= (0 == version_);
    r += indent_string + "  " + std::string("overwrite_meta1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(overwrite_meta1_) ) + "\n";
    all_zeros &= (0 == overwrite_meta1_);
    r += indent_string + "  " + std::string("init_dprsr_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(init_dprsr_credit_) ) + "\n";
    all_zeros &= (0 == init_dprsr_credit_);
    r += indent_string + "  " + std::string("en_clean_drop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(en_clean_drop_) ) + "\n";
    all_zeros &= (0 == en_clean_drop_);
    r += indent_string + "  " + std::string("en_resubmit_prio_drop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(en_resubmit_prio_drop_) ) + "\n";
    all_zeros &= (0 == en_resubmit_prio_drop_);
    r += indent_string + "  " + std::string("init_dprsr_barrel_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(init_dprsr_barrel_credit_) ) + "\n";
    all_zeros &= (0 == init_dprsr_barrel_credit_);
    r += indent_string + "  " + std::string("mchn_dprsr_port") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mchn_dprsr_port_) ) + "\n";
    all_zeros &= (0 == mchn_dprsr_port_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("ChnlCtrl") + ":\n";
    r += indent_string + "  " + std::string("rsvd") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rsvd_) ) + "\n";
    all_zeros &= (0 == rsvd_);
    r += indent_string + "  " + std::string("chnl_clean") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_clean_) ) + "\n";
    all_zeros &= (0 == chnl_clean_);
    r += indent_string + "  " + std::string("dis_cong") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dis_cong_) ) + "\n";
    all_zeros &= (0 == dis_cong_);
    r += indent_string + "  " + std::string("en_tx_xoff") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(en_tx_xoff_) ) + "\n";
    all_zeros &= (0 == en_tx_xoff_);
    r += indent_string + "  " + std::string("allow_tm_pfc") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(allow_tm_pfc_) ) + "\n";
    all_zeros &= (0 == allow_tm_pfc_);
    r += indent_string + "  " + std::string("allow_tm_xoff") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(allow_tm_xoff_) ) + "\n";
    all_zeros &= (0 == allow_tm_xoff_);
    r += indent_string + "  " + std::string("ingress_port") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ingress_port_) ) + "\n";
    all_zeros &= (0 == ingress_port_);
    r += indent_string + "  " + std::string("version") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(version_) ) + "\n";
    all_zeros &= (0 == version_);
    r += indent_string + "  " + std::string("overwrite_meta1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(overwrite_meta1_) ) + "\n";
    all_zeros &= (0 == overwrite_meta1_);
    r += indent_string + "  " + std::string("init_dprsr_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(init_dprsr_credit_) ) + "\n";
    all_zeros &= (0 == init_dprsr_credit_);
    r += indent_string + "  " + std::string("en_clean_drop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(en_clean_drop_) ) + "\n";
    all_zeros &= (0 == en_clean_drop_);
    r += indent_string + "  " + std::string("en_resubmit_prio_drop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(en_resubmit_prio_drop_) ) + "\n";
    all_zeros &= (0 == en_resubmit_prio_drop_);
    r += indent_string + "  " + std::string("init_dprsr_barrel_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(init_dprsr_barrel_credit_) ) + "\n";
    all_zeros &= (0 == init_dprsr_barrel_credit_);
    r += indent_string + "  " + std::string("mchn_dprsr_port") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mchn_dprsr_port_) ) + "\n";
    all_zeros &= (0 == mchn_dprsr_port_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t rsvd_;
  uint8_t chnl_clean_;
  uint8_t dis_cong_;
  uint8_t en_tx_xoff_;
  uint8_t allow_tm_pfc_;
  uint8_t allow_tm_xoff_;
  uint16_t ingress_port_;
  uint8_t version_;
  uint8_t overwrite_meta1_;
  uint16_t init_dprsr_credit_;
  uint8_t en_clean_drop_;
  uint8_t en_resubmit_prio_drop_;
  uint8_t init_dprsr_barrel_credit_;
  uint8_t mchn_dprsr_port_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ipb_prsr4_reg, IpbRspecEnum selector_ipb_rspec
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    assert(index_ipb_prsr4_reg < 9);
    offset += index_ipb_prsr4_reg * 0x2000; // ipb_prsr4_reg[]
    switch (selector_ipb_rspec) {
      case kChan0Group:
        offset += 0x800; // to get to chan0_group_chnl_ctrl
        break;
      case kChan1Group:
        offset += 0x900; // to get to chan1_group_chnl_ctrl
        break;
      case kChan2Group:
        offset += 0xa00; // to get to chan2_group_chnl_ctrl
        break;
      case kChan3Group:
        offset += 0xb00; // to get to chan3_group_chnl_ctrl
        break;
      case kChan4Group:
        offset += 0xc00; // to get to chan4_group_chnl_ctrl
        break;
      case kChan5Group:
        offset += 0xd00; // to get to chan5_group_chnl_ctrl
        break;
      case kChan6Group:
        offset += 0xe00; // to get to chan6_group_chnl_ctrl
        break;
      case kChan7Group:
        offset += 0xf00; // to get to chan7_group_chnl_ctrl
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_CHNL_CTRL_H__
