/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_CHNL_DROP_TRUNC_PKT_MUTABLE_H__
#define __REGISTER_INCLUDES_CHNL_DROP_TRUNC_PKT_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class ChnlDropTruncPktMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum IpbRspecEnum {
    kChan0Group,
    kChan1Group,
    kChan2Group,
    kChan3Group,
    kChan4Group,
    kChan5Group,
    kChan6Group,
    kChan7Group
  };
public:
  ChnlDropTruncPktMutable(
      int chipNumber, int index_pipe_addrmap, int index_ipb_prsr4_reg, IpbRspecEnum selector_ipb_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ipb_prsr4_reg, selector_ipb_rspec), 8, true, write_callback, read_callback, std::string("ChnlDropTruncPktMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ipb_prsr4_reg) + "," + boost::lexical_cast<std::string>(selector_ipb_rspec))
    {
    }
  ChnlDropTruncPktMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "ChnlDropTruncPktMutable")
    {
    }
public:





  uint64_t chnl_drop_trunc_pkt() { return chnl_drop_trunc_pkt_; }
  void chnl_drop_trunc_pkt(const uint64_t &v) { chnl_drop_trunc_pkt_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (chnl_drop_trunc_pkt_ & 0xffffffff);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = ((chnl_drop_trunc_pkt_ & UINT64_C(0xf00000000)) >> 32);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      chnl_drop_trunc_pkt_ = ((static_cast<uint64_t>(data) & 0xffffffff) | (chnl_drop_trunc_pkt_ & UINT64_C(0xf00000000)));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      chnl_drop_trunc_pkt_ = (((static_cast<uint64_t>(data) << 32) & UINT64_C(0xf00000000)) | (chnl_drop_trunc_pkt_ & 0xffffffff));
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    chnl_drop_trunc_pkt_ = UINT64_C(0x0);
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("ChnlDropTruncPktMutable") + ":\n";
    r += indent_string + "  " + std::string("chnl_drop_trunc_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_drop_trunc_pkt_) ) + "\n";
    all_zeros &= (0 == chnl_drop_trunc_pkt_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("ChnlDropTruncPktMutable") + ":\n";
    r += indent_string + "  " + std::string("chnl_drop_trunc_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_drop_trunc_pkt_) ) + "\n";
    all_zeros &= (0 == chnl_drop_trunc_pkt_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint64_t chnl_drop_trunc_pkt_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ipb_prsr4_reg, IpbRspecEnum selector_ipb_rspec
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    assert(index_ipb_prsr4_reg < 9);
    offset += index_ipb_prsr4_reg * 0x2000; // ipb_prsr4_reg[]
    switch (selector_ipb_rspec) {
      case kChan0Group:
        offset += 0x888; // to get to chan0_group_chnl_drop_trunc_pkt
        break;
      case kChan1Group:
        offset += 0x988; // to get to chan1_group_chnl_drop_trunc_pkt
        break;
      case kChan2Group:
        offset += 0xa88; // to get to chan2_group_chnl_drop_trunc_pkt
        break;
      case kChan3Group:
        offset += 0xb88; // to get to chan3_group_chnl_drop_trunc_pkt
        break;
      case kChan4Group:
        offset += 0xc88; // to get to chan4_group_chnl_drop_trunc_pkt
        break;
      case kChan5Group:
        offset += 0xd88; // to get to chan5_group_chnl_drop_trunc_pkt
        break;
      case kChan6Group:
        offset += 0xe88; // to get to chan6_group_chnl_drop_trunc_pkt
        break;
      case kChan7Group:
        offset += 0xf88; // to get to chan7_group_chnl_drop_trunc_pkt
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_CHNL_DROP_TRUNC_PKT_MUTABLE_H__
