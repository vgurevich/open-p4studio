/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_CHNL_FIFO_CTRL_H__
#define __REGISTER_INCLUDES_CHNL_FIFO_CTRL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class ChnlFifoCtrl : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum IpbRspecEnum {
    kChan0Group,
    kChan1Group,
    kChan2Group,
    kChan3Group,
    kChan4Group,
    kChan5Group,
    kChan6Group,
    kChan7Group
  };
public:
  ChnlFifoCtrl(
      int chipNumber, int index_pipe_addrmap, int index_ipb_prsr4_reg, IpbRspecEnum selector_ipb_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ipb_prsr4_reg, selector_ipb_rspec), 12, false, write_callback, read_callback, std::string("ChnlFifoCtrl")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ipb_prsr4_reg) + "," + boost::lexical_cast<std::string>(selector_ipb_rspec))
    {
    }
  ChnlFifoCtrl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "ChnlFifoCtrl")
    {
    }
public:
















  uint16_t &pkt_fifo_start() { return pkt_fifo_start_; }





  uint16_t &pkt_fifo_end() { return pkt_fifo_end_; }






  uint16_t &pkt_fifo_size() { return pkt_fifo_size_; }
















  uint8_t &dprsr_barrel_fifo_start() { return dprsr_barrel_fifo_start_; }





  uint8_t &dprsr_barrel_fifo_end() { return dprsr_barrel_fifo_end_; }






  uint16_t &lat_fifo_alm_full_off() { return lat_fifo_alm_full_off_; }





  uint16_t &ppc_fifo_alm_full_off() { return ppc_fifo_alm_full_off_; }





  uint16_t &dppc_fifo_alm_full_off() { return dppc_fifo_alm_full_off_; }





  uint16_t &meta_fifo_alm_full_off() { return meta_fifo_alm_full_off_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (pkt_fifo_start_ & 0x3ff);
      *data |= ((pkt_fifo_end_ & 0x3ff) << 10);
      *data |= ((pkt_fifo_size_ & 0x7ff) << 20);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (dprsr_barrel_fifo_start_ & 0x7);
      *data |= ((dprsr_barrel_fifo_end_ & 0x7) << 3);
      *data |= ((lat_fifo_alm_full_off_ & 0x3ff) << 6);
      *data |= ((ppc_fifo_alm_full_off_ & 0x7ff) << 16);
      *data |= ((dppc_fifo_alm_full_off_ & 0x1f) << 27);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = ((dppc_fifo_alm_full_off_ & 0x7e0) >> 5);
      *data |= ((meta_fifo_alm_full_off_ & 0x1ff) << 6);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      pkt_fifo_start_ = (data & 0x3ff);
      pkt_fifo_end_ = ((data >> 10) & 0x3ff);
      pkt_fifo_size_ = ((data >> 20) & 0x7ff);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      dprsr_barrel_fifo_start_ = (data & 0x7);
      dprsr_barrel_fifo_end_ = ((data >> 3) & 0x7);
      lat_fifo_alm_full_off_ = ((data >> 6) & 0x3ff);
      ppc_fifo_alm_full_off_ = ((data >> 16) & 0x7ff);
      dppc_fifo_alm_full_off_ = (((data >> 27) & 0x1f) | (dppc_fifo_alm_full_off_ & 0x7e0));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      dppc_fifo_alm_full_off_ = (((data << 5) & 0x7e0) | (dppc_fifo_alm_full_off_ & 0x1f));
      meta_fifo_alm_full_off_ = ((data >> 6) & 0x1ff);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    pkt_fifo_start_ = 0x0;
    pkt_fifo_end_ = 0x293;
    pkt_fifo_size_ = 0x528;
    dprsr_barrel_fifo_start_ = 0x0;
    dprsr_barrel_fifo_end_ = 0x7;
    lat_fifo_alm_full_off_ = 0x8;
    ppc_fifo_alm_full_off_ = 0x8;
    dppc_fifo_alm_full_off_ = 0x8;
    meta_fifo_alm_full_off_ = 0x2;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("ChnlFifoCtrl") + ":\n";
    r += indent_string + "  " + std::string("pkt_fifo_start") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkt_fifo_start_) ) + "\n";
    all_zeros &= (0 == pkt_fifo_start_);
    r += indent_string + "  " + std::string("pkt_fifo_end") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkt_fifo_end_) ) + "\n";
    all_zeros &= (0 == pkt_fifo_end_);
    r += indent_string + "  " + std::string("pkt_fifo_size") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkt_fifo_size_) ) + "\n";
    all_zeros &= (0 == pkt_fifo_size_);
    r += indent_string + "  " + std::string("dprsr_barrel_fifo_start") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_barrel_fifo_start_) ) + "\n";
    all_zeros &= (0 == dprsr_barrel_fifo_start_);
    r += indent_string + "  " + std::string("dprsr_barrel_fifo_end") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_barrel_fifo_end_) ) + "\n";
    all_zeros &= (0 == dprsr_barrel_fifo_end_);
    r += indent_string + "  " + std::string("lat_fifo_alm_full_off") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lat_fifo_alm_full_off_) ) + "\n";
    all_zeros &= (0 == lat_fifo_alm_full_off_);
    r += indent_string + "  " + std::string("ppc_fifo_alm_full_off") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ppc_fifo_alm_full_off_) ) + "\n";
    all_zeros &= (0 == ppc_fifo_alm_full_off_);
    r += indent_string + "  " + std::string("dppc_fifo_alm_full_off") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dppc_fifo_alm_full_off_) ) + "\n";
    all_zeros &= (0 == dppc_fifo_alm_full_off_);
    r += indent_string + "  " + std::string("meta_fifo_alm_full_off") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_fifo_alm_full_off_) ) + "\n";
    all_zeros &= (0 == meta_fifo_alm_full_off_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("ChnlFifoCtrl") + ":\n";
    r += indent_string + "  " + std::string("pkt_fifo_start") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkt_fifo_start_) ) + "\n";
    all_zeros &= (0 == pkt_fifo_start_);
    r += indent_string + "  " + std::string("pkt_fifo_end") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkt_fifo_end_) ) + "\n";
    all_zeros &= (0 == pkt_fifo_end_);
    r += indent_string + "  " + std::string("pkt_fifo_size") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkt_fifo_size_) ) + "\n";
    all_zeros &= (0 == pkt_fifo_size_);
    r += indent_string + "  " + std::string("dprsr_barrel_fifo_start") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_barrel_fifo_start_) ) + "\n";
    all_zeros &= (0 == dprsr_barrel_fifo_start_);
    r += indent_string + "  " + std::string("dprsr_barrel_fifo_end") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_barrel_fifo_end_) ) + "\n";
    all_zeros &= (0 == dprsr_barrel_fifo_end_);
    r += indent_string + "  " + std::string("lat_fifo_alm_full_off") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lat_fifo_alm_full_off_) ) + "\n";
    all_zeros &= (0 == lat_fifo_alm_full_off_);
    r += indent_string + "  " + std::string("ppc_fifo_alm_full_off") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ppc_fifo_alm_full_off_) ) + "\n";
    all_zeros &= (0 == ppc_fifo_alm_full_off_);
    r += indent_string + "  " + std::string("dppc_fifo_alm_full_off") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dppc_fifo_alm_full_off_) ) + "\n";
    all_zeros &= (0 == dppc_fifo_alm_full_off_);
    r += indent_string + "  " + std::string("meta_fifo_alm_full_off") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_fifo_alm_full_off_) ) + "\n";
    all_zeros &= (0 == meta_fifo_alm_full_off_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint16_t pkt_fifo_start_;
  uint16_t pkt_fifo_end_;
  uint16_t pkt_fifo_size_;
  uint8_t dprsr_barrel_fifo_start_;
  uint8_t dprsr_barrel_fifo_end_;
  uint16_t lat_fifo_alm_full_off_;
  uint16_t ppc_fifo_alm_full_off_;
  uint16_t dppc_fifo_alm_full_off_;
  uint16_t meta_fifo_alm_full_off_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ipb_prsr4_reg, IpbRspecEnum selector_ipb_rspec
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    assert(index_ipb_prsr4_reg < 9);
    offset += index_ipb_prsr4_reg * 0x2000; // ipb_prsr4_reg[]
    switch (selector_ipb_rspec) {
      case kChan0Group:
        offset += 0x830; // to get to chan0_group_chnl_fifo_ctrl
        break;
      case kChan1Group:
        offset += 0x930; // to get to chan1_group_chnl_fifo_ctrl
        break;
      case kChan2Group:
        offset += 0xa30; // to get to chan2_group_chnl_fifo_ctrl
        break;
      case kChan3Group:
        offset += 0xb30; // to get to chan3_group_chnl_fifo_ctrl
        break;
      case kChan4Group:
        offset += 0xc30; // to get to chan4_group_chnl_fifo_ctrl
        break;
      case kChan5Group:
        offset += 0xd30; // to get to chan5_group_chnl_fifo_ctrl
        break;
      case kChan6Group:
        offset += 0xe30; // to get to chan6_group_chnl_fifo_ctrl
        break;
      case kChan7Group:
        offset += 0xf30; // to get to chan7_group_chnl_fifo_ctrl
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_CHNL_FIFO_CTRL_H__
