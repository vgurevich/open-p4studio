/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_CFG_CRC_ERR_INJ_R_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_CFG_CRC_ERR_INJ_R_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class DprsrCfgCrcErrInjRMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum DprsrRegRspecEnum {
    kHoE,
    kHoI
  };
public:
  DprsrCfgCrcErrInjRMutable(
      int chipNumber, int index_pipe_addrmap, DprsrRegRspecEnum selector_dprsr_reg_rspec, int index_dprsr_ho_e, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, selector_dprsr_reg_rspec, index_dprsr_ho_e), 4, true, write_callback, read_callback, std::string("DprsrCfgCrcErrInjRMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(selector_dprsr_reg_rspec) + "," + boost::lexical_cast<std::string>(index_dprsr_ho_e))
    {
    }
  DprsrCfgCrcErrInjRMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrCfgCrcErrInjRMutable")
    {
    }
public:





  uint8_t chnl_0() { return chnl_0_; }
  void chnl_0(const uint8_t &v) { chnl_0_=v; }





  uint8_t chnl_1() { return chnl_1_; }
  void chnl_1(const uint8_t &v) { chnl_1_=v; }





  uint8_t chnl_2() { return chnl_2_; }
  void chnl_2(const uint8_t &v) { chnl_2_=v; }





  uint8_t chnl_3() { return chnl_3_; }
  void chnl_3(const uint8_t &v) { chnl_3_=v; }





  uint8_t chnl_4() { return chnl_4_; }
  void chnl_4(const uint8_t &v) { chnl_4_=v; }





  uint8_t chnl_5() { return chnl_5_; }
  void chnl_5(const uint8_t &v) { chnl_5_=v; }





  uint8_t chnl_6() { return chnl_6_; }
  void chnl_6(const uint8_t &v) { chnl_6_=v; }





  uint8_t chnl_7() { return chnl_7_; }
  void chnl_7(const uint8_t &v) { chnl_7_=v; }





  uint8_t chnl_8() { return chnl_8_; }
  void chnl_8(const uint8_t &v) { chnl_8_=v; }





  uint8_t chnl_9() { return chnl_9_; }
  void chnl_9(const uint8_t &v) { chnl_9_=v; }





  uint8_t chnl_10() { return chnl_10_; }
  void chnl_10(const uint8_t &v) { chnl_10_=v; }





  uint8_t chnl_11() { return chnl_11_; }
  void chnl_11(const uint8_t &v) { chnl_11_=v; }





  uint8_t chnl_12() { return chnl_12_; }
  void chnl_12(const uint8_t &v) { chnl_12_=v; }





  uint8_t chnl_13() { return chnl_13_; }
  void chnl_13(const uint8_t &v) { chnl_13_=v; }





  uint8_t chnl_14() { return chnl_14_; }
  void chnl_14(const uint8_t &v) { chnl_14_=v; }





  uint8_t chnl_15() { return chnl_15_; }
  void chnl_15(const uint8_t &v) { chnl_15_=v; }





  uint8_t chnl_16() { return chnl_16_; }
  void chnl_16(const uint8_t &v) { chnl_16_=v; }





  uint8_t chnl_17() { return chnl_17_; }
  void chnl_17(const uint8_t &v) { chnl_17_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (chnl_0_ & 0x1);
    *data |= ((chnl_1_ & 0x1) << 1);
    *data |= ((chnl_2_ & 0x1) << 2);
    *data |= ((chnl_3_ & 0x1) << 3);
    *data |= ((chnl_4_ & 0x1) << 4);
    *data |= ((chnl_5_ & 0x1) << 5);
    *data |= ((chnl_6_ & 0x1) << 6);
    *data |= ((chnl_7_ & 0x1) << 7);
    *data |= ((chnl_8_ & 0x1) << 8);
    *data |= ((chnl_9_ & 0x1) << 9);
    *data |= ((chnl_10_ & 0x1) << 10);
    *data |= ((chnl_11_ & 0x1) << 11);
    *data |= ((chnl_12_ & 0x1) << 12);
    *data |= ((chnl_13_ & 0x1) << 13);
    *data |= ((chnl_14_ & 0x1) << 14);
    *data |= ((chnl_15_ & 0x1) << 15);
    *data |= ((chnl_16_ & 0x1) << 16);
    *data |= ((chnl_17_ & 0x1) << 17);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    chnl_0_ = (data & 0x1);
    chnl_1_ = ((data >> 1) & 0x1);
    chnl_2_ = ((data >> 2) & 0x1);
    chnl_3_ = ((data >> 3) & 0x1);
    chnl_4_ = ((data >> 4) & 0x1);
    chnl_5_ = ((data >> 5) & 0x1);
    chnl_6_ = ((data >> 6) & 0x1);
    chnl_7_ = ((data >> 7) & 0x1);
    chnl_8_ = ((data >> 8) & 0x1);
    chnl_9_ = ((data >> 9) & 0x1);
    chnl_10_ = ((data >> 10) & 0x1);
    chnl_11_ = ((data >> 11) & 0x1);
    chnl_12_ = ((data >> 12) & 0x1);
    chnl_13_ = ((data >> 13) & 0x1);
    chnl_14_ = ((data >> 14) & 0x1);
    chnl_15_ = ((data >> 15) & 0x1);
    chnl_16_ = ((data >> 16) & 0x1);
    chnl_17_ = ((data >> 17) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    chnl_0_ = 0x0;
    chnl_1_ = 0x0;
    chnl_2_ = 0x0;
    chnl_3_ = 0x0;
    chnl_4_ = 0x0;
    chnl_5_ = 0x0;
    chnl_6_ = 0x0;
    chnl_7_ = 0x0;
    chnl_8_ = 0x0;
    chnl_9_ = 0x0;
    chnl_10_ = 0x0;
    chnl_11_ = 0x0;
    chnl_12_ = 0x0;
    chnl_13_ = 0x0;
    chnl_14_ = 0x0;
    chnl_15_ = 0x0;
    chnl_16_ = 0x0;
    chnl_17_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrCfgCrcErrInjRMutable") + ":\n";
    r += indent_string + "  " + std::string("chnl_0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_0_) ) + "\n";
    all_zeros &= (0 == chnl_0_);
    r += indent_string + "  " + std::string("chnl_1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_1_) ) + "\n";
    all_zeros &= (0 == chnl_1_);
    r += indent_string + "  " + std::string("chnl_2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_2_) ) + "\n";
    all_zeros &= (0 == chnl_2_);
    r += indent_string + "  " + std::string("chnl_3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_3_) ) + "\n";
    all_zeros &= (0 == chnl_3_);
    r += indent_string + "  " + std::string("chnl_4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_4_) ) + "\n";
    all_zeros &= (0 == chnl_4_);
    r += indent_string + "  " + std::string("chnl_5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_5_) ) + "\n";
    all_zeros &= (0 == chnl_5_);
    r += indent_string + "  " + std::string("chnl_6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_6_) ) + "\n";
    all_zeros &= (0 == chnl_6_);
    r += indent_string + "  " + std::string("chnl_7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_7_) ) + "\n";
    all_zeros &= (0 == chnl_7_);
    r += indent_string + "  " + std::string("chnl_8") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_8_) ) + "\n";
    all_zeros &= (0 == chnl_8_);
    r += indent_string + "  " + std::string("chnl_9") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_9_) ) + "\n";
    all_zeros &= (0 == chnl_9_);
    r += indent_string + "  " + std::string("chnl_10") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_10_) ) + "\n";
    all_zeros &= (0 == chnl_10_);
    r += indent_string + "  " + std::string("chnl_11") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_11_) ) + "\n";
    all_zeros &= (0 == chnl_11_);
    r += indent_string + "  " + std::string("chnl_12") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_12_) ) + "\n";
    all_zeros &= (0 == chnl_12_);
    r += indent_string + "  " + std::string("chnl_13") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_13_) ) + "\n";
    all_zeros &= (0 == chnl_13_);
    r += indent_string + "  " + std::string("chnl_14") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_14_) ) + "\n";
    all_zeros &= (0 == chnl_14_);
    r += indent_string + "  " + std::string("chnl_15") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_15_) ) + "\n";
    all_zeros &= (0 == chnl_15_);
    r += indent_string + "  " + std::string("chnl_16") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_16_) ) + "\n";
    all_zeros &= (0 == chnl_16_);
    r += indent_string + "  " + std::string("chnl_17") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_17_) ) + "\n";
    all_zeros &= (0 == chnl_17_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrCfgCrcErrInjRMutable") + ":\n";
    r += indent_string + "  " + std::string("chnl_0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_0_) ) + "\n";
    all_zeros &= (0 == chnl_0_);
    r += indent_string + "  " + std::string("chnl_1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_1_) ) + "\n";
    all_zeros &= (0 == chnl_1_);
    r += indent_string + "  " + std::string("chnl_2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_2_) ) + "\n";
    all_zeros &= (0 == chnl_2_);
    r += indent_string + "  " + std::string("chnl_3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_3_) ) + "\n";
    all_zeros &= (0 == chnl_3_);
    r += indent_string + "  " + std::string("chnl_4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_4_) ) + "\n";
    all_zeros &= (0 == chnl_4_);
    r += indent_string + "  " + std::string("chnl_5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_5_) ) + "\n";
    all_zeros &= (0 == chnl_5_);
    r += indent_string + "  " + std::string("chnl_6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_6_) ) + "\n";
    all_zeros &= (0 == chnl_6_);
    r += indent_string + "  " + std::string("chnl_7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_7_) ) + "\n";
    all_zeros &= (0 == chnl_7_);
    r += indent_string + "  " + std::string("chnl_8") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_8_) ) + "\n";
    all_zeros &= (0 == chnl_8_);
    r += indent_string + "  " + std::string("chnl_9") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_9_) ) + "\n";
    all_zeros &= (0 == chnl_9_);
    r += indent_string + "  " + std::string("chnl_10") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_10_) ) + "\n";
    all_zeros &= (0 == chnl_10_);
    r += indent_string + "  " + std::string("chnl_11") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_11_) ) + "\n";
    all_zeros &= (0 == chnl_11_);
    r += indent_string + "  " + std::string("chnl_12") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_12_) ) + "\n";
    all_zeros &= (0 == chnl_12_);
    r += indent_string + "  " + std::string("chnl_13") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_13_) ) + "\n";
    all_zeros &= (0 == chnl_13_);
    r += indent_string + "  " + std::string("chnl_14") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_14_) ) + "\n";
    all_zeros &= (0 == chnl_14_);
    r += indent_string + "  " + std::string("chnl_15") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_15_) ) + "\n";
    all_zeros &= (0 == chnl_15_);
    r += indent_string + "  " + std::string("chnl_16") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_16_) ) + "\n";
    all_zeros &= (0 == chnl_16_);
    r += indent_string + "  " + std::string("chnl_17") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_17_) ) + "\n";
    all_zeros &= (0 == chnl_17_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t chnl_0_;
  uint8_t chnl_1_;
  uint8_t chnl_2_;
  uint8_t chnl_3_;
  uint8_t chnl_4_;
  uint8_t chnl_5_;
  uint8_t chnl_6_;
  uint8_t chnl_7_;
  uint8_t chnl_8_;
  uint8_t chnl_9_;
  uint8_t chnl_10_;
  uint8_t chnl_11_;
  uint8_t chnl_12_;
  uint8_t chnl_13_;
  uint8_t chnl_14_;
  uint8_t chnl_15_;
  uint8_t chnl_16_;
  uint8_t chnl_17_;
private:
  static int StartOffset(
      int index_pipe_addrmap, DprsrRegRspecEnum selector_dprsr_reg_rspec, int index_dprsr_ho_e
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    switch (selector_dprsr_reg_rspec) {
      case kHoE:
        offset += 0x38000; // to get to ho_e
        assert(index_dprsr_ho_e < 4);
        offset += index_dprsr_ho_e * 0x2000; // dprsr_ho_e[]
        offset += 0x1000; // to get to out_egr
        offset += 0x150; // to get to cfg_crc_err_inj
        break;
      case kHoI:
        offset += 0x30000; // to get to ho_i
        assert(index_dprsr_ho_e < 4);
        offset += index_dprsr_ho_e * 0x2000; // dprsr_ho_i[]
        offset += 0x1000; // to get to out_ingr
        offset += 0xd0; // to get to cfg_crc_err_inj
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_DPRSR_CFG_CRC_ERR_INJ_R_MUTABLE_H__
