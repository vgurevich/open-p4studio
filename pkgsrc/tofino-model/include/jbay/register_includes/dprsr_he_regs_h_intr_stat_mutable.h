/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_HE_REGS_H_INTR_STAT_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_HE_REGS_H_INTR_STAT_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class DprsrHeRegsHIntrStatMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrHeRegsHIntrStatMutable(
      int chipNumber, int index_pipe_addrmap, int index_dprsr_ho_e, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_dprsr_ho_e), 4, true, write_callback, read_callback, std::string("DprsrHeRegsHIntrStatMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_dprsr_ho_e))
    {
    }
  DprsrHeRegsHIntrStatMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrHeRegsHIntrStatMutable")
    {
    }
public:





  uint8_t mirrtbl_sbe() { return mirrtbl_sbe_; }
  void mirrtbl_sbe(const uint8_t &v) { mirrtbl_sbe_=v; }





  uint8_t mirrtbl_mbe() { return mirrtbl_mbe_; }
  void mirrtbl_mbe(const uint8_t &v) { mirrtbl_mbe_=v; }





  uint8_t ipkt_mac0_sbe() { return ipkt_mac0_sbe_; }
  void ipkt_mac0_sbe(const uint8_t &v) { ipkt_mac0_sbe_=v; }





  uint8_t ipkt_mac0_mbe() { return ipkt_mac0_mbe_; }
  void ipkt_mac0_mbe(const uint8_t &v) { ipkt_mac0_mbe_=v; }





  uint8_t ipkt_mac1_sbe() { return ipkt_mac1_sbe_; }
  void ipkt_mac1_sbe(const uint8_t &v) { ipkt_mac1_sbe_=v; }





  uint8_t ipkt_mac1_mbe() { return ipkt_mac1_mbe_; }
  void ipkt_mac1_mbe(const uint8_t &v) { ipkt_mac1_mbe_=v; }





  uint8_t ipkt_mac2_sbe() { return ipkt_mac2_sbe_; }
  void ipkt_mac2_sbe(const uint8_t &v) { ipkt_mac2_sbe_=v; }





  uint8_t ipkt_mac2_mbe() { return ipkt_mac2_mbe_; }
  void ipkt_mac2_mbe(const uint8_t &v) { ipkt_mac2_mbe_=v; }





  uint8_t cmd_fifo_overrun() { return cmd_fifo_overrun_; }
  void cmd_fifo_overrun(const uint8_t &v) { cmd_fifo_overrun_=v; }





  uint8_t cmd_fifo_underrun() { return cmd_fifo_underrun_; }
  void cmd_fifo_underrun(const uint8_t &v) { cmd_fifo_underrun_=v; }





  uint8_t cred_err() { return cred_err_; }
  void cred_err(const uint8_t &v) { cred_err_=v; }





  uint8_t ipkt_mac0_overflow() { return ipkt_mac0_overflow_; }
  void ipkt_mac0_overflow(const uint8_t &v) { ipkt_mac0_overflow_=v; }





  uint8_t ipkt_mac0_underflow() { return ipkt_mac0_underflow_; }
  void ipkt_mac0_underflow(const uint8_t &v) { ipkt_mac0_underflow_=v; }





  uint8_t ipkt_mac1_overflow() { return ipkt_mac1_overflow_; }
  void ipkt_mac1_overflow(const uint8_t &v) { ipkt_mac1_overflow_=v; }





  uint8_t ipkt_mac1_underflow() { return ipkt_mac1_underflow_; }
  void ipkt_mac1_underflow(const uint8_t &v) { ipkt_mac1_underflow_=v; }





  uint8_t ipkt_mac2_overflow() { return ipkt_mac2_overflow_; }
  void ipkt_mac2_overflow(const uint8_t &v) { ipkt_mac2_overflow_=v; }





  uint8_t ipkt_mac2_underflow() { return ipkt_mac2_underflow_; }
  void ipkt_mac2_underflow(const uint8_t &v) { ipkt_mac2_underflow_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (mirrtbl_sbe_ & 0x1);
    *data |= ((mirrtbl_mbe_ & 0x1) << 1);
    *data |= ((ipkt_mac0_sbe_ & 0x1) << 2);
    *data |= ((ipkt_mac0_mbe_ & 0x1) << 3);
    *data |= ((ipkt_mac1_sbe_ & 0x1) << 4);
    *data |= ((ipkt_mac1_mbe_ & 0x1) << 5);
    *data |= ((ipkt_mac2_sbe_ & 0x1) << 6);
    *data |= ((ipkt_mac2_mbe_ & 0x1) << 7);
    *data |= ((cmd_fifo_overrun_ & 0x1) << 8);
    *data |= ((cmd_fifo_underrun_ & 0x1) << 9);
    *data |= ((cred_err_ & 0x1) << 10);
    *data |= ((ipkt_mac0_overflow_ & 0x1) << 11);
    *data |= ((ipkt_mac0_underflow_ & 0x1) << 12);
    *data |= ((ipkt_mac1_overflow_ & 0x1) << 13);
    *data |= ((ipkt_mac1_underflow_ & 0x1) << 14);
    *data |= ((ipkt_mac2_overflow_ & 0x1) << 15);
    *data |= ((ipkt_mac2_underflow_ & 0x1) << 16);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    mirrtbl_sbe_ &= ~(data & 0x1);
    mirrtbl_mbe_ &= ~((data >> 1) & 0x1);
    ipkt_mac0_sbe_ &= ~((data >> 2) & 0x1);
    ipkt_mac0_mbe_ &= ~((data >> 3) & 0x1);
    ipkt_mac1_sbe_ &= ~((data >> 4) & 0x1);
    ipkt_mac1_mbe_ &= ~((data >> 5) & 0x1);
    ipkt_mac2_sbe_ &= ~((data >> 6) & 0x1);
    ipkt_mac2_mbe_ &= ~((data >> 7) & 0x1);
    cmd_fifo_overrun_ &= ~((data >> 8) & 0x1);
    cmd_fifo_underrun_ &= ~((data >> 9) & 0x1);
    cred_err_ &= ~((data >> 10) & 0x1);
    ipkt_mac0_overflow_ &= ~((data >> 11) & 0x1);
    ipkt_mac0_underflow_ &= ~((data >> 12) & 0x1);
    ipkt_mac1_overflow_ &= ~((data >> 13) & 0x1);
    ipkt_mac1_underflow_ &= ~((data >> 14) & 0x1);
    ipkt_mac2_overflow_ &= ~((data >> 15) & 0x1);
    ipkt_mac2_underflow_ &= ~((data >> 16) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    mirrtbl_sbe_ = 0x0;
    mirrtbl_mbe_ = 0x0;
    ipkt_mac0_sbe_ = 0x0;
    ipkt_mac0_mbe_ = 0x0;
    ipkt_mac1_sbe_ = 0x0;
    ipkt_mac1_mbe_ = 0x0;
    ipkt_mac2_sbe_ = 0x0;
    ipkt_mac2_mbe_ = 0x0;
    cmd_fifo_overrun_ = 0x0;
    cmd_fifo_underrun_ = 0x0;
    cred_err_ = 0x0;
    ipkt_mac0_overflow_ = 0x0;
    ipkt_mac0_underflow_ = 0x0;
    ipkt_mac1_overflow_ = 0x0;
    ipkt_mac1_underflow_ = 0x0;
    ipkt_mac2_overflow_ = 0x0;
    ipkt_mac2_underflow_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrHeRegsHIntrStatMutable") + ":\n";
    r += indent_string + "  " + std::string("mirrtbl_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirrtbl_sbe_) ) + "\n";
    all_zeros &= (0 == mirrtbl_sbe_);
    r += indent_string + "  " + std::string("mirrtbl_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirrtbl_mbe_) ) + "\n";
    all_zeros &= (0 == mirrtbl_mbe_);
    r += indent_string + "  " + std::string("ipkt_mac0_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac0_sbe_) ) + "\n";
    all_zeros &= (0 == ipkt_mac0_sbe_);
    r += indent_string + "  " + std::string("ipkt_mac0_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac0_mbe_) ) + "\n";
    all_zeros &= (0 == ipkt_mac0_mbe_);
    r += indent_string + "  " + std::string("ipkt_mac1_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac1_sbe_) ) + "\n";
    all_zeros &= (0 == ipkt_mac1_sbe_);
    r += indent_string + "  " + std::string("ipkt_mac1_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac1_mbe_) ) + "\n";
    all_zeros &= (0 == ipkt_mac1_mbe_);
    r += indent_string + "  " + std::string("ipkt_mac2_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac2_sbe_) ) + "\n";
    all_zeros &= (0 == ipkt_mac2_sbe_);
    r += indent_string + "  " + std::string("ipkt_mac2_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac2_mbe_) ) + "\n";
    all_zeros &= (0 == ipkt_mac2_mbe_);
    r += indent_string + "  " + std::string("cmd_fifo_overrun") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cmd_fifo_overrun_) ) + "\n";
    all_zeros &= (0 == cmd_fifo_overrun_);
    r += indent_string + "  " + std::string("cmd_fifo_underrun") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cmd_fifo_underrun_) ) + "\n";
    all_zeros &= (0 == cmd_fifo_underrun_);
    r += indent_string + "  " + std::string("cred_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred_err_) ) + "\n";
    all_zeros &= (0 == cred_err_);
    r += indent_string + "  " + std::string("ipkt_mac0_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac0_overflow_) ) + "\n";
    all_zeros &= (0 == ipkt_mac0_overflow_);
    r += indent_string + "  " + std::string("ipkt_mac0_underflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac0_underflow_) ) + "\n";
    all_zeros &= (0 == ipkt_mac0_underflow_);
    r += indent_string + "  " + std::string("ipkt_mac1_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac1_overflow_) ) + "\n";
    all_zeros &= (0 == ipkt_mac1_overflow_);
    r += indent_string + "  " + std::string("ipkt_mac1_underflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac1_underflow_) ) + "\n";
    all_zeros &= (0 == ipkt_mac1_underflow_);
    r += indent_string + "  " + std::string("ipkt_mac2_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac2_overflow_) ) + "\n";
    all_zeros &= (0 == ipkt_mac2_overflow_);
    r += indent_string + "  " + std::string("ipkt_mac2_underflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac2_underflow_) ) + "\n";
    all_zeros &= (0 == ipkt_mac2_underflow_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrHeRegsHIntrStatMutable") + ":\n";
    r += indent_string + "  " + std::string("mirrtbl_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirrtbl_sbe_) ) + "\n";
    all_zeros &= (0 == mirrtbl_sbe_);
    r += indent_string + "  " + std::string("mirrtbl_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirrtbl_mbe_) ) + "\n";
    all_zeros &= (0 == mirrtbl_mbe_);
    r += indent_string + "  " + std::string("ipkt_mac0_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac0_sbe_) ) + "\n";
    all_zeros &= (0 == ipkt_mac0_sbe_);
    r += indent_string + "  " + std::string("ipkt_mac0_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac0_mbe_) ) + "\n";
    all_zeros &= (0 == ipkt_mac0_mbe_);
    r += indent_string + "  " + std::string("ipkt_mac1_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac1_sbe_) ) + "\n";
    all_zeros &= (0 == ipkt_mac1_sbe_);
    r += indent_string + "  " + std::string("ipkt_mac1_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac1_mbe_) ) + "\n";
    all_zeros &= (0 == ipkt_mac1_mbe_);
    r += indent_string + "  " + std::string("ipkt_mac2_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac2_sbe_) ) + "\n";
    all_zeros &= (0 == ipkt_mac2_sbe_);
    r += indent_string + "  " + std::string("ipkt_mac2_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac2_mbe_) ) + "\n";
    all_zeros &= (0 == ipkt_mac2_mbe_);
    r += indent_string + "  " + std::string("cmd_fifo_overrun") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cmd_fifo_overrun_) ) + "\n";
    all_zeros &= (0 == cmd_fifo_overrun_);
    r += indent_string + "  " + std::string("cmd_fifo_underrun") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cmd_fifo_underrun_) ) + "\n";
    all_zeros &= (0 == cmd_fifo_underrun_);
    r += indent_string + "  " + std::string("cred_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred_err_) ) + "\n";
    all_zeros &= (0 == cred_err_);
    r += indent_string + "  " + std::string("ipkt_mac0_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac0_overflow_) ) + "\n";
    all_zeros &= (0 == ipkt_mac0_overflow_);
    r += indent_string + "  " + std::string("ipkt_mac0_underflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac0_underflow_) ) + "\n";
    all_zeros &= (0 == ipkt_mac0_underflow_);
    r += indent_string + "  " + std::string("ipkt_mac1_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac1_overflow_) ) + "\n";
    all_zeros &= (0 == ipkt_mac1_overflow_);
    r += indent_string + "  " + std::string("ipkt_mac1_underflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac1_underflow_) ) + "\n";
    all_zeros &= (0 == ipkt_mac1_underflow_);
    r += indent_string + "  " + std::string("ipkt_mac2_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac2_overflow_) ) + "\n";
    all_zeros &= (0 == ipkt_mac2_overflow_);
    r += indent_string + "  " + std::string("ipkt_mac2_underflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipkt_mac2_underflow_) ) + "\n";
    all_zeros &= (0 == ipkt_mac2_underflow_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t mirrtbl_sbe_;
  uint8_t mirrtbl_mbe_;
  uint8_t ipkt_mac0_sbe_;
  uint8_t ipkt_mac0_mbe_;
  uint8_t ipkt_mac1_sbe_;
  uint8_t ipkt_mac1_mbe_;
  uint8_t ipkt_mac2_sbe_;
  uint8_t ipkt_mac2_mbe_;
  uint8_t cmd_fifo_overrun_;
  uint8_t cmd_fifo_underrun_;
  uint8_t cred_err_;
  uint8_t ipkt_mac0_overflow_;
  uint8_t ipkt_mac0_underflow_;
  uint8_t ipkt_mac1_overflow_;
  uint8_t ipkt_mac1_underflow_;
  uint8_t ipkt_mac2_overflow_;
  uint8_t ipkt_mac2_underflow_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_dprsr_ho_e
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x38000; // to get to ho_e
    assert(index_dprsr_ho_e < 4);
    offset += index_dprsr_ho_e * 0x2000; // dprsr_ho_e[]
    offset += 0xc00; // to get to her
    offset += 0x80; // to get to h_intr_stat
    return offset;
  }

};





  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_DPRSR_HE_REGS_H_INTR_STAT_MUTABLE_H__
