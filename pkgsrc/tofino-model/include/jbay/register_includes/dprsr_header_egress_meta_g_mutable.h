/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_HEADER_EGRESS_META_G_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_HEADER_EGRESS_META_G_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "dprsr_header_egress_meta_g_m_afc_mutable.h"
#include "dprsr_header_egress_meta_g_m_capture_tx_ts_mutable.h"
#include "dprsr_header_egress_meta_g_m_force_tx_err_mutable.h"
#include "dprsr_header_egress_meta_g_m_mirr_c2c_ctrl_mutable.h"
#include "dprsr_header_egress_meta_g_m_mirr_coal_smpl_len_mutable.h"
#include "dprsr_header_egress_meta_g_m_mirr_dond_ctrl_mutable.h"
#include "dprsr_header_egress_meta_g_m_mirr_epipe_port_mutable.h"
#include "dprsr_header_egress_meta_g_m_mirr_hash_mutable.h"
#include "dprsr_header_egress_meta_g_m_mirr_icos_mutable.h"
#include "dprsr_header_egress_meta_g_m_mirr_io_sel_mutable.h"
#include "dprsr_header_egress_meta_g_m_mirr_mc_ctrl_mutable.h"
#include "dprsr_header_egress_meta_g_m_mirr_qid_mutable.h"
#include "dprsr_header_egress_meta_g_m_mtu_trunc_err_f_mutable.h"
#include "dprsr_header_egress_meta_g_m_mtu_trunc_len_mutable.h"
#include "dprsr_header_egress_meta_g_m_tx_pkt_has_offsets_mutable.h"

namespace jbay {
  namespace register_classes {

class DprsrHeaderEgressMetaGMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrHeaderEgressMetaGMutable(
      int chipNumber, int index_pipe_addrmap, int index_dprsr_ho_e, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_dprsr_ho_e), 60, true, write_callback, read_callback, std::string("DprsrHeaderEgressMetaGMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_dprsr_ho_e))
    {
    }
  DprsrHeaderEgressMetaGMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrHeaderEgressMetaGMutable")
    {
    }
public:





  DprsrHeaderEgressMetaGMForceTxErrMutable &meta_m_force_tx_err() { return meta_m_force_tx_err_; }





  DprsrHeaderEgressMetaGMCaptureTxTsMutable &meta_m_capture_tx_ts() { return meta_m_capture_tx_ts_; }





  DprsrHeaderEgressMetaGMTxPktHasOffsetsMutable &meta_m_tx_pkt_has_offsets() { return meta_m_tx_pkt_has_offsets_; }





  DprsrHeaderEgressMetaGMMirrIoSelMutable &meta_m_mirr_io_sel() { return meta_m_mirr_io_sel_; }





  DprsrHeaderEgressMetaGMMirrHashMutable &meta_m_mirr_hash() { return meta_m_mirr_hash_; }





  DprsrHeaderEgressMetaGMMirrEpipePortMutable &meta_m_mirr_epipe_port() { return meta_m_mirr_epipe_port_; }





  DprsrHeaderEgressMetaGMMirrQidMutable &meta_m_mirr_qid() { return meta_m_mirr_qid_; }





  DprsrHeaderEgressMetaGMMirrDondCtrlMutable &meta_m_mirr_dond_ctrl() { return meta_m_mirr_dond_ctrl_; }





  DprsrHeaderEgressMetaGMMirrIcosMutable &meta_m_mirr_icos() { return meta_m_mirr_icos_; }





  DprsrHeaderEgressMetaGMMirrMcCtrlMutable &meta_m_mirr_mc_ctrl() { return meta_m_mirr_mc_ctrl_; }





  DprsrHeaderEgressMetaGMMirrC2cCtrlMutable &meta_m_mirr_c2c_ctrl() { return meta_m_mirr_c2c_ctrl_; }





  DprsrHeaderEgressMetaGMMirrCoalSmplLenMutable &meta_m_mirr_coal_smpl_len() { return meta_m_mirr_coal_smpl_len_; }





  DprsrHeaderEgressMetaGMAfcMutable &meta_m_afc() { return meta_m_afc_; }





  DprsrHeaderEgressMetaGMMtuTruncLenMutable &meta_m_mtu_trunc_len() { return meta_m_mtu_trunc_len_; }





  DprsrHeaderEgressMetaGMMtuTruncErrFMutable &meta_m_mtu_trunc_err_f() { return meta_m_mtu_trunc_err_f_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      meta_m_force_tx_err_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      meta_m_capture_tx_ts_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      meta_m_tx_pkt_has_offsets_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      meta_m_mirr_io_sel_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      meta_m_mirr_hash_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      meta_m_mirr_epipe_port_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      meta_m_mirr_qid_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      meta_m_mirr_dond_ctrl_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      meta_m_mirr_icos_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      meta_m_mirr_mc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      meta_m_mirr_c2c_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      if (read_callback_) read_callback_();
      meta_m_mirr_coal_smpl_len_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      meta_m_afc_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      meta_m_mtu_trunc_len_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      meta_m_mtu_trunc_err_f_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      meta_m_force_tx_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      meta_m_capture_tx_ts_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      meta_m_tx_pkt_has_offsets_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      meta_m_mirr_io_sel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      meta_m_mirr_hash_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      meta_m_mirr_epipe_port_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      meta_m_mirr_qid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      meta_m_mirr_dond_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      meta_m_mirr_icos_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      meta_m_mirr_mc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      meta_m_mirr_c2c_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      meta_m_mirr_coal_smpl_len_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      meta_m_afc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      meta_m_mtu_trunc_len_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      meta_m_mtu_trunc_err_f_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    meta_m_force_tx_err_.reset();
    meta_m_capture_tx_ts_.reset();
    meta_m_tx_pkt_has_offsets_.reset();
    meta_m_mirr_io_sel_.reset();
    meta_m_mirr_hash_.reset();
    meta_m_mirr_epipe_port_.reset();
    meta_m_mirr_qid_.reset();
    meta_m_mirr_dond_ctrl_.reset();
    meta_m_mirr_icos_.reset();
    meta_m_mirr_mc_ctrl_.reset();
    meta_m_mirr_c2c_ctrl_.reset();
    meta_m_mirr_coal_smpl_len_.reset();
    meta_m_afc_.reset();
    meta_m_mtu_trunc_len_.reset();
    meta_m_mtu_trunc_err_f_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += meta_m_force_tx_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += meta_m_capture_tx_ts_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += meta_m_tx_pkt_has_offsets_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += meta_m_mirr_io_sel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += meta_m_mirr_hash_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += meta_m_mirr_epipe_port_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += meta_m_mirr_qid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += meta_m_mirr_dond_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += meta_m_mirr_icos_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += meta_m_mirr_mc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += meta_m_mirr_c2c_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      r += meta_m_mirr_coal_smpl_len_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += meta_m_afc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += meta_m_mtu_trunc_len_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += meta_m_mtu_trunc_err_f_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += meta_m_force_tx_err_.to_string(print_zeros,indent_string) ;
    r += meta_m_capture_tx_ts_.to_string(print_zeros,indent_string) ;
    r += meta_m_tx_pkt_has_offsets_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_io_sel_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_hash_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_epipe_port_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_qid_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_dond_ctrl_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_icos_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_mc_ctrl_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_c2c_ctrl_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_coal_smpl_len_.to_string(print_zeros,indent_string) ;
    r += meta_m_afc_.to_string(print_zeros,indent_string) ;
    r += meta_m_mtu_trunc_len_.to_string(print_zeros,indent_string) ;
    r += meta_m_mtu_trunc_err_f_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrHeaderEgressMetaGMForceTxErrMutable meta_m_force_tx_err_;
  DprsrHeaderEgressMetaGMCaptureTxTsMutable meta_m_capture_tx_ts_;
  DprsrHeaderEgressMetaGMTxPktHasOffsetsMutable meta_m_tx_pkt_has_offsets_;
  DprsrHeaderEgressMetaGMMirrIoSelMutable meta_m_mirr_io_sel_;
  DprsrHeaderEgressMetaGMMirrHashMutable meta_m_mirr_hash_;
  DprsrHeaderEgressMetaGMMirrEpipePortMutable meta_m_mirr_epipe_port_;
  DprsrHeaderEgressMetaGMMirrQidMutable meta_m_mirr_qid_;
  DprsrHeaderEgressMetaGMMirrDondCtrlMutable meta_m_mirr_dond_ctrl_;
  DprsrHeaderEgressMetaGMMirrIcosMutable meta_m_mirr_icos_;
  DprsrHeaderEgressMetaGMMirrMcCtrlMutable meta_m_mirr_mc_ctrl_;
  DprsrHeaderEgressMetaGMMirrC2cCtrlMutable meta_m_mirr_c2c_ctrl_;
  DprsrHeaderEgressMetaGMMirrCoalSmplLenMutable meta_m_mirr_coal_smpl_len_;
  DprsrHeaderEgressMetaGMAfcMutable meta_m_afc_;
  DprsrHeaderEgressMetaGMMtuTruncLenMutable meta_m_mtu_trunc_len_;
  DprsrHeaderEgressMetaGMMtuTruncErrFMutable meta_m_mtu_trunc_err_f_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_dprsr_ho_e
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x38000; // to get to ho_e
    assert(index_dprsr_ho_e < 4);
    offset += index_dprsr_ho_e * 0x2000; // dprsr_ho_e[]
    offset += 0xc00; // to get to her
    offset += 0x200; // to get to meta
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_DPRSR_HEADER_EGRESS_META_G_MUTABLE_H__
