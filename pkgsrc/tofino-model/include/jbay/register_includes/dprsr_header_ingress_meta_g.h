/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_HEADER_INGRESS_META_G_H__
#define __REGISTER_INCLUDES_DPRSR_HEADER_INGRESS_META_G_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "dprsr_header_ingress_meta_g_m_afc.h"
#include "dprsr_header_ingress_meta_g_m_bypss_egr.h"
#include "dprsr_header_ingress_meta_g_m_copy_to_cpu_cos.h"
#include "dprsr_header_ingress_meta_g_m_ct_disable.h"
#include "dprsr_header_ingress_meta_g_m_ct_mcast.h"
#include "dprsr_header_ingress_meta_g_m_deflect_on_drop.h"
#include "dprsr_header_ingress_meta_g_m_hash1.h"
#include "dprsr_header_ingress_meta_g_m_hash2.h"
#include "dprsr_header_ingress_meta_g_m_icos.h"
#include "dprsr_header_ingress_meta_g_m_mirr_c2c_ctrl.h"
#include "dprsr_header_ingress_meta_g_m_mirr_coal_smpl_len.h"
#include "dprsr_header_ingress_meta_g_m_mirr_dond_ctrl.h"
#include "dprsr_header_ingress_meta_g_m_mirr_epipe_port.h"
#include "dprsr_header_ingress_meta_g_m_mirr_hash.h"
#include "dprsr_header_ingress_meta_g_m_mirr_icos.h"
#include "dprsr_header_ingress_meta_g_m_mirr_io_sel.h"
#include "dprsr_header_ingress_meta_g_m_mirr_mc_ctrl.h"
#include "dprsr_header_ingress_meta_g_m_mirr_qid.h"
#include "dprsr_header_ingress_meta_g_m_mtu_trunc_err_f.h"
#include "dprsr_header_ingress_meta_g_m_mtu_trunc_len.h"
#include "dprsr_header_ingress_meta_g_m_pkt_color.h"
#include "dprsr_header_ingress_meta_g_m_qid.h"
#include "dprsr_header_ingress_meta_g_m_rid.h"
#include "dprsr_header_ingress_meta_g_m_xid_l1.h"
#include "dprsr_header_ingress_meta_g_m_xid_l2.h"
#include "dprsr_pre_version_r.h"

namespace jbay {
  namespace register_classes {

class DprsrHeaderIngressMetaG : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrHeaderIngressMetaG(
      int chipNumber, int index_pipe_addrmap, int index_dprsr_ho_i, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_dprsr_ho_i), 104, false, write_callback, read_callback, std::string("DprsrHeaderIngressMetaG")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_dprsr_ho_i))
    {
    }
  DprsrHeaderIngressMetaG(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DprsrHeaderIngressMetaG")
    {
    }
public:





  DprsrHeaderIngressMetaGMHash1 &meta_m_hash1() { return meta_m_hash1_; }





  DprsrHeaderIngressMetaGMHash2 &meta_m_hash2() { return meta_m_hash2_; }





  DprsrHeaderIngressMetaGMCopyToCpuCos &meta_m_copy_to_cpu_cos() { return meta_m_copy_to_cpu_cos_; }





  DprsrHeaderIngressMetaGMDeflectOnDrop &meta_m_deflect_on_drop() { return meta_m_deflect_on_drop_; }





  DprsrHeaderIngressMetaGMIcos &meta_m_icos() { return meta_m_icos_; }





  DprsrHeaderIngressMetaGMPktColor &meta_m_pkt_color() { return meta_m_pkt_color_; }





  DprsrHeaderIngressMetaGMQid &meta_m_qid() { return meta_m_qid_; }





  DprsrHeaderIngressMetaGMXidL1 &meta_m_xid_l1() { return meta_m_xid_l1_; }





  DprsrHeaderIngressMetaGMXidL2 &meta_m_xid_l2() { return meta_m_xid_l2_; }





  DprsrHeaderIngressMetaGMRid &meta_m_rid() { return meta_m_rid_; }





  DprsrHeaderIngressMetaGMBypssEgr &meta_m_bypss_egr() { return meta_m_bypss_egr_; }





  DprsrHeaderIngressMetaGMCtDisable &meta_m_ct_disable() { return meta_m_ct_disable_; }





  DprsrHeaderIngressMetaGMCtMcast &meta_m_ct_mcast() { return meta_m_ct_mcast_; }





  DprsrHeaderIngressMetaGMMirrIoSel &meta_m_mirr_io_sel() { return meta_m_mirr_io_sel_; }





  DprsrHeaderIngressMetaGMMirrHash &meta_m_mirr_hash() { return meta_m_mirr_hash_; }





  DprsrHeaderIngressMetaGMMirrEpipePort &meta_m_mirr_epipe_port() { return meta_m_mirr_epipe_port_; }





  DprsrHeaderIngressMetaGMMirrQid &meta_m_mirr_qid() { return meta_m_mirr_qid_; }





  DprsrHeaderIngressMetaGMMirrDondCtrl &meta_m_mirr_dond_ctrl() { return meta_m_mirr_dond_ctrl_; }





  DprsrHeaderIngressMetaGMMirrIcos &meta_m_mirr_icos() { return meta_m_mirr_icos_; }





  DprsrHeaderIngressMetaGMMirrMcCtrl &meta_m_mirr_mc_ctrl() { return meta_m_mirr_mc_ctrl_; }





  DprsrHeaderIngressMetaGMMirrC2cCtrl &meta_m_mirr_c2c_ctrl() { return meta_m_mirr_c2c_ctrl_; }





  DprsrHeaderIngressMetaGMMirrCoalSmplLen &meta_m_mirr_coal_smpl_len() { return meta_m_mirr_coal_smpl_len_; }





  DprsrHeaderIngressMetaGMAfc &meta_m_afc() { return meta_m_afc_; }





  DprsrHeaderIngressMetaGMMtuTruncLen &meta_m_mtu_trunc_len() { return meta_m_mtu_trunc_len_; }





  DprsrHeaderIngressMetaGMMtuTruncErrF &meta_m_mtu_trunc_err_f() { return meta_m_mtu_trunc_err_f_; }





  DprsrPreVersionR &meta_pre_version() { return meta_pre_version_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      meta_m_hash1_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      meta_m_hash2_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      meta_m_copy_to_cpu_cos_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      meta_m_deflect_on_drop_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      meta_m_icos_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      meta_m_pkt_color_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      meta_m_qid_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      meta_m_xid_l1_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      meta_m_xid_l2_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      meta_m_rid_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      meta_m_bypss_egr_.read( offset, data );
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      if (read_callback_) read_callback_();
      meta_m_ct_disable_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      meta_m_ct_mcast_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      meta_m_mirr_io_sel_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      meta_m_mirr_hash_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      meta_m_mirr_epipe_port_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      meta_m_mirr_qid_.read( offset, data );
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      if (read_callback_) read_callback_();
      meta_m_mirr_dond_ctrl_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      meta_m_mirr_icos_.read( offset, data );
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      if (read_callback_) read_callback_();
      meta_m_mirr_mc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      meta_m_mirr_c2c_ctrl_.read( offset, data );
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      if (read_callback_) read_callback_();
      meta_m_mirr_coal_smpl_len_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      meta_m_afc_.read( offset, data );
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      if (read_callback_) read_callback_();
      meta_m_mtu_trunc_len_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      meta_m_mtu_trunc_err_f_.read( offset, data );
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      if (read_callback_) read_callback_();
      meta_pre_version_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      meta_m_hash1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      meta_m_hash2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      meta_m_copy_to_cpu_cos_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      meta_m_deflect_on_drop_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      meta_m_icos_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      meta_m_pkt_color_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      meta_m_qid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      meta_m_xid_l1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      meta_m_xid_l2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      meta_m_rid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      meta_m_bypss_egr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      meta_m_ct_disable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      meta_m_ct_mcast_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      meta_m_mirr_io_sel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      meta_m_mirr_hash_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      meta_m_mirr_epipe_port_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      meta_m_mirr_qid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      meta_m_mirr_dond_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      meta_m_mirr_icos_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      meta_m_mirr_mc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      meta_m_mirr_c2c_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      meta_m_mirr_coal_smpl_len_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      meta_m_afc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      meta_m_mtu_trunc_len_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      meta_m_mtu_trunc_err_f_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      meta_pre_version_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    meta_m_hash1_.reset();
    meta_m_hash2_.reset();
    meta_m_copy_to_cpu_cos_.reset();
    meta_m_deflect_on_drop_.reset();
    meta_m_icos_.reset();
    meta_m_pkt_color_.reset();
    meta_m_qid_.reset();
    meta_m_xid_l1_.reset();
    meta_m_xid_l2_.reset();
    meta_m_rid_.reset();
    meta_m_bypss_egr_.reset();
    meta_m_ct_disable_.reset();
    meta_m_ct_mcast_.reset();
    meta_m_mirr_io_sel_.reset();
    meta_m_mirr_hash_.reset();
    meta_m_mirr_epipe_port_.reset();
    meta_m_mirr_qid_.reset();
    meta_m_mirr_dond_ctrl_.reset();
    meta_m_mirr_icos_.reset();
    meta_m_mirr_mc_ctrl_.reset();
    meta_m_mirr_c2c_ctrl_.reset();
    meta_m_mirr_coal_smpl_len_.reset();
    meta_m_afc_.reset();
    meta_m_mtu_trunc_len_.reset();
    meta_m_mtu_trunc_err_f_.reset();
    meta_pre_version_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += meta_m_hash1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += meta_m_hash2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += meta_m_copy_to_cpu_cos_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += meta_m_deflect_on_drop_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += meta_m_icos_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += meta_m_pkt_color_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += meta_m_qid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += meta_m_xid_l1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += meta_m_xid_l2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += meta_m_rid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += meta_m_bypss_egr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      r += meta_m_ct_disable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += meta_m_ct_mcast_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += meta_m_mirr_io_sel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += meta_m_mirr_hash_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += meta_m_mirr_epipe_port_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      r += meta_m_mirr_qid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      r += meta_m_mirr_dond_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      r += meta_m_mirr_icos_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      r += meta_m_mirr_mc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      r += meta_m_mirr_c2c_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      r += meta_m_mirr_coal_smpl_len_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      r += meta_m_afc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      r += meta_m_mtu_trunc_len_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      r += meta_m_mtu_trunc_err_f_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      r += meta_pre_version_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += meta_m_hash1_.to_string(print_zeros,indent_string) ;
    r += meta_m_hash2_.to_string(print_zeros,indent_string) ;
    r += meta_m_copy_to_cpu_cos_.to_string(print_zeros,indent_string) ;
    r += meta_m_deflect_on_drop_.to_string(print_zeros,indent_string) ;
    r += meta_m_icos_.to_string(print_zeros,indent_string) ;
    r += meta_m_pkt_color_.to_string(print_zeros,indent_string) ;
    r += meta_m_qid_.to_string(print_zeros,indent_string) ;
    r += meta_m_xid_l1_.to_string(print_zeros,indent_string) ;
    r += meta_m_xid_l2_.to_string(print_zeros,indent_string) ;
    r += meta_m_rid_.to_string(print_zeros,indent_string) ;
    r += meta_m_bypss_egr_.to_string(print_zeros,indent_string) ;
    r += meta_m_ct_disable_.to_string(print_zeros,indent_string) ;
    r += meta_m_ct_mcast_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_io_sel_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_hash_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_epipe_port_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_qid_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_dond_ctrl_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_icos_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_mc_ctrl_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_c2c_ctrl_.to_string(print_zeros,indent_string) ;
    r += meta_m_mirr_coal_smpl_len_.to_string(print_zeros,indent_string) ;
    r += meta_m_afc_.to_string(print_zeros,indent_string) ;
    r += meta_m_mtu_trunc_len_.to_string(print_zeros,indent_string) ;
    r += meta_m_mtu_trunc_err_f_.to_string(print_zeros,indent_string) ;
    r += meta_pre_version_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrHeaderIngressMetaGMHash1 meta_m_hash1_;
  DprsrHeaderIngressMetaGMHash2 meta_m_hash2_;
  DprsrHeaderIngressMetaGMCopyToCpuCos meta_m_copy_to_cpu_cos_;
  DprsrHeaderIngressMetaGMDeflectOnDrop meta_m_deflect_on_drop_;
  DprsrHeaderIngressMetaGMIcos meta_m_icos_;
  DprsrHeaderIngressMetaGMPktColor meta_m_pkt_color_;
  DprsrHeaderIngressMetaGMQid meta_m_qid_;
  DprsrHeaderIngressMetaGMXidL1 meta_m_xid_l1_;
  DprsrHeaderIngressMetaGMXidL2 meta_m_xid_l2_;
  DprsrHeaderIngressMetaGMRid meta_m_rid_;
  DprsrHeaderIngressMetaGMBypssEgr meta_m_bypss_egr_;
  DprsrHeaderIngressMetaGMCtDisable meta_m_ct_disable_;
  DprsrHeaderIngressMetaGMCtMcast meta_m_ct_mcast_;
  DprsrHeaderIngressMetaGMMirrIoSel meta_m_mirr_io_sel_;
  DprsrHeaderIngressMetaGMMirrHash meta_m_mirr_hash_;
  DprsrHeaderIngressMetaGMMirrEpipePort meta_m_mirr_epipe_port_;
  DprsrHeaderIngressMetaGMMirrQid meta_m_mirr_qid_;
  DprsrHeaderIngressMetaGMMirrDondCtrl meta_m_mirr_dond_ctrl_;
  DprsrHeaderIngressMetaGMMirrIcos meta_m_mirr_icos_;
  DprsrHeaderIngressMetaGMMirrMcCtrl meta_m_mirr_mc_ctrl_;
  DprsrHeaderIngressMetaGMMirrC2cCtrl meta_m_mirr_c2c_ctrl_;
  DprsrHeaderIngressMetaGMMirrCoalSmplLen meta_m_mirr_coal_smpl_len_;
  DprsrHeaderIngressMetaGMAfc meta_m_afc_;
  DprsrHeaderIngressMetaGMMtuTruncLen meta_m_mtu_trunc_len_;
  DprsrHeaderIngressMetaGMMtuTruncErrF meta_m_mtu_trunc_err_f_;
  DprsrPreVersionR meta_pre_version_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_dprsr_ho_i
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x30000; // to get to ho_i
    assert(index_dprsr_ho_i < 4);
    offset += index_dprsr_ho_i * 0x2000; // dprsr_ho_i[]
    offset += 0xc00; // to get to hir
    offset += 0x200; // to get to meta
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_DPRSR_HEADER_INGRESS_META_G_H__
