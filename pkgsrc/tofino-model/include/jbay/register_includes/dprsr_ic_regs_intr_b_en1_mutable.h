/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_IC_REGS_INTR_B_EN1_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_IC_REGS_INTR_B_EN1_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class DprsrIcRegsIntrBEn1Mutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrIcRegsIntrBEn1Mutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, true, write_callback, read_callback, std::string("DprsrIcRegsIntrBEn1Mutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrIcRegsIntrBEn1Mutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrIcRegsIntrBEn1Mutable")
    {
    }
public:
  uint8_t i_meta_sbe() { return i_meta_sbe_; }
  void i_meta_sbe(const uint8_t &v) { i_meta_sbe_=v; }
  uint8_t i_meta_mbe() { return i_meta_mbe_; }
  void i_meta_mbe(const uint8_t &v) { i_meta_mbe_=v; }
  uint8_t e_meta_sbe() { return e_meta_sbe_; }
  void e_meta_sbe(const uint8_t &v) { e_meta_sbe_=v; }
  uint8_t e_meta_mbe() { return e_meta_mbe_; }
  void e_meta_mbe(const uint8_t &v) { e_meta_mbe_=v; }
  uint8_t phv32_sbe() { return phv32_sbe_; }
  void phv32_sbe(const uint8_t &v) { phv32_sbe_=v; }
  uint8_t phv32_mbe() { return phv32_mbe_; }
  void phv32_mbe(const uint8_t &v) { phv32_mbe_=v; }
  uint8_t phv16_sbe() { return phv16_sbe_; }
  void phv16_sbe(const uint8_t &v) { phv16_sbe_=v; }
  uint8_t phv16_mbe() { return phv16_mbe_; }
  void phv16_mbe(const uint8_t &v) { phv16_mbe_=v; }
  uint8_t phv8_sbe() { return phv8_sbe_; }
  void phv8_sbe(const uint8_t &v) { phv8_sbe_=v; }
  uint8_t phv8_mbe() { return phv8_mbe_; }
  void phv8_mbe(const uint8_t &v) { phv8_mbe_=v; }
  uint8_t i_volts_sbe() { return i_volts_sbe_; }
  void i_volts_sbe(const uint8_t &v) { i_volts_sbe_=v; }
  uint8_t i_volts_mbe() { return i_volts_mbe_; }
  void i_volts_mbe(const uint8_t &v) { i_volts_mbe_=v; }
  uint8_t e_volts_sbe() { return e_volts_sbe_; }
  void e_volts_sbe(const uint8_t &v) { e_volts_sbe_=v; }
  uint8_t e_volts_mbe() { return e_volts_mbe_; }
  void e_volts_mbe(const uint8_t &v) { e_volts_mbe_=v; }
  uint8_t i_fdinfo_sbe() { return i_fdinfo_sbe_; }
  void i_fdinfo_sbe(const uint8_t &v) { i_fdinfo_sbe_=v; }
  uint8_t i_fdinfo_mbe() { return i_fdinfo_mbe_; }
  void i_fdinfo_mbe(const uint8_t &v) { i_fdinfo_mbe_=v; }
  uint8_t e_fdinfo_sbe() { return e_fdinfo_sbe_; }
  void e_fdinfo_sbe(const uint8_t &v) { e_fdinfo_sbe_=v; }
  uint8_t e_fdinfo_mbe() { return e_fdinfo_mbe_; }
  void e_fdinfo_mbe(const uint8_t &v) { e_fdinfo_mbe_=v; }
  uint8_t i_cmd_sbe() { return i_cmd_sbe_; }
  void i_cmd_sbe(const uint8_t &v) { i_cmd_sbe_=v; }
  uint8_t i_cmd_mbe() { return i_cmd_mbe_; }
  void i_cmd_mbe(const uint8_t &v) { i_cmd_mbe_=v; }
  uint8_t e_cmd_sbe() { return e_cmd_sbe_; }
  void e_cmd_sbe(const uint8_t &v) { e_cmd_sbe_=v; }
  uint8_t e_cmd_mbe() { return e_cmd_mbe_; }
  void e_cmd_mbe(const uint8_t &v) { e_cmd_mbe_=v; }
  uint8_t i_inp_buff_overflow() { return i_inp_buff_overflow_; }
  void i_inp_buff_overflow(const uint8_t &v) { i_inp_buff_overflow_=v; }
  uint8_t e_inp_buff_overflow() { return e_inp_buff_overflow_; }
  void e_inp_buff_overflow(const uint8_t &v) { e_inp_buff_overflow_=v; }
  uint8_t i_freelist_empty() { return i_freelist_empty_; }
  void i_freelist_empty(const uint8_t &v) { i_freelist_empty_=v; }
  uint8_t e_freelist_empty() { return e_freelist_empty_; }
  void e_freelist_empty(const uint8_t &v) { e_freelist_empty_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (i_meta_sbe_ & 0x1);
    *data |= ((i_meta_mbe_ & 0x1) << 1);
    *data |= ((e_meta_sbe_ & 0x1) << 2);
    *data |= ((e_meta_mbe_ & 0x1) << 3);
    *data |= ((phv32_sbe_ & 0x1) << 4);
    *data |= ((phv32_mbe_ & 0x1) << 5);
    *data |= ((phv16_sbe_ & 0x1) << 6);
    *data |= ((phv16_mbe_ & 0x1) << 7);
    *data |= ((phv8_sbe_ & 0x1) << 8);
    *data |= ((phv8_mbe_ & 0x1) << 9);
    *data |= ((i_volts_sbe_ & 0x1) << 10);
    *data |= ((i_volts_mbe_ & 0x1) << 11);
    *data |= ((e_volts_sbe_ & 0x1) << 12);
    *data |= ((e_volts_mbe_ & 0x1) << 13);
    *data |= ((i_fdinfo_sbe_ & 0x1) << 14);
    *data |= ((i_fdinfo_mbe_ & 0x1) << 15);
    *data |= ((e_fdinfo_sbe_ & 0x1) << 16);
    *data |= ((e_fdinfo_mbe_ & 0x1) << 17);
    *data |= ((i_cmd_sbe_ & 0x1) << 18);
    *data |= ((i_cmd_mbe_ & 0x1) << 19);
    *data |= ((e_cmd_sbe_ & 0x1) << 20);
    *data |= ((e_cmd_mbe_ & 0x1) << 21);
    *data |= ((i_inp_buff_overflow_ & 0x1) << 22);
    *data |= ((e_inp_buff_overflow_ & 0x1) << 23);
    *data |= ((i_freelist_empty_ & 0x1) << 24);
    *data |= ((e_freelist_empty_ & 0x1) << 25);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    i_meta_sbe_ = (data & 0x1);
    i_meta_mbe_ = ((data >> 1) & 0x1);
    e_meta_sbe_ = ((data >> 2) & 0x1);
    e_meta_mbe_ = ((data >> 3) & 0x1);
    phv32_sbe_ = ((data >> 4) & 0x1);
    phv32_mbe_ = ((data >> 5) & 0x1);
    phv16_sbe_ = ((data >> 6) & 0x1);
    phv16_mbe_ = ((data >> 7) & 0x1);
    phv8_sbe_ = ((data >> 8) & 0x1);
    phv8_mbe_ = ((data >> 9) & 0x1);
    i_volts_sbe_ = ((data >> 10) & 0x1);
    i_volts_mbe_ = ((data >> 11) & 0x1);
    e_volts_sbe_ = ((data >> 12) & 0x1);
    e_volts_mbe_ = ((data >> 13) & 0x1);
    i_fdinfo_sbe_ = ((data >> 14) & 0x1);
    i_fdinfo_mbe_ = ((data >> 15) & 0x1);
    e_fdinfo_sbe_ = ((data >> 16) & 0x1);
    e_fdinfo_mbe_ = ((data >> 17) & 0x1);
    i_cmd_sbe_ = ((data >> 18) & 0x1);
    i_cmd_mbe_ = ((data >> 19) & 0x1);
    e_cmd_sbe_ = ((data >> 20) & 0x1);
    e_cmd_mbe_ = ((data >> 21) & 0x1);
    i_inp_buff_overflow_ = ((data >> 22) & 0x1);
    e_inp_buff_overflow_ = ((data >> 23) & 0x1);
    i_freelist_empty_ = ((data >> 24) & 0x1);
    e_freelist_empty_ = ((data >> 25) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    i_meta_sbe_ = 0x0;
    i_meta_mbe_ = 0x0;
    e_meta_sbe_ = 0x0;
    e_meta_mbe_ = 0x0;
    phv32_sbe_ = 0x0;
    phv32_mbe_ = 0x0;
    phv16_sbe_ = 0x0;
    phv16_mbe_ = 0x0;
    phv8_sbe_ = 0x0;
    phv8_mbe_ = 0x0;
    i_volts_sbe_ = 0x0;
    i_volts_mbe_ = 0x0;
    e_volts_sbe_ = 0x0;
    e_volts_mbe_ = 0x0;
    i_fdinfo_sbe_ = 0x0;
    i_fdinfo_mbe_ = 0x0;
    e_fdinfo_sbe_ = 0x0;
    e_fdinfo_mbe_ = 0x0;
    i_cmd_sbe_ = 0x0;
    i_cmd_mbe_ = 0x0;
    e_cmd_sbe_ = 0x0;
    e_cmd_mbe_ = 0x0;
    i_inp_buff_overflow_ = 0x0;
    e_inp_buff_overflow_ = 0x0;
    i_freelist_empty_ = 0x0;
    e_freelist_empty_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrIcRegsIntrBEn1Mutable") + ":\n";
    r += indent_string + "  " + std::string("i_meta_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_meta_sbe_) ) + "\n";
    all_zeros &= (0 == i_meta_sbe_);
    r += indent_string + "  " + std::string("i_meta_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_meta_mbe_) ) + "\n";
    all_zeros &= (0 == i_meta_mbe_);
    r += indent_string + "  " + std::string("e_meta_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_meta_sbe_) ) + "\n";
    all_zeros &= (0 == e_meta_sbe_);
    r += indent_string + "  " + std::string("e_meta_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_meta_mbe_) ) + "\n";
    all_zeros &= (0 == e_meta_mbe_);
    r += indent_string + "  " + std::string("phv32_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv32_sbe_) ) + "\n";
    all_zeros &= (0 == phv32_sbe_);
    r += indent_string + "  " + std::string("phv32_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv32_mbe_) ) + "\n";
    all_zeros &= (0 == phv32_mbe_);
    r += indent_string + "  " + std::string("phv16_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv16_sbe_) ) + "\n";
    all_zeros &= (0 == phv16_sbe_);
    r += indent_string + "  " + std::string("phv16_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv16_mbe_) ) + "\n";
    all_zeros &= (0 == phv16_mbe_);
    r += indent_string + "  " + std::string("phv8_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv8_sbe_) ) + "\n";
    all_zeros &= (0 == phv8_sbe_);
    r += indent_string + "  " + std::string("phv8_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv8_mbe_) ) + "\n";
    all_zeros &= (0 == phv8_mbe_);
    r += indent_string + "  " + std::string("i_volts_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_volts_sbe_) ) + "\n";
    all_zeros &= (0 == i_volts_sbe_);
    r += indent_string + "  " + std::string("i_volts_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_volts_mbe_) ) + "\n";
    all_zeros &= (0 == i_volts_mbe_);
    r += indent_string + "  " + std::string("e_volts_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_volts_sbe_) ) + "\n";
    all_zeros &= (0 == e_volts_sbe_);
    r += indent_string + "  " + std::string("e_volts_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_volts_mbe_) ) + "\n";
    all_zeros &= (0 == e_volts_mbe_);
    r += indent_string + "  " + std::string("i_fdinfo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_fdinfo_sbe_) ) + "\n";
    all_zeros &= (0 == i_fdinfo_sbe_);
    r += indent_string + "  " + std::string("i_fdinfo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_fdinfo_mbe_) ) + "\n";
    all_zeros &= (0 == i_fdinfo_mbe_);
    r += indent_string + "  " + std::string("e_fdinfo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_fdinfo_sbe_) ) + "\n";
    all_zeros &= (0 == e_fdinfo_sbe_);
    r += indent_string + "  " + std::string("e_fdinfo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_fdinfo_mbe_) ) + "\n";
    all_zeros &= (0 == e_fdinfo_mbe_);
    r += indent_string + "  " + std::string("i_cmd_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_cmd_sbe_) ) + "\n";
    all_zeros &= (0 == i_cmd_sbe_);
    r += indent_string + "  " + std::string("i_cmd_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_cmd_mbe_) ) + "\n";
    all_zeros &= (0 == i_cmd_mbe_);
    r += indent_string + "  " + std::string("e_cmd_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_cmd_sbe_) ) + "\n";
    all_zeros &= (0 == e_cmd_sbe_);
    r += indent_string + "  " + std::string("e_cmd_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_cmd_mbe_) ) + "\n";
    all_zeros &= (0 == e_cmd_mbe_);
    r += indent_string + "  " + std::string("i_inp_buff_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_inp_buff_overflow_) ) + "\n";
    all_zeros &= (0 == i_inp_buff_overflow_);
    r += indent_string + "  " + std::string("e_inp_buff_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_inp_buff_overflow_) ) + "\n";
    all_zeros &= (0 == e_inp_buff_overflow_);
    r += indent_string + "  " + std::string("i_freelist_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_freelist_empty_) ) + "\n";
    all_zeros &= (0 == i_freelist_empty_);
    r += indent_string + "  " + std::string("e_freelist_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_freelist_empty_) ) + "\n";
    all_zeros &= (0 == e_freelist_empty_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrIcRegsIntrBEn1Mutable") + ":\n";
    r += indent_string + "  " + std::string("i_meta_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_meta_sbe_) ) + "\n";
    all_zeros &= (0 == i_meta_sbe_);
    r += indent_string + "  " + std::string("i_meta_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_meta_mbe_) ) + "\n";
    all_zeros &= (0 == i_meta_mbe_);
    r += indent_string + "  " + std::string("e_meta_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_meta_sbe_) ) + "\n";
    all_zeros &= (0 == e_meta_sbe_);
    r += indent_string + "  " + std::string("e_meta_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_meta_mbe_) ) + "\n";
    all_zeros &= (0 == e_meta_mbe_);
    r += indent_string + "  " + std::string("phv32_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv32_sbe_) ) + "\n";
    all_zeros &= (0 == phv32_sbe_);
    r += indent_string + "  " + std::string("phv32_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv32_mbe_) ) + "\n";
    all_zeros &= (0 == phv32_mbe_);
    r += indent_string + "  " + std::string("phv16_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv16_sbe_) ) + "\n";
    all_zeros &= (0 == phv16_sbe_);
    r += indent_string + "  " + std::string("phv16_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv16_mbe_) ) + "\n";
    all_zeros &= (0 == phv16_mbe_);
    r += indent_string + "  " + std::string("phv8_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv8_sbe_) ) + "\n";
    all_zeros &= (0 == phv8_sbe_);
    r += indent_string + "  " + std::string("phv8_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv8_mbe_) ) + "\n";
    all_zeros &= (0 == phv8_mbe_);
    r += indent_string + "  " + std::string("i_volts_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_volts_sbe_) ) + "\n";
    all_zeros &= (0 == i_volts_sbe_);
    r += indent_string + "  " + std::string("i_volts_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_volts_mbe_) ) + "\n";
    all_zeros &= (0 == i_volts_mbe_);
    r += indent_string + "  " + std::string("e_volts_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_volts_sbe_) ) + "\n";
    all_zeros &= (0 == e_volts_sbe_);
    r += indent_string + "  " + std::string("e_volts_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_volts_mbe_) ) + "\n";
    all_zeros &= (0 == e_volts_mbe_);
    r += indent_string + "  " + std::string("i_fdinfo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_fdinfo_sbe_) ) + "\n";
    all_zeros &= (0 == i_fdinfo_sbe_);
    r += indent_string + "  " + std::string("i_fdinfo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_fdinfo_mbe_) ) + "\n";
    all_zeros &= (0 == i_fdinfo_mbe_);
    r += indent_string + "  " + std::string("e_fdinfo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_fdinfo_sbe_) ) + "\n";
    all_zeros &= (0 == e_fdinfo_sbe_);
    r += indent_string + "  " + std::string("e_fdinfo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_fdinfo_mbe_) ) + "\n";
    all_zeros &= (0 == e_fdinfo_mbe_);
    r += indent_string + "  " + std::string("i_cmd_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_cmd_sbe_) ) + "\n";
    all_zeros &= (0 == i_cmd_sbe_);
    r += indent_string + "  " + std::string("i_cmd_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_cmd_mbe_) ) + "\n";
    all_zeros &= (0 == i_cmd_mbe_);
    r += indent_string + "  " + std::string("e_cmd_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_cmd_sbe_) ) + "\n";
    all_zeros &= (0 == e_cmd_sbe_);
    r += indent_string + "  " + std::string("e_cmd_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_cmd_mbe_) ) + "\n";
    all_zeros &= (0 == e_cmd_mbe_);
    r += indent_string + "  " + std::string("i_inp_buff_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_inp_buff_overflow_) ) + "\n";
    all_zeros &= (0 == i_inp_buff_overflow_);
    r += indent_string + "  " + std::string("e_inp_buff_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_inp_buff_overflow_) ) + "\n";
    all_zeros &= (0 == e_inp_buff_overflow_);
    r += indent_string + "  " + std::string("i_freelist_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_freelist_empty_) ) + "\n";
    all_zeros &= (0 == i_freelist_empty_);
    r += indent_string + "  " + std::string("e_freelist_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_freelist_empty_) ) + "\n";
    all_zeros &= (0 == e_freelist_empty_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t i_meta_sbe_;
  uint8_t i_meta_mbe_;
  uint8_t e_meta_sbe_;
  uint8_t e_meta_mbe_;
  uint8_t phv32_sbe_;
  uint8_t phv32_mbe_;
  uint8_t phv16_sbe_;
  uint8_t phv16_mbe_;
  uint8_t phv8_sbe_;
  uint8_t phv8_mbe_;
  uint8_t i_volts_sbe_;
  uint8_t i_volts_mbe_;
  uint8_t e_volts_sbe_;
  uint8_t e_volts_mbe_;
  uint8_t i_fdinfo_sbe_;
  uint8_t i_fdinfo_mbe_;
  uint8_t e_fdinfo_sbe_;
  uint8_t e_fdinfo_mbe_;
  uint8_t i_cmd_sbe_;
  uint8_t i_cmd_mbe_;
  uint8_t e_cmd_sbe_;
  uint8_t e_cmd_mbe_;
  uint8_t i_inp_buff_overflow_;
  uint8_t e_inp_buff_overflow_;
  uint8_t i_freelist_empty_;
  uint8_t e_freelist_empty_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x28000; // to get to icr
    offset += 0x2be8; // to get to intr_b_en1
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_DPRSR_IC_REGS_INTR_B_EN1_MUTABLE_H__
