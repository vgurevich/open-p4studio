/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_IC_REGS_INTR_EN0_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_IC_REGS_INTR_EN0_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class DprsrIcRegsIntrEn0Mutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrIcRegsIntrEn0Mutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, true, write_callback, read_callback, std::string("DprsrIcRegsIntrEn0Mutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrIcRegsIntrEn0Mutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrIcRegsIntrEn0Mutable")
    {
    }
public:
  uint8_t pvt_sbe() { return pvt_sbe_; }
  void pvt_sbe(const uint8_t &v) { pvt_sbe_=v; }
  uint8_t pvt_mbe() { return pvt_mbe_; }
  void pvt_mbe(const uint8_t &v) { pvt_mbe_=v; }
  uint8_t i_clot_sbe() { return i_clot_sbe_; }
  void i_clot_sbe(const uint8_t &v) { i_clot_sbe_=v; }
  uint8_t i_clot_mbe() { return i_clot_mbe_; }
  void i_clot_mbe(const uint8_t &v) { i_clot_mbe_=v; }
  uint8_t i_clot_overflow() { return i_clot_overflow_; }
  void i_clot_overflow(const uint8_t &v) { i_clot_overflow_=v; }
  uint8_t i_clot_underflow() { return i_clot_underflow_; }
  void i_clot_underflow(const uint8_t &v) { i_clot_underflow_=v; }
  uint8_t e_clot_sbe() { return e_clot_sbe_; }
  void e_clot_sbe(const uint8_t &v) { e_clot_sbe_=v; }
  uint8_t e_clot_mbe() { return e_clot_mbe_; }
  void e_clot_mbe(const uint8_t &v) { e_clot_mbe_=v; }
  uint8_t e_clot_overflow() { return e_clot_overflow_; }
  void e_clot_overflow(const uint8_t &v) { e_clot_overflow_=v; }
  uint8_t e_clot_underflow() { return e_clot_underflow_; }
  void e_clot_underflow(const uint8_t &v) { e_clot_underflow_=v; }
  uint8_t mau_acctg_fifo_sbe() { return mau_acctg_fifo_sbe_; }
  void mau_acctg_fifo_sbe(const uint8_t &v) { mau_acctg_fifo_sbe_=v; }
  uint8_t mau_acctg_fifo_mbe() { return mau_acctg_fifo_mbe_; }
  void mau_acctg_fifo_mbe(const uint8_t &v) { mau_acctg_fifo_mbe_=v; }
  uint8_t mau_acctg_fifo_underflow() { return mau_acctg_fifo_underflow_; }
  void mau_acctg_fifo_underflow(const uint8_t &v) { mau_acctg_fifo_underflow_=v; }
  uint8_t mau_acctg_fifo_overflow() { return mau_acctg_fifo_overflow_; }
  void mau_acctg_fifo_overflow(const uint8_t &v) { mau_acctg_fifo_overflow_=v; }
  uint8_t i_chan_mismatch_err() { return i_chan_mismatch_err_; }
  void i_chan_mismatch_err(const uint8_t &v) { i_chan_mismatch_err_=v; }
  uint8_t e_chan_mismatch_err() { return e_chan_mismatch_err_; }
  void e_chan_mismatch_err(const uint8_t &v) { e_chan_mismatch_err_=v; }
  uint8_t pgen_fifo_push_err() { return pgen_fifo_push_err_; }
  void pgen_fifo_push_err(const uint8_t &v) { pgen_fifo_push_err_=v; }
  uint8_t pgen_fifo_pop_err() { return pgen_fifo_pop_err_; }
  void pgen_fifo_pop_err(const uint8_t &v) { pgen_fifo_pop_err_=v; }
  uint8_t ipb_cmd_fifo_push_err() { return ipb_cmd_fifo_push_err_; }
  void ipb_cmd_fifo_push_err(const uint8_t &v) { ipb_cmd_fifo_push_err_=v; }
  uint8_t ipb_cmd_fifo_pop_err() { return ipb_cmd_fifo_pop_err_; }
  void ipb_cmd_fifo_pop_err(const uint8_t &v) { ipb_cmd_fifo_pop_err_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (pvt_sbe_ & 0x1);
    *data |= ((pvt_mbe_ & 0x1) << 1);
    *data |= ((i_clot_sbe_ & 0x1) << 2);
    *data |= ((i_clot_mbe_ & 0x1) << 3);
    *data |= ((i_clot_overflow_ & 0x1) << 4);
    *data |= ((i_clot_underflow_ & 0x1) << 5);
    *data |= ((e_clot_sbe_ & 0x1) << 6);
    *data |= ((e_clot_mbe_ & 0x1) << 7);
    *data |= ((e_clot_overflow_ & 0x1) << 8);
    *data |= ((e_clot_underflow_ & 0x1) << 9);
    *data |= ((mau_acctg_fifo_sbe_ & 0x1) << 10);
    *data |= ((mau_acctg_fifo_mbe_ & 0x1) << 11);
    *data |= ((mau_acctg_fifo_underflow_ & 0x1) << 12);
    *data |= ((mau_acctg_fifo_overflow_ & 0x1) << 13);
    *data |= ((i_chan_mismatch_err_ & 0x1) << 14);
    *data |= ((e_chan_mismatch_err_ & 0x1) << 15);
    *data |= ((pgen_fifo_push_err_ & 0x1) << 16);
    *data |= ((pgen_fifo_pop_err_ & 0x1) << 17);
    *data |= ((ipb_cmd_fifo_push_err_ & 0x1) << 18);
    *data |= ((ipb_cmd_fifo_pop_err_ & 0x1) << 19);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    pvt_sbe_ = (data & 0x1);
    pvt_mbe_ = ((data >> 1) & 0x1);
    i_clot_sbe_ = ((data >> 2) & 0x1);
    i_clot_mbe_ = ((data >> 3) & 0x1);
    i_clot_overflow_ = ((data >> 4) & 0x1);
    i_clot_underflow_ = ((data >> 5) & 0x1);
    e_clot_sbe_ = ((data >> 6) & 0x1);
    e_clot_mbe_ = ((data >> 7) & 0x1);
    e_clot_overflow_ = ((data >> 8) & 0x1);
    e_clot_underflow_ = ((data >> 9) & 0x1);
    mau_acctg_fifo_sbe_ = ((data >> 10) & 0x1);
    mau_acctg_fifo_mbe_ = ((data >> 11) & 0x1);
    mau_acctg_fifo_underflow_ = ((data >> 12) & 0x1);
    mau_acctg_fifo_overflow_ = ((data >> 13) & 0x1);
    i_chan_mismatch_err_ = ((data >> 14) & 0x1);
    e_chan_mismatch_err_ = ((data >> 15) & 0x1);
    pgen_fifo_push_err_ = ((data >> 16) & 0x1);
    pgen_fifo_pop_err_ = ((data >> 17) & 0x1);
    ipb_cmd_fifo_push_err_ = ((data >> 18) & 0x1);
    ipb_cmd_fifo_pop_err_ = ((data >> 19) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    pvt_sbe_ = 0x0;
    pvt_mbe_ = 0x0;
    i_clot_sbe_ = 0x0;
    i_clot_mbe_ = 0x0;
    i_clot_overflow_ = 0x0;
    i_clot_underflow_ = 0x0;
    e_clot_sbe_ = 0x0;
    e_clot_mbe_ = 0x0;
    e_clot_overflow_ = 0x0;
    e_clot_underflow_ = 0x0;
    mau_acctg_fifo_sbe_ = 0x0;
    mau_acctg_fifo_mbe_ = 0x0;
    mau_acctg_fifo_underflow_ = 0x0;
    mau_acctg_fifo_overflow_ = 0x0;
    i_chan_mismatch_err_ = 0x0;
    e_chan_mismatch_err_ = 0x0;
    pgen_fifo_push_err_ = 0x0;
    pgen_fifo_pop_err_ = 0x0;
    ipb_cmd_fifo_push_err_ = 0x0;
    ipb_cmd_fifo_pop_err_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrIcRegsIntrEn0Mutable") + ":\n";
    r += indent_string + "  " + std::string("pvt_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pvt_sbe_) ) + "\n";
    all_zeros &= (0 == pvt_sbe_);
    r += indent_string + "  " + std::string("pvt_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pvt_mbe_) ) + "\n";
    all_zeros &= (0 == pvt_mbe_);
    r += indent_string + "  " + std::string("i_clot_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_clot_sbe_) ) + "\n";
    all_zeros &= (0 == i_clot_sbe_);
    r += indent_string + "  " + std::string("i_clot_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_clot_mbe_) ) + "\n";
    all_zeros &= (0 == i_clot_mbe_);
    r += indent_string + "  " + std::string("i_clot_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_clot_overflow_) ) + "\n";
    all_zeros &= (0 == i_clot_overflow_);
    r += indent_string + "  " + std::string("i_clot_underflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_clot_underflow_) ) + "\n";
    all_zeros &= (0 == i_clot_underflow_);
    r += indent_string + "  " + std::string("e_clot_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_clot_sbe_) ) + "\n";
    all_zeros &= (0 == e_clot_sbe_);
    r += indent_string + "  " + std::string("e_clot_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_clot_mbe_) ) + "\n";
    all_zeros &= (0 == e_clot_mbe_);
    r += indent_string + "  " + std::string("e_clot_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_clot_overflow_) ) + "\n";
    all_zeros &= (0 == e_clot_overflow_);
    r += indent_string + "  " + std::string("e_clot_underflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_clot_underflow_) ) + "\n";
    all_zeros &= (0 == e_clot_underflow_);
    r += indent_string + "  " + std::string("mau_acctg_fifo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mau_acctg_fifo_sbe_) ) + "\n";
    all_zeros &= (0 == mau_acctg_fifo_sbe_);
    r += indent_string + "  " + std::string("mau_acctg_fifo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mau_acctg_fifo_mbe_) ) + "\n";
    all_zeros &= (0 == mau_acctg_fifo_mbe_);
    r += indent_string + "  " + std::string("mau_acctg_fifo_underflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mau_acctg_fifo_underflow_) ) + "\n";
    all_zeros &= (0 == mau_acctg_fifo_underflow_);
    r += indent_string + "  " + std::string("mau_acctg_fifo_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mau_acctg_fifo_overflow_) ) + "\n";
    all_zeros &= (0 == mau_acctg_fifo_overflow_);
    r += indent_string + "  " + std::string("i_chan_mismatch_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_chan_mismatch_err_) ) + "\n";
    all_zeros &= (0 == i_chan_mismatch_err_);
    r += indent_string + "  " + std::string("e_chan_mismatch_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_chan_mismatch_err_) ) + "\n";
    all_zeros &= (0 == e_chan_mismatch_err_);
    r += indent_string + "  " + std::string("pgen_fifo_push_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pgen_fifo_push_err_) ) + "\n";
    all_zeros &= (0 == pgen_fifo_push_err_);
    r += indent_string + "  " + std::string("pgen_fifo_pop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pgen_fifo_pop_err_) ) + "\n";
    all_zeros &= (0 == pgen_fifo_pop_err_);
    r += indent_string + "  " + std::string("ipb_cmd_fifo_push_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipb_cmd_fifo_push_err_) ) + "\n";
    all_zeros &= (0 == ipb_cmd_fifo_push_err_);
    r += indent_string + "  " + std::string("ipb_cmd_fifo_pop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipb_cmd_fifo_pop_err_) ) + "\n";
    all_zeros &= (0 == ipb_cmd_fifo_pop_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrIcRegsIntrEn0Mutable") + ":\n";
    r += indent_string + "  " + std::string("pvt_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pvt_sbe_) ) + "\n";
    all_zeros &= (0 == pvt_sbe_);
    r += indent_string + "  " + std::string("pvt_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pvt_mbe_) ) + "\n";
    all_zeros &= (0 == pvt_mbe_);
    r += indent_string + "  " + std::string("i_clot_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_clot_sbe_) ) + "\n";
    all_zeros &= (0 == i_clot_sbe_);
    r += indent_string + "  " + std::string("i_clot_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_clot_mbe_) ) + "\n";
    all_zeros &= (0 == i_clot_mbe_);
    r += indent_string + "  " + std::string("i_clot_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_clot_overflow_) ) + "\n";
    all_zeros &= (0 == i_clot_overflow_);
    r += indent_string + "  " + std::string("i_clot_underflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_clot_underflow_) ) + "\n";
    all_zeros &= (0 == i_clot_underflow_);
    r += indent_string + "  " + std::string("e_clot_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_clot_sbe_) ) + "\n";
    all_zeros &= (0 == e_clot_sbe_);
    r += indent_string + "  " + std::string("e_clot_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_clot_mbe_) ) + "\n";
    all_zeros &= (0 == e_clot_mbe_);
    r += indent_string + "  " + std::string("e_clot_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_clot_overflow_) ) + "\n";
    all_zeros &= (0 == e_clot_overflow_);
    r += indent_string + "  " + std::string("e_clot_underflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_clot_underflow_) ) + "\n";
    all_zeros &= (0 == e_clot_underflow_);
    r += indent_string + "  " + std::string("mau_acctg_fifo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mau_acctg_fifo_sbe_) ) + "\n";
    all_zeros &= (0 == mau_acctg_fifo_sbe_);
    r += indent_string + "  " + std::string("mau_acctg_fifo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mau_acctg_fifo_mbe_) ) + "\n";
    all_zeros &= (0 == mau_acctg_fifo_mbe_);
    r += indent_string + "  " + std::string("mau_acctg_fifo_underflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mau_acctg_fifo_underflow_) ) + "\n";
    all_zeros &= (0 == mau_acctg_fifo_underflow_);
    r += indent_string + "  " + std::string("mau_acctg_fifo_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mau_acctg_fifo_overflow_) ) + "\n";
    all_zeros &= (0 == mau_acctg_fifo_overflow_);
    r += indent_string + "  " + std::string("i_chan_mismatch_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_chan_mismatch_err_) ) + "\n";
    all_zeros &= (0 == i_chan_mismatch_err_);
    r += indent_string + "  " + std::string("e_chan_mismatch_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_chan_mismatch_err_) ) + "\n";
    all_zeros &= (0 == e_chan_mismatch_err_);
    r += indent_string + "  " + std::string("pgen_fifo_push_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pgen_fifo_push_err_) ) + "\n";
    all_zeros &= (0 == pgen_fifo_push_err_);
    r += indent_string + "  " + std::string("pgen_fifo_pop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pgen_fifo_pop_err_) ) + "\n";
    all_zeros &= (0 == pgen_fifo_pop_err_);
    r += indent_string + "  " + std::string("ipb_cmd_fifo_push_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipb_cmd_fifo_push_err_) ) + "\n";
    all_zeros &= (0 == ipb_cmd_fifo_push_err_);
    r += indent_string + "  " + std::string("ipb_cmd_fifo_pop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipb_cmd_fifo_pop_err_) ) + "\n";
    all_zeros &= (0 == ipb_cmd_fifo_pop_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t pvt_sbe_;
  uint8_t pvt_mbe_;
  uint8_t i_clot_sbe_;
  uint8_t i_clot_mbe_;
  uint8_t i_clot_overflow_;
  uint8_t i_clot_underflow_;
  uint8_t e_clot_sbe_;
  uint8_t e_clot_mbe_;
  uint8_t e_clot_overflow_;
  uint8_t e_clot_underflow_;
  uint8_t mau_acctg_fifo_sbe_;
  uint8_t mau_acctg_fifo_mbe_;
  uint8_t mau_acctg_fifo_underflow_;
  uint8_t mau_acctg_fifo_overflow_;
  uint8_t i_chan_mismatch_err_;
  uint8_t e_chan_mismatch_err_;
  uint8_t pgen_fifo_push_err_;
  uint8_t pgen_fifo_pop_err_;
  uint8_t ipb_cmd_fifo_push_err_;
  uint8_t ipb_cmd_fifo_pop_err_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x28000; // to get to icr
    offset += 0x2b84; // to get to intr_en0
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_DPRSR_IC_REGS_INTR_EN0_MUTABLE_H__
