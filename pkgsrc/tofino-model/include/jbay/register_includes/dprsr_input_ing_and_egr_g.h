/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_INPUT_ING_AND_EGR_G_H__
#define __REGISTER_INCLUDES_DPRSR_INPUT_ING_AND_EGR_G_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "dprsr_cnt_vld_i_phv.h"
#include "dprsr_input_ing_and_egr_g_pp_ctr_cfg_data.h"
#include "dprsr_input_ing_and_egr_g_pp_ctr_cfg_mask.h"
#include "dprsr_pov_position_r.h"
#include "pp_ctr_cfg48_r.h"

namespace jbay {
  namespace register_classes {

class DprsrInputIngAndEgrG : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum DprsrIppRegsEnum {
    kMainE,
    kMainI
  };
public:
  DprsrInputIngAndEgrG(
      int chipNumber, int index_pipe_addrmap, DprsrIppRegsEnum selector_dprsr_ipp_regs, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, selector_dprsr_ipp_regs), 48, false, write_callback, read_callback, std::string("DprsrInputIngAndEgrG")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(selector_dprsr_ipp_regs))
    {
    }
  DprsrInputIngAndEgrG(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DprsrInputIngAndEgrG")
    {
    }
public:












  DprsrPovPositionR &main_i_pov() { return main_i_pov_; }





  DprsrCntVldIPhv &main_i_cnt_i_phv() { return main_i_cnt_i_phv_; }






  PpCtrCfg48R &main_i_pp_ctr_cfg48() { return main_i_pp_ctr_cfg48_; }






  DprsrInputIngAndEgrGPpCtrCfgMask &main_i_pp_ctr_cfg_mask() { return main_i_pp_ctr_cfg_mask_; }






  DprsrInputIngAndEgrGPpCtrCfgData &main_i_pp_ctr_cfg_data() { return main_i_pp_ctr_cfg_data_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x10) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      main_i_pov_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      main_i_cnt_i_phv_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      main_i_pp_ctr_cfg48_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      main_i_pp_ctr_cfg_mask_.read( offset, data );
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      if (read_callback_) read_callback_();
      main_i_pp_ctr_cfg_data_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x10) {
      offset -= 0x0;
      main_i_pov_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      main_i_cnt_i_phv_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      main_i_pp_ctr_cfg48_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      main_i_pp_ctr_cfg_mask_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      main_i_pp_ctr_cfg_data_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    main_i_pov_.reset();
    main_i_cnt_i_phv_.reset();
    main_i_pp_ctr_cfg48_.reset();
    main_i_pp_ctr_cfg_mask_.reset();
    main_i_pp_ctr_cfg_data_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x10) {
      offset -= 0x0;
      r += main_i_pov_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      r += main_i_cnt_i_phv_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      r += main_i_pp_ctr_cfg48_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += main_i_pp_ctr_cfg_mask_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      r += main_i_pp_ctr_cfg_data_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += main_i_pov_.to_string(print_zeros,indent_string) ;
    r += main_i_cnt_i_phv_.to_string(print_zeros,indent_string) ;
    r += main_i_pp_ctr_cfg48_.to_string(print_zeros,indent_string) ;
    r += main_i_pp_ctr_cfg_mask_.to_string(print_zeros,indent_string) ;
    r += main_i_pp_ctr_cfg_data_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrPovPositionR main_i_pov_;
  DprsrCntVldIPhv main_i_cnt_i_phv_;
  PpCtrCfg48R main_i_pp_ctr_cfg48_;
  DprsrInputIngAndEgrGPpCtrCfgMask main_i_pp_ctr_cfg_mask_;
  DprsrInputIngAndEgrGPpCtrCfgData main_i_pp_ctr_cfg_data_;
private:
  static int StartOffset(
      int index_pipe_addrmap, DprsrIppRegsEnum selector_dprsr_ipp_regs
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x20000; // to get to ipp
    switch (selector_dprsr_ipp_regs) {
      case kMainE:
        offset += 0x40; // to get to main_e
        break;
      case kMainI:
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_DPRSR_INPUT_ING_AND_EGR_G_H__
