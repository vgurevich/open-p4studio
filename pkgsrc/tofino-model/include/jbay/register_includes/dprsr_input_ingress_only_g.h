/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_INPUT_INGRESS_ONLY_G_H__
#define __REGISTER_INCLUDES_DPRSR_INPUT_INGRESS_ONLY_G_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "dprsr_copy_to_c_p_u_p_v_r.h"
#include "dprsr_input_ingress_only_g_m_copy_to_cpu.h"
#include "dprsr_input_ingress_only_g_m_drop_ctl.h"
#include "dprsr_input_ingress_only_g_m_egress_unicast_port.h"
#include "dprsr_input_ingress_only_g_m_learn_sel.h"
#include "dprsr_input_ingress_only_g_m_mgid1.h"
#include "dprsr_input_ingress_only_g_m_mgid2.h"
#include "dprsr_input_ingress_only_g_m_mirr_sel.h"
#include "dprsr_input_ingress_only_g_m_pgen.h"
#include "dprsr_input_ingress_only_g_m_pgen_addr.h"
#include "dprsr_input_ingress_only_g_m_pgen_len.h"
#include "dprsr_input_ingress_only_g_m_resub_sel.h"
#include "dprsr_learn_table_entry_r.h"
#include "dprsr_resubmit_mode_r.h"
#include "dprsr_resubmit_pktgen_table_entry_r.h"

namespace jbay {
  namespace register_classes {

class DprsrInputIngressOnlyG : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrInputIngressOnlyG(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 744, false, write_callback, read_callback, std::string("DprsrInputIngressOnlyG")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrInputIngressOnlyG(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DprsrInputIngressOnlyG")
    {
    }
public:







  DprsrLearnTableEntryR &ingr_learn_tbl(int j0) { return ingr_learn_tbl_[j0]; }







  DprsrResubmitPktgenTableEntryR &ingr_resub_tbl(int j0) { return ingr_resub_tbl_[j0]; }





  DprsrResubmitPktgenTableEntryR &ingr_pgen_tbl() { return ingr_pgen_tbl_; }





  DprsrResubmitModeR &ingr_resubmit_mode() { return ingr_resubmit_mode_; }





  DprsrCopyToCPUPVR &ingr_copy_to_cpu_pv() { return ingr_copy_to_cpu_pv_; }





  DprsrInputIngressOnlyGMLearnSel &ingr_m_learn_sel() { return ingr_m_learn_sel_; }





  DprsrInputIngressOnlyGMResubSel &ingr_m_resub_sel() { return ingr_m_resub_sel_; }







  DprsrInputIngressOnlyGMPgen &ingr_m_pgen() { return ingr_m_pgen_; }





  DprsrInputIngressOnlyGMPgenLen &ingr_m_pgen_len() { return ingr_m_pgen_len_; }





  DprsrInputIngressOnlyGMPgenAddr &ingr_m_pgen_addr() { return ingr_m_pgen_addr_; }





  DprsrInputIngressOnlyGMEgressUnicastPort &ingr_m_egress_unicast_port() { return ingr_m_egress_unicast_port_; }





  DprsrInputIngressOnlyGMMgid1 &ingr_m_mgid1() { return ingr_m_mgid1_; }





  DprsrInputIngressOnlyGMMgid2 &ingr_m_mgid2() { return ingr_m_mgid2_; }





  DprsrInputIngressOnlyGMCopyToCpu &ingr_m_copy_to_cpu() { return ingr_m_copy_to_cpu_; }





  DprsrInputIngressOnlyGMMirrSel &ingr_m_mirr_sel() { return ingr_m_mirr_sel_; }








  DprsrInputIngressOnlyGMDropCtl &ingr_m_drop_ctl() { return ingr_m_drop_ctl_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x1a0) {
      offset -= 0x0;
      int i0 = offset / 0x34;
      offset  -= i0 * 0x34;
      if (read_callback_) read_callback_();
      ingr_learn_tbl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x2a0) {
      offset -= 0x200;
      int i0 = offset / 0x14;
      offset  -= i0 * 0x14;
      if (read_callback_) read_callback_();
      ingr_resub_tbl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x2a0 && offset < 0x2b4) {
      offset -= 0x2a0;
      if (read_callback_) read_callback_();
      ingr_pgen_tbl_.read( offset, data );
    }
    else if (offset >= 0x2b4 && offset < 0x2b8) {
      offset -= 0x2b4;
      if (read_callback_) read_callback_();
      ingr_resubmit_mode_.read( offset, data );
    }
    else if (offset >= 0x2b8 && offset < 0x2bc) {
      offset -= 0x2b8;
      if (read_callback_) read_callback_();
      ingr_copy_to_cpu_pv_.read( offset, data );
    }
    else if (offset >= 0x2bc && offset < 0x2c0) {
      offset -= 0x2bc;
      if (read_callback_) read_callback_();
      ingr_m_learn_sel_.read( offset, data );
    }
    else if (offset >= 0x2c0 && offset < 0x2c4) {
      offset -= 0x2c0;
      if (read_callback_) read_callback_();
      ingr_m_resub_sel_.read( offset, data );
    }
    else if (offset >= 0x2c4 && offset < 0x2c8) {
      offset -= 0x2c4;
      if (read_callback_) read_callback_();
      ingr_m_pgen_.read( offset, data );
    }
    else if (offset >= 0x2c8 && offset < 0x2cc) {
      offset -= 0x2c8;
      if (read_callback_) read_callback_();
      ingr_m_pgen_len_.read( offset, data );
    }
    else if (offset >= 0x2cc && offset < 0x2d0) {
      offset -= 0x2cc;
      if (read_callback_) read_callback_();
      ingr_m_pgen_addr_.read( offset, data );
    }
    else if (offset >= 0x2d0 && offset < 0x2d4) {
      offset -= 0x2d0;
      if (read_callback_) read_callback_();
      ingr_m_egress_unicast_port_.read( offset, data );
    }
    else if (offset >= 0x2d4 && offset < 0x2d8) {
      offset -= 0x2d4;
      if (read_callback_) read_callback_();
      ingr_m_mgid1_.read( offset, data );
    }
    else if (offset >= 0x2d8 && offset < 0x2dc) {
      offset -= 0x2d8;
      if (read_callback_) read_callback_();
      ingr_m_mgid2_.read( offset, data );
    }
    else if (offset >= 0x2dc && offset < 0x2e0) {
      offset -= 0x2dc;
      if (read_callback_) read_callback_();
      ingr_m_copy_to_cpu_.read( offset, data );
    }
    else if (offset >= 0x2e0 && offset < 0x2e4) {
      offset -= 0x2e0;
      if (read_callback_) read_callback_();
      ingr_m_mirr_sel_.read( offset, data );
    }
    else if (offset >= 0x2e4 && offset < 0x2e8) {
      offset -= 0x2e4;
      if (read_callback_) read_callback_();
      ingr_m_drop_ctl_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x1a0) {
      offset -= 0x0;
      int i0 = offset / 0x34;
      offset  -= i0 * 0x34;
      ingr_learn_tbl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x2a0) {
      offset -= 0x200;
      int i0 = offset / 0x14;
      offset  -= i0 * 0x14;
      ingr_resub_tbl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2a0 && offset < 0x2b4) {
      offset -= 0x2a0;
      ingr_pgen_tbl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2b4 && offset < 0x2b8) {
      offset -= 0x2b4;
      ingr_resubmit_mode_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2b8 && offset < 0x2bc) {
      offset -= 0x2b8;
      ingr_copy_to_cpu_pv_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2bc && offset < 0x2c0) {
      offset -= 0x2bc;
      ingr_m_learn_sel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c0 && offset < 0x2c4) {
      offset -= 0x2c0;
      ingr_m_resub_sel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c4 && offset < 0x2c8) {
      offset -= 0x2c4;
      ingr_m_pgen_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c8 && offset < 0x2cc) {
      offset -= 0x2c8;
      ingr_m_pgen_len_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2cc && offset < 0x2d0) {
      offset -= 0x2cc;
      ingr_m_pgen_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2d0 && offset < 0x2d4) {
      offset -= 0x2d0;
      ingr_m_egress_unicast_port_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2d4 && offset < 0x2d8) {
      offset -= 0x2d4;
      ingr_m_mgid1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2d8 && offset < 0x2dc) {
      offset -= 0x2d8;
      ingr_m_mgid2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2dc && offset < 0x2e0) {
      offset -= 0x2dc;
      ingr_m_copy_to_cpu_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2e0 && offset < 0x2e4) {
      offset -= 0x2e0;
      ingr_m_mirr_sel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2e4 && offset < 0x2e8) {
      offset -= 0x2e4;
      ingr_m_drop_ctl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : ingr_learn_tbl_) {
      f0.reset();
    }
    for (auto &f0 : ingr_resub_tbl_) {
      f0.reset();
    }
    ingr_pgen_tbl_.reset();
    ingr_resubmit_mode_.reset();
    ingr_copy_to_cpu_pv_.reset();
    ingr_m_learn_sel_.reset();
    ingr_m_resub_sel_.reset();
    ingr_m_pgen_.reset();
    ingr_m_pgen_len_.reset();
    ingr_m_pgen_addr_.reset();
    ingr_m_egress_unicast_port_.reset();
    ingr_m_mgid1_.reset();
    ingr_m_mgid2_.reset();
    ingr_m_copy_to_cpu_.reset();
    ingr_m_mirr_sel_.reset();
    ingr_m_drop_ctl_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x1a0) {
      offset -= 0x0;
      int i0 = offset / 0x34;
      offset  -= i0 * 0x34;
      r += ingr_learn_tbl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x2a0) {
      offset -= 0x200;
      int i0 = offset / 0x14;
      offset  -= i0 * 0x14;
      r += ingr_resub_tbl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2a0 && offset < 0x2b4) {
      offset -= 0x2a0;
      r += ingr_pgen_tbl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2b4 && offset < 0x2b8) {
      offset -= 0x2b4;
      r += ingr_resubmit_mode_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2b8 && offset < 0x2bc) {
      offset -= 0x2b8;
      r += ingr_copy_to_cpu_pv_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2bc && offset < 0x2c0) {
      offset -= 0x2bc;
      r += ingr_m_learn_sel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c0 && offset < 0x2c4) {
      offset -= 0x2c0;
      r += ingr_m_resub_sel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c4 && offset < 0x2c8) {
      offset -= 0x2c4;
      r += ingr_m_pgen_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c8 && offset < 0x2cc) {
      offset -= 0x2c8;
      r += ingr_m_pgen_len_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2cc && offset < 0x2d0) {
      offset -= 0x2cc;
      r += ingr_m_pgen_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2d0 && offset < 0x2d4) {
      offset -= 0x2d0;
      r += ingr_m_egress_unicast_port_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2d4 && offset < 0x2d8) {
      offset -= 0x2d4;
      r += ingr_m_mgid1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2d8 && offset < 0x2dc) {
      offset -= 0x2d8;
      r += ingr_m_mgid2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2dc && offset < 0x2e0) {
      offset -= 0x2dc;
      r += ingr_m_copy_to_cpu_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2e0 && offset < 0x2e4) {
      offset -= 0x2e0;
      r += ingr_m_mirr_sel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2e4 && offset < 0x2e8) {
      offset -= 0x2e4;
      r += ingr_m_drop_ctl_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<8;++a0) {
      r += ingr_learn_tbl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += ingr_resub_tbl_[a0].to_string(print_zeros,indent_string) ;
    }
    r += ingr_pgen_tbl_.to_string(print_zeros,indent_string) ;
    r += ingr_resubmit_mode_.to_string(print_zeros,indent_string) ;
    r += ingr_copy_to_cpu_pv_.to_string(print_zeros,indent_string) ;
    r += ingr_m_learn_sel_.to_string(print_zeros,indent_string) ;
    r += ingr_m_resub_sel_.to_string(print_zeros,indent_string) ;
    r += ingr_m_pgen_.to_string(print_zeros,indent_string) ;
    r += ingr_m_pgen_len_.to_string(print_zeros,indent_string) ;
    r += ingr_m_pgen_addr_.to_string(print_zeros,indent_string) ;
    r += ingr_m_egress_unicast_port_.to_string(print_zeros,indent_string) ;
    r += ingr_m_mgid1_.to_string(print_zeros,indent_string) ;
    r += ingr_m_mgid2_.to_string(print_zeros,indent_string) ;
    r += ingr_m_copy_to_cpu_.to_string(print_zeros,indent_string) ;
    r += ingr_m_mirr_sel_.to_string(print_zeros,indent_string) ;
    r += ingr_m_drop_ctl_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< DprsrLearnTableEntryR, 8 > ingr_learn_tbl_;
  std::array< DprsrResubmitPktgenTableEntryR, 8 > ingr_resub_tbl_;
  DprsrResubmitPktgenTableEntryR ingr_pgen_tbl_;
  DprsrResubmitModeR ingr_resubmit_mode_;
  DprsrCopyToCPUPVR ingr_copy_to_cpu_pv_;
  DprsrInputIngressOnlyGMLearnSel ingr_m_learn_sel_;
  DprsrInputIngressOnlyGMResubSel ingr_m_resub_sel_;
  DprsrInputIngressOnlyGMPgen ingr_m_pgen_;
  DprsrInputIngressOnlyGMPgenLen ingr_m_pgen_len_;
  DprsrInputIngressOnlyGMPgenAddr ingr_m_pgen_addr_;
  DprsrInputIngressOnlyGMEgressUnicastPort ingr_m_egress_unicast_port_;
  DprsrInputIngressOnlyGMMgid1 ingr_m_mgid1_;
  DprsrInputIngressOnlyGMMgid2 ingr_m_mgid2_;
  DprsrInputIngressOnlyGMCopyToCpu ingr_m_copy_to_cpu_;
  DprsrInputIngressOnlyGMMirrSel ingr_m_mirr_sel_;
  DprsrInputIngressOnlyGMDropCtl ingr_m_drop_ctl_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x20000; // to get to ipp
    offset += 0x400; // to get to ingr
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_DPRSR_INPUT_INGRESS_ONLY_G_H__
