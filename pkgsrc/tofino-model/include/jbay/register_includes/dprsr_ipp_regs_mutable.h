/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_IPP_REGS_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_IPP_REGS_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "dprsr_csum_pov_cfg_mutable.h"
#include "dprsr_input_egress_only_g_mutable.h"
#include "dprsr_input_ing_and_egr_g_mutable.h"
#include "dprsr_input_ingress_only_g_mutable.h"

namespace jbay {
  namespace register_classes {

class DprsrIppRegsMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrIppRegsMutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 1864, true, write_callback, read_callback, std::string("DprsrIppRegsMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrIppRegsMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrIppRegsMutable")
    {
    }
public:






  DprsrInputIngAndEgrGMutable &main_i() { return main_i_; }






  DprsrInputIngAndEgrGMutable &main_e() { return main_e_; }





  DprsrInputIngressOnlyGMutable &ingr() { return ingr_; }





  DprsrInputEgressOnlyGMutable &egr() { return egr_; }







  DprsrCsumPovCfgMutable &phv_csum_pov_cfg() { return phv_csum_pov_cfg_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x30) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      main_i_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x70) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      main_e_.read( offset, data );
    }
    else if (offset >= 0x400 && offset < 0x6e8) {
      offset -= 0x400;
      if (read_callback_) read_callback_();
      ingr_.read( offset, data );
    }
    else if (offset >= 0x6f0 && offset < 0x6fc) {
      offset -= 0x6f0;
      if (read_callback_) read_callback_();
      egr_.read( offset, data );
    }
    else if (offset >= 0x700 && offset < 0x744) {
      offset -= 0x700;
      if (read_callback_) read_callback_();
      phv_csum_pov_cfg_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x30) {
      offset -= 0x0;
      main_i_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x70) {
      offset -= 0x40;
      main_e_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400 && offset < 0x6e8) {
      offset -= 0x400;
      ingr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6f0 && offset < 0x6fc) {
      offset -= 0x6f0;
      egr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x700 && offset < 0x744) {
      offset -= 0x700;
      phv_csum_pov_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    main_i_.reset();
    main_e_.reset();
    ingr_.reset();
    egr_.reset();
    phv_csum_pov_cfg_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x30) {
      offset -= 0x0;
      r += main_i_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x70) {
      offset -= 0x40;
      r += main_e_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400 && offset < 0x6e8) {
      offset -= 0x400;
      r += ingr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6f0 && offset < 0x6fc) {
      offset -= 0x6f0;
      r += egr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x700 && offset < 0x744) {
      offset -= 0x700;
      r += phv_csum_pov_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += main_i_.to_string(print_zeros,indent_string) ;
    r += main_e_.to_string(print_zeros,indent_string) ;
    r += ingr_.to_string(print_zeros,indent_string) ;
    r += egr_.to_string(print_zeros,indent_string) ;
    r += phv_csum_pov_cfg_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrInputIngAndEgrGMutable main_i_;
  DprsrInputIngAndEgrGMutable main_e_;
  DprsrInputIngressOnlyGMutable ingr_;
  DprsrInputEgressOnlyGMutable egr_;
  DprsrCsumPovCfgMutable phv_csum_pov_cfg_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x20000; // to get to ipp
    return offset;
  }

};













  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_DPRSR_IPP_REGS_MUTABLE_H__
