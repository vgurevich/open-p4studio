/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_MIRROR_TABLE_ENTRY_R_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_MIRROR_TABLE_ENTRY_R_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class DprsrMirrorTableEntryRMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum DprsrRegRspecEnum {
    kHoE,
    kHoI
  };
public:
  DprsrMirrorTableEntryRMutable(
      int chipNumber, int index_pipe_addrmap, DprsrRegRspecEnum selector_dprsr_reg_rspec, int index_dprsr_ho_e, int index_dprsr_mirror_table_entry_r, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, selector_dprsr_reg_rspec, index_dprsr_ho_e, index_dprsr_mirror_table_entry_r), 64, true, write_callback, read_callback, std::string("DprsrMirrorTableEntryRMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(selector_dprsr_reg_rspec) + "," + boost::lexical_cast<std::string>(index_dprsr_ho_e) + "," + boost::lexical_cast<std::string>(index_dprsr_mirror_table_entry_r))
    {
    }
  DprsrMirrorTableEntryRMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrMirrorTableEntryRMutable")
    {
    }
public:








  uint8_t phvs(int j0) { return phvs_[j0]; }
  void phvs(int j0,const uint8_t &v) { phvs_[j0]=v; }





  uint8_t id_phv() { return id_phv_; }
  void id_phv(const uint8_t &v) { id_phv_=v; }





  uint8_t len() { return len_; }
  void len(const uint8_t &v) { len_=v; }





  uint32_t rsvd1() { return rsvd1_; }
  void rsvd1(const uint32_t &v) { rsvd1_=v; }





  uint32_t rsvd2() { return rsvd2_; }
  void rsvd2(const uint32_t &v) { rsvd2_=v; }





  uint32_t rsvd3() { return rsvd3_; }
  void rsvd3(const uint32_t &v) { rsvd3_=v; }





  uint32_t rsv4d() { return rsv4d_; }
  void rsv4d(const uint32_t &v) { rsv4d_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = phvs_[0];
      *data |= (phvs_[1] << 8);
      *data |= (phvs_[2] << 16);
      *data |= (phvs_[3] << 24);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = phvs_[4];
      *data |= (phvs_[5] << 8);
      *data |= (phvs_[6] << 16);
      *data |= (phvs_[7] << 24);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = phvs_[8];
      *data |= (phvs_[9] << 8);
      *data |= (phvs_[10] << 16);
      *data |= (phvs_[11] << 24);
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = phvs_[12];
      *data |= (phvs_[13] << 8);
      *data |= (phvs_[14] << 16);
      *data |= (phvs_[15] << 24);
    }
    else if (offset >= 0x10 && offset < 0x14) {
      if (read_callback_) read_callback_();
      *data = phvs_[16];
      *data |= (phvs_[17] << 8);
      *data |= (phvs_[18] << 16);
      *data |= (phvs_[19] << 24);
    }
    else if (offset >= 0x14 && offset < 0x18) {
      if (read_callback_) read_callback_();
      *data = phvs_[20];
      *data |= (phvs_[21] << 8);
      *data |= (phvs_[22] << 16);
      *data |= (phvs_[23] << 24);
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      if (read_callback_) read_callback_();
      *data = phvs_[24];
      *data |= (phvs_[25] << 8);
      *data |= (phvs_[26] << 16);
      *data |= (phvs_[27] << 24);
    }
    else if (offset >= 0x1c && offset < 0x20) {
      if (read_callback_) read_callback_();
      *data = phvs_[28];
      *data |= (phvs_[29] << 8);
      *data |= (phvs_[30] << 16);
      *data |= (phvs_[31] << 24);
    }
    else if (offset >= 0x20 && offset < 0x24) {
      if (read_callback_) read_callback_();
      *data = phvs_[32];
      *data |= (phvs_[33] << 8);
      *data |= (phvs_[34] << 16);
      *data |= (phvs_[35] << 24);
    }
    else if (offset >= 0x24 && offset < 0x28) {
      if (read_callback_) read_callback_();
      *data = phvs_[36];
      *data |= (phvs_[37] << 8);
      *data |= (phvs_[38] << 16);
      *data |= (phvs_[39] << 24);
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      if (read_callback_) read_callback_();
      *data = phvs_[40];
      *data |= (phvs_[41] << 8);
      *data |= (phvs_[42] << 16);
      *data |= (phvs_[43] << 24);
    }
    else if (offset >= 0x2c && offset < 0x30) {
      if (read_callback_) read_callback_();
      *data = phvs_[44];
      *data |= (phvs_[45] << 8);
      *data |= (phvs_[46] << 16);
      *data |= (phvs_[47] << 24);
    }
    else if (offset >= 0x30 && offset < 0x34) {
      if (read_callback_) read_callback_();
      *data = id_phv_;
      *data |= ((len_ & 0x3f) << 8);
      *data |= ((rsvd1_ & 0x3ffff) << 14);
    }
    else if (offset >= 0x34 && offset < 0x38) {
      if (read_callback_) read_callback_();
      *data = rsvd2_;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      if (read_callback_) read_callback_();
      *data = rsvd3_;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      if (read_callback_) read_callback_();
      *data = rsv4d_;
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      phvs_[0] = data;
      phvs_[1] = (data >> 8);
      phvs_[2] = (data >> 16);
      phvs_[3] = (data >> 24);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      phvs_[4] = data;
      phvs_[5] = (data >> 8);
      phvs_[6] = (data >> 16);
      phvs_[7] = (data >> 24);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      phvs_[8] = data;
      phvs_[9] = (data >> 8);
      phvs_[10] = (data >> 16);
      phvs_[11] = (data >> 24);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      phvs_[12] = data;
      phvs_[13] = (data >> 8);
      phvs_[14] = (data >> 16);
      phvs_[15] = (data >> 24);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      phvs_[16] = data;
      phvs_[17] = (data >> 8);
      phvs_[18] = (data >> 16);
      phvs_[19] = (data >> 24);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      phvs_[20] = data;
      phvs_[21] = (data >> 8);
      phvs_[22] = (data >> 16);
      phvs_[23] = (data >> 24);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      phvs_[24] = data;
      phvs_[25] = (data >> 8);
      phvs_[26] = (data >> 16);
      phvs_[27] = (data >> 24);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      phvs_[28] = data;
      phvs_[29] = (data >> 8);
      phvs_[30] = (data >> 16);
      phvs_[31] = (data >> 24);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      phvs_[32] = data;
      phvs_[33] = (data >> 8);
      phvs_[34] = (data >> 16);
      phvs_[35] = (data >> 24);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      phvs_[36] = data;
      phvs_[37] = (data >> 8);
      phvs_[38] = (data >> 16);
      phvs_[39] = (data >> 24);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      phvs_[40] = data;
      phvs_[41] = (data >> 8);
      phvs_[42] = (data >> 16);
      phvs_[43] = (data >> 24);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      phvs_[44] = data;
      phvs_[45] = (data >> 8);
      phvs_[46] = (data >> 16);
      phvs_[47] = (data >> 24);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      id_phv_ = data;
      len_ = ((data >> 8) & 0x3f);
      rsvd1_ = ((data >> 14) & 0x3ffff);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      rsvd2_ = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      rsvd3_ = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      rsv4d_ = data;
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    phvs_[0] = 0;
    phvs_[1] = 0;
    phvs_[2] = 0;
    phvs_[3] = 0;
    phvs_[4] = 0;
    phvs_[5] = 0;
    phvs_[6] = 0;
    phvs_[7] = 0;
    phvs_[8] = 0;
    phvs_[9] = 0;
    phvs_[10] = 0;
    phvs_[11] = 0;
    phvs_[12] = 0;
    phvs_[13] = 0;
    phvs_[14] = 0;
    phvs_[15] = 0;
    phvs_[16] = 0;
    phvs_[17] = 0;
    phvs_[18] = 0;
    phvs_[19] = 0;
    phvs_[20] = 0;
    phvs_[21] = 0;
    phvs_[22] = 0;
    phvs_[23] = 0;
    phvs_[24] = 0;
    phvs_[25] = 0;
    phvs_[26] = 0;
    phvs_[27] = 0;
    phvs_[28] = 0;
    phvs_[29] = 0;
    phvs_[30] = 0;
    phvs_[31] = 0;
    phvs_[32] = 0;
    phvs_[33] = 0;
    phvs_[34] = 0;
    phvs_[35] = 0;
    phvs_[36] = 0;
    phvs_[37] = 0;
    phvs_[38] = 0;
    phvs_[39] = 0;
    phvs_[40] = 0;
    phvs_[41] = 0;
    phvs_[42] = 0;
    phvs_[43] = 0;
    phvs_[44] = 0;
    phvs_[45] = 0;
    phvs_[46] = 0;
    phvs_[47] = 0;
    id_phv_ = 0;
    len_ = 0;
    rsvd1_ = 0;
    rsvd2_ = 0;
    rsvd3_ = 0;
    rsv4d_ = 0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrMirrorTableEntryRMutable") + ":\n";
    for (uint32_t f=0;f<48;++f) {
      r += indent_string + "  " + std::string("phvs") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phvs_[f]) ) + "\n";
      all_zeros &= (0 == phvs_[f]);
    }
    r += indent_string + "  " + std::string("id_phv") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(id_phv_) ) + "\n";
    all_zeros &= (0 == id_phv_);
    r += indent_string + "  " + std::string("len") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(len_) ) + "\n";
    all_zeros &= (0 == len_);
    r += indent_string + "  " + std::string("rsvd1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rsvd1_) ) + "\n";
    all_zeros &= (0 == rsvd1_);
    r += indent_string + "  " + std::string("rsvd2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rsvd2_) ) + "\n";
    all_zeros &= (0 == rsvd2_);
    r += indent_string + "  " + std::string("rsvd3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rsvd3_) ) + "\n";
    all_zeros &= (0 == rsvd3_);
    r += indent_string + "  " + std::string("rsv4d") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rsv4d_) ) + "\n";
    all_zeros &= (0 == rsv4d_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrMirrorTableEntryRMutable") + ":\n";
    for (uint32_t f=0;f<48;++f) {
      r += indent_string + "  " + std::string("phvs") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phvs_[f]) ) + "\n";
      all_zeros &= (0 == phvs_[f]);
    }
    r += indent_string + "  " + std::string("id_phv") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(id_phv_) ) + "\n";
    all_zeros &= (0 == id_phv_);
    r += indent_string + "  " + std::string("len") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(len_) ) + "\n";
    all_zeros &= (0 == len_);
    r += indent_string + "  " + std::string("rsvd1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rsvd1_) ) + "\n";
    all_zeros &= (0 == rsvd1_);
    r += indent_string + "  " + std::string("rsvd2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rsvd2_) ) + "\n";
    all_zeros &= (0 == rsvd2_);
    r += indent_string + "  " + std::string("rsvd3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rsvd3_) ) + "\n";
    all_zeros &= (0 == rsvd3_);
    r += indent_string + "  " + std::string("rsv4d") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rsv4d_) ) + "\n";
    all_zeros &= (0 == rsv4d_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 48 > phvs_;
  uint8_t id_phv_;
  uint8_t len_;
  uint32_t rsvd1_;
  uint32_t rsvd2_;
  uint32_t rsvd3_;
  uint32_t rsv4d_;
private:
  static int StartOffset(
      int index_pipe_addrmap, DprsrRegRspecEnum selector_dprsr_reg_rspec, int index_dprsr_ho_e, int index_dprsr_mirror_table_entry_r
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    switch (selector_dprsr_reg_rspec) {
      case kHoE:
        offset += 0x38000; // to get to ho_e
        assert(index_dprsr_ho_e < 4);
        offset += index_dprsr_ho_e * 0x2000; // dprsr_ho_e[]
        offset += 0x800; // to get to mirr_hdr_tbl
        assert(index_dprsr_mirror_table_entry_r < 16);
        offset += index_dprsr_mirror_table_entry_r * 0x40; // dprsr_mirror_table_entry_r[]
        break;
      case kHoI:
        offset += 0x30000; // to get to ho_i
        assert(index_dprsr_ho_e < 4);
        offset += index_dprsr_ho_e * 0x2000; // dprsr_ho_i[]
        offset += 0x800; // to get to mirr_hdr_tbl
        assert(index_dprsr_mirror_table_entry_r < 16);
        offset += index_dprsr_mirror_table_entry_r * 0x40; // dprsr_mirror_table_entry_r[]
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_DPRSR_MIRROR_TABLE_ENTRY_R_MUTABLE_H__
