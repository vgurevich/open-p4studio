/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_OUT_EGR_INTR_0_INJ_H__
#define __REGISTER_INCLUDES_DPRSR_OUT_EGR_INTR_0_INJ_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class DprsrOutEgrIntr_0Inj : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrOutEgrIntr_0Inj(
      int chipNumber, int index_pipe_addrmap, int index_dprsr_ho_e, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_dprsr_ho_e), 4, false, write_callback, read_callback, std::string("DprsrOutEgrIntr_0Inj")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_dprsr_ho_e))
    {
    }
  DprsrOutEgrIntr_0Inj(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DprsrOutEgrIntr_0Inj")
    {
    }
public:
  uint8_t &pktst_ovf() { return pktst_ovf_; }
  uint8_t &pktst_und() { return pktst_und_; }
  uint8_t &metafifo_ovf() { return metafifo_ovf_; }
  uint8_t &metafifo_und() { return metafifo_und_; }
  uint8_t &pkthdr_ovf() { return pkthdr_ovf_; }
  uint8_t &pkthdr_und() { return pkthdr_und_; }
  uint8_t &mirrhdr_ovf() { return mirrhdr_ovf_; }
  uint8_t &mirrhdr_und() { return mirrhdr_und_; }
  uint8_t &datast0_ovf() { return datast0_ovf_; }
  uint8_t &datast0_und() { return datast0_und_; }
  uint8_t &pktdatafifo0_ovf() { return pktdatafifo0_ovf_; }
  uint8_t &pktdatafifo0_und() { return pktdatafifo0_und_; }
  uint8_t &datast1_ovf() { return datast1_ovf_; }
  uint8_t &datast1_und() { return datast1_und_; }
  uint8_t &pktdatafifo1_ovf() { return pktdatafifo1_ovf_; }
  uint8_t &pktdatafifo1_und() { return pktdatafifo1_und_; }
  uint8_t &datast2_ovf() { return datast2_ovf_; }
  uint8_t &datast2_und() { return datast2_und_; }
  uint8_t &pktdatafifo2_ovf() { return pktdatafifo2_ovf_; }
  uint8_t &pktdatafifo2_und() { return pktdatafifo2_und_; }
  uint8_t &arbfifo_ovf() { return arbfifo_ovf_; }
  uint8_t &arbfifo_und() { return arbfifo_und_; }
  uint8_t &tmschfifo_ovf() { return tmschfifo_ovf_; }
  uint8_t &tmschfifo_und() { return tmschfifo_und_; }
  uint8_t &ctl_chan_err() { return ctl_chan_err_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (pktst_ovf_ & 0x1);
    *data |= ((pktst_und_ & 0x1) << 1);
    *data |= ((metafifo_ovf_ & 0x1) << 2);
    *data |= ((metafifo_und_ & 0x1) << 3);
    *data |= ((pkthdr_ovf_ & 0x1) << 4);
    *data |= ((pkthdr_und_ & 0x1) << 5);
    *data |= ((mirrhdr_ovf_ & 0x1) << 6);
    *data |= ((mirrhdr_und_ & 0x1) << 7);
    *data |= ((datast0_ovf_ & 0x1) << 8);
    *data |= ((datast0_und_ & 0x1) << 9);
    *data |= ((pktdatafifo0_ovf_ & 0x1) << 10);
    *data |= ((pktdatafifo0_und_ & 0x1) << 11);
    *data |= ((datast1_ovf_ & 0x1) << 12);
    *data |= ((datast1_und_ & 0x1) << 13);
    *data |= ((pktdatafifo1_ovf_ & 0x1) << 14);
    *data |= ((pktdatafifo1_und_ & 0x1) << 15);
    *data |= ((datast2_ovf_ & 0x1) << 16);
    *data |= ((datast2_und_ & 0x1) << 17);
    *data |= ((pktdatafifo2_ovf_ & 0x1) << 18);
    *data |= ((pktdatafifo2_und_ & 0x1) << 19);
    *data |= ((arbfifo_ovf_ & 0x1) << 20);
    *data |= ((arbfifo_und_ & 0x1) << 21);
    *data |= ((tmschfifo_ovf_ & 0x1) << 22);
    *data |= ((tmschfifo_und_ & 0x1) << 23);
    *data |= ((ctl_chan_err_ & 0x1) << 24);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    pktst_ovf_ = (data & 0x1);
    pktst_und_ = ((data >> 1) & 0x1);
    metafifo_ovf_ = ((data >> 2) & 0x1);
    metafifo_und_ = ((data >> 3) & 0x1);
    pkthdr_ovf_ = ((data >> 4) & 0x1);
    pkthdr_und_ = ((data >> 5) & 0x1);
    mirrhdr_ovf_ = ((data >> 6) & 0x1);
    mirrhdr_und_ = ((data >> 7) & 0x1);
    datast0_ovf_ = ((data >> 8) & 0x1);
    datast0_und_ = ((data >> 9) & 0x1);
    pktdatafifo0_ovf_ = ((data >> 10) & 0x1);
    pktdatafifo0_und_ = ((data >> 11) & 0x1);
    datast1_ovf_ = ((data >> 12) & 0x1);
    datast1_und_ = ((data >> 13) & 0x1);
    pktdatafifo1_ovf_ = ((data >> 14) & 0x1);
    pktdatafifo1_und_ = ((data >> 15) & 0x1);
    datast2_ovf_ = ((data >> 16) & 0x1);
    datast2_und_ = ((data >> 17) & 0x1);
    pktdatafifo2_ovf_ = ((data >> 18) & 0x1);
    pktdatafifo2_und_ = ((data >> 19) & 0x1);
    arbfifo_ovf_ = ((data >> 20) & 0x1);
    arbfifo_und_ = ((data >> 21) & 0x1);
    tmschfifo_ovf_ = ((data >> 22) & 0x1);
    tmschfifo_und_ = ((data >> 23) & 0x1);
    ctl_chan_err_ = ((data >> 24) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    pktst_ovf_ = 0x0;
    pktst_und_ = 0x0;
    metafifo_ovf_ = 0x0;
    metafifo_und_ = 0x0;
    pkthdr_ovf_ = 0x0;
    pkthdr_und_ = 0x0;
    mirrhdr_ovf_ = 0x0;
    mirrhdr_und_ = 0x0;
    datast0_ovf_ = 0x0;
    datast0_und_ = 0x0;
    pktdatafifo0_ovf_ = 0x0;
    pktdatafifo0_und_ = 0x0;
    datast1_ovf_ = 0x0;
    datast1_und_ = 0x0;
    pktdatafifo1_ovf_ = 0x0;
    pktdatafifo1_und_ = 0x0;
    datast2_ovf_ = 0x0;
    datast2_und_ = 0x0;
    pktdatafifo2_ovf_ = 0x0;
    pktdatafifo2_und_ = 0x0;
    arbfifo_ovf_ = 0x0;
    arbfifo_und_ = 0x0;
    tmschfifo_ovf_ = 0x0;
    tmschfifo_und_ = 0x0;
    ctl_chan_err_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrOutEgrIntr_0Inj") + ":\n";
    r += indent_string + "  " + std::string("pktst_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktst_ovf_) ) + "\n";
    all_zeros &= (0 == pktst_ovf_);
    r += indent_string + "  " + std::string("pktst_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktst_und_) ) + "\n";
    all_zeros &= (0 == pktst_und_);
    r += indent_string + "  " + std::string("metafifo_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(metafifo_ovf_) ) + "\n";
    all_zeros &= (0 == metafifo_ovf_);
    r += indent_string + "  " + std::string("metafifo_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(metafifo_und_) ) + "\n";
    all_zeros &= (0 == metafifo_und_);
    r += indent_string + "  " + std::string("pkthdr_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkthdr_ovf_) ) + "\n";
    all_zeros &= (0 == pkthdr_ovf_);
    r += indent_string + "  " + std::string("pkthdr_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkthdr_und_) ) + "\n";
    all_zeros &= (0 == pkthdr_und_);
    r += indent_string + "  " + std::string("mirrhdr_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirrhdr_ovf_) ) + "\n";
    all_zeros &= (0 == mirrhdr_ovf_);
    r += indent_string + "  " + std::string("mirrhdr_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirrhdr_und_) ) + "\n";
    all_zeros &= (0 == mirrhdr_und_);
    r += indent_string + "  " + std::string("datast0_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(datast0_ovf_) ) + "\n";
    all_zeros &= (0 == datast0_ovf_);
    r += indent_string + "  " + std::string("datast0_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(datast0_und_) ) + "\n";
    all_zeros &= (0 == datast0_und_);
    r += indent_string + "  " + std::string("pktdatafifo0_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdatafifo0_ovf_) ) + "\n";
    all_zeros &= (0 == pktdatafifo0_ovf_);
    r += indent_string + "  " + std::string("pktdatafifo0_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdatafifo0_und_) ) + "\n";
    all_zeros &= (0 == pktdatafifo0_und_);
    r += indent_string + "  " + std::string("datast1_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(datast1_ovf_) ) + "\n";
    all_zeros &= (0 == datast1_ovf_);
    r += indent_string + "  " + std::string("datast1_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(datast1_und_) ) + "\n";
    all_zeros &= (0 == datast1_und_);
    r += indent_string + "  " + std::string("pktdatafifo1_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdatafifo1_ovf_) ) + "\n";
    all_zeros &= (0 == pktdatafifo1_ovf_);
    r += indent_string + "  " + std::string("pktdatafifo1_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdatafifo1_und_) ) + "\n";
    all_zeros &= (0 == pktdatafifo1_und_);
    r += indent_string + "  " + std::string("datast2_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(datast2_ovf_) ) + "\n";
    all_zeros &= (0 == datast2_ovf_);
    r += indent_string + "  " + std::string("datast2_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(datast2_und_) ) + "\n";
    all_zeros &= (0 == datast2_und_);
    r += indent_string + "  " + std::string("pktdatafifo2_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdatafifo2_ovf_) ) + "\n";
    all_zeros &= (0 == pktdatafifo2_ovf_);
    r += indent_string + "  " + std::string("pktdatafifo2_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdatafifo2_und_) ) + "\n";
    all_zeros &= (0 == pktdatafifo2_und_);
    r += indent_string + "  " + std::string("arbfifo_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(arbfifo_ovf_) ) + "\n";
    all_zeros &= (0 == arbfifo_ovf_);
    r += indent_string + "  " + std::string("arbfifo_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(arbfifo_und_) ) + "\n";
    all_zeros &= (0 == arbfifo_und_);
    r += indent_string + "  " + std::string("tmschfifo_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tmschfifo_ovf_) ) + "\n";
    all_zeros &= (0 == tmschfifo_ovf_);
    r += indent_string + "  " + std::string("tmschfifo_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tmschfifo_und_) ) + "\n";
    all_zeros &= (0 == tmschfifo_und_);
    r += indent_string + "  " + std::string("ctl_chan_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ctl_chan_err_) ) + "\n";
    all_zeros &= (0 == ctl_chan_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrOutEgrIntr_0Inj") + ":\n";
    r += indent_string + "  " + std::string("pktst_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktst_ovf_) ) + "\n";
    all_zeros &= (0 == pktst_ovf_);
    r += indent_string + "  " + std::string("pktst_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktst_und_) ) + "\n";
    all_zeros &= (0 == pktst_und_);
    r += indent_string + "  " + std::string("metafifo_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(metafifo_ovf_) ) + "\n";
    all_zeros &= (0 == metafifo_ovf_);
    r += indent_string + "  " + std::string("metafifo_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(metafifo_und_) ) + "\n";
    all_zeros &= (0 == metafifo_und_);
    r += indent_string + "  " + std::string("pkthdr_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkthdr_ovf_) ) + "\n";
    all_zeros &= (0 == pkthdr_ovf_);
    r += indent_string + "  " + std::string("pkthdr_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkthdr_und_) ) + "\n";
    all_zeros &= (0 == pkthdr_und_);
    r += indent_string + "  " + std::string("mirrhdr_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirrhdr_ovf_) ) + "\n";
    all_zeros &= (0 == mirrhdr_ovf_);
    r += indent_string + "  " + std::string("mirrhdr_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirrhdr_und_) ) + "\n";
    all_zeros &= (0 == mirrhdr_und_);
    r += indent_string + "  " + std::string("datast0_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(datast0_ovf_) ) + "\n";
    all_zeros &= (0 == datast0_ovf_);
    r += indent_string + "  " + std::string("datast0_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(datast0_und_) ) + "\n";
    all_zeros &= (0 == datast0_und_);
    r += indent_string + "  " + std::string("pktdatafifo0_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdatafifo0_ovf_) ) + "\n";
    all_zeros &= (0 == pktdatafifo0_ovf_);
    r += indent_string + "  " + std::string("pktdatafifo0_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdatafifo0_und_) ) + "\n";
    all_zeros &= (0 == pktdatafifo0_und_);
    r += indent_string + "  " + std::string("datast1_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(datast1_ovf_) ) + "\n";
    all_zeros &= (0 == datast1_ovf_);
    r += indent_string + "  " + std::string("datast1_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(datast1_und_) ) + "\n";
    all_zeros &= (0 == datast1_und_);
    r += indent_string + "  " + std::string("pktdatafifo1_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdatafifo1_ovf_) ) + "\n";
    all_zeros &= (0 == pktdatafifo1_ovf_);
    r += indent_string + "  " + std::string("pktdatafifo1_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdatafifo1_und_) ) + "\n";
    all_zeros &= (0 == pktdatafifo1_und_);
    r += indent_string + "  " + std::string("datast2_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(datast2_ovf_) ) + "\n";
    all_zeros &= (0 == datast2_ovf_);
    r += indent_string + "  " + std::string("datast2_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(datast2_und_) ) + "\n";
    all_zeros &= (0 == datast2_und_);
    r += indent_string + "  " + std::string("pktdatafifo2_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdatafifo2_ovf_) ) + "\n";
    all_zeros &= (0 == pktdatafifo2_ovf_);
    r += indent_string + "  " + std::string("pktdatafifo2_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdatafifo2_und_) ) + "\n";
    all_zeros &= (0 == pktdatafifo2_und_);
    r += indent_string + "  " + std::string("arbfifo_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(arbfifo_ovf_) ) + "\n";
    all_zeros &= (0 == arbfifo_ovf_);
    r += indent_string + "  " + std::string("arbfifo_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(arbfifo_und_) ) + "\n";
    all_zeros &= (0 == arbfifo_und_);
    r += indent_string + "  " + std::string("tmschfifo_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tmschfifo_ovf_) ) + "\n";
    all_zeros &= (0 == tmschfifo_ovf_);
    r += indent_string + "  " + std::string("tmschfifo_und") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tmschfifo_und_) ) + "\n";
    all_zeros &= (0 == tmschfifo_und_);
    r += indent_string + "  " + std::string("ctl_chan_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ctl_chan_err_) ) + "\n";
    all_zeros &= (0 == ctl_chan_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t pktst_ovf_;
  uint8_t pktst_und_;
  uint8_t metafifo_ovf_;
  uint8_t metafifo_und_;
  uint8_t pkthdr_ovf_;
  uint8_t pkthdr_und_;
  uint8_t mirrhdr_ovf_;
  uint8_t mirrhdr_und_;
  uint8_t datast0_ovf_;
  uint8_t datast0_und_;
  uint8_t pktdatafifo0_ovf_;
  uint8_t pktdatafifo0_und_;
  uint8_t datast1_ovf_;
  uint8_t datast1_und_;
  uint8_t pktdatafifo1_ovf_;
  uint8_t pktdatafifo1_und_;
  uint8_t datast2_ovf_;
  uint8_t datast2_und_;
  uint8_t pktdatafifo2_ovf_;
  uint8_t pktdatafifo2_und_;
  uint8_t arbfifo_ovf_;
  uint8_t arbfifo_und_;
  uint8_t tmschfifo_ovf_;
  uint8_t tmschfifo_und_;
  uint8_t ctl_chan_err_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_dprsr_ho_e
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x38000; // to get to ho_e
    assert(index_dprsr_ho_e < 4);
    offset += index_dprsr_ho_e * 0x2000; // dprsr_ho_e[]
    offset += 0x1000; // to get to out_egr
    offset += 0x3ac; // to get to intr_0_inj
    return offset;
  }

};












  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_DPRSR_OUT_EGR_INTR_0_INJ_H__
