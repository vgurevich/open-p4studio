/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DVSL_ADDRMAP_MUTABLE_H__
#define __REGISTER_INCLUDES_DVSL_ADDRMAP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "cbc_rspec_mutable.h"
#include "lfltr_rspec_mutable.h"
#include "mbc_rspec_mutable.h"
#include "misc_regs_mutable.h"
#include "misc_tv80_rspec_mutable.h"
#include "pbc_rspec_mutable.h"
#include "pcie_bar01_regs_mutable.h"
#include "tbc_rspec_mutable.h"
#include "tm_top_rspec_mutable.h"

namespace jbay {
  namespace register_classes {

class DvslAddrmapMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DvslAddrmapMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 16777216, true, write_callback, read_callback, std::string("DvslAddrmapMutable"))
    {
    }
  DvslAddrmapMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DvslAddrmapMutable")
    {
    }
public:






  PcieBar01RegsMutable &pcie_bar01_regs() { return pcie_bar01_regs_; }





  MiscRegsMutable &misc_regs() { return misc_regs_; }





  MiscTv80RspecMutable &misc_tv80_regs() { return misc_tv80_regs_; }





  MbcRspecMutable &mbc() { return mbc_; }





  PbcRspecMutable &pbc() { return pbc_; }





  CbcRspecMutable &cbc() { return cbc_; }





  TbcRspecMutable &tbc() { return tbc_; }







  LfltrRspecMutable &lfltr(int j0) { return lfltr_[j0]; }





  TmTopRspecMutable &tm_top() { return tm_top_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x400) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      pcie_bar01_regs_.read( offset, data );
    }
    else if (offset >= 0x80000 && offset < 0x80300) {
      offset -= 0x80000;
      if (read_callback_) read_callback_();
      misc_regs_.read( offset, data );
    }
    else if (offset >= 0x84000 && offset < 0x88000) {
      offset -= 0x84000;
      if (read_callback_) read_callback_();
      misc_tv80_regs_.read( offset, data );
    }
    else if (offset >= 0x180000 && offset < 0x1802f4) {
      offset -= 0x180000;
      if (read_callback_) read_callback_();
      mbc_.read( offset, data );
    }
    else if (offset >= 0x200000 && offset < 0x200a74) {
      offset -= 0x200000;
      if (read_callback_) read_callback_();
      pbc_.read( offset, data );
    }
    else if (offset >= 0x280000 && offset < 0x280674) {
      offset -= 0x280000;
      if (read_callback_) read_callback_();
      cbc_.read( offset, data );
    }
    else if (offset >= 0x300000 && offset < 0x3007a0) {
      offset -= 0x300000;
      if (read_callback_) read_callback_();
      tbc_.read( offset, data );
    }
    else if (offset >= 0x400000 && offset < 0x600000) {
      offset -= 0x400000;
      int i0 = offset / 0x80000;
      offset  -= i0 * 0x80000;
      if (read_callback_) read_callback_();
      lfltr_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x800000 && offset < 0xd80000) {
      offset -= 0x800000;
      if (read_callback_) read_callback_();
      tm_top_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x400) {
      offset -= 0x0;
      pcie_bar01_regs_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80000 && offset < 0x80300) {
      offset -= 0x80000;
      misc_regs_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x84000 && offset < 0x88000) {
      offset -= 0x84000;
      misc_tv80_regs_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180000 && offset < 0x1802f4) {
      offset -= 0x180000;
      mbc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200000 && offset < 0x200a74) {
      offset -= 0x200000;
      pbc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x280000 && offset < 0x280674) {
      offset -= 0x280000;
      cbc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x300000 && offset < 0x3007a0) {
      offset -= 0x300000;
      tbc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400000 && offset < 0x600000) {
      offset -= 0x400000;
      int i0 = offset / 0x80000;
      offset  -= i0 * 0x80000;
      lfltr_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x800000 && offset < 0xd80000) {
      offset -= 0x800000;
      tm_top_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    pcie_bar01_regs_.reset();
    misc_regs_.reset();
    misc_tv80_regs_.reset();
    mbc_.reset();
    pbc_.reset();
    cbc_.reset();
    tbc_.reset();
    for (auto &f0 : lfltr_) {
      f0.reset();
    }
    tm_top_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x400) {
      offset -= 0x0;
      r += pcie_bar01_regs_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80000 && offset < 0x80300) {
      offset -= 0x80000;
      r += misc_regs_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x84000 && offset < 0x88000) {
      offset -= 0x84000;
      r += misc_tv80_regs_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180000 && offset < 0x1802f4) {
      offset -= 0x180000;
      r += mbc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200000 && offset < 0x200a74) {
      offset -= 0x200000;
      r += pbc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x280000 && offset < 0x280674) {
      offset -= 0x280000;
      r += cbc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x300000 && offset < 0x3007a0) {
      offset -= 0x300000;
      r += tbc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400000 && offset < 0x600000) {
      offset -= 0x400000;
      int i0 = offset / 0x80000;
      offset  -= i0 * 0x80000;
      r += lfltr_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x800000 && offset < 0xd80000) {
      offset -= 0x800000;
      r += tm_top_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += pcie_bar01_regs_.to_string(print_zeros,indent_string) ;
    r += misc_regs_.to_string(print_zeros,indent_string) ;
    r += misc_tv80_regs_.to_string(print_zeros,indent_string) ;
    r += mbc_.to_string(print_zeros,indent_string) ;
    r += pbc_.to_string(print_zeros,indent_string) ;
    r += cbc_.to_string(print_zeros,indent_string) ;
    r += tbc_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += lfltr_[a0].to_string(print_zeros,indent_string) ;
    }
    r += tm_top_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  PcieBar01RegsMutable pcie_bar01_regs_;
  MiscRegsMutable misc_regs_;
  MiscTv80RspecMutable misc_tv80_regs_;
  MbcRspecMutable mbc_;
  PbcRspecMutable pbc_;
  CbcRspecMutable cbc_;
  TbcRspecMutable tbc_;
  std::array< LfltrRspecMutable, 4 > lfltr_;
  TmTopRspecMutable tm_top_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_DVSL_ADDRMAP_MUTABLE_H__
