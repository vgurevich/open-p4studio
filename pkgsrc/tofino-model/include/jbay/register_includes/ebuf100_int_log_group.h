/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_EBUF100_INT_LOG_GROUP_H__
#define __REGISTER_INCLUDES_EBUF100_INT_LOG_GROUP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "ebuf100_int_log_group_dprsr_cfifo_overflow_err.h"
#include "ebuf100_int_log_group_dprsr_cfifo_underflow_err.h"
#include "ebuf100_int_log_group_dprsr_fifo_overflow_err.h"
#include "ebuf100_int_log_group_dprsr_mem_ecc_dual_err_addr.h"
#include "ebuf100_int_log_group_dprsr_mem_ecc_sngl_err_addr.h"
#include "ebuf100_int_log_group_dprsr_protocol_err.h"
#include "ebuf100_int_log_group_mac_cfifo_overflow_err.h"
#include "ebuf100_int_log_group_mac_cfifo_underflow_err.h"
#include "ebuf100_int_log_group_mac_mem_ecc_dual_err_addr.h"
#include "ebuf100_int_log_group_mac_mem_ecc_sngl_err_addr.h"
#include "ebuf100_int_log_group_warp_cfifo_overflow_err.h"
#include "ebuf100_int_log_group_warp_cfifo_underflow_err.h"
#include "ebuf100_int_log_group_warp_fifo_overflow_err.h"
#include "ebuf100_int_log_group_warp_mem_ecc_dual_err_addr.h"
#include "ebuf100_int_log_group_warp_mem_ecc_sngl_err_addr.h"
#include "ebuf100_int_log_group_warp_protocol_err.h"

namespace jbay {
  namespace register_classes {

class Ebuf100IntLogGroup : public model_core::RegisterBlock<RegisterCallback> {
public:
  Ebuf100IntLogGroup(
      int chipNumber, int index_pipe_addrmap, int index_ebuf900_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ebuf900_reg), 64, false, write_callback, read_callback, std::string("Ebuf100IntLogGroup")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ebuf900_reg))
    {
    }
  Ebuf100IntLogGroup(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "Ebuf100IntLogGroup")
    {
    }
public:





  Ebuf100IntLogGroupWarpMemEccDualErrAddr &glb_group_intr_log_group_warp_mem_ecc_dual_err_addr() { return glb_group_intr_log_group_warp_mem_ecc_dual_err_addr_; }





  Ebuf100IntLogGroupWarpMemEccSnglErrAddr &glb_group_intr_log_group_warp_mem_ecc_sngl_err_addr() { return glb_group_intr_log_group_warp_mem_ecc_sngl_err_addr_; }





  Ebuf100IntLogGroupDprsrMemEccDualErrAddr &glb_group_intr_log_group_dprsr_mem_ecc_dual_err_addr() { return glb_group_intr_log_group_dprsr_mem_ecc_dual_err_addr_; }





  Ebuf100IntLogGroupDprsrMemEccSnglErrAddr &glb_group_intr_log_group_dprsr_mem_ecc_sngl_err_addr() { return glb_group_intr_log_group_dprsr_mem_ecc_sngl_err_addr_; }





  Ebuf100IntLogGroupMacMemEccDualErrAddr &glb_group_intr_log_group_mac_mem_ecc_dual_err_addr() { return glb_group_intr_log_group_mac_mem_ecc_dual_err_addr_; }





  Ebuf100IntLogGroupMacMemEccSnglErrAddr &glb_group_intr_log_group_mac_mem_ecc_sngl_err_addr() { return glb_group_intr_log_group_mac_mem_ecc_sngl_err_addr_; }





  Ebuf100IntLogGroupWarpFifoOverflowErr &glb_group_intr_log_group_warp_fifo_overflow_err() { return glb_group_intr_log_group_warp_fifo_overflow_err_; }





  Ebuf100IntLogGroupDprsrFifoOverflowErr &glb_group_intr_log_group_dprsr_fifo_overflow_err() { return glb_group_intr_log_group_dprsr_fifo_overflow_err_; }





  Ebuf100IntLogGroupWarpProtocolErr &glb_group_intr_log_group_warp_protocol_err() { return glb_group_intr_log_group_warp_protocol_err_; }





  Ebuf100IntLogGroupDprsrProtocolErr &glb_group_intr_log_group_dprsr_protocol_err() { return glb_group_intr_log_group_dprsr_protocol_err_; }





  Ebuf100IntLogGroupDprsrCfifoOverflowErr &glb_group_intr_log_group_dprsr_cfifo_overflow_err() { return glb_group_intr_log_group_dprsr_cfifo_overflow_err_; }





  Ebuf100IntLogGroupDprsrCfifoUnderflowErr &glb_group_intr_log_group_dprsr_cfifo_underflow_err() { return glb_group_intr_log_group_dprsr_cfifo_underflow_err_; }





  Ebuf100IntLogGroupWarpCfifoOverflowErr &glb_group_intr_log_group_warp_cfifo_overflow_err() { return glb_group_intr_log_group_warp_cfifo_overflow_err_; }





  Ebuf100IntLogGroupWarpCfifoUnderflowErr &glb_group_intr_log_group_warp_cfifo_underflow_err() { return glb_group_intr_log_group_warp_cfifo_underflow_err_; }





  Ebuf100IntLogGroupMacCfifoOverflowErr &glb_group_intr_log_group_mac_cfifo_overflow_err() { return glb_group_intr_log_group_mac_cfifo_overflow_err_; }





  Ebuf100IntLogGroupMacCfifoUnderflowErr &glb_group_intr_log_group_mac_cfifo_underflow_err() { return glb_group_intr_log_group_mac_cfifo_underflow_err_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_warp_mem_ecc_dual_err_addr_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_warp_mem_ecc_sngl_err_addr_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_dprsr_mem_ecc_dual_err_addr_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_dprsr_mem_ecc_sngl_err_addr_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_mac_mem_ecc_dual_err_addr_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_mac_mem_ecc_sngl_err_addr_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_warp_fifo_overflow_err_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_dprsr_fifo_overflow_err_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_warp_protocol_err_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_dprsr_protocol_err_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_dprsr_cfifo_overflow_err_.read( offset, data );
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_dprsr_cfifo_underflow_err_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_warp_cfifo_overflow_err_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_warp_cfifo_underflow_err_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_mac_cfifo_overflow_err_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_mac_cfifo_underflow_err_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      glb_group_intr_log_group_warp_mem_ecc_dual_err_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      glb_group_intr_log_group_warp_mem_ecc_sngl_err_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      glb_group_intr_log_group_dprsr_mem_ecc_dual_err_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      glb_group_intr_log_group_dprsr_mem_ecc_sngl_err_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      glb_group_intr_log_group_mac_mem_ecc_dual_err_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      glb_group_intr_log_group_mac_mem_ecc_sngl_err_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      glb_group_intr_log_group_warp_fifo_overflow_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      glb_group_intr_log_group_dprsr_fifo_overflow_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      glb_group_intr_log_group_warp_protocol_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      glb_group_intr_log_group_dprsr_protocol_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      glb_group_intr_log_group_dprsr_cfifo_overflow_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      glb_group_intr_log_group_dprsr_cfifo_underflow_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      glb_group_intr_log_group_warp_cfifo_overflow_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      glb_group_intr_log_group_warp_cfifo_underflow_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      glb_group_intr_log_group_mac_cfifo_overflow_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      glb_group_intr_log_group_mac_cfifo_underflow_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    glb_group_intr_log_group_warp_mem_ecc_dual_err_addr_.reset();
    glb_group_intr_log_group_warp_mem_ecc_sngl_err_addr_.reset();
    glb_group_intr_log_group_dprsr_mem_ecc_dual_err_addr_.reset();
    glb_group_intr_log_group_dprsr_mem_ecc_sngl_err_addr_.reset();
    glb_group_intr_log_group_mac_mem_ecc_dual_err_addr_.reset();
    glb_group_intr_log_group_mac_mem_ecc_sngl_err_addr_.reset();
    glb_group_intr_log_group_warp_fifo_overflow_err_.reset();
    glb_group_intr_log_group_dprsr_fifo_overflow_err_.reset();
    glb_group_intr_log_group_warp_protocol_err_.reset();
    glb_group_intr_log_group_dprsr_protocol_err_.reset();
    glb_group_intr_log_group_dprsr_cfifo_overflow_err_.reset();
    glb_group_intr_log_group_dprsr_cfifo_underflow_err_.reset();
    glb_group_intr_log_group_warp_cfifo_overflow_err_.reset();
    glb_group_intr_log_group_warp_cfifo_underflow_err_.reset();
    glb_group_intr_log_group_mac_cfifo_overflow_err_.reset();
    glb_group_intr_log_group_mac_cfifo_underflow_err_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += glb_group_intr_log_group_warp_mem_ecc_dual_err_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += glb_group_intr_log_group_warp_mem_ecc_sngl_err_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += glb_group_intr_log_group_dprsr_mem_ecc_dual_err_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += glb_group_intr_log_group_dprsr_mem_ecc_sngl_err_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += glb_group_intr_log_group_mac_mem_ecc_dual_err_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += glb_group_intr_log_group_mac_mem_ecc_sngl_err_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += glb_group_intr_log_group_warp_fifo_overflow_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += glb_group_intr_log_group_dprsr_fifo_overflow_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += glb_group_intr_log_group_warp_protocol_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += glb_group_intr_log_group_dprsr_protocol_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += glb_group_intr_log_group_dprsr_cfifo_overflow_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      r += glb_group_intr_log_group_dprsr_cfifo_underflow_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += glb_group_intr_log_group_warp_cfifo_overflow_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += glb_group_intr_log_group_warp_cfifo_underflow_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += glb_group_intr_log_group_mac_cfifo_overflow_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += glb_group_intr_log_group_mac_cfifo_underflow_err_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += glb_group_intr_log_group_warp_mem_ecc_dual_err_addr_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_warp_mem_ecc_sngl_err_addr_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_dprsr_mem_ecc_dual_err_addr_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_dprsr_mem_ecc_sngl_err_addr_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_mac_mem_ecc_dual_err_addr_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_mac_mem_ecc_sngl_err_addr_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_warp_fifo_overflow_err_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_dprsr_fifo_overflow_err_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_warp_protocol_err_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_dprsr_protocol_err_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_dprsr_cfifo_overflow_err_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_dprsr_cfifo_underflow_err_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_warp_cfifo_overflow_err_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_warp_cfifo_underflow_err_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_mac_cfifo_overflow_err_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_mac_cfifo_underflow_err_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  Ebuf100IntLogGroupWarpMemEccDualErrAddr glb_group_intr_log_group_warp_mem_ecc_dual_err_addr_;
  Ebuf100IntLogGroupWarpMemEccSnglErrAddr glb_group_intr_log_group_warp_mem_ecc_sngl_err_addr_;
  Ebuf100IntLogGroupDprsrMemEccDualErrAddr glb_group_intr_log_group_dprsr_mem_ecc_dual_err_addr_;
  Ebuf100IntLogGroupDprsrMemEccSnglErrAddr glb_group_intr_log_group_dprsr_mem_ecc_sngl_err_addr_;
  Ebuf100IntLogGroupMacMemEccDualErrAddr glb_group_intr_log_group_mac_mem_ecc_dual_err_addr_;
  Ebuf100IntLogGroupMacMemEccSnglErrAddr glb_group_intr_log_group_mac_mem_ecc_sngl_err_addr_;
  Ebuf100IntLogGroupWarpFifoOverflowErr glb_group_intr_log_group_warp_fifo_overflow_err_;
  Ebuf100IntLogGroupDprsrFifoOverflowErr glb_group_intr_log_group_dprsr_fifo_overflow_err_;
  Ebuf100IntLogGroupWarpProtocolErr glb_group_intr_log_group_warp_protocol_err_;
  Ebuf100IntLogGroupDprsrProtocolErr glb_group_intr_log_group_dprsr_protocol_err_;
  Ebuf100IntLogGroupDprsrCfifoOverflowErr glb_group_intr_log_group_dprsr_cfifo_overflow_err_;
  Ebuf100IntLogGroupDprsrCfifoUnderflowErr glb_group_intr_log_group_dprsr_cfifo_underflow_err_;
  Ebuf100IntLogGroupWarpCfifoOverflowErr glb_group_intr_log_group_warp_cfifo_overflow_err_;
  Ebuf100IntLogGroupWarpCfifoUnderflowErr glb_group_intr_log_group_warp_cfifo_underflow_err_;
  Ebuf100IntLogGroupMacCfifoOverflowErr glb_group_intr_log_group_mac_cfifo_overflow_err_;
  Ebuf100IntLogGroupMacCfifoUnderflowErr glb_group_intr_log_group_mac_cfifo_underflow_err_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ebuf900_reg
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x40000; // to get to ebuf900reg
    assert(index_ebuf900_reg < 4);
    offset += index_ebuf900_reg * 0x2000; // ebuf900_reg[]
    offset += 0x1000; // to get to ebuf100reg
    offset += 0x40; // to get to glb_group_intr_log_group
    return offset;
  }

};





  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_EBUF100_INT_LOG_GROUP_H__
