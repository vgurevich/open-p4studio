/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ECC_DIS_H__
#define __REGISTER_INCLUDES_ECC_DIS_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class EccDis : public model_core::RegisterBlock<RegisterCallback> {
public:
  EccDis(
      int chipNumber, int index_pipe_addrmap, int index_ipb_prsr4_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ipb_prsr4_reg), 4, false, write_callback, read_callback, std::string("EccDis")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ipb_prsr4_reg))
    {
    }
  EccDis(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "EccDis")
    {
    }
public:





  uint8_t &pbc_mem0() { return pbc_mem0_; }





  uint8_t &pbc_mem1() { return pbc_mem1_; }





  uint8_t &mbc_mem() { return mbc_mem_; }





  uint8_t &mbc_meta_fifo_mem() { return mbc_meta_fifo_mem_; }





  uint8_t &llc_mem0() { return llc_mem0_; }





  uint8_t &llc_mem1() { return llc_mem1_; }





  uint8_t &llc_mem2() { return llc_mem2_; }





  uint8_t &drop_mem0() { return drop_mem0_; }





  uint8_t &drop_mem1() { return drop_mem1_; }





  uint8_t &papc_merge_mem0() { return papc_merge_mem0_; }





  uint8_t &papc_merge_mem1() { return papc_merge_mem1_; }





  uint8_t &papc_mem0() { return papc_mem0_; }





  uint8_t &dppc_mem0() { return dppc_mem0_; }





  uint8_t &gacc_mem0() { return gacc_mem0_; }





  uint8_t &gacc_mem1() { return gacc_mem1_; }





  uint8_t &gacc_mem2() { return gacc_mem2_; }





  uint8_t &gacc_mem3() { return gacc_mem3_; }





  uint8_t &bcc_mem() { return bcc_mem_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (pbc_mem0_ & 0x1);
    *data |= ((pbc_mem1_ & 0x1) << 1);
    *data |= ((mbc_mem_ & 0x1) << 2);
    *data |= ((mbc_meta_fifo_mem_ & 0x1) << 3);
    *data |= ((llc_mem0_ & 0x1) << 4);
    *data |= ((llc_mem1_ & 0x1) << 5);
    *data |= ((llc_mem2_ & 0x1) << 6);
    *data |= ((drop_mem0_ & 0x1) << 7);
    *data |= ((drop_mem1_ & 0x1) << 8);
    *data |= ((papc_merge_mem0_ & 0x1) << 9);
    *data |= ((papc_merge_mem1_ & 0x1) << 10);
    *data |= ((papc_mem0_ & 0x1) << 11);
    *data |= ((dppc_mem0_ & 0x1) << 12);
    *data |= ((gacc_mem0_ & 0x1) << 13);
    *data |= ((gacc_mem1_ & 0x1) << 14);
    *data |= ((gacc_mem2_ & 0x1) << 15);
    *data |= ((gacc_mem3_ & 0x1) << 16);
    *data |= ((bcc_mem_ & 0x1) << 17);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    pbc_mem0_ = (data & 0x1);
    pbc_mem1_ = ((data >> 1) & 0x1);
    mbc_mem_ = ((data >> 2) & 0x1);
    mbc_meta_fifo_mem_ = ((data >> 3) & 0x1);
    llc_mem0_ = ((data >> 4) & 0x1);
    llc_mem1_ = ((data >> 5) & 0x1);
    llc_mem2_ = ((data >> 6) & 0x1);
    drop_mem0_ = ((data >> 7) & 0x1);
    drop_mem1_ = ((data >> 8) & 0x1);
    papc_merge_mem0_ = ((data >> 9) & 0x1);
    papc_merge_mem1_ = ((data >> 10) & 0x1);
    papc_mem0_ = ((data >> 11) & 0x1);
    dppc_mem0_ = ((data >> 12) & 0x1);
    gacc_mem0_ = ((data >> 13) & 0x1);
    gacc_mem1_ = ((data >> 14) & 0x1);
    gacc_mem2_ = ((data >> 15) & 0x1);
    gacc_mem3_ = ((data >> 16) & 0x1);
    bcc_mem_ = ((data >> 17) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    pbc_mem0_ = 0x0;
    pbc_mem1_ = 0x0;
    mbc_mem_ = 0x0;
    mbc_meta_fifo_mem_ = 0x0;
    llc_mem0_ = 0x0;
    llc_mem1_ = 0x0;
    llc_mem2_ = 0x0;
    drop_mem0_ = 0x0;
    drop_mem1_ = 0x0;
    papc_merge_mem0_ = 0x0;
    papc_merge_mem1_ = 0x0;
    papc_mem0_ = 0x0;
    dppc_mem0_ = 0x0;
    gacc_mem0_ = 0x0;
    gacc_mem1_ = 0x0;
    gacc_mem2_ = 0x0;
    gacc_mem3_ = 0x0;
    bcc_mem_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EccDis") + ":\n";
    r += indent_string + "  " + std::string("pbc_mem0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_mem0_) ) + "\n";
    all_zeros &= (0 == pbc_mem0_);
    r += indent_string + "  " + std::string("pbc_mem1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_mem1_) ) + "\n";
    all_zeros &= (0 == pbc_mem1_);
    r += indent_string + "  " + std::string("mbc_mem") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mbc_mem_) ) + "\n";
    all_zeros &= (0 == mbc_mem_);
    r += indent_string + "  " + std::string("mbc_meta_fifo_mem") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mbc_meta_fifo_mem_) ) + "\n";
    all_zeros &= (0 == mbc_meta_fifo_mem_);
    r += indent_string + "  " + std::string("llc_mem0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem0_) ) + "\n";
    all_zeros &= (0 == llc_mem0_);
    r += indent_string + "  " + std::string("llc_mem1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem1_) ) + "\n";
    all_zeros &= (0 == llc_mem1_);
    r += indent_string + "  " + std::string("llc_mem2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem2_) ) + "\n";
    all_zeros &= (0 == llc_mem2_);
    r += indent_string + "  " + std::string("drop_mem0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_mem0_) ) + "\n";
    all_zeros &= (0 == drop_mem0_);
    r += indent_string + "  " + std::string("drop_mem1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_mem1_) ) + "\n";
    all_zeros &= (0 == drop_mem1_);
    r += indent_string + "  " + std::string("papc_merge_mem0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_merge_mem0_) ) + "\n";
    all_zeros &= (0 == papc_merge_mem0_);
    r += indent_string + "  " + std::string("papc_merge_mem1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_merge_mem1_) ) + "\n";
    all_zeros &= (0 == papc_merge_mem1_);
    r += indent_string + "  " + std::string("papc_mem0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_mem0_) ) + "\n";
    all_zeros &= (0 == papc_mem0_);
    r += indent_string + "  " + std::string("dppc_mem0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dppc_mem0_) ) + "\n";
    all_zeros &= (0 == dppc_mem0_);
    r += indent_string + "  " + std::string("gacc_mem0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem0_) ) + "\n";
    all_zeros &= (0 == gacc_mem0_);
    r += indent_string + "  " + std::string("gacc_mem1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem1_) ) + "\n";
    all_zeros &= (0 == gacc_mem1_);
    r += indent_string + "  " + std::string("gacc_mem2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem2_) ) + "\n";
    all_zeros &= (0 == gacc_mem2_);
    r += indent_string + "  " + std::string("gacc_mem3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem3_) ) + "\n";
    all_zeros &= (0 == gacc_mem3_);
    r += indent_string + "  " + std::string("bcc_mem") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bcc_mem_) ) + "\n";
    all_zeros &= (0 == bcc_mem_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EccDis") + ":\n";
    r += indent_string + "  " + std::string("pbc_mem0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_mem0_) ) + "\n";
    all_zeros &= (0 == pbc_mem0_);
    r += indent_string + "  " + std::string("pbc_mem1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_mem1_) ) + "\n";
    all_zeros &= (0 == pbc_mem1_);
    r += indent_string + "  " + std::string("mbc_mem") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mbc_mem_) ) + "\n";
    all_zeros &= (0 == mbc_mem_);
    r += indent_string + "  " + std::string("mbc_meta_fifo_mem") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mbc_meta_fifo_mem_) ) + "\n";
    all_zeros &= (0 == mbc_meta_fifo_mem_);
    r += indent_string + "  " + std::string("llc_mem0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem0_) ) + "\n";
    all_zeros &= (0 == llc_mem0_);
    r += indent_string + "  " + std::string("llc_mem1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem1_) ) + "\n";
    all_zeros &= (0 == llc_mem1_);
    r += indent_string + "  " + std::string("llc_mem2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem2_) ) + "\n";
    all_zeros &= (0 == llc_mem2_);
    r += indent_string + "  " + std::string("drop_mem0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_mem0_) ) + "\n";
    all_zeros &= (0 == drop_mem0_);
    r += indent_string + "  " + std::string("drop_mem1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_mem1_) ) + "\n";
    all_zeros &= (0 == drop_mem1_);
    r += indent_string + "  " + std::string("papc_merge_mem0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_merge_mem0_) ) + "\n";
    all_zeros &= (0 == papc_merge_mem0_);
    r += indent_string + "  " + std::string("papc_merge_mem1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_merge_mem1_) ) + "\n";
    all_zeros &= (0 == papc_merge_mem1_);
    r += indent_string + "  " + std::string("papc_mem0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_mem0_) ) + "\n";
    all_zeros &= (0 == papc_mem0_);
    r += indent_string + "  " + std::string("dppc_mem0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dppc_mem0_) ) + "\n";
    all_zeros &= (0 == dppc_mem0_);
    r += indent_string + "  " + std::string("gacc_mem0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem0_) ) + "\n";
    all_zeros &= (0 == gacc_mem0_);
    r += indent_string + "  " + std::string("gacc_mem1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem1_) ) + "\n";
    all_zeros &= (0 == gacc_mem1_);
    r += indent_string + "  " + std::string("gacc_mem2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem2_) ) + "\n";
    all_zeros &= (0 == gacc_mem2_);
    r += indent_string + "  " + std::string("gacc_mem3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem3_) ) + "\n";
    all_zeros &= (0 == gacc_mem3_);
    r += indent_string + "  " + std::string("bcc_mem") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bcc_mem_) ) + "\n";
    all_zeros &= (0 == bcc_mem_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t pbc_mem0_;
  uint8_t pbc_mem1_;
  uint8_t mbc_mem_;
  uint8_t mbc_meta_fifo_mem_;
  uint8_t llc_mem0_;
  uint8_t llc_mem1_;
  uint8_t llc_mem2_;
  uint8_t drop_mem0_;
  uint8_t drop_mem1_;
  uint8_t papc_merge_mem0_;
  uint8_t papc_merge_mem1_;
  uint8_t papc_mem0_;
  uint8_t dppc_mem0_;
  uint8_t gacc_mem0_;
  uint8_t gacc_mem1_;
  uint8_t gacc_mem2_;
  uint8_t gacc_mem3_;
  uint8_t bcc_mem_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ipb_prsr4_reg
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    assert(index_ipb_prsr4_reg < 9);
    offset += index_ipb_prsr4_reg * 0x2000; // ipb_prsr4_reg[]
    offset += 0x1d4; // to get to glb_group_ecc_dis
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_ECC_DIS_H__
