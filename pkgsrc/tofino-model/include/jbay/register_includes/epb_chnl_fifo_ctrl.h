/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_EPB_CHNL_FIFO_CTRL_H__
#define __REGISTER_INCLUDES_EPB_CHNL_FIFO_CTRL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class EpbChnlFifoCtrl : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum EpbRspecEnum {
    kChan0Group,
    kChan1Group,
    kChan2Group,
    kChan3Group,
    kChan4Group,
    kChan5Group,
    kChan6Group,
    kChan7Group
  };
public:
  EpbChnlFifoCtrl(
      int chipNumber, int index_pipe_addrmap, int index_epb_prsr4_reg, EpbRspecEnum selector_epb_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_epb_prsr4_reg, selector_epb_rspec), 8, false, write_callback, read_callback, std::string("EpbChnlFifoCtrl")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_epb_prsr4_reg) + "," + boost::lexical_cast<std::string>(selector_epb_rspec))
    {
    }
  EpbChnlFifoCtrl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "EpbChnlFifoCtrl")
    {
    }
public:





  uint16_t &ebuf_counter() { return ebuf_counter_; }
















  uint16_t &wpc_fifo_begin() { return wpc_fifo_begin_; }





  uint16_t &wpc_fifo_end() { return wpc_fifo_end_; }
















  uint8_t &pbc_fifo_begin() { return pbc_fifo_begin_; }





  uint8_t &pbc_fifo_end() { return pbc_fifo_end_; }





  uint16_t &wpc_fifo_size() { return wpc_fifo_size_; }







  uint16_t &wpc_fifo_bcnt_max() { return wpc_fifo_bcnt_max_; }






  uint8_t &rsvd() { return rsvd_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (ebuf_counter_ & 0x1ff);
      *data |= ((wpc_fifo_begin_ & 0x1ff) << 9);
      *data |= ((wpc_fifo_end_ & 0x1ff) << 18);
      *data |= ((pbc_fifo_begin_ & 0x1f) << 27);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (pbc_fifo_end_ & 0x1f);
      *data |= ((wpc_fifo_size_ & 0x3ff) << 5);
      *data |= (wpc_fifo_bcnt_max_ << 15);
      *data |= ((rsvd_ & 0x1) << 31);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      ebuf_counter_ = (data & 0x1ff);
      wpc_fifo_begin_ = ((data >> 9) & 0x1ff);
      wpc_fifo_end_ = ((data >> 18) & 0x1ff);
      pbc_fifo_begin_ = ((data >> 27) & 0x1f);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      pbc_fifo_end_ = (data & 0x1f);
      wpc_fifo_size_ = ((data >> 5) & 0x3ff);
      wpc_fifo_bcnt_max_ = (data >> 15);
      rsvd_ = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    ebuf_counter_ = 0xf;
    wpc_fifo_begin_ = 0x0;
    wpc_fifo_end_ = 0x1df;
    pbc_fifo_begin_ = 0x0;
    pbc_fifo_end_ = 0xf;
    wpc_fifo_size_ = 0x3c0;
    wpc_fifo_bcnt_max_ = 0xefff;
    rsvd_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EpbChnlFifoCtrl") + ":\n";
    r += indent_string + "  " + std::string("ebuf_counter") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_counter_) ) + "\n";
    all_zeros &= (0 == ebuf_counter_);
    r += indent_string + "  " + std::string("wpc_fifo_begin") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_fifo_begin_) ) + "\n";
    all_zeros &= (0 == wpc_fifo_begin_);
    r += indent_string + "  " + std::string("wpc_fifo_end") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_fifo_end_) ) + "\n";
    all_zeros &= (0 == wpc_fifo_end_);
    r += indent_string + "  " + std::string("pbc_fifo_begin") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_fifo_begin_) ) + "\n";
    all_zeros &= (0 == pbc_fifo_begin_);
    r += indent_string + "  " + std::string("pbc_fifo_end") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_fifo_end_) ) + "\n";
    all_zeros &= (0 == pbc_fifo_end_);
    r += indent_string + "  " + std::string("wpc_fifo_size") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_fifo_size_) ) + "\n";
    all_zeros &= (0 == wpc_fifo_size_);
    r += indent_string + "  " + std::string("wpc_fifo_bcnt_max") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_fifo_bcnt_max_) ) + "\n";
    all_zeros &= (0 == wpc_fifo_bcnt_max_);
    r += indent_string + "  " + std::string("rsvd") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rsvd_) ) + "\n";
    all_zeros &= (0 == rsvd_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EpbChnlFifoCtrl") + ":\n";
    r += indent_string + "  " + std::string("ebuf_counter") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_counter_) ) + "\n";
    all_zeros &= (0 == ebuf_counter_);
    r += indent_string + "  " + std::string("wpc_fifo_begin") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_fifo_begin_) ) + "\n";
    all_zeros &= (0 == wpc_fifo_begin_);
    r += indent_string + "  " + std::string("wpc_fifo_end") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_fifo_end_) ) + "\n";
    all_zeros &= (0 == wpc_fifo_end_);
    r += indent_string + "  " + std::string("pbc_fifo_begin") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_fifo_begin_) ) + "\n";
    all_zeros &= (0 == pbc_fifo_begin_);
    r += indent_string + "  " + std::string("pbc_fifo_end") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_fifo_end_) ) + "\n";
    all_zeros &= (0 == pbc_fifo_end_);
    r += indent_string + "  " + std::string("wpc_fifo_size") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_fifo_size_) ) + "\n";
    all_zeros &= (0 == wpc_fifo_size_);
    r += indent_string + "  " + std::string("wpc_fifo_bcnt_max") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_fifo_bcnt_max_) ) + "\n";
    all_zeros &= (0 == wpc_fifo_bcnt_max_);
    r += indent_string + "  " + std::string("rsvd") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rsvd_) ) + "\n";
    all_zeros &= (0 == rsvd_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint16_t ebuf_counter_;
  uint16_t wpc_fifo_begin_;
  uint16_t wpc_fifo_end_;
  uint8_t pbc_fifo_begin_;
  uint8_t pbc_fifo_end_;
  uint16_t wpc_fifo_size_;
  uint16_t wpc_fifo_bcnt_max_;
  uint8_t rsvd_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_epb_prsr4_reg, EpbRspecEnum selector_epb_rspec
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x20000; // to get to epbprsr4reg
    assert(index_epb_prsr4_reg < 9);
    offset += index_epb_prsr4_reg * 0x2000; // epb_prsr4_reg[]
    switch (selector_epb_rspec) {
      case kChan0Group:
        offset += 0x808; // to get to chan0_group_chnl_fifo_ctrl
        break;
      case kChan1Group:
        offset += 0x908; // to get to chan1_group_chnl_fifo_ctrl
        break;
      case kChan2Group:
        offset += 0xa08; // to get to chan2_group_chnl_fifo_ctrl
        break;
      case kChan3Group:
        offset += 0xb08; // to get to chan3_group_chnl_fifo_ctrl
        break;
      case kChan4Group:
        offset += 0xc08; // to get to chan4_group_chnl_fifo_ctrl
        break;
      case kChan5Group:
        offset += 0xd08; // to get to chan5_group_chnl_fifo_ctrl
        break;
      case kChan6Group:
        offset += 0xe08; // to get to chan6_group_chnl_fifo_ctrl
        break;
      case kChan7Group:
        offset += 0xf08; // to get to chan7_group_chnl_fifo_ctrl
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_EPB_CHNL_FIFO_CTRL_H__
