/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_EPB_GLB_GROUP_INTR_STAT_EN1_H__
#define __REGISTER_INCLUDES_EPB_GLB_GROUP_INTR_STAT_EN1_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class EpbGlbGroupIntrStatEn1 : public model_core::RegisterBlock<RegisterCallback> {
public:
  EpbGlbGroupIntrStatEn1(
      int chipNumber, int index_pipe_addrmap, int index_epb_prsr4_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_epb_prsr4_reg), 8, false, write_callback, read_callback, std::string("EpbGlbGroupIntrStatEn1")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_epb_prsr4_reg))
    {
    }
  EpbGlbGroupIntrStatEn1(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "EpbGlbGroupIntrStatEn1")
    {
    }
public:
  uint8_t &chn0_tm_miss_eop() { return chn0_tm_miss_eop_; }
  uint8_t &chn1_tm_miss_eop() { return chn1_tm_miss_eop_; }
  uint8_t &chn2_tm_miss_eop() { return chn2_tm_miss_eop_; }
  uint8_t &chn3_tm_miss_eop() { return chn3_tm_miss_eop_; }
  uint8_t &chn4_tm_miss_eop() { return chn4_tm_miss_eop_; }
  uint8_t &chn5_tm_miss_eop() { return chn5_tm_miss_eop_; }
  uint8_t &chn6_tm_miss_eop() { return chn6_tm_miss_eop_; }
  uint8_t &chn7_tm_miss_eop() { return chn7_tm_miss_eop_; }
  uint8_t &chn0_tm_miss_sop() { return chn0_tm_miss_sop_; }
  uint8_t &chn1_tm_miss_sop() { return chn1_tm_miss_sop_; }
  uint8_t &chn2_tm_miss_sop() { return chn2_tm_miss_sop_; }
  uint8_t &chn3_tm_miss_sop() { return chn3_tm_miss_sop_; }
  uint8_t &chn4_tm_miss_sop() { return chn4_tm_miss_sop_; }
  uint8_t &chn5_tm_miss_sop() { return chn5_tm_miss_sop_; }
  uint8_t &chn6_tm_miss_sop() { return chn6_tm_miss_sop_; }
  uint8_t &chn7_tm_miss_sop() { return chn7_tm_miss_sop_; }
  uint8_t &chn0_pkt_lt_32byte() { return chn0_pkt_lt_32byte_; }
  uint8_t &chn1_pkt_lt_32byte() { return chn1_pkt_lt_32byte_; }
  uint8_t &chn2_pkt_lt_32byte() { return chn2_pkt_lt_32byte_; }
  uint8_t &chn3_pkt_lt_32byte() { return chn3_pkt_lt_32byte_; }
  uint8_t &chn4_pkt_lt_32byte() { return chn4_pkt_lt_32byte_; }
  uint8_t &chn5_pkt_lt_32byte() { return chn5_pkt_lt_32byte_; }
  uint8_t &chn6_pkt_lt_32byte() { return chn6_pkt_lt_32byte_; }
  uint8_t &chn7_pkt_lt_32byte() { return chn7_pkt_lt_32byte_; }
  uint8_t &wpc_fifo_fatal0() { return wpc_fifo_fatal0_; }
  uint8_t &wpc_fifo_fatal1() { return wpc_fifo_fatal1_; }
  uint8_t &wpc_fifo_fatal2() { return wpc_fifo_fatal2_; }
  uint8_t &wpc_fifo_fatal3() { return wpc_fifo_fatal3_; }
  uint8_t &wpc_overflow() { return wpc_overflow_; }
  uint8_t &prsr0_parity_err() { return prsr0_parity_err_; }
  uint8_t &prsr1_parity_err() { return prsr1_parity_err_; }
  uint8_t &prsr2_parity_err() { return prsr2_parity_err_; }
  uint8_t &prsr3_parity_err() { return prsr3_parity_err_; }
  uint8_t &prsr4_parity_err() { return prsr4_parity_err_; }
  uint8_t &prsr5_parity_err() { return prsr5_parity_err_; }
  uint8_t &prsr6_parity_err() { return prsr6_parity_err_; }
  uint8_t &prsr7_parity_err() { return prsr7_parity_err_; }
  uint8_t &dprsr_err() { return dprsr_err_; }
  uint8_t &warp_err() { return warp_err_; }
  uint8_t &wpc_ff_ecc_dual_err() { return wpc_ff_ecc_dual_err_; }
  uint8_t &wpc_ff_ecc_sngl_err() { return wpc_ff_ecc_sngl_err_; }
  uint8_t &pbc_overflow() { return pbc_overflow_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (chn0_tm_miss_eop_ & 0x1);
      *data |= ((chn1_tm_miss_eop_ & 0x1) << 1);
      *data |= ((chn2_tm_miss_eop_ & 0x1) << 2);
      *data |= ((chn3_tm_miss_eop_ & 0x1) << 3);
      *data |= ((chn4_tm_miss_eop_ & 0x1) << 4);
      *data |= ((chn5_tm_miss_eop_ & 0x1) << 5);
      *data |= ((chn6_tm_miss_eop_ & 0x1) << 6);
      *data |= ((chn7_tm_miss_eop_ & 0x1) << 7);
      *data |= ((chn0_tm_miss_sop_ & 0x1) << 8);
      *data |= ((chn1_tm_miss_sop_ & 0x1) << 9);
      *data |= ((chn2_tm_miss_sop_ & 0x1) << 10);
      *data |= ((chn3_tm_miss_sop_ & 0x1) << 11);
      *data |= ((chn4_tm_miss_sop_ & 0x1) << 12);
      *data |= ((chn5_tm_miss_sop_ & 0x1) << 13);
      *data |= ((chn6_tm_miss_sop_ & 0x1) << 14);
      *data |= ((chn7_tm_miss_sop_ & 0x1) << 15);
      *data |= ((chn0_pkt_lt_32byte_ & 0x1) << 16);
      *data |= ((chn1_pkt_lt_32byte_ & 0x1) << 17);
      *data |= ((chn2_pkt_lt_32byte_ & 0x1) << 18);
      *data |= ((chn3_pkt_lt_32byte_ & 0x1) << 19);
      *data |= ((chn4_pkt_lt_32byte_ & 0x1) << 20);
      *data |= ((chn5_pkt_lt_32byte_ & 0x1) << 21);
      *data |= ((chn6_pkt_lt_32byte_ & 0x1) << 22);
      *data |= ((chn7_pkt_lt_32byte_ & 0x1) << 23);
      *data |= ((wpc_fifo_fatal0_ & 0x1) << 24);
      *data |= ((wpc_fifo_fatal1_ & 0x1) << 25);
      *data |= ((wpc_fifo_fatal2_ & 0x1) << 26);
      *data |= ((wpc_fifo_fatal3_ & 0x1) << 27);
      *data |= ((wpc_overflow_ & 0x1) << 28);
      *data |= ((prsr0_parity_err_ & 0x1) << 29);
      *data |= ((prsr1_parity_err_ & 0x1) << 30);
      *data |= ((prsr2_parity_err_ & 0x1) << 31);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (prsr3_parity_err_ & 0x1);
      *data |= ((prsr4_parity_err_ & 0x1) << 1);
      *data |= ((prsr5_parity_err_ & 0x1) << 2);
      *data |= ((prsr6_parity_err_ & 0x1) << 3);
      *data |= ((prsr7_parity_err_ & 0x1) << 4);
      *data |= ((dprsr_err_ & 0x1) << 5);
      *data |= ((warp_err_ & 0x1) << 6);
      *data |= ((wpc_ff_ecc_dual_err_ & 0x1) << 7);
      *data |= ((wpc_ff_ecc_sngl_err_ & 0x1) << 8);
      *data |= ((pbc_overflow_ & 0x1) << 9);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      chn0_tm_miss_eop_ = (data & 0x1);
      chn1_tm_miss_eop_ = ((data >> 1) & 0x1);
      chn2_tm_miss_eop_ = ((data >> 2) & 0x1);
      chn3_tm_miss_eop_ = ((data >> 3) & 0x1);
      chn4_tm_miss_eop_ = ((data >> 4) & 0x1);
      chn5_tm_miss_eop_ = ((data >> 5) & 0x1);
      chn6_tm_miss_eop_ = ((data >> 6) & 0x1);
      chn7_tm_miss_eop_ = ((data >> 7) & 0x1);
      chn0_tm_miss_sop_ = ((data >> 8) & 0x1);
      chn1_tm_miss_sop_ = ((data >> 9) & 0x1);
      chn2_tm_miss_sop_ = ((data >> 10) & 0x1);
      chn3_tm_miss_sop_ = ((data >> 11) & 0x1);
      chn4_tm_miss_sop_ = ((data >> 12) & 0x1);
      chn5_tm_miss_sop_ = ((data >> 13) & 0x1);
      chn6_tm_miss_sop_ = ((data >> 14) & 0x1);
      chn7_tm_miss_sop_ = ((data >> 15) & 0x1);
      chn0_pkt_lt_32byte_ = ((data >> 16) & 0x1);
      chn1_pkt_lt_32byte_ = ((data >> 17) & 0x1);
      chn2_pkt_lt_32byte_ = ((data >> 18) & 0x1);
      chn3_pkt_lt_32byte_ = ((data >> 19) & 0x1);
      chn4_pkt_lt_32byte_ = ((data >> 20) & 0x1);
      chn5_pkt_lt_32byte_ = ((data >> 21) & 0x1);
      chn6_pkt_lt_32byte_ = ((data >> 22) & 0x1);
      chn7_pkt_lt_32byte_ = ((data >> 23) & 0x1);
      wpc_fifo_fatal0_ = ((data >> 24) & 0x1);
      wpc_fifo_fatal1_ = ((data >> 25) & 0x1);
      wpc_fifo_fatal2_ = ((data >> 26) & 0x1);
      wpc_fifo_fatal3_ = ((data >> 27) & 0x1);
      wpc_overflow_ = ((data >> 28) & 0x1);
      prsr0_parity_err_ = ((data >> 29) & 0x1);
      prsr1_parity_err_ = ((data >> 30) & 0x1);
      prsr2_parity_err_ = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      prsr3_parity_err_ = (data & 0x1);
      prsr4_parity_err_ = ((data >> 1) & 0x1);
      prsr5_parity_err_ = ((data >> 2) & 0x1);
      prsr6_parity_err_ = ((data >> 3) & 0x1);
      prsr7_parity_err_ = ((data >> 4) & 0x1);
      dprsr_err_ = ((data >> 5) & 0x1);
      warp_err_ = ((data >> 6) & 0x1);
      wpc_ff_ecc_dual_err_ = ((data >> 7) & 0x1);
      wpc_ff_ecc_sngl_err_ = ((data >> 8) & 0x1);
      pbc_overflow_ = ((data >> 9) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    chn0_tm_miss_eop_ = 0x0;
    chn1_tm_miss_eop_ = 0x0;
    chn2_tm_miss_eop_ = 0x0;
    chn3_tm_miss_eop_ = 0x0;
    chn4_tm_miss_eop_ = 0x0;
    chn5_tm_miss_eop_ = 0x0;
    chn6_tm_miss_eop_ = 0x0;
    chn7_tm_miss_eop_ = 0x0;
    chn0_tm_miss_sop_ = 0x0;
    chn1_tm_miss_sop_ = 0x0;
    chn2_tm_miss_sop_ = 0x0;
    chn3_tm_miss_sop_ = 0x0;
    chn4_tm_miss_sop_ = 0x0;
    chn5_tm_miss_sop_ = 0x0;
    chn6_tm_miss_sop_ = 0x0;
    chn7_tm_miss_sop_ = 0x0;
    chn0_pkt_lt_32byte_ = 0x0;
    chn1_pkt_lt_32byte_ = 0x0;
    chn2_pkt_lt_32byte_ = 0x0;
    chn3_pkt_lt_32byte_ = 0x0;
    chn4_pkt_lt_32byte_ = 0x0;
    chn5_pkt_lt_32byte_ = 0x0;
    chn6_pkt_lt_32byte_ = 0x0;
    chn7_pkt_lt_32byte_ = 0x0;
    wpc_fifo_fatal0_ = 0x0;
    wpc_fifo_fatal1_ = 0x0;
    wpc_fifo_fatal2_ = 0x0;
    wpc_fifo_fatal3_ = 0x0;
    wpc_overflow_ = 0x0;
    prsr0_parity_err_ = 0x0;
    prsr1_parity_err_ = 0x0;
    prsr2_parity_err_ = 0x0;
    prsr3_parity_err_ = 0x0;
    prsr4_parity_err_ = 0x0;
    prsr5_parity_err_ = 0x0;
    prsr6_parity_err_ = 0x0;
    prsr7_parity_err_ = 0x0;
    dprsr_err_ = 0x0;
    warp_err_ = 0x0;
    wpc_ff_ecc_dual_err_ = 0x0;
    wpc_ff_ecc_sngl_err_ = 0x0;
    pbc_overflow_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EpbGlbGroupIntrStatEn1") + ":\n";
    r += indent_string + "  " + std::string("chn0_tm_miss_eop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn0_tm_miss_eop_) ) + "\n";
    all_zeros &= (0 == chn0_tm_miss_eop_);
    r += indent_string + "  " + std::string("chn1_tm_miss_eop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn1_tm_miss_eop_) ) + "\n";
    all_zeros &= (0 == chn1_tm_miss_eop_);
    r += indent_string + "  " + std::string("chn2_tm_miss_eop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn2_tm_miss_eop_) ) + "\n";
    all_zeros &= (0 == chn2_tm_miss_eop_);
    r += indent_string + "  " + std::string("chn3_tm_miss_eop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn3_tm_miss_eop_) ) + "\n";
    all_zeros &= (0 == chn3_tm_miss_eop_);
    r += indent_string + "  " + std::string("chn4_tm_miss_eop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn4_tm_miss_eop_) ) + "\n";
    all_zeros &= (0 == chn4_tm_miss_eop_);
    r += indent_string + "  " + std::string("chn5_tm_miss_eop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn5_tm_miss_eop_) ) + "\n";
    all_zeros &= (0 == chn5_tm_miss_eop_);
    r += indent_string + "  " + std::string("chn6_tm_miss_eop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn6_tm_miss_eop_) ) + "\n";
    all_zeros &= (0 == chn6_tm_miss_eop_);
    r += indent_string + "  " + std::string("chn7_tm_miss_eop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn7_tm_miss_eop_) ) + "\n";
    all_zeros &= (0 == chn7_tm_miss_eop_);
    r += indent_string + "  " + std::string("chn0_tm_miss_sop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn0_tm_miss_sop_) ) + "\n";
    all_zeros &= (0 == chn0_tm_miss_sop_);
    r += indent_string + "  " + std::string("chn1_tm_miss_sop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn1_tm_miss_sop_) ) + "\n";
    all_zeros &= (0 == chn1_tm_miss_sop_);
    r += indent_string + "  " + std::string("chn2_tm_miss_sop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn2_tm_miss_sop_) ) + "\n";
    all_zeros &= (0 == chn2_tm_miss_sop_);
    r += indent_string + "  " + std::string("chn3_tm_miss_sop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn3_tm_miss_sop_) ) + "\n";
    all_zeros &= (0 == chn3_tm_miss_sop_);
    r += indent_string + "  " + std::string("chn4_tm_miss_sop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn4_tm_miss_sop_) ) + "\n";
    all_zeros &= (0 == chn4_tm_miss_sop_);
    r += indent_string + "  " + std::string("chn5_tm_miss_sop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn5_tm_miss_sop_) ) + "\n";
    all_zeros &= (0 == chn5_tm_miss_sop_);
    r += indent_string + "  " + std::string("chn6_tm_miss_sop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn6_tm_miss_sop_) ) + "\n";
    all_zeros &= (0 == chn6_tm_miss_sop_);
    r += indent_string + "  " + std::string("chn7_tm_miss_sop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn7_tm_miss_sop_) ) + "\n";
    all_zeros &= (0 == chn7_tm_miss_sop_);
    r += indent_string + "  " + std::string("chn0_pkt_lt_32byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn0_pkt_lt_32byte_) ) + "\n";
    all_zeros &= (0 == chn0_pkt_lt_32byte_);
    r += indent_string + "  " + std::string("chn1_pkt_lt_32byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn1_pkt_lt_32byte_) ) + "\n";
    all_zeros &= (0 == chn1_pkt_lt_32byte_);
    r += indent_string + "  " + std::string("chn2_pkt_lt_32byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn2_pkt_lt_32byte_) ) + "\n";
    all_zeros &= (0 == chn2_pkt_lt_32byte_);
    r += indent_string + "  " + std::string("chn3_pkt_lt_32byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn3_pkt_lt_32byte_) ) + "\n";
    all_zeros &= (0 == chn3_pkt_lt_32byte_);
    r += indent_string + "  " + std::string("chn4_pkt_lt_32byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn4_pkt_lt_32byte_) ) + "\n";
    all_zeros &= (0 == chn4_pkt_lt_32byte_);
    r += indent_string + "  " + std::string("chn5_pkt_lt_32byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn5_pkt_lt_32byte_) ) + "\n";
    all_zeros &= (0 == chn5_pkt_lt_32byte_);
    r += indent_string + "  " + std::string("chn6_pkt_lt_32byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn6_pkt_lt_32byte_) ) + "\n";
    all_zeros &= (0 == chn6_pkt_lt_32byte_);
    r += indent_string + "  " + std::string("chn7_pkt_lt_32byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn7_pkt_lt_32byte_) ) + "\n";
    all_zeros &= (0 == chn7_pkt_lt_32byte_);
    r += indent_string + "  " + std::string("wpc_fifo_fatal0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_fifo_fatal0_) ) + "\n";
    all_zeros &= (0 == wpc_fifo_fatal0_);
    r += indent_string + "  " + std::string("wpc_fifo_fatal1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_fifo_fatal1_) ) + "\n";
    all_zeros &= (0 == wpc_fifo_fatal1_);
    r += indent_string + "  " + std::string("wpc_fifo_fatal2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_fifo_fatal2_) ) + "\n";
    all_zeros &= (0 == wpc_fifo_fatal2_);
    r += indent_string + "  " + std::string("wpc_fifo_fatal3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_fifo_fatal3_) ) + "\n";
    all_zeros &= (0 == wpc_fifo_fatal3_);
    r += indent_string + "  " + std::string("wpc_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_overflow_) ) + "\n";
    all_zeros &= (0 == wpc_overflow_);
    r += indent_string + "  " + std::string("prsr0_parity_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr0_parity_err_) ) + "\n";
    all_zeros &= (0 == prsr0_parity_err_);
    r += indent_string + "  " + std::string("prsr1_parity_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr1_parity_err_) ) + "\n";
    all_zeros &= (0 == prsr1_parity_err_);
    r += indent_string + "  " + std::string("prsr2_parity_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr2_parity_err_) ) + "\n";
    all_zeros &= (0 == prsr2_parity_err_);
    r += indent_string + "  " + std::string("prsr3_parity_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr3_parity_err_) ) + "\n";
    all_zeros &= (0 == prsr3_parity_err_);
    r += indent_string + "  " + std::string("prsr4_parity_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr4_parity_err_) ) + "\n";
    all_zeros &= (0 == prsr4_parity_err_);
    r += indent_string + "  " + std::string("prsr5_parity_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr5_parity_err_) ) + "\n";
    all_zeros &= (0 == prsr5_parity_err_);
    r += indent_string + "  " + std::string("prsr6_parity_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr6_parity_err_) ) + "\n";
    all_zeros &= (0 == prsr6_parity_err_);
    r += indent_string + "  " + std::string("prsr7_parity_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr7_parity_err_) ) + "\n";
    all_zeros &= (0 == prsr7_parity_err_);
    r += indent_string + "  " + std::string("dprsr_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_err_) ) + "\n";
    all_zeros &= (0 == dprsr_err_);
    r += indent_string + "  " + std::string("warp_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(warp_err_) ) + "\n";
    all_zeros &= (0 == warp_err_);
    r += indent_string + "  " + std::string("wpc_ff_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_ff_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == wpc_ff_ecc_dual_err_);
    r += indent_string + "  " + std::string("wpc_ff_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_ff_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == wpc_ff_ecc_sngl_err_);
    r += indent_string + "  " + std::string("pbc_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_overflow_) ) + "\n";
    all_zeros &= (0 == pbc_overflow_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EpbGlbGroupIntrStatEn1") + ":\n";
    r += indent_string + "  " + std::string("chn0_tm_miss_eop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn0_tm_miss_eop_) ) + "\n";
    all_zeros &= (0 == chn0_tm_miss_eop_);
    r += indent_string + "  " + std::string("chn1_tm_miss_eop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn1_tm_miss_eop_) ) + "\n";
    all_zeros &= (0 == chn1_tm_miss_eop_);
    r += indent_string + "  " + std::string("chn2_tm_miss_eop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn2_tm_miss_eop_) ) + "\n";
    all_zeros &= (0 == chn2_tm_miss_eop_);
    r += indent_string + "  " + std::string("chn3_tm_miss_eop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn3_tm_miss_eop_) ) + "\n";
    all_zeros &= (0 == chn3_tm_miss_eop_);
    r += indent_string + "  " + std::string("chn4_tm_miss_eop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn4_tm_miss_eop_) ) + "\n";
    all_zeros &= (0 == chn4_tm_miss_eop_);
    r += indent_string + "  " + std::string("chn5_tm_miss_eop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn5_tm_miss_eop_) ) + "\n";
    all_zeros &= (0 == chn5_tm_miss_eop_);
    r += indent_string + "  " + std::string("chn6_tm_miss_eop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn6_tm_miss_eop_) ) + "\n";
    all_zeros &= (0 == chn6_tm_miss_eop_);
    r += indent_string + "  " + std::string("chn7_tm_miss_eop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn7_tm_miss_eop_) ) + "\n";
    all_zeros &= (0 == chn7_tm_miss_eop_);
    r += indent_string + "  " + std::string("chn0_tm_miss_sop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn0_tm_miss_sop_) ) + "\n";
    all_zeros &= (0 == chn0_tm_miss_sop_);
    r += indent_string + "  " + std::string("chn1_tm_miss_sop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn1_tm_miss_sop_) ) + "\n";
    all_zeros &= (0 == chn1_tm_miss_sop_);
    r += indent_string + "  " + std::string("chn2_tm_miss_sop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn2_tm_miss_sop_) ) + "\n";
    all_zeros &= (0 == chn2_tm_miss_sop_);
    r += indent_string + "  " + std::string("chn3_tm_miss_sop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn3_tm_miss_sop_) ) + "\n";
    all_zeros &= (0 == chn3_tm_miss_sop_);
    r += indent_string + "  " + std::string("chn4_tm_miss_sop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn4_tm_miss_sop_) ) + "\n";
    all_zeros &= (0 == chn4_tm_miss_sop_);
    r += indent_string + "  " + std::string("chn5_tm_miss_sop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn5_tm_miss_sop_) ) + "\n";
    all_zeros &= (0 == chn5_tm_miss_sop_);
    r += indent_string + "  " + std::string("chn6_tm_miss_sop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn6_tm_miss_sop_) ) + "\n";
    all_zeros &= (0 == chn6_tm_miss_sop_);
    r += indent_string + "  " + std::string("chn7_tm_miss_sop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn7_tm_miss_sop_) ) + "\n";
    all_zeros &= (0 == chn7_tm_miss_sop_);
    r += indent_string + "  " + std::string("chn0_pkt_lt_32byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn0_pkt_lt_32byte_) ) + "\n";
    all_zeros &= (0 == chn0_pkt_lt_32byte_);
    r += indent_string + "  " + std::string("chn1_pkt_lt_32byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn1_pkt_lt_32byte_) ) + "\n";
    all_zeros &= (0 == chn1_pkt_lt_32byte_);
    r += indent_string + "  " + std::string("chn2_pkt_lt_32byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn2_pkt_lt_32byte_) ) + "\n";
    all_zeros &= (0 == chn2_pkt_lt_32byte_);
    r += indent_string + "  " + std::string("chn3_pkt_lt_32byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn3_pkt_lt_32byte_) ) + "\n";
    all_zeros &= (0 == chn3_pkt_lt_32byte_);
    r += indent_string + "  " + std::string("chn4_pkt_lt_32byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn4_pkt_lt_32byte_) ) + "\n";
    all_zeros &= (0 == chn4_pkt_lt_32byte_);
    r += indent_string + "  " + std::string("chn5_pkt_lt_32byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn5_pkt_lt_32byte_) ) + "\n";
    all_zeros &= (0 == chn5_pkt_lt_32byte_);
    r += indent_string + "  " + std::string("chn6_pkt_lt_32byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn6_pkt_lt_32byte_) ) + "\n";
    all_zeros &= (0 == chn6_pkt_lt_32byte_);
    r += indent_string + "  " + std::string("chn7_pkt_lt_32byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chn7_pkt_lt_32byte_) ) + "\n";
    all_zeros &= (0 == chn7_pkt_lt_32byte_);
    r += indent_string + "  " + std::string("wpc_fifo_fatal0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_fifo_fatal0_) ) + "\n";
    all_zeros &= (0 == wpc_fifo_fatal0_);
    r += indent_string + "  " + std::string("wpc_fifo_fatal1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_fifo_fatal1_) ) + "\n";
    all_zeros &= (0 == wpc_fifo_fatal1_);
    r += indent_string + "  " + std::string("wpc_fifo_fatal2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_fifo_fatal2_) ) + "\n";
    all_zeros &= (0 == wpc_fifo_fatal2_);
    r += indent_string + "  " + std::string("wpc_fifo_fatal3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_fifo_fatal3_) ) + "\n";
    all_zeros &= (0 == wpc_fifo_fatal3_);
    r += indent_string + "  " + std::string("wpc_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_overflow_) ) + "\n";
    all_zeros &= (0 == wpc_overflow_);
    r += indent_string + "  " + std::string("prsr0_parity_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr0_parity_err_) ) + "\n";
    all_zeros &= (0 == prsr0_parity_err_);
    r += indent_string + "  " + std::string("prsr1_parity_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr1_parity_err_) ) + "\n";
    all_zeros &= (0 == prsr1_parity_err_);
    r += indent_string + "  " + std::string("prsr2_parity_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr2_parity_err_) ) + "\n";
    all_zeros &= (0 == prsr2_parity_err_);
    r += indent_string + "  " + std::string("prsr3_parity_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr3_parity_err_) ) + "\n";
    all_zeros &= (0 == prsr3_parity_err_);
    r += indent_string + "  " + std::string("prsr4_parity_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr4_parity_err_) ) + "\n";
    all_zeros &= (0 == prsr4_parity_err_);
    r += indent_string + "  " + std::string("prsr5_parity_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr5_parity_err_) ) + "\n";
    all_zeros &= (0 == prsr5_parity_err_);
    r += indent_string + "  " + std::string("prsr6_parity_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr6_parity_err_) ) + "\n";
    all_zeros &= (0 == prsr6_parity_err_);
    r += indent_string + "  " + std::string("prsr7_parity_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr7_parity_err_) ) + "\n";
    all_zeros &= (0 == prsr7_parity_err_);
    r += indent_string + "  " + std::string("dprsr_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_err_) ) + "\n";
    all_zeros &= (0 == dprsr_err_);
    r += indent_string + "  " + std::string("warp_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(warp_err_) ) + "\n";
    all_zeros &= (0 == warp_err_);
    r += indent_string + "  " + std::string("wpc_ff_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_ff_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == wpc_ff_ecc_dual_err_);
    r += indent_string + "  " + std::string("wpc_ff_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wpc_ff_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == wpc_ff_ecc_sngl_err_);
    r += indent_string + "  " + std::string("pbc_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_overflow_) ) + "\n";
    all_zeros &= (0 == pbc_overflow_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t chn0_tm_miss_eop_;
  uint8_t chn1_tm_miss_eop_;
  uint8_t chn2_tm_miss_eop_;
  uint8_t chn3_tm_miss_eop_;
  uint8_t chn4_tm_miss_eop_;
  uint8_t chn5_tm_miss_eop_;
  uint8_t chn6_tm_miss_eop_;
  uint8_t chn7_tm_miss_eop_;
  uint8_t chn0_tm_miss_sop_;
  uint8_t chn1_tm_miss_sop_;
  uint8_t chn2_tm_miss_sop_;
  uint8_t chn3_tm_miss_sop_;
  uint8_t chn4_tm_miss_sop_;
  uint8_t chn5_tm_miss_sop_;
  uint8_t chn6_tm_miss_sop_;
  uint8_t chn7_tm_miss_sop_;
  uint8_t chn0_pkt_lt_32byte_;
  uint8_t chn1_pkt_lt_32byte_;
  uint8_t chn2_pkt_lt_32byte_;
  uint8_t chn3_pkt_lt_32byte_;
  uint8_t chn4_pkt_lt_32byte_;
  uint8_t chn5_pkt_lt_32byte_;
  uint8_t chn6_pkt_lt_32byte_;
  uint8_t chn7_pkt_lt_32byte_;
  uint8_t wpc_fifo_fatal0_;
  uint8_t wpc_fifo_fatal1_;
  uint8_t wpc_fifo_fatal2_;
  uint8_t wpc_fifo_fatal3_;
  uint8_t wpc_overflow_;
  uint8_t prsr0_parity_err_;
  uint8_t prsr1_parity_err_;
  uint8_t prsr2_parity_err_;
  uint8_t prsr3_parity_err_;
  uint8_t prsr4_parity_err_;
  uint8_t prsr5_parity_err_;
  uint8_t prsr6_parity_err_;
  uint8_t prsr7_parity_err_;
  uint8_t dprsr_err_;
  uint8_t warp_err_;
  uint8_t wpc_ff_ecc_dual_err_;
  uint8_t wpc_ff_ecc_sngl_err_;
  uint8_t pbc_overflow_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_epb_prsr4_reg
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x20000; // to get to epbprsr4reg
    assert(index_epb_prsr4_reg < 9);
    offset += index_epb_prsr4_reg * 0x2000; // epb_prsr4_reg[]
    offset += 0x50; // to get to glb_group_intr_stat_en1
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_EPB_GLB_GROUP_INTR_STAT_EN1_H__
