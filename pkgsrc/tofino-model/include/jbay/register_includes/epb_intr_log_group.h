/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_EPB_INTR_LOG_GROUP_H__
#define __REGISTER_INCLUDES_EPB_INTR_LOG_GROUP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "epb_intr_log_group_pbc_overflow_chnl.h"
#include "epb_intr_log_group_wpc_ff_ecc_dual_err_addr.h"
#include "epb_intr_log_group_wpc_ff_ecc_sngl_err_addr.h"
#include "epb_intr_log_group_wpc_fifo_fatal0_err.h"
#include "epb_intr_log_group_wpc_fifo_fatal1_err.h"
#include "epb_intr_log_group_wpc_fifo_fatal2_err.h"
#include "epb_intr_log_group_wpc_fifo_fatal3_err.h"
#include "epb_intr_log_group_wpc_overflow_err.h"

namespace jbay {
  namespace register_classes {

class EpbIntrLogGroup : public model_core::RegisterBlock<RegisterCallback> {
public:
  EpbIntrLogGroup(
      int chipNumber, int index_pipe_addrmap, int index_epb_prsr4_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_epb_prsr4_reg), 32, false, write_callback, read_callback, std::string("EpbIntrLogGroup")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_epb_prsr4_reg))
    {
    }
  EpbIntrLogGroup(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "EpbIntrLogGroup")
    {
    }
public:





  EpbIntrLogGroupWpcFifoFatal0Err &glb_group_intr_log_group_wpc_fifo_fatal0_err() { return glb_group_intr_log_group_wpc_fifo_fatal0_err_; }





  EpbIntrLogGroupWpcFifoFatal1Err &glb_group_intr_log_group_wpc_fifo_fatal1_err() { return glb_group_intr_log_group_wpc_fifo_fatal1_err_; }





  EpbIntrLogGroupWpcFifoFatal2Err &glb_group_intr_log_group_wpc_fifo_fatal2_err() { return glb_group_intr_log_group_wpc_fifo_fatal2_err_; }





  EpbIntrLogGroupWpcFifoFatal3Err &glb_group_intr_log_group_wpc_fifo_fatal3_err() { return glb_group_intr_log_group_wpc_fifo_fatal3_err_; }





  EpbIntrLogGroupWpcOverflowErr &glb_group_intr_log_group_wpc_overflow_err() { return glb_group_intr_log_group_wpc_overflow_err_; }





  EpbIntrLogGroupWpcFfEccDualErrAddr &glb_group_intr_log_group_wpc_ff_ecc_dual_err_addr() { return glb_group_intr_log_group_wpc_ff_ecc_dual_err_addr_; }





  EpbIntrLogGroupWpcFfEccSnglErrAddr &glb_group_intr_log_group_wpc_ff_ecc_sngl_err_addr() { return glb_group_intr_log_group_wpc_ff_ecc_sngl_err_addr_; }





  EpbIntrLogGroupPbcOverflowChnl &glb_group_intr_log_group_pbc_overflow_chnl() { return glb_group_intr_log_group_pbc_overflow_chnl_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_wpc_fifo_fatal0_err_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_wpc_fifo_fatal1_err_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_wpc_fifo_fatal2_err_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_wpc_fifo_fatal3_err_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_wpc_overflow_err_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_wpc_ff_ecc_dual_err_addr_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_wpc_ff_ecc_sngl_err_addr_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_pbc_overflow_chnl_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      glb_group_intr_log_group_wpc_fifo_fatal0_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      glb_group_intr_log_group_wpc_fifo_fatal1_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      glb_group_intr_log_group_wpc_fifo_fatal2_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      glb_group_intr_log_group_wpc_fifo_fatal3_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      glb_group_intr_log_group_wpc_overflow_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      glb_group_intr_log_group_wpc_ff_ecc_dual_err_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      glb_group_intr_log_group_wpc_ff_ecc_sngl_err_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      glb_group_intr_log_group_pbc_overflow_chnl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    glb_group_intr_log_group_wpc_fifo_fatal0_err_.reset();
    glb_group_intr_log_group_wpc_fifo_fatal1_err_.reset();
    glb_group_intr_log_group_wpc_fifo_fatal2_err_.reset();
    glb_group_intr_log_group_wpc_fifo_fatal3_err_.reset();
    glb_group_intr_log_group_wpc_overflow_err_.reset();
    glb_group_intr_log_group_wpc_ff_ecc_dual_err_addr_.reset();
    glb_group_intr_log_group_wpc_ff_ecc_sngl_err_addr_.reset();
    glb_group_intr_log_group_pbc_overflow_chnl_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += glb_group_intr_log_group_wpc_fifo_fatal0_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += glb_group_intr_log_group_wpc_fifo_fatal1_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += glb_group_intr_log_group_wpc_fifo_fatal2_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += glb_group_intr_log_group_wpc_fifo_fatal3_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += glb_group_intr_log_group_wpc_overflow_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += glb_group_intr_log_group_wpc_ff_ecc_dual_err_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += glb_group_intr_log_group_wpc_ff_ecc_sngl_err_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += glb_group_intr_log_group_pbc_overflow_chnl_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += glb_group_intr_log_group_wpc_fifo_fatal0_err_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_wpc_fifo_fatal1_err_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_wpc_fifo_fatal2_err_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_wpc_fifo_fatal3_err_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_wpc_overflow_err_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_wpc_ff_ecc_dual_err_addr_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_wpc_ff_ecc_sngl_err_addr_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_pbc_overflow_chnl_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  EpbIntrLogGroupWpcFifoFatal0Err glb_group_intr_log_group_wpc_fifo_fatal0_err_;
  EpbIntrLogGroupWpcFifoFatal1Err glb_group_intr_log_group_wpc_fifo_fatal1_err_;
  EpbIntrLogGroupWpcFifoFatal2Err glb_group_intr_log_group_wpc_fifo_fatal2_err_;
  EpbIntrLogGroupWpcFifoFatal3Err glb_group_intr_log_group_wpc_fifo_fatal3_err_;
  EpbIntrLogGroupWpcOverflowErr glb_group_intr_log_group_wpc_overflow_err_;
  EpbIntrLogGroupWpcFfEccDualErrAddr glb_group_intr_log_group_wpc_ff_ecc_dual_err_addr_;
  EpbIntrLogGroupWpcFfEccSnglErrAddr glb_group_intr_log_group_wpc_ff_ecc_sngl_err_addr_;
  EpbIntrLogGroupPbcOverflowChnl glb_group_intr_log_group_pbc_overflow_chnl_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_epb_prsr4_reg
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x20000; // to get to epbprsr4reg
    assert(index_epb_prsr4_reg < 9);
    offset += index_epb_prsr4_reg * 0x2000; // epb_prsr4_reg[]
    offset += 0x80; // to get to glb_group_intr_log_group
    return offset;
  }

};





  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_EPB_INTR_LOG_GROUP_H__
