/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH100G_REG_RSPEC_CHNL_INTR_EN0_MUTABLE_H__
#define __REGISTER_INCLUDES_ETH100G_REG_RSPEC_CHNL_INTR_EN0_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class Eth100gRegRspecChnlIntrEn0Mutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum JbayRegEnum {
    kEth100gRegs,
    kEth100gRegsRot
  };
public:
  Eth100gRegRspecChnlIntrEn0Mutable(
      int chipNumber, JbayRegEnum selector_jbay_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_jbay_reg), 4, true, write_callback, read_callback, std::string("Eth100gRegRspecChnlIntrEn0Mutable")+":"+boost::lexical_cast<std::string>(selector_jbay_reg))
    {
    }
  Eth100gRegRspecChnlIntrEn0Mutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "Eth100gRegRspecChnlIntrEn0Mutable")
    {
    }
public:
  uint8_t rxcrc_err0() { return rxcrc_err0_; }
  void rxcrc_err0(const uint8_t &v) { rxcrc_err0_=v; }
  uint8_t rxcrc_err1() { return rxcrc_err1_; }
  void rxcrc_err1(const uint8_t &v) { rxcrc_err1_=v; }
  uint8_t rxcrc_err2() { return rxcrc_err2_; }
  void rxcrc_err2(const uint8_t &v) { rxcrc_err2_=v; }
  uint8_t rxcrc_err3() { return rxcrc_err3_; }
  void rxcrc_err3(const uint8_t &v) { rxcrc_err3_=v; }
  uint8_t txcrc_err0() { return txcrc_err0_; }
  void txcrc_err0(const uint8_t &v) { txcrc_err0_=v; }
  uint8_t txcrc_err1() { return txcrc_err1_; }
  void txcrc_err1(const uint8_t &v) { txcrc_err1_=v; }
  uint8_t txcrc_err2() { return txcrc_err2_; }
  void txcrc_err2(const uint8_t &v) { txcrc_err2_=v; }
  uint8_t txcrc_err3() { return txcrc_err3_; }
  void txcrc_err3(const uint8_t &v) { txcrc_err3_=v; }
  uint8_t txfifo_ovf0() { return txfifo_ovf0_; }
  void txfifo_ovf0(const uint8_t &v) { txfifo_ovf0_=v; }
  uint8_t txfifo_ovf1() { return txfifo_ovf1_; }
  void txfifo_ovf1(const uint8_t &v) { txfifo_ovf1_=v; }
  uint8_t txfifo_ovf2() { return txfifo_ovf2_; }
  void txfifo_ovf2(const uint8_t &v) { txfifo_ovf2_=v; }
  uint8_t txfifo_ovf3() { return txfifo_ovf3_; }
  void txfifo_ovf3(const uint8_t &v) { txfifo_ovf3_=v; }
  uint8_t rxeop_timo0() { return rxeop_timo0_; }
  void rxeop_timo0(const uint8_t &v) { rxeop_timo0_=v; }
  uint8_t rxeop_timo1() { return rxeop_timo1_; }
  void rxeop_timo1(const uint8_t &v) { rxeop_timo1_=v; }
  uint8_t rxeop_timo2() { return rxeop_timo2_; }
  void rxeop_timo2(const uint8_t &v) { rxeop_timo2_=v; }
  uint8_t rxeop_timo3() { return rxeop_timo3_; }
  void rxeop_timo3(const uint8_t &v) { rxeop_timo3_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (rxcrc_err0_ & 0x1);
    *data |= ((rxcrc_err1_ & 0x1) << 1);
    *data |= ((rxcrc_err2_ & 0x1) << 2);
    *data |= ((rxcrc_err3_ & 0x1) << 3);
    *data |= ((txcrc_err0_ & 0x1) << 4);
    *data |= ((txcrc_err1_ & 0x1) << 5);
    *data |= ((txcrc_err2_ & 0x1) << 6);
    *data |= ((txcrc_err3_ & 0x1) << 7);
    *data |= ((txfifo_ovf0_ & 0x1) << 8);
    *data |= ((txfifo_ovf1_ & 0x1) << 9);
    *data |= ((txfifo_ovf2_ & 0x1) << 10);
    *data |= ((txfifo_ovf3_ & 0x1) << 11);
    *data |= ((rxeop_timo0_ & 0x1) << 12);
    *data |= ((rxeop_timo1_ & 0x1) << 13);
    *data |= ((rxeop_timo2_ & 0x1) << 14);
    *data |= ((rxeop_timo3_ & 0x1) << 15);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    rxcrc_err0_ = (data & 0x1);
    rxcrc_err1_ = ((data >> 1) & 0x1);
    rxcrc_err2_ = ((data >> 2) & 0x1);
    rxcrc_err3_ = ((data >> 3) & 0x1);
    txcrc_err0_ = ((data >> 4) & 0x1);
    txcrc_err1_ = ((data >> 5) & 0x1);
    txcrc_err2_ = ((data >> 6) & 0x1);
    txcrc_err3_ = ((data >> 7) & 0x1);
    txfifo_ovf0_ = ((data >> 8) & 0x1);
    txfifo_ovf1_ = ((data >> 9) & 0x1);
    txfifo_ovf2_ = ((data >> 10) & 0x1);
    txfifo_ovf3_ = ((data >> 11) & 0x1);
    rxeop_timo0_ = ((data >> 12) & 0x1);
    rxeop_timo1_ = ((data >> 13) & 0x1);
    rxeop_timo2_ = ((data >> 14) & 0x1);
    rxeop_timo3_ = ((data >> 15) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    rxcrc_err0_ = 0x0;
    rxcrc_err1_ = 0x0;
    rxcrc_err2_ = 0x0;
    rxcrc_err3_ = 0x0;
    txcrc_err0_ = 0x0;
    txcrc_err1_ = 0x0;
    txcrc_err2_ = 0x0;
    txcrc_err3_ = 0x0;
    txfifo_ovf0_ = 0x0;
    txfifo_ovf1_ = 0x0;
    txfifo_ovf2_ = 0x0;
    txfifo_ovf3_ = 0x0;
    rxeop_timo0_ = 0x0;
    rxeop_timo1_ = 0x0;
    rxeop_timo2_ = 0x0;
    rxeop_timo3_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth100gRegRspecChnlIntrEn0Mutable") + ":\n";
    r += indent_string + "  " + std::string("rxcrc_err0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err0_) ) + "\n";
    all_zeros &= (0 == rxcrc_err0_);
    r += indent_string + "  " + std::string("rxcrc_err1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err1_) ) + "\n";
    all_zeros &= (0 == rxcrc_err1_);
    r += indent_string + "  " + std::string("rxcrc_err2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err2_) ) + "\n";
    all_zeros &= (0 == rxcrc_err2_);
    r += indent_string + "  " + std::string("rxcrc_err3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err3_) ) + "\n";
    all_zeros &= (0 == rxcrc_err3_);
    r += indent_string + "  " + std::string("txcrc_err0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err0_) ) + "\n";
    all_zeros &= (0 == txcrc_err0_);
    r += indent_string + "  " + std::string("txcrc_err1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err1_) ) + "\n";
    all_zeros &= (0 == txcrc_err1_);
    r += indent_string + "  " + std::string("txcrc_err2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err2_) ) + "\n";
    all_zeros &= (0 == txcrc_err2_);
    r += indent_string + "  " + std::string("txcrc_err3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err3_) ) + "\n";
    all_zeros &= (0 == txcrc_err3_);
    r += indent_string + "  " + std::string("txfifo_ovf0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf0_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf0_);
    r += indent_string + "  " + std::string("txfifo_ovf1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf1_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf1_);
    r += indent_string + "  " + std::string("txfifo_ovf2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf2_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf2_);
    r += indent_string + "  " + std::string("txfifo_ovf3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf3_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf3_);
    r += indent_string + "  " + std::string("rxeop_timo0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo0_) ) + "\n";
    all_zeros &= (0 == rxeop_timo0_);
    r += indent_string + "  " + std::string("rxeop_timo1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo1_) ) + "\n";
    all_zeros &= (0 == rxeop_timo1_);
    r += indent_string + "  " + std::string("rxeop_timo2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo2_) ) + "\n";
    all_zeros &= (0 == rxeop_timo2_);
    r += indent_string + "  " + std::string("rxeop_timo3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo3_) ) + "\n";
    all_zeros &= (0 == rxeop_timo3_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth100gRegRspecChnlIntrEn0Mutable") + ":\n";
    r += indent_string + "  " + std::string("rxcrc_err0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err0_) ) + "\n";
    all_zeros &= (0 == rxcrc_err0_);
    r += indent_string + "  " + std::string("rxcrc_err1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err1_) ) + "\n";
    all_zeros &= (0 == rxcrc_err1_);
    r += indent_string + "  " + std::string("rxcrc_err2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err2_) ) + "\n";
    all_zeros &= (0 == rxcrc_err2_);
    r += indent_string + "  " + std::string("rxcrc_err3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err3_) ) + "\n";
    all_zeros &= (0 == rxcrc_err3_);
    r += indent_string + "  " + std::string("txcrc_err0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err0_) ) + "\n";
    all_zeros &= (0 == txcrc_err0_);
    r += indent_string + "  " + std::string("txcrc_err1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err1_) ) + "\n";
    all_zeros &= (0 == txcrc_err1_);
    r += indent_string + "  " + std::string("txcrc_err2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err2_) ) + "\n";
    all_zeros &= (0 == txcrc_err2_);
    r += indent_string + "  " + std::string("txcrc_err3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err3_) ) + "\n";
    all_zeros &= (0 == txcrc_err3_);
    r += indent_string + "  " + std::string("txfifo_ovf0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf0_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf0_);
    r += indent_string + "  " + std::string("txfifo_ovf1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf1_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf1_);
    r += indent_string + "  " + std::string("txfifo_ovf2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf2_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf2_);
    r += indent_string + "  " + std::string("txfifo_ovf3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf3_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf3_);
    r += indent_string + "  " + std::string("rxeop_timo0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo0_) ) + "\n";
    all_zeros &= (0 == rxeop_timo0_);
    r += indent_string + "  " + std::string("rxeop_timo1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo1_) ) + "\n";
    all_zeros &= (0 == rxeop_timo1_);
    r += indent_string + "  " + std::string("rxeop_timo2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo2_) ) + "\n";
    all_zeros &= (0 == rxeop_timo2_);
    r += indent_string + "  " + std::string("rxeop_timo3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo3_) ) + "\n";
    all_zeros &= (0 == rxeop_timo3_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t rxcrc_err0_;
  uint8_t rxcrc_err1_;
  uint8_t rxcrc_err2_;
  uint8_t rxcrc_err3_;
  uint8_t txcrc_err0_;
  uint8_t txcrc_err1_;
  uint8_t txcrc_err2_;
  uint8_t txcrc_err3_;
  uint8_t txfifo_ovf0_;
  uint8_t txfifo_ovf1_;
  uint8_t txfifo_ovf2_;
  uint8_t txfifo_ovf3_;
  uint8_t rxeop_timo0_;
  uint8_t rxeop_timo1_;
  uint8_t rxeop_timo2_;
  uint8_t rxeop_timo3_;
private:
  static int StartOffset(
      JbayRegEnum selector_jbay_reg
      ) {
    int offset=0;
    switch (selector_jbay_reg) {
      case kEth100gRegs:
        offset += 0x2000000; // to get to eth100g_regs
        offset += 0x1fc00; // to get to eth100g_reg
        offset += 0xe4; // to get to chnl_intr_en0
        break;
      case kEth100gRegsRot:
        offset += 0x29c0000; // to get to eth100g_regs_rot
        offset += 0x1fc00; // to get to eth100g_reg
        offset += 0xe4; // to get to chnl_intr_en0
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_ETH100G_REG_RSPEC_CHNL_INTR_EN0_MUTABLE_H__
