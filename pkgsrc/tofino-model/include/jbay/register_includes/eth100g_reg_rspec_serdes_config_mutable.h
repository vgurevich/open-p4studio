/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH100G_REG_RSPEC_SERDES_CONFIG_MUTABLE_H__
#define __REGISTER_INCLUDES_ETH100G_REG_RSPEC_SERDES_CONFIG_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class Eth100gRegRspecSerdesConfigMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum JbayRegEnum {
    kEth100gRegs,
    kEth100gRegsRot
  };
public:
  Eth100gRegRspecSerdesConfigMutable(
      int chipNumber, JbayRegEnum selector_jbay_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_jbay_reg), 4, true, write_callback, read_callback, std::string("Eth100gRegRspecSerdesConfigMutable")+":"+boost::lexical_cast<std::string>(selector_jbay_reg))
    {
    }
  Eth100gRegRspecSerdesConfigMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "Eth100gRegRspecSerdesConfigMutable")
    {
    }
public:








  uint8_t rx0_mode() { return rx0_mode_; }
  void rx0_mode(const uint8_t &v) { rx0_mode_=v; }








  uint8_t tx0_mode() { return tx0_mode_; }
  void tx0_mode(const uint8_t &v) { tx0_mode_=v; }








  uint8_t rx1_mode() { return rx1_mode_; }
  void rx1_mode(const uint8_t &v) { rx1_mode_=v; }








  uint8_t tx1_mode() { return tx1_mode_; }
  void tx1_mode(const uint8_t &v) { tx1_mode_=v; }








  uint8_t rx2_mode() { return rx2_mode_; }
  void rx2_mode(const uint8_t &v) { rx2_mode_=v; }








  uint8_t tx2_mode() { return tx2_mode_; }
  void tx2_mode(const uint8_t &v) { tx2_mode_=v; }








  uint8_t rx3_mode() { return rx3_mode_; }
  void rx3_mode(const uint8_t &v) { rx3_mode_=v; }








  uint8_t tx3_mode() { return tx3_mode_; }
  void tx3_mode(const uint8_t &v) { tx3_mode_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (rx0_mode_ & 0x7);
    *data |= ((tx0_mode_ & 0x7) << 4);
    *data |= ((rx1_mode_ & 0x7) << 8);
    *data |= ((tx1_mode_ & 0x7) << 12);
    *data |= ((rx2_mode_ & 0x7) << 16);
    *data |= ((tx2_mode_ & 0x7) << 20);
    *data |= ((rx3_mode_ & 0x7) << 24);
    *data |= ((tx3_mode_ & 0x7) << 28);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    rx0_mode_ = (data & 0x7);
    tx0_mode_ = ((data >> 4) & 0x7);
    rx1_mode_ = ((data >> 8) & 0x7);
    tx1_mode_ = ((data >> 12) & 0x7);
    rx2_mode_ = ((data >> 16) & 0x7);
    tx2_mode_ = ((data >> 20) & 0x7);
    rx3_mode_ = ((data >> 24) & 0x7);
    tx3_mode_ = ((data >> 28) & 0x7);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    rx0_mode_ = 0x0;
    tx0_mode_ = 0x0;
    rx1_mode_ = 0x0;
    tx1_mode_ = 0x0;
    rx2_mode_ = 0x0;
    tx2_mode_ = 0x0;
    rx3_mode_ = 0x0;
    tx3_mode_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth100gRegRspecSerdesConfigMutable") + ":\n";
    r += indent_string + "  " + std::string("rx0_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx0_mode_) ) + "\n";
    all_zeros &= (0 == rx0_mode_);
    r += indent_string + "  " + std::string("tx0_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx0_mode_) ) + "\n";
    all_zeros &= (0 == tx0_mode_);
    r += indent_string + "  " + std::string("rx1_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx1_mode_) ) + "\n";
    all_zeros &= (0 == rx1_mode_);
    r += indent_string + "  " + std::string("tx1_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx1_mode_) ) + "\n";
    all_zeros &= (0 == tx1_mode_);
    r += indent_string + "  " + std::string("rx2_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx2_mode_) ) + "\n";
    all_zeros &= (0 == rx2_mode_);
    r += indent_string + "  " + std::string("tx2_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx2_mode_) ) + "\n";
    all_zeros &= (0 == tx2_mode_);
    r += indent_string + "  " + std::string("rx3_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx3_mode_) ) + "\n";
    all_zeros &= (0 == rx3_mode_);
    r += indent_string + "  " + std::string("tx3_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx3_mode_) ) + "\n";
    all_zeros &= (0 == tx3_mode_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth100gRegRspecSerdesConfigMutable") + ":\n";
    r += indent_string + "  " + std::string("rx0_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx0_mode_) ) + "\n";
    all_zeros &= (0 == rx0_mode_);
    r += indent_string + "  " + std::string("tx0_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx0_mode_) ) + "\n";
    all_zeros &= (0 == tx0_mode_);
    r += indent_string + "  " + std::string("rx1_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx1_mode_) ) + "\n";
    all_zeros &= (0 == rx1_mode_);
    r += indent_string + "  " + std::string("tx1_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx1_mode_) ) + "\n";
    all_zeros &= (0 == tx1_mode_);
    r += indent_string + "  " + std::string("rx2_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx2_mode_) ) + "\n";
    all_zeros &= (0 == rx2_mode_);
    r += indent_string + "  " + std::string("tx2_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx2_mode_) ) + "\n";
    all_zeros &= (0 == tx2_mode_);
    r += indent_string + "  " + std::string("rx3_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx3_mode_) ) + "\n";
    all_zeros &= (0 == rx3_mode_);
    r += indent_string + "  " + std::string("tx3_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx3_mode_) ) + "\n";
    all_zeros &= (0 == tx3_mode_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t rx0_mode_;
  uint8_t tx0_mode_;
  uint8_t rx1_mode_;
  uint8_t tx1_mode_;
  uint8_t rx2_mode_;
  uint8_t tx2_mode_;
  uint8_t rx3_mode_;
  uint8_t tx3_mode_;
private:
  static int StartOffset(
      JbayRegEnum selector_jbay_reg
      ) {
    int offset=0;
    switch (selector_jbay_reg) {
      case kEth100gRegs:
        offset += 0x2000000; // to get to eth100g_regs
        offset += 0x1fc00; // to get to eth100g_reg
        offset += 0x1c0; // to get to serdes_config
        break;
      case kEth100gRegsRot:
        offset += 0x29c0000; // to get to eth100g_regs_rot
        offset += 0x1fc00; // to get to eth100g_reg
        offset += 0x1c0; // to get to serdes_config
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_ETH100G_REG_RSPEC_SERDES_CONFIG_MUTABLE_H__
