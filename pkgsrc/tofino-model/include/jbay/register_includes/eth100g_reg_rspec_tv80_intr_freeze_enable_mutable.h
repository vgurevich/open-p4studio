/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH100G_REG_RSPEC_TV80_INTR_FREEZE_ENABLE_MUTABLE_H__
#define __REGISTER_INCLUDES_ETH100G_REG_RSPEC_TV80_INTR_FREEZE_ENABLE_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class Eth100gRegRspecTv80IntrFreezeEnableMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum JbayRegEnum {
    kEth100gRegs,
    kEth100gRegsRot
  };
public:
  Eth100gRegRspecTv80IntrFreezeEnableMutable(
      int chipNumber, JbayRegEnum selector_jbay_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_jbay_reg), 4, true, write_callback, read_callback, std::string("Eth100gRegRspecTv80IntrFreezeEnableMutable")+":"+boost::lexical_cast<std::string>(selector_jbay_reg))
    {
    }
  Eth100gRegRspecTv80IntrFreezeEnableMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "Eth100gRegRspecTv80IntrFreezeEnableMutable")
    {
    }
public:
  uint8_t int_0() { return int_0_; }
  void int_0(const uint8_t &v) { int_0_=v; }
  uint8_t int_1() { return int_1_; }
  void int_1(const uint8_t &v) { int_1_=v; }
  uint8_t int_2() { return int_2_; }
  void int_2(const uint8_t &v) { int_2_=v; }
  uint8_t int_3() { return int_3_; }
  void int_3(const uint8_t &v) { int_3_=v; }
  uint8_t int_4() { return int_4_; }
  void int_4(const uint8_t &v) { int_4_=v; }
  uint8_t int_5() { return int_5_; }
  void int_5(const uint8_t &v) { int_5_=v; }
  uint8_t int_6() { return int_6_; }
  void int_6(const uint8_t &v) { int_6_=v; }
  uint8_t int_7() { return int_7_; }
  void int_7(const uint8_t &v) { int_7_=v; }
  uint8_t nmi() { return nmi_; }
  void nmi(const uint8_t &v) { nmi_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (int_0_ & 0x1);
    *data |= ((int_1_ & 0x1) << 1);
    *data |= ((int_2_ & 0x1) << 2);
    *data |= ((int_3_ & 0x1) << 3);
    *data |= ((int_4_ & 0x1) << 4);
    *data |= ((int_5_ & 0x1) << 5);
    *data |= ((int_6_ & 0x1) << 6);
    *data |= ((int_7_ & 0x1) << 7);
    *data |= ((nmi_ & 0x1) << 8);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    int_0_ = (data & 0x1);
    int_1_ = ((data >> 1) & 0x1);
    int_2_ = ((data >> 2) & 0x1);
    int_3_ = ((data >> 3) & 0x1);
    int_4_ = ((data >> 4) & 0x1);
    int_5_ = ((data >> 5) & 0x1);
    int_6_ = ((data >> 6) & 0x1);
    int_7_ = ((data >> 7) & 0x1);
    nmi_ = ((data >> 8) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    int_0_ = 0x0;
    int_1_ = 0x0;
    int_2_ = 0x0;
    int_3_ = 0x0;
    int_4_ = 0x0;
    int_5_ = 0x0;
    int_6_ = 0x0;
    int_7_ = 0x0;
    nmi_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth100gRegRspecTv80IntrFreezeEnableMutable") + ":\n";
    r += indent_string + "  " + std::string("int_0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_0_) ) + "\n";
    all_zeros &= (0 == int_0_);
    r += indent_string + "  " + std::string("int_1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_1_) ) + "\n";
    all_zeros &= (0 == int_1_);
    r += indent_string + "  " + std::string("int_2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_2_) ) + "\n";
    all_zeros &= (0 == int_2_);
    r += indent_string + "  " + std::string("int_3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_3_) ) + "\n";
    all_zeros &= (0 == int_3_);
    r += indent_string + "  " + std::string("int_4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_4_) ) + "\n";
    all_zeros &= (0 == int_4_);
    r += indent_string + "  " + std::string("int_5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_5_) ) + "\n";
    all_zeros &= (0 == int_5_);
    r += indent_string + "  " + std::string("int_6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_6_) ) + "\n";
    all_zeros &= (0 == int_6_);
    r += indent_string + "  " + std::string("int_7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_7_) ) + "\n";
    all_zeros &= (0 == int_7_);
    r += indent_string + "  " + std::string("nmi") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(nmi_) ) + "\n";
    all_zeros &= (0 == nmi_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth100gRegRspecTv80IntrFreezeEnableMutable") + ":\n";
    r += indent_string + "  " + std::string("int_0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_0_) ) + "\n";
    all_zeros &= (0 == int_0_);
    r += indent_string + "  " + std::string("int_1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_1_) ) + "\n";
    all_zeros &= (0 == int_1_);
    r += indent_string + "  " + std::string("int_2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_2_) ) + "\n";
    all_zeros &= (0 == int_2_);
    r += indent_string + "  " + std::string("int_3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_3_) ) + "\n";
    all_zeros &= (0 == int_3_);
    r += indent_string + "  " + std::string("int_4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_4_) ) + "\n";
    all_zeros &= (0 == int_4_);
    r += indent_string + "  " + std::string("int_5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_5_) ) + "\n";
    all_zeros &= (0 == int_5_);
    r += indent_string + "  " + std::string("int_6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_6_) ) + "\n";
    all_zeros &= (0 == int_6_);
    r += indent_string + "  " + std::string("int_7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_7_) ) + "\n";
    all_zeros &= (0 == int_7_);
    r += indent_string + "  " + std::string("nmi") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(nmi_) ) + "\n";
    all_zeros &= (0 == nmi_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t int_0_;
  uint8_t int_1_;
  uint8_t int_2_;
  uint8_t int_3_;
  uint8_t int_4_;
  uint8_t int_5_;
  uint8_t int_6_;
  uint8_t int_7_;
  uint8_t nmi_;
private:
  static int StartOffset(
      JbayRegEnum selector_jbay_reg
      ) {
    int offset=0;
    switch (selector_jbay_reg) {
      case kEth100gRegs:
        offset += 0x2000000; // to get to eth100g_regs
        offset += 0x1fc00; // to get to eth100g_reg
        offset += 0x170; // to get to tv80_intr_freeze_enable
        break;
      case kEth100gRegsRot:
        offset += 0x29c0000; // to get to eth100g_regs_rot
        offset += 0x1fc00; // to get to eth100g_reg
        offset += 0x170; // to get to tv80_intr_freeze_enable
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};












  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_ETH100G_REG_RSPEC_TV80_INTR_FREEZE_ENABLE_MUTABLE_H__
