/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH100G_REG_RSPEC_TXFF_CTRL_H__
#define __REGISTER_INCLUDES_ETH100G_REG_RSPEC_TXFF_CTRL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class Eth100gRegRspecTxffCtrl : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum JbayRegEnum {
    kEth100gRegs,
    kEth100gRegsRot
  };
public:
  Eth100gRegRspecTxffCtrl(
      int chipNumber, JbayRegEnum selector_jbay_reg, int index_eth100g_reg_rspec_txff_ctrl, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_jbay_reg, index_eth100g_reg_rspec_txff_ctrl), 4, false, write_callback, read_callback, std::string("Eth100gRegRspecTxffCtrl")+":"+boost::lexical_cast<std::string>(selector_jbay_reg) + "," + boost::lexical_cast<std::string>(index_eth100g_reg_rspec_txff_ctrl))
    {
    }
  Eth100gRegRspecTxffCtrl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "Eth100gRegRspecTxffCtrl")
    {
    }
public:





  uint8_t &chnl_ena() { return chnl_ena_; }







  uint8_t &tx_flush() { return tx_flush_; }










  uint8_t &chnl_mode() { return chnl_mode_; }






  uint8_t &en_rx_xoff() { return en_rx_xoff_; }






  uint8_t &ovr_rx_pfcxoff() { return ovr_rx_pfcxoff_; }






  uint8_t &txrx_lpbk() { return txrx_lpbk_; }





  uint8_t &val_rx_pfcxoff() { return val_rx_pfcxoff_; }





  uint8_t &cred_ini() { return cred_ini_; }





  uint8_t &min_thr() { return min_thr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (chnl_ena_ & 0x1);
    *data |= ((tx_flush_ & 0x1) << 1);
    *data |= ((chnl_mode_ & 0x3) << 2);
    *data |= ((en_rx_xoff_ & 0x1) << 4);
    *data |= ((ovr_rx_pfcxoff_ & 0x1) << 5);
    *data |= ((txrx_lpbk_ & 0x1) << 6);
    *data |= (val_rx_pfcxoff_ << 8);
    *data |= ((cred_ini_ & 0x7f) << 16);
    *data |= ((min_thr_ & 0x7f) << 24);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    chnl_ena_ = (data & 0x1);
    tx_flush_ = ((data >> 1) & 0x1);
    chnl_mode_ = ((data >> 2) & 0x3);
    en_rx_xoff_ = ((data >> 4) & 0x1);
    ovr_rx_pfcxoff_ = ((data >> 5) & 0x1);
    txrx_lpbk_ = ((data >> 6) & 0x1);
    val_rx_pfcxoff_ = (data >> 8);
    cred_ini_ = ((data >> 16) & 0x7f);
    min_thr_ = ((data >> 24) & 0x7f);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    chnl_ena_ = 0x0;
    tx_flush_ = 0x0;
    chnl_mode_ = 0x0;
    en_rx_xoff_ = 0x0;
    ovr_rx_pfcxoff_ = 0x0;
    txrx_lpbk_ = 0x0;
    val_rx_pfcxoff_ = 0x0;
    cred_ini_ = 0x0;
    min_thr_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth100gRegRspecTxffCtrl") + ":\n";
    r += indent_string + "  " + std::string("chnl_ena") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_ena_) ) + "\n";
    all_zeros &= (0 == chnl_ena_);
    r += indent_string + "  " + std::string("tx_flush") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_flush_) ) + "\n";
    all_zeros &= (0 == tx_flush_);
    r += indent_string + "  " + std::string("chnl_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_mode_) ) + "\n";
    all_zeros &= (0 == chnl_mode_);
    r += indent_string + "  " + std::string("en_rx_xoff") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(en_rx_xoff_) ) + "\n";
    all_zeros &= (0 == en_rx_xoff_);
    r += indent_string + "  " + std::string("ovr_rx_pfcxoff") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ovr_rx_pfcxoff_) ) + "\n";
    all_zeros &= (0 == ovr_rx_pfcxoff_);
    r += indent_string + "  " + std::string("txrx_lpbk") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txrx_lpbk_) ) + "\n";
    all_zeros &= (0 == txrx_lpbk_);
    r += indent_string + "  " + std::string("val_rx_pfcxoff") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(val_rx_pfcxoff_) ) + "\n";
    all_zeros &= (0 == val_rx_pfcxoff_);
    r += indent_string + "  " + std::string("cred_ini") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred_ini_) ) + "\n";
    all_zeros &= (0 == cred_ini_);
    r += indent_string + "  " + std::string("min_thr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(min_thr_) ) + "\n";
    all_zeros &= (0 == min_thr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth100gRegRspecTxffCtrl") + ":\n";
    r += indent_string + "  " + std::string("chnl_ena") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_ena_) ) + "\n";
    all_zeros &= (0 == chnl_ena_);
    r += indent_string + "  " + std::string("tx_flush") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_flush_) ) + "\n";
    all_zeros &= (0 == tx_flush_);
    r += indent_string + "  " + std::string("chnl_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_mode_) ) + "\n";
    all_zeros &= (0 == chnl_mode_);
    r += indent_string + "  " + std::string("en_rx_xoff") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(en_rx_xoff_) ) + "\n";
    all_zeros &= (0 == en_rx_xoff_);
    r += indent_string + "  " + std::string("ovr_rx_pfcxoff") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ovr_rx_pfcxoff_) ) + "\n";
    all_zeros &= (0 == ovr_rx_pfcxoff_);
    r += indent_string + "  " + std::string("txrx_lpbk") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txrx_lpbk_) ) + "\n";
    all_zeros &= (0 == txrx_lpbk_);
    r += indent_string + "  " + std::string("val_rx_pfcxoff") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(val_rx_pfcxoff_) ) + "\n";
    all_zeros &= (0 == val_rx_pfcxoff_);
    r += indent_string + "  " + std::string("cred_ini") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred_ini_) ) + "\n";
    all_zeros &= (0 == cred_ini_);
    r += indent_string + "  " + std::string("min_thr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(min_thr_) ) + "\n";
    all_zeros &= (0 == min_thr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t chnl_ena_;
  uint8_t tx_flush_;
  uint8_t chnl_mode_;
  uint8_t en_rx_xoff_;
  uint8_t ovr_rx_pfcxoff_;
  uint8_t txrx_lpbk_;
  uint8_t val_rx_pfcxoff_;
  uint8_t cred_ini_;
  uint8_t min_thr_;
private:
  static int StartOffset(
      JbayRegEnum selector_jbay_reg, int index_eth100g_reg_rspec_txff_ctrl
      ) {
    int offset=0;
    switch (selector_jbay_reg) {
      case kEth100gRegs:
        offset += 0x2000000; // to get to eth100g_regs
        offset += 0x1fc00; // to get to eth100g_reg
        offset += 0x70; // to get to txff_ctrl
        assert(index_eth100g_reg_rspec_txff_ctrl < 4);
        offset += index_eth100g_reg_rspec_txff_ctrl * 0x4; // eth100g_reg_rspec_txff_ctrl[]
        break;
      case kEth100gRegsRot:
        offset += 0x29c0000; // to get to eth100g_regs_rot
        offset += 0x1fc00; // to get to eth100g_reg
        offset += 0x70; // to get to txff_ctrl
        assert(index_eth100g_reg_rspec_txff_ctrl < 4);
        offset += index_eth100g_reg_rspec_txff_ctrl * 0x4; // eth100g_reg_rspec_txff_ctrl[]
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_ETH100G_REG_RSPEC_TXFF_CTRL_H__
