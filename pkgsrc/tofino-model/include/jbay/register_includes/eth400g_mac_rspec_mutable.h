/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH400G_MAC_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_ETH400G_MAC_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "eth400g_mac_rspec_chnl_intr_mutable.h"
#include "eth400g_mac_rspec_chnl_seq_mutable.h"
#include "eth400g_mac_rspec_crcerr_inj_mutable.h"
#include "eth400g_mac_rspec_cts_fifo_out_mutable.h"
#include "eth400g_mac_rspec_cts_fifo_stat_mutable.h"
#include "eth400g_mac_rspec_cts_intr_mutable.h"
#include "eth400g_mac_rspec_eth_clkobs_ctrl_mutable.h"
#include "eth400g_mac_rspec_eth_mac_ts_offset_ctrl_mutable.h"
#include "eth400g_mac_rspec_eth_mdioci_addr_mutable.h"
#include "eth400g_mac_rspec_eth_onestep_ets_offset_ctrl_mutable.h"
#include "eth400g_mac_rspec_eth_ring_addr_mutable.h"
#include "eth400g_mac_rspec_eth_ring_ctrl_mutable.h"
#include "eth400g_mac_rspec_eth_ring_rdata_mutable.h"
#include "eth400g_mac_rspec_eth_ring_setup_mutable.h"
#include "eth400g_mac_rspec_eth_ring_wdata_mutable.h"
#include "eth400g_mac_rspec_eth_soft_reset_mutable.h"
#include "eth400g_mac_rspec_eth_status0_mutable.h"
#include "eth400g_mac_rspec_eth_status1_mutable.h"
#include "eth400g_mac_rspec_global_intr_stat_mutable.h"
#include "eth400g_mac_rspec_mac_en0_mutable.h"
#include "eth400g_mac_rspec_mac_en1_mutable.h"
#include "eth400g_mac_rspec_mac_freeze_enable_mutable.h"
#include "eth400g_mac_rspec_mem_intr_mutable.h"
#include "eth400g_mac_rspec_port_alive_lut_mutable.h"
#include "eth400g_mac_rspec_rxappfifo_mbe_err_log_mutable.h"
#include "eth400g_mac_rspec_rxappfifo_sbe_err_log_mutable.h"
#include "eth400g_mac_rspec_rxff_ctrl_mutable.h"
#include "eth400g_mac_rspec_rxff_stat_ecc_mutable.h"
#include "eth400g_mac_rspec_rxpkt_err_sts_mutable.h"
#include "eth400g_mac_rspec_soft_port_alive_mutable.h"
#include "eth400g_mac_rspec_statsmem_mbe_err_log_mutable.h"
#include "eth400g_mac_rspec_statsmem_sbe_err_log_mutable.h"
#include "eth400g_mac_rspec_tv80_debug_ctrl_mutable.h"
#include "eth400g_mac_rspec_tv80_debug_head_ptr_mutable.h"
#include "eth400g_mac_rspec_tv80_debug_tail_ptr_mutable.h"
#include "eth400g_mac_rspec_tv80_halted_status_mutable.h"
#include "eth400g_mac_rspec_tv80_intr_mutable.h"
#include "eth400g_mac_rspec_tv80_stall_on_error_mutable.h"
#include "eth400g_mac_rspec_tv80_watchdog_count_mutable.h"
#include "eth400g_mac_rspec_tv80_watchdog_ctrl_mutable.h"
#include "eth400g_mac_rspec_tv80mem_mbe_err_log_mutable.h"
#include "eth400g_mac_rspec_tv80mem_sbe_err_log_mutable.h"
#include "eth400g_mac_rspec_txappfifo_mbe_err_log_mutable.h"
#include "eth400g_mac_rspec_txappfifo_sbe_err_log_mutable.h"
#include "eth400g_mac_rspec_txcrc_trunc_ctrl_mutable.h"
#include "eth400g_mac_rspec_txff_ctrl_mutable.h"
#include "eth400g_mac_rspec_txff_ecc_mutable.h"
#include "eth400g_mac_rspec_txff_status_mutable.h"
#include "eth400g_mac_rspec_txfifo_mbe_err_log_mutable.h"
#include "eth400g_mac_rspec_txfifo_sbe_err_log_mutable.h"
#include "eth400g_mac_rspec_uctrl_intr_mutable.h"

namespace jbay {
  namespace register_classes {

class Eth400gMacRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum JbayRegEnum {
    kEth400gP1,
    kEth400gP10,
    kEth400gP11,
    kEth400gP12,
    kEth400gP13,
    kEth400gP14,
    kEth400gP15,
    kEth400gP16,
    kEth400gP17,
    kEth400gP18,
    kEth400gP19,
    kEth400gP2,
    kEth400gP20,
    kEth400gP21,
    kEth400gP22,
    kEth400gP23,
    kEth400gP24,
    kEth400gP25,
    kEth400gP26,
    kEth400gP27,
    kEth400gP28,
    kEth400gP29,
    kEth400gP3,
    kEth400gP30,
    kEth400gP31,
    kEth400gP32,
    kEth400gP4,
    kEth400gP5,
    kEth400gP6,
    kEth400gP7,
    kEth400gP8,
    kEth400gP9
  };
public:
  Eth400gMacRspecMutable(
      int chipNumber, JbayRegEnum selector_jbay_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_jbay_reg), 660, true, write_callback, read_callback, std::string("Eth400gMacRspecMutable")+":"+boost::lexical_cast<std::string>(selector_jbay_reg))
    {
    }
  Eth400gMacRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "Eth400gMacRspecMutable")
    {
    }
public:






  Eth400gMacRspecEthSoftResetMutable &eth_soft_reset() { return eth_soft_reset_; }






  Eth400gMacRspecChnlSeqMutable &chnl_seq() { return chnl_seq_; }








  Eth400gMacRspecPortAliveLutMutable &port_alive_lut() { return port_alive_lut_; }





  Eth400gMacRspecEthClkobsCtrlMutable &eth_clkobs_ctrl() { return eth_clkobs_ctrl_; }








  Eth400gMacRspecEthOnestepEtsOffsetCtrlMutable &eth_onestep_ets_offset_ctrl(int j0) { return eth_onestep_ets_offset_ctrl_[j0]; }





  Eth400gMacRspecEthMacTsOffsetCtrlMutable &eth_mac_ts_offset_ctrl() { return eth_mac_ts_offset_ctrl_; }





  Eth400gMacRspecEthStatus0Mutable &eth_status0() { return eth_status0_; }





  Eth400gMacRspecEthStatus1Mutable &eth_status1() { return eth_status1_; }






  Eth400gMacRspecGlobalIntrStatMutable &global_intr_stat() { return global_intr_stat_; }





  Eth400gMacRspecCtsFifoStatMutable &cts_fifo_stat() { return cts_fifo_stat_; }







  Eth400gMacRspecTxffCtrlMutable &txff_ctrl(int j0) { return txff_ctrl_[j0]; }







  Eth400gMacRspecTxffStatusMutable &txff_status(int j0) { return txff_status_[j0]; }







  Eth400gMacRspecTxcrcTruncCtrlMutable &txcrc_trunc_ctrl(int j0) { return txcrc_trunc_ctrl_[j0]; }







  Eth400gMacRspecRxffCtrlMutable &rxff_ctrl(int j0) { return rxff_ctrl_[j0]; }







  Eth400gMacRspecRxpktErrStsMutable &rxpkt_err_sts(int j0) { return rxpkt_err_sts_[j0]; }







  Eth400gMacRspecCtsFifoOutMutable &cts_fifo_out(int j0) { return cts_fifo_out_[j0]; }





  Eth400gMacRspecEthRingAddrMutable &eth_ring_addr() { return eth_ring_addr_; }





  Eth400gMacRspecEthRingWdataMutable &eth_ring_wdata() { return eth_ring_wdata_; }





  Eth400gMacRspecEthRingRdataMutable &eth_ring_rdata() { return eth_ring_rdata_; }





  Eth400gMacRspecEthRingCtrlMutable &eth_ring_ctrl() { return eth_ring_ctrl_; }





  Eth400gMacRspecEthRingSetupMutable &eth_ring_setup() { return eth_ring_setup_; }





  Eth400gMacRspecSoftPortAliveMutable &soft_port_alive() { return soft_port_alive_; }








  Eth400gMacRspecTxffEccMutable &txff_ecc() { return txff_ecc_; }








  Eth400gMacRspecRxffStatEccMutable &rxff_stat_ecc() { return rxff_stat_ecc_; }





  Eth400gMacRspecTxfifoSbeErrLogMutable &txfifo_sbe_err_log() { return txfifo_sbe_err_log_; }





  Eth400gMacRspecTxfifoMbeErrLogMutable &txfifo_mbe_err_log() { return txfifo_mbe_err_log_; }





  Eth400gMacRspecTxappfifoSbeErrLogMutable &txappfifo_sbe_err_log() { return txappfifo_sbe_err_log_; }





  Eth400gMacRspecTxappfifoMbeErrLogMutable &txappfifo_mbe_err_log() { return txappfifo_mbe_err_log_; }





  Eth400gMacRspecRxappfifoSbeErrLogMutable &rxappfifo_sbe_err_log() { return rxappfifo_sbe_err_log_; }





  Eth400gMacRspecRxappfifoMbeErrLogMutable &rxappfifo_mbe_err_log() { return rxappfifo_mbe_err_log_; }





  Eth400gMacRspecStatsmemSbeErrLogMutable &statsmem_sbe_err_log() { return statsmem_sbe_err_log_; }





  Eth400gMacRspecStatsmemMbeErrLogMutable &statsmem_mbe_err_log() { return statsmem_mbe_err_log_; }





  Eth400gMacRspecTv80memSbeErrLogMutable &tv80mem_sbe_err_log() { return tv80mem_sbe_err_log_; }





  Eth400gMacRspecTv80memMbeErrLogMutable &tv80mem_mbe_err_log() { return tv80mem_mbe_err_log_; }







  Eth400gMacRspecMacEn0Mutable &mac_en0() { return mac_en0_; }







  Eth400gMacRspecMacEn1Mutable &mac_en1() { return mac_en1_; }





  Eth400gMacRspecMacFreezeEnableMutable &mac_freeze_enable() { return mac_freeze_enable_; }






  Eth400gMacRspecCrcerrInjMutable &crcerr_inj() { return crcerr_inj_; }










  Eth400gMacRspecTv80DebugCtrlMutable &tv80_debug_ctrl() { return tv80_debug_ctrl_; }






  Eth400gMacRspecTv80DebugHeadPtrMutable &tv80_debug_head_ptr() { return tv80_debug_head_ptr_; }






  Eth400gMacRspecTv80DebugTailPtrMutable &tv80_debug_tail_ptr() { return tv80_debug_tail_ptr_; }








  Eth400gMacRspecTv80StallOnErrorMutable &tv80_stall_on_error() { return tv80_stall_on_error_; }





  Eth400gMacRspecTv80HaltedStatusMutable &tv80_halted_status() { return tv80_halted_status_; }





  Eth400gMacRspecTv80WatchdogCtrlMutable &tv80_watchdog_ctrl() { return tv80_watchdog_ctrl_; }






  Eth400gMacRspecTv80WatchdogCountMutable &tv80_watchdog_count() { return tv80_watchdog_count_; }






  Eth400gMacRspecEthMdiociAddrMutable &eth_mdioci_addr() { return eth_mdioci_addr_; }
  Eth400gMacRspecChnlIntrMutable &chnl_intr() { return chnl_intr_; }
  Eth400gMacRspecCtsIntrMutable &cts_intr() { return cts_intr_; }
  Eth400gMacRspecMemIntrMutable &mem_intr() { return mem_intr_; }
  Eth400gMacRspecUctrlIntrMutable &uctrl_intr() { return uctrl_intr_; }
  Eth400gMacRspecTv80IntrMutable &tv80_intr() { return tv80_intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      eth_soft_reset_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      chnl_seq_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      port_alive_lut_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      eth_clkobs_ctrl_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x80) {
      offset -= 0x40;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      eth_onestep_ets_offset_ctrl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x88) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      eth_mac_ts_offset_ctrl_.read( offset, data );
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      if (read_callback_) read_callback_();
      eth_status0_.read( offset, data );
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      if (read_callback_) read_callback_();
      eth_status1_.read( offset, data );
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      if (read_callback_) read_callback_();
      global_intr_stat_.read( offset, data );
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      if (read_callback_) read_callback_();
      cts_fifo_stat_.read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xc0) {
      offset -= 0xa0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      txff_ctrl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xe0) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      txff_status_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0x100) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      txcrc_trunc_ctrl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x120) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      rxff_ctrl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x120 && offset < 0x140) {
      offset -= 0x120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      rxpkt_err_sts_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x180) {
      offset -= 0x140;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      cts_fifo_out_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x184) {
      offset -= 0x180;
      if (read_callback_) read_callback_();
      eth_ring_addr_.read( offset, data );
    }
    else if (offset >= 0x184 && offset < 0x188) {
      offset -= 0x184;
      if (read_callback_) read_callback_();
      eth_ring_wdata_.read( offset, data );
    }
    else if (offset >= 0x188 && offset < 0x18c) {
      offset -= 0x188;
      if (read_callback_) read_callback_();
      eth_ring_rdata_.read( offset, data );
    }
    else if (offset >= 0x18c && offset < 0x190) {
      offset -= 0x18c;
      if (read_callback_) read_callback_();
      eth_ring_ctrl_.read( offset, data );
    }
    else if (offset >= 0x190 && offset < 0x194) {
      offset -= 0x190;
      if (read_callback_) read_callback_();
      eth_ring_setup_.read( offset, data );
    }
    else if (offset >= 0x194 && offset < 0x198) {
      offset -= 0x194;
      if (read_callback_) read_callback_();
      soft_port_alive_.read( offset, data );
    }
    else if (offset >= 0x218 && offset < 0x220) {
      offset -= 0x218;
      if (read_callback_) read_callback_();
      txff_ecc_.read( offset, data );
    }
    else if (offset >= 0x220 && offset < 0x224) {
      offset -= 0x220;
      if (read_callback_) read_callback_();
      rxff_stat_ecc_.read( offset, data );
    }
    else if (offset >= 0x224 && offset < 0x228) {
      offset -= 0x224;
      if (read_callback_) read_callback_();
      txfifo_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x228 && offset < 0x22c) {
      offset -= 0x228;
      if (read_callback_) read_callback_();
      txfifo_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x22c && offset < 0x230) {
      offset -= 0x22c;
      if (read_callback_) read_callback_();
      txappfifo_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x230 && offset < 0x234) {
      offset -= 0x230;
      if (read_callback_) read_callback_();
      txappfifo_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x234 && offset < 0x238) {
      offset -= 0x234;
      if (read_callback_) read_callback_();
      rxappfifo_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x238 && offset < 0x23c) {
      offset -= 0x238;
      if (read_callback_) read_callback_();
      rxappfifo_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x23c && offset < 0x240) {
      offset -= 0x23c;
      if (read_callback_) read_callback_();
      statsmem_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x240 && offset < 0x244) {
      offset -= 0x240;
      if (read_callback_) read_callback_();
      statsmem_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x244 && offset < 0x248) {
      offset -= 0x244;
      if (read_callback_) read_callback_();
      tv80mem_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x248 && offset < 0x24c) {
      offset -= 0x248;
      if (read_callback_) read_callback_();
      tv80mem_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x24c && offset < 0x250) {
      offset -= 0x24c;
      if (read_callback_) read_callback_();
      mac_en0_.read( offset, data );
    }
    else if (offset >= 0x250 && offset < 0x254) {
      offset -= 0x250;
      if (read_callback_) read_callback_();
      mac_en1_.read( offset, data );
    }
    else if (offset >= 0x254 && offset < 0x258) {
      offset -= 0x254;
      if (read_callback_) read_callback_();
      mac_freeze_enable_.read( offset, data );
    }
    else if (offset >= 0x258 && offset < 0x25c) {
      offset -= 0x258;
      if (read_callback_) read_callback_();
      crcerr_inj_.read( offset, data );
    }
    else if (offset >= 0x274 && offset < 0x278) {
      offset -= 0x274;
      if (read_callback_) read_callback_();
      tv80_debug_ctrl_.read( offset, data );
    }
    else if (offset >= 0x278 && offset < 0x27c) {
      offset -= 0x278;
      if (read_callback_) read_callback_();
      tv80_debug_head_ptr_.read( offset, data );
    }
    else if (offset >= 0x27c && offset < 0x280) {
      offset -= 0x27c;
      if (read_callback_) read_callback_();
      tv80_debug_tail_ptr_.read( offset, data );
    }
    else if (offset >= 0x280 && offset < 0x284) {
      offset -= 0x280;
      if (read_callback_) read_callback_();
      tv80_stall_on_error_.read( offset, data );
    }
    else if (offset >= 0x284 && offset < 0x288) {
      offset -= 0x284;
      if (read_callback_) read_callback_();
      tv80_halted_status_.read( offset, data );
    }
    else if (offset >= 0x288 && offset < 0x28c) {
      offset -= 0x288;
      if (read_callback_) read_callback_();
      tv80_watchdog_ctrl_.read( offset, data );
    }
    else if (offset >= 0x28c && offset < 0x290) {
      offset -= 0x28c;
      if (read_callback_) read_callback_();
      tv80_watchdog_count_.read( offset, data );
    }
    else if (offset >= 0x290 && offset < 0x294) {
      offset -= 0x290;
      if (read_callback_) read_callback_();
      eth_mdioci_addr_.read( offset, data );
    }
    else if (offset >= 0x1a0 && offset < 0x1b4) {
      offset -= 0x1a0;
      if (read_callback_) read_callback_();
      chnl_intr_.read( offset, data );
    }
    else if (offset >= 0x1c0 && offset < 0x1d4) {
      offset -= 0x1c0;
      if (read_callback_) read_callback_();
      cts_intr_.read( offset, data );
    }
    else if (offset >= 0x1e0 && offset < 0x1f4) {
      offset -= 0x1e0;
      if (read_callback_) read_callback_();
      mem_intr_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x214) {
      offset -= 0x200;
      if (read_callback_) read_callback_();
      uctrl_intr_.read( offset, data );
    }
    else if (offset >= 0x260 && offset < 0x274) {
      offset -= 0x260;
      if (read_callback_) read_callback_();
      tv80_intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      eth_soft_reset_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      chnl_seq_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      port_alive_lut_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      eth_clkobs_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x80) {
      offset -= 0x40;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      eth_onestep_ets_offset_ctrl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x88) {
      offset -= 0x80;
      eth_mac_ts_offset_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      eth_status0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      eth_status1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      global_intr_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      cts_fifo_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xc0) {
      offset -= 0xa0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      txff_ctrl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xe0) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      txff_status_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0x100) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      txcrc_trunc_ctrl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x120) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      rxff_ctrl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x120 && offset < 0x140) {
      offset -= 0x120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      rxpkt_err_sts_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x180) {
      offset -= 0x140;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      cts_fifo_out_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x184) {
      offset -= 0x180;
      eth_ring_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x184 && offset < 0x188) {
      offset -= 0x184;
      eth_ring_wdata_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x188 && offset < 0x18c) {
      offset -= 0x188;
      eth_ring_rdata_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18c && offset < 0x190) {
      offset -= 0x18c;
      eth_ring_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x190 && offset < 0x194) {
      offset -= 0x190;
      eth_ring_setup_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x194 && offset < 0x198) {
      offset -= 0x194;
      soft_port_alive_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x218 && offset < 0x220) {
      offset -= 0x218;
      txff_ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x220 && offset < 0x224) {
      offset -= 0x220;
      rxff_stat_ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x224 && offset < 0x228) {
      offset -= 0x224;
      txfifo_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x228 && offset < 0x22c) {
      offset -= 0x228;
      txfifo_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x22c && offset < 0x230) {
      offset -= 0x22c;
      txappfifo_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x230 && offset < 0x234) {
      offset -= 0x230;
      txappfifo_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x234 && offset < 0x238) {
      offset -= 0x234;
      rxappfifo_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x238 && offset < 0x23c) {
      offset -= 0x238;
      rxappfifo_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x23c && offset < 0x240) {
      offset -= 0x23c;
      statsmem_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x240 && offset < 0x244) {
      offset -= 0x240;
      statsmem_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x244 && offset < 0x248) {
      offset -= 0x244;
      tv80mem_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x248 && offset < 0x24c) {
      offset -= 0x248;
      tv80mem_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24c && offset < 0x250) {
      offset -= 0x24c;
      mac_en0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x250 && offset < 0x254) {
      offset -= 0x250;
      mac_en1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x254 && offset < 0x258) {
      offset -= 0x254;
      mac_freeze_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x258 && offset < 0x25c) {
      offset -= 0x258;
      crcerr_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x274 && offset < 0x278) {
      offset -= 0x274;
      tv80_debug_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x278 && offset < 0x27c) {
      offset -= 0x278;
      tv80_debug_head_ptr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x27c && offset < 0x280) {
      offset -= 0x27c;
      tv80_debug_tail_ptr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x280 && offset < 0x284) {
      offset -= 0x280;
      tv80_stall_on_error_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x284 && offset < 0x288) {
      offset -= 0x284;
      tv80_halted_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x288 && offset < 0x28c) {
      offset -= 0x288;
      tv80_watchdog_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28c && offset < 0x290) {
      offset -= 0x28c;
      tv80_watchdog_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x290 && offset < 0x294) {
      offset -= 0x290;
      eth_mdioci_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1a0 && offset < 0x1b4) {
      offset -= 0x1a0;
      chnl_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c0 && offset < 0x1d4) {
      offset -= 0x1c0;
      cts_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e0 && offset < 0x1f4) {
      offset -= 0x1e0;
      mem_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x214) {
      offset -= 0x200;
      uctrl_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x260 && offset < 0x274) {
      offset -= 0x260;
      tv80_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    eth_soft_reset_.reset();
    chnl_seq_.reset();
    port_alive_lut_.reset();
    eth_clkobs_ctrl_.reset();
    for (auto &f0 : eth_onestep_ets_offset_ctrl_) {
      f0.reset();
    }
    eth_mac_ts_offset_ctrl_.reset();
    eth_status0_.reset();
    eth_status1_.reset();
    global_intr_stat_.reset();
    cts_fifo_stat_.reset();
    for (auto &f0 : txff_ctrl_) {
      f0.reset();
    }
    for (auto &f0 : txff_status_) {
      f0.reset();
    }
    for (auto &f0 : txcrc_trunc_ctrl_) {
      f0.reset();
    }
    for (auto &f0 : rxff_ctrl_) {
      f0.reset();
    }
    for (auto &f0 : rxpkt_err_sts_) {
      f0.reset();
    }
    for (auto &f0 : cts_fifo_out_) {
      f0.reset();
    }
    eth_ring_addr_.reset();
    eth_ring_wdata_.reset();
    eth_ring_rdata_.reset();
    eth_ring_ctrl_.reset();
    eth_ring_setup_.reset();
    soft_port_alive_.reset();
    txff_ecc_.reset();
    rxff_stat_ecc_.reset();
    txfifo_sbe_err_log_.reset();
    txfifo_mbe_err_log_.reset();
    txappfifo_sbe_err_log_.reset();
    txappfifo_mbe_err_log_.reset();
    rxappfifo_sbe_err_log_.reset();
    rxappfifo_mbe_err_log_.reset();
    statsmem_sbe_err_log_.reset();
    statsmem_mbe_err_log_.reset();
    tv80mem_sbe_err_log_.reset();
    tv80mem_mbe_err_log_.reset();
    mac_en0_.reset();
    mac_en1_.reset();
    mac_freeze_enable_.reset();
    crcerr_inj_.reset();
    tv80_debug_ctrl_.reset();
    tv80_debug_head_ptr_.reset();
    tv80_debug_tail_ptr_.reset();
    tv80_stall_on_error_.reset();
    tv80_halted_status_.reset();
    tv80_watchdog_ctrl_.reset();
    tv80_watchdog_count_.reset();
    eth_mdioci_addr_.reset();
    chnl_intr_.reset();
    cts_intr_.reset();
    mem_intr_.reset();
    uctrl_intr_.reset();
    tv80_intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += eth_soft_reset_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += chnl_seq_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += port_alive_lut_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += eth_clkobs_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x80) {
      offset -= 0x40;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += eth_onestep_ets_offset_ctrl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x88) {
      offset -= 0x80;
      r += eth_mac_ts_offset_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      r += eth_status0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      r += eth_status1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      r += global_intr_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      r += cts_fifo_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xc0) {
      offset -= 0xa0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += txff_ctrl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xe0) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += txff_status_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0x100) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += txcrc_trunc_ctrl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x120) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += rxff_ctrl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x120 && offset < 0x140) {
      offset -= 0x120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += rxpkt_err_sts_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x180) {
      offset -= 0x140;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += cts_fifo_out_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x184) {
      offset -= 0x180;
      r += eth_ring_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x184 && offset < 0x188) {
      offset -= 0x184;
      r += eth_ring_wdata_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x188 && offset < 0x18c) {
      offset -= 0x188;
      r += eth_ring_rdata_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18c && offset < 0x190) {
      offset -= 0x18c;
      r += eth_ring_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x190 && offset < 0x194) {
      offset -= 0x190;
      r += eth_ring_setup_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x194 && offset < 0x198) {
      offset -= 0x194;
      r += soft_port_alive_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x218 && offset < 0x220) {
      offset -= 0x218;
      r += txff_ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x220 && offset < 0x224) {
      offset -= 0x220;
      r += rxff_stat_ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x224 && offset < 0x228) {
      offset -= 0x224;
      r += txfifo_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x228 && offset < 0x22c) {
      offset -= 0x228;
      r += txfifo_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x22c && offset < 0x230) {
      offset -= 0x22c;
      r += txappfifo_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x230 && offset < 0x234) {
      offset -= 0x230;
      r += txappfifo_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x234 && offset < 0x238) {
      offset -= 0x234;
      r += rxappfifo_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x238 && offset < 0x23c) {
      offset -= 0x238;
      r += rxappfifo_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x23c && offset < 0x240) {
      offset -= 0x23c;
      r += statsmem_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x240 && offset < 0x244) {
      offset -= 0x240;
      r += statsmem_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x244 && offset < 0x248) {
      offset -= 0x244;
      r += tv80mem_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x248 && offset < 0x24c) {
      offset -= 0x248;
      r += tv80mem_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24c && offset < 0x250) {
      offset -= 0x24c;
      r += mac_en0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x250 && offset < 0x254) {
      offset -= 0x250;
      r += mac_en1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x254 && offset < 0x258) {
      offset -= 0x254;
      r += mac_freeze_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x258 && offset < 0x25c) {
      offset -= 0x258;
      r += crcerr_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x274 && offset < 0x278) {
      offset -= 0x274;
      r += tv80_debug_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x278 && offset < 0x27c) {
      offset -= 0x278;
      r += tv80_debug_head_ptr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x27c && offset < 0x280) {
      offset -= 0x27c;
      r += tv80_debug_tail_ptr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x280 && offset < 0x284) {
      offset -= 0x280;
      r += tv80_stall_on_error_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x284 && offset < 0x288) {
      offset -= 0x284;
      r += tv80_halted_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x288 && offset < 0x28c) {
      offset -= 0x288;
      r += tv80_watchdog_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28c && offset < 0x290) {
      offset -= 0x28c;
      r += tv80_watchdog_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x290 && offset < 0x294) {
      offset -= 0x290;
      r += eth_mdioci_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1a0 && offset < 0x1b4) {
      offset -= 0x1a0;
      r += chnl_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c0 && offset < 0x1d4) {
      offset -= 0x1c0;
      r += cts_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e0 && offset < 0x1f4) {
      offset -= 0x1e0;
      r += mem_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x214) {
      offset -= 0x200;
      r += uctrl_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x260 && offset < 0x274) {
      offset -= 0x260;
      r += tv80_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += eth_soft_reset_.to_string(print_zeros,indent_string) ;
    r += chnl_seq_.to_string(print_zeros,indent_string) ;
    r += port_alive_lut_.to_string(print_zeros,indent_string) ;
    r += eth_clkobs_ctrl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<8;++a0) {
      r += eth_onestep_ets_offset_ctrl_[a0].to_string(print_zeros,indent_string) ;
    }
    r += eth_mac_ts_offset_ctrl_.to_string(print_zeros,indent_string) ;
    r += eth_status0_.to_string(print_zeros,indent_string) ;
    r += eth_status1_.to_string(print_zeros,indent_string) ;
    r += global_intr_stat_.to_string(print_zeros,indent_string) ;
    r += cts_fifo_stat_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<8;++a0) {
      r += txff_ctrl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += txff_status_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += txcrc_trunc_ctrl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += rxff_ctrl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += rxpkt_err_sts_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += cts_fifo_out_[a0].to_string(print_zeros,indent_string) ;
    }
    r += eth_ring_addr_.to_string(print_zeros,indent_string) ;
    r += eth_ring_wdata_.to_string(print_zeros,indent_string) ;
    r += eth_ring_rdata_.to_string(print_zeros,indent_string) ;
    r += eth_ring_ctrl_.to_string(print_zeros,indent_string) ;
    r += eth_ring_setup_.to_string(print_zeros,indent_string) ;
    r += soft_port_alive_.to_string(print_zeros,indent_string) ;
    r += txff_ecc_.to_string(print_zeros,indent_string) ;
    r += rxff_stat_ecc_.to_string(print_zeros,indent_string) ;
    r += txfifo_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += txfifo_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += txappfifo_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += txappfifo_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += rxappfifo_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += rxappfifo_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += statsmem_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += statsmem_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += tv80mem_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += tv80mem_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += mac_en0_.to_string(print_zeros,indent_string) ;
    r += mac_en1_.to_string(print_zeros,indent_string) ;
    r += mac_freeze_enable_.to_string(print_zeros,indent_string) ;
    r += crcerr_inj_.to_string(print_zeros,indent_string) ;
    r += tv80_debug_ctrl_.to_string(print_zeros,indent_string) ;
    r += tv80_debug_head_ptr_.to_string(print_zeros,indent_string) ;
    r += tv80_debug_tail_ptr_.to_string(print_zeros,indent_string) ;
    r += tv80_stall_on_error_.to_string(print_zeros,indent_string) ;
    r += tv80_halted_status_.to_string(print_zeros,indent_string) ;
    r += tv80_watchdog_ctrl_.to_string(print_zeros,indent_string) ;
    r += tv80_watchdog_count_.to_string(print_zeros,indent_string) ;
    r += eth_mdioci_addr_.to_string(print_zeros,indent_string) ;
    r += chnl_intr_.to_string(print_zeros,indent_string) ;
    r += cts_intr_.to_string(print_zeros,indent_string) ;
    r += mem_intr_.to_string(print_zeros,indent_string) ;
    r += uctrl_intr_.to_string(print_zeros,indent_string) ;
    r += tv80_intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  Eth400gMacRspecEthSoftResetMutable eth_soft_reset_;
  Eth400gMacRspecChnlSeqMutable chnl_seq_;
  Eth400gMacRspecPortAliveLutMutable port_alive_lut_;
  Eth400gMacRspecEthClkobsCtrlMutable eth_clkobs_ctrl_;
  std::array< Eth400gMacRspecEthOnestepEtsOffsetCtrlMutable, 8 > eth_onestep_ets_offset_ctrl_;
  Eth400gMacRspecEthMacTsOffsetCtrlMutable eth_mac_ts_offset_ctrl_;
  Eth400gMacRspecEthStatus0Mutable eth_status0_;
  Eth400gMacRspecEthStatus1Mutable eth_status1_;
  Eth400gMacRspecGlobalIntrStatMutable global_intr_stat_;
  Eth400gMacRspecCtsFifoStatMutable cts_fifo_stat_;
  std::array< Eth400gMacRspecTxffCtrlMutable, 8 > txff_ctrl_;
  std::array< Eth400gMacRspecTxffStatusMutable, 8 > txff_status_;
  std::array< Eth400gMacRspecTxcrcTruncCtrlMutable, 8 > txcrc_trunc_ctrl_;
  std::array< Eth400gMacRspecRxffCtrlMutable, 8 > rxff_ctrl_;
  std::array< Eth400gMacRspecRxpktErrStsMutable, 8 > rxpkt_err_sts_;
  std::array< Eth400gMacRspecCtsFifoOutMutable, 8 > cts_fifo_out_;
  Eth400gMacRspecEthRingAddrMutable eth_ring_addr_;
  Eth400gMacRspecEthRingWdataMutable eth_ring_wdata_;
  Eth400gMacRspecEthRingRdataMutable eth_ring_rdata_;
  Eth400gMacRspecEthRingCtrlMutable eth_ring_ctrl_;
  Eth400gMacRspecEthRingSetupMutable eth_ring_setup_;
  Eth400gMacRspecSoftPortAliveMutable soft_port_alive_;
  Eth400gMacRspecTxffEccMutable txff_ecc_;
  Eth400gMacRspecRxffStatEccMutable rxff_stat_ecc_;
  Eth400gMacRspecTxfifoSbeErrLogMutable txfifo_sbe_err_log_;
  Eth400gMacRspecTxfifoMbeErrLogMutable txfifo_mbe_err_log_;
  Eth400gMacRspecTxappfifoSbeErrLogMutable txappfifo_sbe_err_log_;
  Eth400gMacRspecTxappfifoMbeErrLogMutable txappfifo_mbe_err_log_;
  Eth400gMacRspecRxappfifoSbeErrLogMutable rxappfifo_sbe_err_log_;
  Eth400gMacRspecRxappfifoMbeErrLogMutable rxappfifo_mbe_err_log_;
  Eth400gMacRspecStatsmemSbeErrLogMutable statsmem_sbe_err_log_;
  Eth400gMacRspecStatsmemMbeErrLogMutable statsmem_mbe_err_log_;
  Eth400gMacRspecTv80memSbeErrLogMutable tv80mem_sbe_err_log_;
  Eth400gMacRspecTv80memMbeErrLogMutable tv80mem_mbe_err_log_;
  Eth400gMacRspecMacEn0Mutable mac_en0_;
  Eth400gMacRspecMacEn1Mutable mac_en1_;
  Eth400gMacRspecMacFreezeEnableMutable mac_freeze_enable_;
  Eth400gMacRspecCrcerrInjMutable crcerr_inj_;
  Eth400gMacRspecTv80DebugCtrlMutable tv80_debug_ctrl_;
  Eth400gMacRspecTv80DebugHeadPtrMutable tv80_debug_head_ptr_;
  Eth400gMacRspecTv80DebugTailPtrMutable tv80_debug_tail_ptr_;
  Eth400gMacRspecTv80StallOnErrorMutable tv80_stall_on_error_;
  Eth400gMacRspecTv80HaltedStatusMutable tv80_halted_status_;
  Eth400gMacRspecTv80WatchdogCtrlMutable tv80_watchdog_ctrl_;
  Eth400gMacRspecTv80WatchdogCountMutable tv80_watchdog_count_;
  Eth400gMacRspecEthMdiociAddrMutable eth_mdioci_addr_;
  Eth400gMacRspecChnlIntrMutable chnl_intr_;
  Eth400gMacRspecCtsIntrMutable cts_intr_;
  Eth400gMacRspecMemIntrMutable mem_intr_;
  Eth400gMacRspecUctrlIntrMutable uctrl_intr_;
  Eth400gMacRspecTv80IntrMutable tv80_intr_;
private:
  static int StartOffset(
      JbayRegEnum selector_jbay_reg
      ) {
    int offset=0;
    switch (selector_jbay_reg) {
      case kEth400gP1:
        offset += 0x2040000; // to get to eth400g_p1
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP10:
        offset += 0x2280000; // to get to eth400g_p10
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP11:
        offset += 0x22c0000; // to get to eth400g_p11
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP12:
        offset += 0x2300000; // to get to eth400g_p12
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP13:
        offset += 0x2340000; // to get to eth400g_p13
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP14:
        offset += 0x2380000; // to get to eth400g_p14
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP15:
        offset += 0x23c0000; // to get to eth400g_p15
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP16:
        offset += 0x2400000; // to get to eth400g_p16
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP17:
        offset += 0x2440000; // to get to eth400g_p17
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP18:
        offset += 0x2480000; // to get to eth400g_p18
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP19:
        offset += 0x24c0000; // to get to eth400g_p19
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP2:
        offset += 0x2080000; // to get to eth400g_p2
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP20:
        offset += 0x2500000; // to get to eth400g_p20
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP21:
        offset += 0x2540000; // to get to eth400g_p21
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP22:
        offset += 0x2580000; // to get to eth400g_p22
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP23:
        offset += 0x25c0000; // to get to eth400g_p23
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP24:
        offset += 0x2600000; // to get to eth400g_p24
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP25:
        offset += 0x2640000; // to get to eth400g_p25
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP26:
        offset += 0x2680000; // to get to eth400g_p26
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP27:
        offset += 0x26c0000; // to get to eth400g_p27
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP28:
        offset += 0x2700000; // to get to eth400g_p28
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP29:
        offset += 0x2740000; // to get to eth400g_p29
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP3:
        offset += 0x20c0000; // to get to eth400g_p3
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP30:
        offset += 0x2780000; // to get to eth400g_p30
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP31:
        offset += 0x27c0000; // to get to eth400g_p31
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP32:
        offset += 0x2800000; // to get to eth400g_p32
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP4:
        offset += 0x2100000; // to get to eth400g_p4
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP5:
        offset += 0x2140000; // to get to eth400g_p5
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP6:
        offset += 0x2180000; // to get to eth400g_p6
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP7:
        offset += 0x21c0000; // to get to eth400g_p7
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP8:
        offset += 0x2200000; // to get to eth400g_p8
        offset += 0x10000; // to get to eth400g_mac
        break;
      case kEth400gP9:
        offset += 0x2240000; // to get to eth400g_p9
        offset += 0x10000; // to get to eth400g_mac
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};





  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_ETH400G_MAC_RSPEC_MUTABLE_H__
