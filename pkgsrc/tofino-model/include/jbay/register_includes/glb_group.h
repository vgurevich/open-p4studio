/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_GLB_GROUP_H__
#define __REGISTER_INCLUDES_GLB_GROUP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "acc_ctrl.h"
#include "acc_stat.h"
#include "ecc_dis.h"
#include "ecc_inj.h"
#include "glb_ctrl.h"
#include "glb_group_intr_stat.h"
#include "glb_group_port_en.h"
#include "glb_group_port_rates.h"
#include "glb_ipb_mtu.h"
#include "glb_ipb_tim_off.h"
#include "glb_parser_maxbyte.h"
#include "glb_status.h"
#include "intr_log_group.h"
#include "prsr_crd_stat.h"
#include "sw_reset.h"

namespace jbay {
  namespace register_classes {

class GlbGroup : public model_core::RegisterBlock<RegisterCallback> {
public:
  GlbGroup(
      int chipNumber, int index_pipe_addrmap, int index_ipb_prsr4_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ipb_prsr4_reg), 484, false, write_callback, read_callback, std::string("GlbGroup")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ipb_prsr4_reg))
    {
    }
  GlbGroup(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "GlbGroup")
    {
    }
public:





  SwReset &glb_group_sw_reset() { return glb_group_sw_reset_; }






  GlbStatus &glb_group_glb_status() { return glb_group_glb_status_; }






  PrsrCrdStat &glb_group_glb_prsr_crd_stat() { return glb_group_glb_prsr_crd_stat_; }







  GlbGroupPortRates &glb_group_port_rates() { return glb_group_port_rates_; }





  GlbGroupPortEn &glb_group_port_en() { return glb_group_port_en_; }





  GlbCtrl &glb_group_glb_ctrl() { return glb_group_glb_ctrl_; }





  AccCtrl &glb_group_acc_ctrl() { return glb_group_acc_ctrl_; }





  AccStat &glb_group_acc_stat() { return glb_group_acc_stat_; }





  GlbParserMaxbyte &glb_group_glb_parser_maxbyte() { return glb_group_glb_parser_maxbyte_; }






  EccInj &glb_group_ecc_inj() { return glb_group_ecc_inj_; }






  EccDis &glb_group_ecc_dis() { return glb_group_ecc_dis_; }





  GlbIpbMtu &glb_group_glb_ipb_mtu() { return glb_group_glb_ipb_mtu_; }





  GlbIpbTimOff &glb_group_glb_ipb_tim_off() { return glb_group_glb_ipb_tim_off_; }
  GlbGroupIntrStat &glb_group_intr_stat() { return glb_group_intr_stat_; }
  IntrLogGroup &glb_group_intr_log_group() { return glb_group_intr_log_group_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      glb_group_sw_reset_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0x10) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      glb_group_glb_status_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      glb_group_glb_prsr_crd_stat_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      glb_group_port_rates_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      glb_group_port_en_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      glb_group_glb_ctrl_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      glb_group_acc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      if (read_callback_) read_callback_();
      glb_group_acc_stat_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      glb_group_glb_parser_maxbyte_.read( offset, data );
    }
    else if (offset >= 0x1d0 && offset < 0x1d4) {
      offset -= 0x1d0;
      if (read_callback_) read_callback_();
      glb_group_ecc_inj_.read( offset, data );
    }
    else if (offset >= 0x1d4 && offset < 0x1d8) {
      offset -= 0x1d4;
      if (read_callback_) read_callback_();
      glb_group_ecc_dis_.read( offset, data );
    }
    else if (offset >= 0x1dc && offset < 0x1e0) {
      offset -= 0x1dc;
      if (read_callback_) read_callback_();
      glb_group_glb_ipb_mtu_.read( offset, data );
    }
    else if (offset >= 0x1e0 && offset < 0x1e4) {
      offset -= 0x1e0;
      if (read_callback_) read_callback_();
      glb_group_glb_ipb_tim_off_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x68) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      glb_group_intr_stat_.read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x1d0) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      glb_group_sw_reset_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0x10) {
      offset -= 0x8;
      glb_group_glb_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      glb_group_glb_prsr_crd_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      glb_group_port_rates_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      glb_group_port_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      glb_group_glb_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      glb_group_acc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      glb_group_acc_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      glb_group_glb_parser_maxbyte_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1d0 && offset < 0x1d4) {
      offset -= 0x1d0;
      glb_group_ecc_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1d4 && offset < 0x1d8) {
      offset -= 0x1d4;
      glb_group_ecc_dis_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1dc && offset < 0x1e0) {
      offset -= 0x1dc;
      glb_group_glb_ipb_mtu_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e0 && offset < 0x1e4) {
      offset -= 0x1e0;
      glb_group_glb_ipb_tim_off_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x68) {
      offset -= 0x40;
      glb_group_intr_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x1d0) {
      offset -= 0x100;
      glb_group_intr_log_group_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    glb_group_sw_reset_.reset();
    glb_group_glb_status_.reset();
    glb_group_glb_prsr_crd_stat_.reset();
    glb_group_port_rates_.reset();
    glb_group_port_en_.reset();
    glb_group_glb_ctrl_.reset();
    glb_group_acc_ctrl_.reset();
    glb_group_acc_stat_.reset();
    glb_group_glb_parser_maxbyte_.reset();
    glb_group_ecc_inj_.reset();
    glb_group_ecc_dis_.reset();
    glb_group_glb_ipb_mtu_.reset();
    glb_group_glb_ipb_tim_off_.reset();
    glb_group_intr_stat_.reset();
    glb_group_intr_log_group_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += glb_group_sw_reset_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0x10) {
      offset -= 0x8;
      r += glb_group_glb_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += glb_group_glb_prsr_crd_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += glb_group_port_rates_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += glb_group_port_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      r += glb_group_glb_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += glb_group_acc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      r += glb_group_acc_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += glb_group_glb_parser_maxbyte_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1d0 && offset < 0x1d4) {
      offset -= 0x1d0;
      r += glb_group_ecc_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1d4 && offset < 0x1d8) {
      offset -= 0x1d4;
      r += glb_group_ecc_dis_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1dc && offset < 0x1e0) {
      offset -= 0x1dc;
      r += glb_group_glb_ipb_mtu_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e0 && offset < 0x1e4) {
      offset -= 0x1e0;
      r += glb_group_glb_ipb_tim_off_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x68) {
      offset -= 0x40;
      r += glb_group_intr_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x1d0) {
      offset -= 0x100;
      r += glb_group_intr_log_group_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += glb_group_sw_reset_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_status_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_prsr_crd_stat_.to_string(print_zeros,indent_string) ;
    r += glb_group_port_rates_.to_string(print_zeros,indent_string) ;
    r += glb_group_port_en_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_ctrl_.to_string(print_zeros,indent_string) ;
    r += glb_group_acc_ctrl_.to_string(print_zeros,indent_string) ;
    r += glb_group_acc_stat_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_parser_maxbyte_.to_string(print_zeros,indent_string) ;
    r += glb_group_ecc_inj_.to_string(print_zeros,indent_string) ;
    r += glb_group_ecc_dis_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_ipb_mtu_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_ipb_tim_off_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_stat_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  SwReset glb_group_sw_reset_;
  GlbStatus glb_group_glb_status_;
  PrsrCrdStat glb_group_glb_prsr_crd_stat_;
  GlbGroupPortRates glb_group_port_rates_;
  GlbGroupPortEn glb_group_port_en_;
  GlbCtrl glb_group_glb_ctrl_;
  AccCtrl glb_group_acc_ctrl_;
  AccStat glb_group_acc_stat_;
  GlbParserMaxbyte glb_group_glb_parser_maxbyte_;
  EccInj glb_group_ecc_inj_;
  EccDis glb_group_ecc_dis_;
  GlbIpbMtu glb_group_glb_ipb_mtu_;
  GlbIpbTimOff glb_group_glb_ipb_tim_off_;
  GlbGroupIntrStat glb_group_intr_stat_;
  IntrLogGroup glb_group_intr_log_group_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ipb_prsr4_reg
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    assert(index_ipb_prsr4_reg < 9);
    offset += index_ipb_prsr4_reg * 0x2000; // ipb_prsr4_reg[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_GLB_GROUP_H__
