/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_GPIO_COMMON_REGS_MUTABLE_H__
#define __REGISTER_INCLUDES_GPIO_COMMON_REGS_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "gpio_common_regs_eth_gpio_intr_mutable.h"
#include "gpio_common_regs_gpio_status_mutable.h"
#include "gpio_common_regs_i2c_basetime_mutable.h"
#include "gpio_common_regs_ring_lock_timeout_mutable.h"
#include "gpio_common_regs_shld_ctrl_mutable.h"
#include "gpio_common_regs_statein_mutable.h"
#include "gpio_common_regs_stateout_mask_mutable.h"
#include "gpio_common_regs_stateout_mutable.h"
#include "gpio_common_regs_validin_mutable.h"

namespace jbay {
  namespace register_classes {

class GpioCommonRegsMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum JbayRegEnum {
    kEthgpiobr,
    kEthgpiotl
  };
public:
  GpioCommonRegsMutable(
      int chipNumber, JbayRegEnum selector_jbay_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_jbay_reg), 392, true, write_callback, read_callback, std::string("GpioCommonRegsMutable")+":"+boost::lexical_cast<std::string>(selector_jbay_reg))
    {
    }
  GpioCommonRegsMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "GpioCommonRegsMutable")
    {
    }
public:







  GpioCommonRegsStateoutMutable &stateout(int j0) { return stateout_[j0]; }







  GpioCommonRegsStateinMutable &statein(int j0) { return statein_[j0]; }







  GpioCommonRegsValidinMutable &validin(int j0) { return validin_[j0]; }





  GpioCommonRegsI2cBasetimeMutable &i2c_basetime() { return i2c_basetime_; }





  GpioCommonRegsShldCtrlMutable &shld_ctrl() { return shld_ctrl_; }





  GpioCommonRegsGpioStatusMutable &gpio_status() { return gpio_status_; }





  GpioCommonRegsStateoutMaskMutable &stateout_mask() { return stateout_mask_; }





  GpioCommonRegsRingLockTimeoutMutable &ring_lock_timeout() { return ring_lock_timeout_; }
  GpioCommonRegsEthGpioIntrMutable &eth_gpio_intr() { return eth_gpio_intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x100) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stateout_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x120) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      statein_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x120 && offset < 0x140) {
      offset -= 0x120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      validin_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      if (read_callback_) read_callback_();
      i2c_basetime_.read( offset, data );
    }
    else if (offset >= 0x174 && offset < 0x178) {
      offset -= 0x174;
      if (read_callback_) read_callback_();
      shld_ctrl_.read( offset, data );
    }
    else if (offset >= 0x178 && offset < 0x17c) {
      offset -= 0x178;
      if (read_callback_) read_callback_();
      gpio_status_.read( offset, data );
    }
    else if (offset >= 0x17c && offset < 0x180) {
      offset -= 0x17c;
      if (read_callback_) read_callback_();
      stateout_mask_.read( offset, data );
    }
    else if (offset >= 0x184 && offset < 0x188) {
      offset -= 0x184;
      if (read_callback_) read_callback_();
      ring_lock_timeout_.read( offset, data );
    }
    else if (offset >= 0x160 && offset < 0x174) {
      offset -= 0x160;
      if (read_callback_) read_callback_();
      eth_gpio_intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x100) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stateout_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x120) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      statein_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x120 && offset < 0x140) {
      offset -= 0x120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      validin_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      i2c_basetime_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x174 && offset < 0x178) {
      offset -= 0x174;
      shld_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x178 && offset < 0x17c) {
      offset -= 0x178;
      gpio_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x17c && offset < 0x180) {
      offset -= 0x17c;
      stateout_mask_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x184 && offset < 0x188) {
      offset -= 0x184;
      ring_lock_timeout_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x160 && offset < 0x174) {
      offset -= 0x160;
      eth_gpio_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : stateout_) {
      f0.reset();
    }
    for (auto &f0 : statein_) {
      f0.reset();
    }
    for (auto &f0 : validin_) {
      f0.reset();
    }
    i2c_basetime_.reset();
    shld_ctrl_.reset();
    gpio_status_.reset();
    stateout_mask_.reset();
    ring_lock_timeout_.reset();
    eth_gpio_intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x100) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stateout_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x120) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += statein_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x120 && offset < 0x140) {
      offset -= 0x120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += validin_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      r += i2c_basetime_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x174 && offset < 0x178) {
      offset -= 0x174;
      r += shld_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x178 && offset < 0x17c) {
      offset -= 0x178;
      r += gpio_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x17c && offset < 0x180) {
      offset -= 0x17c;
      r += stateout_mask_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x184 && offset < 0x188) {
      offset -= 0x184;
      r += ring_lock_timeout_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x160 && offset < 0x174) {
      offset -= 0x160;
      r += eth_gpio_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<64;++a0) {
      r += stateout_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += statein_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += validin_[a0].to_string(print_zeros,indent_string) ;
    }
    r += i2c_basetime_.to_string(print_zeros,indent_string) ;
    r += shld_ctrl_.to_string(print_zeros,indent_string) ;
    r += gpio_status_.to_string(print_zeros,indent_string) ;
    r += stateout_mask_.to_string(print_zeros,indent_string) ;
    r += ring_lock_timeout_.to_string(print_zeros,indent_string) ;
    r += eth_gpio_intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< GpioCommonRegsStateoutMutable, 64 > stateout_;
  std::array< GpioCommonRegsStateinMutable, 8 > statein_;
  std::array< GpioCommonRegsValidinMutable, 8 > validin_;
  GpioCommonRegsI2cBasetimeMutable i2c_basetime_;
  GpioCommonRegsShldCtrlMutable shld_ctrl_;
  GpioCommonRegsGpioStatusMutable gpio_status_;
  GpioCommonRegsStateoutMaskMutable stateout_mask_;
  GpioCommonRegsRingLockTimeoutMutable ring_lock_timeout_;
  GpioCommonRegsEthGpioIntrMutable eth_gpio_intr_;
private:
  static int StartOffset(
      JbayRegEnum selector_jbay_reg
      ) {
    int offset=0;
    switch (selector_jbay_reg) {
      case kEthgpiobr:
        offset += 0x2880000; // to get to ethgpiobr
        offset += 0x200; // to get to gpio_common_regs
        break;
      case kEthgpiotl:
        offset += 0x2840000; // to get to ethgpiotl
        offset += 0x200; // to get to gpio_common_regs
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_GPIO_COMMON_REGS_MUTABLE_H__
