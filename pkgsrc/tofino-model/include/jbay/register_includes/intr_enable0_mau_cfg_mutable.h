/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_INTR_ENABLE0_MAU_CFG_MUTABLE_H__
#define __REGISTER_INCLUDES_INTR_ENABLE0_MAU_CFG_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class IntrEnable0MauCfgMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  IntrEnable0MauCfgMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap), 4, true, write_callback, read_callback, std::string("IntrEnable0MauCfgMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap))
    {
    }
  IntrEnable0MauCfgMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "IntrEnable0MauCfgMutable")
    {
    }
public:


  uint8_t pbs_creq_data_sbe() { return pbs_creq_data_sbe_; }
  void pbs_creq_data_sbe(const uint8_t &v) { pbs_creq_data_sbe_=v; }


  uint8_t pbs_creq_data_mbe() { return pbs_creq_data_mbe_; }
  void pbs_creq_data_mbe(const uint8_t &v) { pbs_creq_data_mbe_=v; }


  uint8_t pbs_creq_ctrl_sbe() { return pbs_creq_ctrl_sbe_; }
  void pbs_creq_ctrl_sbe(const uint8_t &v) { pbs_creq_ctrl_sbe_=v; }


  uint8_t pbs_creq_ctrl_mbe() { return pbs_creq_ctrl_mbe_; }
  void pbs_creq_ctrl_mbe(const uint8_t &v) { pbs_creq_ctrl_mbe_=v; }


  uint8_t pbs_cresp_data_sbe() { return pbs_cresp_data_sbe_; }
  void pbs_cresp_data_sbe(const uint8_t &v) { pbs_cresp_data_sbe_=v; }


  uint8_t pbs_cresp_data_mbe() { return pbs_cresp_data_mbe_; }
  void pbs_cresp_data_mbe(const uint8_t &v) { pbs_cresp_data_mbe_=v; }


  uint8_t pbs_cresp_ctrl_sbe() { return pbs_cresp_ctrl_sbe_; }
  void pbs_cresp_ctrl_sbe(const uint8_t &v) { pbs_cresp_ctrl_sbe_=v; }


  uint8_t pbs_cresp_ctrl_mbe() { return pbs_cresp_ctrl_mbe_; }
  void pbs_cresp_ctrl_mbe(const uint8_t &v) { pbs_cresp_ctrl_mbe_=v; }


  uint8_t pbs_sreq_data_sbe() { return pbs_sreq_data_sbe_; }
  void pbs_sreq_data_sbe(const uint8_t &v) { pbs_sreq_data_sbe_=v; }


  uint8_t pbs_sreq_data_mbe() { return pbs_sreq_data_mbe_; }
  void pbs_sreq_data_mbe(const uint8_t &v) { pbs_sreq_data_mbe_=v; }


  uint8_t pbs_sreq_ctrl_sbe() { return pbs_sreq_ctrl_sbe_; }
  void pbs_sreq_ctrl_sbe(const uint8_t &v) { pbs_sreq_ctrl_sbe_=v; }


  uint8_t pbs_sreq_ctrl_mbe() { return pbs_sreq_ctrl_mbe_; }
  void pbs_sreq_ctrl_mbe(const uint8_t &v) { pbs_sreq_ctrl_mbe_=v; }



  uint8_t timeout_err() { return timeout_err_; }
  void timeout_err(const uint8_t &v) { timeout_err_=v; }


  uint8_t pbs_creq_hole_acc() { return pbs_creq_hole_acc_; }
  void pbs_creq_hole_acc(const uint8_t &v) { pbs_creq_hole_acc_=v; }


  uint8_t pbs_sreq_idle_timeout() { return pbs_sreq_idle_timeout_; }
  void pbs_sreq_idle_timeout(const uint8_t &v) { pbs_sreq_idle_timeout_=v; }


  uint8_t pbs_sreq_stats_timeout() { return pbs_sreq_stats_timeout_; }
  void pbs_sreq_stats_timeout(const uint8_t &v) { pbs_sreq_stats_timeout_=v; }


  uint8_t amod_fifo_sbe() { return amod_fifo_sbe_; }
  void amod_fifo_sbe(const uint8_t &v) { amod_fifo_sbe_=v; }


  uint8_t amod_fifo_mbe() { return amod_fifo_mbe_; }
  void amod_fifo_mbe(const uint8_t &v) { amod_fifo_mbe_=v; }



  uint8_t amod_protocol_err() { return amod_protocol_err_; }
  void amod_protocol_err(const uint8_t &v) { amod_protocol_err_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (pbs_creq_data_sbe_ & 0x1);
    *data |= ((pbs_creq_data_mbe_ & 0x1) << 1);
    *data |= ((pbs_creq_ctrl_sbe_ & 0x1) << 2);
    *data |= ((pbs_creq_ctrl_mbe_ & 0x1) << 3);
    *data |= ((pbs_cresp_data_sbe_ & 0x1) << 4);
    *data |= ((pbs_cresp_data_mbe_ & 0x1) << 5);
    *data |= ((pbs_cresp_ctrl_sbe_ & 0x1) << 6);
    *data |= ((pbs_cresp_ctrl_mbe_ & 0x1) << 7);
    *data |= ((pbs_sreq_data_sbe_ & 0x1) << 8);
    *data |= ((pbs_sreq_data_mbe_ & 0x1) << 9);
    *data |= ((pbs_sreq_ctrl_sbe_ & 0x1) << 10);
    *data |= ((pbs_sreq_ctrl_mbe_ & 0x1) << 11);
    *data |= ((timeout_err_ & 0x7f) << 12);
    *data |= ((pbs_creq_hole_acc_ & 0x1) << 19);
    *data |= ((pbs_sreq_idle_timeout_ & 0x1) << 20);
    *data |= ((pbs_sreq_stats_timeout_ & 0x1) << 21);
    *data |= ((amod_fifo_sbe_ & 0x1) << 22);
    *data |= ((amod_fifo_mbe_ & 0x1) << 23);
    *data |= ((amod_protocol_err_ & 0x1) << 24);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    pbs_creq_data_sbe_ = (data & 0x1);
    pbs_creq_data_mbe_ = ((data >> 1) & 0x1);
    pbs_creq_ctrl_sbe_ = ((data >> 2) & 0x1);
    pbs_creq_ctrl_mbe_ = ((data >> 3) & 0x1);
    pbs_cresp_data_sbe_ = ((data >> 4) & 0x1);
    pbs_cresp_data_mbe_ = ((data >> 5) & 0x1);
    pbs_cresp_ctrl_sbe_ = ((data >> 6) & 0x1);
    pbs_cresp_ctrl_mbe_ = ((data >> 7) & 0x1);
    pbs_sreq_data_sbe_ = ((data >> 8) & 0x1);
    pbs_sreq_data_mbe_ = ((data >> 9) & 0x1);
    pbs_sreq_ctrl_sbe_ = ((data >> 10) & 0x1);
    pbs_sreq_ctrl_mbe_ = ((data >> 11) & 0x1);
    timeout_err_ = ((data >> 12) & 0x7f);
    pbs_creq_hole_acc_ = ((data >> 19) & 0x1);
    pbs_sreq_idle_timeout_ = ((data >> 20) & 0x1);
    pbs_sreq_stats_timeout_ = ((data >> 21) & 0x1);
    amod_fifo_sbe_ = ((data >> 22) & 0x1);
    amod_fifo_mbe_ = ((data >> 23) & 0x1);
    amod_protocol_err_ = ((data >> 24) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    pbs_creq_data_sbe_ = 0x0;
    pbs_creq_data_mbe_ = 0x0;
    pbs_creq_ctrl_sbe_ = 0x0;
    pbs_creq_ctrl_mbe_ = 0x0;
    pbs_cresp_data_sbe_ = 0x0;
    pbs_cresp_data_mbe_ = 0x0;
    pbs_cresp_ctrl_sbe_ = 0x0;
    pbs_cresp_ctrl_mbe_ = 0x0;
    pbs_sreq_data_sbe_ = 0x0;
    pbs_sreq_data_mbe_ = 0x0;
    pbs_sreq_ctrl_sbe_ = 0x0;
    pbs_sreq_ctrl_mbe_ = 0x0;
    timeout_err_ = 0x0;
    pbs_creq_hole_acc_ = 0x0;
    pbs_sreq_idle_timeout_ = 0x0;
    pbs_sreq_stats_timeout_ = 0x0;
    amod_fifo_sbe_ = 0x0;
    amod_fifo_mbe_ = 0x0;
    amod_protocol_err_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("IntrEnable0MauCfgMutable") + ":\n";
    r += indent_string + "  " + std::string("pbs_creq_data_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_creq_data_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_creq_data_sbe_);
    r += indent_string + "  " + std::string("pbs_creq_data_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_creq_data_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_creq_data_mbe_);
    r += indent_string + "  " + std::string("pbs_creq_ctrl_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_creq_ctrl_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_creq_ctrl_sbe_);
    r += indent_string + "  " + std::string("pbs_creq_ctrl_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_creq_ctrl_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_creq_ctrl_mbe_);
    r += indent_string + "  " + std::string("pbs_cresp_data_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_cresp_data_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_cresp_data_sbe_);
    r += indent_string + "  " + std::string("pbs_cresp_data_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_cresp_data_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_cresp_data_mbe_);
    r += indent_string + "  " + std::string("pbs_cresp_ctrl_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_cresp_ctrl_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_cresp_ctrl_sbe_);
    r += indent_string + "  " + std::string("pbs_cresp_ctrl_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_cresp_ctrl_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_cresp_ctrl_mbe_);
    r += indent_string + "  " + std::string("pbs_sreq_data_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_sreq_data_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_sreq_data_sbe_);
    r += indent_string + "  " + std::string("pbs_sreq_data_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_sreq_data_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_sreq_data_mbe_);
    r += indent_string + "  " + std::string("pbs_sreq_ctrl_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_sreq_ctrl_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_sreq_ctrl_sbe_);
    r += indent_string + "  " + std::string("pbs_sreq_ctrl_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_sreq_ctrl_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_sreq_ctrl_mbe_);
    r += indent_string + "  " + std::string("timeout_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(timeout_err_) ) + "\n";
    all_zeros &= (0 == timeout_err_);
    r += indent_string + "  " + std::string("pbs_creq_hole_acc") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_creq_hole_acc_) ) + "\n";
    all_zeros &= (0 == pbs_creq_hole_acc_);
    r += indent_string + "  " + std::string("pbs_sreq_idle_timeout") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_sreq_idle_timeout_) ) + "\n";
    all_zeros &= (0 == pbs_sreq_idle_timeout_);
    r += indent_string + "  " + std::string("pbs_sreq_stats_timeout") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_sreq_stats_timeout_) ) + "\n";
    all_zeros &= (0 == pbs_sreq_stats_timeout_);
    r += indent_string + "  " + std::string("amod_fifo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(amod_fifo_sbe_) ) + "\n";
    all_zeros &= (0 == amod_fifo_sbe_);
    r += indent_string + "  " + std::string("amod_fifo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(amod_fifo_mbe_) ) + "\n";
    all_zeros &= (0 == amod_fifo_mbe_);
    r += indent_string + "  " + std::string("amod_protocol_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(amod_protocol_err_) ) + "\n";
    all_zeros &= (0 == amod_protocol_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("IntrEnable0MauCfgMutable") + ":\n";
    r += indent_string + "  " + std::string("pbs_creq_data_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_creq_data_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_creq_data_sbe_);
    r += indent_string + "  " + std::string("pbs_creq_data_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_creq_data_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_creq_data_mbe_);
    r += indent_string + "  " + std::string("pbs_creq_ctrl_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_creq_ctrl_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_creq_ctrl_sbe_);
    r += indent_string + "  " + std::string("pbs_creq_ctrl_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_creq_ctrl_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_creq_ctrl_mbe_);
    r += indent_string + "  " + std::string("pbs_cresp_data_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_cresp_data_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_cresp_data_sbe_);
    r += indent_string + "  " + std::string("pbs_cresp_data_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_cresp_data_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_cresp_data_mbe_);
    r += indent_string + "  " + std::string("pbs_cresp_ctrl_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_cresp_ctrl_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_cresp_ctrl_sbe_);
    r += indent_string + "  " + std::string("pbs_cresp_ctrl_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_cresp_ctrl_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_cresp_ctrl_mbe_);
    r += indent_string + "  " + std::string("pbs_sreq_data_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_sreq_data_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_sreq_data_sbe_);
    r += indent_string + "  " + std::string("pbs_sreq_data_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_sreq_data_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_sreq_data_mbe_);
    r += indent_string + "  " + std::string("pbs_sreq_ctrl_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_sreq_ctrl_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_sreq_ctrl_sbe_);
    r += indent_string + "  " + std::string("pbs_sreq_ctrl_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_sreq_ctrl_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_sreq_ctrl_mbe_);
    r += indent_string + "  " + std::string("timeout_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(timeout_err_) ) + "\n";
    all_zeros &= (0 == timeout_err_);
    r += indent_string + "  " + std::string("pbs_creq_hole_acc") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_creq_hole_acc_) ) + "\n";
    all_zeros &= (0 == pbs_creq_hole_acc_);
    r += indent_string + "  " + std::string("pbs_sreq_idle_timeout") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_sreq_idle_timeout_) ) + "\n";
    all_zeros &= (0 == pbs_sreq_idle_timeout_);
    r += indent_string + "  " + std::string("pbs_sreq_stats_timeout") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_sreq_stats_timeout_) ) + "\n";
    all_zeros &= (0 == pbs_sreq_stats_timeout_);
    r += indent_string + "  " + std::string("amod_fifo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(amod_fifo_sbe_) ) + "\n";
    all_zeros &= (0 == amod_fifo_sbe_);
    r += indent_string + "  " + std::string("amod_fifo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(amod_fifo_mbe_) ) + "\n";
    all_zeros &= (0 == amod_fifo_mbe_);
    r += indent_string + "  " + std::string("amod_protocol_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(amod_protocol_err_) ) + "\n";
    all_zeros &= (0 == amod_protocol_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t pbs_creq_data_sbe_;
  uint8_t pbs_creq_data_mbe_;
  uint8_t pbs_creq_ctrl_sbe_;
  uint8_t pbs_creq_ctrl_mbe_;
  uint8_t pbs_cresp_data_sbe_;
  uint8_t pbs_cresp_data_mbe_;
  uint8_t pbs_cresp_ctrl_sbe_;
  uint8_t pbs_cresp_ctrl_mbe_;
  uint8_t pbs_sreq_data_sbe_;
  uint8_t pbs_sreq_data_mbe_;
  uint8_t pbs_sreq_ctrl_sbe_;
  uint8_t pbs_sreq_ctrl_mbe_;
  uint8_t timeout_err_;
  uint8_t pbs_creq_hole_acc_;
  uint8_t pbs_sreq_idle_timeout_;
  uint8_t pbs_sreq_stats_timeout_;
  uint8_t amod_fifo_sbe_;
  uint8_t amod_fifo_mbe_;
  uint8_t amod_protocol_err_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x40000; // to get to cfg_regs
    offset += 0x20; // to get to intr_enable0_mau_cfg
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_INTR_ENABLE0_MAU_CFG_MUTABLE_H__
