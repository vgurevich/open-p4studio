/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_INTR_ENABLE1_MAU_SELECTOR_ALU_MUTABLE_H__
#define __REGISTER_INCLUDES_INTR_ENABLE1_MAU_SELECTOR_ALU_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class IntrEnable1MauSelectorAluMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  IntrEnable1MauSelectorAluMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_meter_alu_group_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_meter_alu_group_addrmap), 4, true, write_callback, read_callback, std::string("IntrEnable1MauSelectorAluMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_meter_alu_group_addrmap))
    {
    }
  IntrEnable1MauSelectorAluMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "IntrEnable1MauSelectorAluMutable")
    {
    }
public:



  uint8_t intr_selector_alu() { return intr_selector_alu_; }
  void intr_selector_alu(const uint8_t &v) { intr_selector_alu_=v; }


  uint8_t intr_stateful_minmax() { return intr_stateful_minmax_; }
  void intr_stateful_minmax(const uint8_t &v) { intr_stateful_minmax_=v; }


  uint8_t intr_stateful_div_by_zero() { return intr_stateful_div_by_zero_; }
  void intr_stateful_div_by_zero(const uint8_t &v) { intr_stateful_div_by_zero_=v; }


  uint8_t salu_pred_intr() { return salu_pred_intr_; }
  void salu_pred_intr(const uint8_t &v) { salu_pred_intr_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (intr_selector_alu_ & 0x3);
    *data |= ((intr_stateful_minmax_ & 0x1) << 2);
    *data |= ((intr_stateful_div_by_zero_ & 0x1) << 3);
    *data |= ((salu_pred_intr_ & 0x1) << 4);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    intr_selector_alu_ = (data & 0x3);
    intr_stateful_minmax_ = ((data >> 2) & 0x1);
    intr_stateful_div_by_zero_ = ((data >> 3) & 0x1);
    salu_pred_intr_ = ((data >> 4) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    intr_selector_alu_ = 0x0;
    intr_stateful_minmax_ = 0x0;
    intr_stateful_div_by_zero_ = 0x0;
    salu_pred_intr_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("IntrEnable1MauSelectorAluMutable") + ":\n";
    r += indent_string + "  " + std::string("intr_selector_alu") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_selector_alu_) ) + "\n";
    all_zeros &= (0 == intr_selector_alu_);
    r += indent_string + "  " + std::string("intr_stateful_minmax") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_stateful_minmax_) ) + "\n";
    all_zeros &= (0 == intr_stateful_minmax_);
    r += indent_string + "  " + std::string("intr_stateful_div_by_zero") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_stateful_div_by_zero_) ) + "\n";
    all_zeros &= (0 == intr_stateful_div_by_zero_);
    r += indent_string + "  " + std::string("salu_pred_intr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_pred_intr_) ) + "\n";
    all_zeros &= (0 == salu_pred_intr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("IntrEnable1MauSelectorAluMutable") + ":\n";
    r += indent_string + "  " + std::string("intr_selector_alu") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_selector_alu_) ) + "\n";
    all_zeros &= (0 == intr_selector_alu_);
    r += indent_string + "  " + std::string("intr_stateful_minmax") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_stateful_minmax_) ) + "\n";
    all_zeros &= (0 == intr_stateful_minmax_);
    r += indent_string + "  " + std::string("intr_stateful_div_by_zero") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_stateful_div_by_zero_) ) + "\n";
    all_zeros &= (0 == intr_stateful_div_by_zero_);
    r += indent_string + "  " + std::string("salu_pred_intr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_pred_intr_) ) + "\n";
    all_zeros &= (0 == salu_pred_intr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t intr_selector_alu_;
  uint8_t intr_stateful_minmax_;
  uint8_t intr_stateful_div_by_zero_;
  uint8_t salu_pred_intr_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_meter_alu_group_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to rams
    offset += 0x10000; // to get to map_alu
    offset += 0x3000; // to get to meter_group
    assert(index_mau_meter_alu_group_addrmap < 4);
    offset += index_mau_meter_alu_group_addrmap * 0x400; // mau_meter_alu_group_addrmap[]
    offset += 0x20; // to get to selector
    offset += 0xc; // to get to intr_enable1_mau_selector_alu
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_INTR_ENABLE1_MAU_SELECTOR_ALU_MUTABLE_H__
