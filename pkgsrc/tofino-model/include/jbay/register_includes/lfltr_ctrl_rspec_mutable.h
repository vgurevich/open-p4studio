/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_LFLTR_CTRL_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_LFLTR_CTRL_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "lfltr_bft_ctrl_mutable.h"
#include "lfltr_bft_state_mutable.h"
#include "lfltr_common_ctrl_mutable.h"
#include "lfltr_creq_state_mutable.h"
#include "lfltr_ctr48_lq_dropped_learned_mutable.h"
#include "lfltr_ctr48_lq_dropped_state_mutable.h"
#include "lfltr_ctr48_lq_eop_in_err_mutable.h"
#include "lfltr_ctr48_lq_in_mutable.h"
#include "lfltr_ctr48_lq_learned_mutable.h"
#include "lfltr_ctr48_lq_sop_in_mutable.h"
#include "lfltr_ctrl_rspec_debug_bus_ctrl_mutable.h"
#include "lfltr_freeze_en_mutable.h"
#include "lfltr_hash_seed_mutable.h"
#include "lfltr_intr_en0_mutable.h"
#include "lfltr_intr_en1_mutable.h"
#include "lfltr_intr_inj_mutable.h"
#include "lfltr_intr_stat_mutable.h"
#include "lfltr_lqt_state_mutable.h"
#include "lfltr_lqt_timeout_mutable.h"
#include "lfltr_mbe_log_mutable.h"
#include "lfltr_pbe_log_mutable.h"
#include "lfltr_sbe_log_mutable.h"

namespace jbay {
  namespace register_classes {

class LfltrCtrlRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  LfltrCtrlRspecMutable(
      int chipNumber, int index_lfltr_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_lfltr_rspec), 32768, true, write_callback, read_callback, std::string("LfltrCtrlRspecMutable")+":"+boost::lexical_cast<std::string>(index_lfltr_rspec))
    {
    }
  LfltrCtrlRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "LfltrCtrlRspecMutable")
    {
    }
public:





  LfltrCommonCtrlMutable &common_ctrl() { return common_ctrl_; }





  LfltrLqtTimeoutMutable &lqt_timeout() { return lqt_timeout_; }





  LfltrBftCtrlMutable &bft_ctrl() { return bft_ctrl_; }







  LfltrHashSeedMutable &hash_seed(int j0) { return hash_seed_[j0]; }





  LfltrIntrStatMutable &intr_stat() { return intr_stat_; }





  LfltrIntrEn0Mutable &intr_en0() { return intr_en0_; }





  LfltrIntrEn1Mutable &intr_en1() { return intr_en1_; }





  LfltrFreezeEnMutable &freeze_en() { return freeze_en_; }





  LfltrIntrInjMutable &intr_inj() { return intr_inj_; }





  LfltrCtr48LqSopInMutable &lq_sop_in() { return lq_sop_in_; }





  LfltrCtr48LqEopInErrMutable &lq_eop_in_err() { return lq_eop_in_err_; }





  LfltrCtr48LqInMutable &lq_in() { return lq_in_; }





  LfltrCtr48LqDroppedStateMutable &lq_dropped_state() { return lq_dropped_state_; }





  LfltrCtr48LqDroppedLearnedMutable &lq_dropped_learned() { return lq_dropped_learned_; }





  LfltrCtr48LqLearnedMutable &lq_learned() { return lq_learned_; }





  LfltrPbeLogMutable &pbe_log() { return pbe_log_; }





  LfltrSbeLogMutable &sbe_log() { return sbe_log_; }





  LfltrMbeLogMutable &mbe_log() { return mbe_log_; }





  LfltrBftStateMutable &bft_state() { return bft_state_; }





  LfltrLqtStateMutable &lqt_state() { return lqt_state_; }





  LfltrCreqStateMutable &creq_state() { return creq_state_; }





  LfltrCtrlRspecDebugBusCtrlMutable &debug_bus_ctrl() { return debug_bus_ctrl_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      common_ctrl_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      lqt_timeout_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      bft_ctrl_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      hash_seed_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      intr_stat_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      intr_en0_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      intr_en1_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      freeze_en_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      intr_inj_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      lq_sop_in_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      lq_eop_in_err_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      lq_in_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      lq_dropped_state_.read( offset, data );
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      if (read_callback_) read_callback_();
      lq_dropped_learned_.read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x78) {
      offset -= 0x70;
      if (read_callback_) read_callback_();
      lq_learned_.read( offset, data );
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      if (read_callback_) read_callback_();
      pbe_log_.read( offset, data );
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      if (read_callback_) read_callback_();
      sbe_log_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      mbe_log_.read( offset, data );
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      if (read_callback_) read_callback_();
      bft_state_.read( offset, data );
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      if (read_callback_) read_callback_();
      lqt_state_.read( offset, data );
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      if (read_callback_) read_callback_();
      creq_state_.read( offset, data );
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      if (read_callback_) read_callback_();
      debug_bus_ctrl_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      common_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      lqt_timeout_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      bft_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      hash_seed_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      intr_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      intr_en0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      intr_en1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      freeze_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      intr_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      lq_sop_in_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      lq_eop_in_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      lq_in_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      lq_dropped_state_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      lq_dropped_learned_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x78) {
      offset -= 0x70;
      lq_learned_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      pbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      sbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      mbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      bft_state_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      lqt_state_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      creq_state_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      debug_bus_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    common_ctrl_.reset();
    lqt_timeout_.reset();
    bft_ctrl_.reset();
    for (auto &f0 : hash_seed_) {
      f0.reset();
    }
    intr_stat_.reset();
    intr_en0_.reset();
    intr_en1_.reset();
    freeze_en_.reset();
    intr_inj_.reset();
    lq_sop_in_.reset();
    lq_eop_in_err_.reset();
    lq_in_.reset();
    lq_dropped_state_.reset();
    lq_dropped_learned_.reset();
    lq_learned_.reset();
    pbe_log_.reset();
    sbe_log_.reset();
    mbe_log_.reset();
    bft_state_.reset();
    lqt_state_.reset();
    creq_state_.reset();
    debug_bus_ctrl_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += common_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += lqt_timeout_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += bft_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += hash_seed_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += intr_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += intr_en0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += intr_en1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += freeze_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      r += intr_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      r += lq_sop_in_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      r += lq_eop_in_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      r += lq_in_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      r += lq_dropped_state_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      r += lq_dropped_learned_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x78) {
      offset -= 0x70;
      r += lq_learned_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      r += pbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      r += sbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      r += mbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      r += bft_state_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      r += lqt_state_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      r += creq_state_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      r += debug_bus_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += common_ctrl_.to_string(print_zeros,indent_string) ;
    r += lqt_timeout_.to_string(print_zeros,indent_string) ;
    r += bft_ctrl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += hash_seed_[a0].to_string(print_zeros,indent_string) ;
    }
    r += intr_stat_.to_string(print_zeros,indent_string) ;
    r += intr_en0_.to_string(print_zeros,indent_string) ;
    r += intr_en1_.to_string(print_zeros,indent_string) ;
    r += freeze_en_.to_string(print_zeros,indent_string) ;
    r += intr_inj_.to_string(print_zeros,indent_string) ;
    r += lq_sop_in_.to_string(print_zeros,indent_string) ;
    r += lq_eop_in_err_.to_string(print_zeros,indent_string) ;
    r += lq_in_.to_string(print_zeros,indent_string) ;
    r += lq_dropped_state_.to_string(print_zeros,indent_string) ;
    r += lq_dropped_learned_.to_string(print_zeros,indent_string) ;
    r += lq_learned_.to_string(print_zeros,indent_string) ;
    r += pbe_log_.to_string(print_zeros,indent_string) ;
    r += sbe_log_.to_string(print_zeros,indent_string) ;
    r += mbe_log_.to_string(print_zeros,indent_string) ;
    r += bft_state_.to_string(print_zeros,indent_string) ;
    r += lqt_state_.to_string(print_zeros,indent_string) ;
    r += creq_state_.to_string(print_zeros,indent_string) ;
    r += debug_bus_ctrl_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  LfltrCommonCtrlMutable common_ctrl_;
  LfltrLqtTimeoutMutable lqt_timeout_;
  LfltrBftCtrlMutable bft_ctrl_;
  std::array< LfltrHashSeedMutable, 4 > hash_seed_;
  LfltrIntrStatMutable intr_stat_;
  LfltrIntrEn0Mutable intr_en0_;
  LfltrIntrEn1Mutable intr_en1_;
  LfltrFreezeEnMutable freeze_en_;
  LfltrIntrInjMutable intr_inj_;
  LfltrCtr48LqSopInMutable lq_sop_in_;
  LfltrCtr48LqEopInErrMutable lq_eop_in_err_;
  LfltrCtr48LqInMutable lq_in_;
  LfltrCtr48LqDroppedStateMutable lq_dropped_state_;
  LfltrCtr48LqDroppedLearnedMutable lq_dropped_learned_;
  LfltrCtr48LqLearnedMutable lq_learned_;
  LfltrPbeLogMutable pbe_log_;
  LfltrSbeLogMutable sbe_log_;
  LfltrMbeLogMutable mbe_log_;
  LfltrBftStateMutable bft_state_;
  LfltrLqtStateMutable lqt_state_;
  LfltrCreqStateMutable creq_state_;
  LfltrCtrlRspecDebugBusCtrlMutable debug_bus_ctrl_;
private:
  static int StartOffset(
      int index_lfltr_rspec
      ) {
    int offset=0;
    offset += 0x400000; // to get to lfltr
    assert(index_lfltr_rspec < 4);
    offset += index_lfltr_rspec * 0x80000; // lfltr_rspec[]
    offset += 0x20000; // to get to ctrl
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_LFLTR_CTRL_RSPEC_MUTABLE_H__
