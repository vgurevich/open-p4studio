/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAPRAM_CONFIG_MUTABLE_H__
#define __REGISTER_INCLUDES_MAPRAM_CONFIG_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class MapramConfigMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MapramConfigMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_map_and_alu_row_addrmap, int index_mapram_config, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_map_and_alu_row_addrmap, index_mapram_config), 4, true, write_callback, read_callback, std::string("MapramConfigMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_map_and_alu_row_addrmap) + "," + boost::lexical_cast<std::string>(index_mapram_config))
    {
    }
  MapramConfigMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MapramConfigMutable")
    {
    }
public:



  uint8_t idletime_disable_notification() { return idletime_disable_notification_; }
  void idletime_disable_notification(const uint8_t &v) { idletime_disable_notification_=v; }





  uint8_t two_way_idletime_notification() { return two_way_idletime_notification_; }
  void two_way_idletime_notification(const uint8_t &v) { two_way_idletime_notification_=v; }







  uint8_t per_flow_idletime() { return per_flow_idletime_; }
  void per_flow_idletime(const uint8_t &v) { per_flow_idletime_=v; }







  uint8_t idletime_bitwidth() { return idletime_bitwidth_; }
  void idletime_bitwidth(const uint8_t &v) { idletime_bitwidth_=v; }









  uint8_t mapram_color_bus_select() { return mapram_color_bus_select_; }
  void mapram_color_bus_select(const uint8_t &v) { mapram_color_bus_select_=v; }










  uint8_t mapram_type() { return mapram_type_; }
  void mapram_type(const uint8_t &v) { mapram_type_=v; }


  uint8_t mapram_logical_table() { return mapram_logical_table_; }
  void mapram_logical_table(const uint8_t &v) { mapram_logical_table_=v; }


  uint8_t mapram_vpn_members() { return mapram_vpn_members_; }
  void mapram_vpn_members(const uint8_t &v) { mapram_vpn_members_=v; }



  uint8_t mapram_vpn() { return mapram_vpn_; }
  void mapram_vpn(const uint8_t &v) { mapram_vpn_=v; }


  uint8_t mapram_parity_generate() { return mapram_parity_generate_; }
  void mapram_parity_generate(const uint8_t &v) { mapram_parity_generate_=v; }


  uint8_t mapram_ecc_generate() { return mapram_ecc_generate_; }
  void mapram_ecc_generate(const uint8_t &v) { mapram_ecc_generate_=v; }


  uint8_t mapram_parity_check() { return mapram_parity_check_; }
  void mapram_parity_check(const uint8_t &v) { mapram_parity_check_=v; }


  uint8_t mapram_ecc_check() { return mapram_ecc_check_; }
  void mapram_ecc_check(const uint8_t &v) { mapram_ecc_check_=v; }


  uint8_t mapram_ingress() { return mapram_ingress_; }
  void mapram_ingress(const uint8_t &v) { mapram_ingress_=v; }


  uint8_t mapram_egress() { return mapram_egress_; }
  void mapram_egress(const uint8_t &v) { mapram_egress_=v; }




  uint8_t mapram_enable() { return mapram_enable_; }
  void mapram_enable(const uint8_t &v) { mapram_enable_=v; }









  uint8_t mapram_color_write_bus_select() { return mapram_color_write_bus_select_; }
  void mapram_color_write_bus_select(const uint8_t &v) { mapram_color_write_bus_select_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (idletime_disable_notification_ & 0x1);
    *data |= ((two_way_idletime_notification_ & 0x1) << 1);
    *data |= ((per_flow_idletime_ & 0x1) << 2);
    *data |= ((idletime_bitwidth_ & 0x3) << 3);
    *data |= ((mapram_color_bus_select_ & 0x3) << 5);
    *data |= ((mapram_type_ & 0x7) << 7);
    *data |= ((mapram_logical_table_ & 0xf) << 10);
    *data |= ((mapram_vpn_members_ & 0xf) << 14);
    *data |= ((mapram_vpn_ & 0x3f) << 18);
    *data |= ((mapram_parity_generate_ & 0x1) << 24);
    *data |= ((mapram_ecc_generate_ & 0x1) << 25);
    *data |= ((mapram_parity_check_ & 0x1) << 26);
    *data |= ((mapram_ecc_check_ & 0x1) << 27);
    *data |= ((mapram_ingress_ & 0x1) << 28);
    *data |= ((mapram_egress_ & 0x1) << 29);
    *data |= ((mapram_enable_ & 0x1) << 30);
    *data |= ((mapram_color_write_bus_select_ & 0x1) << 31);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    idletime_disable_notification_ = (data & 0x1);
    two_way_idletime_notification_ = ((data >> 1) & 0x1);
    per_flow_idletime_ = ((data >> 2) & 0x1);
    idletime_bitwidth_ = ((data >> 3) & 0x3);
    mapram_color_bus_select_ = ((data >> 5) & 0x3);
    mapram_type_ = ((data >> 7) & 0x7);
    mapram_logical_table_ = ((data >> 10) & 0xf);
    mapram_vpn_members_ = ((data >> 14) & 0xf);
    mapram_vpn_ = ((data >> 18) & 0x3f);
    mapram_parity_generate_ = ((data >> 24) & 0x1);
    mapram_ecc_generate_ = ((data >> 25) & 0x1);
    mapram_parity_check_ = ((data >> 26) & 0x1);
    mapram_ecc_check_ = ((data >> 27) & 0x1);
    mapram_ingress_ = ((data >> 28) & 0x1);
    mapram_egress_ = ((data >> 29) & 0x1);
    mapram_enable_ = ((data >> 30) & 0x1);
    mapram_color_write_bus_select_ = ((data >> 31) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    idletime_disable_notification_ = 0x0;
    two_way_idletime_notification_ = 0x0;
    per_flow_idletime_ = 0x0;
    idletime_bitwidth_ = 0x0;
    mapram_color_bus_select_ = 0x0;
    mapram_type_ = 0x0;
    mapram_logical_table_ = 0x0;
    mapram_vpn_members_ = 0x0;
    mapram_vpn_ = 0x0;
    mapram_parity_generate_ = 0x0;
    mapram_ecc_generate_ = 0x0;
    mapram_parity_check_ = 0x0;
    mapram_ecc_check_ = 0x0;
    mapram_ingress_ = 0x0;
    mapram_egress_ = 0x0;
    mapram_enable_ = 0x0;
    mapram_color_write_bus_select_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MapramConfigMutable") + ":\n";
    r += indent_string + "  " + std::string("idletime_disable_notification") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idletime_disable_notification_) ) + "\n";
    all_zeros &= (0 == idletime_disable_notification_);
    r += indent_string + "  " + std::string("two_way_idletime_notification") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(two_way_idletime_notification_) ) + "\n";
    all_zeros &= (0 == two_way_idletime_notification_);
    r += indent_string + "  " + std::string("per_flow_idletime") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(per_flow_idletime_) ) + "\n";
    all_zeros &= (0 == per_flow_idletime_);
    r += indent_string + "  " + std::string("idletime_bitwidth") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idletime_bitwidth_) ) + "\n";
    all_zeros &= (0 == idletime_bitwidth_);
    r += indent_string + "  " + std::string("mapram_color_bus_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_color_bus_select_) ) + "\n";
    all_zeros &= (0 == mapram_color_bus_select_);
    r += indent_string + "  " + std::string("mapram_type") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_type_) ) + "\n";
    all_zeros &= (0 == mapram_type_);
    r += indent_string + "  " + std::string("mapram_logical_table") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_logical_table_) ) + "\n";
    all_zeros &= (0 == mapram_logical_table_);
    r += indent_string + "  " + std::string("mapram_vpn_members") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_vpn_members_) ) + "\n";
    all_zeros &= (0 == mapram_vpn_members_);
    r += indent_string + "  " + std::string("mapram_vpn") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_vpn_) ) + "\n";
    all_zeros &= (0 == mapram_vpn_);
    r += indent_string + "  " + std::string("mapram_parity_generate") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_parity_generate_) ) + "\n";
    all_zeros &= (0 == mapram_parity_generate_);
    r += indent_string + "  " + std::string("mapram_ecc_generate") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_ecc_generate_) ) + "\n";
    all_zeros &= (0 == mapram_ecc_generate_);
    r += indent_string + "  " + std::string("mapram_parity_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_parity_check_) ) + "\n";
    all_zeros &= (0 == mapram_parity_check_);
    r += indent_string + "  " + std::string("mapram_ecc_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_ecc_check_) ) + "\n";
    all_zeros &= (0 == mapram_ecc_check_);
    r += indent_string + "  " + std::string("mapram_ingress") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_ingress_) ) + "\n";
    all_zeros &= (0 == mapram_ingress_);
    r += indent_string + "  " + std::string("mapram_egress") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_egress_) ) + "\n";
    all_zeros &= (0 == mapram_egress_);
    r += indent_string + "  " + std::string("mapram_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_enable_) ) + "\n";
    all_zeros &= (0 == mapram_enable_);
    r += indent_string + "  " + std::string("mapram_color_write_bus_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_color_write_bus_select_) ) + "\n";
    all_zeros &= (0 == mapram_color_write_bus_select_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MapramConfigMutable") + ":\n";
    r += indent_string + "  " + std::string("idletime_disable_notification") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idletime_disable_notification_) ) + "\n";
    all_zeros &= (0 == idletime_disable_notification_);
    r += indent_string + "  " + std::string("two_way_idletime_notification") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(two_way_idletime_notification_) ) + "\n";
    all_zeros &= (0 == two_way_idletime_notification_);
    r += indent_string + "  " + std::string("per_flow_idletime") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(per_flow_idletime_) ) + "\n";
    all_zeros &= (0 == per_flow_idletime_);
    r += indent_string + "  " + std::string("idletime_bitwidth") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idletime_bitwidth_) ) + "\n";
    all_zeros &= (0 == idletime_bitwidth_);
    r += indent_string + "  " + std::string("mapram_color_bus_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_color_bus_select_) ) + "\n";
    all_zeros &= (0 == mapram_color_bus_select_);
    r += indent_string + "  " + std::string("mapram_type") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_type_) ) + "\n";
    all_zeros &= (0 == mapram_type_);
    r += indent_string + "  " + std::string("mapram_logical_table") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_logical_table_) ) + "\n";
    all_zeros &= (0 == mapram_logical_table_);
    r += indent_string + "  " + std::string("mapram_vpn_members") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_vpn_members_) ) + "\n";
    all_zeros &= (0 == mapram_vpn_members_);
    r += indent_string + "  " + std::string("mapram_vpn") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_vpn_) ) + "\n";
    all_zeros &= (0 == mapram_vpn_);
    r += indent_string + "  " + std::string("mapram_parity_generate") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_parity_generate_) ) + "\n";
    all_zeros &= (0 == mapram_parity_generate_);
    r += indent_string + "  " + std::string("mapram_ecc_generate") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_ecc_generate_) ) + "\n";
    all_zeros &= (0 == mapram_ecc_generate_);
    r += indent_string + "  " + std::string("mapram_parity_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_parity_check_) ) + "\n";
    all_zeros &= (0 == mapram_parity_check_);
    r += indent_string + "  " + std::string("mapram_ecc_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_ecc_check_) ) + "\n";
    all_zeros &= (0 == mapram_ecc_check_);
    r += indent_string + "  " + std::string("mapram_ingress") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_ingress_) ) + "\n";
    all_zeros &= (0 == mapram_ingress_);
    r += indent_string + "  " + std::string("mapram_egress") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_egress_) ) + "\n";
    all_zeros &= (0 == mapram_egress_);
    r += indent_string + "  " + std::string("mapram_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_enable_) ) + "\n";
    all_zeros &= (0 == mapram_enable_);
    r += indent_string + "  " + std::string("mapram_color_write_bus_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mapram_color_write_bus_select_) ) + "\n";
    all_zeros &= (0 == mapram_color_write_bus_select_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t idletime_disable_notification_;
  uint8_t two_way_idletime_notification_;
  uint8_t per_flow_idletime_;
  uint8_t idletime_bitwidth_;
  uint8_t mapram_color_bus_select_;
  uint8_t mapram_type_;
  uint8_t mapram_logical_table_;
  uint8_t mapram_vpn_members_;
  uint8_t mapram_vpn_;
  uint8_t mapram_parity_generate_;
  uint8_t mapram_ecc_generate_;
  uint8_t mapram_parity_check_;
  uint8_t mapram_ecc_check_;
  uint8_t mapram_ingress_;
  uint8_t mapram_egress_;
  uint8_t mapram_enable_;
  uint8_t mapram_color_write_bus_select_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_map_and_alu_row_addrmap, int index_mapram_config
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to rams
    offset += 0x10000; // to get to map_alu
    assert(index_mau_map_and_alu_row_addrmap < 8);
    offset += index_mau_map_and_alu_row_addrmap * 0x400; // mau_map_and_alu_row_addrmap[]
    offset += 0x200; // to get to adrmux
    offset += 0x140; // to get to mapram_config
    assert(index_mapram_config < 6);
    offset += index_mapram_config * 0x4; // mapram_config[]
    return offset;
  }

};

















  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_MAPRAM_CONFIG_MUTABLE_H__
