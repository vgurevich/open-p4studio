/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_MATCH_INPUT_XBAR_ADDRMAP_H__
#define __REGISTER_INCLUDES_MAU_MATCH_INPUT_XBAR_ADDRMAP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "match_input_xbar_32b_ctl.h"
#include "match_input_xbar_816b_ctl.h"
#include "mau_match_input_xbar_ternary_match_enable.h"
#include "tcam_byte_swizzle_xbar_addrmap.h"

namespace jbay {
  namespace register_classes {

class MauMatchInputXbarAddrmap : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauMatchInputXbarAddrmap(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap), 16384, false, write_callback, read_callback, std::string("MauMatchInputXbarAddrmap")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap))
    {
    }
  MauMatchInputXbarAddrmap(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MauMatchInputXbarAddrmap")
    {
    }
public:

























  MatchInputXbar_816bCtl &match_input_xbar_816b_ctl(int j1,int j0) { return match_input_xbar_816b_ctl_[j1][j0]; }










  MauMatchInputXbarTernaryMatchEnable &mau_match_input_xbar_ternary_match_enable(int j0) { return mau_match_input_xbar_ternary_match_enable_[j0]; }






















  MatchInputXbar_32bCtl &match_input_xbar_32b_ctl(int j1,int j0) { return match_input_xbar_32b_ctl_[j1][j0]; }





  TcamByteSwizzleXbarAddrmap &tswizzle() { return tswizzle_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x1000) {
      offset -= 0x0;
      int i1 = offset / 0x400;
      offset  -= i1 * 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      match_input_xbar_816b_ctl_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2000 && offset < 0x2008) {
      offset -= 0x2000;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_match_input_xbar_ternary_match_enable_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3000 && offset < 0x4000) {
      offset -= 0x3000;
      int i1 = offset / 0x400;
      offset  -= i1 * 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      match_input_xbar_32b_ctl_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2080 && offset < 0x2100) {
      offset -= 0x2080;
      if (read_callback_) read_callback_();
      tswizzle_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x1000) {
      offset -= 0x0;
      int i1 = offset / 0x400;
      offset  -= i1 * 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      match_input_xbar_816b_ctl_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2000 && offset < 0x2008) {
      offset -= 0x2000;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_match_input_xbar_ternary_match_enable_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3000 && offset < 0x4000) {
      offset -= 0x3000;
      int i1 = offset / 0x400;
      offset  -= i1 * 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      match_input_xbar_32b_ctl_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2080 && offset < 0x2100) {
      offset -= 0x2080;
      tswizzle_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : match_input_xbar_816b_ctl_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_match_input_xbar_ternary_match_enable_) {
      f0.reset();
    }
    for (auto &f0 : match_input_xbar_32b_ctl_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    tswizzle_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x1000) {
      offset -= 0x0;
      int i1 = offset / 0x400;
      offset  -= i1 * 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += match_input_xbar_816b_ctl_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2000 && offset < 0x2008) {
      offset -= 0x2000;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_match_input_xbar_ternary_match_enable_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3000 && offset < 0x4000) {
      offset -= 0x3000;
      int i1 = offset / 0x400;
      offset  -= i1 * 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += match_input_xbar_32b_ctl_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2080 && offset < 0x2100) {
      offset -= 0x2080;
      r += tswizzle_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a1=0;a1<4;++a1) {
      for (uint32_t a0=0;a0<256;++a0) {
        r += match_input_xbar_816b_ctl_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += mau_match_input_xbar_ternary_match_enable_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a1=0;a1<4;++a1) {
      for (uint32_t a0=0;a0<256;++a0) {
        r += match_input_xbar_32b_ctl_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    r += tswizzle_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< std::array< MatchInputXbar_816bCtl, 196 >, 4 > match_input_xbar_816b_ctl_;
  std::array< MauMatchInputXbarTernaryMatchEnable, 2 > mau_match_input_xbar_ternary_match_enable_;
  std::array< std::array< MatchInputXbar_32bCtl, 196 >, 4 > match_input_xbar_32b_ctl_;
  TcamByteSwizzleXbarAddrmap tswizzle_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x30000; // to get to xbar_hash
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_MAU_MATCH_INPUT_XBAR_ADDRMAP_H__
