/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_UNIT_RAM_ADDRMAP_MUTABLE_H__
#define __REGISTER_INCLUDES_MAU_UNIT_RAM_ADDRMAP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "match_bytemask_mutable.h"
#include "match_mask_mutable.h"
#include "match_next_table_bitpos_mutable.h"
#include "match_nibble_s0q1_enable_mutable.h"
#include "match_nibble_s1q0_enable_mutable.h"
#include "match_ram_vpn_mutable.h"
#include "unit_ram_ctl_mutable.h"
#include "unit_ram_ecc_mutable.h"
#include "unit_ram_mbe_errlog_mutable.h"
#include "unit_ram_sbe_errlog_mutable.h"

namespace jbay {
  namespace register_classes {

class MauUnitRamAddrmapMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauUnitRamAddrmapMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_unit_ram_row_addrmap, int index_mau_unit_ram_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_unit_ram_row_addrmap, index_mau_unit_ram_addrmap), 128, true, write_callback, read_callback, std::string("MauUnitRamAddrmapMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_unit_ram_row_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_unit_ram_addrmap))
    {
    }
  MauUnitRamAddrmapMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MauUnitRamAddrmapMutable")
    {
    }
public:










  MatchMaskMutable &match_mask(int j0) { return match_mask_[j0]; }











  UnitRamCtlMutable &unit_ram_ctl() { return unit_ram_ctl_; }









  MatchRamVpnMutable &match_ram_vpn() { return match_ram_vpn_; }









  MatchNibbleS0q1EnableMutable &match_nibble_s0q1_enable() { return match_nibble_s0q1_enable_; }









  MatchNibbleS1q0EnableMutable &match_nibble_s1q0_enable() { return match_nibble_s1q0_enable_; }






















  MatchNextTableBitposMutable &match_next_table_bitpos() { return match_next_table_bitpos_; }





  UnitRamEccMutable &unit_ram_ecc() { return unit_ram_ecc_; }





  UnitRamSbeErrlogMutable &unit_ram_sbe_errlog() { return unit_ram_sbe_errlog_; }





  UnitRamMbeErrlogMutable &unit_ram_mbe_errlog() { return unit_ram_mbe_errlog_; }
















  MatchBytemaskMutable &match_bytemask(int j0) { return match_bytemask_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x10) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      match_mask_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      unit_ram_ctl_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      match_ram_vpn_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      match_nibble_s0q1_enable_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      match_nibble_s1q0_enable_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      match_next_table_bitpos_.read( offset, data );
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      if (read_callback_) read_callback_();
      unit_ram_ecc_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      unit_ram_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      if (read_callback_) read_callback_();
      unit_ram_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x74) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      match_bytemask_[ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x10) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      match_mask_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      unit_ram_ctl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      match_ram_vpn_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      match_nibble_s0q1_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      match_nibble_s1q0_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      match_next_table_bitpos_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      unit_ram_ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      unit_ram_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      unit_ram_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x74) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      match_bytemask_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : match_mask_) {
      f0.reset();
    }
    unit_ram_ctl_.reset();
    match_ram_vpn_.reset();
    match_nibble_s0q1_enable_.reset();
    match_nibble_s1q0_enable_.reset();
    match_next_table_bitpos_.reset();
    unit_ram_ecc_.reset();
    unit_ram_sbe_errlog_.reset();
    unit_ram_mbe_errlog_.reset();
    for (auto &f0 : match_bytemask_) {
      f0.reset();
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x10) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += match_mask_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += unit_ram_ctl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += match_ram_vpn_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += match_nibble_s0q1_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += match_nibble_s1q0_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      r += match_next_table_bitpos_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      r += unit_ram_ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      r += unit_ram_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      r += unit_ram_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x74) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += match_bytemask_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<4;++a0) {
      r += match_mask_[a0].to_string(print_zeros,indent_string) ;
    }
    r += unit_ram_ctl_.to_string(print_zeros,indent_string) ;
    r += match_ram_vpn_.to_string(print_zeros,indent_string) ;
    r += match_nibble_s0q1_enable_.to_string(print_zeros,indent_string) ;
    r += match_nibble_s1q0_enable_.to_string(print_zeros,indent_string) ;
    r += match_next_table_bitpos_.to_string(print_zeros,indent_string) ;
    r += unit_ram_ecc_.to_string(print_zeros,indent_string) ;
    r += unit_ram_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += unit_ram_mbe_errlog_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<5;++a0) {
      r += match_bytemask_[a0].to_string(print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< MatchMaskMutable, 4 > match_mask_;
  UnitRamCtlMutable unit_ram_ctl_;
  MatchRamVpnMutable match_ram_vpn_;
  MatchNibbleS0q1EnableMutable match_nibble_s0q1_enable_;
  MatchNibbleS1q0EnableMutable match_nibble_s1q0_enable_;
  MatchNextTableBitposMutable match_next_table_bitpos_;
  UnitRamEccMutable unit_ram_ecc_;
  UnitRamSbeErrlogMutable unit_ram_sbe_errlog_;
  UnitRamMbeErrlogMutable unit_ram_mbe_errlog_;
  std::array< MatchBytemaskMutable, 5 > match_bytemask_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_unit_ram_row_addrmap, int index_mau_unit_ram_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to rams
    offset += 0x8000; // to get to row
    assert(index_mau_unit_ram_row_addrmap < 8);
    offset += index_mau_unit_ram_row_addrmap * 0x1000; // mau_unit_ram_row_addrmap[]
    assert(index_mau_unit_ram_addrmap < 12);
    offset += index_mau_unit_ram_addrmap * 0x80; // mau_unit_ram_addrmap[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_MAU_UNIT_RAM_ADDRMAP_MUTABLE_H__
