/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_UNIT_RAM_ROW_ADDRMAP_H__
#define __REGISTER_INCLUDES_MAU_UNIT_RAM_ROW_ADDRMAP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "actiondata_error_uram_ctl.h"
#include "emm_ecc_error_uram_ctl.h"
#include "exactmatch_row_vh_xbar_byteswizzle_ctl.h"
#include "intr_enable0_mau_unit_ram_row.h"
#include "intr_enable1_mau_unit_ram_row.h"
#include "intr_freeze_enable_mau_unit_ram_row.h"
#include "intr_inject_mau_unit_ram_row.h"
#include "intr_status_mau_unit_ram_row.h"
#include "mau_action_output_hv_xbar_addrmap.h"
#include "mau_exactmatch_row_adr_vh_xbar_addrmap.h"
#include "mau_exactmatch_row_vh_xbar_addrmap.h"
#include "mau_gateway_table_addrmap.h"
#include "mau_stash_addrmap.h"
#include "mau_unit_ram_addrmap.h"
#include "tind_ecc_error_uram_ctl.h"

namespace jbay {
  namespace register_classes {

class MauUnitRamRowAddrmap : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauUnitRamRowAddrmap(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_unit_ram_row_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_unit_ram_row_addrmap), 4096, false, write_callback, read_callback, std::string("MauUnitRamRowAddrmap")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_unit_ram_row_addrmap))
    {
    }
  MauUnitRamRowAddrmap(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MauUnitRamRowAddrmap")
    {
    }
public:
















  ExactmatchRowVhXbarByteswizzleCtl &exactmatch_row_vh_xbar_byteswizzle_ctl(int j2,int j1,int j0) { return exactmatch_row_vh_xbar_byteswizzle_ctl_[j2][j1][j0]; }





  IntrFreezeEnableMauUnitRamRow &intr_freeze_enable_mau_unit_ram_row() { return intr_freeze_enable_mau_unit_ram_row_; }








  TindEccErrorUramCtl &tind_ecc_error_uram_ctl(int j0) { return tind_ecc_error_uram_ctl_[j0]; }








  EmmEccErrorUramCtl &emm_ecc_error_uram_ctl(int j0) { return emm_ecc_error_uram_ctl_[j0]; }








  ActiondataErrorUramCtl &actiondata_error_uram_ctl(int j0) { return actiondata_error_uram_ctl_[j0]; }






  IntrStatusMauUnitRamRow &intr_status_mau_unit_ram_row() { return intr_status_mau_unit_ram_row_; }






  IntrEnable0MauUnitRamRow &intr_enable0_mau_unit_ram_row() { return intr_enable0_mau_unit_ram_row_; }






  IntrEnable1MauUnitRamRow &intr_enable1_mau_unit_ram_row() { return intr_enable1_mau_unit_ram_row_; }







  IntrInjectMauUnitRamRow &intr_inject_mau_unit_ram_row() { return intr_inject_mau_unit_ram_row_; }







  MauUnitRamAddrmap &ram(int j0) { return ram_[j0]; }





  MauExactmatchRowAdrVhXbarAddrmap &vh_adr_xbar() { return vh_adr_xbar_; }





  MauStashAddrmap &stash() { return stash_; }







  MauGatewayTableAddrmap &gateway_table(int j0) { return gateway_table_[j0]; }







  MauExactmatchRowVhXbarAddrmap &vh_xbar(int j0) { return vh_xbar_[j0]; }





  MauActionOutputHvXbarAddrmap &action_hv_xbar() { return action_hv_xbar_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x800 && offset < 0xc00) {
      offset -= 0x800;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      exactmatch_row_vh_xbar_byteswizzle_ctl_[ i2 ][ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0xf10 && offset < 0xf14) {
      offset -= 0xf10;
      if (read_callback_) read_callback_();
      intr_freeze_enable_mau_unit_ram_row_.read( offset, data );
    }
    else if (offset >= 0xf18 && offset < 0xf20) {
      offset -= 0xf18;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tind_ecc_error_uram_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xf20 && offset < 0xf28) {
      offset -= 0xf20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      emm_ecc_error_uram_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xf28 && offset < 0xf30) {
      offset -= 0xf28;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      actiondata_error_uram_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xf30 && offset < 0xf34) {
      offset -= 0xf30;
      if (read_callback_) read_callback_();
      intr_status_mau_unit_ram_row_.read( offset, data );
    }
    else if (offset >= 0xf34 && offset < 0xf38) {
      offset -= 0xf34;
      if (read_callback_) read_callback_();
      intr_enable0_mau_unit_ram_row_.read( offset, data );
    }
    else if (offset >= 0xf38 && offset < 0xf3c) {
      offset -= 0xf38;
      if (read_callback_) read_callback_();
      intr_enable1_mau_unit_ram_row_.read( offset, data );
    }
    else if (offset >= 0xf3c && offset < 0xf40) {
      offset -= 0xf3c;
      if (read_callback_) read_callback_();
      intr_inject_mau_unit_ram_row_.read( offset, data );
    }
    else if (offset < 0x600) {
      offset -= 0x0;
      int i0 = offset / 0x80;
      offset  -= i0 * 0x80;
      if (read_callback_) read_callback_();
      ram_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xc00 && offset < 0xd00) {
      offset -= 0xc00;
      if (read_callback_) read_callback_();
      vh_adr_xbar_.read( offset, data );
    }
    else if (offset >= 0xd00 && offset < 0xe00) {
      offset -= 0xd00;
      if (read_callback_) read_callback_();
      stash_.read( offset, data );
    }
    else if (offset >= 0xe00 && offset < 0xf00) {
      offset -= 0xe00;
      int i0 = offset / 0x80;
      offset  -= i0 * 0x80;
      if (read_callback_) read_callback_();
      gateway_table_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xf00 && offset < 0xf10) {
      offset -= 0xf00;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      vh_xbar_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xf80 && offset < 0x1000) {
      offset -= 0xf80;
      if (read_callback_) read_callback_();
      action_hv_xbar_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x800 && offset < 0xc00) {
      offset -= 0x800;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      exactmatch_row_vh_xbar_byteswizzle_ctl_[ i2 ][ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf10 && offset < 0xf14) {
      offset -= 0xf10;
      intr_freeze_enable_mau_unit_ram_row_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf18 && offset < 0xf20) {
      offset -= 0xf18;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tind_ecc_error_uram_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf20 && offset < 0xf28) {
      offset -= 0xf20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      emm_ecc_error_uram_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf28 && offset < 0xf30) {
      offset -= 0xf28;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      actiondata_error_uram_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf30 && offset < 0xf34) {
      offset -= 0xf30;
      intr_status_mau_unit_ram_row_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf34 && offset < 0xf38) {
      offset -= 0xf34;
      intr_enable0_mau_unit_ram_row_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf38 && offset < 0xf3c) {
      offset -= 0xf38;
      intr_enable1_mau_unit_ram_row_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf3c && offset < 0xf40) {
      offset -= 0xf3c;
      intr_inject_mau_unit_ram_row_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset < 0x600) {
      offset -= 0x0;
      int i0 = offset / 0x80;
      offset  -= i0 * 0x80;
      ram_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc00 && offset < 0xd00) {
      offset -= 0xc00;
      vh_adr_xbar_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd00 && offset < 0xe00) {
      offset -= 0xd00;
      stash_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe00 && offset < 0xf00) {
      offset -= 0xe00;
      int i0 = offset / 0x80;
      offset  -= i0 * 0x80;
      gateway_table_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf00 && offset < 0xf10) {
      offset -= 0xf00;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      vh_xbar_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf80 && offset < 0x1000) {
      offset -= 0xf80;
      action_hv_xbar_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : exactmatch_row_vh_xbar_byteswizzle_ctl_) {
      for (auto &f1 : f0) {
        for (auto &f2 : f1) {
          f2.reset();
        }
      }
    }
    intr_freeze_enable_mau_unit_ram_row_.reset();
    for (auto &f0 : tind_ecc_error_uram_ctl_) {
      f0.reset();
    }
    for (auto &f0 : emm_ecc_error_uram_ctl_) {
      f0.reset();
    }
    for (auto &f0 : actiondata_error_uram_ctl_) {
      f0.reset();
    }
    intr_status_mau_unit_ram_row_.reset();
    intr_enable0_mau_unit_ram_row_.reset();
    intr_enable1_mau_unit_ram_row_.reset();
    intr_inject_mau_unit_ram_row_.reset();
    for (auto &f0 : ram_) {
      f0.reset();
    }
    vh_adr_xbar_.reset();
    stash_.reset();
    for (auto &f0 : gateway_table_) {
      f0.reset();
    }
    for (auto &f0 : vh_xbar_) {
      f0.reset();
    }
    action_hv_xbar_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x800 && offset < 0xc00) {
      offset -= 0x800;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += exactmatch_row_vh_xbar_byteswizzle_ctl_[ i2 ][ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf10 && offset < 0xf14) {
      offset -= 0xf10;
      r += intr_freeze_enable_mau_unit_ram_row_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf18 && offset < 0xf20) {
      offset -= 0xf18;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tind_ecc_error_uram_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf20 && offset < 0xf28) {
      offset -= 0xf20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += emm_ecc_error_uram_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf28 && offset < 0xf30) {
      offset -= 0xf28;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += actiondata_error_uram_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf30 && offset < 0xf34) {
      offset -= 0xf30;
      r += intr_status_mau_unit_ram_row_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf34 && offset < 0xf38) {
      offset -= 0xf34;
      r += intr_enable0_mau_unit_ram_row_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf38 && offset < 0xf3c) {
      offset -= 0xf38;
      r += intr_enable1_mau_unit_ram_row_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf3c && offset < 0xf40) {
      offset -= 0xf3c;
      r += intr_inject_mau_unit_ram_row_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset < 0x600) {
      offset -= 0x0;
      int i0 = offset / 0x80;
      offset  -= i0 * 0x80;
      r += ram_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc00 && offset < 0xd00) {
      offset -= 0xc00;
      r += vh_adr_xbar_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd00 && offset < 0xe00) {
      offset -= 0xd00;
      r += stash_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe00 && offset < 0xf00) {
      offset -= 0xe00;
      int i0 = offset / 0x80;
      offset  -= i0 * 0x80;
      r += gateway_table_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf00 && offset < 0xf10) {
      offset -= 0xf00;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += vh_xbar_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf80 && offset < 0x1000) {
      offset -= 0xf80;
      r += action_hv_xbar_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a2=0;a2<2;++a2) {
      for (uint32_t a1=0;a1<16;++a1) {
        for (uint32_t a0=0;a0<8;++a0) {
          r += exactmatch_row_vh_xbar_byteswizzle_ctl_[a2][a1][a0].to_string(print_zeros,indent_string) ;
        }
      }
    }
    r += intr_freeze_enable_mau_unit_ram_row_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<2;++a0) {
      r += tind_ecc_error_uram_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += emm_ecc_error_uram_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += actiondata_error_uram_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    r += intr_status_mau_unit_ram_row_.to_string(print_zeros,indent_string) ;
    r += intr_enable0_mau_unit_ram_row_.to_string(print_zeros,indent_string) ;
    r += intr_enable1_mau_unit_ram_row_.to_string(print_zeros,indent_string) ;
    r += intr_inject_mau_unit_ram_row_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<12;++a0) {
      r += ram_[a0].to_string(print_zeros,indent_string) ;
    }
    r += vh_adr_xbar_.to_string(print_zeros,indent_string) ;
    r += stash_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<2;++a0) {
      r += gateway_table_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += vh_xbar_[a0].to_string(print_zeros,indent_string) ;
    }
    r += action_hv_xbar_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< std::array< std::array< ExactmatchRowVhXbarByteswizzleCtl, 8 >, 16 >, 2 > exactmatch_row_vh_xbar_byteswizzle_ctl_;
  IntrFreezeEnableMauUnitRamRow intr_freeze_enable_mau_unit_ram_row_;
  std::array< TindEccErrorUramCtl, 2 > tind_ecc_error_uram_ctl_;
  std::array< EmmEccErrorUramCtl, 2 > emm_ecc_error_uram_ctl_;
  std::array< ActiondataErrorUramCtl, 2 > actiondata_error_uram_ctl_;
  IntrStatusMauUnitRamRow intr_status_mau_unit_ram_row_;
  IntrEnable0MauUnitRamRow intr_enable0_mau_unit_ram_row_;
  IntrEnable1MauUnitRamRow intr_enable1_mau_unit_ram_row_;
  IntrInjectMauUnitRamRow intr_inject_mau_unit_ram_row_;
  std::array< MauUnitRamAddrmap, 12 > ram_;
  MauExactmatchRowAdrVhXbarAddrmap vh_adr_xbar_;
  MauStashAddrmap stash_;
  std::array< MauGatewayTableAddrmap, 2 > gateway_table_;
  std::array< MauExactmatchRowVhXbarAddrmap, 2 > vh_xbar_;
  MauActionOutputHvXbarAddrmap action_hv_xbar_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_unit_ram_row_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to rams
    offset += 0x8000; // to get to row
    assert(index_mau_unit_ram_row_addrmap < 8);
    offset += index_mau_unit_ram_row_addrmap * 0x1000; // mau_unit_ram_row_addrmap[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_MAU_UNIT_RAM_ROW_ADDRMAP_H__
