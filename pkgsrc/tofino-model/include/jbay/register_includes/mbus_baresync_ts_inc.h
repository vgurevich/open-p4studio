/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MBUS_BARESYNC_TS_INC_H__
#define __REGISTER_INCLUDES_MBUS_BARESYNC_TS_INC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class MbusBaresyncTsInc : public model_core::RegisterBlock<RegisterCallback> {
public:
  MbusBaresyncTsInc(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 12, false, write_callback, read_callback, std::string("MbusBaresyncTsInc"))
    {
    }
  MbusBaresyncTsInc(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MbusBaresyncTsInc")
    {
    }
public:






  uint32_t &fr_num() { return fr_num_; }






  uint32_t &fr_den() { return fr_den_; }






  uint32_t &inc_ns() { return inc_ns_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (fr_num_ & 0xfffffff);
      *data |= ((fr_den_ & 0xf) << 28);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = ((fr_den_ & 0xffffff0) >> 4);
      *data |= ((inc_ns_ & 0xff) << 24);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = ((inc_ns_ & 0xfff00) >> 8);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      fr_num_ = (data & 0xfffffff);
      fr_den_ = (((data >> 28) & 0xf) | (fr_den_ & 0xffffff0));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      fr_den_ = (((data << 4) & 0xffffff0) | (fr_den_ & 0xf));
      inc_ns_ = (((data >> 24) & 0xff) | (inc_ns_ & 0xfff00));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      inc_ns_ = (((data << 8) & 0xfff00) | (inc_ns_ & 0xff));
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    fr_num_ = 0x0;
    fr_den_ = 0x0;
    inc_ns_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MbusBaresyncTsInc") + ":\n";
    r += indent_string + "  " + std::string("fr_num") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fr_num_) ) + "\n";
    all_zeros &= (0 == fr_num_);
    r += indent_string + "  " + std::string("fr_den") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fr_den_) ) + "\n";
    all_zeros &= (0 == fr_den_);
    r += indent_string + "  " + std::string("inc_ns") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(inc_ns_) ) + "\n";
    all_zeros &= (0 == inc_ns_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MbusBaresyncTsInc") + ":\n";
    r += indent_string + "  " + std::string("fr_num") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fr_num_) ) + "\n";
    all_zeros &= (0 == fr_num_);
    r += indent_string + "  " + std::string("fr_den") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fr_den_) ) + "\n";
    all_zeros &= (0 == fr_den_);
    r += indent_string + "  " + std::string("inc_ns") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(inc_ns_) ) + "\n";
    all_zeros &= (0 == inc_ns_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint32_t fr_num_;
  uint32_t fr_den_;
  uint32_t inc_ns_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x180000; // to get to mbc
    offset += 0x30; // to get to baresync_ts_inc
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_MBUS_BARESYNC_TS_INC_H__
