/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MBUS_CTRL_MUTABLE_H__
#define __REGISTER_INCLUDES_MBUS_CTRL_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class MbusCtrlMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MbusCtrlMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, true, write_callback, read_callback, std::string("MbusCtrlMutable"))
    {
    }
  MbusCtrlMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MbusCtrlMutable")
    {
    }
public:





  uint8_t ecc_dec_dis() { return ecc_dec_dis_; }
  void ecc_dec_dis(const uint8_t &v) { ecc_dec_dis_=v; }





  uint8_t ts_en() { return ts_en_; }
  void ts_en(const uint8_t &v) { ts_en_=v; }






  uint8_t baresync_load_en() { return baresync_load_en_; }
  void baresync_load_en(const uint8_t &v) { baresync_load_en_=v; }





  uint8_t credit_reset() { return credit_reset_; }
  void credit_reset(const uint8_t &v) { credit_reset_=v; }





  uint8_t baresync_alt_sync_ts_incr_en() { return baresync_alt_sync_ts_incr_en_; }
  void baresync_alt_sync_ts_incr_en(const uint8_t &v) { baresync_alt_sync_ts_incr_en_=v; }





  uint8_t baresync_alt_sync_ts_cap_en() { return baresync_alt_sync_ts_cap_en_; }
  void baresync_alt_sync_ts_cap_en(const uint8_t &v) { baresync_alt_sync_ts_cap_en_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (ecc_dec_dis_ & 0x1);
    *data |= ((ts_en_ & 0x1) << 1);
    *data |= ((baresync_load_en_ & 0x1) << 2);
    *data |= ((credit_reset_ & 0x1) << 3);
    *data |= ((baresync_alt_sync_ts_incr_en_ & 0x1) << 4);
    *data |= ((baresync_alt_sync_ts_cap_en_ & 0x1) << 5);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    ecc_dec_dis_ = (data & 0x1);
    ts_en_ = ((data >> 1) & 0x1);
    baresync_load_en_ = ((data >> 2) & 0x1);
    credit_reset_ = ((data >> 3) & 0x1);
    baresync_alt_sync_ts_incr_en_ = ((data >> 4) & 0x1);
    baresync_alt_sync_ts_cap_en_ = ((data >> 5) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    ecc_dec_dis_ = 0x0;
    ts_en_ = 0x0;
    baresync_load_en_ = 0x0;
    credit_reset_ = 0x0;
    baresync_alt_sync_ts_incr_en_ = 0x0;
    baresync_alt_sync_ts_cap_en_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MbusCtrlMutable") + ":\n";
    r += indent_string + "  " + std::string("ecc_dec_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ecc_dec_dis_) ) + "\n";
    all_zeros &= (0 == ecc_dec_dis_);
    r += indent_string + "  " + std::string("ts_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ts_en_) ) + "\n";
    all_zeros &= (0 == ts_en_);
    r += indent_string + "  " + std::string("baresync_load_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(baresync_load_en_) ) + "\n";
    all_zeros &= (0 == baresync_load_en_);
    r += indent_string + "  " + std::string("credit_reset") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(credit_reset_) ) + "\n";
    all_zeros &= (0 == credit_reset_);
    r += indent_string + "  " + std::string("baresync_alt_sync_ts_incr_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(baresync_alt_sync_ts_incr_en_) ) + "\n";
    all_zeros &= (0 == baresync_alt_sync_ts_incr_en_);
    r += indent_string + "  " + std::string("baresync_alt_sync_ts_cap_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(baresync_alt_sync_ts_cap_en_) ) + "\n";
    all_zeros &= (0 == baresync_alt_sync_ts_cap_en_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MbusCtrlMutable") + ":\n";
    r += indent_string + "  " + std::string("ecc_dec_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ecc_dec_dis_) ) + "\n";
    all_zeros &= (0 == ecc_dec_dis_);
    r += indent_string + "  " + std::string("ts_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ts_en_) ) + "\n";
    all_zeros &= (0 == ts_en_);
    r += indent_string + "  " + std::string("baresync_load_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(baresync_load_en_) ) + "\n";
    all_zeros &= (0 == baresync_load_en_);
    r += indent_string + "  " + std::string("credit_reset") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(credit_reset_) ) + "\n";
    all_zeros &= (0 == credit_reset_);
    r += indent_string + "  " + std::string("baresync_alt_sync_ts_incr_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(baresync_alt_sync_ts_incr_en_) ) + "\n";
    all_zeros &= (0 == baresync_alt_sync_ts_incr_en_);
    r += indent_string + "  " + std::string("baresync_alt_sync_ts_cap_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(baresync_alt_sync_ts_cap_en_) ) + "\n";
    all_zeros &= (0 == baresync_alt_sync_ts_cap_en_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t ecc_dec_dis_;
  uint8_t ts_en_;
  uint8_t baresync_load_en_;
  uint8_t credit_reset_;
  uint8_t baresync_alt_sync_ts_incr_en_;
  uint8_t baresync_alt_sync_ts_cap_en_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x180000; // to get to mbc
    offset += 0x14; // to get to ctrl
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_MBUS_CTRL_MUTABLE_H__
