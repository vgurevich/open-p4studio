/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MBUS_RSPEC_H__
#define __REGISTER_INCLUDES_MBUS_RSPEC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "global_ts_ctrl_log.h"
#include "mbus_baresync_alt_cyc_ctrl.h"
#include "mbus_baresync_alt_cyc_gap_ctrl.h"
#include "mbus_baresync_alt_cyc_status.h"
#include "mbus_baresync_alt_ts_value.h"
#include "mbus_baresync_ts_inc.h"
#include "mbus_baresync_ts_inc_alt.h"
#include "mbus_baresync_ts_set_value.h"
#include "mbus_baresync_ts_value.h"
#include "mbus_controller_mbe_log.h"
#include "mbus_controller_sbe_log.h"
#include "mbus_ctrl.h"
#include "mbus_flush.h"
#include "mbus_freeze_en.h"
#include "mbus_global_ts_inc.h"
#include "mbus_global_ts_inc_value.h"
#include "mbus_global_ts_offset_value.h"
#include "mbus_global_ts_set.h"
#include "mbus_global_ts_value.h"
#include "mbus_host_creq_credit.h"
#include "mbus_host_slv_credit.h"
#include "mbus_int_en_0.h"
#include "mbus_int_en_1.h"
#include "mbus_int_inj.h"
#include "mbus_int_stat.h"
#include "mbus_link_down.h"
#include "mbus_mac_wb_multicast_vec.h"
#include "mbus_mac_0_creq_credit.h"
#include "mbus_mac_0_dma_log.h"
#include "mbus_mac_0_tx_dr_rd_err_log.h"
#include "mbus_mst_ctrl_log.h"
#include "mbus_parity_err_log.h"
#include "mbus_ts_capture.h"
#include "mbus_ts_timer.h"
#include "mbus_ts_4ns_capture.h"
#include "mbus_ts_4ns_inc_value.h"
#include "mbus_ts_4ns_set_value.h"
#include "mbus_ts_4ns_value.h"
#include "mbus_wb_creq_credit.h"
#include "mbus_wb_dma_log.h"
#include "mbus_wb_tx_dr_rd_err_log.h"

namespace jbay {
  namespace register_classes {

class MbusRspec : public model_core::RegisterBlock<RegisterCallback> {
public:
  MbusRspec(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 336, false, write_callback, read_callback, std::string("MbusRspec"))
    {
    }
  MbusRspec(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MbusRspec")
    {
    }
public:





  MbusCtrl &ctrl() { return ctrl_; }





  MbusFlush &flush() { return flush_; }





  MbusLinkDown &link_down() { return link_down_; }





  MbusBaresyncTsSetValue &baresync_ts_set_value() { return baresync_ts_set_value_; }





  MbusBaresyncTsInc &baresync_ts_inc() { return baresync_ts_inc_; }





  MbusGlobalTsSet &global_ts_set() { return global_ts_set_; }





  MbusGlobalTsInc &global_ts_inc() { return global_ts_inc_; }





  MbusGlobalTsIncValue &global_ts_inc_value() { return global_ts_inc_value_; }





  MbusGlobalTsOffsetValue &global_ts_offset_value() { return global_ts_offset_value_; }





  MbusTsTimer &ts_timer() { return ts_timer_; }





  MbusTsCapture &ts_capture() { return ts_capture_; }





  MbusGlobalTsValue &global_ts_value() { return global_ts_value_; }





  MbusBaresyncTsValue &baresync_ts_value() { return baresync_ts_value_; }





  MbusBaresyncAltTsValue &baresync_alt_ts_value() { return baresync_alt_ts_value_; }





  MbusIntStat &intr_stat() { return intr_stat_; }





  MbusIntEn_0 &intr_en_0() { return intr_en_0_; }





  MbusIntEn_1 &intr_en_1() { return intr_en_1_; }





  MbusFreezeEn &freeze_en() { return freeze_en_; }





  MbusIntInj &intr_inj() { return intr_inj_; }





  MbusMac_0TxDrRdErrLog &mac_0_tx_dr_rd_err_log() { return mac_0_tx_dr_rd_err_log_; }





  MbusWbTxDrRdErrLog &wb_tx_dr_rd_err_log() { return wb_tx_dr_rd_err_log_; }





  MbusControllerMbeLog &controller_mbe_log() { return controller_mbe_log_; }





  MbusControllerSbeLog &controller_sbe_log() { return controller_sbe_log_; }
















  MbusParityErrLog &parity_err_log(int j0) { return parity_err_log_[j0]; }





  MbusHostCreqCredit &host_creq_credit() { return host_creq_credit_; }





  MbusMac_0CreqCredit &mac_0_creq_credit() { return mac_0_creq_credit_; }





  MbusWbCreqCredit &wb_creq_credit() { return wb_creq_credit_; }





  MbusHostSlvCredit &host_slave_credit() { return host_slave_credit_; }





  MbusMac_0DmaLog &mac_0_dma_log() { return mac_0_dma_log_; }





  MbusWbDmaLog &wb_dma_log() { return wb_dma_log_; }





  MbusTs_4nsSetValue &ts_4ns_set_value() { return ts_4ns_set_value_; }





  MbusTs_4nsIncValue &ts_4ns_inc_value() { return ts_4ns_inc_value_; }





  MbusMacWbMulticastVec &mac_wb_multicast() { return mac_wb_multicast_; }





  MbusBaresyncTsIncAlt &baresync_ts_inc_alt() { return baresync_ts_inc_alt_; }





  MbusTs_4nsValue &ts_4ns_value() { return ts_4ns_value_; }





  MbusTs_4nsCapture &ts_4ns_capture() { return ts_4ns_capture_; }
  MbusBaresyncAltCycStatus &baresync_alt_cyc() { return baresync_alt_cyc_; }





  MbusBaresyncAltCycGapCtrl &baresync_ts_inc_alt_gap() { return baresync_ts_inc_alt_gap_; }





  MbusBaresyncAltCycCtrl &baresync_ts_inc_alt_cyc() { return baresync_ts_inc_alt_cyc_; }





  MbusMstCtrlLog &mst_ctrl_log() { return mst_ctrl_log_; }





  GlobalTsCtrlLog &global_ts_log() { return global_ts_log_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      ctrl_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      flush_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      link_down_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      baresync_ts_set_value_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x3c) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      baresync_ts_inc_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      global_ts_set_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      global_ts_inc_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      global_ts_inc_value_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      global_ts_offset_value_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      ts_timer_.read( offset, data );
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      if (read_callback_) read_callback_();
      ts_capture_.read( offset, data );
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      if (read_callback_) read_callback_();
      global_ts_value_.read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x78) {
      offset -= 0x70;
      if (read_callback_) read_callback_();
      baresync_ts_value_.read( offset, data );
    }
    else if (offset >= 0x78 && offset < 0x80) {
      offset -= 0x78;
      if (read_callback_) read_callback_();
      baresync_alt_ts_value_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      intr_stat_.read( offset, data );
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      if (read_callback_) read_callback_();
      intr_en_0_.read( offset, data );
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      if (read_callback_) read_callback_();
      intr_en_1_.read( offset, data );
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      if (read_callback_) read_callback_();
      freeze_en_.read( offset, data );
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      if (read_callback_) read_callback_();
      intr_inj_.read( offset, data );
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      if (read_callback_) read_callback_();
      mac_0_tx_dr_rd_err_log_.read( offset, data );
    }
    else if (offset >= 0x98 && offset < 0x9c) {
      offset -= 0x98;
      if (read_callback_) read_callback_();
      wb_tx_dr_rd_err_log_.read( offset, data );
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      if (read_callback_) read_callback_();
      controller_mbe_log_.read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      if (read_callback_) read_callback_();
      controller_sbe_log_.read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      parity_err_log_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xc8) {
      offset -= 0xc0;
      if (read_callback_) read_callback_();
      host_creq_credit_.read( offset, data );
    }
    else if (offset >= 0xc8 && offset < 0xd0) {
      offset -= 0xc8;
      if (read_callback_) read_callback_();
      mac_0_creq_credit_.read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0xfc) {
      offset -= 0xe0;
      if (read_callback_) read_callback_();
      wb_creq_credit_.read( offset, data );
    }
    else if (offset >= 0xfc && offset < 0x100) {
      offset -= 0xfc;
      if (read_callback_) read_callback_();
      host_slave_credit_.read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      mac_0_dma_log_.read( offset, data );
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      if (read_callback_) read_callback_();
      wb_dma_log_.read( offset, data );
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      if (read_callback_) read_callback_();
      ts_4ns_set_value_.read( offset, data );
    }
    else if (offset >= 0x10c && offset < 0x110) {
      offset -= 0x10c;
      if (read_callback_) read_callback_();
      ts_4ns_inc_value_.read( offset, data );
    }
    else if (offset >= 0x110 && offset < 0x118) {
      offset -= 0x110;
      if (read_callback_) read_callback_();
      mac_wb_multicast_.read( offset, data );
    }
    else if (offset >= 0x120 && offset < 0x12c) {
      offset -= 0x120;
      if (read_callback_) read_callback_();
      baresync_ts_inc_alt_.read( offset, data );
    }
    else if (offset >= 0x12c && offset < 0x130) {
      offset -= 0x12c;
      if (read_callback_) read_callback_();
      ts_4ns_value_.read( offset, data );
    }
    else if (offset >= 0x130 && offset < 0x134) {
      offset -= 0x130;
      if (read_callback_) read_callback_();
      ts_4ns_capture_.read( offset, data );
    }
    else if (offset >= 0x138 && offset < 0x140) {
      offset -= 0x138;
      if (read_callback_) read_callback_();
      baresync_alt_cyc_.read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      if (read_callback_) read_callback_();
      baresync_ts_inc_alt_gap_.read( offset, data );
    }
    else if (offset >= 0x144 && offset < 0x148) {
      offset -= 0x144;
      if (read_callback_) read_callback_();
      baresync_ts_inc_alt_cyc_.read( offset, data );
    }
    else if (offset >= 0x148 && offset < 0x14c) {
      offset -= 0x148;
      if (read_callback_) read_callback_();
      mst_ctrl_log_.read( offset, data );
    }
    else if (offset >= 0x14c && offset < 0x150) {
      offset -= 0x14c;
      if (read_callback_) read_callback_();
      global_ts_log_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      flush_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      link_down_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      baresync_ts_set_value_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x3c) {
      offset -= 0x30;
      baresync_ts_inc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      global_ts_set_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      global_ts_inc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      global_ts_inc_value_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      global_ts_offset_value_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      ts_timer_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      ts_capture_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      global_ts_value_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x78) {
      offset -= 0x70;
      baresync_ts_value_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x78 && offset < 0x80) {
      offset -= 0x78;
      baresync_alt_ts_value_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      intr_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      intr_en_0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      intr_en_1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      freeze_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      intr_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      mac_0_tx_dr_rd_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x98 && offset < 0x9c) {
      offset -= 0x98;
      wb_tx_dr_rd_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      controller_mbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      controller_sbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      parity_err_log_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xc8) {
      offset -= 0xc0;
      host_creq_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc8 && offset < 0xd0) {
      offset -= 0xc8;
      mac_0_creq_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0xfc) {
      offset -= 0xe0;
      wb_creq_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xfc && offset < 0x100) {
      offset -= 0xfc;
      host_slave_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      mac_0_dma_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      wb_dma_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      ts_4ns_set_value_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10c && offset < 0x110) {
      offset -= 0x10c;
      ts_4ns_inc_value_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x110 && offset < 0x118) {
      offset -= 0x110;
      mac_wb_multicast_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x120 && offset < 0x12c) {
      offset -= 0x120;
      baresync_ts_inc_alt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x12c && offset < 0x130) {
      offset -= 0x12c;
      ts_4ns_value_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x130 && offset < 0x134) {
      offset -= 0x130;
      ts_4ns_capture_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x138 && offset < 0x140) {
      offset -= 0x138;
      baresync_alt_cyc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      baresync_ts_inc_alt_gap_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x144 && offset < 0x148) {
      offset -= 0x144;
      baresync_ts_inc_alt_cyc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x148 && offset < 0x14c) {
      offset -= 0x148;
      mst_ctrl_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14c && offset < 0x150) {
      offset -= 0x14c;
      global_ts_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    ctrl_.reset();
    flush_.reset();
    link_down_.reset();
    baresync_ts_set_value_.reset();
    baresync_ts_inc_.reset();
    global_ts_set_.reset();
    global_ts_inc_.reset();
    global_ts_inc_value_.reset();
    global_ts_offset_value_.reset();
    ts_timer_.reset();
    ts_capture_.reset();
    global_ts_value_.reset();
    baresync_ts_value_.reset();
    baresync_alt_ts_value_.reset();
    intr_stat_.reset();
    intr_en_0_.reset();
    intr_en_1_.reset();
    freeze_en_.reset();
    intr_inj_.reset();
    mac_0_tx_dr_rd_err_log_.reset();
    wb_tx_dr_rd_err_log_.reset();
    controller_mbe_log_.reset();
    controller_sbe_log_.reset();
    for (auto &f0 : parity_err_log_) {
      f0.reset();
    }
    host_creq_credit_.reset();
    mac_0_creq_credit_.reset();
    wb_creq_credit_.reset();
    host_slave_credit_.reset();
    mac_0_dma_log_.reset();
    wb_dma_log_.reset();
    ts_4ns_set_value_.reset();
    ts_4ns_inc_value_.reset();
    mac_wb_multicast_.reset();
    baresync_ts_inc_alt_.reset();
    ts_4ns_value_.reset();
    ts_4ns_capture_.reset();
    baresync_alt_cyc_.reset();
    baresync_ts_inc_alt_gap_.reset();
    baresync_ts_inc_alt_cyc_.reset();
    mst_ctrl_log_.reset();
    global_ts_log_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += flush_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += link_down_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      r += baresync_ts_set_value_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x3c) {
      offset -= 0x30;
      r += baresync_ts_inc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      r += global_ts_set_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      r += global_ts_inc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      r += global_ts_inc_value_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      r += global_ts_offset_value_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      r += ts_timer_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      r += ts_capture_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      r += global_ts_value_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x78) {
      offset -= 0x70;
      r += baresync_ts_value_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x78 && offset < 0x80) {
      offset -= 0x78;
      r += baresync_alt_ts_value_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      r += intr_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      r += intr_en_0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      r += intr_en_1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      r += freeze_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      r += intr_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      r += mac_0_tx_dr_rd_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x98 && offset < 0x9c) {
      offset -= 0x98;
      r += wb_tx_dr_rd_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      r += controller_mbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      r += controller_sbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += parity_err_log_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xc8) {
      offset -= 0xc0;
      r += host_creq_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc8 && offset < 0xd0) {
      offset -= 0xc8;
      r += mac_0_creq_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0xfc) {
      offset -= 0xe0;
      r += wb_creq_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xfc && offset < 0x100) {
      offset -= 0xfc;
      r += host_slave_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      r += mac_0_dma_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      r += wb_dma_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      r += ts_4ns_set_value_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10c && offset < 0x110) {
      offset -= 0x10c;
      r += ts_4ns_inc_value_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x110 && offset < 0x118) {
      offset -= 0x110;
      r += mac_wb_multicast_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x120 && offset < 0x12c) {
      offset -= 0x120;
      r += baresync_ts_inc_alt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x12c && offset < 0x130) {
      offset -= 0x12c;
      r += ts_4ns_value_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x130 && offset < 0x134) {
      offset -= 0x130;
      r += ts_4ns_capture_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x138 && offset < 0x140) {
      offset -= 0x138;
      r += baresync_alt_cyc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      r += baresync_ts_inc_alt_gap_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x144 && offset < 0x148) {
      offset -= 0x144;
      r += baresync_ts_inc_alt_cyc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x148 && offset < 0x14c) {
      offset -= 0x148;
      r += mst_ctrl_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14c && offset < 0x150) {
      offset -= 0x14c;
      r += global_ts_log_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += ctrl_.to_string(print_zeros,indent_string) ;
    r += flush_.to_string(print_zeros,indent_string) ;
    r += link_down_.to_string(print_zeros,indent_string) ;
    r += baresync_ts_set_value_.to_string(print_zeros,indent_string) ;
    r += baresync_ts_inc_.to_string(print_zeros,indent_string) ;
    r += global_ts_set_.to_string(print_zeros,indent_string) ;
    r += global_ts_inc_.to_string(print_zeros,indent_string) ;
    r += global_ts_inc_value_.to_string(print_zeros,indent_string) ;
    r += global_ts_offset_value_.to_string(print_zeros,indent_string) ;
    r += ts_timer_.to_string(print_zeros,indent_string) ;
    r += ts_capture_.to_string(print_zeros,indent_string) ;
    r += global_ts_value_.to_string(print_zeros,indent_string) ;
    r += baresync_ts_value_.to_string(print_zeros,indent_string) ;
    r += baresync_alt_ts_value_.to_string(print_zeros,indent_string) ;
    r += intr_stat_.to_string(print_zeros,indent_string) ;
    r += intr_en_0_.to_string(print_zeros,indent_string) ;
    r += intr_en_1_.to_string(print_zeros,indent_string) ;
    r += freeze_en_.to_string(print_zeros,indent_string) ;
    r += intr_inj_.to_string(print_zeros,indent_string) ;
    r += mac_0_tx_dr_rd_err_log_.to_string(print_zeros,indent_string) ;
    r += wb_tx_dr_rd_err_log_.to_string(print_zeros,indent_string) ;
    r += controller_mbe_log_.to_string(print_zeros,indent_string) ;
    r += controller_sbe_log_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += parity_err_log_[a0].to_string(print_zeros,indent_string) ;
    }
    r += host_creq_credit_.to_string(print_zeros,indent_string) ;
    r += mac_0_creq_credit_.to_string(print_zeros,indent_string) ;
    r += wb_creq_credit_.to_string(print_zeros,indent_string) ;
    r += host_slave_credit_.to_string(print_zeros,indent_string) ;
    r += mac_0_dma_log_.to_string(print_zeros,indent_string) ;
    r += wb_dma_log_.to_string(print_zeros,indent_string) ;
    r += ts_4ns_set_value_.to_string(print_zeros,indent_string) ;
    r += ts_4ns_inc_value_.to_string(print_zeros,indent_string) ;
    r += mac_wb_multicast_.to_string(print_zeros,indent_string) ;
    r += baresync_ts_inc_alt_.to_string(print_zeros,indent_string) ;
    r += ts_4ns_value_.to_string(print_zeros,indent_string) ;
    r += ts_4ns_capture_.to_string(print_zeros,indent_string) ;
    r += baresync_alt_cyc_.to_string(print_zeros,indent_string) ;
    r += baresync_ts_inc_alt_gap_.to_string(print_zeros,indent_string) ;
    r += baresync_ts_inc_alt_cyc_.to_string(print_zeros,indent_string) ;
    r += mst_ctrl_log_.to_string(print_zeros,indent_string) ;
    r += global_ts_log_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  MbusCtrl ctrl_;
  MbusFlush flush_;
  MbusLinkDown link_down_;
  MbusBaresyncTsSetValue baresync_ts_set_value_;
  MbusBaresyncTsInc baresync_ts_inc_;
  MbusGlobalTsSet global_ts_set_;
  MbusGlobalTsInc global_ts_inc_;
  MbusGlobalTsIncValue global_ts_inc_value_;
  MbusGlobalTsOffsetValue global_ts_offset_value_;
  MbusTsTimer ts_timer_;
  MbusTsCapture ts_capture_;
  MbusGlobalTsValue global_ts_value_;
  MbusBaresyncTsValue baresync_ts_value_;
  MbusBaresyncAltTsValue baresync_alt_ts_value_;
  MbusIntStat intr_stat_;
  MbusIntEn_0 intr_en_0_;
  MbusIntEn_1 intr_en_1_;
  MbusFreezeEn freeze_en_;
  MbusIntInj intr_inj_;
  MbusMac_0TxDrRdErrLog mac_0_tx_dr_rd_err_log_;
  MbusWbTxDrRdErrLog wb_tx_dr_rd_err_log_;
  MbusControllerMbeLog controller_mbe_log_;
  MbusControllerSbeLog controller_sbe_log_;
  std::array< MbusParityErrLog, 4 > parity_err_log_;
  MbusHostCreqCredit host_creq_credit_;
  MbusMac_0CreqCredit mac_0_creq_credit_;
  MbusWbCreqCredit wb_creq_credit_;
  MbusHostSlvCredit host_slave_credit_;
  MbusMac_0DmaLog mac_0_dma_log_;
  MbusWbDmaLog wb_dma_log_;
  MbusTs_4nsSetValue ts_4ns_set_value_;
  MbusTs_4nsIncValue ts_4ns_inc_value_;
  MbusMacWbMulticastVec mac_wb_multicast_;
  MbusBaresyncTsIncAlt baresync_ts_inc_alt_;
  MbusTs_4nsValue ts_4ns_value_;
  MbusTs_4nsCapture ts_4ns_capture_;
  MbusBaresyncAltCycStatus baresync_alt_cyc_;
  MbusBaresyncAltCycGapCtrl baresync_ts_inc_alt_gap_;
  MbusBaresyncAltCycCtrl baresync_ts_inc_alt_cyc_;
  MbusMstCtrlLog mst_ctrl_log_;
  GlobalTsCtrlLog global_ts_log_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x180000; // to get to mbc
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_MBUS_RSPEC_H__
