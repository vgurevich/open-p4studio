/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MBUS_WB_CREQ_CREDIT_H__
#define __REGISTER_INCLUDES_MBUS_WB_CREQ_CREDIT_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class MbusWbCreqCredit : public model_core::RegisterBlock<RegisterCallback> {
public:
  MbusWbCreqCredit(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 28, false, write_callback, read_callback, std::string("MbusWbCreqCredit"))
    {
    }
  MbusWbCreqCredit(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MbusWbCreqCredit")
    {
    }
public:







  uint8_t &credit(int j0) { return credit_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (credit_[0] & 0x1f);
      *data |= ((credit_[1] & 0x1f) << 5);
      *data |= ((credit_[2] & 0x1f) << 10);
      *data |= ((credit_[3] & 0x1f) << 15);
      *data |= ((credit_[4] & 0x1f) << 20);
      *data |= ((credit_[5] & 0x1f) << 25);
      *data |= ((credit_[6] & 0x3) << 30);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = ((credit_[6] & 0x1c) >> 2);
      *data |= ((credit_[7] & 0x1f) << 3);
      *data |= ((credit_[8] & 0x1f) << 8);
      *data |= ((credit_[9] & 0x1f) << 13);
      *data |= ((credit_[10] & 0x1f) << 18);
      *data |= ((credit_[11] & 0x1f) << 23);
      *data |= ((credit_[12] & 0xf) << 28);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = ((credit_[12] & 0x10) >> 4);
      *data |= ((credit_[13] & 0x1f) << 1);
      *data |= ((credit_[14] & 0x1f) << 6);
      *data |= ((credit_[15] & 0x1f) << 11);
      *data |= ((credit_[16] & 0x1f) << 16);
      *data |= ((credit_[17] & 0x1f) << 21);
      *data |= ((credit_[18] & 0x1f) << 26);
      *data |= ((credit_[19] & 0x1) << 31);
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = ((credit_[19] & 0x1e) >> 1);
      *data |= ((credit_[20] & 0x1f) << 4);
      *data |= ((credit_[21] & 0x1f) << 9);
      *data |= ((credit_[22] & 0x1f) << 14);
      *data |= ((credit_[23] & 0x1f) << 19);
      *data |= ((credit_[24] & 0x1f) << 24);
      *data |= ((credit_[25] & 0x7) << 29);
    }
    else if (offset >= 0x10 && offset < 0x14) {
      if (read_callback_) read_callback_();
      *data = ((credit_[25] & 0x18) >> 3);
      *data |= ((credit_[26] & 0x1f) << 2);
      *data |= ((credit_[27] & 0x1f) << 7);
      *data |= ((credit_[28] & 0x1f) << 12);
      *data |= ((credit_[29] & 0x1f) << 17);
      *data |= ((credit_[30] & 0x1f) << 22);
      *data |= ((credit_[31] & 0x1f) << 27);
    }
    else if (offset >= 0x14 && offset < 0x18) {
      if (read_callback_) read_callback_();
      *data = (credit_[32] & 0x1f);
      *data |= ((credit_[33] & 0x1f) << 5);
      *data |= ((credit_[34] & 0x1f) << 10);
      *data |= ((credit_[35] & 0x1f) << 15);
      *data |= ((credit_[36] & 0x1f) << 20);
      *data |= ((credit_[37] & 0x1f) << 25);
      *data |= ((credit_[38] & 0x3) << 30);
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      if (read_callback_) read_callback_();
      *data = ((credit_[38] & 0x1c) >> 2);
      *data |= ((credit_[39] & 0x1f) << 3);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      credit_[0] = (data & 0x1f);
      credit_[1] = ((data >> 5) & 0x1f);
      credit_[2] = ((data >> 10) & 0x1f);
      credit_[3] = ((data >> 15) & 0x1f);
      credit_[4] = ((data >> 20) & 0x1f);
      credit_[5] = ((data >> 25) & 0x1f);
      credit_[6] = (((data >> 30) & 0x3) | (credit_[6] & 0x1c));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      credit_[6] = (((data << 2) & 0x1c) | (credit_[6] & 0x3));
      credit_[7] = ((data >> 3) & 0x1f);
      credit_[8] = ((data >> 8) & 0x1f);
      credit_[9] = ((data >> 13) & 0x1f);
      credit_[10] = ((data >> 18) & 0x1f);
      credit_[11] = ((data >> 23) & 0x1f);
      credit_[12] = (((data >> 28) & 0xf) | (credit_[12] & 0x10));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      credit_[12] = (((data << 4) & 0x10) | (credit_[12] & 0xf));
      credit_[13] = ((data >> 1) & 0x1f);
      credit_[14] = ((data >> 6) & 0x1f);
      credit_[15] = ((data >> 11) & 0x1f);
      credit_[16] = ((data >> 16) & 0x1f);
      credit_[17] = ((data >> 21) & 0x1f);
      credit_[18] = ((data >> 26) & 0x1f);
      credit_[19] = (((data >> 31) & 0x1) | (credit_[19] & 0x1e));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      credit_[19] = (((data << 1) & 0x1e) | (credit_[19] & 0x1));
      credit_[20] = ((data >> 4) & 0x1f);
      credit_[21] = ((data >> 9) & 0x1f);
      credit_[22] = ((data >> 14) & 0x1f);
      credit_[23] = ((data >> 19) & 0x1f);
      credit_[24] = ((data >> 24) & 0x1f);
      credit_[25] = (((data >> 29) & 0x7) | (credit_[25] & 0x18));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      credit_[25] = (((data << 3) & 0x18) | (credit_[25] & 0x7));
      credit_[26] = ((data >> 2) & 0x1f);
      credit_[27] = ((data >> 7) & 0x1f);
      credit_[28] = ((data >> 12) & 0x1f);
      credit_[29] = ((data >> 17) & 0x1f);
      credit_[30] = ((data >> 22) & 0x1f);
      credit_[31] = ((data >> 27) & 0x1f);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      credit_[32] = (data & 0x1f);
      credit_[33] = ((data >> 5) & 0x1f);
      credit_[34] = ((data >> 10) & 0x1f);
      credit_[35] = ((data >> 15) & 0x1f);
      credit_[36] = ((data >> 20) & 0x1f);
      credit_[37] = ((data >> 25) & 0x1f);
      credit_[38] = (((data >> 30) & 0x3) | (credit_[38] & 0x1c));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      credit_[38] = (((data << 2) & 0x1c) | (credit_[38] & 0x3));
      credit_[39] = ((data >> 3) & 0x1f);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    credit_[0] = 0x0;
    credit_[1] = 0x0;
    credit_[2] = 0x0;
    credit_[3] = 0x0;
    credit_[4] = 0x0;
    credit_[5] = 0x0;
    credit_[6] = 0x0;
    credit_[7] = 0x0;
    credit_[8] = 0x0;
    credit_[9] = 0x0;
    credit_[10] = 0x0;
    credit_[11] = 0x0;
    credit_[12] = 0x0;
    credit_[13] = 0x0;
    credit_[14] = 0x0;
    credit_[15] = 0x0;
    credit_[16] = 0x0;
    credit_[17] = 0x0;
    credit_[18] = 0x0;
    credit_[19] = 0x0;
    credit_[20] = 0x0;
    credit_[21] = 0x0;
    credit_[22] = 0x0;
    credit_[23] = 0x0;
    credit_[24] = 0x0;
    credit_[25] = 0x0;
    credit_[26] = 0x0;
    credit_[27] = 0x0;
    credit_[28] = 0x0;
    credit_[29] = 0x0;
    credit_[30] = 0x0;
    credit_[31] = 0x0;
    credit_[32] = 0x0;
    credit_[33] = 0x0;
    credit_[34] = 0x0;
    credit_[35] = 0x0;
    credit_[36] = 0x0;
    credit_[37] = 0x0;
    credit_[38] = 0x0;
    credit_[39] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MbusWbCreqCredit") + ":\n";
    for (uint32_t f=0;f<40;++f) {
      r += indent_string + "  " + std::string("credit") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(credit_[f]) ) + "\n";
      all_zeros &= (0 == credit_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MbusWbCreqCredit") + ":\n";
    for (uint32_t f=0;f<40;++f) {
      r += indent_string + "  " + std::string("credit") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(credit_[f]) ) + "\n";
      all_zeros &= (0 == credit_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 40 > credit_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x180000; // to get to mbc
    offset += 0xe0; // to get to wb_creq_credit
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_MBUS_WB_CREQ_CREDIT_H__
