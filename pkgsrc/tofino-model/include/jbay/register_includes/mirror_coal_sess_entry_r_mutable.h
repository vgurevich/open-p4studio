/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MIRROR_COAL_SESS_ENTRY_R_MUTABLE_H__
#define __REGISTER_INCLUDES_MIRROR_COAL_SESS_ENTRY_R_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class MirrorCoalSessEntryRMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MirrorCoalSessEntryRMutable(
      int chipNumber, int index_pipe_addrmap, int index_mirror_slice_mem, int index_mirror_coal_sess_entry_r, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mirror_slice_mem, index_mirror_coal_sess_entry_r), 4, true, write_callback, read_callback, std::string("MirrorCoalSessEntryRMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mirror_slice_mem) + "," + boost::lexical_cast<std::string>(index_mirror_coal_sess_entry_r))
    {
    }
  MirrorCoalSessEntryRMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MirrorCoalSessEntryRMutable")
    {
    }
public:





  uint8_t coal_hdr() { return coal_hdr_; }
  void coal_hdr(const uint8_t &v) { coal_hdr_=v; }





  uint8_t len_cfg() { return len_cfg_; }
  void len_cfg(const uint8_t &v) { len_cfg_=v; }






  uint8_t coal_mode() { return coal_mode_; }
  void coal_mode(const uint8_t &v) { coal_mode_=v; }







  uint8_t sample_pkt_len() { return sample_pkt_len_; }
  void sample_pkt_len(const uint8_t &v) { sample_pkt_len_=v; }





  uint8_t pri() { return pri_; }
  void pri(const uint8_t &v) { pri_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (coal_hdr_ & 0x3);
    *data |= ((len_cfg_ & 0x1) << 2);
    *data |= ((coal_mode_ & 0x1) << 3);
    *data |= (sample_pkt_len_ << 4);
    *data |= ((pri_ & 0x1) << 12);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    coal_hdr_ = (data & 0x3);
    len_cfg_ = ((data >> 2) & 0x1);
    coal_mode_ = ((data >> 3) & 0x1);
    sample_pkt_len_ = (data >> 4);
    pri_ = ((data >> 12) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    coal_hdr_ = 0;
    len_cfg_ = 0;
    coal_mode_ = 0;
    sample_pkt_len_ = 0;
    pri_ = 0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirrorCoalSessEntryRMutable") + ":\n";
    r += indent_string + "  " + std::string("coal_hdr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(coal_hdr_) ) + "\n";
    all_zeros &= (0 == coal_hdr_);
    r += indent_string + "  " + std::string("len_cfg") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(len_cfg_) ) + "\n";
    all_zeros &= (0 == len_cfg_);
    r += indent_string + "  " + std::string("coal_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(coal_mode_) ) + "\n";
    all_zeros &= (0 == coal_mode_);
    r += indent_string + "  " + std::string("sample_pkt_len") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(sample_pkt_len_) ) + "\n";
    all_zeros &= (0 == sample_pkt_len_);
    r += indent_string + "  " + std::string("pri") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pri_) ) + "\n";
    all_zeros &= (0 == pri_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirrorCoalSessEntryRMutable") + ":\n";
    r += indent_string + "  " + std::string("coal_hdr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(coal_hdr_) ) + "\n";
    all_zeros &= (0 == coal_hdr_);
    r += indent_string + "  " + std::string("len_cfg") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(len_cfg_) ) + "\n";
    all_zeros &= (0 == len_cfg_);
    r += indent_string + "  " + std::string("coal_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(coal_mode_) ) + "\n";
    all_zeros &= (0 == coal_mode_);
    r += indent_string + "  " + std::string("sample_pkt_len") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(sample_pkt_len_) ) + "\n";
    all_zeros &= (0 == sample_pkt_len_);
    r += indent_string + "  " + std::string("pri") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pri_) ) + "\n";
    all_zeros &= (0 == pri_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t coal_hdr_;
  uint8_t len_cfg_;
  uint8_t coal_mode_;
  uint8_t sample_pkt_len_;
  uint8_t pri_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mirror_slice_mem, int index_mirror_coal_sess_entry_r
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x80000; // to get to mirreg
    offset += 0x10000; // to get to slice_mem
    assert(index_mirror_slice_mem < 4);
    offset += index_mirror_slice_mem * 0x800; // mirror_slice_mem[]
    offset += 0x400; // to get to coal_sess_cfg
    assert(index_mirror_coal_sess_entry_r < 16);
    offset += index_mirror_coal_sess_entry_r * 0x4; // mirror_coal_sess_entry_r[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_MIRROR_COAL_SESS_ENTRY_R_MUTABLE_H__
