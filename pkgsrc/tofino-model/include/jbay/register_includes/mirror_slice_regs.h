/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MIRROR_SLICE_REGS_H__
#define __REGISTER_INCLUDES_MIRROR_SLICE_REGS_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "mirr_dbuff_cnt.h"
#include "mirr_dbuff_th.h"
#include "mirr_dbuff_wm.h"
#include "mirr_qdepth.h"
#include "mirror_cnt48_inc.h"
#include "mirror_slice_ctrl.h"
#include "mirror_slice_regs_data_mem_mbe_err_log.h"
#include "mirror_slice_regs_data_mem_sbe_err_log.h"
#include "mirror_slice_regs_intr.h"
#include "mirror_slice_regs_m_slice_ecc.h"
#include "mirror_slice_regs_meta_mem_mbe_err_log.h"
#include "mirror_slice_regs_meta_mem_sbe_err_log.h"
#include "mirror_slice_regs_session_mem_mbe_err_log.h"
#include "mirror_slice_regs_session_mem_sbe_err_log.h"

namespace jbay {
  namespace register_classes {

class MirrorSliceRegs : public model_core::RegisterBlock<RegisterCallback> {
public:
  MirrorSliceRegs(
      int chipNumber, int index_pipe_addrmap, int index_mirror_slice_regs, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mirror_slice_regs), 4096, false, write_callback, read_callback, std::string("MirrorSliceRegs")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mirror_slice_regs))
    {
    }
  MirrorSliceRegs(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MirrorSliceRegs")
    {
    }
public:





  MirrorSliceCtrl &slice_ctr() { return slice_ctr_; }







  MirrDbuffWm &dbuff_wm(int j0) { return dbuff_wm_[j0]; }







  MirrDbuffCnt &dbuff_cnt(int j0) { return dbuff_cnt_[j0]; }





  MirrDbuffTh &dbuff_th() { return dbuff_th_; }




  MirrQdepth &qdepth(int j0) { return qdepth_[j0]; }







  MirrorCnt48Inc &mirror_out_pkt_cnt(int j0) { return mirror_out_pkt_cnt_[j0]; }





  MirrorCnt48Inc &mirror_egress_in_pk_cnt() { return mirror_egress_in_pk_cnt_; }





  MirrorCnt48Inc &mirror_ingress_in_pk_cnt() { return mirror_ingress_in_pk_cnt_; }





  MirrorCnt48Inc &mirror_ingress_dbuf_drop_pk_cnt() { return mirror_ingress_dbuf_drop_pk_cnt_; }





  MirrorCnt48Inc &mirror_egress_dbuf_drop_pk_cnt() { return mirror_egress_dbuf_drop_pk_cnt_; }








  MirrorSliceRegsMSliceEcc &m_slice_ecc() { return m_slice_ecc_; }






  MirrorSliceRegsSessionMemSbeErrLog &session_mem_sbe_err_log() { return session_mem_sbe_err_log_; }





  MirrorSliceRegsSessionMemMbeErrLog &session_mem_mbe_err_log() { return session_mem_mbe_err_log_; }





  MirrorSliceRegsDataMemSbeErrLog &data_mem_sbe_err_log() { return data_mem_sbe_err_log_; }





  MirrorSliceRegsDataMemMbeErrLog &data_mem_mbe_err_log() { return data_mem_mbe_err_log_; }





  MirrorSliceRegsMetaMemSbeErrLog &meta_mem_sbe_err_log() { return meta_mem_sbe_err_log_; }





  MirrorSliceRegsMetaMemMbeErrLog &meta_mem_mbe_err_log() { return meta_mem_mbe_err_log_; }
  MirrorSliceRegsIntr &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      slice_ctr_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      dbuff_wm_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x54) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      dbuff_cnt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      if (read_callback_) read_callback_();
      dbuff_th_.read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x1d8) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qdepth_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x228) {
      offset -= 0x200;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      mirror_out_pkt_cnt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x228 && offset < 0x230) {
      offset -= 0x228;
      if (read_callback_) read_callback_();
      mirror_egress_in_pk_cnt_.read( offset, data );
    }
    else if (offset >= 0x230 && offset < 0x238) {
      offset -= 0x230;
      if (read_callback_) read_callback_();
      mirror_ingress_in_pk_cnt_.read( offset, data );
    }
    else if (offset >= 0x238 && offset < 0x240) {
      offset -= 0x238;
      if (read_callback_) read_callback_();
      mirror_ingress_dbuf_drop_pk_cnt_.read( offset, data );
    }
    else if (offset >= 0x240 && offset < 0x248) {
      offset -= 0x240;
      if (read_callback_) read_callback_();
      mirror_egress_dbuf_drop_pk_cnt_.read( offset, data );
    }
    else if (offset >= 0x248 && offset < 0x24c) {
      offset -= 0x248;
      if (read_callback_) read_callback_();
      m_slice_ecc_.read( offset, data );
    }
    else if (offset >= 0x274 && offset < 0x278) {
      offset -= 0x274;
      if (read_callback_) read_callback_();
      session_mem_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x278 && offset < 0x27c) {
      offset -= 0x278;
      if (read_callback_) read_callback_();
      session_mem_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x27c && offset < 0x280) {
      offset -= 0x27c;
      if (read_callback_) read_callback_();
      data_mem_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x280 && offset < 0x284) {
      offset -= 0x280;
      if (read_callback_) read_callback_();
      data_mem_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x284 && offset < 0x288) {
      offset -= 0x284;
      if (read_callback_) read_callback_();
      meta_mem_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x288 && offset < 0x28c) {
      offset -= 0x288;
      if (read_callback_) read_callback_();
      meta_mem_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x260 && offset < 0x274) {
      offset -= 0x260;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      slice_ctr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      dbuff_wm_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x54) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      dbuff_cnt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      dbuff_th_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x1d8) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qdepth_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x228) {
      offset -= 0x200;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      mirror_out_pkt_cnt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x228 && offset < 0x230) {
      offset -= 0x228;
      mirror_egress_in_pk_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x230 && offset < 0x238) {
      offset -= 0x230;
      mirror_ingress_in_pk_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x238 && offset < 0x240) {
      offset -= 0x238;
      mirror_ingress_dbuf_drop_pk_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x240 && offset < 0x248) {
      offset -= 0x240;
      mirror_egress_dbuf_drop_pk_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x248 && offset < 0x24c) {
      offset -= 0x248;
      m_slice_ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x274 && offset < 0x278) {
      offset -= 0x274;
      session_mem_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x278 && offset < 0x27c) {
      offset -= 0x278;
      session_mem_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x27c && offset < 0x280) {
      offset -= 0x27c;
      data_mem_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x280 && offset < 0x284) {
      offset -= 0x280;
      data_mem_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x284 && offset < 0x288) {
      offset -= 0x284;
      meta_mem_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x288 && offset < 0x28c) {
      offset -= 0x288;
      meta_mem_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x260 && offset < 0x274) {
      offset -= 0x260;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    slice_ctr_.reset();
    for (auto &f0 : dbuff_wm_) {
      f0.reset();
    }
    for (auto &f0 : dbuff_cnt_) {
      f0.reset();
    }
    dbuff_th_.reset();
    for (auto &f0 : qdepth_) {
      f0.reset();
    }
    for (auto &f0 : mirror_out_pkt_cnt_) {
      f0.reset();
    }
    mirror_egress_in_pk_cnt_.reset();
    mirror_ingress_in_pk_cnt_.reset();
    mirror_ingress_dbuf_drop_pk_cnt_.reset();
    mirror_egress_dbuf_drop_pk_cnt_.reset();
    m_slice_ecc_.reset();
    session_mem_sbe_err_log_.reset();
    session_mem_mbe_err_log_.reset();
    data_mem_sbe_err_log_.reset();
    data_mem_mbe_err_log_.reset();
    meta_mem_sbe_err_log_.reset();
    meta_mem_mbe_err_log_.reset();
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += slice_ctr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += dbuff_wm_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x54) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += dbuff_cnt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      r += dbuff_th_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x1d8) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qdepth_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x228) {
      offset -= 0x200;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += mirror_out_pkt_cnt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x228 && offset < 0x230) {
      offset -= 0x228;
      r += mirror_egress_in_pk_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x230 && offset < 0x238) {
      offset -= 0x230;
      r += mirror_ingress_in_pk_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x238 && offset < 0x240) {
      offset -= 0x238;
      r += mirror_ingress_dbuf_drop_pk_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x240 && offset < 0x248) {
      offset -= 0x240;
      r += mirror_egress_dbuf_drop_pk_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x248 && offset < 0x24c) {
      offset -= 0x248;
      r += m_slice_ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x274 && offset < 0x278) {
      offset -= 0x274;
      r += session_mem_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x278 && offset < 0x27c) {
      offset -= 0x278;
      r += session_mem_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x27c && offset < 0x280) {
      offset -= 0x27c;
      r += data_mem_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x280 && offset < 0x284) {
      offset -= 0x280;
      r += data_mem_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x284 && offset < 0x288) {
      offset -= 0x284;
      r += meta_mem_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x288 && offset < 0x28c) {
      offset -= 0x288;
      r += meta_mem_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x260 && offset < 0x274) {
      offset -= 0x260;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += slice_ctr_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<5;++a0) {
      r += dbuff_wm_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<5;++a0) {
      r += dbuff_cnt_[a0].to_string(print_zeros,indent_string) ;
    }
    r += dbuff_th_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<54;++a0) {
      r += qdepth_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<5;++a0) {
      r += mirror_out_pkt_cnt_[a0].to_string(print_zeros,indent_string) ;
    }
    r += mirror_egress_in_pk_cnt_.to_string(print_zeros,indent_string) ;
    r += mirror_ingress_in_pk_cnt_.to_string(print_zeros,indent_string) ;
    r += mirror_ingress_dbuf_drop_pk_cnt_.to_string(print_zeros,indent_string) ;
    r += mirror_egress_dbuf_drop_pk_cnt_.to_string(print_zeros,indent_string) ;
    r += m_slice_ecc_.to_string(print_zeros,indent_string) ;
    r += session_mem_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += session_mem_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += data_mem_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += data_mem_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += meta_mem_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += meta_mem_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  MirrorSliceCtrl slice_ctr_;
  std::array< MirrDbuffWm, 5 > dbuff_wm_;
  std::array< MirrDbuffCnt, 5 > dbuff_cnt_;
  MirrDbuffTh dbuff_th_;
  std::array< MirrQdepth, 54 > qdepth_;
  std::array< MirrorCnt48Inc, 5 > mirror_out_pkt_cnt_;
  MirrorCnt48Inc mirror_egress_in_pk_cnt_;
  MirrorCnt48Inc mirror_ingress_in_pk_cnt_;
  MirrorCnt48Inc mirror_ingress_dbuf_drop_pk_cnt_;
  MirrorCnt48Inc mirror_egress_dbuf_drop_pk_cnt_;
  MirrorSliceRegsMSliceEcc m_slice_ecc_;
  MirrorSliceRegsSessionMemSbeErrLog session_mem_sbe_err_log_;
  MirrorSliceRegsSessionMemMbeErrLog session_mem_mbe_err_log_;
  MirrorSliceRegsDataMemSbeErrLog data_mem_sbe_err_log_;
  MirrorSliceRegsDataMemMbeErrLog data_mem_mbe_err_log_;
  MirrorSliceRegsMetaMemSbeErrLog meta_mem_sbe_err_log_;
  MirrorSliceRegsMetaMemMbeErrLog meta_mem_mbe_err_log_;
  MirrorSliceRegsIntr intr_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mirror_slice_regs
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x80000; // to get to mirreg
    offset += 0x20000; // to get to slice_regs
    assert(index_mirror_slice_regs < 4);
    offset += index_mirror_slice_regs * 0x1000; // mirror_slice_regs[]
    return offset;
  }

};





  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_MIRROR_SLICE_REGS_H__
