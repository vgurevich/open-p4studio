/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MISC_REGS_TV80_INTR_STAT_H__
#define __REGISTER_INCLUDES_MISC_REGS_TV80_INTR_STAT_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class MiscRegsTv80IntrStat : public model_core::RegisterBlock<RegisterCallback> {
public:
  MiscRegsTv80IntrStat(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, false, write_callback, read_callback, std::string("MiscRegsTv80IntrStat"))
    {
    }
  MiscRegsTv80IntrStat(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MiscRegsTv80IntrStat")
    {
    }
public:






  uint8_t &intr_0() { return intr_0_; }






  uint8_t &intr_1() { return intr_1_; }






  uint8_t &intr_2() { return intr_2_; }






  uint8_t &intr_3() { return intr_3_; }






  uint8_t &intr_4() { return intr_4_; }






  uint8_t &intr_5() { return intr_5_; }






  uint8_t &intr_6() { return intr_6_; }






  uint8_t &intr_7() { return intr_7_; }






  uint8_t &nmi() { return nmi_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (intr_0_ & 0x1);
    *data |= ((intr_1_ & 0x1) << 1);
    *data |= ((intr_2_ & 0x1) << 2);
    *data |= ((intr_3_ & 0x1) << 3);
    *data |= ((intr_4_ & 0x1) << 4);
    *data |= ((intr_5_ & 0x1) << 5);
    *data |= ((intr_6_ & 0x1) << 6);
    *data |= ((intr_7_ & 0x1) << 7);
    *data |= ((nmi_ & 0x1) << 8);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    intr_0_ &= ~(data & 0x1);
    intr_1_ &= ~((data >> 1) & 0x1);
    intr_2_ &= ~((data >> 2) & 0x1);
    intr_3_ &= ~((data >> 3) & 0x1);
    intr_4_ &= ~((data >> 4) & 0x1);
    intr_5_ &= ~((data >> 5) & 0x1);
    intr_6_ &= ~((data >> 6) & 0x1);
    intr_7_ &= ~((data >> 7) & 0x1);
    nmi_ &= ~((data >> 8) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    intr_0_ = 0x0;
    intr_1_ = 0x0;
    intr_2_ = 0x0;
    intr_3_ = 0x0;
    intr_4_ = 0x0;
    intr_5_ = 0x0;
    intr_6_ = 0x0;
    intr_7_ = 0x0;
    nmi_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MiscRegsTv80IntrStat") + ":\n";
    r += indent_string + "  " + std::string("intr_0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_0_) ) + "\n";
    all_zeros &= (0 == intr_0_);
    r += indent_string + "  " + std::string("intr_1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_1_) ) + "\n";
    all_zeros &= (0 == intr_1_);
    r += indent_string + "  " + std::string("intr_2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_2_) ) + "\n";
    all_zeros &= (0 == intr_2_);
    r += indent_string + "  " + std::string("intr_3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_3_) ) + "\n";
    all_zeros &= (0 == intr_3_);
    r += indent_string + "  " + std::string("intr_4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_4_) ) + "\n";
    all_zeros &= (0 == intr_4_);
    r += indent_string + "  " + std::string("intr_5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_5_) ) + "\n";
    all_zeros &= (0 == intr_5_);
    r += indent_string + "  " + std::string("intr_6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_6_) ) + "\n";
    all_zeros &= (0 == intr_6_);
    r += indent_string + "  " + std::string("intr_7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_7_) ) + "\n";
    all_zeros &= (0 == intr_7_);
    r += indent_string + "  " + std::string("nmi") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(nmi_) ) + "\n";
    all_zeros &= (0 == nmi_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MiscRegsTv80IntrStat") + ":\n";
    r += indent_string + "  " + std::string("intr_0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_0_) ) + "\n";
    all_zeros &= (0 == intr_0_);
    r += indent_string + "  " + std::string("intr_1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_1_) ) + "\n";
    all_zeros &= (0 == intr_1_);
    r += indent_string + "  " + std::string("intr_2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_2_) ) + "\n";
    all_zeros &= (0 == intr_2_);
    r += indent_string + "  " + std::string("intr_3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_3_) ) + "\n";
    all_zeros &= (0 == intr_3_);
    r += indent_string + "  " + std::string("intr_4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_4_) ) + "\n";
    all_zeros &= (0 == intr_4_);
    r += indent_string + "  " + std::string("intr_5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_5_) ) + "\n";
    all_zeros &= (0 == intr_5_);
    r += indent_string + "  " + std::string("intr_6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_6_) ) + "\n";
    all_zeros &= (0 == intr_6_);
    r += indent_string + "  " + std::string("intr_7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_7_) ) + "\n";
    all_zeros &= (0 == intr_7_);
    r += indent_string + "  " + std::string("nmi") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(nmi_) ) + "\n";
    all_zeros &= (0 == nmi_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t intr_0_;
  uint8_t intr_1_;
  uint8_t intr_2_;
  uint8_t intr_3_;
  uint8_t intr_4_;
  uint8_t intr_5_;
  uint8_t intr_6_;
  uint8_t intr_7_;
  uint8_t nmi_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x80000; // to get to misc_regs
    offset += 0x240; // to get to tv80_intr_stat
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_MISC_REGS_TV80_INTR_STAT_H__
