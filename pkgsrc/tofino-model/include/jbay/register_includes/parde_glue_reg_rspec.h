/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PARDE_GLUE_REG_RSPEC_H__
#define __REGISTER_INCLUDES_PARDE_GLUE_REG_RSPEC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "parde_glue_reg_rspec_csr_ring0intr.h"
#include "parde_glue_reg_rspec_csr_ring1intr.h"
#include "parde_glue_reg_rspec_csr_ring2intr.h"
#include "parde_glue_reg_rspec_csr_ring_fifo_err.h"
#include "parde_glue_reg_rspec_csr_ring_full_thresh.h"
#include "parde_glue_reg_rspec_debug_ctrl.h"
#include "parde_glue_reg_rspec_intr_period.h"
#include "parde_glue_reg_rspec_parde_intr.h"

namespace jbay {
  namespace register_classes {

class PardeGlueRegRspec : public model_core::RegisterBlock<RegisterCallback> {
public:
  PardeGlueRegRspec(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 256, false, write_callback, read_callback, std::string("PardeGlueRegRspec")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PardeGlueRegRspec(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PardeGlueRegRspec")
    {
    }
public:





  PardeGlueRegRspecDebugCtrl &debug_ctrl() { return debug_ctrl_; }





  PardeGlueRegRspecCsrRingFullThresh &csr_ring_full_thresh() { return csr_ring_full_thresh_; }




  PardeGlueRegRspecCsrRingFifoErr &csr_ring_fifo_err() { return csr_ring_fifo_err_; }





  PardeGlueRegRspecIntrPeriod &intr_period() { return intr_period_; }
  PardeGlueRegRspecCsrRing0intr &csr_ring0intr() { return csr_ring0intr_; }
  PardeGlueRegRspecCsrRing1intr &csr_ring1intr() { return csr_ring1intr_; }
  PardeGlueRegRspecCsrRing2intr &csr_ring2intr() { return csr_ring2intr_; }
  PardeGlueRegRspecPardeIntr &parde_intr() { return parde_intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      debug_ctrl_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      csr_ring_full_thresh_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      csr_ring_fifo_err_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      intr_period_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      csr_ring0intr_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x20) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      csr_ring1intr_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      csr_ring2intr_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x30) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      parde_intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      debug_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      csr_ring_full_thresh_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      csr_ring_fifo_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      intr_period_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      csr_ring0intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x20) {
      offset -= 0x18;
      csr_ring1intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      csr_ring2intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x30) {
      offset -= 0x28;
      parde_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    debug_ctrl_.reset();
    csr_ring_full_thresh_.reset();
    csr_ring_fifo_err_.reset();
    intr_period_.reset();
    csr_ring0intr_.reset();
    csr_ring1intr_.reset();
    csr_ring2intr_.reset();
    parde_intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += debug_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += csr_ring_full_thresh_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += csr_ring_fifo_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += intr_period_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      r += csr_ring0intr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x20) {
      offset -= 0x18;
      r += csr_ring1intr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      r += csr_ring2intr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x30) {
      offset -= 0x28;
      r += parde_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += debug_ctrl_.to_string(print_zeros,indent_string) ;
    r += csr_ring_full_thresh_.to_string(print_zeros,indent_string) ;
    r += csr_ring_fifo_err_.to_string(print_zeros,indent_string) ;
    r += intr_period_.to_string(print_zeros,indent_string) ;
    r += csr_ring0intr_.to_string(print_zeros,indent_string) ;
    r += csr_ring1intr_.to_string(print_zeros,indent_string) ;
    r += csr_ring2intr_.to_string(print_zeros,indent_string) ;
    r += parde_intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  PardeGlueRegRspecDebugCtrl debug_ctrl_;
  PardeGlueRegRspecCsrRingFullThresh csr_ring_full_thresh_;
  PardeGlueRegRspecCsrRingFifoErr csr_ring_fifo_err_;
  PardeGlueRegRspecIntrPeriod intr_period_;
  PardeGlueRegRspecCsrRing0intr csr_ring0intr_;
  PardeGlueRegRspecCsrRing1intr csr_ring1intr_;
  PardeGlueRegRspecCsrRing2intr csr_ring2intr_;
  PardeGlueRegRspecPardeIntr parde_intr_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x1e000; // to get to pgluereg
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_PARDE_GLUE_REG_RSPEC_H__
