/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PBUS_DMA_LOG_H__
#define __REGISTER_INCLUDES_PBUS_DMA_LOG_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class PbusDmaLog : public model_core::RegisterBlock<RegisterCallback> {
public:
  PbusDmaLog(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 28, false, write_callback, read_callback, std::string("PbusDmaLog"))
    {
    }
  PbusDmaLog(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PbusDmaLog")
    {
    }
public:







  uint8_t &il_read_statemachine(int j0) { return il_read_statemachine_[j0]; }







  uint8_t &il_instr_statemachine(int j0) { return il_instr_statemachine_[j0]; }







  uint8_t &il_write_statemachine(int j0) { return il_write_statemachine_[j0]; }







  uint16_t &il_iqueue_data_credit(int j0) { return il_iqueue_data_credit_[j0]; }







  uint16_t &il_oqueue_data_credit(int j0) { return il_oqueue_data_credit_[j0]; }







  uint16_t &il_oqueue_resp_credit(int j0) { return il_oqueue_resp_credit_[j0]; }







  uint8_t &il_req_mem_credit(int j0) { return il_req_mem_credit_[j0]; }





  uint8_t &wb_read_statemachine() { return wb_read_statemachine_; }





  uint8_t &wb_write_statemachine() { return wb_write_statemachine_; }





  uint16_t &wb_data_credit() { return wb_data_credit_; }





  uint8_t &rb_read_statemachine() { return rb_read_statemachine_; }





  uint8_t &rb_write_statemachine() { return rb_write_statemachine_; }





  uint16_t &rb_data_credit() { return rb_data_credit_; }





  uint16_t &rb_resp_credit() { return rb_resp_credit_; }





  uint8_t &rb_req_mem_credit() { return rb_req_mem_credit_; }





  uint8_t &stat_write_statemachine() { return stat_write_statemachine_; }





  uint8_t &stat_req_mem_credit() { return stat_req_mem_credit_; }





  uint8_t &stat_write_data_count() { return stat_write_data_count_; }





  uint8_t &idle_write_statemachine() { return idle_write_statemachine_; }





  uint8_t &idle_req_mem_credit() { return idle_req_mem_credit_; }





  uint8_t &idle_write_data_count() { return idle_write_data_count_; }





  uint8_t &diag_statemachine() { return diag_statemachine_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (il_read_statemachine_[0] & 0x1);
      *data |= ((il_read_statemachine_[1] & 0x1) << 1);
      *data |= ((il_read_statemachine_[2] & 0x1) << 2);
      *data |= ((il_read_statemachine_[3] & 0x1) << 3);
      *data |= ((il_instr_statemachine_[0] & 0x7) << 4);
      *data |= ((il_instr_statemachine_[1] & 0x7) << 7);
      *data |= ((il_instr_statemachine_[2] & 0x7) << 10);
      *data |= ((il_instr_statemachine_[3] & 0x7) << 13);
      *data |= ((il_write_statemachine_[0] & 0x7) << 16);
      *data |= ((il_write_statemachine_[1] & 0x7) << 19);
      *data |= ((il_write_statemachine_[2] & 0x7) << 22);
      *data |= ((il_write_statemachine_[3] & 0x7) << 25);
      *data |= ((il_iqueue_data_credit_[0] & 0xf) << 28);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = ((il_iqueue_data_credit_[0] & 0x1f0) >> 4);
      *data |= ((il_iqueue_data_credit_[1] & 0x1ff) << 5);
      *data |= ((il_iqueue_data_credit_[2] & 0x1ff) << 14);
      *data |= ((il_iqueue_data_credit_[3] & 0x1ff) << 23);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = (il_oqueue_data_credit_[0] & 0x1ff);
      *data |= ((il_oqueue_data_credit_[1] & 0x1ff) << 9);
      *data |= ((il_oqueue_data_credit_[2] & 0x1ff) << 18);
      *data |= ((il_oqueue_data_credit_[3] & 0x1f) << 27);
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = ((il_oqueue_data_credit_[3] & 0x1e0) >> 5);
      *data |= ((il_oqueue_resp_credit_[0] & 0x1ff) << 4);
      *data |= ((il_oqueue_resp_credit_[1] & 0x1ff) << 13);
      *data |= ((il_oqueue_resp_credit_[2] & 0x1ff) << 22);
      *data |= ((il_oqueue_resp_credit_[3] & 0x1) << 31);
    }
    else if (offset >= 0x10 && offset < 0x14) {
      if (read_callback_) read_callback_();
      *data = ((il_oqueue_resp_credit_[3] & 0x1fe) >> 1);
      *data |= ((il_req_mem_credit_[0] & 0x7) << 8);
      *data |= ((il_req_mem_credit_[1] & 0x7) << 11);
      *data |= ((il_req_mem_credit_[2] & 0x7) << 14);
      *data |= ((il_req_mem_credit_[3] & 0x7) << 17);
      *data |= ((wb_read_statemachine_ & 0x1) << 20);
      *data |= ((wb_write_statemachine_ & 0x7) << 21);
      *data |= ((wb_data_credit_ & 0xff) << 24);
    }
    else if (offset >= 0x14 && offset < 0x18) {
      if (read_callback_) read_callback_();
      *data = ((wb_data_credit_ & 0x100) >> 8);
      *data |= ((rb_read_statemachine_ & 0x1) << 1);
      *data |= ((rb_write_statemachine_ & 0x7) << 2);
      *data |= ((rb_data_credit_ & 0x1ff) << 5);
      *data |= ((rb_resp_credit_ & 0x1ff) << 14);
      *data |= ((rb_req_mem_credit_ & 0x7) << 23);
      *data |= ((stat_write_statemachine_ & 0x7) << 26);
      *data |= ((stat_req_mem_credit_ & 0x7) << 29);
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      if (read_callback_) read_callback_();
      *data = (stat_write_data_count_ & 0x7f);
      *data |= ((idle_write_statemachine_ & 0x7) << 7);
      *data |= ((idle_req_mem_credit_ & 0x7) << 10);
      *data |= (idle_write_data_count_ << 13);
      *data |= ((diag_statemachine_ & 0xf) << 21);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      il_read_statemachine_[0] = (data & 0x1);
      il_read_statemachine_[1] = ((data >> 1) & 0x1);
      il_read_statemachine_[2] = ((data >> 2) & 0x1);
      il_read_statemachine_[3] = ((data >> 3) & 0x1);
      il_instr_statemachine_[0] = ((data >> 4) & 0x7);
      il_instr_statemachine_[1] = ((data >> 7) & 0x7);
      il_instr_statemachine_[2] = ((data >> 10) & 0x7);
      il_instr_statemachine_[3] = ((data >> 13) & 0x7);
      il_write_statemachine_[0] = ((data >> 16) & 0x7);
      il_write_statemachine_[1] = ((data >> 19) & 0x7);
      il_write_statemachine_[2] = ((data >> 22) & 0x7);
      il_write_statemachine_[3] = ((data >> 25) & 0x7);
      il_iqueue_data_credit_[0] = (((data >> 28) & 0xf) | (il_iqueue_data_credit_[0] & 0x1f0));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      il_iqueue_data_credit_[0] = (((data << 4) & 0x1f0) | (il_iqueue_data_credit_[0] & 0xf));
      il_iqueue_data_credit_[1] = ((data >> 5) & 0x1ff);
      il_iqueue_data_credit_[2] = ((data >> 14) & 0x1ff);
      il_iqueue_data_credit_[3] = ((data >> 23) & 0x1ff);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      il_oqueue_data_credit_[0] = (data & 0x1ff);
      il_oqueue_data_credit_[1] = ((data >> 9) & 0x1ff);
      il_oqueue_data_credit_[2] = ((data >> 18) & 0x1ff);
      il_oqueue_data_credit_[3] = (((data >> 27) & 0x1f) | (il_oqueue_data_credit_[3] & 0x1e0));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      il_oqueue_data_credit_[3] = (((data << 5) & 0x1e0) | (il_oqueue_data_credit_[3] & 0x1f));
      il_oqueue_resp_credit_[0] = ((data >> 4) & 0x1ff);
      il_oqueue_resp_credit_[1] = ((data >> 13) & 0x1ff);
      il_oqueue_resp_credit_[2] = ((data >> 22) & 0x1ff);
      il_oqueue_resp_credit_[3] = (((data >> 31) & 0x1) | (il_oqueue_resp_credit_[3] & 0x1fe));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      il_oqueue_resp_credit_[3] = (((data << 1) & 0x1fe) | (il_oqueue_resp_credit_[3] & 0x1));
      il_req_mem_credit_[0] = ((data >> 8) & 0x7);
      il_req_mem_credit_[1] = ((data >> 11) & 0x7);
      il_req_mem_credit_[2] = ((data >> 14) & 0x7);
      il_req_mem_credit_[3] = ((data >> 17) & 0x7);
      wb_read_statemachine_ = ((data >> 20) & 0x1);
      wb_write_statemachine_ = ((data >> 21) & 0x7);
      wb_data_credit_ = (((data >> 24) & 0xff) | (wb_data_credit_ & 0x100));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      wb_data_credit_ = (((data << 8) & 0x100) | (wb_data_credit_ & 0xff));
      rb_read_statemachine_ = ((data >> 1) & 0x1);
      rb_write_statemachine_ = ((data >> 2) & 0x7);
      rb_data_credit_ = ((data >> 5) & 0x1ff);
      rb_resp_credit_ = ((data >> 14) & 0x1ff);
      rb_req_mem_credit_ = ((data >> 23) & 0x7);
      stat_write_statemachine_ = ((data >> 26) & 0x7);
      stat_req_mem_credit_ = ((data >> 29) & 0x7);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      stat_write_data_count_ = (data & 0x7f);
      idle_write_statemachine_ = ((data >> 7) & 0x7);
      idle_req_mem_credit_ = ((data >> 10) & 0x7);
      idle_write_data_count_ = (data >> 13);
      diag_statemachine_ = ((data >> 21) & 0xf);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    il_read_statemachine_[0] = 0x0;
    il_read_statemachine_[1] = 0x0;
    il_read_statemachine_[2] = 0x0;
    il_read_statemachine_[3] = 0x0;
    il_instr_statemachine_[0] = 0x0;
    il_instr_statemachine_[1] = 0x0;
    il_instr_statemachine_[2] = 0x0;
    il_instr_statemachine_[3] = 0x0;
    il_write_statemachine_[0] = 0x0;
    il_write_statemachine_[1] = 0x0;
    il_write_statemachine_[2] = 0x0;
    il_write_statemachine_[3] = 0x0;
    il_iqueue_data_credit_[0] = 0x0;
    il_iqueue_data_credit_[1] = 0x0;
    il_iqueue_data_credit_[2] = 0x0;
    il_iqueue_data_credit_[3] = 0x0;
    il_oqueue_data_credit_[0] = 0x0;
    il_oqueue_data_credit_[1] = 0x0;
    il_oqueue_data_credit_[2] = 0x0;
    il_oqueue_data_credit_[3] = 0x0;
    il_oqueue_resp_credit_[0] = 0x0;
    il_oqueue_resp_credit_[1] = 0x0;
    il_oqueue_resp_credit_[2] = 0x0;
    il_oqueue_resp_credit_[3] = 0x0;
    il_req_mem_credit_[0] = 0x0;
    il_req_mem_credit_[1] = 0x0;
    il_req_mem_credit_[2] = 0x0;
    il_req_mem_credit_[3] = 0x0;
    wb_read_statemachine_ = 0x0;
    wb_write_statemachine_ = 0x0;
    wb_data_credit_ = 0x0;
    rb_read_statemachine_ = 0x0;
    rb_write_statemachine_ = 0x0;
    rb_data_credit_ = 0x0;
    rb_resp_credit_ = 0x0;
    rb_req_mem_credit_ = 0x0;
    stat_write_statemachine_ = 0x0;
    stat_req_mem_credit_ = 0x0;
    stat_write_data_count_ = 0x0;
    idle_write_statemachine_ = 0x0;
    idle_req_mem_credit_ = 0x0;
    idle_write_data_count_ = 0x0;
    diag_statemachine_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PbusDmaLog") + ":\n";
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("il_read_statemachine") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_read_statemachine_[f]) ) + "\n";
      all_zeros &= (0 == il_read_statemachine_[f]);
    }
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("il_instr_statemachine") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_instr_statemachine_[f]) ) + "\n";
      all_zeros &= (0 == il_instr_statemachine_[f]);
    }
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("il_write_statemachine") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_write_statemachine_[f]) ) + "\n";
      all_zeros &= (0 == il_write_statemachine_[f]);
    }
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("il_iqueue_data_credit") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_data_credit_[f]) ) + "\n";
      all_zeros &= (0 == il_iqueue_data_credit_[f]);
    }
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("il_oqueue_data_credit") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_data_credit_[f]) ) + "\n";
      all_zeros &= (0 == il_oqueue_data_credit_[f]);
    }
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("il_oqueue_resp_credit") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_resp_credit_[f]) ) + "\n";
      all_zeros &= (0 == il_oqueue_resp_credit_[f]);
    }
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("il_req_mem_credit") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_req_mem_credit_[f]) ) + "\n";
      all_zeros &= (0 == il_req_mem_credit_[f]);
    }
    r += indent_string + "  " + std::string("wb_read_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wb_read_statemachine_) ) + "\n";
    all_zeros &= (0 == wb_read_statemachine_);
    r += indent_string + "  " + std::string("wb_write_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wb_write_statemachine_) ) + "\n";
    all_zeros &= (0 == wb_write_statemachine_);
    r += indent_string + "  " + std::string("wb_data_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wb_data_credit_) ) + "\n";
    all_zeros &= (0 == wb_data_credit_);
    r += indent_string + "  " + std::string("rb_read_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_read_statemachine_) ) + "\n";
    all_zeros &= (0 == rb_read_statemachine_);
    r += indent_string + "  " + std::string("rb_write_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_write_statemachine_) ) + "\n";
    all_zeros &= (0 == rb_write_statemachine_);
    r += indent_string + "  " + std::string("rb_data_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_data_credit_) ) + "\n";
    all_zeros &= (0 == rb_data_credit_);
    r += indent_string + "  " + std::string("rb_resp_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_resp_credit_) ) + "\n";
    all_zeros &= (0 == rb_resp_credit_);
    r += indent_string + "  " + std::string("rb_req_mem_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_req_mem_credit_) ) + "\n";
    all_zeros &= (0 == rb_req_mem_credit_);
    r += indent_string + "  " + std::string("stat_write_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stat_write_statemachine_) ) + "\n";
    all_zeros &= (0 == stat_write_statemachine_);
    r += indent_string + "  " + std::string("stat_req_mem_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stat_req_mem_credit_) ) + "\n";
    all_zeros &= (0 == stat_req_mem_credit_);
    r += indent_string + "  " + std::string("stat_write_data_count") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stat_write_data_count_) ) + "\n";
    all_zeros &= (0 == stat_write_data_count_);
    r += indent_string + "  " + std::string("idle_write_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idle_write_statemachine_) ) + "\n";
    all_zeros &= (0 == idle_write_statemachine_);
    r += indent_string + "  " + std::string("idle_req_mem_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idle_req_mem_credit_) ) + "\n";
    all_zeros &= (0 == idle_req_mem_credit_);
    r += indent_string + "  " + std::string("idle_write_data_count") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idle_write_data_count_) ) + "\n";
    all_zeros &= (0 == idle_write_data_count_);
    r += indent_string + "  " + std::string("diag_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_statemachine_) ) + "\n";
    all_zeros &= (0 == diag_statemachine_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PbusDmaLog") + ":\n";
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("il_read_statemachine") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_read_statemachine_[f]) ) + "\n";
      all_zeros &= (0 == il_read_statemachine_[f]);
    }
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("il_instr_statemachine") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_instr_statemachine_[f]) ) + "\n";
      all_zeros &= (0 == il_instr_statemachine_[f]);
    }
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("il_write_statemachine") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_write_statemachine_[f]) ) + "\n";
      all_zeros &= (0 == il_write_statemachine_[f]);
    }
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("il_iqueue_data_credit") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_data_credit_[f]) ) + "\n";
      all_zeros &= (0 == il_iqueue_data_credit_[f]);
    }
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("il_oqueue_data_credit") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_data_credit_[f]) ) + "\n";
      all_zeros &= (0 == il_oqueue_data_credit_[f]);
    }
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("il_oqueue_resp_credit") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_resp_credit_[f]) ) + "\n";
      all_zeros &= (0 == il_oqueue_resp_credit_[f]);
    }
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("il_req_mem_credit") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_req_mem_credit_[f]) ) + "\n";
      all_zeros &= (0 == il_req_mem_credit_[f]);
    }
    r += indent_string + "  " + std::string("wb_read_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wb_read_statemachine_) ) + "\n";
    all_zeros &= (0 == wb_read_statemachine_);
    r += indent_string + "  " + std::string("wb_write_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wb_write_statemachine_) ) + "\n";
    all_zeros &= (0 == wb_write_statemachine_);
    r += indent_string + "  " + std::string("wb_data_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wb_data_credit_) ) + "\n";
    all_zeros &= (0 == wb_data_credit_);
    r += indent_string + "  " + std::string("rb_read_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_read_statemachine_) ) + "\n";
    all_zeros &= (0 == rb_read_statemachine_);
    r += indent_string + "  " + std::string("rb_write_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_write_statemachine_) ) + "\n";
    all_zeros &= (0 == rb_write_statemachine_);
    r += indent_string + "  " + std::string("rb_data_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_data_credit_) ) + "\n";
    all_zeros &= (0 == rb_data_credit_);
    r += indent_string + "  " + std::string("rb_resp_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_resp_credit_) ) + "\n";
    all_zeros &= (0 == rb_resp_credit_);
    r += indent_string + "  " + std::string("rb_req_mem_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_req_mem_credit_) ) + "\n";
    all_zeros &= (0 == rb_req_mem_credit_);
    r += indent_string + "  " + std::string("stat_write_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stat_write_statemachine_) ) + "\n";
    all_zeros &= (0 == stat_write_statemachine_);
    r += indent_string + "  " + std::string("stat_req_mem_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stat_req_mem_credit_) ) + "\n";
    all_zeros &= (0 == stat_req_mem_credit_);
    r += indent_string + "  " + std::string("stat_write_data_count") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stat_write_data_count_) ) + "\n";
    all_zeros &= (0 == stat_write_data_count_);
    r += indent_string + "  " + std::string("idle_write_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idle_write_statemachine_) ) + "\n";
    all_zeros &= (0 == idle_write_statemachine_);
    r += indent_string + "  " + std::string("idle_req_mem_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idle_req_mem_credit_) ) + "\n";
    all_zeros &= (0 == idle_req_mem_credit_);
    r += indent_string + "  " + std::string("idle_write_data_count") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idle_write_data_count_) ) + "\n";
    all_zeros &= (0 == idle_write_data_count_);
    r += indent_string + "  " + std::string("diag_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_statemachine_) ) + "\n";
    all_zeros &= (0 == diag_statemachine_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 4 > il_read_statemachine_;
  std::array< uint8_t, 4 > il_instr_statemachine_;
  std::array< uint8_t, 4 > il_write_statemachine_;
  std::array< uint16_t, 4 > il_iqueue_data_credit_;
  std::array< uint16_t, 4 > il_oqueue_data_credit_;
  std::array< uint16_t, 4 > il_oqueue_resp_credit_;
  std::array< uint8_t, 4 > il_req_mem_credit_;
  uint8_t wb_read_statemachine_;
  uint8_t wb_write_statemachine_;
  uint16_t wb_data_credit_;
  uint8_t rb_read_statemachine_;
  uint8_t rb_write_statemachine_;
  uint16_t rb_data_credit_;
  uint16_t rb_resp_credit_;
  uint8_t rb_req_mem_credit_;
  uint8_t stat_write_statemachine_;
  uint8_t stat_req_mem_credit_;
  uint8_t stat_write_data_count_;
  uint8_t idle_write_statemachine_;
  uint8_t idle_req_mem_credit_;
  uint8_t idle_write_data_count_;
  uint8_t diag_statemachine_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x200000; // to get to pbc
    offset += 0x500; // to get to dma_log
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_PBUS_DMA_LOG_H__
