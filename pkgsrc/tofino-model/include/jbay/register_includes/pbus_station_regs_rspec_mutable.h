/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PBUS_STATION_REGS_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_PBUS_STATION_REGS_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "pbus_station_regs_rspec_capt_dual_ecc_addr_mutable.h"
#include "pbus_station_regs_rspec_ecc_dis_mutable.h"
#include "pbus_station_regs_rspec_ecc_mutable.h"
#include "pbus_station_regs_rspec_intr_mutable.h"

namespace jbay {
  namespace register_classes {

class PbusStationRegsRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum PardeRegEnum {
    kDprsrreg,
    kPgstnreg
  };
public:
  PbusStationRegsRspecMutable(
      int chipNumber, int index_pipe_addrmap, PardeRegEnum selector_parde_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, selector_parde_reg), 40, true, write_callback, read_callback, std::string("PbusStationRegsRspecMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(selector_parde_reg))
    {
    }
  PbusStationRegsRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PbusStationRegsRspecMutable")
    {
    }
public:








  PbusStationRegsRspecEccMutable &ecc() { return ecc_; }





  PbusStationRegsRspecEccDisMutable &ecc_dis() { return ecc_dis_; }





  PbusStationRegsRspecCaptDualEccAddrMutable &capt_dual_ecc_addr() { return capt_dual_ecc_addr_; }
  PbusStationRegsRspecIntrMutable &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      ecc_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      ecc_dis_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      capt_dual_ecc_addr_.read( offset, data );
    }
    else if (offset < 0x14) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      ecc_dis_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      capt_dual_ecc_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset < 0x14) {
      offset -= 0x0;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    ecc_.reset();
    ecc_dis_.reset();
    capt_dual_ecc_addr_.reset();
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += ecc_dis_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += capt_dual_ecc_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset < 0x14) {
      offset -= 0x0;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += ecc_.to_string(print_zeros,indent_string) ;
    r += ecc_dis_.to_string(print_zeros,indent_string) ;
    r += capt_dual_ecc_addr_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  PbusStationRegsRspecEccMutable ecc_;
  PbusStationRegsRspecEccDisMutable ecc_dis_;
  PbusStationRegsRspecCaptDualEccAddrMutable capt_dual_ecc_addr_;
  PbusStationRegsRspecIntrMutable intr_;
private:
  static int StartOffset(
      int index_pipe_addrmap, PardeRegEnum selector_parde_reg
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    switch (selector_parde_reg) {
      case kDprsrreg:
        offset += 0x100000; // to get to dprsrreg
        offset += 0x2f000; // to get to dprsr_pbus
        break;
      case kPgstnreg:
        offset += 0x32000; // to get to pbusreg
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_PBUS_STATION_REGS_RSPEC_MUTABLE_H__
