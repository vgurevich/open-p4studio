/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PCIE_BAR01_REGS_MUTABLE_H__
#define __REGISTER_INCLUDES_PCIE_BAR01_REGS_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "cpu_glb_ctrl_mutable.h"
#include "cpu_ind_addr_high_mutable.h"
#include "cpu_ind_addr_low_mutable.h"
#include "cpu_ind_data00_mutable.h"
#include "cpu_ind_data01_mutable.h"
#include "cpu_ind_data10_mutable.h"
#include "cpu_ind_data11_mutable.h"
#include "cpu_ind_rerr_mutable.h"
#include "default_pciehdr_param_mutable.h"
#include "dma_glb_ctrl_mutable.h"
#include "dma_tag_pndg_mutable.h"
#include "dmard_thruput_ctrl_mutable.h"
#include "freerun_cnt_mutable.h"
#include "glb_shadow_int_mutable.h"
#include "int_timeout_ctrl_mutable.h"
#include "msix_map_mutable.h"
#include "pcie_bar01_regs_msix_mbe_err_log_mutable.h"
#include "pcie_bar01_regs_msix_sbe_err_log_mutable.h"
#include "pcie_bar01_regs_pcie_intr_mutable.h"
#include "pcie_bar01_regs_rxbuf_mbe_err_log_mutable.h"
#include "pcie_bar01_regs_rxbuf_sbe_err_log_mutable.h"
#include "pcie_bar01_regs_rxcpl_mbe_err_log_mutable.h"
#include "pcie_bar01_regs_rxcpl_sbe_err_log_mutable.h"
#include "pcie_bar01_regs_sram_ecc_mutable.h"
#include "pcie_bar01_regs_txbuf_mbe_err_log_mutable.h"
#include "pcie_bar01_regs_txbuf_sbe_err_log_mutable.h"
#include "pcie_bus_dev_mutable.h"
#include "pcie_bw_change_mutable.h"
#include "pcie_dev_info_mutable.h"
#include "pcie_dma_temp_stall_mutable.h"
#include "pcie_mst_cred_mutable.h"
#include "shadow_int_mutable.h"
#include "shadow_msk_mutable.h"
#include "tl_tx_proterr_mutable.h"
#include "window0_base_high_mutable.h"
#include "window0_base_param_mutable.h"
#include "window0_limit_high_mutable.h"
#include "window0_limit_low_mutable.h"
#include "window1_base_high_mutable.h"
#include "window1_base_param_mutable.h"
#include "window1_limit_high_mutable.h"
#include "window1_limit_low_mutable.h"
#include "wrr_table0_mutable.h"
#include "wrr_table1_mutable.h"
#include "wrr_table2_mutable.h"
#include "wrr_table3_mutable.h"

namespace jbay {
  namespace register_classes {

class PcieBar01RegsMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PcieBar01RegsMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 1024, true, write_callback, read_callback, std::string("PcieBar01RegsMutable"))
    {
    }
  PcieBar01RegsMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PcieBar01RegsMutable")
    {
    }
public:





  FreerunCntMutable &freerun_cnt() { return freerun_cnt_; }





  DmaGlbCtrlMutable &dma_glb_ctrl() { return dma_glb_ctrl_; }












  WrrTable0Mutable &wrr_table0() { return wrr_table0_; }












  WrrTable1Mutable &wrr_table1() { return wrr_table1_; }












  WrrTable2Mutable &wrr_table2() { return wrr_table2_; }












  WrrTable3Mutable &wrr_table3() { return wrr_table3_; }








  DmardThruputCtrlMutable &dmard_thruput_ctrl() { return dmard_thruput_ctrl_; }






  IntTimeoutCtrlMutable &int_timeout_ctrl() { return int_timeout_ctrl_; }






  CpuGlbCtrlMutable &cpu_glb_ctrl() { return cpu_glb_ctrl_; }





  CpuIndAddrLowMutable &cpu_ind_addr_low() { return cpu_ind_addr_low_; }





  CpuIndAddrHighMutable &cpu_ind_addr_high() { return cpu_ind_addr_high_; }





  CpuIndData00Mutable &cpu_ind_data00() { return cpu_ind_data00_; }





  CpuIndData01Mutable &cpu_ind_data01() { return cpu_ind_data01_; }





  CpuIndData10Mutable &cpu_ind_data10() { return cpu_ind_data10_; }





  CpuIndData11Mutable &cpu_ind_data11() { return cpu_ind_data11_; }





  CpuIndRerrMutable &cpu_ind_rerr() { return cpu_ind_rerr_; }







  DmaTagPndgMutable &dma_tag_pndg() { return dma_tag_pndg_; }







  GlbShadowIntMutable &glb_shadow_int() { return glb_shadow_int_; }









  ShadowIntMutable &shadow_int(int j0) { return shadow_int_[j0]; }








  ShadowMskMutable &shadow_msk(int j0) { return shadow_msk_[j0]; }





  Window0BaseParamMutable &window0_base_param() { return window0_base_param_; }





  Window0BaseHighMutable &window0_base_high() { return window0_base_high_; }





  Window0LimitLowMutable &window0_limit_low() { return window0_limit_low_; }





  Window0LimitHighMutable &window0_limit_high() { return window0_limit_high_; }





  Window1BaseParamMutable &window1_base_param() { return window1_base_param_; }





  Window1BaseHighMutable &window1_base_high() { return window1_base_high_; }





  Window1LimitLowMutable &window1_limit_low() { return window1_limit_low_; }





  Window1LimitHighMutable &window1_limit_high() { return window1_limit_high_; }





  DefaultPciehdrParamMutable &default_pciehdr_param() { return default_pciehdr_param_; }








  PcieBar01RegsSramEccMutable &sram_ecc() { return sram_ecc_; }





  PcieBar01RegsRxbufSbeErrLogMutable &rxbuf_sbe_err_log() { return rxbuf_sbe_err_log_; }





  PcieBar01RegsRxbufMbeErrLogMutable &rxbuf_mbe_err_log() { return rxbuf_mbe_err_log_; }





  PcieBar01RegsRxcplSbeErrLogMutable &rxcpl_sbe_err_log() { return rxcpl_sbe_err_log_; }





  PcieBar01RegsRxcplMbeErrLogMutable &rxcpl_mbe_err_log() { return rxcpl_mbe_err_log_; }





  PcieBar01RegsTxbufSbeErrLogMutable &txbuf_sbe_err_log() { return txbuf_sbe_err_log_; }





  PcieBar01RegsTxbufMbeErrLogMutable &txbuf_mbe_err_log() { return txbuf_mbe_err_log_; }





  PcieBar01RegsMsixSbeErrLogMutable &msix_sbe_err_log() { return msix_sbe_err_log_; }





  PcieBar01RegsMsixMbeErrLogMutable &msix_mbe_err_log() { return msix_mbe_err_log_; }







  PcieDevInfoMutable &pcie_dev_info(int j0) { return pcie_dev_info_[j0]; }





  PcieBusDevMutable &pcie_bus_dev() { return pcie_bus_dev_; }






  PcieDmaTempStallMutable &pcie_dma_temp_stall() { return pcie_dma_temp_stall_; }





  PcieMstCredMutable &pcie_mst_cred() { return pcie_mst_cred_; }





  PcieBwChangeMutable &pcie_bw_change() { return pcie_bw_change_; }






  TlTxProterrMutable &tl_tx_proterr() { return tl_tx_proterr_; }








  MsixMapMutable &msix_map(int j0) { return msix_map_[j0]; }
  PcieBar01RegsPcieIntrMutable &pcie_intr() { return pcie_intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      freerun_cnt_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      dma_glb_ctrl_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      wrr_table0_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      wrr_table1_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      wrr_table2_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      wrr_table3_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      dmard_thruput_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      if (read_callback_) read_callback_();
      int_timeout_ctrl_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      cpu_glb_ctrl_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      cpu_ind_addr_low_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      cpu_ind_addr_high_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      cpu_ind_data00_.read( offset, data );
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      if (read_callback_) read_callback_();
      cpu_ind_data01_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      cpu_ind_data10_.read( offset, data );
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      if (read_callback_) read_callback_();
      cpu_ind_data11_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      cpu_ind_rerr_.read( offset, data );
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      if (read_callback_) read_callback_();
      dma_tag_pndg_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      glb_shadow_int_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xc0) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      shadow_int_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0x100) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      shadow_msk_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      window0_base_param_.read( offset, data );
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      if (read_callback_) read_callback_();
      window0_base_high_.read( offset, data );
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      if (read_callback_) read_callback_();
      window0_limit_low_.read( offset, data );
    }
    else if (offset >= 0x10c && offset < 0x110) {
      offset -= 0x10c;
      if (read_callback_) read_callback_();
      window0_limit_high_.read( offset, data );
    }
    else if (offset >= 0x110 && offset < 0x114) {
      offset -= 0x110;
      if (read_callback_) read_callback_();
      window1_base_param_.read( offset, data );
    }
    else if (offset >= 0x114 && offset < 0x118) {
      offset -= 0x114;
      if (read_callback_) read_callback_();
      window1_base_high_.read( offset, data );
    }
    else if (offset >= 0x118 && offset < 0x11c) {
      offset -= 0x118;
      if (read_callback_) read_callback_();
      window1_limit_low_.read( offset, data );
    }
    else if (offset >= 0x11c && offset < 0x120) {
      offset -= 0x11c;
      if (read_callback_) read_callback_();
      window1_limit_high_.read( offset, data );
    }
    else if (offset >= 0x120 && offset < 0x124) {
      offset -= 0x120;
      if (read_callback_) read_callback_();
      default_pciehdr_param_.read( offset, data );
    }
    else if (offset >= 0x154 && offset < 0x158) {
      offset -= 0x154;
      if (read_callback_) read_callback_();
      sram_ecc_.read( offset, data );
    }
    else if (offset >= 0x158 && offset < 0x15c) {
      offset -= 0x158;
      if (read_callback_) read_callback_();
      rxbuf_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x15c && offset < 0x160) {
      offset -= 0x15c;
      if (read_callback_) read_callback_();
      rxbuf_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x160 && offset < 0x164) {
      offset -= 0x160;
      if (read_callback_) read_callback_();
      rxcpl_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x164 && offset < 0x168) {
      offset -= 0x164;
      if (read_callback_) read_callback_();
      rxcpl_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x168 && offset < 0x16c) {
      offset -= 0x168;
      if (read_callback_) read_callback_();
      txbuf_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x16c && offset < 0x170) {
      offset -= 0x16c;
      if (read_callback_) read_callback_();
      txbuf_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x170 && offset < 0x174) {
      offset -= 0x170;
      if (read_callback_) read_callback_();
      msix_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x174 && offset < 0x178) {
      offset -= 0x174;
      if (read_callback_) read_callback_();
      msix_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x1a0) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pcie_dev_info_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1a0 && offset < 0x1a4) {
      offset -= 0x1a0;
      if (read_callback_) read_callback_();
      pcie_bus_dev_.read( offset, data );
    }
    else if (offset >= 0x1a4 && offset < 0x1a8) {
      offset -= 0x1a4;
      if (read_callback_) read_callback_();
      pcie_dma_temp_stall_.read( offset, data );
    }
    else if (offset >= 0x1a8 && offset < 0x1ac) {
      offset -= 0x1a8;
      if (read_callback_) read_callback_();
      pcie_mst_cred_.read( offset, data );
    }
    else if (offset >= 0x1b0 && offset < 0x1b4) {
      offset -= 0x1b0;
      if (read_callback_) read_callback_();
      pcie_bw_change_.read( offset, data );
    }
    else if (offset >= 0x1b4 && offset < 0x1b8) {
      offset -= 0x1b4;
      if (read_callback_) read_callback_();
      tl_tx_proterr_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x400) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      msix_map_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x154) {
      offset -= 0x140;
      if (read_callback_) read_callback_();
      pcie_intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      freerun_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      dma_glb_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      wrr_table0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      wrr_table1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      wrr_table2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      wrr_table3_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      dmard_thruput_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      int_timeout_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      cpu_glb_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      cpu_ind_addr_low_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      cpu_ind_addr_high_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      cpu_ind_data00_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      cpu_ind_data01_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      cpu_ind_data10_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      cpu_ind_data11_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      cpu_ind_rerr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      dma_tag_pndg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      glb_shadow_int_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xc0) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      shadow_int_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0x100) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      shadow_msk_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      window0_base_param_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      window0_base_high_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      window0_limit_low_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10c && offset < 0x110) {
      offset -= 0x10c;
      window0_limit_high_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x110 && offset < 0x114) {
      offset -= 0x110;
      window1_base_param_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x114 && offset < 0x118) {
      offset -= 0x114;
      window1_base_high_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x118 && offset < 0x11c) {
      offset -= 0x118;
      window1_limit_low_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x11c && offset < 0x120) {
      offset -= 0x11c;
      window1_limit_high_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x120 && offset < 0x124) {
      offset -= 0x120;
      default_pciehdr_param_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x154 && offset < 0x158) {
      offset -= 0x154;
      sram_ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x158 && offset < 0x15c) {
      offset -= 0x158;
      rxbuf_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x15c && offset < 0x160) {
      offset -= 0x15c;
      rxbuf_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x160 && offset < 0x164) {
      offset -= 0x160;
      rxcpl_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x164 && offset < 0x168) {
      offset -= 0x164;
      rxcpl_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x168 && offset < 0x16c) {
      offset -= 0x168;
      txbuf_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x16c && offset < 0x170) {
      offset -= 0x16c;
      txbuf_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x170 && offset < 0x174) {
      offset -= 0x170;
      msix_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x174 && offset < 0x178) {
      offset -= 0x174;
      msix_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x1a0) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pcie_dev_info_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1a0 && offset < 0x1a4) {
      offset -= 0x1a0;
      pcie_bus_dev_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1a4 && offset < 0x1a8) {
      offset -= 0x1a4;
      pcie_dma_temp_stall_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1a8 && offset < 0x1ac) {
      offset -= 0x1a8;
      pcie_mst_cred_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1b0 && offset < 0x1b4) {
      offset -= 0x1b0;
      pcie_bw_change_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1b4 && offset < 0x1b8) {
      offset -= 0x1b4;
      tl_tx_proterr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x400) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      msix_map_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x154) {
      offset -= 0x140;
      pcie_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    freerun_cnt_.reset();
    dma_glb_ctrl_.reset();
    wrr_table0_.reset();
    wrr_table1_.reset();
    wrr_table2_.reset();
    wrr_table3_.reset();
    dmard_thruput_ctrl_.reset();
    int_timeout_ctrl_.reset();
    cpu_glb_ctrl_.reset();
    cpu_ind_addr_low_.reset();
    cpu_ind_addr_high_.reset();
    cpu_ind_data00_.reset();
    cpu_ind_data01_.reset();
    cpu_ind_data10_.reset();
    cpu_ind_data11_.reset();
    cpu_ind_rerr_.reset();
    dma_tag_pndg_.reset();
    glb_shadow_int_.reset();
    for (auto &f0 : shadow_int_) {
      f0.reset();
    }
    for (auto &f0 : shadow_msk_) {
      f0.reset();
    }
    window0_base_param_.reset();
    window0_base_high_.reset();
    window0_limit_low_.reset();
    window0_limit_high_.reset();
    window1_base_param_.reset();
    window1_base_high_.reset();
    window1_limit_low_.reset();
    window1_limit_high_.reset();
    default_pciehdr_param_.reset();
    sram_ecc_.reset();
    rxbuf_sbe_err_log_.reset();
    rxbuf_mbe_err_log_.reset();
    rxcpl_sbe_err_log_.reset();
    rxcpl_mbe_err_log_.reset();
    txbuf_sbe_err_log_.reset();
    txbuf_mbe_err_log_.reset();
    msix_sbe_err_log_.reset();
    msix_mbe_err_log_.reset();
    for (auto &f0 : pcie_dev_info_) {
      f0.reset();
    }
    pcie_bus_dev_.reset();
    pcie_dma_temp_stall_.reset();
    pcie_mst_cred_.reset();
    pcie_bw_change_.reset();
    tl_tx_proterr_.reset();
    for (auto &f0 : msix_map_) {
      f0.reset();
    }
    pcie_intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += freerun_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += dma_glb_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += wrr_table0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += wrr_table1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += wrr_table2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += wrr_table3_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += dmard_thruput_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      r += int_timeout_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += cpu_glb_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += cpu_ind_addr_low_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += cpu_ind_addr_high_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      r += cpu_ind_data00_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      r += cpu_ind_data01_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      r += cpu_ind_data10_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      r += cpu_ind_data11_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      r += cpu_ind_rerr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      r += dma_tag_pndg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      r += glb_shadow_int_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xc0) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += shadow_int_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0x100) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += shadow_msk_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      r += window0_base_param_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      r += window0_base_high_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      r += window0_limit_low_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10c && offset < 0x110) {
      offset -= 0x10c;
      r += window0_limit_high_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x110 && offset < 0x114) {
      offset -= 0x110;
      r += window1_base_param_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x114 && offset < 0x118) {
      offset -= 0x114;
      r += window1_base_high_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x118 && offset < 0x11c) {
      offset -= 0x118;
      r += window1_limit_low_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x11c && offset < 0x120) {
      offset -= 0x11c;
      r += window1_limit_high_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x120 && offset < 0x124) {
      offset -= 0x120;
      r += default_pciehdr_param_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x154 && offset < 0x158) {
      offset -= 0x154;
      r += sram_ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x158 && offset < 0x15c) {
      offset -= 0x158;
      r += rxbuf_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x15c && offset < 0x160) {
      offset -= 0x15c;
      r += rxbuf_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x160 && offset < 0x164) {
      offset -= 0x160;
      r += rxcpl_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x164 && offset < 0x168) {
      offset -= 0x164;
      r += rxcpl_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x168 && offset < 0x16c) {
      offset -= 0x168;
      r += txbuf_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x16c && offset < 0x170) {
      offset -= 0x16c;
      r += txbuf_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x170 && offset < 0x174) {
      offset -= 0x170;
      r += msix_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x174 && offset < 0x178) {
      offset -= 0x174;
      r += msix_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x1a0) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pcie_dev_info_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1a0 && offset < 0x1a4) {
      offset -= 0x1a0;
      r += pcie_bus_dev_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1a4 && offset < 0x1a8) {
      offset -= 0x1a4;
      r += pcie_dma_temp_stall_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1a8 && offset < 0x1ac) {
      offset -= 0x1a8;
      r += pcie_mst_cred_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1b0 && offset < 0x1b4) {
      offset -= 0x1b0;
      r += pcie_bw_change_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1b4 && offset < 0x1b8) {
      offset -= 0x1b4;
      r += tl_tx_proterr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x400) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += msix_map_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x154) {
      offset -= 0x140;
      r += pcie_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += freerun_cnt_.to_string(print_zeros,indent_string) ;
    r += dma_glb_ctrl_.to_string(print_zeros,indent_string) ;
    r += wrr_table0_.to_string(print_zeros,indent_string) ;
    r += wrr_table1_.to_string(print_zeros,indent_string) ;
    r += wrr_table2_.to_string(print_zeros,indent_string) ;
    r += wrr_table3_.to_string(print_zeros,indent_string) ;
    r += dmard_thruput_ctrl_.to_string(print_zeros,indent_string) ;
    r += int_timeout_ctrl_.to_string(print_zeros,indent_string) ;
    r += cpu_glb_ctrl_.to_string(print_zeros,indent_string) ;
    r += cpu_ind_addr_low_.to_string(print_zeros,indent_string) ;
    r += cpu_ind_addr_high_.to_string(print_zeros,indent_string) ;
    r += cpu_ind_data00_.to_string(print_zeros,indent_string) ;
    r += cpu_ind_data01_.to_string(print_zeros,indent_string) ;
    r += cpu_ind_data10_.to_string(print_zeros,indent_string) ;
    r += cpu_ind_data11_.to_string(print_zeros,indent_string) ;
    r += cpu_ind_rerr_.to_string(print_zeros,indent_string) ;
    r += dma_tag_pndg_.to_string(print_zeros,indent_string) ;
    r += glb_shadow_int_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<16;++a0) {
      r += shadow_int_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += shadow_msk_[a0].to_string(print_zeros,indent_string) ;
    }
    r += window0_base_param_.to_string(print_zeros,indent_string) ;
    r += window0_base_high_.to_string(print_zeros,indent_string) ;
    r += window0_limit_low_.to_string(print_zeros,indent_string) ;
    r += window0_limit_high_.to_string(print_zeros,indent_string) ;
    r += window1_base_param_.to_string(print_zeros,indent_string) ;
    r += window1_base_high_.to_string(print_zeros,indent_string) ;
    r += window1_limit_low_.to_string(print_zeros,indent_string) ;
    r += window1_limit_high_.to_string(print_zeros,indent_string) ;
    r += default_pciehdr_param_.to_string(print_zeros,indent_string) ;
    r += sram_ecc_.to_string(print_zeros,indent_string) ;
    r += rxbuf_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += rxbuf_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += rxcpl_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += rxcpl_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += txbuf_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += txbuf_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += msix_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += msix_mbe_err_log_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<8;++a0) {
      r += pcie_dev_info_[a0].to_string(print_zeros,indent_string) ;
    }
    r += pcie_bus_dev_.to_string(print_zeros,indent_string) ;
    r += pcie_dma_temp_stall_.to_string(print_zeros,indent_string) ;
    r += pcie_mst_cred_.to_string(print_zeros,indent_string) ;
    r += pcie_bw_change_.to_string(print_zeros,indent_string) ;
    r += tl_tx_proterr_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<128;++a0) {
      r += msix_map_[a0].to_string(print_zeros,indent_string) ;
    }
    r += pcie_intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  FreerunCntMutable freerun_cnt_;
  DmaGlbCtrlMutable dma_glb_ctrl_;
  WrrTable0Mutable wrr_table0_;
  WrrTable1Mutable wrr_table1_;
  WrrTable2Mutable wrr_table2_;
  WrrTable3Mutable wrr_table3_;
  DmardThruputCtrlMutable dmard_thruput_ctrl_;
  IntTimeoutCtrlMutable int_timeout_ctrl_;
  CpuGlbCtrlMutable cpu_glb_ctrl_;
  CpuIndAddrLowMutable cpu_ind_addr_low_;
  CpuIndAddrHighMutable cpu_ind_addr_high_;
  CpuIndData00Mutable cpu_ind_data00_;
  CpuIndData01Mutable cpu_ind_data01_;
  CpuIndData10Mutable cpu_ind_data10_;
  CpuIndData11Mutable cpu_ind_data11_;
  CpuIndRerrMutable cpu_ind_rerr_;
  DmaTagPndgMutable dma_tag_pndg_;
  GlbShadowIntMutable glb_shadow_int_;
  std::array< ShadowIntMutable, 16 > shadow_int_;
  std::array< ShadowMskMutable, 16 > shadow_msk_;
  Window0BaseParamMutable window0_base_param_;
  Window0BaseHighMutable window0_base_high_;
  Window0LimitLowMutable window0_limit_low_;
  Window0LimitHighMutable window0_limit_high_;
  Window1BaseParamMutable window1_base_param_;
  Window1BaseHighMutable window1_base_high_;
  Window1LimitLowMutable window1_limit_low_;
  Window1LimitHighMutable window1_limit_high_;
  DefaultPciehdrParamMutable default_pciehdr_param_;
  PcieBar01RegsSramEccMutable sram_ecc_;
  PcieBar01RegsRxbufSbeErrLogMutable rxbuf_sbe_err_log_;
  PcieBar01RegsRxbufMbeErrLogMutable rxbuf_mbe_err_log_;
  PcieBar01RegsRxcplSbeErrLogMutable rxcpl_sbe_err_log_;
  PcieBar01RegsRxcplMbeErrLogMutable rxcpl_mbe_err_log_;
  PcieBar01RegsTxbufSbeErrLogMutable txbuf_sbe_err_log_;
  PcieBar01RegsTxbufMbeErrLogMutable txbuf_mbe_err_log_;
  PcieBar01RegsMsixSbeErrLogMutable msix_sbe_err_log_;
  PcieBar01RegsMsixMbeErrLogMutable msix_mbe_err_log_;
  std::array< PcieDevInfoMutable, 8 > pcie_dev_info_;
  PcieBusDevMutable pcie_bus_dev_;
  PcieDmaTempStallMutable pcie_dma_temp_stall_;
  PcieMstCredMutable pcie_mst_cred_;
  PcieBwChangeMutable pcie_bw_change_;
  TlTxProterrMutable tl_tx_proterr_;
  std::array< MsixMapMutable, 128 > msix_map_;
  PcieBar01RegsPcieIntrMutable pcie_intr_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_PCIE_BAR01_REGS_MUTABLE_H__
