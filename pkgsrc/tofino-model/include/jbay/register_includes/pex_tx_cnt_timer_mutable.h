/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PEX_TX_CNT_TIMER_MUTABLE_H__
#define __REGISTER_INCLUDES_PEX_TX_CNT_TIMER_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class PexTxCntTimerMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PexTxCntTimerMutable(
      int chipNumber, int index_tm_pex_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_pex_pipe_rspec), 8, true, write_callback, read_callback, std::string("PexTxCntTimerMutable")+":"+boost::lexical_cast<std::string>(index_tm_pex_pipe_rspec))
    {
    }
  PexTxCntTimerMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PexTxCntTimerMutable")
    {
    }
public:







  uint64_t cycle_cnt() { return cycle_cnt_; }
  void cycle_cnt(const uint64_t &v) { cycle_cnt_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (cycle_cnt_ & 0xffffffff);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = ((cycle_cnt_ & UINT64_C(0xffff00000000)) >> 32);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      cycle_cnt_ = ((static_cast<uint64_t>(data) & 0xffffffff) | (cycle_cnt_ & UINT64_C(0xffff00000000)));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      cycle_cnt_ = (((static_cast<uint64_t>(data) << 32) & UINT64_C(0xffff00000000)) | (cycle_cnt_ & 0xffffffff));
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    cycle_cnt_ = UINT64_C(0x0);
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PexTxCntTimerMutable") + ":\n";
    r += indent_string + "  " + std::string("cycle_cnt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cycle_cnt_) ) + "\n";
    all_zeros &= (0 == cycle_cnt_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PexTxCntTimerMutable") + ":\n";
    r += indent_string + "  " + std::string("cycle_cnt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cycle_cnt_) ) + "\n";
    all_zeros &= (0 == cycle_cnt_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint64_t cycle_cnt_;
private:
  static int StartOffset(
      int index_tm_pex_pipe_rspec
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    offset += 0x300000; // to get to tm_pex_top
    assert(index_tm_pex_pipe_rspec < 4);
    offset += index_tm_pex_pipe_rspec * 0x4000; // tm_pex_pipe_rspec[]
    offset += 0x1e48; // to get to pex_tx_cnt_timer
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_PEX_TX_CNT_TIMER_MUTABLE_H__
