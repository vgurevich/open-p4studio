/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PGR_COMMON_REG_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_PGR_COMMON_REG_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "pgr_app_dwrr_ctrl_mutable.h"
#include "pgr_cfg_app_recirc_port_src_mutable.h"
#include "pgr_cfg_chnl_ts_offset_mutable.h"
#include "pgr_cfg_dwrr_mutable.h"
#include "pgr_cfg_hi_prio_mutable.h"
#include "pgr_cfg_init_eth_cpu_credit_mutable.h"
#include "pgr_cfg_init_tbc_credit_mutable.h"
#include "pgr_cfg_pfc_hdr_mutable.h"
#include "pgr_cfg_pfc_max_pkt_size_mutable.h"
#include "pgr_cfg_pfc_timeout_mutable.h"
#include "pgr_cfg_tdm_ts_offset_mutable.h"
#include "pgr_common_reg_rspec_debug_bus_ctrl_mutable.h"
#include "pgr_data_fifo0_mbe_log_mutable.h"
#include "pgr_data_fifo0_sbe_log_mutable.h"
#include "pgr_data_fifo1_mbe_log_mutable.h"
#include "pgr_data_fifo1_sbe_log_mutable.h"
#include "pgr_data_fifo2_mbe_log_mutable.h"
#include "pgr_data_fifo2_sbe_log_mutable.h"
#include "pgr_ebuf_credit_ctrl_mutable.h"
#include "pgr_ebuf_pfc_cfg_mutable.h"
#include "pgr_ebuf_port_ctrl_mutable.h"
#include "pgr_eth_cpu_chnl_pfc_cfg_mutable.h"
#include "pgr_eth_cpu_credit_log_mutable.h"
#include "pgr_eth_cpu_ctrl_mutable.h"
#include "pgr_freeze_en_mutable.h"
#include "pgr_intr_en0_mutable.h"
#include "pgr_intr_en1_mutable.h"
#include "pgr_intr_inj_mutable.h"
#include "pgr_intr_stat_mutable.h"
#include "pgr_ipb_chnl_pfc_cfg_mutable.h"
#include "pgr_ipb_chnl_xoff_cfg_mutable.h"
#include "pgr_ipb_pkt_err_ctr48_trigger_mutable.h"
#include "pgr_ipb_port_ctrl_mutable.h"
#include "pgr_mbe_log_mutable.h"
#include "pgr_pgen_chnl_log_mutable.h"
#include "pgr_pgen_ctrl_mutable.h"
#include "pgr_pgen_pfc_log_mutable.h"
#include "pgr_pgen_port_down_ctrl_mutable.h"
#include "pgr_pgen_port_down_event_mask_mutable.h"
#include "pgr_pgen_port_down_log_mutable.h"
#include "pgr_pgen_port_down_vec_clr_mutable.h"
#include "pgr_pgen_retrigger_port_down_mutable.h"
#include "pgr_port_csr_ts_mutable.h"
#include "pgr_port_down_dis_mutable.h"
#include "pgr_port_ebuf_ts_mutable.h"
#include "pgr_recir_log_mutable.h"
#include "pgr_sbe_log_mutable.h"
#include "pgr_tbc_chnl_pfc_cfg_mutable.h"
#include "pgr_tbc_credit_log_mutable.h"
#include "pgr_tbc_port_ctrl_mutable.h"

namespace jbay {
  namespace register_classes {

class PgrCommonRegRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PgrCommonRegRspecMutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4096, true, write_callback, read_callback, std::string("PgrCommonRegRspecMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PgrCommonRegRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PgrCommonRegRspecMutable")
    {
    }
public:








  PgrPortEbufTsMutable &recirc_ts(int j0) { return recirc_ts_[j0]; }





  PgrPortCsrTsMutable &csr_ts_offset() { return csr_ts_offset_; }





  PgrTbcPortCtrlMutable &tbc_port_ctrl() { return tbc_port_ctrl_; }







  PgrEbufPortCtrlMutable &ebuf_port_ctrl(int j0) { return ebuf_port_ctrl_[j0]; }





  PgrEthCpuCtrlMutable &eth_cpu_port_ctrl() { return eth_cpu_port_ctrl_; }





  PgrIpbPortCtrlMutable &ipb_port_ctrl() { return ipb_port_ctrl_; }











  PgrPgenPortDownEventMaskMutable &pgen_port_down_mask(int j0) { return pgen_port_down_mask_[j0]; }





  PgrPortDownDisMutable &port_down_dis() { return port_down_dis_; }





  PgrPgenRetriggerPortDownMutable &pgen_retrigger_port_down() { return pgen_retrigger_port_down_; }





  PgrPgenPortDownVecClrMutable &pgen_port_down_vec_clr() { return pgen_port_down_vec_clr_; }





  PgrPgenPortDownCtrlMutable &pgen_port_down_ctrl() { return pgen_port_down_ctrl_; }





  PgrIntrStatMutable &intr_stat() { return intr_stat_; }





  PgrIntrEn0Mutable &intr_en0() { return intr_en0_; }





  PgrIntrEn1Mutable &intr_en1() { return intr_en1_; }





  PgrFreezeEnMutable &freeze_en() { return freeze_en_; }





  PgrIntrInjMutable &intr_inj() { return intr_inj_; }





  PgrSbeLogMutable &sbe_log() { return sbe_log_; }





  PgrMbeLogMutable &mbe_log() { return mbe_log_; }





  PgrPgenChnlLogMutable &pgen_chnl_log() { return pgen_chnl_log_; }





  PgrPgenPfcLogMutable &pgen_pfc_log() { return pgen_pfc_log_; }







  PgrPgenPortDownLogMutable &pgen_port_down_log(int j0) { return pgen_port_down_log_[j0]; }







  PgrRecirLogMutable &recir_log() { return recir_log_; }









  PgrAppDwrrCtrlMutable &cfg_pgen_dwrr_weight(int j0) { return cfg_pgen_dwrr_weight_[j0]; }





  PgrEbufCreditCtrlMutable &ebuf_credit_ctrl() { return ebuf_credit_ctrl_; }





  PgrIpbChnlPfcCfgMutable &ipb_chnl_pfc_cfg() { return ipb_chnl_pfc_cfg_; }





  PgrIpbChnlXoffCfgMutable &ipb_chnl_xoff_cfg() { return ipb_chnl_xoff_cfg_; }





  PgrEthCpuChnlPfcCfgMutable &eth_cpu_chnl_pfc_cfg() { return eth_cpu_chnl_pfc_cfg_; }





  PgrTbcChnlPfcCfgMutable &tbc_chnl_pfc_cfg() { return tbc_chnl_pfc_cfg_; }





  PgrCfgPfcHdrMutable &cfg_pfc_hdr() { return cfg_pfc_hdr_; }





  PgrCfgPfcTimeoutMutable &cfg_pfc_timer() { return cfg_pfc_timer_; }





  PgrCfgPfcMaxPktSizeMutable &cfg_pfc_max_pkt_size() { return cfg_pfc_max_pkt_size_; }





  PgrCfgInitTbcCreditMutable &cfg_init_tbc_credit() { return cfg_init_tbc_credit_; }







  PgrCfgInitEthCpuCreditMutable &cfg_init_eth_cpu_credit(int j0) { return cfg_init_eth_cpu_credit_[j0]; }





  PgrCfgDwrrMutable &cfg_pgen_dwrr() { return cfg_pgen_dwrr_; }





  PgrCfgChnlTsOffsetMutable &cfg_pgen_chnl_ts() { return cfg_pgen_chnl_ts_; }





  PgrCfgTdmTsOffsetMutable &cfg_pgen_tdm_ts() { return cfg_pgen_tdm_ts_; }









  PgrCfgAppRecircPortSrcMutable &cfg_app_recirc_src() { return cfg_app_recirc_src_; }






  PgrCfgHiPrioMutable &cfg_hi_prio() { return cfg_hi_prio_; }





  PgrPgenCtrlMutable &pgen_ctrl() { return pgen_ctrl_; }





  PgrDataFifo0SbeLogMutable &pgr_data_fifo0_sbe_log() { return pgr_data_fifo0_sbe_log_; }





  PgrDataFifo0MbeLogMutable &pgr_data_fifo0_mbe_log() { return pgr_data_fifo0_mbe_log_; }





  PgrDataFifo1SbeLogMutable &pgr_data_fifo1_sbe_log() { return pgr_data_fifo1_sbe_log_; }





  PgrDataFifo1MbeLogMutable &pgr_data_fifo1_mbe_log() { return pgr_data_fifo1_mbe_log_; }





  PgrDataFifo2SbeLogMutable &pgr_data_fifo2_sbe_log() { return pgr_data_fifo2_sbe_log_; }





  PgrDataFifo2MbeLogMutable &pgr_data_fifo2_mbe_log() { return pgr_data_fifo2_mbe_log_; }





  PgrIpbPktErrCtr48TriggerMutable &ctr48_ipb_pkt_err() { return ctr48_ipb_pkt_err_; }





  PgrEbufPfcCfgMutable &ebuf_pfc_cfg() { return ebuf_pfc_cfg_; }





  PgrTbcCreditLogMutable &tbc_credit_log() { return tbc_credit_log_; }







  PgrEthCpuCreditLogMutable &eth_cpu_credit_log(int j0) { return eth_cpu_credit_log_[j0]; }





  PgrCommonRegRspecDebugBusCtrlMutable &debug_bus_ctrl() { return debug_bus_ctrl_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x10 && offset < 0x20) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      recirc_ts_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      csr_ts_offset_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      tbc_port_ctrl_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      ebuf_port_ctrl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      eth_cpu_port_ctrl_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      ipb_port_ctrl_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x78) {
      offset -= 0x60;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      if (read_callback_) read_callback_();
      pgen_port_down_mask_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x8c) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      port_down_dis_.read( offset, data );
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      if (read_callback_) read_callback_();
      pgen_retrigger_port_down_.read( offset, data );
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      if (read_callback_) read_callback_();
      pgen_port_down_vec_clr_.read( offset, data );
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      if (read_callback_) read_callback_();
      pgen_port_down_ctrl_.read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      if (read_callback_) read_callback_();
      intr_stat_.read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      if (read_callback_) read_callback_();
      intr_en0_.read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xd0) {
      offset -= 0xc0;
      if (read_callback_) read_callback_();
      intr_en1_.read( offset, data );
    }
    else if (offset >= 0xd0 && offset < 0xe0) {
      offset -= 0xd0;
      if (read_callback_) read_callback_();
      freeze_en_.read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0xf0) {
      offset -= 0xe0;
      if (read_callback_) read_callback_();
      intr_inj_.read( offset, data );
    }
    else if (offset >= 0xf0 && offset < 0xf8) {
      offset -= 0xf0;
      if (read_callback_) read_callback_();
      sbe_log_.read( offset, data );
    }
    else if (offset >= 0xf8 && offset < 0x100) {
      offset -= 0xf8;
      if (read_callback_) read_callback_();
      mbe_log_.read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x10c) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      pgen_chnl_log_.read( offset, data );
    }
    else if (offset >= 0x110 && offset < 0x118) {
      offset -= 0x110;
      if (read_callback_) read_callback_();
      pgen_pfc_log_.read( offset, data );
    }
    else if (offset >= 0x120 && offset < 0x138) {
      offset -= 0x120;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      if (read_callback_) read_callback_();
      pgen_port_down_log_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x150) {
      offset -= 0x140;
      if (read_callback_) read_callback_();
      recir_log_.read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x1c0) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      cfg_pgen_dwrr_weight_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      if (read_callback_) read_callback_();
      ebuf_credit_ctrl_.read( offset, data );
    }
    else if (offset >= 0x1d0 && offset < 0x1dc) {
      offset -= 0x1d0;
      if (read_callback_) read_callback_();
      ipb_chnl_pfc_cfg_.read( offset, data );
    }
    else if (offset >= 0x1dc && offset < 0x1e0) {
      offset -= 0x1dc;
      if (read_callback_) read_callback_();
      ipb_chnl_xoff_cfg_.read( offset, data );
    }
    else if (offset >= 0x1e0 && offset < 0x1e8) {
      offset -= 0x1e0;
      if (read_callback_) read_callback_();
      eth_cpu_chnl_pfc_cfg_.read( offset, data );
    }
    else if (offset >= 0x1e8 && offset < 0x1ec) {
      offset -= 0x1e8;
      if (read_callback_) read_callback_();
      tbc_chnl_pfc_cfg_.read( offset, data );
    }
    else if (offset >= 0x1f0 && offset < 0x200) {
      offset -= 0x1f0;
      if (read_callback_) read_callback_();
      cfg_pfc_hdr_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x204) {
      offset -= 0x200;
      if (read_callback_) read_callback_();
      cfg_pfc_timer_.read( offset, data );
    }
    else if (offset >= 0x204 && offset < 0x208) {
      offset -= 0x204;
      if (read_callback_) read_callback_();
      cfg_pfc_max_pkt_size_.read( offset, data );
    }
    else if (offset >= 0x208 && offset < 0x20c) {
      offset -= 0x208;
      if (read_callback_) read_callback_();
      cfg_init_tbc_credit_.read( offset, data );
    }
    else if (offset >= 0x210 && offset < 0x220) {
      offset -= 0x210;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      cfg_init_eth_cpu_credit_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x220 && offset < 0x224) {
      offset -= 0x220;
      if (read_callback_) read_callback_();
      cfg_pgen_dwrr_.read( offset, data );
    }
    else if (offset >= 0x224 && offset < 0x228) {
      offset -= 0x224;
      if (read_callback_) read_callback_();
      cfg_pgen_chnl_ts_.read( offset, data );
    }
    else if (offset >= 0x228 && offset < 0x22c) {
      offset -= 0x228;
      if (read_callback_) read_callback_();
      cfg_pgen_tdm_ts_.read( offset, data );
    }
    else if (offset >= 0x22c && offset < 0x230) {
      offset -= 0x22c;
      if (read_callback_) read_callback_();
      cfg_app_recirc_src_.read( offset, data );
    }
    else if (offset >= 0x230 && offset < 0x234) {
      offset -= 0x230;
      if (read_callback_) read_callback_();
      cfg_hi_prio_.read( offset, data );
    }
    else if (offset >= 0x238 && offset < 0x240) {
      offset -= 0x238;
      if (read_callback_) read_callback_();
      pgen_ctrl_.read( offset, data );
    }
    else if (offset >= 0x240 && offset < 0x248) {
      offset -= 0x240;
      if (read_callback_) read_callback_();
      pgr_data_fifo0_sbe_log_.read( offset, data );
    }
    else if (offset >= 0x248 && offset < 0x250) {
      offset -= 0x248;
      if (read_callback_) read_callback_();
      pgr_data_fifo0_mbe_log_.read( offset, data );
    }
    else if (offset >= 0x250 && offset < 0x258) {
      offset -= 0x250;
      if (read_callback_) read_callback_();
      pgr_data_fifo1_sbe_log_.read( offset, data );
    }
    else if (offset >= 0x258 && offset < 0x260) {
      offset -= 0x258;
      if (read_callback_) read_callback_();
      pgr_data_fifo1_mbe_log_.read( offset, data );
    }
    else if (offset >= 0x260 && offset < 0x268) {
      offset -= 0x260;
      if (read_callback_) read_callback_();
      pgr_data_fifo2_sbe_log_.read( offset, data );
    }
    else if (offset >= 0x268 && offset < 0x270) {
      offset -= 0x268;
      if (read_callback_) read_callback_();
      pgr_data_fifo2_mbe_log_.read( offset, data );
    }
    else if (offset >= 0x270 && offset < 0x278) {
      offset -= 0x270;
      if (read_callback_) read_callback_();
      ctr48_ipb_pkt_err_.read( offset, data );
    }
    else if (offset >= 0x278 && offset < 0x27c) {
      offset -= 0x278;
      if (read_callback_) read_callback_();
      ebuf_pfc_cfg_.read( offset, data );
    }
    else if (offset >= 0x27c && offset < 0x280) {
      offset -= 0x27c;
      if (read_callback_) read_callback_();
      tbc_credit_log_.read( offset, data );
    }
    else if (offset >= 0x280 && offset < 0x290) {
      offset -= 0x280;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      eth_cpu_credit_log_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x290 && offset < 0x294) {
      offset -= 0x290;
      if (read_callback_) read_callback_();
      debug_bus_ctrl_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x10 && offset < 0x20) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      recirc_ts_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      csr_ts_offset_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      tbc_port_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      ebuf_port_ctrl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      eth_cpu_port_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      ipb_port_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x78) {
      offset -= 0x60;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      pgen_port_down_mask_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x8c) {
      offset -= 0x80;
      port_down_dis_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      pgen_retrigger_port_down_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      pgen_port_down_vec_clr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      pgen_port_down_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      intr_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      intr_en0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xd0) {
      offset -= 0xc0;
      intr_en1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd0 && offset < 0xe0) {
      offset -= 0xd0;
      freeze_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0xf0) {
      offset -= 0xe0;
      intr_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf0 && offset < 0xf8) {
      offset -= 0xf0;
      sbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf8 && offset < 0x100) {
      offset -= 0xf8;
      mbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x10c) {
      offset -= 0x100;
      pgen_chnl_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x110 && offset < 0x118) {
      offset -= 0x110;
      pgen_pfc_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x120 && offset < 0x138) {
      offset -= 0x120;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      pgen_port_down_log_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x150) {
      offset -= 0x140;
      recir_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x1c0) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      cfg_pgen_dwrr_weight_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      ebuf_credit_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1d0 && offset < 0x1dc) {
      offset -= 0x1d0;
      ipb_chnl_pfc_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1dc && offset < 0x1e0) {
      offset -= 0x1dc;
      ipb_chnl_xoff_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e0 && offset < 0x1e8) {
      offset -= 0x1e0;
      eth_cpu_chnl_pfc_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e8 && offset < 0x1ec) {
      offset -= 0x1e8;
      tbc_chnl_pfc_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1f0 && offset < 0x200) {
      offset -= 0x1f0;
      cfg_pfc_hdr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x204) {
      offset -= 0x200;
      cfg_pfc_timer_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x204 && offset < 0x208) {
      offset -= 0x204;
      cfg_pfc_max_pkt_size_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x208 && offset < 0x20c) {
      offset -= 0x208;
      cfg_init_tbc_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x210 && offset < 0x220) {
      offset -= 0x210;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      cfg_init_eth_cpu_credit_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x220 && offset < 0x224) {
      offset -= 0x220;
      cfg_pgen_dwrr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x224 && offset < 0x228) {
      offset -= 0x224;
      cfg_pgen_chnl_ts_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x228 && offset < 0x22c) {
      offset -= 0x228;
      cfg_pgen_tdm_ts_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x22c && offset < 0x230) {
      offset -= 0x22c;
      cfg_app_recirc_src_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x230 && offset < 0x234) {
      offset -= 0x230;
      cfg_hi_prio_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x238 && offset < 0x240) {
      offset -= 0x238;
      pgen_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x240 && offset < 0x248) {
      offset -= 0x240;
      pgr_data_fifo0_sbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x248 && offset < 0x250) {
      offset -= 0x248;
      pgr_data_fifo0_mbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x250 && offset < 0x258) {
      offset -= 0x250;
      pgr_data_fifo1_sbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x258 && offset < 0x260) {
      offset -= 0x258;
      pgr_data_fifo1_mbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x260 && offset < 0x268) {
      offset -= 0x260;
      pgr_data_fifo2_sbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x268 && offset < 0x270) {
      offset -= 0x268;
      pgr_data_fifo2_mbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x270 && offset < 0x278) {
      offset -= 0x270;
      ctr48_ipb_pkt_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x278 && offset < 0x27c) {
      offset -= 0x278;
      ebuf_pfc_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x27c && offset < 0x280) {
      offset -= 0x27c;
      tbc_credit_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x280 && offset < 0x290) {
      offset -= 0x280;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      eth_cpu_credit_log_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x290 && offset < 0x294) {
      offset -= 0x290;
      debug_bus_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : recirc_ts_) {
      f0.reset();
    }
    csr_ts_offset_.reset();
    tbc_port_ctrl_.reset();
    for (auto &f0 : ebuf_port_ctrl_) {
      f0.reset();
    }
    eth_cpu_port_ctrl_.reset();
    ipb_port_ctrl_.reset();
    for (auto &f0 : pgen_port_down_mask_) {
      f0.reset();
    }
    port_down_dis_.reset();
    pgen_retrigger_port_down_.reset();
    pgen_port_down_vec_clr_.reset();
    pgen_port_down_ctrl_.reset();
    intr_stat_.reset();
    intr_en0_.reset();
    intr_en1_.reset();
    freeze_en_.reset();
    intr_inj_.reset();
    sbe_log_.reset();
    mbe_log_.reset();
    pgen_chnl_log_.reset();
    pgen_pfc_log_.reset();
    for (auto &f0 : pgen_port_down_log_) {
      f0.reset();
    }
    recir_log_.reset();
    for (auto &f0 : cfg_pgen_dwrr_weight_) {
      f0.reset();
    }
    ebuf_credit_ctrl_.reset();
    ipb_chnl_pfc_cfg_.reset();
    ipb_chnl_xoff_cfg_.reset();
    eth_cpu_chnl_pfc_cfg_.reset();
    tbc_chnl_pfc_cfg_.reset();
    cfg_pfc_hdr_.reset();
    cfg_pfc_timer_.reset();
    cfg_pfc_max_pkt_size_.reset();
    cfg_init_tbc_credit_.reset();
    for (auto &f0 : cfg_init_eth_cpu_credit_) {
      f0.reset();
    }
    cfg_pgen_dwrr_.reset();
    cfg_pgen_chnl_ts_.reset();
    cfg_pgen_tdm_ts_.reset();
    cfg_app_recirc_src_.reset();
    cfg_hi_prio_.reset();
    pgen_ctrl_.reset();
    pgr_data_fifo0_sbe_log_.reset();
    pgr_data_fifo0_mbe_log_.reset();
    pgr_data_fifo1_sbe_log_.reset();
    pgr_data_fifo1_mbe_log_.reset();
    pgr_data_fifo2_sbe_log_.reset();
    pgr_data_fifo2_mbe_log_.reset();
    ctr48_ipb_pkt_err_.reset();
    ebuf_pfc_cfg_.reset();
    tbc_credit_log_.reset();
    for (auto &f0 : eth_cpu_credit_log_) {
      f0.reset();
    }
    debug_bus_ctrl_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x10 && offset < 0x20) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += recirc_ts_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += csr_ts_offset_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += tbc_port_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += ebuf_port_ctrl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      r += eth_cpu_port_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      r += ipb_port_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x78) {
      offset -= 0x60;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      r += pgen_port_down_mask_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x8c) {
      offset -= 0x80;
      r += port_down_dis_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      r += pgen_retrigger_port_down_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      r += pgen_port_down_vec_clr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      r += pgen_port_down_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      r += intr_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      r += intr_en0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xd0) {
      offset -= 0xc0;
      r += intr_en1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd0 && offset < 0xe0) {
      offset -= 0xd0;
      r += freeze_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0xf0) {
      offset -= 0xe0;
      r += intr_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf0 && offset < 0xf8) {
      offset -= 0xf0;
      r += sbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf8 && offset < 0x100) {
      offset -= 0xf8;
      r += mbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x10c) {
      offset -= 0x100;
      r += pgen_chnl_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x110 && offset < 0x118) {
      offset -= 0x110;
      r += pgen_pfc_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x120 && offset < 0x138) {
      offset -= 0x120;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      r += pgen_port_down_log_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x150) {
      offset -= 0x140;
      r += recir_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x1c0) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += cfg_pgen_dwrr_weight_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      r += ebuf_credit_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1d0 && offset < 0x1dc) {
      offset -= 0x1d0;
      r += ipb_chnl_pfc_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1dc && offset < 0x1e0) {
      offset -= 0x1dc;
      r += ipb_chnl_xoff_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e0 && offset < 0x1e8) {
      offset -= 0x1e0;
      r += eth_cpu_chnl_pfc_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e8 && offset < 0x1ec) {
      offset -= 0x1e8;
      r += tbc_chnl_pfc_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1f0 && offset < 0x200) {
      offset -= 0x1f0;
      r += cfg_pfc_hdr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x204) {
      offset -= 0x200;
      r += cfg_pfc_timer_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x204 && offset < 0x208) {
      offset -= 0x204;
      r += cfg_pfc_max_pkt_size_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x208 && offset < 0x20c) {
      offset -= 0x208;
      r += cfg_init_tbc_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x210 && offset < 0x220) {
      offset -= 0x210;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += cfg_init_eth_cpu_credit_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x220 && offset < 0x224) {
      offset -= 0x220;
      r += cfg_pgen_dwrr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x224 && offset < 0x228) {
      offset -= 0x224;
      r += cfg_pgen_chnl_ts_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x228 && offset < 0x22c) {
      offset -= 0x228;
      r += cfg_pgen_tdm_ts_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x22c && offset < 0x230) {
      offset -= 0x22c;
      r += cfg_app_recirc_src_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x230 && offset < 0x234) {
      offset -= 0x230;
      r += cfg_hi_prio_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x238 && offset < 0x240) {
      offset -= 0x238;
      r += pgen_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x240 && offset < 0x248) {
      offset -= 0x240;
      r += pgr_data_fifo0_sbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x248 && offset < 0x250) {
      offset -= 0x248;
      r += pgr_data_fifo0_mbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x250 && offset < 0x258) {
      offset -= 0x250;
      r += pgr_data_fifo1_sbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x258 && offset < 0x260) {
      offset -= 0x258;
      r += pgr_data_fifo1_mbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x260 && offset < 0x268) {
      offset -= 0x260;
      r += pgr_data_fifo2_sbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x268 && offset < 0x270) {
      offset -= 0x268;
      r += pgr_data_fifo2_mbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x270 && offset < 0x278) {
      offset -= 0x270;
      r += ctr48_ipb_pkt_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x278 && offset < 0x27c) {
      offset -= 0x278;
      r += ebuf_pfc_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x27c && offset < 0x280) {
      offset -= 0x27c;
      r += tbc_credit_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x280 && offset < 0x290) {
      offset -= 0x280;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += eth_cpu_credit_log_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x290 && offset < 0x294) {
      offset -= 0x290;
      r += debug_bus_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<4;++a0) {
      r += recirc_ts_[a0].to_string(print_zeros,indent_string) ;
    }
    r += csr_ts_offset_.to_string(print_zeros,indent_string) ;
    r += tbc_port_ctrl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += ebuf_port_ctrl_[a0].to_string(print_zeros,indent_string) ;
    }
    r += eth_cpu_port_ctrl_.to_string(print_zeros,indent_string) ;
    r += ipb_port_ctrl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<2;++a0) {
      r += pgen_port_down_mask_[a0].to_string(print_zeros,indent_string) ;
    }
    r += port_down_dis_.to_string(print_zeros,indent_string) ;
    r += pgen_retrigger_port_down_.to_string(print_zeros,indent_string) ;
    r += pgen_port_down_vec_clr_.to_string(print_zeros,indent_string) ;
    r += pgen_port_down_ctrl_.to_string(print_zeros,indent_string) ;
    r += intr_stat_.to_string(print_zeros,indent_string) ;
    r += intr_en0_.to_string(print_zeros,indent_string) ;
    r += intr_en1_.to_string(print_zeros,indent_string) ;
    r += freeze_en_.to_string(print_zeros,indent_string) ;
    r += intr_inj_.to_string(print_zeros,indent_string) ;
    r += sbe_log_.to_string(print_zeros,indent_string) ;
    r += mbe_log_.to_string(print_zeros,indent_string) ;
    r += pgen_chnl_log_.to_string(print_zeros,indent_string) ;
    r += pgen_pfc_log_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<2;++a0) {
      r += pgen_port_down_log_[a0].to_string(print_zeros,indent_string) ;
    }
    r += recir_log_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<16;++a0) {
      r += cfg_pgen_dwrr_weight_[a0].to_string(print_zeros,indent_string) ;
    }
    r += ebuf_credit_ctrl_.to_string(print_zeros,indent_string) ;
    r += ipb_chnl_pfc_cfg_.to_string(print_zeros,indent_string) ;
    r += ipb_chnl_xoff_cfg_.to_string(print_zeros,indent_string) ;
    r += eth_cpu_chnl_pfc_cfg_.to_string(print_zeros,indent_string) ;
    r += tbc_chnl_pfc_cfg_.to_string(print_zeros,indent_string) ;
    r += cfg_pfc_hdr_.to_string(print_zeros,indent_string) ;
    r += cfg_pfc_timer_.to_string(print_zeros,indent_string) ;
    r += cfg_pfc_max_pkt_size_.to_string(print_zeros,indent_string) ;
    r += cfg_init_tbc_credit_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += cfg_init_eth_cpu_credit_[a0].to_string(print_zeros,indent_string) ;
    }
    r += cfg_pgen_dwrr_.to_string(print_zeros,indent_string) ;
    r += cfg_pgen_chnl_ts_.to_string(print_zeros,indent_string) ;
    r += cfg_pgen_tdm_ts_.to_string(print_zeros,indent_string) ;
    r += cfg_app_recirc_src_.to_string(print_zeros,indent_string) ;
    r += cfg_hi_prio_.to_string(print_zeros,indent_string) ;
    r += pgen_ctrl_.to_string(print_zeros,indent_string) ;
    r += pgr_data_fifo0_sbe_log_.to_string(print_zeros,indent_string) ;
    r += pgr_data_fifo0_mbe_log_.to_string(print_zeros,indent_string) ;
    r += pgr_data_fifo1_sbe_log_.to_string(print_zeros,indent_string) ;
    r += pgr_data_fifo1_mbe_log_.to_string(print_zeros,indent_string) ;
    r += pgr_data_fifo2_sbe_log_.to_string(print_zeros,indent_string) ;
    r += pgr_data_fifo2_mbe_log_.to_string(print_zeros,indent_string) ;
    r += ctr48_ipb_pkt_err_.to_string(print_zeros,indent_string) ;
    r += ebuf_pfc_cfg_.to_string(print_zeros,indent_string) ;
    r += tbc_credit_log_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += eth_cpu_credit_log_[a0].to_string(print_zeros,indent_string) ;
    }
    r += debug_bus_ctrl_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< PgrPortEbufTsMutable, 4 > recirc_ts_;
  PgrPortCsrTsMutable csr_ts_offset_;
  PgrTbcPortCtrlMutable tbc_port_ctrl_;
  std::array< PgrEbufPortCtrlMutable, 4 > ebuf_port_ctrl_;
  PgrEthCpuCtrlMutable eth_cpu_port_ctrl_;
  PgrIpbPortCtrlMutable ipb_port_ctrl_;
  std::array< PgrPgenPortDownEventMaskMutable, 2 > pgen_port_down_mask_;
  PgrPortDownDisMutable port_down_dis_;
  PgrPgenRetriggerPortDownMutable pgen_retrigger_port_down_;
  PgrPgenPortDownVecClrMutable pgen_port_down_vec_clr_;
  PgrPgenPortDownCtrlMutable pgen_port_down_ctrl_;
  PgrIntrStatMutable intr_stat_;
  PgrIntrEn0Mutable intr_en0_;
  PgrIntrEn1Mutable intr_en1_;
  PgrFreezeEnMutable freeze_en_;
  PgrIntrInjMutable intr_inj_;
  PgrSbeLogMutable sbe_log_;
  PgrMbeLogMutable mbe_log_;
  PgrPgenChnlLogMutable pgen_chnl_log_;
  PgrPgenPfcLogMutable pgen_pfc_log_;
  std::array< PgrPgenPortDownLogMutable, 2 > pgen_port_down_log_;
  PgrRecirLogMutable recir_log_;
  std::array< PgrAppDwrrCtrlMutable, 16 > cfg_pgen_dwrr_weight_;
  PgrEbufCreditCtrlMutable ebuf_credit_ctrl_;
  PgrIpbChnlPfcCfgMutable ipb_chnl_pfc_cfg_;
  PgrIpbChnlXoffCfgMutable ipb_chnl_xoff_cfg_;
  PgrEthCpuChnlPfcCfgMutable eth_cpu_chnl_pfc_cfg_;
  PgrTbcChnlPfcCfgMutable tbc_chnl_pfc_cfg_;
  PgrCfgPfcHdrMutable cfg_pfc_hdr_;
  PgrCfgPfcTimeoutMutable cfg_pfc_timer_;
  PgrCfgPfcMaxPktSizeMutable cfg_pfc_max_pkt_size_;
  PgrCfgInitTbcCreditMutable cfg_init_tbc_credit_;
  std::array< PgrCfgInitEthCpuCreditMutable, 4 > cfg_init_eth_cpu_credit_;
  PgrCfgDwrrMutable cfg_pgen_dwrr_;
  PgrCfgChnlTsOffsetMutable cfg_pgen_chnl_ts_;
  PgrCfgTdmTsOffsetMutable cfg_pgen_tdm_ts_;
  PgrCfgAppRecircPortSrcMutable cfg_app_recirc_src_;
  PgrCfgHiPrioMutable cfg_hi_prio_;
  PgrPgenCtrlMutable pgen_ctrl_;
  PgrDataFifo0SbeLogMutable pgr_data_fifo0_sbe_log_;
  PgrDataFifo0MbeLogMutable pgr_data_fifo0_mbe_log_;
  PgrDataFifo1SbeLogMutable pgr_data_fifo1_sbe_log_;
  PgrDataFifo1MbeLogMutable pgr_data_fifo1_mbe_log_;
  PgrDataFifo2SbeLogMutable pgr_data_fifo2_sbe_log_;
  PgrDataFifo2MbeLogMutable pgr_data_fifo2_mbe_log_;
  PgrIpbPktErrCtr48TriggerMutable ctr48_ipb_pkt_err_;
  PgrEbufPfcCfgMutable ebuf_pfc_cfg_;
  PgrTbcCreditLogMutable tbc_credit_log_;
  std::array< PgrEthCpuCreditLogMutable, 4 > eth_cpu_credit_log_;
  PgrCommonRegRspecDebugBusCtrlMutable debug_bus_ctrl_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x34000; // to get to pgrreg
    offset += 0x2000; // to get to pgr_common
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_PGR_COMMON_REG_RSPEC_MUTABLE_H__
