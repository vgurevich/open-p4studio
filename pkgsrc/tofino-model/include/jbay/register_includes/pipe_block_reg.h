/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PIPE_BLOCK_REG_H__
#define __REGISTER_INCLUDES_PIPE_BLOCK_REG_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "discard_queue_cnt_cell.h"
#include "discard_queue_wm_cnt_cell.h"
#include "pipe_block_reg_debug_bus_ctrl.h"
#include "pipe_block_reg_intr.h"
#include "pipe_block_reg_port_drop_cnt_table_mbe_err_log.h"
#include "pipe_block_reg_port_drop_cnt_table_sbe_err_log.h"
#include "pipe_block_reg_prc2psc_fifo_mbe_err_log.h"
#include "pipe_block_reg_prc2psc_fifo_sbe_err_log.h"
#include "pipe_block_reg_qac2prc_fifo_mbe_err_log.h"
#include "pipe_block_reg_qac2prc_fifo_sbe_err_log.h"
#include "pipe_block_reg_qac_ctr32_clc_intf.h"
#include "pipe_block_reg_qac_ctr32_drop_no_dst.h"
#include "pipe_block_reg_qac_ctr32_pre_mc_drop.h"
#include "pipe_block_reg_qac_ctr32_pre_mc_enq.h"
#include "pipe_block_reg_qac_ecc.h"
#include "pipe_block_reg_qid_mapping_table_mbe_err_log.h"
#include "pipe_block_reg_qid_mapping_table_sbe_err_log.h"
#include "pipe_block_reg_queue_drop_table_mbe_err_log.h"
#include "pipe_block_reg_queue_drop_table_sbe_err_log.h"
#include "port_drop_state.h"
#include "qac_ctr48_r.h"
#include "qac_debug_register.h"
#include "qac_drop_reason_bmp.h"
#include "qac_mc_apid.h"
#include "qac_offset.h"
#include "qac_pipe_config.h"
#include "qac_port_rx_disable.h"
#include "qac_queue_state_mask.h"
#include "qac_queue_state_visible_bmp.h"
#include "queue_drop_state.h"

namespace jbay {
  namespace register_classes {

class PipeBlockReg : public model_core::RegisterBlock<RegisterCallback> {
public:
  PipeBlockReg(
      int chipNumber, int index_tm_qac_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_qac_pipe_rspec), 2848, false, write_callback, read_callback, std::string("PipeBlockReg")+":"+boost::lexical_cast<std::string>(index_tm_qac_pipe_rspec))
    {
    }
  PipeBlockReg(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PipeBlockReg")
    {
    }
public:







  QacCtr48R &qac_reg_qac_ctr48_drop_pre_fifo(int j0) { return qac_reg_qac_ctr48_drop_pre_fifo_[j0]; }





  PipeBlockRegQacCtr32DropNoDst &qac_reg_qac_ctr32_drop_no_dst() { return qac_reg_qac_ctr32_drop_no_dst_; }





  PipeBlockRegQacCtr32PreMcDrop &qac_reg_qac_ctr32_pre_mc_drop() { return qac_reg_qac_ctr32_pre_mc_drop_; }





  PipeBlockRegQacCtr32PreMcEnq &qac_reg_qac_ctr32_pre_mc_enq() { return qac_reg_qac_ctr32_pre_mc_enq_; }







  PipeBlockRegQacCtr32ClcIntf &qac_reg_qac_ctr32_clc_intf(int j0) { return qac_reg_qac_ctr32_clc_intf_[j0]; }







  QacOffset &qac_reg_offset_profile(int j0) { return qac_reg_offset_profile_[j0]; }





  QacMcApid &qac_reg_mc_apid() { return qac_reg_mc_apid_; }





  QacPipeConfig &qac_reg_pipe_config() { return qac_reg_pipe_config_; }





  DiscardQueueCntCell &qac_reg_discard_queue_cnt_cell() { return qac_reg_discard_queue_cnt_cell_; }





  DiscardQueueWmCntCell &qac_reg_discard_queue_wm_cnt_cell() { return qac_reg_discard_queue_wm_cnt_cell_; }





  QacPortRxDisable &qac_reg_qac_port_rx_disable() { return qac_reg_qac_port_rx_disable_; }





  QacDebugRegister &qac_reg_qac_debug_register() { return qac_reg_qac_debug_register_; }








  PipeBlockRegQacEcc &qac_reg_qac_ecc() { return qac_reg_qac_ecc_; }





  PipeBlockRegQueueDropTableSbeErrLog &qac_reg_queue_drop_table_sbe_err_log() { return qac_reg_queue_drop_table_sbe_err_log_; }





  PipeBlockRegQueueDropTableMbeErrLog &qac_reg_queue_drop_table_mbe_err_log() { return qac_reg_queue_drop_table_mbe_err_log_; }





  PipeBlockRegPortDropCntTableSbeErrLog &qac_reg_port_drop_cnt_table_sbe_err_log() { return qac_reg_port_drop_cnt_table_sbe_err_log_; }





  PipeBlockRegPortDropCntTableMbeErrLog &qac_reg_port_drop_cnt_table_mbe_err_log() { return qac_reg_port_drop_cnt_table_mbe_err_log_; }





  PipeBlockRegQidMappingTableSbeErrLog &qac_reg_qid_mapping_table_sbe_err_log() { return qac_reg_qid_mapping_table_sbe_err_log_; }





  PipeBlockRegQidMappingTableMbeErrLog &qac_reg_qid_mapping_table_mbe_err_log() { return qac_reg_qid_mapping_table_mbe_err_log_; }





  PipeBlockRegQac2prcFifoSbeErrLog &qac_reg_qac2prc_fifo_sbe_err_log() { return qac_reg_qac2prc_fifo_sbe_err_log_; }





  PipeBlockRegQac2prcFifoMbeErrLog &qac_reg_qac2prc_fifo_mbe_err_log() { return qac_reg_qac2prc_fifo_mbe_err_log_; }





  PipeBlockRegPrc2pscFifoSbeErrLog &qac_reg_prc2psc_fifo_sbe_err_log() { return qac_reg_prc2psc_fifo_sbe_err_log_; }





  PipeBlockRegPrc2pscFifoMbeErrLog &qac_reg_prc2psc_fifo_mbe_err_log() { return qac_reg_prc2psc_fifo_mbe_err_log_; }





  PipeBlockRegDebugBusCtrl &qac_reg_debug_bus_ctrl() { return qac_reg_debug_bus_ctrl_; }







  QueueDropState &qac_reg_queue_drop_state(int j0) { return qac_reg_queue_drop_state_[j0]; }







  QueueDropState &qac_reg_queue_drop_yel_state(int j0) { return qac_reg_queue_drop_yel_state_[j0]; }







  QueueDropState &qac_reg_queue_drop_red_state(int j0) { return qac_reg_queue_drop_red_state_[j0]; }





  QacQueueStateMask &qac_reg_qac_queue_state_mask() { return qac_reg_qac_queue_state_mask_; }







  PortDropState &qac_reg_port_drop_state(int j0) { return qac_reg_port_drop_state_[j0]; }







  QacQueueStateVisibleBmp &qac_reg_qac_queue_state_visible_bmp(int j0) { return qac_reg_qac_queue_state_visible_bmp_[j0]; }







  QacDropReasonBmp &qac_reg_qac_drop_reason_bmp(int j0) { return qac_reg_qac_drop_reason_bmp_[j0]; }
  PipeBlockRegIntr &qac_reg_intr() { return qac_reg_intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x20) {
      offset -= 0x0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      qac_reg_qac_ctr48_drop_pre_fifo_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      qac_reg_qac_ctr32_drop_no_dst_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      qac_reg_qac_ctr32_pre_mc_drop_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      qac_reg_qac_ctr32_pre_mc_enq_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_reg_qac_ctr32_clc_intf_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0xe0) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_reg_offset_profile_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0xe4) {
      offset -= 0xe0;
      if (read_callback_) read_callback_();
      qac_reg_mc_apid_.read( offset, data );
    }
    else if (offset >= 0xe4 && offset < 0xe8) {
      offset -= 0xe4;
      if (read_callback_) read_callback_();
      qac_reg_pipe_config_.read( offset, data );
    }
    else if (offset >= 0xe8 && offset < 0xec) {
      offset -= 0xe8;
      if (read_callback_) read_callback_();
      qac_reg_discard_queue_cnt_cell_.read( offset, data );
    }
    else if (offset >= 0xec && offset < 0xf0) {
      offset -= 0xec;
      if (read_callback_) read_callback_();
      qac_reg_discard_queue_wm_cnt_cell_.read( offset, data );
    }
    else if (offset >= 0xf0 && offset < 0xfc) {
      offset -= 0xf0;
      if (read_callback_) read_callback_();
      qac_reg_qac_port_rx_disable_.read( offset, data );
    }
    else if (offset >= 0xfc && offset < 0x100) {
      offset -= 0xfc;
      if (read_callback_) read_callback_();
      qac_reg_qac_debug_register_.read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      qac_reg_qac_ecc_.read( offset, data );
    }
    else if (offset >= 0x134 && offset < 0x138) {
      offset -= 0x134;
      if (read_callback_) read_callback_();
      qac_reg_queue_drop_table_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x138 && offset < 0x13c) {
      offset -= 0x138;
      if (read_callback_) read_callback_();
      qac_reg_queue_drop_table_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x13c && offset < 0x140) {
      offset -= 0x13c;
      if (read_callback_) read_callback_();
      qac_reg_port_drop_cnt_table_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      if (read_callback_) read_callback_();
      qac_reg_port_drop_cnt_table_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x144 && offset < 0x148) {
      offset -= 0x144;
      if (read_callback_) read_callback_();
      qac_reg_qid_mapping_table_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x148 && offset < 0x14c) {
      offset -= 0x148;
      if (read_callback_) read_callback_();
      qac_reg_qid_mapping_table_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x14c && offset < 0x150) {
      offset -= 0x14c;
      if (read_callback_) read_callback_();
      qac_reg_qac2prc_fifo_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x150 && offset < 0x154) {
      offset -= 0x150;
      if (read_callback_) read_callback_();
      qac_reg_qac2prc_fifo_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x154 && offset < 0x158) {
      offset -= 0x154;
      if (read_callback_) read_callback_();
      qac_reg_prc2psc_fifo_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x158 && offset < 0x15c) {
      offset -= 0x158;
      if (read_callback_) read_callback_();
      qac_reg_prc2psc_fifo_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x15c && offset < 0x160) {
      offset -= 0x15c;
      if (read_callback_) read_callback_();
      qac_reg_debug_bus_ctrl_.read( offset, data );
    }
    else if (offset >= 0x1e0 && offset < 0x270) {
      offset -= 0x1e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_reg_queue_drop_state_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x2e0 && offset < 0x370) {
      offset -= 0x2e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_reg_queue_drop_yel_state_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3e0 && offset < 0x470) {
      offset -= 0x3e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_reg_queue_drop_red_state_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x470 && offset < 0x474) {
      offset -= 0x470;
      if (read_callback_) read_callback_();
      qac_reg_qac_queue_state_mask_.read( offset, data );
    }
    else if (offset >= 0x5e0 && offset < 0x700) {
      offset -= 0x5e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_reg_port_drop_state_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x7e0 && offset < 0x870) {
      offset -= 0x7e0;
      int i0 = offset / 0x10;
      offset  -= i0 * 0x10;
      if (read_callback_) read_callback_();
      qac_reg_qac_queue_state_visible_bmp_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x9e0 && offset < 0xb00) {
      offset -= 0x9e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_reg_qac_drop_reason_bmp_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x120 && offset < 0x134) {
      offset -= 0x120;
      if (read_callback_) read_callback_();
      qac_reg_intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x20) {
      offset -= 0x0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      qac_reg_qac_ctr48_drop_pre_fifo_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      qac_reg_qac_ctr32_drop_no_dst_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      qac_reg_qac_ctr32_pre_mc_drop_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      qac_reg_qac_ctr32_pre_mc_enq_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_reg_qac_ctr32_clc_intf_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0xe0) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_reg_offset_profile_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0xe4) {
      offset -= 0xe0;
      qac_reg_mc_apid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe4 && offset < 0xe8) {
      offset -= 0xe4;
      qac_reg_pipe_config_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe8 && offset < 0xec) {
      offset -= 0xe8;
      qac_reg_discard_queue_cnt_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xec && offset < 0xf0) {
      offset -= 0xec;
      qac_reg_discard_queue_wm_cnt_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf0 && offset < 0xfc) {
      offset -= 0xf0;
      qac_reg_qac_port_rx_disable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xfc && offset < 0x100) {
      offset -= 0xfc;
      qac_reg_qac_debug_register_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      qac_reg_qac_ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x134 && offset < 0x138) {
      offset -= 0x134;
      qac_reg_queue_drop_table_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x138 && offset < 0x13c) {
      offset -= 0x138;
      qac_reg_queue_drop_table_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x13c && offset < 0x140) {
      offset -= 0x13c;
      qac_reg_port_drop_cnt_table_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      qac_reg_port_drop_cnt_table_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x144 && offset < 0x148) {
      offset -= 0x144;
      qac_reg_qid_mapping_table_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x148 && offset < 0x14c) {
      offset -= 0x148;
      qac_reg_qid_mapping_table_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14c && offset < 0x150) {
      offset -= 0x14c;
      qac_reg_qac2prc_fifo_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x150 && offset < 0x154) {
      offset -= 0x150;
      qac_reg_qac2prc_fifo_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x154 && offset < 0x158) {
      offset -= 0x154;
      qac_reg_prc2psc_fifo_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x158 && offset < 0x15c) {
      offset -= 0x158;
      qac_reg_prc2psc_fifo_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x15c && offset < 0x160) {
      offset -= 0x15c;
      qac_reg_debug_bus_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e0 && offset < 0x270) {
      offset -= 0x1e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_reg_queue_drop_state_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2e0 && offset < 0x370) {
      offset -= 0x2e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_reg_queue_drop_yel_state_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3e0 && offset < 0x470) {
      offset -= 0x3e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_reg_queue_drop_red_state_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x470 && offset < 0x474) {
      offset -= 0x470;
      qac_reg_qac_queue_state_mask_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5e0 && offset < 0x700) {
      offset -= 0x5e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_reg_port_drop_state_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7e0 && offset < 0x870) {
      offset -= 0x7e0;
      int i0 = offset / 0x10;
      offset  -= i0 * 0x10;
      qac_reg_qac_queue_state_visible_bmp_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x9e0 && offset < 0xb00) {
      offset -= 0x9e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_reg_qac_drop_reason_bmp_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x120 && offset < 0x134) {
      offset -= 0x120;
      qac_reg_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : qac_reg_qac_ctr48_drop_pre_fifo_) {
      f0.reset();
    }
    qac_reg_qac_ctr32_drop_no_dst_.reset();
    qac_reg_qac_ctr32_pre_mc_drop_.reset();
    qac_reg_qac_ctr32_pre_mc_enq_.reset();
    for (auto &f0 : qac_reg_qac_ctr32_clc_intf_) {
      f0.reset();
    }
    for (auto &f0 : qac_reg_offset_profile_) {
      f0.reset();
    }
    qac_reg_mc_apid_.reset();
    qac_reg_pipe_config_.reset();
    qac_reg_discard_queue_cnt_cell_.reset();
    qac_reg_discard_queue_wm_cnt_cell_.reset();
    qac_reg_qac_port_rx_disable_.reset();
    qac_reg_qac_debug_register_.reset();
    qac_reg_qac_ecc_.reset();
    qac_reg_queue_drop_table_sbe_err_log_.reset();
    qac_reg_queue_drop_table_mbe_err_log_.reset();
    qac_reg_port_drop_cnt_table_sbe_err_log_.reset();
    qac_reg_port_drop_cnt_table_mbe_err_log_.reset();
    qac_reg_qid_mapping_table_sbe_err_log_.reset();
    qac_reg_qid_mapping_table_mbe_err_log_.reset();
    qac_reg_qac2prc_fifo_sbe_err_log_.reset();
    qac_reg_qac2prc_fifo_mbe_err_log_.reset();
    qac_reg_prc2psc_fifo_sbe_err_log_.reset();
    qac_reg_prc2psc_fifo_mbe_err_log_.reset();
    qac_reg_debug_bus_ctrl_.reset();
    for (auto &f0 : qac_reg_queue_drop_state_) {
      f0.reset();
    }
    for (auto &f0 : qac_reg_queue_drop_yel_state_) {
      f0.reset();
    }
    for (auto &f0 : qac_reg_queue_drop_red_state_) {
      f0.reset();
    }
    qac_reg_qac_queue_state_mask_.reset();
    for (auto &f0 : qac_reg_port_drop_state_) {
      f0.reset();
    }
    for (auto &f0 : qac_reg_qac_queue_state_visible_bmp_) {
      f0.reset();
    }
    for (auto &f0 : qac_reg_qac_drop_reason_bmp_) {
      f0.reset();
    }
    qac_reg_intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x20) {
      offset -= 0x0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += qac_reg_qac_ctr48_drop_pre_fifo_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += qac_reg_qac_ctr32_drop_no_dst_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += qac_reg_qac_ctr32_pre_mc_drop_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += qac_reg_qac_ctr32_pre_mc_enq_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_reg_qac_ctr32_clc_intf_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0xe0) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_reg_offset_profile_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0xe4) {
      offset -= 0xe0;
      r += qac_reg_mc_apid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe4 && offset < 0xe8) {
      offset -= 0xe4;
      r += qac_reg_pipe_config_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe8 && offset < 0xec) {
      offset -= 0xe8;
      r += qac_reg_discard_queue_cnt_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xec && offset < 0xf0) {
      offset -= 0xec;
      r += qac_reg_discard_queue_wm_cnt_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf0 && offset < 0xfc) {
      offset -= 0xf0;
      r += qac_reg_qac_port_rx_disable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xfc && offset < 0x100) {
      offset -= 0xfc;
      r += qac_reg_qac_debug_register_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      r += qac_reg_qac_ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x134 && offset < 0x138) {
      offset -= 0x134;
      r += qac_reg_queue_drop_table_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x138 && offset < 0x13c) {
      offset -= 0x138;
      r += qac_reg_queue_drop_table_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x13c && offset < 0x140) {
      offset -= 0x13c;
      r += qac_reg_port_drop_cnt_table_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      r += qac_reg_port_drop_cnt_table_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x144 && offset < 0x148) {
      offset -= 0x144;
      r += qac_reg_qid_mapping_table_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x148 && offset < 0x14c) {
      offset -= 0x148;
      r += qac_reg_qid_mapping_table_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14c && offset < 0x150) {
      offset -= 0x14c;
      r += qac_reg_qac2prc_fifo_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x150 && offset < 0x154) {
      offset -= 0x150;
      r += qac_reg_qac2prc_fifo_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x154 && offset < 0x158) {
      offset -= 0x154;
      r += qac_reg_prc2psc_fifo_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x158 && offset < 0x15c) {
      offset -= 0x158;
      r += qac_reg_prc2psc_fifo_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x15c && offset < 0x160) {
      offset -= 0x15c;
      r += qac_reg_debug_bus_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e0 && offset < 0x270) {
      offset -= 0x1e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_reg_queue_drop_state_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2e0 && offset < 0x370) {
      offset -= 0x2e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_reg_queue_drop_yel_state_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3e0 && offset < 0x470) {
      offset -= 0x3e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_reg_queue_drop_red_state_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x470 && offset < 0x474) {
      offset -= 0x470;
      r += qac_reg_qac_queue_state_mask_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5e0 && offset < 0x700) {
      offset -= 0x5e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_reg_port_drop_state_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7e0 && offset < 0x870) {
      offset -= 0x7e0;
      int i0 = offset / 0x10;
      offset  -= i0 * 0x10;
      r += qac_reg_qac_queue_state_visible_bmp_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x9e0 && offset < 0xb00) {
      offset -= 0x9e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_reg_qac_drop_reason_bmp_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x120 && offset < 0x134) {
      offset -= 0x120;
      r += qac_reg_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_reg_qac_ctr48_drop_pre_fifo_[a0].to_string(print_zeros,indent_string) ;
    }
    r += qac_reg_qac_ctr32_drop_no_dst_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac_ctr32_pre_mc_drop_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac_ctr32_pre_mc_enq_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_reg_qac_ctr32_clc_intf_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<32;++a0) {
      r += qac_reg_offset_profile_[a0].to_string(print_zeros,indent_string) ;
    }
    r += qac_reg_mc_apid_.to_string(print_zeros,indent_string) ;
    r += qac_reg_pipe_config_.to_string(print_zeros,indent_string) ;
    r += qac_reg_discard_queue_cnt_cell_.to_string(print_zeros,indent_string) ;
    r += qac_reg_discard_queue_wm_cnt_cell_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac_port_rx_disable_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac_debug_register_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac_ecc_.to_string(print_zeros,indent_string) ;
    r += qac_reg_queue_drop_table_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += qac_reg_queue_drop_table_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += qac_reg_port_drop_cnt_table_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += qac_reg_port_drop_cnt_table_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qid_mapping_table_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qid_mapping_table_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac2prc_fifo_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac2prc_fifo_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += qac_reg_prc2psc_fifo_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += qac_reg_prc2psc_fifo_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += qac_reg_debug_bus_ctrl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<36;++a0) {
      r += qac_reg_queue_drop_state_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<36;++a0) {
      r += qac_reg_queue_drop_yel_state_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<36;++a0) {
      r += qac_reg_queue_drop_red_state_[a0].to_string(print_zeros,indent_string) ;
    }
    r += qac_reg_qac_queue_state_mask_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<72;++a0) {
      r += qac_reg_port_drop_state_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<9;++a0) {
      r += qac_reg_qac_queue_state_visible_bmp_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<72;++a0) {
      r += qac_reg_qac_drop_reason_bmp_[a0].to_string(print_zeros,indent_string) ;
    }
    r += qac_reg_intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< QacCtr48R, 4 > qac_reg_qac_ctr48_drop_pre_fifo_;
  PipeBlockRegQacCtr32DropNoDst qac_reg_qac_ctr32_drop_no_dst_;
  PipeBlockRegQacCtr32PreMcDrop qac_reg_qac_ctr32_pre_mc_drop_;
  PipeBlockRegQacCtr32PreMcEnq qac_reg_qac_ctr32_pre_mc_enq_;
  std::array< PipeBlockRegQacCtr32ClcIntf, 4 > qac_reg_qac_ctr32_clc_intf_;
  std::array< QacOffset, 32 > qac_reg_offset_profile_;
  QacMcApid qac_reg_mc_apid_;
  QacPipeConfig qac_reg_pipe_config_;
  DiscardQueueCntCell qac_reg_discard_queue_cnt_cell_;
  DiscardQueueWmCntCell qac_reg_discard_queue_wm_cnt_cell_;
  QacPortRxDisable qac_reg_qac_port_rx_disable_;
  QacDebugRegister qac_reg_qac_debug_register_;
  PipeBlockRegQacEcc qac_reg_qac_ecc_;
  PipeBlockRegQueueDropTableSbeErrLog qac_reg_queue_drop_table_sbe_err_log_;
  PipeBlockRegQueueDropTableMbeErrLog qac_reg_queue_drop_table_mbe_err_log_;
  PipeBlockRegPortDropCntTableSbeErrLog qac_reg_port_drop_cnt_table_sbe_err_log_;
  PipeBlockRegPortDropCntTableMbeErrLog qac_reg_port_drop_cnt_table_mbe_err_log_;
  PipeBlockRegQidMappingTableSbeErrLog qac_reg_qid_mapping_table_sbe_err_log_;
  PipeBlockRegQidMappingTableMbeErrLog qac_reg_qid_mapping_table_mbe_err_log_;
  PipeBlockRegQac2prcFifoSbeErrLog qac_reg_qac2prc_fifo_sbe_err_log_;
  PipeBlockRegQac2prcFifoMbeErrLog qac_reg_qac2prc_fifo_mbe_err_log_;
  PipeBlockRegPrc2pscFifoSbeErrLog qac_reg_prc2psc_fifo_sbe_err_log_;
  PipeBlockRegPrc2pscFifoMbeErrLog qac_reg_prc2psc_fifo_mbe_err_log_;
  PipeBlockRegDebugBusCtrl qac_reg_debug_bus_ctrl_;
  std::array< QueueDropState, 36 > qac_reg_queue_drop_state_;
  std::array< QueueDropState, 36 > qac_reg_queue_drop_yel_state_;
  std::array< QueueDropState, 36 > qac_reg_queue_drop_red_state_;
  QacQueueStateMask qac_reg_qac_queue_state_mask_;
  std::array< PortDropState, 72 > qac_reg_port_drop_state_;
  std::array< QacQueueStateVisibleBmp, 9 > qac_reg_qac_queue_state_visible_bmp_;
  std::array< QacDropReasonBmp, 72 > qac_reg_qac_drop_reason_bmp_;
  PipeBlockRegIntr qac_reg_intr_;
private:
  static int StartOffset(
      int index_tm_qac_pipe_rspec
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    offset += 0x100000; // to get to tm_qac_top
    offset += 0x20000; // to get to qac_pipe
    assert(index_tm_qac_pipe_rspec < 4);
    offset += index_tm_qac_pipe_rspec * 0x8000; // tm_qac_pipe_rspec[]
    return offset;
  }

};





  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_PIPE_BLOCK_REG_H__
