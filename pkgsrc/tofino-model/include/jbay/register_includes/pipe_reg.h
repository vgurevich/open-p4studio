/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PIPE_REG_H__
#define __REGISTER_INCLUDES_PIPE_REG_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "cnt32.h"
#include "cnt32_inc.h"
#include "cnt48_inc.h"
#include "pipe_reg_debug_bus_ctrl.h"
#include "pipe_reg_drop_cnt_table_mbe_err_log.h"
#include "pipe_reg_drop_cnt_table_sbe_err_log.h"
#include "pipe_reg_intr.h"
#include "pipe_reg_ppg_mapping_table_mbe_err_log.h"
#include "pipe_reg_ppg_mapping_table_sbe_err_log.h"
#include "pipe_reg_qid_map_mbe_err_log.h"
#include "pipe_reg_qid_map_sbe_err_log.h"
#include "pipe_reg_wac_ecc.h"
#include "wac_bypass.h"
#include "wac_debug_register.h"
#include "wac_offset.h"
#include "wac_pipe_ctrl.h"
#include "wac_pipe_mac_spd.h"
#include "wac_port_config.h"
#include "wac_port_ct_dis.h"
#include "wac_pre_fifo_mapping.h"
#include "wac_rm_pfc_state.h"

namespace jbay {
  namespace register_classes {

class PipeReg : public model_core::RegisterBlock<RegisterCallback> {
public:
  PipeReg(
      int chipNumber, int index_tm_wac_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_wac_pipe_rspec), 1956, false, write_callback, read_callback, std::string("PipeReg")+":"+boost::lexical_cast<std::string>(index_tm_wac_pipe_rspec))
    {
    }
  PipeReg(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PipeReg")
    {
    }
public:





  WacPipeCtrl &wac_reg_wac_pipe_ctrl() { return wac_reg_wac_pipe_ctrl_; }







  WacPipeMacSpd &wac_reg_wac_pipe_mac_spd(int j0) { return wac_reg_wac_pipe_mac_spd_[j0]; }





  WacBypass &wac_reg_wac_bypass_config() { return wac_reg_wac_bypass_config_; }





  Cnt32Inc &wac_reg_ctr_drop_in_err() { return wac_reg_ctr_drop_in_err_; }





  Cnt32Inc &wac_reg_ctr_drop_fuse_pipe() { return wac_reg_ctr_drop_fuse_pipe_; }





  Cnt32Inc &wac_reg_ctr_drop_no_dst() { return wac_reg_ctr_drop_no_dst_; }







  Cnt32Inc &wac_reg_ap_red_drop(int j0) { return wac_reg_ap_red_drop_[j0]; }







  Cnt32Inc &wac_reg_ap_yel_drop(int j0) { return wac_reg_ap_yel_drop_[j0]; }







  Cnt32Inc &wac_reg_ap_green_drop(int j0) { return wac_reg_ap_green_drop_[j0]; }





  Cnt32 &wac_reg_ctr_drop_sop_by_sop() { return wac_reg_ctr_drop_sop_by_sop_; }





  Cnt32 &wac_reg_ctr_caa_full() { return wac_reg_ctr_caa_full_; }





  Cnt48Inc &wac_reg_ctr_ctrl_pkt() { return wac_reg_ctr_ctrl_pkt_; }





  Cnt48Inc &wac_reg_ctr_vld_sop() { return wac_reg_ctr_vld_sop_; }





  Cnt48Inc &wac_reg_wac_drop_buf_full() { return wac_reg_wac_drop_buf_full_; }





  Cnt48Inc &wac_reg_wac_drop_psc_full() { return wac_reg_wac_drop_psc_full_; }





  Cnt48Inc &wac_reg_wac_inerror_drop() { return wac_reg_wac_inerror_drop_; }





  Cnt48Inc &wac_reg_wac_inerror_skip_drop() { return wac_reg_wac_inerror_skip_drop_; }







  Cnt32Inc &wac_reg_wac_iport_sop_cnt(int j0) { return wac_reg_wac_iport_sop_cnt_[j0]; }





  WacDebugRegister &wac_reg_wac_debug_register() { return wac_reg_wac_debug_register_; }







  WacOffset &wac_reg_offset_profile(int j0) { return wac_reg_offset_profile_[j0]; }








  WacPortConfig &wac_reg_port_config(int j0) { return wac_reg_port_config_[j0]; }








  WacRmPfcState &wac_reg_wac_rm_pfc_state(int j0) { return wac_reg_wac_rm_pfc_state_[j0]; }





  WacPortCtDis &wac_reg_wac_port_ct_dis() { return wac_reg_wac_port_ct_dis_; }








  PipeRegWacEcc &wac_reg_wac_ecc() { return wac_reg_wac_ecc_; }





  PipeRegPpgMappingTableSbeErrLog &wac_reg_ppg_mapping_table_sbe_err_log() { return wac_reg_ppg_mapping_table_sbe_err_log_; }





  PipeRegPpgMappingTableMbeErrLog &wac_reg_ppg_mapping_table_mbe_err_log() { return wac_reg_ppg_mapping_table_mbe_err_log_; }





  PipeRegDropCntTableSbeErrLog &wac_reg_drop_cnt_table_sbe_err_log() { return wac_reg_drop_cnt_table_sbe_err_log_; }





  PipeRegDropCntTableMbeErrLog &wac_reg_drop_cnt_table_mbe_err_log() { return wac_reg_drop_cnt_table_mbe_err_log_; }





  PipeRegQidMapSbeErrLog &wac_reg_qid_map_sbe_err_log() { return wac_reg_qid_map_sbe_err_log_; }





  PipeRegQidMapMbeErrLog &wac_reg_qid_map_mbe_err_log() { return wac_reg_qid_map_mbe_err_log_; }







  WacPreFifoMapping &wac_reg_wac_pre_fifo_mapping(int j0) { return wac_reg_wac_pre_fifo_mapping_[j0]; }





  PipeRegDebugBusCtrl &wac_reg_debug_bus_ctrl() { return wac_reg_debug_bus_ctrl_; }
  PipeRegIntr &wac_reg_intr() { return wac_reg_intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      wac_reg_wac_pipe_ctrl_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x64) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_reg_wac_pipe_mac_spd_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      if (read_callback_) read_callback_();
      wac_reg_wac_bypass_config_.read( offset, data );
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      if (read_callback_) read_callback_();
      wac_reg_ctr_drop_in_err_.read( offset, data );
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      if (read_callback_) read_callback_();
      wac_reg_ctr_drop_fuse_pipe_.read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      if (read_callback_) read_callback_();
      wac_reg_ctr_drop_no_dst_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x90) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_reg_ap_red_drop_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_reg_ap_yel_drop_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_reg_ap_green_drop_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      if (read_callback_) read_callback_();
      wac_reg_ctr_drop_sop_by_sop_.read( offset, data );
    }
    else if (offset >= 0xb4 && offset < 0xb8) {
      offset -= 0xb4;
      if (read_callback_) read_callback_();
      wac_reg_ctr_caa_full_.read( offset, data );
    }
    else if (offset >= 0xb8 && offset < 0xc0) {
      offset -= 0xb8;
      if (read_callback_) read_callback_();
      wac_reg_ctr_ctrl_pkt_.read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xc8) {
      offset -= 0xc0;
      if (read_callback_) read_callback_();
      wac_reg_ctr_vld_sop_.read( offset, data );
    }
    else if (offset >= 0xc8 && offset < 0xd0) {
      offset -= 0xc8;
      if (read_callback_) read_callback_();
      wac_reg_wac_drop_buf_full_.read( offset, data );
    }
    else if (offset >= 0xd0 && offset < 0xd8) {
      offset -= 0xd0;
      if (read_callback_) read_callback_();
      wac_reg_wac_drop_psc_full_.read( offset, data );
    }
    else if (offset >= 0xd8 && offset < 0xe0) {
      offset -= 0xd8;
      if (read_callback_) read_callback_();
      wac_reg_wac_inerror_drop_.read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0xe8) {
      offset -= 0xe0;
      if (read_callback_) read_callback_();
      wac_reg_wac_inerror_skip_drop_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x324) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_reg_wac_iport_sop_cnt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x324 && offset < 0x328) {
      offset -= 0x324;
      if (read_callback_) read_callback_();
      wac_reg_wac_debug_register_.read( offset, data );
    }
    else if (offset >= 0x380 && offset < 0x400) {
      offset -= 0x380;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_reg_offset_profile_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x400 && offset < 0x524) {
      offset -= 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_reg_port_config_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x600 && offset < 0x720) {
      offset -= 0x600;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_reg_wac_rm_pfc_state_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x720 && offset < 0x72c) {
      offset -= 0x720;
      if (read_callback_) read_callback_();
      wac_reg_wac_port_ct_dis_.read( offset, data );
    }
    else if (offset >= 0x72c && offset < 0x730) {
      offset -= 0x72c;
      if (read_callback_) read_callback_();
      wac_reg_wac_ecc_.read( offset, data );
    }
    else if (offset >= 0x754 && offset < 0x758) {
      offset -= 0x754;
      if (read_callback_) read_callback_();
      wac_reg_ppg_mapping_table_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x758 && offset < 0x75c) {
      offset -= 0x758;
      if (read_callback_) read_callback_();
      wac_reg_ppg_mapping_table_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x75c && offset < 0x760) {
      offset -= 0x75c;
      if (read_callback_) read_callback_();
      wac_reg_drop_cnt_table_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x760 && offset < 0x764) {
      offset -= 0x760;
      if (read_callback_) read_callback_();
      wac_reg_drop_cnt_table_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x764 && offset < 0x768) {
      offset -= 0x764;
      if (read_callback_) read_callback_();
      wac_reg_qid_map_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x768 && offset < 0x76c) {
      offset -= 0x768;
      if (read_callback_) read_callback_();
      wac_reg_qid_map_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x780 && offset < 0x7a0) {
      offset -= 0x780;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_reg_wac_pre_fifo_mapping_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x7a0 && offset < 0x7a4) {
      offset -= 0x7a0;
      if (read_callback_) read_callback_();
      wac_reg_debug_bus_ctrl_.read( offset, data );
    }
    else if (offset >= 0x740 && offset < 0x754) {
      offset -= 0x740;
      if (read_callback_) read_callback_();
      wac_reg_intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      wac_reg_wac_pipe_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x64) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_reg_wac_pipe_mac_spd_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      wac_reg_wac_bypass_config_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      wac_reg_ctr_drop_in_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      wac_reg_ctr_drop_fuse_pipe_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      wac_reg_ctr_drop_no_dst_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x90) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_reg_ap_red_drop_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_reg_ap_yel_drop_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_reg_ap_green_drop_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      wac_reg_ctr_drop_sop_by_sop_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb4 && offset < 0xb8) {
      offset -= 0xb4;
      wac_reg_ctr_caa_full_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb8 && offset < 0xc0) {
      offset -= 0xb8;
      wac_reg_ctr_ctrl_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xc8) {
      offset -= 0xc0;
      wac_reg_ctr_vld_sop_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc8 && offset < 0xd0) {
      offset -= 0xc8;
      wac_reg_wac_drop_buf_full_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd0 && offset < 0xd8) {
      offset -= 0xd0;
      wac_reg_wac_drop_psc_full_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd8 && offset < 0xe0) {
      offset -= 0xd8;
      wac_reg_wac_inerror_drop_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0xe8) {
      offset -= 0xe0;
      wac_reg_wac_inerror_skip_drop_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x324) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_reg_wac_iport_sop_cnt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x324 && offset < 0x328) {
      offset -= 0x324;
      wac_reg_wac_debug_register_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x380 && offset < 0x400) {
      offset -= 0x380;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_reg_offset_profile_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400 && offset < 0x524) {
      offset -= 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_reg_port_config_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x600 && offset < 0x720) {
      offset -= 0x600;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_reg_wac_rm_pfc_state_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x720 && offset < 0x72c) {
      offset -= 0x720;
      wac_reg_wac_port_ct_dis_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x72c && offset < 0x730) {
      offset -= 0x72c;
      wac_reg_wac_ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x754 && offset < 0x758) {
      offset -= 0x754;
      wac_reg_ppg_mapping_table_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x758 && offset < 0x75c) {
      offset -= 0x758;
      wac_reg_ppg_mapping_table_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x75c && offset < 0x760) {
      offset -= 0x75c;
      wac_reg_drop_cnt_table_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x760 && offset < 0x764) {
      offset -= 0x760;
      wac_reg_drop_cnt_table_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x764 && offset < 0x768) {
      offset -= 0x764;
      wac_reg_qid_map_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x768 && offset < 0x76c) {
      offset -= 0x768;
      wac_reg_qid_map_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x780 && offset < 0x7a0) {
      offset -= 0x780;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_reg_wac_pre_fifo_mapping_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7a0 && offset < 0x7a4) {
      offset -= 0x7a0;
      wac_reg_debug_bus_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x740 && offset < 0x754) {
      offset -= 0x740;
      wac_reg_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    wac_reg_wac_pipe_ctrl_.reset();
    for (auto &f0 : wac_reg_wac_pipe_mac_spd_) {
      f0.reset();
    }
    wac_reg_wac_bypass_config_.reset();
    wac_reg_ctr_drop_in_err_.reset();
    wac_reg_ctr_drop_fuse_pipe_.reset();
    wac_reg_ctr_drop_no_dst_.reset();
    for (auto &f0 : wac_reg_ap_red_drop_) {
      f0.reset();
    }
    for (auto &f0 : wac_reg_ap_yel_drop_) {
      f0.reset();
    }
    for (auto &f0 : wac_reg_ap_green_drop_) {
      f0.reset();
    }
    wac_reg_ctr_drop_sop_by_sop_.reset();
    wac_reg_ctr_caa_full_.reset();
    wac_reg_ctr_ctrl_pkt_.reset();
    wac_reg_ctr_vld_sop_.reset();
    wac_reg_wac_drop_buf_full_.reset();
    wac_reg_wac_drop_psc_full_.reset();
    wac_reg_wac_inerror_drop_.reset();
    wac_reg_wac_inerror_skip_drop_.reset();
    for (auto &f0 : wac_reg_wac_iport_sop_cnt_) {
      f0.reset();
    }
    wac_reg_wac_debug_register_.reset();
    for (auto &f0 : wac_reg_offset_profile_) {
      f0.reset();
    }
    for (auto &f0 : wac_reg_port_config_) {
      f0.reset();
    }
    for (auto &f0 : wac_reg_wac_rm_pfc_state_) {
      f0.reset();
    }
    wac_reg_wac_port_ct_dis_.reset();
    wac_reg_wac_ecc_.reset();
    wac_reg_ppg_mapping_table_sbe_err_log_.reset();
    wac_reg_ppg_mapping_table_mbe_err_log_.reset();
    wac_reg_drop_cnt_table_sbe_err_log_.reset();
    wac_reg_drop_cnt_table_mbe_err_log_.reset();
    wac_reg_qid_map_sbe_err_log_.reset();
    wac_reg_qid_map_mbe_err_log_.reset();
    for (auto &f0 : wac_reg_wac_pre_fifo_mapping_) {
      f0.reset();
    }
    wac_reg_debug_bus_ctrl_.reset();
    wac_reg_intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += wac_reg_wac_pipe_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x64) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_reg_wac_pipe_mac_spd_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      r += wac_reg_wac_bypass_config_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      r += wac_reg_ctr_drop_in_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      r += wac_reg_ctr_drop_fuse_pipe_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      r += wac_reg_ctr_drop_no_dst_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x90) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_reg_ap_red_drop_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_reg_ap_yel_drop_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_reg_ap_green_drop_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      r += wac_reg_ctr_drop_sop_by_sop_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb4 && offset < 0xb8) {
      offset -= 0xb4;
      r += wac_reg_ctr_caa_full_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb8 && offset < 0xc0) {
      offset -= 0xb8;
      r += wac_reg_ctr_ctrl_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xc8) {
      offset -= 0xc0;
      r += wac_reg_ctr_vld_sop_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc8 && offset < 0xd0) {
      offset -= 0xc8;
      r += wac_reg_wac_drop_buf_full_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd0 && offset < 0xd8) {
      offset -= 0xd0;
      r += wac_reg_wac_drop_psc_full_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd8 && offset < 0xe0) {
      offset -= 0xd8;
      r += wac_reg_wac_inerror_drop_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0xe8) {
      offset -= 0xe0;
      r += wac_reg_wac_inerror_skip_drop_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x324) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_reg_wac_iport_sop_cnt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x324 && offset < 0x328) {
      offset -= 0x324;
      r += wac_reg_wac_debug_register_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x380 && offset < 0x400) {
      offset -= 0x380;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_reg_offset_profile_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400 && offset < 0x524) {
      offset -= 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_reg_port_config_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x600 && offset < 0x720) {
      offset -= 0x600;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_reg_wac_rm_pfc_state_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x720 && offset < 0x72c) {
      offset -= 0x720;
      r += wac_reg_wac_port_ct_dis_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x72c && offset < 0x730) {
      offset -= 0x72c;
      r += wac_reg_wac_ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x754 && offset < 0x758) {
      offset -= 0x754;
      r += wac_reg_ppg_mapping_table_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x758 && offset < 0x75c) {
      offset -= 0x758;
      r += wac_reg_ppg_mapping_table_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x75c && offset < 0x760) {
      offset -= 0x75c;
      r += wac_reg_drop_cnt_table_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x760 && offset < 0x764) {
      offset -= 0x760;
      r += wac_reg_drop_cnt_table_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x764 && offset < 0x768) {
      offset -= 0x764;
      r += wac_reg_qid_map_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x768 && offset < 0x76c) {
      offset -= 0x768;
      r += wac_reg_qid_map_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x780 && offset < 0x7a0) {
      offset -= 0x780;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_reg_wac_pre_fifo_mapping_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7a0 && offset < 0x7a4) {
      offset -= 0x7a0;
      r += wac_reg_debug_bus_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x740 && offset < 0x754) {
      offset -= 0x740;
      r += wac_reg_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += wac_reg_wac_pipe_ctrl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<9;++a0) {
      r += wac_reg_wac_pipe_mac_spd_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wac_reg_wac_bypass_config_.to_string(print_zeros,indent_string) ;
    r += wac_reg_ctr_drop_in_err_.to_string(print_zeros,indent_string) ;
    r += wac_reg_ctr_drop_fuse_pipe_.to_string(print_zeros,indent_string) ;
    r += wac_reg_ctr_drop_no_dst_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_reg_ap_red_drop_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_reg_ap_yel_drop_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_reg_ap_green_drop_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wac_reg_ctr_drop_sop_by_sop_.to_string(print_zeros,indent_string) ;
    r += wac_reg_ctr_caa_full_.to_string(print_zeros,indent_string) ;
    r += wac_reg_ctr_ctrl_pkt_.to_string(print_zeros,indent_string) ;
    r += wac_reg_ctr_vld_sop_.to_string(print_zeros,indent_string) ;
    r += wac_reg_wac_drop_buf_full_.to_string(print_zeros,indent_string) ;
    r += wac_reg_wac_drop_psc_full_.to_string(print_zeros,indent_string) ;
    r += wac_reg_wac_inerror_drop_.to_string(print_zeros,indent_string) ;
    r += wac_reg_wac_inerror_skip_drop_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<73;++a0) {
      r += wac_reg_wac_iport_sop_cnt_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wac_reg_wac_debug_register_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<32;++a0) {
      r += wac_reg_offset_profile_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<73;++a0) {
      r += wac_reg_port_config_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<72;++a0) {
      r += wac_reg_wac_rm_pfc_state_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wac_reg_wac_port_ct_dis_.to_string(print_zeros,indent_string) ;
    r += wac_reg_wac_ecc_.to_string(print_zeros,indent_string) ;
    r += wac_reg_ppg_mapping_table_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += wac_reg_ppg_mapping_table_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += wac_reg_drop_cnt_table_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += wac_reg_drop_cnt_table_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += wac_reg_qid_map_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += wac_reg_qid_map_mbe_err_log_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<8;++a0) {
      r += wac_reg_wac_pre_fifo_mapping_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wac_reg_debug_bus_ctrl_.to_string(print_zeros,indent_string) ;
    r += wac_reg_intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  WacPipeCtrl wac_reg_wac_pipe_ctrl_;
  std::array< WacPipeMacSpd, 9 > wac_reg_wac_pipe_mac_spd_;
  WacBypass wac_reg_wac_bypass_config_;
  Cnt32Inc wac_reg_ctr_drop_in_err_;
  Cnt32Inc wac_reg_ctr_drop_fuse_pipe_;
  Cnt32Inc wac_reg_ctr_drop_no_dst_;
  std::array< Cnt32Inc, 4 > wac_reg_ap_red_drop_;
  std::array< Cnt32Inc, 4 > wac_reg_ap_yel_drop_;
  std::array< Cnt32Inc, 4 > wac_reg_ap_green_drop_;
  Cnt32 wac_reg_ctr_drop_sop_by_sop_;
  Cnt32 wac_reg_ctr_caa_full_;
  Cnt48Inc wac_reg_ctr_ctrl_pkt_;
  Cnt48Inc wac_reg_ctr_vld_sop_;
  Cnt48Inc wac_reg_wac_drop_buf_full_;
  Cnt48Inc wac_reg_wac_drop_psc_full_;
  Cnt48Inc wac_reg_wac_inerror_drop_;
  Cnt48Inc wac_reg_wac_inerror_skip_drop_;
  std::array< Cnt32Inc, 73 > wac_reg_wac_iport_sop_cnt_;
  WacDebugRegister wac_reg_wac_debug_register_;
  std::array< WacOffset, 32 > wac_reg_offset_profile_;
  std::array< WacPortConfig, 73 > wac_reg_port_config_;
  std::array< WacRmPfcState, 72 > wac_reg_wac_rm_pfc_state_;
  WacPortCtDis wac_reg_wac_port_ct_dis_;
  PipeRegWacEcc wac_reg_wac_ecc_;
  PipeRegPpgMappingTableSbeErrLog wac_reg_ppg_mapping_table_sbe_err_log_;
  PipeRegPpgMappingTableMbeErrLog wac_reg_ppg_mapping_table_mbe_err_log_;
  PipeRegDropCntTableSbeErrLog wac_reg_drop_cnt_table_sbe_err_log_;
  PipeRegDropCntTableMbeErrLog wac_reg_drop_cnt_table_mbe_err_log_;
  PipeRegQidMapSbeErrLog wac_reg_qid_map_sbe_err_log_;
  PipeRegQidMapMbeErrLog wac_reg_qid_map_mbe_err_log_;
  std::array< WacPreFifoMapping, 8 > wac_reg_wac_pre_fifo_mapping_;
  PipeRegDebugBusCtrl wac_reg_debug_bus_ctrl_;
  PipeRegIntr wac_reg_intr_;
private:
  static int StartOffset(
      int index_tm_wac_pipe_rspec
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    assert(index_tm_wac_pipe_rspec < 4);
    offset += index_tm_wac_pipe_rspec * 0x8000; // tm_wac_pipe_rspec[]
    return offset;
  }

};





  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_PIPE_REG_H__
