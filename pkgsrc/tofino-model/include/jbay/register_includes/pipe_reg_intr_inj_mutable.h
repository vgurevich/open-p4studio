/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PIPE_REG_INTR_INJ_MUTABLE_H__
#define __REGISTER_INCLUDES_PIPE_REG_INTR_INJ_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class PipeRegIntrInjMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PipeRegIntrInjMutable(
      int chipNumber, int index_tm_wac_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_wac_pipe_rspec), 4, true, write_callback, read_callback, std::string("PipeRegIntrInjMutable")+":"+boost::lexical_cast<std::string>(index_tm_wac_pipe_rspec))
    {
    }
  PipeRegIntrInjMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PipeRegIntrInjMutable")
    {
    }
public:
  uint8_t ppg_mapping_sbe() { return ppg_mapping_sbe_; }
  void ppg_mapping_sbe(const uint8_t &v) { ppg_mapping_sbe_=v; }
  uint8_t ppg_mapping_mbe() { return ppg_mapping_mbe_; }
  void ppg_mapping_mbe(const uint8_t &v) { ppg_mapping_mbe_=v; }
  uint8_t drop_cnt_sbe() { return drop_cnt_sbe_; }
  void drop_cnt_sbe(const uint8_t &v) { drop_cnt_sbe_=v; }
  uint8_t drop_cnt_mbe() { return drop_cnt_mbe_; }
  void drop_cnt_mbe(const uint8_t &v) { drop_cnt_mbe_=v; }
  uint8_t pfc_vis_sbe() { return pfc_vis_sbe_; }
  void pfc_vis_sbe(const uint8_t &v) { pfc_vis_sbe_=v; }
  uint8_t pfc_vis_mbe() { return pfc_vis_mbe_; }
  void pfc_vis_mbe(const uint8_t &v) { pfc_vis_mbe_=v; }
  uint8_t sch_fcr_sbe() { return sch_fcr_sbe_; }
  void sch_fcr_sbe(const uint8_t &v) { sch_fcr_sbe_=v; }
  uint8_t sch_fcr_mbe() { return sch_fcr_mbe_; }
  void sch_fcr_mbe(const uint8_t &v) { sch_fcr_mbe_=v; }
  uint8_t qid_map_sbe() { return qid_map_sbe_; }
  void qid_map_sbe(const uint8_t &v) { qid_map_sbe_=v; }
  uint8_t qid_map_mbe() { return qid_map_mbe_; }
  void qid_map_mbe(const uint8_t &v) { qid_map_mbe_=v; }
  uint8_t debug_sts() { return debug_sts_; }
  void debug_sts(const uint8_t &v) { debug_sts_=v; }
  uint8_t out_mop_err() { return out_mop_err_; }
  void out_mop_err(const uint8_t &v) { out_mop_err_=v; }
  uint8_t out_eop_err() { return out_eop_err_; }
  void out_eop_err(const uint8_t &v) { out_eop_err_=v; }
  uint8_t out_sop_err() { return out_sop_err_; }
  void out_sop_err(const uint8_t &v) { out_sop_err_=v; }
  uint8_t out_pack_err() { return out_pack_err_; }
  void out_pack_err(const uint8_t &v) { out_pack_err_=v; }
  uint8_t wac2qac_merr() { return wac2qac_merr_; }
  void wac2qac_merr(const uint8_t &v) { wac2qac_merr_=v; }
  uint8_t wac2qac_serr() { return wac2qac_serr_; }
  void wac2qac_serr(const uint8_t &v) { wac2qac_serr_=v; }
  uint8_t wac2qac_pushfull() { return wac2qac_pushfull_; }
  void wac2qac_pushfull(const uint8_t &v) { wac2qac_pushfull_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (ppg_mapping_sbe_ & 0x1);
    *data |= ((ppg_mapping_mbe_ & 0x1) << 1);
    *data |= ((drop_cnt_sbe_ & 0x1) << 2);
    *data |= ((drop_cnt_mbe_ & 0x1) << 3);
    *data |= ((pfc_vis_sbe_ & 0x1) << 4);
    *data |= ((pfc_vis_mbe_ & 0x1) << 5);
    *data |= ((sch_fcr_sbe_ & 0x1) << 6);
    *data |= ((sch_fcr_mbe_ & 0x1) << 7);
    *data |= ((qid_map_sbe_ & 0x1) << 8);
    *data |= ((qid_map_mbe_ & 0x1) << 9);
    *data |= ((debug_sts_ & 0x1) << 10);
    *data |= ((out_mop_err_ & 0x1) << 11);
    *data |= ((out_eop_err_ & 0x1) << 12);
    *data |= ((out_sop_err_ & 0x1) << 13);
    *data |= ((out_pack_err_ & 0x1) << 14);
    *data |= ((wac2qac_merr_ & 0x1) << 15);
    *data |= ((wac2qac_serr_ & 0x1) << 16);
    *data |= ((wac2qac_pushfull_ & 0x1) << 17);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    ppg_mapping_sbe_ = (data & 0x1);
    ppg_mapping_mbe_ = ((data >> 1) & 0x1);
    drop_cnt_sbe_ = ((data >> 2) & 0x1);
    drop_cnt_mbe_ = ((data >> 3) & 0x1);
    pfc_vis_sbe_ = ((data >> 4) & 0x1);
    pfc_vis_mbe_ = ((data >> 5) & 0x1);
    sch_fcr_sbe_ = ((data >> 6) & 0x1);
    sch_fcr_mbe_ = ((data >> 7) & 0x1);
    qid_map_sbe_ = ((data >> 8) & 0x1);
    qid_map_mbe_ = ((data >> 9) & 0x1);
    debug_sts_ = ((data >> 10) & 0x1);
    out_mop_err_ = ((data >> 11) & 0x1);
    out_eop_err_ = ((data >> 12) & 0x1);
    out_sop_err_ = ((data >> 13) & 0x1);
    out_pack_err_ = ((data >> 14) & 0x1);
    wac2qac_merr_ = ((data >> 15) & 0x1);
    wac2qac_serr_ = ((data >> 16) & 0x1);
    wac2qac_pushfull_ = ((data >> 17) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    ppg_mapping_sbe_ = 0x0;
    ppg_mapping_mbe_ = 0x0;
    drop_cnt_sbe_ = 0x0;
    drop_cnt_mbe_ = 0x0;
    pfc_vis_sbe_ = 0x0;
    pfc_vis_mbe_ = 0x0;
    sch_fcr_sbe_ = 0x0;
    sch_fcr_mbe_ = 0x0;
    qid_map_sbe_ = 0x0;
    qid_map_mbe_ = 0x0;
    debug_sts_ = 0x0;
    out_mop_err_ = 0x0;
    out_eop_err_ = 0x0;
    out_sop_err_ = 0x0;
    out_pack_err_ = 0x0;
    wac2qac_merr_ = 0x0;
    wac2qac_serr_ = 0x0;
    wac2qac_pushfull_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PipeRegIntrInjMutable") + ":\n";
    r += indent_string + "  " + std::string("ppg_mapping_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ppg_mapping_sbe_) ) + "\n";
    all_zeros &= (0 == ppg_mapping_sbe_);
    r += indent_string + "  " + std::string("ppg_mapping_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ppg_mapping_mbe_) ) + "\n";
    all_zeros &= (0 == ppg_mapping_mbe_);
    r += indent_string + "  " + std::string("drop_cnt_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_cnt_sbe_) ) + "\n";
    all_zeros &= (0 == drop_cnt_sbe_);
    r += indent_string + "  " + std::string("drop_cnt_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_cnt_mbe_) ) + "\n";
    all_zeros &= (0 == drop_cnt_mbe_);
    r += indent_string + "  " + std::string("pfc_vis_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_vis_sbe_) ) + "\n";
    all_zeros &= (0 == pfc_vis_sbe_);
    r += indent_string + "  " + std::string("pfc_vis_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_vis_mbe_) ) + "\n";
    all_zeros &= (0 == pfc_vis_mbe_);
    r += indent_string + "  " + std::string("sch_fcr_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(sch_fcr_sbe_) ) + "\n";
    all_zeros &= (0 == sch_fcr_sbe_);
    r += indent_string + "  " + std::string("sch_fcr_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(sch_fcr_mbe_) ) + "\n";
    all_zeros &= (0 == sch_fcr_mbe_);
    r += indent_string + "  " + std::string("qid_map_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qid_map_sbe_) ) + "\n";
    all_zeros &= (0 == qid_map_sbe_);
    r += indent_string + "  " + std::string("qid_map_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qid_map_mbe_) ) + "\n";
    all_zeros &= (0 == qid_map_mbe_);
    r += indent_string + "  " + std::string("debug_sts") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(debug_sts_) ) + "\n";
    all_zeros &= (0 == debug_sts_);
    r += indent_string + "  " + std::string("out_mop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(out_mop_err_) ) + "\n";
    all_zeros &= (0 == out_mop_err_);
    r += indent_string + "  " + std::string("out_eop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(out_eop_err_) ) + "\n";
    all_zeros &= (0 == out_eop_err_);
    r += indent_string + "  " + std::string("out_sop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(out_sop_err_) ) + "\n";
    all_zeros &= (0 == out_sop_err_);
    r += indent_string + "  " + std::string("out_pack_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(out_pack_err_) ) + "\n";
    all_zeros &= (0 == out_pack_err_);
    r += indent_string + "  " + std::string("wac2qac_merr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wac2qac_merr_) ) + "\n";
    all_zeros &= (0 == wac2qac_merr_);
    r += indent_string + "  " + std::string("wac2qac_serr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wac2qac_serr_) ) + "\n";
    all_zeros &= (0 == wac2qac_serr_);
    r += indent_string + "  " + std::string("wac2qac_pushfull") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wac2qac_pushfull_) ) + "\n";
    all_zeros &= (0 == wac2qac_pushfull_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PipeRegIntrInjMutable") + ":\n";
    r += indent_string + "  " + std::string("ppg_mapping_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ppg_mapping_sbe_) ) + "\n";
    all_zeros &= (0 == ppg_mapping_sbe_);
    r += indent_string + "  " + std::string("ppg_mapping_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ppg_mapping_mbe_) ) + "\n";
    all_zeros &= (0 == ppg_mapping_mbe_);
    r += indent_string + "  " + std::string("drop_cnt_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_cnt_sbe_) ) + "\n";
    all_zeros &= (0 == drop_cnt_sbe_);
    r += indent_string + "  " + std::string("drop_cnt_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_cnt_mbe_) ) + "\n";
    all_zeros &= (0 == drop_cnt_mbe_);
    r += indent_string + "  " + std::string("pfc_vis_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_vis_sbe_) ) + "\n";
    all_zeros &= (0 == pfc_vis_sbe_);
    r += indent_string + "  " + std::string("pfc_vis_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_vis_mbe_) ) + "\n";
    all_zeros &= (0 == pfc_vis_mbe_);
    r += indent_string + "  " + std::string("sch_fcr_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(sch_fcr_sbe_) ) + "\n";
    all_zeros &= (0 == sch_fcr_sbe_);
    r += indent_string + "  " + std::string("sch_fcr_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(sch_fcr_mbe_) ) + "\n";
    all_zeros &= (0 == sch_fcr_mbe_);
    r += indent_string + "  " + std::string("qid_map_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qid_map_sbe_) ) + "\n";
    all_zeros &= (0 == qid_map_sbe_);
    r += indent_string + "  " + std::string("qid_map_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qid_map_mbe_) ) + "\n";
    all_zeros &= (0 == qid_map_mbe_);
    r += indent_string + "  " + std::string("debug_sts") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(debug_sts_) ) + "\n";
    all_zeros &= (0 == debug_sts_);
    r += indent_string + "  " + std::string("out_mop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(out_mop_err_) ) + "\n";
    all_zeros &= (0 == out_mop_err_);
    r += indent_string + "  " + std::string("out_eop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(out_eop_err_) ) + "\n";
    all_zeros &= (0 == out_eop_err_);
    r += indent_string + "  " + std::string("out_sop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(out_sop_err_) ) + "\n";
    all_zeros &= (0 == out_sop_err_);
    r += indent_string + "  " + std::string("out_pack_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(out_pack_err_) ) + "\n";
    all_zeros &= (0 == out_pack_err_);
    r += indent_string + "  " + std::string("wac2qac_merr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wac2qac_merr_) ) + "\n";
    all_zeros &= (0 == wac2qac_merr_);
    r += indent_string + "  " + std::string("wac2qac_serr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wac2qac_serr_) ) + "\n";
    all_zeros &= (0 == wac2qac_serr_);
    r += indent_string + "  " + std::string("wac2qac_pushfull") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wac2qac_pushfull_) ) + "\n";
    all_zeros &= (0 == wac2qac_pushfull_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t ppg_mapping_sbe_;
  uint8_t ppg_mapping_mbe_;
  uint8_t drop_cnt_sbe_;
  uint8_t drop_cnt_mbe_;
  uint8_t pfc_vis_sbe_;
  uint8_t pfc_vis_mbe_;
  uint8_t sch_fcr_sbe_;
  uint8_t sch_fcr_mbe_;
  uint8_t qid_map_sbe_;
  uint8_t qid_map_mbe_;
  uint8_t debug_sts_;
  uint8_t out_mop_err_;
  uint8_t out_eop_err_;
  uint8_t out_sop_err_;
  uint8_t out_pack_err_;
  uint8_t wac2qac_merr_;
  uint8_t wac2qac_serr_;
  uint8_t wac2qac_pushfull_;
private:
  static int StartOffset(
      int index_tm_wac_pipe_rspec
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    assert(index_tm_wac_pipe_rspec < 4);
    offset += index_tm_wac_pipe_rspec * 0x8000; // tm_wac_pipe_rspec[]
    offset += 0x74c; // to get to wac_reg_intr_inj
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_PIPE_REG_INTR_INJ_MUTABLE_H__
