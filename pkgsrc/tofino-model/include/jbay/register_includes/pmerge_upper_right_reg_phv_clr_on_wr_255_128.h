/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PMERGE_UPPER_RIGHT_REG_PHV_CLR_ON_WR_255_128_H__
#define __REGISTER_INCLUDES_PMERGE_UPPER_RIGHT_REG_PHV_CLR_ON_WR_255_128_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class PmergeUpperRightRegPhvClrOnWr_255_128 : public model_core::RegisterBlock<RegisterCallback> {
public:
  PmergeUpperRightRegPhvClrOnWr_255_128(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 16, false, write_callback, read_callback, std::string("PmergeUpperRightRegPhvClrOnWr_255_128")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PmergeUpperRightRegPhvClrOnWr_255_128(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PmergeUpperRightRegPhvClrOnWr_255_128")
    {
    }
public:



  uint8_t &clr(int j0) { return clr_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (clr_[0] & 0x1);
      *data |= ((clr_[1] & 0x1) << 1);
      *data |= ((clr_[2] & 0x1) << 2);
      *data |= ((clr_[3] & 0x1) << 3);
      *data |= ((clr_[4] & 0x1) << 4);
      *data |= ((clr_[5] & 0x1) << 5);
      *data |= ((clr_[6] & 0x1) << 6);
      *data |= ((clr_[7] & 0x1) << 7);
      *data |= ((clr_[8] & 0x1) << 8);
      *data |= ((clr_[9] & 0x1) << 9);
      *data |= ((clr_[10] & 0x1) << 10);
      *data |= ((clr_[11] & 0x1) << 11);
      *data |= ((clr_[12] & 0x1) << 12);
      *data |= ((clr_[13] & 0x1) << 13);
      *data |= ((clr_[14] & 0x1) << 14);
      *data |= ((clr_[15] & 0x1) << 15);
      *data |= ((clr_[16] & 0x1) << 16);
      *data |= ((clr_[17] & 0x1) << 17);
      *data |= ((clr_[18] & 0x1) << 18);
      *data |= ((clr_[19] & 0x1) << 19);
      *data |= ((clr_[20] & 0x1) << 20);
      *data |= ((clr_[21] & 0x1) << 21);
      *data |= ((clr_[22] & 0x1) << 22);
      *data |= ((clr_[23] & 0x1) << 23);
      *data |= ((clr_[24] & 0x1) << 24);
      *data |= ((clr_[25] & 0x1) << 25);
      *data |= ((clr_[26] & 0x1) << 26);
      *data |= ((clr_[27] & 0x1) << 27);
      *data |= ((clr_[28] & 0x1) << 28);
      *data |= ((clr_[29] & 0x1) << 29);
      *data |= ((clr_[30] & 0x1) << 30);
      *data |= ((clr_[31] & 0x1) << 31);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (clr_[32] & 0x1);
      *data |= ((clr_[33] & 0x1) << 1);
      *data |= ((clr_[34] & 0x1) << 2);
      *data |= ((clr_[35] & 0x1) << 3);
      *data |= ((clr_[36] & 0x1) << 4);
      *data |= ((clr_[37] & 0x1) << 5);
      *data |= ((clr_[38] & 0x1) << 6);
      *data |= ((clr_[39] & 0x1) << 7);
      *data |= ((clr_[40] & 0x1) << 8);
      *data |= ((clr_[41] & 0x1) << 9);
      *data |= ((clr_[42] & 0x1) << 10);
      *data |= ((clr_[43] & 0x1) << 11);
      *data |= ((clr_[44] & 0x1) << 12);
      *data |= ((clr_[45] & 0x1) << 13);
      *data |= ((clr_[46] & 0x1) << 14);
      *data |= ((clr_[47] & 0x1) << 15);
      *data |= ((clr_[48] & 0x1) << 16);
      *data |= ((clr_[49] & 0x1) << 17);
      *data |= ((clr_[50] & 0x1) << 18);
      *data |= ((clr_[51] & 0x1) << 19);
      *data |= ((clr_[52] & 0x1) << 20);
      *data |= ((clr_[53] & 0x1) << 21);
      *data |= ((clr_[54] & 0x1) << 22);
      *data |= ((clr_[55] & 0x1) << 23);
      *data |= ((clr_[56] & 0x1) << 24);
      *data |= ((clr_[57] & 0x1) << 25);
      *data |= ((clr_[58] & 0x1) << 26);
      *data |= ((clr_[59] & 0x1) << 27);
      *data |= ((clr_[60] & 0x1) << 28);
      *data |= ((clr_[61] & 0x1) << 29);
      *data |= ((clr_[62] & 0x1) << 30);
      *data |= ((clr_[63] & 0x1) << 31);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = (clr_[64] & 0x1);
      *data |= ((clr_[65] & 0x1) << 1);
      *data |= ((clr_[66] & 0x1) << 2);
      *data |= ((clr_[67] & 0x1) << 3);
      *data |= ((clr_[68] & 0x1) << 4);
      *data |= ((clr_[69] & 0x1) << 5);
      *data |= ((clr_[70] & 0x1) << 6);
      *data |= ((clr_[71] & 0x1) << 7);
      *data |= ((clr_[72] & 0x1) << 8);
      *data |= ((clr_[73] & 0x1) << 9);
      *data |= ((clr_[74] & 0x1) << 10);
      *data |= ((clr_[75] & 0x1) << 11);
      *data |= ((clr_[76] & 0x1) << 12);
      *data |= ((clr_[77] & 0x1) << 13);
      *data |= ((clr_[78] & 0x1) << 14);
      *data |= ((clr_[79] & 0x1) << 15);
      *data |= ((clr_[80] & 0x1) << 16);
      *data |= ((clr_[81] & 0x1) << 17);
      *data |= ((clr_[82] & 0x1) << 18);
      *data |= ((clr_[83] & 0x1) << 19);
      *data |= ((clr_[84] & 0x1) << 20);
      *data |= ((clr_[85] & 0x1) << 21);
      *data |= ((clr_[86] & 0x1) << 22);
      *data |= ((clr_[87] & 0x1) << 23);
      *data |= ((clr_[88] & 0x1) << 24);
      *data |= ((clr_[89] & 0x1) << 25);
      *data |= ((clr_[90] & 0x1) << 26);
      *data |= ((clr_[91] & 0x1) << 27);
      *data |= ((clr_[92] & 0x1) << 28);
      *data |= ((clr_[93] & 0x1) << 29);
      *data |= ((clr_[94] & 0x1) << 30);
      *data |= ((clr_[95] & 0x1) << 31);
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = (clr_[96] & 0x1);
      *data |= ((clr_[97] & 0x1) << 1);
      *data |= ((clr_[98] & 0x1) << 2);
      *data |= ((clr_[99] & 0x1) << 3);
      *data |= ((clr_[100] & 0x1) << 4);
      *data |= ((clr_[101] & 0x1) << 5);
      *data |= ((clr_[102] & 0x1) << 6);
      *data |= ((clr_[103] & 0x1) << 7);
      *data |= ((clr_[104] & 0x1) << 8);
      *data |= ((clr_[105] & 0x1) << 9);
      *data |= ((clr_[106] & 0x1) << 10);
      *data |= ((clr_[107] & 0x1) << 11);
      *data |= ((clr_[108] & 0x1) << 12);
      *data |= ((clr_[109] & 0x1) << 13);
      *data |= ((clr_[110] & 0x1) << 14);
      *data |= ((clr_[111] & 0x1) << 15);
      *data |= ((clr_[112] & 0x1) << 16);
      *data |= ((clr_[113] & 0x1) << 17);
      *data |= ((clr_[114] & 0x1) << 18);
      *data |= ((clr_[115] & 0x1) << 19);
      *data |= ((clr_[116] & 0x1) << 20);
      *data |= ((clr_[117] & 0x1) << 21);
      *data |= ((clr_[118] & 0x1) << 22);
      *data |= ((clr_[119] & 0x1) << 23);
      *data |= ((clr_[120] & 0x1) << 24);
      *data |= ((clr_[121] & 0x1) << 25);
      *data |= ((clr_[122] & 0x1) << 26);
      *data |= ((clr_[123] & 0x1) << 27);
      *data |= ((clr_[124] & 0x1) << 28);
      *data |= ((clr_[125] & 0x1) << 29);
      *data |= ((clr_[126] & 0x1) << 30);
      *data |= ((clr_[127] & 0x1) << 31);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      clr_[0] = (data & 0x1);
      clr_[1] = ((data >> 1) & 0x1);
      clr_[2] = ((data >> 2) & 0x1);
      clr_[3] = ((data >> 3) & 0x1);
      clr_[4] = ((data >> 4) & 0x1);
      clr_[5] = ((data >> 5) & 0x1);
      clr_[6] = ((data >> 6) & 0x1);
      clr_[7] = ((data >> 7) & 0x1);
      clr_[8] = ((data >> 8) & 0x1);
      clr_[9] = ((data >> 9) & 0x1);
      clr_[10] = ((data >> 10) & 0x1);
      clr_[11] = ((data >> 11) & 0x1);
      clr_[12] = ((data >> 12) & 0x1);
      clr_[13] = ((data >> 13) & 0x1);
      clr_[14] = ((data >> 14) & 0x1);
      clr_[15] = ((data >> 15) & 0x1);
      clr_[16] = ((data >> 16) & 0x1);
      clr_[17] = ((data >> 17) & 0x1);
      clr_[18] = ((data >> 18) & 0x1);
      clr_[19] = ((data >> 19) & 0x1);
      clr_[20] = ((data >> 20) & 0x1);
      clr_[21] = ((data >> 21) & 0x1);
      clr_[22] = ((data >> 22) & 0x1);
      clr_[23] = ((data >> 23) & 0x1);
      clr_[24] = ((data >> 24) & 0x1);
      clr_[25] = ((data >> 25) & 0x1);
      clr_[26] = ((data >> 26) & 0x1);
      clr_[27] = ((data >> 27) & 0x1);
      clr_[28] = ((data >> 28) & 0x1);
      clr_[29] = ((data >> 29) & 0x1);
      clr_[30] = ((data >> 30) & 0x1);
      clr_[31] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      clr_[32] = (data & 0x1);
      clr_[33] = ((data >> 1) & 0x1);
      clr_[34] = ((data >> 2) & 0x1);
      clr_[35] = ((data >> 3) & 0x1);
      clr_[36] = ((data >> 4) & 0x1);
      clr_[37] = ((data >> 5) & 0x1);
      clr_[38] = ((data >> 6) & 0x1);
      clr_[39] = ((data >> 7) & 0x1);
      clr_[40] = ((data >> 8) & 0x1);
      clr_[41] = ((data >> 9) & 0x1);
      clr_[42] = ((data >> 10) & 0x1);
      clr_[43] = ((data >> 11) & 0x1);
      clr_[44] = ((data >> 12) & 0x1);
      clr_[45] = ((data >> 13) & 0x1);
      clr_[46] = ((data >> 14) & 0x1);
      clr_[47] = ((data >> 15) & 0x1);
      clr_[48] = ((data >> 16) & 0x1);
      clr_[49] = ((data >> 17) & 0x1);
      clr_[50] = ((data >> 18) & 0x1);
      clr_[51] = ((data >> 19) & 0x1);
      clr_[52] = ((data >> 20) & 0x1);
      clr_[53] = ((data >> 21) & 0x1);
      clr_[54] = ((data >> 22) & 0x1);
      clr_[55] = ((data >> 23) & 0x1);
      clr_[56] = ((data >> 24) & 0x1);
      clr_[57] = ((data >> 25) & 0x1);
      clr_[58] = ((data >> 26) & 0x1);
      clr_[59] = ((data >> 27) & 0x1);
      clr_[60] = ((data >> 28) & 0x1);
      clr_[61] = ((data >> 29) & 0x1);
      clr_[62] = ((data >> 30) & 0x1);
      clr_[63] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      clr_[64] = (data & 0x1);
      clr_[65] = ((data >> 1) & 0x1);
      clr_[66] = ((data >> 2) & 0x1);
      clr_[67] = ((data >> 3) & 0x1);
      clr_[68] = ((data >> 4) & 0x1);
      clr_[69] = ((data >> 5) & 0x1);
      clr_[70] = ((data >> 6) & 0x1);
      clr_[71] = ((data >> 7) & 0x1);
      clr_[72] = ((data >> 8) & 0x1);
      clr_[73] = ((data >> 9) & 0x1);
      clr_[74] = ((data >> 10) & 0x1);
      clr_[75] = ((data >> 11) & 0x1);
      clr_[76] = ((data >> 12) & 0x1);
      clr_[77] = ((data >> 13) & 0x1);
      clr_[78] = ((data >> 14) & 0x1);
      clr_[79] = ((data >> 15) & 0x1);
      clr_[80] = ((data >> 16) & 0x1);
      clr_[81] = ((data >> 17) & 0x1);
      clr_[82] = ((data >> 18) & 0x1);
      clr_[83] = ((data >> 19) & 0x1);
      clr_[84] = ((data >> 20) & 0x1);
      clr_[85] = ((data >> 21) & 0x1);
      clr_[86] = ((data >> 22) & 0x1);
      clr_[87] = ((data >> 23) & 0x1);
      clr_[88] = ((data >> 24) & 0x1);
      clr_[89] = ((data >> 25) & 0x1);
      clr_[90] = ((data >> 26) & 0x1);
      clr_[91] = ((data >> 27) & 0x1);
      clr_[92] = ((data >> 28) & 0x1);
      clr_[93] = ((data >> 29) & 0x1);
      clr_[94] = ((data >> 30) & 0x1);
      clr_[95] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      clr_[96] = (data & 0x1);
      clr_[97] = ((data >> 1) & 0x1);
      clr_[98] = ((data >> 2) & 0x1);
      clr_[99] = ((data >> 3) & 0x1);
      clr_[100] = ((data >> 4) & 0x1);
      clr_[101] = ((data >> 5) & 0x1);
      clr_[102] = ((data >> 6) & 0x1);
      clr_[103] = ((data >> 7) & 0x1);
      clr_[104] = ((data >> 8) & 0x1);
      clr_[105] = ((data >> 9) & 0x1);
      clr_[106] = ((data >> 10) & 0x1);
      clr_[107] = ((data >> 11) & 0x1);
      clr_[108] = ((data >> 12) & 0x1);
      clr_[109] = ((data >> 13) & 0x1);
      clr_[110] = ((data >> 14) & 0x1);
      clr_[111] = ((data >> 15) & 0x1);
      clr_[112] = ((data >> 16) & 0x1);
      clr_[113] = ((data >> 17) & 0x1);
      clr_[114] = ((data >> 18) & 0x1);
      clr_[115] = ((data >> 19) & 0x1);
      clr_[116] = ((data >> 20) & 0x1);
      clr_[117] = ((data >> 21) & 0x1);
      clr_[118] = ((data >> 22) & 0x1);
      clr_[119] = ((data >> 23) & 0x1);
      clr_[120] = ((data >> 24) & 0x1);
      clr_[121] = ((data >> 25) & 0x1);
      clr_[122] = ((data >> 26) & 0x1);
      clr_[123] = ((data >> 27) & 0x1);
      clr_[124] = ((data >> 28) & 0x1);
      clr_[125] = ((data >> 29) & 0x1);
      clr_[126] = ((data >> 30) & 0x1);
      clr_[127] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    clr_[0] = 0x0;
    clr_[1] = 0x0;
    clr_[2] = 0x0;
    clr_[3] = 0x0;
    clr_[4] = 0x0;
    clr_[5] = 0x0;
    clr_[6] = 0x0;
    clr_[7] = 0x0;
    clr_[8] = 0x0;
    clr_[9] = 0x0;
    clr_[10] = 0x0;
    clr_[11] = 0x0;
    clr_[12] = 0x0;
    clr_[13] = 0x0;
    clr_[14] = 0x0;
    clr_[15] = 0x0;
    clr_[16] = 0x0;
    clr_[17] = 0x0;
    clr_[18] = 0x0;
    clr_[19] = 0x0;
    clr_[20] = 0x0;
    clr_[21] = 0x0;
    clr_[22] = 0x0;
    clr_[23] = 0x0;
    clr_[24] = 0x0;
    clr_[25] = 0x0;
    clr_[26] = 0x0;
    clr_[27] = 0x0;
    clr_[28] = 0x0;
    clr_[29] = 0x0;
    clr_[30] = 0x0;
    clr_[31] = 0x0;
    clr_[32] = 0x0;
    clr_[33] = 0x0;
    clr_[34] = 0x0;
    clr_[35] = 0x0;
    clr_[36] = 0x0;
    clr_[37] = 0x0;
    clr_[38] = 0x0;
    clr_[39] = 0x0;
    clr_[40] = 0x0;
    clr_[41] = 0x0;
    clr_[42] = 0x0;
    clr_[43] = 0x0;
    clr_[44] = 0x0;
    clr_[45] = 0x0;
    clr_[46] = 0x0;
    clr_[47] = 0x0;
    clr_[48] = 0x0;
    clr_[49] = 0x0;
    clr_[50] = 0x0;
    clr_[51] = 0x0;
    clr_[52] = 0x0;
    clr_[53] = 0x0;
    clr_[54] = 0x0;
    clr_[55] = 0x0;
    clr_[56] = 0x0;
    clr_[57] = 0x0;
    clr_[58] = 0x0;
    clr_[59] = 0x0;
    clr_[60] = 0x0;
    clr_[61] = 0x0;
    clr_[62] = 0x0;
    clr_[63] = 0x0;
    clr_[64] = 0x0;
    clr_[65] = 0x0;
    clr_[66] = 0x0;
    clr_[67] = 0x0;
    clr_[68] = 0x0;
    clr_[69] = 0x0;
    clr_[70] = 0x0;
    clr_[71] = 0x0;
    clr_[72] = 0x0;
    clr_[73] = 0x0;
    clr_[74] = 0x0;
    clr_[75] = 0x0;
    clr_[76] = 0x0;
    clr_[77] = 0x0;
    clr_[78] = 0x0;
    clr_[79] = 0x0;
    clr_[80] = 0x0;
    clr_[81] = 0x0;
    clr_[82] = 0x0;
    clr_[83] = 0x0;
    clr_[84] = 0x0;
    clr_[85] = 0x0;
    clr_[86] = 0x0;
    clr_[87] = 0x0;
    clr_[88] = 0x0;
    clr_[89] = 0x0;
    clr_[90] = 0x0;
    clr_[91] = 0x0;
    clr_[92] = 0x0;
    clr_[93] = 0x0;
    clr_[94] = 0x0;
    clr_[95] = 0x0;
    clr_[96] = 0x0;
    clr_[97] = 0x0;
    clr_[98] = 0x0;
    clr_[99] = 0x0;
    clr_[100] = 0x0;
    clr_[101] = 0x0;
    clr_[102] = 0x0;
    clr_[103] = 0x0;
    clr_[104] = 0x0;
    clr_[105] = 0x0;
    clr_[106] = 0x0;
    clr_[107] = 0x0;
    clr_[108] = 0x0;
    clr_[109] = 0x0;
    clr_[110] = 0x0;
    clr_[111] = 0x0;
    clr_[112] = 0x0;
    clr_[113] = 0x0;
    clr_[114] = 0x0;
    clr_[115] = 0x0;
    clr_[116] = 0x0;
    clr_[117] = 0x0;
    clr_[118] = 0x0;
    clr_[119] = 0x0;
    clr_[120] = 0x0;
    clr_[121] = 0x0;
    clr_[122] = 0x0;
    clr_[123] = 0x0;
    clr_[124] = 0x0;
    clr_[125] = 0x0;
    clr_[126] = 0x0;
    clr_[127] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PmergeUpperRightRegPhvClrOnWr_255_128") + ":\n";
    for (uint32_t f=0;f<128;++f) {
      r += indent_string + "  " + std::string("clr") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(clr_[f]) ) + "\n";
      all_zeros &= (0 == clr_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PmergeUpperRightRegPhvClrOnWr_255_128") + ":\n";
    for (uint32_t f=0;f<128;++f) {
      r += indent_string + "  " + std::string("clr") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(clr_[f]) ) + "\n";
      all_zeros &= (0 == clr_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 128 > clr_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x12000; // to get to pmergereg
    offset += 0x1200; // to get to ur
    offset += 0x30; // to get to phv_clr_on_wr_255_128
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_PMERGE_UPPER_RIGHT_REG_PHV_CLR_ON_WR_255_128_H__
