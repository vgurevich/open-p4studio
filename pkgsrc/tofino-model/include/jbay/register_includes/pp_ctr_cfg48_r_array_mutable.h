/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PP_CTR_CFG48_R_ARRAY_MUTABLE_H__
#define __REGISTER_INCLUDES_PP_CTR_CFG48_R_ARRAY_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "pp_ctr_cfg48_r_mutable.h"

namespace jbay {
  namespace register_classes {

class PpCtrCfg48RArrayMutable : public model_core::RegisterBlock<RegisterArrayCallback> {
public:
  enum DprsrHoEEnum {
    kHer,
    kOutEgr
  };
  enum DprsrHoIEnum {
    kHir,
    kOutIngr
  };
public:
  PpCtrCfg48RArrayMutable(
      int chipNumber, int index_pipe_addrmap, RegisterArrayCallback& write_callback = 0, RegisterArrayCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 8 * ArraySize(index_pipe_addrmap, -1), true, write_callback, read_callback, std::string("PpCtrCfg48RArrayMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap)),
    array(RealArraySize(index_pipe_addrmap, -1)),
    size0_(ArraySize(index_pipe_addrmap, 0)),
    real_size0_(RealArraySize(index_pipe_addrmap, 0))
    {
    }
  PpCtrCfg48RArrayMutable(
      int chipNumber, int index_pipe_addrmap, int index_dprsr_ho_e, DprsrHoEEnum selector_dprsr_ho_e, RegisterArrayCallback& write_callback = 0, RegisterArrayCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_dprsr_ho_e, selector_dprsr_ho_e), 8 * ArraySize(index_pipe_addrmap, index_dprsr_ho_e, selector_dprsr_ho_e, -1), true, write_callback, read_callback, std::string("PpCtrCfg48RArrayMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_dprsr_ho_e) + "," + boost::lexical_cast<std::string>(selector_dprsr_ho_e)),
    array(RealArraySize(index_pipe_addrmap, index_dprsr_ho_e, selector_dprsr_ho_e, -1)),
    size0_(ArraySize(index_pipe_addrmap, index_dprsr_ho_e, selector_dprsr_ho_e, 0)),
    real_size0_(RealArraySize(index_pipe_addrmap, index_dprsr_ho_e, selector_dprsr_ho_e, 0))
    {
    }
  PpCtrCfg48RArrayMutable(
      int chipNumber, int index_pipe_addrmap, int index_dprsr_ho_i, DprsrHoIEnum selector_dprsr_ho_i, RegisterArrayCallback& write_callback = 0, RegisterArrayCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_dprsr_ho_i, selector_dprsr_ho_i), 8 * ArraySize(index_pipe_addrmap, index_dprsr_ho_i, selector_dprsr_ho_i, -1), true, write_callback, read_callback, std::string("PpCtrCfg48RArrayMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_dprsr_ho_i) + "," + boost::lexical_cast<std::string>(selector_dprsr_ho_i)),
    array(RealArraySize(index_pipe_addrmap, index_dprsr_ho_i, selector_dprsr_ho_i, -1)),
    size0_(ArraySize(index_pipe_addrmap, index_dprsr_ho_i, selector_dprsr_ho_i, 0)),
    real_size0_(RealArraySize(index_pipe_addrmap, index_dprsr_ho_i, selector_dprsr_ho_i, 0))
    {
    }
public:





  uint64_t ctr48(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].ctr48();
  }
  void ctr48(uint32_t a0,const uint64_t &v) 
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    array[a0].ctr48(v);
  }
  bool calculate_index(
      uint32_t* offset, uint32_t* a0
      ) const {
    int i = (*offset)/8;
    (*offset) -= (i*8);
    uint32_t t = i;
    *a0 = t;
    bool in_bounds = true;
    in_bounds &= CheckArrayBounds(*a0,real_size0_,size0_,*offset,0,true);
    return in_bounds;
  }


  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return true;
    if (read_callback_) read_callback_(a0);
    array[a0].read(offset,data);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return true;
    array[a0].write(offset,data);
    if (write_callback_) write_callback_(a0);
    return true;
  }

  void reset(
      
      ) {
    for (uint32_t i=0;i<array.size();++i) {
      array[i].reset();
      int t = i;
      int a0 = t;
      if (write_callback_) write_callback_(a0);
    }
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return "OUT_OF_BOUNDS";
    std::string r_s = array[a0].to_string(print_zeros,indent_string+"  ");
    if (! r_s.empty()) {
      r += indent_string + std::string("PpCtrCfg48RArrayMutable") + "["+boost::lexical_cast<std::string>(a0)+"]"+ ":\n" + r_s ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<real_size0_;++a0) {
      std::string r_s = array[a0].to_string(print_zeros,indent_string+"  ");
      if (! r_s.empty()) {
        r += indent_string + std::string("PpCtrCfg48RArrayMutable") + "["+boost::lexical_cast<std::string>(a0)+"]"+ ":\n" + r_s ;
      }
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::vector<PpCtrCfg48RMutable> array;
  uint32_t size0_;
  uint32_t real_size0_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x28000; // to get to icr
    offset += 0x2cc0; // to get to cfg48
    return offset;
  }

  static int ArraySize(
      int index_pipe_addrmap, int dimension
      ) {
    switch (dimension) {
      case -1:
        return 4;
        break;
      case 0:
        return 4;
        break;
      default:
        assert(0);
        break;
    }
  }

  static int RealArraySize(
      int index_pipe_addrmap, int dimension
      ) {
    switch (dimension) {
      case -1:
        return 4;
        break;
      case 0:
        return 4;
        break;
      default:
        assert(0);
        break;
    }
  }

  static int StartOffset(
      int index_pipe_addrmap, int index_dprsr_ho_e, DprsrHoEEnum selector_dprsr_ho_e
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x38000; // to get to ho_e
    assert(index_dprsr_ho_e < 4);
    offset += index_dprsr_ho_e * 0x2000; // dprsr_ho_e[]
    switch (selector_dprsr_ho_e) {
      case kHer:
        offset += 0xc00; // to get to her
        offset += 0xe0; // to get to h_cfg48
        break;
      case kOutEgr:
        offset += 0x1000; // to get to out_egr
        offset += 0x480; // to get to cfg48
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

  static int ArraySize(
      int index_pipe_addrmap, int index_dprsr_ho_e, DprsrHoEEnum selector_dprsr_ho_e, int dimension
      ) {
    switch (selector_dprsr_ho_e) {
      case kHer:
        switch (dimension) {
          case -1:
            return 2;
            break;
          case 0:
            return 2;
            break;
          default:
            assert(0);
            break;
        }
        break;
      case kOutEgr:
        switch (dimension) {
          case -1:
            return 4;
            break;
          case 0:
            return 4;
            break;
          default:
            assert(0);
            break;
        }
        break;
      default:
        assert(0);
        break;
    }
  }

  static int RealArraySize(
      int index_pipe_addrmap, int index_dprsr_ho_e, DprsrHoEEnum selector_dprsr_ho_e, int dimension
      ) {
    switch (selector_dprsr_ho_e) {
      case kHer:
        switch (dimension) {
          case -1:
            return 2;
            break;
          case 0:
            return 2;
            break;
          default:
            assert(0);
            break;
        }
        break;
      case kOutEgr:
        switch (dimension) {
          case -1:
            return 4;
            break;
          case 0:
            return 4;
            break;
          default:
            assert(0);
            break;
        }
        break;
      default:
        assert(0);
        break;
    }
  }

  static int StartOffset(
      int index_pipe_addrmap, int index_dprsr_ho_i, DprsrHoIEnum selector_dprsr_ho_i
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x30000; // to get to ho_i
    assert(index_dprsr_ho_i < 4);
    offset += index_dprsr_ho_i * 0x2000; // dprsr_ho_i[]
    switch (selector_dprsr_ho_i) {
      case kHir:
        offset += 0xc00; // to get to hir
        offset += 0xe0; // to get to h_cfg48
        break;
      case kOutIngr:
        offset += 0x1000; // to get to out_ingr
        offset += 0x360; // to get to cfg48
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

  static int ArraySize(
      int index_pipe_addrmap, int index_dprsr_ho_i, DprsrHoIEnum selector_dprsr_ho_i, int dimension
      ) {
    switch (selector_dprsr_ho_i) {
      case kHir:
        switch (dimension) {
          case -1:
            return 2;
            break;
          case 0:
            return 2;
            break;
          default:
            assert(0);
            break;
        }
        break;
      case kOutIngr:
        switch (dimension) {
          case -1:
            return 4;
            break;
          case 0:
            return 4;
            break;
          default:
            assert(0);
            break;
        }
        break;
      default:
        assert(0);
        break;
    }
  }

  static int RealArraySize(
      int index_pipe_addrmap, int index_dprsr_ho_i, DprsrHoIEnum selector_dprsr_ho_i, int dimension
      ) {
    switch (selector_dprsr_ho_i) {
      case kHir:
        switch (dimension) {
          case -1:
            return 2;
            break;
          case 0:
            return 2;
            break;
          default:
            assert(0);
            break;
        }
        break;
      case kOutIngr:
        switch (dimension) {
          case -1:
            return 4;
            break;
          case 0:
            return 4;
            break;
          default:
            assert(0);
            break;
        }
        break;
      default:
        assert(0);
        break;
    }
  }

};














  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_PP_CTR_CFG48_R_ARRAY_MUTABLE_H__
