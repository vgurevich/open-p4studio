/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_ARRAY_MUTABLE_H__
#define __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_ARRAY_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "parity_control_r_mutable.h"
#include "prsr_reg_main_rspec_aram_mbe_cnt_mutable.h"
#include "prsr_reg_main_rspec_aram_mbe_err_log_mutable.h"
#include "prsr_reg_main_rspec_aram_sbe_cnt_mutable.h"
#include "prsr_reg_main_rspec_aram_sbe_err_log_mutable.h"
#include "prsr_reg_main_rspec_csum_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_csum_mbe_cnt_mutable.h"
#include "prsr_reg_main_rspec_csum_mbe_err_log_mutable.h"
#include "prsr_reg_main_rspec_csum_sbe_cnt_mutable.h"
#include "prsr_reg_main_rspec_csum_sbe_err_log_mutable.h"
#include "prsr_reg_main_rspec_ctr_range_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_ctr_range_err_log_mutable.h"
#include "prsr_reg_main_rspec_debug_ctrl_mutable.h"
#include "prsr_reg_main_rspec_ecc_mutable.h"
#include "prsr_reg_main_rspec_err_phv_cfg_mutable.h"
#include "prsr_reg_main_rspec_fcs_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_hdr_byte_cnt_mutable.h"
#include "prsr_reg_main_rspec_hdr_len_adj_mutable.h"
#include "prsr_reg_main_rspec_ibuf_oflow_err_log_mutable.h"
#include "prsr_reg_main_rspec_ibuf_uflow_err_log_mutable.h"
#include "prsr_reg_main_rspec_idle_cnt_mutable.h"
#include "prsr_reg_main_rspec_intr_mutable.h"
#include "prsr_reg_main_rspec_iq_state_mutable.h"
#include "prsr_reg_main_rspec_max_cycle_mutable.h"
#include "prsr_reg_main_rspec_max_iter_mutable.h"
#include "prsr_reg_main_rspec_mem_ctrl_mutable.h"
#include "prsr_reg_main_rspec_multi_wr_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_multi_wr_err_log_mutable.h"
#include "prsr_reg_main_rspec_mutable.h"
#include "prsr_reg_main_rspec_no_multi_wr_mutable.h"
#include "prsr_reg_main_rspec_no_tcam_match_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_no_tcam_match_err_log_mutable.h"
#include "prsr_reg_main_rspec_op_fifo_full_cnt_mutable.h"
#include "prsr_reg_main_rspec_op_fifo_full_stall_cnt_mutable.h"
#include "prsr_reg_main_rspec_op_fifo_oflow_err_log_mutable.h"
#include "prsr_reg_main_rspec_op_fifo_state_mutable.h"
#include "prsr_reg_main_rspec_op_fifo_uflow_err_log_mutable.h"
#include "prsr_reg_main_rspec_out_arb_ctrl_mutable.h"
#include "prsr_reg_main_rspec_partial_hdr_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_partial_hdr_err_log_mutable.h"
#include "prsr_reg_main_rspec_phv_clr_on_wr_mutable.h"
#include "prsr_reg_main_rspec_phv_owner_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_phv_owner_err_log_mutable.h"
#include "prsr_reg_main_rspec_phv_owner_mutable.h"
#include "prsr_reg_main_rspec_pkt_drop_cnt_mutable.h"
#include "prsr_reg_main_rspec_pkt_rx_cnt_mutable.h"
#include "prsr_reg_main_rspec_pkt_tx_cnt_mutable.h"
#include "prsr_reg_main_rspec_port_chnl_en_mutable.h"
#include "prsr_reg_main_rspec_port_rate_cfg_mutable.h"
#include "prsr_reg_main_rspec_pri_map_mutable.h"
#include "prsr_reg_main_rspec_pri_start_mutable.h"
#include "prsr_reg_main_rspec_pri_thresh_mutable.h"
#include "prsr_reg_main_rspec_seq_reset_mutable.h"
#include "prsr_reg_main_rspec_src_ext_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_src_ext_err_log_mutable.h"
#include "prsr_reg_main_rspec_start_lookup_offsets_mutable.h"
#include "prsr_reg_main_rspec_start_state_mutable.h"
#include "prsr_reg_main_rspec_tcam_par_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_tcam_par_err_log_mutable.h"
#include "prsr_reg_main_rspec_timeout_cycle_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_timeout_cycle_err_log_mutable.h"
#include "prsr_reg_main_rspec_timeout_iter_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_timeout_iter_err_log_mutable.h"
#include "prsr_reg_main_rspec_ver_upd_mutable.h"

namespace jbay {
  namespace register_classes {

class PrsrRegMainRspecArrayMutable : public model_core::RegisterBlock<RegisterArrayCallback> {
public:
  enum PardeGlueStnRegEnum {
    kEpbprsr4reg,
    kIpbprsr4reg
  };
public:
  PrsrRegMainRspecArrayMutable(
      int chipNumber, int index_pipe_addrmap, PardeGlueStnRegEnum selector_parde_glue_stn_reg, int index_epb_prsr4_reg, RegisterArrayCallback& write_callback = 0, RegisterArrayCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, selector_parde_glue_stn_reg, index_epb_prsr4_reg), 1024 * ArraySize(index_pipe_addrmap, selector_parde_glue_stn_reg, index_epb_prsr4_reg, -1), true, write_callback, read_callback, std::string("PrsrRegMainRspecArrayMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(selector_parde_glue_stn_reg) + "," + boost::lexical_cast<std::string>(index_epb_prsr4_reg)),
    array(RealArraySize(index_pipe_addrmap, selector_parde_glue_stn_reg, index_epb_prsr4_reg, -1)),
    size0_(ArraySize(index_pipe_addrmap, selector_parde_glue_stn_reg, index_epb_prsr4_reg, 0)),
    real_size0_(RealArraySize(index_pipe_addrmap, selector_parde_glue_stn_reg, index_epb_prsr4_reg, 0))
    {
    }
public:






  PrsrRegMainRspecPortRateCfgMutable &port_rate_cfg(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].port_rate_cfg();
  }





  PrsrRegMainRspecPortChnlEnMutable &port_chnl_en(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].port_chnl_en();
  }





  PrsrRegMainRspecStartStateMutable &start_state(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].start_state();
  }








  PrsrRegMainRspecStartLookupOffsetsMutable &start_lookup_offsets(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].start_lookup_offsets(j0);
  }






  PrsrRegMainRspecMaxIterMutable &max_iter(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].max_iter();
  }






  PrsrRegMainRspecMaxCycleMutable &max_cycle(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].max_cycle();
  }





  PrsrRegMainRspecPriStartMutable &pri_start(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].pri_start();
  }







  PrsrRegMainRspecPriThreshMutable &pri_thresh(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].pri_thresh();
  }





  PrsrRegMainRspecHdrLenAdjMutable &hdr_len_adj(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].hdr_len_adj();
  }







  PrsrRegMainRspecPriMapMutable &pri_map(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].pri_map(j0);
  }





  PrsrRegMainRspecSeqResetMutable &seq_reset(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].seq_reset();
  }





  PrsrRegMainRspecOutArbCtrlMutable &out_arb_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].out_arb_ctrl();
  }





  PrsrRegMainRspecPhvOwnerMutable &phv_owner(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].phv_owner();
  }







  PrsrRegMainRspecNoMultiWrMutable &no_multi_wr(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].no_multi_wr();
  }







  PrsrRegMainRspecErrPhvCfgMutable &err_phv_cfg(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].err_phv_cfg(j0);
  }






  PrsrRegMainRspecHdrByteCntMutable &hdr_byte_cnt(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].hdr_byte_cnt(j0);
  }






  PrsrRegMainRspecIdleCntMutable &idle_cnt(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].idle_cnt(j0);
  }






  PrsrRegMainRspecPktRxCntMutable &pkt_rx_cnt(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].pkt_rx_cnt(j0);
  }






  PrsrRegMainRspecPktTxCntMutable &pkt_tx_cnt(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].pkt_tx_cnt(j0);
  }






  PrsrRegMainRspecPktDropCntMutable &pkt_drop_cnt(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].pkt_drop_cnt(j0);
  }




  PrsrRegMainRspecOpFifoFullCntMutable &op_fifo_full_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].op_fifo_full_cnt();
  }




  PrsrRegMainRspecOpFifoFullStallCntMutable &op_fifo_full_stall_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].op_fifo_full_stall_cnt();
  }




  PrsrRegMainRspecNoTcamMatchErrCntMutable &no_tcam_match_err_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].no_tcam_match_err_cnt();
  }




  PrsrRegMainRspecPartialHdrErrCntMutable &partial_hdr_err_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].partial_hdr_err_cnt();
  }




  PrsrRegMainRspecCtrRangeErrCntMutable &ctr_range_err_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].ctr_range_err_cnt();
  }




  PrsrRegMainRspecTimeoutIterErrCntMutable &timeout_iter_err_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].timeout_iter_err_cnt();
  }




  PrsrRegMainRspecTimeoutCycleErrCntMutable &timeout_cycle_err_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].timeout_cycle_err_cnt();
  }




  PrsrRegMainRspecSrcExtErrCntMutable &src_ext_err_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].src_ext_err_cnt();
  }




  PrsrRegMainRspecPhvOwnerErrCntMutable &phv_owner_err_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].phv_owner_err_cnt();
  }




  PrsrRegMainRspecMultiWrErrCntMutable &multi_wr_err_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].multi_wr_err_cnt();
  }




  PrsrRegMainRspecAramSbeCntMutable &aram_sbe_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].aram_sbe_cnt();
  }




  PrsrRegMainRspecAramMbeCntMutable &aram_mbe_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].aram_mbe_cnt();
  }




  PrsrRegMainRspecFcsErrCntMutable &fcs_err_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].fcs_err_cnt();
  }




  PrsrRegMainRspecCsumErrCntMutable &csum_err_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].csum_err_cnt();
  }




  PrsrRegMainRspecTcamParErrCntMutable &tcam_par_err_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].tcam_par_err_cnt();
  }




  PrsrRegMainRspecCsumSbeCntMutable &csum_sbe_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].csum_sbe_cnt();
  }




  PrsrRegMainRspecCsumMbeCntMutable &csum_mbe_cnt(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].csum_mbe_cnt();
  }





  PrsrRegMainRspecNoTcamMatchErrLogMutable &no_tcam_match_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].no_tcam_match_err_log();
  }





  PrsrRegMainRspecTimeoutIterErrLogMutable &timeout_iter_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].timeout_iter_err_log();
  }





  PrsrRegMainRspecTimeoutCycleErrLogMutable &timeout_cycle_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].timeout_cycle_err_log();
  }





  PrsrRegMainRspecPartialHdrErrLogMutable &partial_hdr_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].partial_hdr_err_log();
  }





  PrsrRegMainRspecCtrRangeErrLogMutable &ctr_range_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].ctr_range_err_log();
  }





  PrsrRegMainRspecMultiWrErrLogMutable &multi_wr_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].multi_wr_err_log();
  }





  PrsrRegMainRspecPhvOwnerErrLogMutable &phv_owner_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].phv_owner_err_log();
  }





  PrsrRegMainRspecSrcExtErrLogMutable &src_ext_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].src_ext_err_log();
  }





  PrsrRegMainRspecAramSbeErrLogMutable &aram_sbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].aram_sbe_err_log();
  }





  PrsrRegMainRspecAramMbeErrLogMutable &aram_mbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].aram_mbe_err_log();
  }





  PrsrRegMainRspecTcamParErrLogMutable &tcam_par_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].tcam_par_err_log();
  }





  PrsrRegMainRspecIbufOflowErrLogMutable &ibuf_oflow_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].ibuf_oflow_err_log();
  }





  PrsrRegMainRspecIbufUflowErrLogMutable &ibuf_uflow_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].ibuf_uflow_err_log();
  }





  PrsrRegMainRspecOpFifoOflowErrLogMutable &op_fifo_oflow_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].op_fifo_oflow_err_log();
  }





  PrsrRegMainRspecOpFifoUflowErrLogMutable &op_fifo_uflow_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].op_fifo_uflow_err_log();
  }





  PrsrRegMainRspecCsumSbeErrLogMutable &csum_sbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].csum_sbe_err_log();
  }





  PrsrRegMainRspecCsumMbeErrLogMutable &csum_mbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].csum_mbe_err_log();
  }








  PrsrRegMainRspecEccMutable &ecc(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].ecc();
  }





  ParityControlRMutable &parity(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].parity();
  }





  PrsrRegMainRspecDebugCtrlMutable &debug_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].debug_ctrl();
  }





  PrsrRegMainRspecMemCtrlMutable &mem_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].mem_ctrl();
  }





  PrsrRegMainRspecOpFifoStateMutable &op_fifo_state(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].op_fifo_state();
  }





  PrsrRegMainRspecVerUpdMutable &ver_upd(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].ver_upd();
  }





  PrsrRegMainRspecIqStateMutable &iq_state(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].iq_state();
  }






  PrsrRegMainRspecPhvClrOnWrMutable &phv_clr_on_wr(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].phv_clr_on_wr();
  }
  PrsrRegMainRspecIntrMutable &intr(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].intr();
  }
  bool calculate_index(
      uint32_t* offset, uint32_t* a0
      ) const {
    int i = (*offset)/1024;
    (*offset) -= (i*1024);
    uint32_t t = i;
    *a0 = t;
    bool in_bounds = true;
    in_bounds &= CheckArrayBounds(*a0,real_size0_,size0_,*offset,0,true);
    return in_bounds;
  }


  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return true;
    if (read_callback_) read_callback_(a0);
    array[a0].read(offset,data);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return true;
    array[a0].write(offset,data);
    if (write_callback_) write_callback_(a0);
    return true;
  }

  void reset(
      
      ) {
    for (uint32_t i=0;i<array.size();++i) {
      array[i].reset();
      int t = i;
      int a0 = t;
      if (write_callback_) write_callback_(a0);
    }
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return "OUT_OF_BOUNDS";
    std::string r_s = array[a0].to_string(print_zeros,indent_string+"  ");
    if (! r_s.empty()) {
      r += indent_string + std::string("PrsrRegMainRspecArrayMutable") + "["+boost::lexical_cast<std::string>(a0)+"]"+ ":\n" + r_s ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<real_size0_;++a0) {
      std::string r_s = array[a0].to_string(print_zeros,indent_string+"  ");
      if (! r_s.empty()) {
        r += indent_string + std::string("PrsrRegMainRspecArrayMutable") + "["+boost::lexical_cast<std::string>(a0)+"]"+ ":\n" + r_s ;
      }
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::vector<PrsrRegMainRspecMutable> array;
  uint32_t size0_;
  uint32_t real_size0_;
private:
  static int StartOffset(
      int index_pipe_addrmap, PardeGlueStnRegEnum selector_parde_glue_stn_reg, int index_epb_prsr4_reg
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    switch (selector_parde_glue_stn_reg) {
      case kEpbprsr4reg:
        offset += 0x20000; // to get to epbprsr4reg
        assert(index_epb_prsr4_reg < 9);
        offset += index_epb_prsr4_reg * 0x2000; // epb_prsr4_reg[]
        offset += 0x1000; // to get to prsr
        break;
      case kIpbprsr4reg:
        assert(index_epb_prsr4_reg < 9);
        offset += index_epb_prsr4_reg * 0x2000; // ipb_prsr4_reg[]
        offset += 0x1000; // to get to prsr
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

  static int ArraySize(
      int index_pipe_addrmap, PardeGlueStnRegEnum selector_parde_glue_stn_reg, int index_epb_prsr4_reg, int dimension
      ) {
    switch (selector_parde_glue_stn_reg) {
      case kEpbprsr4reg:
        switch (dimension) {
          case -1:
            return 4;
            break;
          case 0:
            return 4;
            break;
          default:
            assert(0);
            break;
        }
        break;
      case kIpbprsr4reg:
        switch (dimension) {
          case -1:
            return 4;
            break;
          case 0:
            return 4;
            break;
          default:
            assert(0);
            break;
        }
        break;
      default:
        assert(0);
        break;
    }
  }

  static int RealArraySize(
      int index_pipe_addrmap, PardeGlueStnRegEnum selector_parde_glue_stn_reg, int index_epb_prsr4_reg, int dimension
      ) {
    switch (selector_parde_glue_stn_reg) {
      case kEpbprsr4reg:
        switch (dimension) {
          case -1:
            return 4;
            break;
          case 0:
            return 4;
            break;
          default:
            assert(0);
            break;
        }
        break;
      case kIpbprsr4reg:
        switch (dimension) {
          case -1:
            return 4;
            break;
          case 0:
            return 4;
            break;
          default:
            assert(0);
            break;
        }
        break;
      default:
        assert(0);
        break;
    }
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_ARRAY_MUTABLE_H__
