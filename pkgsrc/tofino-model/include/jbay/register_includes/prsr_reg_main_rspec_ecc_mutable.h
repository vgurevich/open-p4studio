/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_ECC_MUTABLE_H__
#define __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_ECC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class PrsrRegMainRspecEccMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum PardeGlueStnRegEnum {
    kEpbprsr4reg,
    kIpbprsr4reg
  };
public:
  PrsrRegMainRspecEccMutable(
      int chipNumber, int index_pipe_addrmap, PardeGlueStnRegEnum selector_parde_glue_stn_reg, int index_epb_prsr4_reg, int index_prsr_reg_main_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, selector_parde_glue_stn_reg, index_epb_prsr4_reg, index_prsr_reg_main_rspec), 8, true, write_callback, read_callback, std::string("PrsrRegMainRspecEccMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(selector_parde_glue_stn_reg) + "," + boost::lexical_cast<std::string>(index_epb_prsr4_reg) + "," + boost::lexical_cast<std::string>(index_prsr_reg_main_rspec))
    {
    }
  PrsrRegMainRspecEccMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PrsrRegMainRspecEccMutable")
    {
    }
public:




  uint8_t aram_blk0_disable_check() { return aram_blk0_disable_check_; }
  void aram_blk0_disable_check(const uint8_t &v) { aram_blk0_disable_check_=v; }




  uint8_t aram_blk0_inject_sbe() { return aram_blk0_inject_sbe_; }
  void aram_blk0_inject_sbe(const uint8_t &v) { aram_blk0_inject_sbe_=v; }




  uint8_t aram_blk0_inject_mbe() { return aram_blk0_inject_mbe_; }
  void aram_blk0_inject_mbe(const uint8_t &v) { aram_blk0_inject_mbe_=v; }




  uint8_t aram_blk1_disable_check() { return aram_blk1_disable_check_; }
  void aram_blk1_disable_check(const uint8_t &v) { aram_blk1_disable_check_=v; }




  uint8_t aram_blk1_inject_sbe() { return aram_blk1_inject_sbe_; }
  void aram_blk1_inject_sbe(const uint8_t &v) { aram_blk1_inject_sbe_=v; }




  uint8_t aram_blk1_inject_mbe() { return aram_blk1_inject_mbe_; }
  void aram_blk1_inject_mbe(const uint8_t &v) { aram_blk1_inject_mbe_=v; }




  uint8_t aram_blk2_disable_check() { return aram_blk2_disable_check_; }
  void aram_blk2_disable_check(const uint8_t &v) { aram_blk2_disable_check_=v; }




  uint8_t aram_blk2_inject_sbe() { return aram_blk2_inject_sbe_; }
  void aram_blk2_inject_sbe(const uint8_t &v) { aram_blk2_inject_sbe_=v; }




  uint8_t aram_blk2_inject_mbe() { return aram_blk2_inject_mbe_; }
  void aram_blk2_inject_mbe(const uint8_t &v) { aram_blk2_inject_mbe_=v; }




  uint8_t aram_blk3_disable_check() { return aram_blk3_disable_check_; }
  void aram_blk3_disable_check(const uint8_t &v) { aram_blk3_disable_check_=v; }




  uint8_t aram_blk3_inject_sbe() { return aram_blk3_inject_sbe_; }
  void aram_blk3_inject_sbe(const uint8_t &v) { aram_blk3_inject_sbe_=v; }




  uint8_t aram_blk3_inject_mbe() { return aram_blk3_inject_mbe_; }
  void aram_blk3_inject_mbe(const uint8_t &v) { aram_blk3_inject_mbe_=v; }




  uint8_t csum0_disable_check() { return csum0_disable_check_; }
  void csum0_disable_check(const uint8_t &v) { csum0_disable_check_=v; }




  uint8_t csum0_inject_sbe() { return csum0_inject_sbe_; }
  void csum0_inject_sbe(const uint8_t &v) { csum0_inject_sbe_=v; }




  uint8_t csum0_inject_mbe() { return csum0_inject_mbe_; }
  void csum0_inject_mbe(const uint8_t &v) { csum0_inject_mbe_=v; }




  uint8_t csum1_disable_check() { return csum1_disable_check_; }
  void csum1_disable_check(const uint8_t &v) { csum1_disable_check_=v; }




  uint8_t csum1_inject_sbe() { return csum1_inject_sbe_; }
  void csum1_inject_sbe(const uint8_t &v) { csum1_inject_sbe_=v; }




  uint8_t csum1_inject_mbe() { return csum1_inject_mbe_; }
  void csum1_inject_mbe(const uint8_t &v) { csum1_inject_mbe_=v; }




  uint8_t csum2_disable_check() { return csum2_disable_check_; }
  void csum2_disable_check(const uint8_t &v) { csum2_disable_check_=v; }




  uint8_t csum2_inject_sbe() { return csum2_inject_sbe_; }
  void csum2_inject_sbe(const uint8_t &v) { csum2_inject_sbe_=v; }




  uint8_t csum2_inject_mbe() { return csum2_inject_mbe_; }
  void csum2_inject_mbe(const uint8_t &v) { csum2_inject_mbe_=v; }




  uint8_t csum3_disable_check() { return csum3_disable_check_; }
  void csum3_disable_check(const uint8_t &v) { csum3_disable_check_=v; }




  uint8_t csum3_inject_sbe() { return csum3_inject_sbe_; }
  void csum3_inject_sbe(const uint8_t &v) { csum3_inject_sbe_=v; }




  uint8_t csum3_inject_mbe() { return csum3_inject_mbe_; }
  void csum3_inject_mbe(const uint8_t &v) { csum3_inject_mbe_=v; }




  uint8_t csum4_disable_check() { return csum4_disable_check_; }
  void csum4_disable_check(const uint8_t &v) { csum4_disable_check_=v; }




  uint8_t csum4_inject_sbe() { return csum4_inject_sbe_; }
  void csum4_inject_sbe(const uint8_t &v) { csum4_inject_sbe_=v; }




  uint8_t csum4_inject_mbe() { return csum4_inject_mbe_; }
  void csum4_inject_mbe(const uint8_t &v) { csum4_inject_mbe_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (aram_blk0_disable_check_ & 0x1);
      *data |= ((aram_blk0_inject_sbe_ & 0x1) << 1);
      *data |= ((aram_blk0_inject_mbe_ & 0x1) << 2);
      *data |= ((aram_blk1_disable_check_ & 0x1) << 4);
      *data |= ((aram_blk1_inject_sbe_ & 0x1) << 5);
      *data |= ((aram_blk1_inject_mbe_ & 0x1) << 6);
      *data |= ((aram_blk2_disable_check_ & 0x1) << 8);
      *data |= ((aram_blk2_inject_sbe_ & 0x1) << 9);
      *data |= ((aram_blk2_inject_mbe_ & 0x1) << 10);
      *data |= ((aram_blk3_disable_check_ & 0x1) << 12);
      *data |= ((aram_blk3_inject_sbe_ & 0x1) << 13);
      *data |= ((aram_blk3_inject_mbe_ & 0x1) << 14);
      *data |= ((csum0_disable_check_ & 0x1) << 16);
      *data |= ((csum0_inject_sbe_ & 0x1) << 17);
      *data |= ((csum0_inject_mbe_ & 0x1) << 18);
      *data |= ((csum1_disable_check_ & 0x1) << 20);
      *data |= ((csum1_inject_sbe_ & 0x1) << 21);
      *data |= ((csum1_inject_mbe_ & 0x1) << 22);
      *data |= ((csum2_disable_check_ & 0x1) << 24);
      *data |= ((csum2_inject_sbe_ & 0x1) << 25);
      *data |= ((csum2_inject_mbe_ & 0x1) << 26);
      *data |= ((csum3_disable_check_ & 0x1) << 28);
      *data |= ((csum3_inject_sbe_ & 0x1) << 29);
      *data |= ((csum3_inject_mbe_ & 0x1) << 30);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (csum4_disable_check_ & 0x1);
      *data |= ((csum4_inject_sbe_ & 0x1) << 1);
      *data |= ((csum4_inject_mbe_ & 0x1) << 2);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      aram_blk0_disable_check_ = (data & 0x1);
      aram_blk0_inject_sbe_ = ((data >> 1) & 0x1);
      aram_blk0_inject_mbe_ = ((data >> 2) & 0x1);
      aram_blk1_disable_check_ = ((data >> 4) & 0x1);
      aram_blk1_inject_sbe_ = ((data >> 5) & 0x1);
      aram_blk1_inject_mbe_ = ((data >> 6) & 0x1);
      aram_blk2_disable_check_ = ((data >> 8) & 0x1);
      aram_blk2_inject_sbe_ = ((data >> 9) & 0x1);
      aram_blk2_inject_mbe_ = ((data >> 10) & 0x1);
      aram_blk3_disable_check_ = ((data >> 12) & 0x1);
      aram_blk3_inject_sbe_ = ((data >> 13) & 0x1);
      aram_blk3_inject_mbe_ = ((data >> 14) & 0x1);
      csum0_disable_check_ = ((data >> 16) & 0x1);
      csum0_inject_sbe_ = ((data >> 17) & 0x1);
      csum0_inject_mbe_ = ((data >> 18) & 0x1);
      csum1_disable_check_ = ((data >> 20) & 0x1);
      csum1_inject_sbe_ = ((data >> 21) & 0x1);
      csum1_inject_mbe_ = ((data >> 22) & 0x1);
      csum2_disable_check_ = ((data >> 24) & 0x1);
      csum2_inject_sbe_ = ((data >> 25) & 0x1);
      csum2_inject_mbe_ = ((data >> 26) & 0x1);
      csum3_disable_check_ = ((data >> 28) & 0x1);
      csum3_inject_sbe_ = ((data >> 29) & 0x1);
      csum3_inject_mbe_ = ((data >> 30) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      csum4_disable_check_ = (data & 0x1);
      csum4_inject_sbe_ = ((data >> 1) & 0x1);
      csum4_inject_mbe_ = ((data >> 2) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    aram_blk0_disable_check_ = 0x0;
    aram_blk0_inject_sbe_ = 0x0;
    aram_blk0_inject_mbe_ = 0x0;
    aram_blk1_disable_check_ = 0x0;
    aram_blk1_inject_sbe_ = 0x0;
    aram_blk1_inject_mbe_ = 0x0;
    aram_blk2_disable_check_ = 0x0;
    aram_blk2_inject_sbe_ = 0x0;
    aram_blk2_inject_mbe_ = 0x0;
    aram_blk3_disable_check_ = 0x0;
    aram_blk3_inject_sbe_ = 0x0;
    aram_blk3_inject_mbe_ = 0x0;
    csum0_disable_check_ = 0x0;
    csum0_inject_sbe_ = 0x0;
    csum0_inject_mbe_ = 0x0;
    csum1_disable_check_ = 0x0;
    csum1_inject_sbe_ = 0x0;
    csum1_inject_mbe_ = 0x0;
    csum2_disable_check_ = 0x0;
    csum2_inject_sbe_ = 0x0;
    csum2_inject_mbe_ = 0x0;
    csum3_disable_check_ = 0x0;
    csum3_inject_sbe_ = 0x0;
    csum3_inject_mbe_ = 0x0;
    csum4_disable_check_ = 0x0;
    csum4_inject_sbe_ = 0x0;
    csum4_inject_mbe_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PrsrRegMainRspecEccMutable") + ":\n";
    r += indent_string + "  " + std::string("aram_blk0_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk0_disable_check_) ) + "\n";
    all_zeros &= (0 == aram_blk0_disable_check_);
    r += indent_string + "  " + std::string("aram_blk0_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk0_inject_sbe_) ) + "\n";
    all_zeros &= (0 == aram_blk0_inject_sbe_);
    r += indent_string + "  " + std::string("aram_blk0_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk0_inject_mbe_) ) + "\n";
    all_zeros &= (0 == aram_blk0_inject_mbe_);
    r += indent_string + "  " + std::string("aram_blk1_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk1_disable_check_) ) + "\n";
    all_zeros &= (0 == aram_blk1_disable_check_);
    r += indent_string + "  " + std::string("aram_blk1_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk1_inject_sbe_) ) + "\n";
    all_zeros &= (0 == aram_blk1_inject_sbe_);
    r += indent_string + "  " + std::string("aram_blk1_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk1_inject_mbe_) ) + "\n";
    all_zeros &= (0 == aram_blk1_inject_mbe_);
    r += indent_string + "  " + std::string("aram_blk2_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk2_disable_check_) ) + "\n";
    all_zeros &= (0 == aram_blk2_disable_check_);
    r += indent_string + "  " + std::string("aram_blk2_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk2_inject_sbe_) ) + "\n";
    all_zeros &= (0 == aram_blk2_inject_sbe_);
    r += indent_string + "  " + std::string("aram_blk2_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk2_inject_mbe_) ) + "\n";
    all_zeros &= (0 == aram_blk2_inject_mbe_);
    r += indent_string + "  " + std::string("aram_blk3_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk3_disable_check_) ) + "\n";
    all_zeros &= (0 == aram_blk3_disable_check_);
    r += indent_string + "  " + std::string("aram_blk3_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk3_inject_sbe_) ) + "\n";
    all_zeros &= (0 == aram_blk3_inject_sbe_);
    r += indent_string + "  " + std::string("aram_blk3_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk3_inject_mbe_) ) + "\n";
    all_zeros &= (0 == aram_blk3_inject_mbe_);
    r += indent_string + "  " + std::string("csum0_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum0_disable_check_) ) + "\n";
    all_zeros &= (0 == csum0_disable_check_);
    r += indent_string + "  " + std::string("csum0_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum0_inject_sbe_) ) + "\n";
    all_zeros &= (0 == csum0_inject_sbe_);
    r += indent_string + "  " + std::string("csum0_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum0_inject_mbe_) ) + "\n";
    all_zeros &= (0 == csum0_inject_mbe_);
    r += indent_string + "  " + std::string("csum1_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum1_disable_check_) ) + "\n";
    all_zeros &= (0 == csum1_disable_check_);
    r += indent_string + "  " + std::string("csum1_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum1_inject_sbe_) ) + "\n";
    all_zeros &= (0 == csum1_inject_sbe_);
    r += indent_string + "  " + std::string("csum1_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum1_inject_mbe_) ) + "\n";
    all_zeros &= (0 == csum1_inject_mbe_);
    r += indent_string + "  " + std::string("csum2_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum2_disable_check_) ) + "\n";
    all_zeros &= (0 == csum2_disable_check_);
    r += indent_string + "  " + std::string("csum2_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum2_inject_sbe_) ) + "\n";
    all_zeros &= (0 == csum2_inject_sbe_);
    r += indent_string + "  " + std::string("csum2_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum2_inject_mbe_) ) + "\n";
    all_zeros &= (0 == csum2_inject_mbe_);
    r += indent_string + "  " + std::string("csum3_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum3_disable_check_) ) + "\n";
    all_zeros &= (0 == csum3_disable_check_);
    r += indent_string + "  " + std::string("csum3_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum3_inject_sbe_) ) + "\n";
    all_zeros &= (0 == csum3_inject_sbe_);
    r += indent_string + "  " + std::string("csum3_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum3_inject_mbe_) ) + "\n";
    all_zeros &= (0 == csum3_inject_mbe_);
    r += indent_string + "  " + std::string("csum4_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum4_disable_check_) ) + "\n";
    all_zeros &= (0 == csum4_disable_check_);
    r += indent_string + "  " + std::string("csum4_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum4_inject_sbe_) ) + "\n";
    all_zeros &= (0 == csum4_inject_sbe_);
    r += indent_string + "  " + std::string("csum4_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum4_inject_mbe_) ) + "\n";
    all_zeros &= (0 == csum4_inject_mbe_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PrsrRegMainRspecEccMutable") + ":\n";
    r += indent_string + "  " + std::string("aram_blk0_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk0_disable_check_) ) + "\n";
    all_zeros &= (0 == aram_blk0_disable_check_);
    r += indent_string + "  " + std::string("aram_blk0_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk0_inject_sbe_) ) + "\n";
    all_zeros &= (0 == aram_blk0_inject_sbe_);
    r += indent_string + "  " + std::string("aram_blk0_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk0_inject_mbe_) ) + "\n";
    all_zeros &= (0 == aram_blk0_inject_mbe_);
    r += indent_string + "  " + std::string("aram_blk1_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk1_disable_check_) ) + "\n";
    all_zeros &= (0 == aram_blk1_disable_check_);
    r += indent_string + "  " + std::string("aram_blk1_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk1_inject_sbe_) ) + "\n";
    all_zeros &= (0 == aram_blk1_inject_sbe_);
    r += indent_string + "  " + std::string("aram_blk1_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk1_inject_mbe_) ) + "\n";
    all_zeros &= (0 == aram_blk1_inject_mbe_);
    r += indent_string + "  " + std::string("aram_blk2_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk2_disable_check_) ) + "\n";
    all_zeros &= (0 == aram_blk2_disable_check_);
    r += indent_string + "  " + std::string("aram_blk2_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk2_inject_sbe_) ) + "\n";
    all_zeros &= (0 == aram_blk2_inject_sbe_);
    r += indent_string + "  " + std::string("aram_blk2_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk2_inject_mbe_) ) + "\n";
    all_zeros &= (0 == aram_blk2_inject_mbe_);
    r += indent_string + "  " + std::string("aram_blk3_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk3_disable_check_) ) + "\n";
    all_zeros &= (0 == aram_blk3_disable_check_);
    r += indent_string + "  " + std::string("aram_blk3_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk3_inject_sbe_) ) + "\n";
    all_zeros &= (0 == aram_blk3_inject_sbe_);
    r += indent_string + "  " + std::string("aram_blk3_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_blk3_inject_mbe_) ) + "\n";
    all_zeros &= (0 == aram_blk3_inject_mbe_);
    r += indent_string + "  " + std::string("csum0_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum0_disable_check_) ) + "\n";
    all_zeros &= (0 == csum0_disable_check_);
    r += indent_string + "  " + std::string("csum0_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum0_inject_sbe_) ) + "\n";
    all_zeros &= (0 == csum0_inject_sbe_);
    r += indent_string + "  " + std::string("csum0_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum0_inject_mbe_) ) + "\n";
    all_zeros &= (0 == csum0_inject_mbe_);
    r += indent_string + "  " + std::string("csum1_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum1_disable_check_) ) + "\n";
    all_zeros &= (0 == csum1_disable_check_);
    r += indent_string + "  " + std::string("csum1_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum1_inject_sbe_) ) + "\n";
    all_zeros &= (0 == csum1_inject_sbe_);
    r += indent_string + "  " + std::string("csum1_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum1_inject_mbe_) ) + "\n";
    all_zeros &= (0 == csum1_inject_mbe_);
    r += indent_string + "  " + std::string("csum2_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum2_disable_check_) ) + "\n";
    all_zeros &= (0 == csum2_disable_check_);
    r += indent_string + "  " + std::string("csum2_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum2_inject_sbe_) ) + "\n";
    all_zeros &= (0 == csum2_inject_sbe_);
    r += indent_string + "  " + std::string("csum2_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum2_inject_mbe_) ) + "\n";
    all_zeros &= (0 == csum2_inject_mbe_);
    r += indent_string + "  " + std::string("csum3_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum3_disable_check_) ) + "\n";
    all_zeros &= (0 == csum3_disable_check_);
    r += indent_string + "  " + std::string("csum3_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum3_inject_sbe_) ) + "\n";
    all_zeros &= (0 == csum3_inject_sbe_);
    r += indent_string + "  " + std::string("csum3_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum3_inject_mbe_) ) + "\n";
    all_zeros &= (0 == csum3_inject_mbe_);
    r += indent_string + "  " + std::string("csum4_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum4_disable_check_) ) + "\n";
    all_zeros &= (0 == csum4_disable_check_);
    r += indent_string + "  " + std::string("csum4_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum4_inject_sbe_) ) + "\n";
    all_zeros &= (0 == csum4_inject_sbe_);
    r += indent_string + "  " + std::string("csum4_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum4_inject_mbe_) ) + "\n";
    all_zeros &= (0 == csum4_inject_mbe_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t aram_blk0_disable_check_;
  uint8_t aram_blk0_inject_sbe_;
  uint8_t aram_blk0_inject_mbe_;
  uint8_t aram_blk1_disable_check_;
  uint8_t aram_blk1_inject_sbe_;
  uint8_t aram_blk1_inject_mbe_;
  uint8_t aram_blk2_disable_check_;
  uint8_t aram_blk2_inject_sbe_;
  uint8_t aram_blk2_inject_mbe_;
  uint8_t aram_blk3_disable_check_;
  uint8_t aram_blk3_inject_sbe_;
  uint8_t aram_blk3_inject_mbe_;
  uint8_t csum0_disable_check_;
  uint8_t csum0_inject_sbe_;
  uint8_t csum0_inject_mbe_;
  uint8_t csum1_disable_check_;
  uint8_t csum1_inject_sbe_;
  uint8_t csum1_inject_mbe_;
  uint8_t csum2_disable_check_;
  uint8_t csum2_inject_sbe_;
  uint8_t csum2_inject_mbe_;
  uint8_t csum3_disable_check_;
  uint8_t csum3_inject_sbe_;
  uint8_t csum3_inject_mbe_;
  uint8_t csum4_disable_check_;
  uint8_t csum4_inject_sbe_;
  uint8_t csum4_inject_mbe_;
private:
  static int StartOffset(
      int index_pipe_addrmap, PardeGlueStnRegEnum selector_parde_glue_stn_reg, int index_epb_prsr4_reg, int index_prsr_reg_main_rspec
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    switch (selector_parde_glue_stn_reg) {
      case kEpbprsr4reg:
        offset += 0x20000; // to get to epbprsr4reg
        assert(index_epb_prsr4_reg < 9);
        offset += index_epb_prsr4_reg * 0x2000; // epb_prsr4_reg[]
        offset += 0x1000; // to get to prsr
        assert(index_prsr_reg_main_rspec < 4);
        offset += index_prsr_reg_main_rspec * 0x400; // prsr_reg_main_rspec[]
        offset += 0x1d8; // to get to ecc
        break;
      case kIpbprsr4reg:
        assert(index_epb_prsr4_reg < 9);
        offset += index_epb_prsr4_reg * 0x2000; // ipb_prsr4_reg[]
        offset += 0x1000; // to get to prsr
        assert(index_prsr_reg_main_rspec < 4);
        offset += index_prsr_reg_main_rspec * 0x400; // prsr_reg_main_rspec[]
        offset += 0x1d8; // to get to ecc
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_ECC_MUTABLE_H__
