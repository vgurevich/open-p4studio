/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_INTR_EN1_H__
#define __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_INTR_EN1_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class PrsrRegMainRspecIntrEn1 : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum PardeGlueStnRegEnum {
    kEpbprsr4reg,
    kIpbprsr4reg
  };
public:
  PrsrRegMainRspecIntrEn1(
      int chipNumber, int index_pipe_addrmap, PardeGlueStnRegEnum selector_parde_glue_stn_reg, int index_epb_prsr4_reg, int index_prsr_reg_main_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, selector_parde_glue_stn_reg, index_epb_prsr4_reg, index_prsr_reg_main_rspec), 4, false, write_callback, read_callback, std::string("PrsrRegMainRspecIntrEn1")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(selector_parde_glue_stn_reg) + "," + boost::lexical_cast<std::string>(index_epb_prsr4_reg) + "," + boost::lexical_cast<std::string>(index_prsr_reg_main_rspec))
    {
    }
  PrsrRegMainRspecIntrEn1(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PrsrRegMainRspecIntrEn1")
    {
    }
public:
  uint8_t &no_tcam_match_err() { return no_tcam_match_err_; }
  uint8_t &partial_hdr_err() { return partial_hdr_err_; }
  uint8_t &ctr_range_err() { return ctr_range_err_; }
  uint8_t &timeout_iter_err() { return timeout_iter_err_; }
  uint8_t &timeout_cycle_err() { return timeout_cycle_err_; }
  uint8_t &src_ext_err() { return src_ext_err_; }
  uint8_t &rsvd0() { return rsvd0_; }
  uint8_t &phv_owner_err() { return phv_owner_err_; }
  uint8_t &multi_wr_err() { return multi_wr_err_; }
  uint8_t &aram_sbe() { return aram_sbe_; }
  uint8_t &aram_mbe() { return aram_mbe_; }
  uint8_t &fcs_err() { return fcs_err_; }
  uint8_t &csum_err() { return csum_err_; }
  uint8_t &ibuf_oflow_err() { return ibuf_oflow_err_; }
  uint8_t &ibuf_uflow_err() { return ibuf_uflow_err_; }
  uint8_t &op_fifo_oflow_err() { return op_fifo_oflow_err_; }
  uint8_t &op_fifo_uflow_err() { return op_fifo_uflow_err_; }
  uint8_t &tcam_par_err() { return tcam_par_err_; }
  uint8_t &csum_sbe() { return csum_sbe_; }
  uint8_t &csum_mbe() { return csum_mbe_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (no_tcam_match_err_ & 0x1);
    *data |= ((partial_hdr_err_ & 0x1) << 1);
    *data |= ((ctr_range_err_ & 0x1) << 2);
    *data |= ((timeout_iter_err_ & 0x1) << 3);
    *data |= ((timeout_cycle_err_ & 0x1) << 4);
    *data |= ((src_ext_err_ & 0x1) << 5);
    *data |= ((rsvd0_ & 0x1) << 6);
    *data |= ((phv_owner_err_ & 0x1) << 7);
    *data |= ((multi_wr_err_ & 0x1) << 8);
    *data |= ((aram_sbe_ & 0x1) << 9);
    *data |= ((aram_mbe_ & 0x1) << 10);
    *data |= ((fcs_err_ & 0x1) << 11);
    *data |= ((csum_err_ & 0x1) << 12);
    *data |= ((ibuf_oflow_err_ & 0x1) << 13);
    *data |= ((ibuf_uflow_err_ & 0x1) << 14);
    *data |= ((op_fifo_oflow_err_ & 0x1) << 15);
    *data |= ((op_fifo_uflow_err_ & 0x1) << 16);
    *data |= ((tcam_par_err_ & 0x1) << 17);
    *data |= ((csum_sbe_ & 0x1) << 18);
    *data |= ((csum_mbe_ & 0x1) << 19);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    no_tcam_match_err_ = (data & 0x1);
    partial_hdr_err_ = ((data >> 1) & 0x1);
    ctr_range_err_ = ((data >> 2) & 0x1);
    timeout_iter_err_ = ((data >> 3) & 0x1);
    timeout_cycle_err_ = ((data >> 4) & 0x1);
    src_ext_err_ = ((data >> 5) & 0x1);
    rsvd0_ = ((data >> 6) & 0x1);
    phv_owner_err_ = ((data >> 7) & 0x1);
    multi_wr_err_ = ((data >> 8) & 0x1);
    aram_sbe_ = ((data >> 9) & 0x1);
    aram_mbe_ = ((data >> 10) & 0x1);
    fcs_err_ = ((data >> 11) & 0x1);
    csum_err_ = ((data >> 12) & 0x1);
    ibuf_oflow_err_ = ((data >> 13) & 0x1);
    ibuf_uflow_err_ = ((data >> 14) & 0x1);
    op_fifo_oflow_err_ = ((data >> 15) & 0x1);
    op_fifo_uflow_err_ = ((data >> 16) & 0x1);
    tcam_par_err_ = ((data >> 17) & 0x1);
    csum_sbe_ = ((data >> 18) & 0x1);
    csum_mbe_ = ((data >> 19) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    no_tcam_match_err_ = 0x0;
    partial_hdr_err_ = 0x0;
    ctr_range_err_ = 0x0;
    timeout_iter_err_ = 0x0;
    timeout_cycle_err_ = 0x0;
    src_ext_err_ = 0x0;
    rsvd0_ = 0;
    phv_owner_err_ = 0x0;
    multi_wr_err_ = 0x0;
    aram_sbe_ = 0x0;
    aram_mbe_ = 0x0;
    fcs_err_ = 0x0;
    csum_err_ = 0x0;
    ibuf_oflow_err_ = 0x0;
    ibuf_uflow_err_ = 0x0;
    op_fifo_oflow_err_ = 0x0;
    op_fifo_uflow_err_ = 0x0;
    tcam_par_err_ = 0x0;
    csum_sbe_ = 0x0;
    csum_mbe_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PrsrRegMainRspecIntrEn1") + ":\n";
    r += indent_string + "  " + std::string("no_tcam_match_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(no_tcam_match_err_) ) + "\n";
    all_zeros &= (0 == no_tcam_match_err_);
    r += indent_string + "  " + std::string("partial_hdr_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(partial_hdr_err_) ) + "\n";
    all_zeros &= (0 == partial_hdr_err_);
    r += indent_string + "  " + std::string("ctr_range_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ctr_range_err_) ) + "\n";
    all_zeros &= (0 == ctr_range_err_);
    r += indent_string + "  " + std::string("timeout_iter_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(timeout_iter_err_) ) + "\n";
    all_zeros &= (0 == timeout_iter_err_);
    r += indent_string + "  " + std::string("timeout_cycle_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(timeout_cycle_err_) ) + "\n";
    all_zeros &= (0 == timeout_cycle_err_);
    r += indent_string + "  " + std::string("src_ext_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(src_ext_err_) ) + "\n";
    all_zeros &= (0 == src_ext_err_);
    r += indent_string + "  " + std::string("rsvd0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rsvd0_) ) + "\n";
    all_zeros &= (0 == rsvd0_);
    r += indent_string + "  " + std::string("phv_owner_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv_owner_err_) ) + "\n";
    all_zeros &= (0 == phv_owner_err_);
    r += indent_string + "  " + std::string("multi_wr_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(multi_wr_err_) ) + "\n";
    all_zeros &= (0 == multi_wr_err_);
    r += indent_string + "  " + std::string("aram_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_sbe_) ) + "\n";
    all_zeros &= (0 == aram_sbe_);
    r += indent_string + "  " + std::string("aram_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_mbe_) ) + "\n";
    all_zeros &= (0 == aram_mbe_);
    r += indent_string + "  " + std::string("fcs_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fcs_err_) ) + "\n";
    all_zeros &= (0 == fcs_err_);
    r += indent_string + "  " + std::string("csum_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum_err_) ) + "\n";
    all_zeros &= (0 == csum_err_);
    r += indent_string + "  " + std::string("ibuf_oflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibuf_oflow_err_) ) + "\n";
    all_zeros &= (0 == ibuf_oflow_err_);
    r += indent_string + "  " + std::string("ibuf_uflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibuf_uflow_err_) ) + "\n";
    all_zeros &= (0 == ibuf_uflow_err_);
    r += indent_string + "  " + std::string("op_fifo_oflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(op_fifo_oflow_err_) ) + "\n";
    all_zeros &= (0 == op_fifo_oflow_err_);
    r += indent_string + "  " + std::string("op_fifo_uflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(op_fifo_uflow_err_) ) + "\n";
    all_zeros &= (0 == op_fifo_uflow_err_);
    r += indent_string + "  " + std::string("tcam_par_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_par_err_) ) + "\n";
    all_zeros &= (0 == tcam_par_err_);
    r += indent_string + "  " + std::string("csum_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum_sbe_) ) + "\n";
    all_zeros &= (0 == csum_sbe_);
    r += indent_string + "  " + std::string("csum_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum_mbe_) ) + "\n";
    all_zeros &= (0 == csum_mbe_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PrsrRegMainRspecIntrEn1") + ":\n";
    r += indent_string + "  " + std::string("no_tcam_match_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(no_tcam_match_err_) ) + "\n";
    all_zeros &= (0 == no_tcam_match_err_);
    r += indent_string + "  " + std::string("partial_hdr_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(partial_hdr_err_) ) + "\n";
    all_zeros &= (0 == partial_hdr_err_);
    r += indent_string + "  " + std::string("ctr_range_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ctr_range_err_) ) + "\n";
    all_zeros &= (0 == ctr_range_err_);
    r += indent_string + "  " + std::string("timeout_iter_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(timeout_iter_err_) ) + "\n";
    all_zeros &= (0 == timeout_iter_err_);
    r += indent_string + "  " + std::string("timeout_cycle_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(timeout_cycle_err_) ) + "\n";
    all_zeros &= (0 == timeout_cycle_err_);
    r += indent_string + "  " + std::string("src_ext_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(src_ext_err_) ) + "\n";
    all_zeros &= (0 == src_ext_err_);
    r += indent_string + "  " + std::string("rsvd0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rsvd0_) ) + "\n";
    all_zeros &= (0 == rsvd0_);
    r += indent_string + "  " + std::string("phv_owner_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv_owner_err_) ) + "\n";
    all_zeros &= (0 == phv_owner_err_);
    r += indent_string + "  " + std::string("multi_wr_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(multi_wr_err_) ) + "\n";
    all_zeros &= (0 == multi_wr_err_);
    r += indent_string + "  " + std::string("aram_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_sbe_) ) + "\n";
    all_zeros &= (0 == aram_sbe_);
    r += indent_string + "  " + std::string("aram_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aram_mbe_) ) + "\n";
    all_zeros &= (0 == aram_mbe_);
    r += indent_string + "  " + std::string("fcs_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fcs_err_) ) + "\n";
    all_zeros &= (0 == fcs_err_);
    r += indent_string + "  " + std::string("csum_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum_err_) ) + "\n";
    all_zeros &= (0 == csum_err_);
    r += indent_string + "  " + std::string("ibuf_oflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibuf_oflow_err_) ) + "\n";
    all_zeros &= (0 == ibuf_oflow_err_);
    r += indent_string + "  " + std::string("ibuf_uflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibuf_uflow_err_) ) + "\n";
    all_zeros &= (0 == ibuf_uflow_err_);
    r += indent_string + "  " + std::string("op_fifo_oflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(op_fifo_oflow_err_) ) + "\n";
    all_zeros &= (0 == op_fifo_oflow_err_);
    r += indent_string + "  " + std::string("op_fifo_uflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(op_fifo_uflow_err_) ) + "\n";
    all_zeros &= (0 == op_fifo_uflow_err_);
    r += indent_string + "  " + std::string("tcam_par_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_par_err_) ) + "\n";
    all_zeros &= (0 == tcam_par_err_);
    r += indent_string + "  " + std::string("csum_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum_sbe_) ) + "\n";
    all_zeros &= (0 == csum_sbe_);
    r += indent_string + "  " + std::string("csum_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(csum_mbe_) ) + "\n";
    all_zeros &= (0 == csum_mbe_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t no_tcam_match_err_;
  uint8_t partial_hdr_err_;
  uint8_t ctr_range_err_;
  uint8_t timeout_iter_err_;
  uint8_t timeout_cycle_err_;
  uint8_t src_ext_err_;
  uint8_t rsvd0_;
  uint8_t phv_owner_err_;
  uint8_t multi_wr_err_;
  uint8_t aram_sbe_;
  uint8_t aram_mbe_;
  uint8_t fcs_err_;
  uint8_t csum_err_;
  uint8_t ibuf_oflow_err_;
  uint8_t ibuf_uflow_err_;
  uint8_t op_fifo_oflow_err_;
  uint8_t op_fifo_uflow_err_;
  uint8_t tcam_par_err_;
  uint8_t csum_sbe_;
  uint8_t csum_mbe_;
private:
  static int StartOffset(
      int index_pipe_addrmap, PardeGlueStnRegEnum selector_parde_glue_stn_reg, int index_epb_prsr4_reg, int index_prsr_reg_main_rspec
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    switch (selector_parde_glue_stn_reg) {
      case kEpbprsr4reg:
        offset += 0x20000; // to get to epbprsr4reg
        assert(index_epb_prsr4_reg < 9);
        offset += index_epb_prsr4_reg * 0x2000; // epb_prsr4_reg[]
        offset += 0x1000; // to get to prsr
        assert(index_prsr_reg_main_rspec < 4);
        offset += index_prsr_reg_main_rspec * 0x400; // prsr_reg_main_rspec[]
        offset += 0x188; // to get to intr_en1
        break;
      case kIpbprsr4reg:
        assert(index_epb_prsr4_reg < 9);
        offset += index_epb_prsr4_reg * 0x2000; // ipb_prsr4_reg[]
        offset += 0x1000; // to get to prsr
        assert(index_prsr_reg_main_rspec < 4);
        offset += index_prsr_reg_main_rspec * 0x400; // prsr_reg_main_rspec[]
        offset += 0x188; // to get to intr_en1
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_INTR_EN1_H__
