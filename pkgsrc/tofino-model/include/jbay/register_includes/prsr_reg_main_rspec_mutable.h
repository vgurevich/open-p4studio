/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "parity_control_r_mutable.h"
#include "prsr_reg_main_rspec_aram_mbe_cnt_mutable.h"
#include "prsr_reg_main_rspec_aram_mbe_err_log_mutable.h"
#include "prsr_reg_main_rspec_aram_sbe_cnt_mutable.h"
#include "prsr_reg_main_rspec_aram_sbe_err_log_mutable.h"
#include "prsr_reg_main_rspec_csum_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_csum_mbe_cnt_mutable.h"
#include "prsr_reg_main_rspec_csum_mbe_err_log_mutable.h"
#include "prsr_reg_main_rspec_csum_sbe_cnt_mutable.h"
#include "prsr_reg_main_rspec_csum_sbe_err_log_mutable.h"
#include "prsr_reg_main_rspec_ctr_range_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_ctr_range_err_log_mutable.h"
#include "prsr_reg_main_rspec_debug_ctrl_mutable.h"
#include "prsr_reg_main_rspec_ecc_mutable.h"
#include "prsr_reg_main_rspec_err_phv_cfg_mutable.h"
#include "prsr_reg_main_rspec_fcs_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_hdr_byte_cnt_mutable.h"
#include "prsr_reg_main_rspec_hdr_len_adj_mutable.h"
#include "prsr_reg_main_rspec_ibuf_oflow_err_log_mutable.h"
#include "prsr_reg_main_rspec_ibuf_uflow_err_log_mutable.h"
#include "prsr_reg_main_rspec_idle_cnt_mutable.h"
#include "prsr_reg_main_rspec_intr_mutable.h"
#include "prsr_reg_main_rspec_iq_state_mutable.h"
#include "prsr_reg_main_rspec_max_cycle_mutable.h"
#include "prsr_reg_main_rspec_max_iter_mutable.h"
#include "prsr_reg_main_rspec_mem_ctrl_mutable.h"
#include "prsr_reg_main_rspec_multi_wr_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_multi_wr_err_log_mutable.h"
#include "prsr_reg_main_rspec_no_multi_wr_mutable.h"
#include "prsr_reg_main_rspec_no_tcam_match_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_no_tcam_match_err_log_mutable.h"
#include "prsr_reg_main_rspec_op_fifo_full_cnt_mutable.h"
#include "prsr_reg_main_rspec_op_fifo_full_stall_cnt_mutable.h"
#include "prsr_reg_main_rspec_op_fifo_oflow_err_log_mutable.h"
#include "prsr_reg_main_rspec_op_fifo_state_mutable.h"
#include "prsr_reg_main_rspec_op_fifo_uflow_err_log_mutable.h"
#include "prsr_reg_main_rspec_out_arb_ctrl_mutable.h"
#include "prsr_reg_main_rspec_partial_hdr_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_partial_hdr_err_log_mutable.h"
#include "prsr_reg_main_rspec_phv_clr_on_wr_mutable.h"
#include "prsr_reg_main_rspec_phv_owner_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_phv_owner_err_log_mutable.h"
#include "prsr_reg_main_rspec_phv_owner_mutable.h"
#include "prsr_reg_main_rspec_pkt_drop_cnt_mutable.h"
#include "prsr_reg_main_rspec_pkt_rx_cnt_mutable.h"
#include "prsr_reg_main_rspec_pkt_tx_cnt_mutable.h"
#include "prsr_reg_main_rspec_port_chnl_en_mutable.h"
#include "prsr_reg_main_rspec_port_rate_cfg_mutable.h"
#include "prsr_reg_main_rspec_pri_map_mutable.h"
#include "prsr_reg_main_rspec_pri_start_mutable.h"
#include "prsr_reg_main_rspec_pri_thresh_mutable.h"
#include "prsr_reg_main_rspec_seq_reset_mutable.h"
#include "prsr_reg_main_rspec_src_ext_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_src_ext_err_log_mutable.h"
#include "prsr_reg_main_rspec_start_lookup_offsets_mutable.h"
#include "prsr_reg_main_rspec_start_state_mutable.h"
#include "prsr_reg_main_rspec_tcam_par_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_tcam_par_err_log_mutable.h"
#include "prsr_reg_main_rspec_timeout_cycle_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_timeout_cycle_err_log_mutable.h"
#include "prsr_reg_main_rspec_timeout_iter_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_timeout_iter_err_log_mutable.h"
#include "prsr_reg_main_rspec_ver_upd_mutable.h"

namespace jbay {
  namespace register_classes {

class PrsrRegMainRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum PardeGlueStnRegEnum {
    kEpbprsr4reg,
    kIpbprsr4reg
  };
public:
  PrsrRegMainRspecMutable(
      int chipNumber, int index_pipe_addrmap, PardeGlueStnRegEnum selector_parde_glue_stn_reg, int index_epb_prsr4_reg, int index_prsr_reg_main_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, selector_parde_glue_stn_reg, index_epb_prsr4_reg, index_prsr_reg_main_rspec), 1024, true, write_callback, read_callback, std::string("PrsrRegMainRspecMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(selector_parde_glue_stn_reg) + "," + boost::lexical_cast<std::string>(index_epb_prsr4_reg) + "," + boost::lexical_cast<std::string>(index_prsr_reg_main_rspec))
    {
    }
  PrsrRegMainRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PrsrRegMainRspecMutable")
    {
    }
public:






  PrsrRegMainRspecPortRateCfgMutable &port_rate_cfg() { return port_rate_cfg_; }





  PrsrRegMainRspecPortChnlEnMutable &port_chnl_en() { return port_chnl_en_; }





  PrsrRegMainRspecStartStateMutable &start_state() { return start_state_; }








  PrsrRegMainRspecStartLookupOffsetsMutable &start_lookup_offsets(int j0) { return start_lookup_offsets_[j0]; }






  PrsrRegMainRspecMaxIterMutable &max_iter() { return max_iter_; }






  PrsrRegMainRspecMaxCycleMutable &max_cycle() { return max_cycle_; }





  PrsrRegMainRspecPriStartMutable &pri_start() { return pri_start_; }







  PrsrRegMainRspecPriThreshMutable &pri_thresh() { return pri_thresh_; }





  PrsrRegMainRspecHdrLenAdjMutable &hdr_len_adj() { return hdr_len_adj_; }







  PrsrRegMainRspecPriMapMutable &pri_map(int j0) { return pri_map_[j0]; }





  PrsrRegMainRspecSeqResetMutable &seq_reset() { return seq_reset_; }





  PrsrRegMainRspecOutArbCtrlMutable &out_arb_ctrl() { return out_arb_ctrl_; }





  PrsrRegMainRspecPhvOwnerMutable &phv_owner() { return phv_owner_; }







  PrsrRegMainRspecNoMultiWrMutable &no_multi_wr() { return no_multi_wr_; }







  PrsrRegMainRspecErrPhvCfgMutable &err_phv_cfg(int j0) { return err_phv_cfg_[j0]; }






  PrsrRegMainRspecHdrByteCntMutable &hdr_byte_cnt(int j0) { return hdr_byte_cnt_[j0]; }






  PrsrRegMainRspecIdleCntMutable &idle_cnt(int j0) { return idle_cnt_[j0]; }






  PrsrRegMainRspecPktRxCntMutable &pkt_rx_cnt(int j0) { return pkt_rx_cnt_[j0]; }






  PrsrRegMainRspecPktTxCntMutable &pkt_tx_cnt(int j0) { return pkt_tx_cnt_[j0]; }






  PrsrRegMainRspecPktDropCntMutable &pkt_drop_cnt(int j0) { return pkt_drop_cnt_[j0]; }




  PrsrRegMainRspecOpFifoFullCntMutable &op_fifo_full_cnt() { return op_fifo_full_cnt_; }




  PrsrRegMainRspecOpFifoFullStallCntMutable &op_fifo_full_stall_cnt() { return op_fifo_full_stall_cnt_; }




  PrsrRegMainRspecNoTcamMatchErrCntMutable &no_tcam_match_err_cnt() { return no_tcam_match_err_cnt_; }




  PrsrRegMainRspecPartialHdrErrCntMutable &partial_hdr_err_cnt() { return partial_hdr_err_cnt_; }




  PrsrRegMainRspecCtrRangeErrCntMutable &ctr_range_err_cnt() { return ctr_range_err_cnt_; }




  PrsrRegMainRspecTimeoutIterErrCntMutable &timeout_iter_err_cnt() { return timeout_iter_err_cnt_; }




  PrsrRegMainRspecTimeoutCycleErrCntMutable &timeout_cycle_err_cnt() { return timeout_cycle_err_cnt_; }




  PrsrRegMainRspecSrcExtErrCntMutable &src_ext_err_cnt() { return src_ext_err_cnt_; }




  PrsrRegMainRspecPhvOwnerErrCntMutable &phv_owner_err_cnt() { return phv_owner_err_cnt_; }




  PrsrRegMainRspecMultiWrErrCntMutable &multi_wr_err_cnt() { return multi_wr_err_cnt_; }




  PrsrRegMainRspecAramSbeCntMutable &aram_sbe_cnt() { return aram_sbe_cnt_; }




  PrsrRegMainRspecAramMbeCntMutable &aram_mbe_cnt() { return aram_mbe_cnt_; }




  PrsrRegMainRspecFcsErrCntMutable &fcs_err_cnt() { return fcs_err_cnt_; }




  PrsrRegMainRspecCsumErrCntMutable &csum_err_cnt() { return csum_err_cnt_; }




  PrsrRegMainRspecTcamParErrCntMutable &tcam_par_err_cnt() { return tcam_par_err_cnt_; }




  PrsrRegMainRspecCsumSbeCntMutable &csum_sbe_cnt() { return csum_sbe_cnt_; }




  PrsrRegMainRspecCsumMbeCntMutable &csum_mbe_cnt() { return csum_mbe_cnt_; }





  PrsrRegMainRspecNoTcamMatchErrLogMutable &no_tcam_match_err_log() { return no_tcam_match_err_log_; }





  PrsrRegMainRspecTimeoutIterErrLogMutable &timeout_iter_err_log() { return timeout_iter_err_log_; }





  PrsrRegMainRspecTimeoutCycleErrLogMutable &timeout_cycle_err_log() { return timeout_cycle_err_log_; }





  PrsrRegMainRspecPartialHdrErrLogMutable &partial_hdr_err_log() { return partial_hdr_err_log_; }





  PrsrRegMainRspecCtrRangeErrLogMutable &ctr_range_err_log() { return ctr_range_err_log_; }





  PrsrRegMainRspecMultiWrErrLogMutable &multi_wr_err_log() { return multi_wr_err_log_; }





  PrsrRegMainRspecPhvOwnerErrLogMutable &phv_owner_err_log() { return phv_owner_err_log_; }





  PrsrRegMainRspecSrcExtErrLogMutable &src_ext_err_log() { return src_ext_err_log_; }





  PrsrRegMainRspecAramSbeErrLogMutable &aram_sbe_err_log() { return aram_sbe_err_log_; }





  PrsrRegMainRspecAramMbeErrLogMutable &aram_mbe_err_log() { return aram_mbe_err_log_; }





  PrsrRegMainRspecTcamParErrLogMutable &tcam_par_err_log() { return tcam_par_err_log_; }





  PrsrRegMainRspecIbufOflowErrLogMutable &ibuf_oflow_err_log() { return ibuf_oflow_err_log_; }





  PrsrRegMainRspecIbufUflowErrLogMutable &ibuf_uflow_err_log() { return ibuf_uflow_err_log_; }





  PrsrRegMainRspecOpFifoOflowErrLogMutable &op_fifo_oflow_err_log() { return op_fifo_oflow_err_log_; }





  PrsrRegMainRspecOpFifoUflowErrLogMutable &op_fifo_uflow_err_log() { return op_fifo_uflow_err_log_; }





  PrsrRegMainRspecCsumSbeErrLogMutable &csum_sbe_err_log() { return csum_sbe_err_log_; }





  PrsrRegMainRspecCsumMbeErrLogMutable &csum_mbe_err_log() { return csum_mbe_err_log_; }








  PrsrRegMainRspecEccMutable &ecc() { return ecc_; }





  ParityControlRMutable &parity() { return parity_; }





  PrsrRegMainRspecDebugCtrlMutable &debug_ctrl() { return debug_ctrl_; }





  PrsrRegMainRspecMemCtrlMutable &mem_ctrl() { return mem_ctrl_; }





  PrsrRegMainRspecOpFifoStateMutable &op_fifo_state() { return op_fifo_state_; }





  PrsrRegMainRspecVerUpdMutable &ver_upd() { return ver_upd_; }





  PrsrRegMainRspecIqStateMutable &iq_state() { return iq_state_; }






  PrsrRegMainRspecPhvClrOnWrMutable &phv_clr_on_wr() { return phv_clr_on_wr_; }
  PrsrRegMainRspecIntrMutable &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      port_rate_cfg_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      port_chnl_en_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      start_state_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      start_lookup_offsets_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      max_iter_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      max_cycle_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      pri_start_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      pri_thresh_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      hdr_len_adj_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x38) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pri_map_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      seq_reset_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      out_arb_ctrl_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x60) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      phv_owner_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x80) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      no_multi_wr_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x88) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      err_phv_cfg_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      hdr_byte_cnt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      idle_cnt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      pkt_rx_cnt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xd0) {
      offset -= 0xc0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      pkt_tx_cnt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xd0 && offset < 0xe0) {
      offset -= 0xd0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      pkt_drop_cnt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0xe8) {
      offset -= 0xe0;
      if (read_callback_) read_callback_();
      op_fifo_full_cnt_.read( offset, data );
    }
    else if (offset >= 0xe8 && offset < 0xf0) {
      offset -= 0xe8;
      if (read_callback_) read_callback_();
      op_fifo_full_stall_cnt_.read( offset, data );
    }
    else if (offset >= 0xf0 && offset < 0xf8) {
      offset -= 0xf0;
      if (read_callback_) read_callback_();
      no_tcam_match_err_cnt_.read( offset, data );
    }
    else if (offset >= 0xf8 && offset < 0x100) {
      offset -= 0xf8;
      if (read_callback_) read_callback_();
      partial_hdr_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x108) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      ctr_range_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x108 && offset < 0x110) {
      offset -= 0x108;
      if (read_callback_) read_callback_();
      timeout_iter_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x110 && offset < 0x118) {
      offset -= 0x110;
      if (read_callback_) read_callback_();
      timeout_cycle_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x118 && offset < 0x120) {
      offset -= 0x118;
      if (read_callback_) read_callback_();
      src_ext_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x120 && offset < 0x128) {
      offset -= 0x120;
      if (read_callback_) read_callback_();
      phv_owner_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x128 && offset < 0x130) {
      offset -= 0x128;
      if (read_callback_) read_callback_();
      multi_wr_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x130 && offset < 0x138) {
      offset -= 0x130;
      if (read_callback_) read_callback_();
      aram_sbe_cnt_.read( offset, data );
    }
    else if (offset >= 0x138 && offset < 0x140) {
      offset -= 0x138;
      if (read_callback_) read_callback_();
      aram_mbe_cnt_.read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x148) {
      offset -= 0x140;
      if (read_callback_) read_callback_();
      fcs_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x148 && offset < 0x150) {
      offset -= 0x148;
      if (read_callback_) read_callback_();
      csum_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x150 && offset < 0x158) {
      offset -= 0x150;
      if (read_callback_) read_callback_();
      tcam_par_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x158 && offset < 0x160) {
      offset -= 0x158;
      if (read_callback_) read_callback_();
      csum_sbe_cnt_.read( offset, data );
    }
    else if (offset >= 0x160 && offset < 0x168) {
      offset -= 0x160;
      if (read_callback_) read_callback_();
      csum_mbe_cnt_.read( offset, data );
    }
    else if (offset >= 0x194 && offset < 0x198) {
      offset -= 0x194;
      if (read_callback_) read_callback_();
      no_tcam_match_err_log_.read( offset, data );
    }
    else if (offset >= 0x198 && offset < 0x19c) {
      offset -= 0x198;
      if (read_callback_) read_callback_();
      timeout_iter_err_log_.read( offset, data );
    }
    else if (offset >= 0x19c && offset < 0x1a0) {
      offset -= 0x19c;
      if (read_callback_) read_callback_();
      timeout_cycle_err_log_.read( offset, data );
    }
    else if (offset >= 0x1a0 && offset < 0x1a4) {
      offset -= 0x1a0;
      if (read_callback_) read_callback_();
      partial_hdr_err_log_.read( offset, data );
    }
    else if (offset >= 0x1a4 && offset < 0x1a8) {
      offset -= 0x1a4;
      if (read_callback_) read_callback_();
      ctr_range_err_log_.read( offset, data );
    }
    else if (offset >= 0x1a8 && offset < 0x1ac) {
      offset -= 0x1a8;
      if (read_callback_) read_callback_();
      multi_wr_err_log_.read( offset, data );
    }
    else if (offset >= 0x1ac && offset < 0x1b0) {
      offset -= 0x1ac;
      if (read_callback_) read_callback_();
      phv_owner_err_log_.read( offset, data );
    }
    else if (offset >= 0x1b0 && offset < 0x1b4) {
      offset -= 0x1b0;
      if (read_callback_) read_callback_();
      src_ext_err_log_.read( offset, data );
    }
    else if (offset >= 0x1b4 && offset < 0x1b8) {
      offset -= 0x1b4;
      if (read_callback_) read_callback_();
      aram_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x1b8 && offset < 0x1bc) {
      offset -= 0x1b8;
      if (read_callback_) read_callback_();
      aram_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x1bc && offset < 0x1c0) {
      offset -= 0x1bc;
      if (read_callback_) read_callback_();
      tcam_par_err_log_.read( offset, data );
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      if (read_callback_) read_callback_();
      ibuf_oflow_err_log_.read( offset, data );
    }
    else if (offset >= 0x1c4 && offset < 0x1c8) {
      offset -= 0x1c4;
      if (read_callback_) read_callback_();
      ibuf_uflow_err_log_.read( offset, data );
    }
    else if (offset >= 0x1c8 && offset < 0x1cc) {
      offset -= 0x1c8;
      if (read_callback_) read_callback_();
      op_fifo_oflow_err_log_.read( offset, data );
    }
    else if (offset >= 0x1cc && offset < 0x1d0) {
      offset -= 0x1cc;
      if (read_callback_) read_callback_();
      op_fifo_uflow_err_log_.read( offset, data );
    }
    else if (offset >= 0x1d0 && offset < 0x1d4) {
      offset -= 0x1d0;
      if (read_callback_) read_callback_();
      csum_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x1d4 && offset < 0x1d8) {
      offset -= 0x1d4;
      if (read_callback_) read_callback_();
      csum_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x1d8 && offset < 0x1e0) {
      offset -= 0x1d8;
      if (read_callback_) read_callback_();
      ecc_.read( offset, data );
    }
    else if (offset >= 0x1e0 && offset < 0x1e4) {
      offset -= 0x1e0;
      if (read_callback_) read_callback_();
      parity_.read( offset, data );
    }
    else if (offset >= 0x1e4 && offset < 0x1e8) {
      offset -= 0x1e4;
      if (read_callback_) read_callback_();
      debug_ctrl_.read( offset, data );
    }
    else if (offset >= 0x1e8 && offset < 0x1ec) {
      offset -= 0x1e8;
      if (read_callback_) read_callback_();
      mem_ctrl_.read( offset, data );
    }
    else if (offset >= 0x1ec && offset < 0x1f0) {
      offset -= 0x1ec;
      if (read_callback_) read_callback_();
      op_fifo_state_.read( offset, data );
    }
    else if (offset >= 0x1f0 && offset < 0x1f4) {
      offset -= 0x1f0;
      if (read_callback_) read_callback_();
      ver_upd_.read( offset, data );
    }
    else if (offset >= 0x1f4 && offset < 0x1f8) {
      offset -= 0x1f4;
      if (read_callback_) read_callback_();
      iq_state_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x220) {
      offset -= 0x200;
      if (read_callback_) read_callback_();
      phv_clr_on_wr_.read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x194) {
      offset -= 0x180;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      port_rate_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      port_chnl_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      start_state_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      start_lookup_offsets_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      max_iter_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      max_cycle_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      pri_start_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      pri_thresh_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      hdr_len_adj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x38) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pri_map_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      seq_reset_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      out_arb_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x60) {
      offset -= 0x40;
      phv_owner_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x80) {
      offset -= 0x60;
      no_multi_wr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x88) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      err_phv_cfg_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      hdr_byte_cnt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      idle_cnt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      pkt_rx_cnt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xd0) {
      offset -= 0xc0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      pkt_tx_cnt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd0 && offset < 0xe0) {
      offset -= 0xd0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      pkt_drop_cnt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0xe8) {
      offset -= 0xe0;
      op_fifo_full_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe8 && offset < 0xf0) {
      offset -= 0xe8;
      op_fifo_full_stall_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf0 && offset < 0xf8) {
      offset -= 0xf0;
      no_tcam_match_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf8 && offset < 0x100) {
      offset -= 0xf8;
      partial_hdr_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x108) {
      offset -= 0x100;
      ctr_range_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x108 && offset < 0x110) {
      offset -= 0x108;
      timeout_iter_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x110 && offset < 0x118) {
      offset -= 0x110;
      timeout_cycle_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x118 && offset < 0x120) {
      offset -= 0x118;
      src_ext_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x120 && offset < 0x128) {
      offset -= 0x120;
      phv_owner_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x128 && offset < 0x130) {
      offset -= 0x128;
      multi_wr_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x130 && offset < 0x138) {
      offset -= 0x130;
      aram_sbe_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x138 && offset < 0x140) {
      offset -= 0x138;
      aram_mbe_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x148) {
      offset -= 0x140;
      fcs_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x148 && offset < 0x150) {
      offset -= 0x148;
      csum_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x150 && offset < 0x158) {
      offset -= 0x150;
      tcam_par_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x158 && offset < 0x160) {
      offset -= 0x158;
      csum_sbe_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x160 && offset < 0x168) {
      offset -= 0x160;
      csum_mbe_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x194 && offset < 0x198) {
      offset -= 0x194;
      no_tcam_match_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x198 && offset < 0x19c) {
      offset -= 0x198;
      timeout_iter_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x19c && offset < 0x1a0) {
      offset -= 0x19c;
      timeout_cycle_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1a0 && offset < 0x1a4) {
      offset -= 0x1a0;
      partial_hdr_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1a4 && offset < 0x1a8) {
      offset -= 0x1a4;
      ctr_range_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1a8 && offset < 0x1ac) {
      offset -= 0x1a8;
      multi_wr_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1ac && offset < 0x1b0) {
      offset -= 0x1ac;
      phv_owner_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1b0 && offset < 0x1b4) {
      offset -= 0x1b0;
      src_ext_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1b4 && offset < 0x1b8) {
      offset -= 0x1b4;
      aram_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1b8 && offset < 0x1bc) {
      offset -= 0x1b8;
      aram_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1bc && offset < 0x1c0) {
      offset -= 0x1bc;
      tcam_par_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      ibuf_oflow_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c4 && offset < 0x1c8) {
      offset -= 0x1c4;
      ibuf_uflow_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c8 && offset < 0x1cc) {
      offset -= 0x1c8;
      op_fifo_oflow_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1cc && offset < 0x1d0) {
      offset -= 0x1cc;
      op_fifo_uflow_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1d0 && offset < 0x1d4) {
      offset -= 0x1d0;
      csum_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1d4 && offset < 0x1d8) {
      offset -= 0x1d4;
      csum_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1d8 && offset < 0x1e0) {
      offset -= 0x1d8;
      ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e0 && offset < 0x1e4) {
      offset -= 0x1e0;
      parity_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e4 && offset < 0x1e8) {
      offset -= 0x1e4;
      debug_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e8 && offset < 0x1ec) {
      offset -= 0x1e8;
      mem_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1ec && offset < 0x1f0) {
      offset -= 0x1ec;
      op_fifo_state_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1f0 && offset < 0x1f4) {
      offset -= 0x1f0;
      ver_upd_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1f4 && offset < 0x1f8) {
      offset -= 0x1f4;
      iq_state_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x220) {
      offset -= 0x200;
      phv_clr_on_wr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x194) {
      offset -= 0x180;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    port_rate_cfg_.reset();
    port_chnl_en_.reset();
    start_state_.reset();
    for (auto &f0 : start_lookup_offsets_) {
      f0.reset();
    }
    max_iter_.reset();
    max_cycle_.reset();
    pri_start_.reset();
    pri_thresh_.reset();
    hdr_len_adj_.reset();
    for (auto &f0 : pri_map_) {
      f0.reset();
    }
    seq_reset_.reset();
    out_arb_ctrl_.reset();
    phv_owner_.reset();
    no_multi_wr_.reset();
    for (auto &f0 : err_phv_cfg_) {
      f0.reset();
    }
    for (auto &f0 : hdr_byte_cnt_) {
      f0.reset();
    }
    for (auto &f0 : idle_cnt_) {
      f0.reset();
    }
    for (auto &f0 : pkt_rx_cnt_) {
      f0.reset();
    }
    for (auto &f0 : pkt_tx_cnt_) {
      f0.reset();
    }
    for (auto &f0 : pkt_drop_cnt_) {
      f0.reset();
    }
    op_fifo_full_cnt_.reset();
    op_fifo_full_stall_cnt_.reset();
    no_tcam_match_err_cnt_.reset();
    partial_hdr_err_cnt_.reset();
    ctr_range_err_cnt_.reset();
    timeout_iter_err_cnt_.reset();
    timeout_cycle_err_cnt_.reset();
    src_ext_err_cnt_.reset();
    phv_owner_err_cnt_.reset();
    multi_wr_err_cnt_.reset();
    aram_sbe_cnt_.reset();
    aram_mbe_cnt_.reset();
    fcs_err_cnt_.reset();
    csum_err_cnt_.reset();
    tcam_par_err_cnt_.reset();
    csum_sbe_cnt_.reset();
    csum_mbe_cnt_.reset();
    no_tcam_match_err_log_.reset();
    timeout_iter_err_log_.reset();
    timeout_cycle_err_log_.reset();
    partial_hdr_err_log_.reset();
    ctr_range_err_log_.reset();
    multi_wr_err_log_.reset();
    phv_owner_err_log_.reset();
    src_ext_err_log_.reset();
    aram_sbe_err_log_.reset();
    aram_mbe_err_log_.reset();
    tcam_par_err_log_.reset();
    ibuf_oflow_err_log_.reset();
    ibuf_uflow_err_log_.reset();
    op_fifo_oflow_err_log_.reset();
    op_fifo_uflow_err_log_.reset();
    csum_sbe_err_log_.reset();
    csum_mbe_err_log_.reset();
    ecc_.reset();
    parity_.reset();
    debug_ctrl_.reset();
    mem_ctrl_.reset();
    op_fifo_state_.reset();
    ver_upd_.reset();
    iq_state_.reset();
    phv_clr_on_wr_.reset();
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += port_rate_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += port_chnl_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += start_state_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += start_lookup_offsets_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += max_iter_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += max_cycle_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += pri_start_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += pri_thresh_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += hdr_len_adj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x38) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pri_map_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += seq_reset_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += out_arb_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x60) {
      offset -= 0x40;
      r += phv_owner_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x80) {
      offset -= 0x60;
      r += no_multi_wr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x88) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += err_phv_cfg_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += hdr_byte_cnt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += idle_cnt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += pkt_rx_cnt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xd0) {
      offset -= 0xc0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += pkt_tx_cnt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd0 && offset < 0xe0) {
      offset -= 0xd0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += pkt_drop_cnt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0xe8) {
      offset -= 0xe0;
      r += op_fifo_full_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe8 && offset < 0xf0) {
      offset -= 0xe8;
      r += op_fifo_full_stall_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf0 && offset < 0xf8) {
      offset -= 0xf0;
      r += no_tcam_match_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf8 && offset < 0x100) {
      offset -= 0xf8;
      r += partial_hdr_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x108) {
      offset -= 0x100;
      r += ctr_range_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x108 && offset < 0x110) {
      offset -= 0x108;
      r += timeout_iter_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x110 && offset < 0x118) {
      offset -= 0x110;
      r += timeout_cycle_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x118 && offset < 0x120) {
      offset -= 0x118;
      r += src_ext_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x120 && offset < 0x128) {
      offset -= 0x120;
      r += phv_owner_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x128 && offset < 0x130) {
      offset -= 0x128;
      r += multi_wr_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x130 && offset < 0x138) {
      offset -= 0x130;
      r += aram_sbe_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x138 && offset < 0x140) {
      offset -= 0x138;
      r += aram_mbe_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x148) {
      offset -= 0x140;
      r += fcs_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x148 && offset < 0x150) {
      offset -= 0x148;
      r += csum_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x150 && offset < 0x158) {
      offset -= 0x150;
      r += tcam_par_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x158 && offset < 0x160) {
      offset -= 0x158;
      r += csum_sbe_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x160 && offset < 0x168) {
      offset -= 0x160;
      r += csum_mbe_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x194 && offset < 0x198) {
      offset -= 0x194;
      r += no_tcam_match_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x198 && offset < 0x19c) {
      offset -= 0x198;
      r += timeout_iter_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x19c && offset < 0x1a0) {
      offset -= 0x19c;
      r += timeout_cycle_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1a0 && offset < 0x1a4) {
      offset -= 0x1a0;
      r += partial_hdr_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1a4 && offset < 0x1a8) {
      offset -= 0x1a4;
      r += ctr_range_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1a8 && offset < 0x1ac) {
      offset -= 0x1a8;
      r += multi_wr_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1ac && offset < 0x1b0) {
      offset -= 0x1ac;
      r += phv_owner_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1b0 && offset < 0x1b4) {
      offset -= 0x1b0;
      r += src_ext_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1b4 && offset < 0x1b8) {
      offset -= 0x1b4;
      r += aram_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1b8 && offset < 0x1bc) {
      offset -= 0x1b8;
      r += aram_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1bc && offset < 0x1c0) {
      offset -= 0x1bc;
      r += tcam_par_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      r += ibuf_oflow_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c4 && offset < 0x1c8) {
      offset -= 0x1c4;
      r += ibuf_uflow_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c8 && offset < 0x1cc) {
      offset -= 0x1c8;
      r += op_fifo_oflow_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1cc && offset < 0x1d0) {
      offset -= 0x1cc;
      r += op_fifo_uflow_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1d0 && offset < 0x1d4) {
      offset -= 0x1d0;
      r += csum_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1d4 && offset < 0x1d8) {
      offset -= 0x1d4;
      r += csum_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1d8 && offset < 0x1e0) {
      offset -= 0x1d8;
      r += ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e0 && offset < 0x1e4) {
      offset -= 0x1e0;
      r += parity_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e4 && offset < 0x1e8) {
      offset -= 0x1e4;
      r += debug_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e8 && offset < 0x1ec) {
      offset -= 0x1e8;
      r += mem_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1ec && offset < 0x1f0) {
      offset -= 0x1ec;
      r += op_fifo_state_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1f0 && offset < 0x1f4) {
      offset -= 0x1f0;
      r += ver_upd_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1f4 && offset < 0x1f8) {
      offset -= 0x1f4;
      r += iq_state_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x220) {
      offset -= 0x200;
      r += phv_clr_on_wr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x194) {
      offset -= 0x180;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += port_rate_cfg_.to_string(print_zeros,indent_string) ;
    r += port_chnl_en_.to_string(print_zeros,indent_string) ;
    r += start_state_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<2;++a0) {
      r += start_lookup_offsets_[a0].to_string(print_zeros,indent_string) ;
    }
    r += max_iter_.to_string(print_zeros,indent_string) ;
    r += max_cycle_.to_string(print_zeros,indent_string) ;
    r += pri_start_.to_string(print_zeros,indent_string) ;
    r += pri_thresh_.to_string(print_zeros,indent_string) ;
    r += hdr_len_adj_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<2;++a0) {
      r += pri_map_[a0].to_string(print_zeros,indent_string) ;
    }
    r += seq_reset_.to_string(print_zeros,indent_string) ;
    r += out_arb_ctrl_.to_string(print_zeros,indent_string) ;
    r += phv_owner_.to_string(print_zeros,indent_string) ;
    r += no_multi_wr_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<2;++a0) {
      r += err_phv_cfg_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += hdr_byte_cnt_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += idle_cnt_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += pkt_rx_cnt_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += pkt_tx_cnt_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += pkt_drop_cnt_[a0].to_string(print_zeros,indent_string) ;
    }
    r += op_fifo_full_cnt_.to_string(print_zeros,indent_string) ;
    r += op_fifo_full_stall_cnt_.to_string(print_zeros,indent_string) ;
    r += no_tcam_match_err_cnt_.to_string(print_zeros,indent_string) ;
    r += partial_hdr_err_cnt_.to_string(print_zeros,indent_string) ;
    r += ctr_range_err_cnt_.to_string(print_zeros,indent_string) ;
    r += timeout_iter_err_cnt_.to_string(print_zeros,indent_string) ;
    r += timeout_cycle_err_cnt_.to_string(print_zeros,indent_string) ;
    r += src_ext_err_cnt_.to_string(print_zeros,indent_string) ;
    r += phv_owner_err_cnt_.to_string(print_zeros,indent_string) ;
    r += multi_wr_err_cnt_.to_string(print_zeros,indent_string) ;
    r += aram_sbe_cnt_.to_string(print_zeros,indent_string) ;
    r += aram_mbe_cnt_.to_string(print_zeros,indent_string) ;
    r += fcs_err_cnt_.to_string(print_zeros,indent_string) ;
    r += csum_err_cnt_.to_string(print_zeros,indent_string) ;
    r += tcam_par_err_cnt_.to_string(print_zeros,indent_string) ;
    r += csum_sbe_cnt_.to_string(print_zeros,indent_string) ;
    r += csum_mbe_cnt_.to_string(print_zeros,indent_string) ;
    r += no_tcam_match_err_log_.to_string(print_zeros,indent_string) ;
    r += timeout_iter_err_log_.to_string(print_zeros,indent_string) ;
    r += timeout_cycle_err_log_.to_string(print_zeros,indent_string) ;
    r += partial_hdr_err_log_.to_string(print_zeros,indent_string) ;
    r += ctr_range_err_log_.to_string(print_zeros,indent_string) ;
    r += multi_wr_err_log_.to_string(print_zeros,indent_string) ;
    r += phv_owner_err_log_.to_string(print_zeros,indent_string) ;
    r += src_ext_err_log_.to_string(print_zeros,indent_string) ;
    r += aram_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += aram_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += tcam_par_err_log_.to_string(print_zeros,indent_string) ;
    r += ibuf_oflow_err_log_.to_string(print_zeros,indent_string) ;
    r += ibuf_uflow_err_log_.to_string(print_zeros,indent_string) ;
    r += op_fifo_oflow_err_log_.to_string(print_zeros,indent_string) ;
    r += op_fifo_uflow_err_log_.to_string(print_zeros,indent_string) ;
    r += csum_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += csum_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += ecc_.to_string(print_zeros,indent_string) ;
    r += parity_.to_string(print_zeros,indent_string) ;
    r += debug_ctrl_.to_string(print_zeros,indent_string) ;
    r += mem_ctrl_.to_string(print_zeros,indent_string) ;
    r += op_fifo_state_.to_string(print_zeros,indent_string) ;
    r += ver_upd_.to_string(print_zeros,indent_string) ;
    r += iq_state_.to_string(print_zeros,indent_string) ;
    r += phv_clr_on_wr_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  PrsrRegMainRspecPortRateCfgMutable port_rate_cfg_;
  PrsrRegMainRspecPortChnlEnMutable port_chnl_en_;
  PrsrRegMainRspecStartStateMutable start_state_;
  std::array< PrsrRegMainRspecStartLookupOffsetsMutable, 2 > start_lookup_offsets_;
  PrsrRegMainRspecMaxIterMutable max_iter_;
  PrsrRegMainRspecMaxCycleMutable max_cycle_;
  PrsrRegMainRspecPriStartMutable pri_start_;
  PrsrRegMainRspecPriThreshMutable pri_thresh_;
  PrsrRegMainRspecHdrLenAdjMutable hdr_len_adj_;
  std::array< PrsrRegMainRspecPriMapMutable, 2 > pri_map_;
  PrsrRegMainRspecSeqResetMutable seq_reset_;
  PrsrRegMainRspecOutArbCtrlMutable out_arb_ctrl_;
  PrsrRegMainRspecPhvOwnerMutable phv_owner_;
  PrsrRegMainRspecNoMultiWrMutable no_multi_wr_;
  std::array< PrsrRegMainRspecErrPhvCfgMutable, 2 > err_phv_cfg_;
  std::array< PrsrRegMainRspecHdrByteCntMutable, 2 > hdr_byte_cnt_;
  std::array< PrsrRegMainRspecIdleCntMutable, 2 > idle_cnt_;
  std::array< PrsrRegMainRspecPktRxCntMutable, 2 > pkt_rx_cnt_;
  std::array< PrsrRegMainRspecPktTxCntMutable, 2 > pkt_tx_cnt_;
  std::array< PrsrRegMainRspecPktDropCntMutable, 2 > pkt_drop_cnt_;
  PrsrRegMainRspecOpFifoFullCntMutable op_fifo_full_cnt_;
  PrsrRegMainRspecOpFifoFullStallCntMutable op_fifo_full_stall_cnt_;
  PrsrRegMainRspecNoTcamMatchErrCntMutable no_tcam_match_err_cnt_;
  PrsrRegMainRspecPartialHdrErrCntMutable partial_hdr_err_cnt_;
  PrsrRegMainRspecCtrRangeErrCntMutable ctr_range_err_cnt_;
  PrsrRegMainRspecTimeoutIterErrCntMutable timeout_iter_err_cnt_;
  PrsrRegMainRspecTimeoutCycleErrCntMutable timeout_cycle_err_cnt_;
  PrsrRegMainRspecSrcExtErrCntMutable src_ext_err_cnt_;
  PrsrRegMainRspecPhvOwnerErrCntMutable phv_owner_err_cnt_;
  PrsrRegMainRspecMultiWrErrCntMutable multi_wr_err_cnt_;
  PrsrRegMainRspecAramSbeCntMutable aram_sbe_cnt_;
  PrsrRegMainRspecAramMbeCntMutable aram_mbe_cnt_;
  PrsrRegMainRspecFcsErrCntMutable fcs_err_cnt_;
  PrsrRegMainRspecCsumErrCntMutable csum_err_cnt_;
  PrsrRegMainRspecTcamParErrCntMutable tcam_par_err_cnt_;
  PrsrRegMainRspecCsumSbeCntMutable csum_sbe_cnt_;
  PrsrRegMainRspecCsumMbeCntMutable csum_mbe_cnt_;
  PrsrRegMainRspecNoTcamMatchErrLogMutable no_tcam_match_err_log_;
  PrsrRegMainRspecTimeoutIterErrLogMutable timeout_iter_err_log_;
  PrsrRegMainRspecTimeoutCycleErrLogMutable timeout_cycle_err_log_;
  PrsrRegMainRspecPartialHdrErrLogMutable partial_hdr_err_log_;
  PrsrRegMainRspecCtrRangeErrLogMutable ctr_range_err_log_;
  PrsrRegMainRspecMultiWrErrLogMutable multi_wr_err_log_;
  PrsrRegMainRspecPhvOwnerErrLogMutable phv_owner_err_log_;
  PrsrRegMainRspecSrcExtErrLogMutable src_ext_err_log_;
  PrsrRegMainRspecAramSbeErrLogMutable aram_sbe_err_log_;
  PrsrRegMainRspecAramMbeErrLogMutable aram_mbe_err_log_;
  PrsrRegMainRspecTcamParErrLogMutable tcam_par_err_log_;
  PrsrRegMainRspecIbufOflowErrLogMutable ibuf_oflow_err_log_;
  PrsrRegMainRspecIbufUflowErrLogMutable ibuf_uflow_err_log_;
  PrsrRegMainRspecOpFifoOflowErrLogMutable op_fifo_oflow_err_log_;
  PrsrRegMainRspecOpFifoUflowErrLogMutable op_fifo_uflow_err_log_;
  PrsrRegMainRspecCsumSbeErrLogMutable csum_sbe_err_log_;
  PrsrRegMainRspecCsumMbeErrLogMutable csum_mbe_err_log_;
  PrsrRegMainRspecEccMutable ecc_;
  ParityControlRMutable parity_;
  PrsrRegMainRspecDebugCtrlMutable debug_ctrl_;
  PrsrRegMainRspecMemCtrlMutable mem_ctrl_;
  PrsrRegMainRspecOpFifoStateMutable op_fifo_state_;
  PrsrRegMainRspecVerUpdMutable ver_upd_;
  PrsrRegMainRspecIqStateMutable iq_state_;
  PrsrRegMainRspecPhvClrOnWrMutable phv_clr_on_wr_;
  PrsrRegMainRspecIntrMutable intr_;
private:
  static int StartOffset(
      int index_pipe_addrmap, PardeGlueStnRegEnum selector_parde_glue_stn_reg, int index_epb_prsr4_reg, int index_prsr_reg_main_rspec
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    switch (selector_parde_glue_stn_reg) {
      case kEpbprsr4reg:
        offset += 0x20000; // to get to epbprsr4reg
        assert(index_epb_prsr4_reg < 9);
        offset += index_epb_prsr4_reg * 0x2000; // epb_prsr4_reg[]
        offset += 0x1000; // to get to prsr
        assert(index_prsr_reg_main_rspec < 4);
        offset += index_prsr_reg_main_rspec * 0x400; // prsr_reg_main_rspec[]
        break;
      case kIpbprsr4reg:
        assert(index_epb_prsr4_reg < 9);
        offset += index_epb_prsr4_reg * 0x2000; // ipb_prsr4_reg[]
        offset += 0x1000; // to get to prsr
        assert(index_prsr_reg_main_rspec < 4);
        offset += index_prsr_reg_main_rspec * 0x400; // prsr_reg_main_rspec[]
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_MUTABLE_H__
