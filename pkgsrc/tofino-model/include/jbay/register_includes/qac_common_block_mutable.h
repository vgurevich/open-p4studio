/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_QAC_COMMON_BLOCK_MUTABLE_H__
#define __REGISTER_INCLUDES_QAC_COMMON_BLOCK_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "qac_discard_queue_throttleer_mutable.h"
#include "qac_dod_cnt_cell_mutable.h"
#include "qac_dod_limit_cell_mutable.h"
#include "qac_ep_cnt_cell_mutable.h"
#include "qac_ep_cnt_ph_mutable.h"
#include "qac_ep_limit_cell_mutable.h"
#include "qac_glb_ap_cnt_cell_mutable.h"
#include "qac_glb_ap_cnt_ph_mutable.h"
#include "qac_glb_ap_gre_limit_cell_mutable.h"
#include "qac_glb_ap_red_limit_cell_mutable.h"
#include "qac_glb_ap_yel_limit_cell_mutable.h"
#include "qac_glb_config_mutable.h"
#include "qac_intr_stat_mutable.h"
#include "qac_mcct_cnt_pkt_mutable.h"
#include "qac_mcct_dis_pkt_hys_mutable.h"
#include "qac_mcct_pkt_limit_mutable.h"
#include "qac_mem_init_done_mutable.h"
#include "qac_mem_init_en_mutable.h"
#include "qac_pipe_disable_mutable.h"
#include "qac_pre_fifo_cnt_cell_mutable.h"
#include "qac_pre_fifo_cnt_pkt_mutable.h"
#include "qac_pre_fifo_limit_min_cell_mutable.h"
#include "qac_pre_fifo_limit_pkt_mutable.h"
#include "qac_pre_fifo_limit_shr_cell_mutable.h"
#include "qac_pre_fifo_offset_cell_mutable.h"
#include "qac_queue_parser_fifo_cred_mutable.h"
#include "qac_resume_offset_cell_mutable.h"
#include "qac_uc_disc_disable_mutable.h"
#include "qac_wm_ep_cnt_cell_mutable.h"
#include "qac_wm_glb_ap_cnt_cell_mutable.h"
#include "qac_wm_glb_ap_cnt_ph_mutable.h"

namespace jbay {
  namespace register_classes {

class QacCommonBlockMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  QacCommonBlockMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 628, true, write_callback, read_callback, std::string("QacCommonBlockMutable"))
    {
    }
  QacCommonBlockMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "QacCommonBlockMutable")
    {
    }
public:






  QacGlbConfigMutable &qac_common_qac_glb_config() { return qac_common_qac_glb_config_; }





  QacDodLimitCellMutable &qac_common_qac_dod_limit_cell() { return qac_common_qac_dod_limit_cell_; }





  QacMemInitDoneMutable &qac_common_qac_mem_init_done() { return qac_common_qac_mem_init_done_; }





  QacMemInitEnMutable &qac_common_qac_mem_init_en() { return qac_common_qac_mem_init_en_; }





  QacDodCntCellMutable &qac_common_qac_dod_cnt_cell() { return qac_common_qac_dod_cnt_cell_; }







  QacEpLimitCellMutable &qac_common_qac_ep_limit_cell(int j0) { return qac_common_qac_ep_limit_cell_[j0]; }





  QacResumeOffsetCellMutable &qac_common_qac_ep_resume_offset_cell() { return qac_common_qac_ep_resume_offset_cell_; }





  QacDiscardQueueThrottleerMutable &qac_common_qac_discard_queue_throttleer() { return qac_common_qac_discard_queue_throttleer_; }





  QacUcDiscDisableMutable &qac_common_qac_uc_disc_disable() { return qac_common_qac_uc_disc_disable_; }





  QacIntrStatMutable &qac_common_qac_intr_stat() { return qac_common_qac_intr_stat_; }







  QacGlbApGreLimitCellMutable &qac_common_qac_glb_ap_gre_limit_cell(int j0) { return qac_common_qac_glb_ap_gre_limit_cell_[j0]; }





  QacResumeOffsetCellMutable &qac_common_qac_glb_ap_gre_resume_offset_cell() { return qac_common_qac_glb_ap_gre_resume_offset_cell_; }







  QacGlbApRedLimitCellMutable &qac_common_qac_glb_ap_red_limit_cell(int j0) { return qac_common_qac_glb_ap_red_limit_cell_[j0]; }





  QacResumeOffsetCellMutable &qac_common_qac_glb_ap_red_resume_offset_cell() { return qac_common_qac_glb_ap_red_resume_offset_cell_; }







  QacGlbApYelLimitCellMutable &qac_common_qac_glb_ap_yel_limit_cell(int j0) { return qac_common_qac_glb_ap_yel_limit_cell_[j0]; }





  QacResumeOffsetCellMutable &qac_common_qac_glb_ap_yel_resume_offset_cell() { return qac_common_qac_glb_ap_yel_resume_offset_cell_; }







  QacEpCntCellMutable &qac_common_qac_ep_cnt_cell(int j0) { return qac_common_qac_ep_cnt_cell_[j0]; }







  QacWmEpCntCellMutable &qac_common_qac_wm_ep_cnt_cell(int j0) { return qac_common_qac_wm_ep_cnt_cell_[j0]; }







  QacEpCntPhMutable &qac_common_qac_ep_cnt_ph(int j0) { return qac_common_qac_ep_cnt_ph_[j0]; }







  QacGlbApCntPhMutable &qac_common_qac_glb_ap_cnt_ph(int j0) { return qac_common_qac_glb_ap_cnt_ph_[j0]; }







  QacWmGlbApCntPhMutable &qac_common_qac_wm_glb_ap_cnt_ph(int j0) { return qac_common_qac_wm_glb_ap_cnt_ph_[j0]; }







  QacGlbApCntCellMutable &qac_common_qac_glb_ap_cnt_cell(int j0) { return qac_common_qac_glb_ap_cnt_cell_[j0]; }







  QacWmGlbApCntCellMutable &qac_common_qac_wm_glb_ap_cnt_cell(int j0) { return qac_common_qac_wm_glb_ap_cnt_cell_[j0]; }







  QacPreFifoCntPktMutable &qac_common_qac_pre_fifo_cnt_pkt_pipe0(int j0) { return qac_common_qac_pre_fifo_cnt_pkt_pipe0_[j0]; }







  QacPreFifoCntCellMutable &qac_common_qac_pre_fifo_cnt_cell_pipe0(int j0) { return qac_common_qac_pre_fifo_cnt_cell_pipe0_[j0]; }







  QacPreFifoCntPktMutable &qac_common_qac_pre_fifo_cnt_pkt_pipe1(int j0) { return qac_common_qac_pre_fifo_cnt_pkt_pipe1_[j0]; }







  QacPreFifoCntCellMutable &qac_common_qac_pre_fifo_cnt_cell_pipe1(int j0) { return qac_common_qac_pre_fifo_cnt_cell_pipe1_[j0]; }







  QacPreFifoCntPktMutable &qac_common_qac_pre_fifo_cnt_pkt_pipe2(int j0) { return qac_common_qac_pre_fifo_cnt_pkt_pipe2_[j0]; }







  QacPreFifoCntCellMutable &qac_common_qac_pre_fifo_cnt_cell_pipe2(int j0) { return qac_common_qac_pre_fifo_cnt_cell_pipe2_[j0]; }







  QacPreFifoCntPktMutable &qac_common_qac_pre_fifo_cnt_pkt_pipe3(int j0) { return qac_common_qac_pre_fifo_cnt_pkt_pipe3_[j0]; }







  QacPreFifoCntCellMutable &qac_common_qac_pre_fifo_cnt_cell_pipe3(int j0) { return qac_common_qac_pre_fifo_cnt_cell_pipe3_[j0]; }






  QacPreFifoOffsetCellMutable &qac_common_qac_pre_fifo_offset_cell() { return qac_common_qac_pre_fifo_offset_cell_; }







  QacPreFifoLimitShrCellMutable &qac_common_qac_pre_fifo_limit_shr_cell_pipe0(int j0) { return qac_common_qac_pre_fifo_limit_shr_cell_pipe0_[j0]; }







  QacPreFifoLimitShrCellMutable &qac_common_qac_pre_fifo_limit_shr_cell_pipe1(int j0) { return qac_common_qac_pre_fifo_limit_shr_cell_pipe1_[j0]; }







  QacPreFifoLimitShrCellMutable &qac_common_qac_pre_fifo_limit_shr_cell_pipe2(int j0) { return qac_common_qac_pre_fifo_limit_shr_cell_pipe2_[j0]; }







  QacPreFifoLimitShrCellMutable &qac_common_qac_pre_fifo_limit_shr_cell_pipe3(int j0) { return qac_common_qac_pre_fifo_limit_shr_cell_pipe3_[j0]; }







  QacPreFifoLimitMinCellMutable &qac_common_qac_pre_fifo_limit_min_cell_pipe0(int j0) { return qac_common_qac_pre_fifo_limit_min_cell_pipe0_[j0]; }







  QacPreFifoLimitMinCellMutable &qac_common_qac_pre_fifo_limit_min_cell_pipe1(int j0) { return qac_common_qac_pre_fifo_limit_min_cell_pipe1_[j0]; }







  QacPreFifoLimitMinCellMutable &qac_common_qac_pre_fifo_limit_min_cell_pipe2(int j0) { return qac_common_qac_pre_fifo_limit_min_cell_pipe2_[j0]; }







  QacPreFifoLimitMinCellMutable &qac_common_qac_pre_fifo_limit_min_cell_pipe3(int j0) { return qac_common_qac_pre_fifo_limit_min_cell_pipe3_[j0]; }








  QacPreFifoLimitPktMutable &qac_common_qac_pre_fifo_limit_pkt_pipe0(int j0) { return qac_common_qac_pre_fifo_limit_pkt_pipe0_[j0]; }








  QacPreFifoLimitPktMutable &qac_common_qac_pre_fifo_limit_pkt_pipe1(int j0) { return qac_common_qac_pre_fifo_limit_pkt_pipe1_[j0]; }








  QacPreFifoLimitPktMutable &qac_common_qac_pre_fifo_limit_pkt_pipe2(int j0) { return qac_common_qac_pre_fifo_limit_pkt_pipe2_[j0]; }








  QacPreFifoLimitPktMutable &qac_common_qac_pre_fifo_limit_pkt_pipe3(int j0) { return qac_common_qac_pre_fifo_limit_pkt_pipe3_[j0]; }





  QacMcctPktLimitMutable &qac_common_qac_mcct_pkt_limit() { return qac_common_qac_mcct_pkt_limit_; }





  QacMcctDisPktHysMutable &qac_common_qac_mcct_dis_pkt_hys() { return qac_common_qac_mcct_dis_pkt_hys_; }





  QacMcctCntPktMutable &qac_common_qac_mcct_cnt_pkt() { return qac_common_qac_mcct_cnt_pkt_; }






  QacQueueParserFifoCredMutable &qac_common_qac_queue_parser_fifo_cred() { return qac_common_qac_queue_parser_fifo_cred_; }





  QacPipeDisableMutable &qac_common_qac_pipe_disable() { return qac_common_qac_pipe_disable_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      qac_common_qac_glb_config_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_dod_limit_cell_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      qac_common_qac_mem_init_done_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      qac_common_qac_mem_init_en_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      qac_common_qac_dod_cnt_cell_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x2c) {
      offset -= 0x1c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_ep_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      if (read_callback_) read_callback_();
      qac_common_qac_ep_resume_offset_cell_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      qac_common_qac_discard_queue_throttleer_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      qac_common_qac_uc_disc_disable_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      qac_common_qac_intr_stat_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x4c) {
      offset -= 0x3c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_glb_ap_gre_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      if (read_callback_) read_callback_();
      qac_common_qac_glb_ap_gre_resume_offset_cell_.read( offset, data );
    }
    else if (offset >= 0x5c && offset < 0x6c) {
      offset -= 0x5c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_glb_ap_red_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      if (read_callback_) read_callback_();
      qac_common_qac_glb_ap_red_resume_offset_cell_.read( offset, data );
    }
    else if (offset >= 0x7c && offset < 0x8c) {
      offset -= 0x7c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_glb_ap_yel_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      if (read_callback_) read_callback_();
      qac_common_qac_glb_ap_yel_resume_offset_cell_.read( offset, data );
    }
    else if (offset >= 0x9c && offset < 0xac) {
      offset -= 0x9c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_ep_cnt_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xac && offset < 0xbc) {
      offset -= 0xac;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_wm_ep_cnt_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xbc && offset < 0xcc) {
      offset -= 0xbc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_ep_cnt_ph_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xcc && offset < 0xdc) {
      offset -= 0xcc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_glb_ap_cnt_ph_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xdc && offset < 0xec) {
      offset -= 0xdc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_wm_glb_ap_cnt_ph_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xec && offset < 0xfc) {
      offset -= 0xec;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_glb_ap_cnt_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xfc && offset < 0x10c) {
      offset -= 0xfc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_wm_glb_ap_cnt_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x10c && offset < 0x11c) {
      offset -= 0x10c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_cnt_pkt_pipe0_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x11c && offset < 0x12c) {
      offset -= 0x11c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_cnt_cell_pipe0_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x12c && offset < 0x13c) {
      offset -= 0x12c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_cnt_pkt_pipe1_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x13c && offset < 0x14c) {
      offset -= 0x13c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_cnt_cell_pipe1_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x14c && offset < 0x15c) {
      offset -= 0x14c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_cnt_pkt_pipe2_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x15c && offset < 0x16c) {
      offset -= 0x15c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_cnt_cell_pipe2_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x16c && offset < 0x17c) {
      offset -= 0x16c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_cnt_pkt_pipe3_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x17c && offset < 0x18c) {
      offset -= 0x17c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_cnt_cell_pipe3_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x18c && offset < 0x190) {
      offset -= 0x18c;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_offset_cell_.read( offset, data );
    }
    else if (offset >= 0x19c && offset < 0x1ac) {
      offset -= 0x19c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_limit_shr_cell_pipe0_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1ac && offset < 0x1bc) {
      offset -= 0x1ac;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_limit_shr_cell_pipe1_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1bc && offset < 0x1cc) {
      offset -= 0x1bc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_limit_shr_cell_pipe2_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1cc && offset < 0x1dc) {
      offset -= 0x1cc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_limit_shr_cell_pipe3_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1dc && offset < 0x1ec) {
      offset -= 0x1dc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_limit_min_cell_pipe0_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1ec && offset < 0x1fc) {
      offset -= 0x1ec;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_limit_min_cell_pipe1_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1fc && offset < 0x20c) {
      offset -= 0x1fc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_limit_min_cell_pipe2_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x20c && offset < 0x21c) {
      offset -= 0x20c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_limit_min_cell_pipe3_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x21c && offset < 0x22c) {
      offset -= 0x21c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_limit_pkt_pipe0_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x22c && offset < 0x23c) {
      offset -= 0x22c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_limit_pkt_pipe1_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x23c && offset < 0x24c) {
      offset -= 0x23c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_limit_pkt_pipe2_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x24c && offset < 0x25c) {
      offset -= 0x24c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_common_qac_pre_fifo_limit_pkt_pipe3_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x25c && offset < 0x260) {
      offset -= 0x25c;
      if (read_callback_) read_callback_();
      qac_common_qac_mcct_pkt_limit_.read( offset, data );
    }
    else if (offset >= 0x260 && offset < 0x264) {
      offset -= 0x260;
      if (read_callback_) read_callback_();
      qac_common_qac_mcct_dis_pkt_hys_.read( offset, data );
    }
    else if (offset >= 0x264 && offset < 0x268) {
      offset -= 0x264;
      if (read_callback_) read_callback_();
      qac_common_qac_mcct_cnt_pkt_.read( offset, data );
    }
    else if (offset >= 0x268 && offset < 0x26c) {
      offset -= 0x268;
      if (read_callback_) read_callback_();
      qac_common_qac_queue_parser_fifo_cred_.read( offset, data );
    }
    else if (offset >= 0x26c && offset < 0x270) {
      offset -= 0x26c;
      if (read_callback_) read_callback_();
      qac_common_qac_pipe_disable_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      qac_common_qac_glb_config_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      qac_common_qac_dod_limit_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      qac_common_qac_mem_init_done_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      qac_common_qac_mem_init_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      qac_common_qac_dod_cnt_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x2c) {
      offset -= 0x1c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_ep_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      qac_common_qac_ep_resume_offset_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      qac_common_qac_discard_queue_throttleer_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      qac_common_qac_uc_disc_disable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      qac_common_qac_intr_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x4c) {
      offset -= 0x3c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_glb_ap_gre_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      qac_common_qac_glb_ap_gre_resume_offset_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c && offset < 0x6c) {
      offset -= 0x5c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_glb_ap_red_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      qac_common_qac_glb_ap_red_resume_offset_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7c && offset < 0x8c) {
      offset -= 0x7c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_glb_ap_yel_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      qac_common_qac_glb_ap_yel_resume_offset_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x9c && offset < 0xac) {
      offset -= 0x9c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_ep_cnt_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xac && offset < 0xbc) {
      offset -= 0xac;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_wm_ep_cnt_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xbc && offset < 0xcc) {
      offset -= 0xbc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_ep_cnt_ph_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xcc && offset < 0xdc) {
      offset -= 0xcc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_glb_ap_cnt_ph_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xdc && offset < 0xec) {
      offset -= 0xdc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_wm_glb_ap_cnt_ph_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xec && offset < 0xfc) {
      offset -= 0xec;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_glb_ap_cnt_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xfc && offset < 0x10c) {
      offset -= 0xfc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_wm_glb_ap_cnt_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10c && offset < 0x11c) {
      offset -= 0x10c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_cnt_pkt_pipe0_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x11c && offset < 0x12c) {
      offset -= 0x11c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_cnt_cell_pipe0_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x12c && offset < 0x13c) {
      offset -= 0x12c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_cnt_pkt_pipe1_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x13c && offset < 0x14c) {
      offset -= 0x13c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_cnt_cell_pipe1_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14c && offset < 0x15c) {
      offset -= 0x14c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_cnt_pkt_pipe2_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x15c && offset < 0x16c) {
      offset -= 0x15c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_cnt_cell_pipe2_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x16c && offset < 0x17c) {
      offset -= 0x16c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_cnt_pkt_pipe3_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x17c && offset < 0x18c) {
      offset -= 0x17c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_cnt_cell_pipe3_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18c && offset < 0x190) {
      offset -= 0x18c;
      qac_common_qac_pre_fifo_offset_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x19c && offset < 0x1ac) {
      offset -= 0x19c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_limit_shr_cell_pipe0_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1ac && offset < 0x1bc) {
      offset -= 0x1ac;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_limit_shr_cell_pipe1_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1bc && offset < 0x1cc) {
      offset -= 0x1bc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_limit_shr_cell_pipe2_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1cc && offset < 0x1dc) {
      offset -= 0x1cc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_limit_shr_cell_pipe3_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1dc && offset < 0x1ec) {
      offset -= 0x1dc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_limit_min_cell_pipe0_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1ec && offset < 0x1fc) {
      offset -= 0x1ec;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_limit_min_cell_pipe1_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1fc && offset < 0x20c) {
      offset -= 0x1fc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_limit_min_cell_pipe2_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20c && offset < 0x21c) {
      offset -= 0x20c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_limit_min_cell_pipe3_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x21c && offset < 0x22c) {
      offset -= 0x21c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_limit_pkt_pipe0_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x22c && offset < 0x23c) {
      offset -= 0x22c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_limit_pkt_pipe1_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x23c && offset < 0x24c) {
      offset -= 0x23c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_limit_pkt_pipe2_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24c && offset < 0x25c) {
      offset -= 0x24c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_common_qac_pre_fifo_limit_pkt_pipe3_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x25c && offset < 0x260) {
      offset -= 0x25c;
      qac_common_qac_mcct_pkt_limit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x260 && offset < 0x264) {
      offset -= 0x260;
      qac_common_qac_mcct_dis_pkt_hys_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x264 && offset < 0x268) {
      offset -= 0x264;
      qac_common_qac_mcct_cnt_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x268 && offset < 0x26c) {
      offset -= 0x268;
      qac_common_qac_queue_parser_fifo_cred_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x26c && offset < 0x270) {
      offset -= 0x26c;
      qac_common_qac_pipe_disable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    qac_common_qac_glb_config_.reset();
    qac_common_qac_dod_limit_cell_.reset();
    qac_common_qac_mem_init_done_.reset();
    qac_common_qac_mem_init_en_.reset();
    qac_common_qac_dod_cnt_cell_.reset();
    for (auto &f0 : qac_common_qac_ep_limit_cell_) {
      f0.reset();
    }
    qac_common_qac_ep_resume_offset_cell_.reset();
    qac_common_qac_discard_queue_throttleer_.reset();
    qac_common_qac_uc_disc_disable_.reset();
    qac_common_qac_intr_stat_.reset();
    for (auto &f0 : qac_common_qac_glb_ap_gre_limit_cell_) {
      f0.reset();
    }
    qac_common_qac_glb_ap_gre_resume_offset_cell_.reset();
    for (auto &f0 : qac_common_qac_glb_ap_red_limit_cell_) {
      f0.reset();
    }
    qac_common_qac_glb_ap_red_resume_offset_cell_.reset();
    for (auto &f0 : qac_common_qac_glb_ap_yel_limit_cell_) {
      f0.reset();
    }
    qac_common_qac_glb_ap_yel_resume_offset_cell_.reset();
    for (auto &f0 : qac_common_qac_ep_cnt_cell_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_wm_ep_cnt_cell_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_ep_cnt_ph_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_glb_ap_cnt_ph_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_wm_glb_ap_cnt_ph_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_glb_ap_cnt_cell_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_wm_glb_ap_cnt_cell_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_cnt_pkt_pipe0_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_cnt_cell_pipe0_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_cnt_pkt_pipe1_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_cnt_cell_pipe1_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_cnt_pkt_pipe2_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_cnt_cell_pipe2_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_cnt_pkt_pipe3_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_cnt_cell_pipe3_) {
      f0.reset();
    }
    qac_common_qac_pre_fifo_offset_cell_.reset();
    for (auto &f0 : qac_common_qac_pre_fifo_limit_shr_cell_pipe0_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_limit_shr_cell_pipe1_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_limit_shr_cell_pipe2_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_limit_shr_cell_pipe3_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_limit_min_cell_pipe0_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_limit_min_cell_pipe1_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_limit_min_cell_pipe2_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_limit_min_cell_pipe3_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_limit_pkt_pipe0_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_limit_pkt_pipe1_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_limit_pkt_pipe2_) {
      f0.reset();
    }
    for (auto &f0 : qac_common_qac_pre_fifo_limit_pkt_pipe3_) {
      f0.reset();
    }
    qac_common_qac_mcct_pkt_limit_.reset();
    qac_common_qac_mcct_dis_pkt_hys_.reset();
    qac_common_qac_mcct_cnt_pkt_.reset();
    qac_common_qac_queue_parser_fifo_cred_.reset();
    qac_common_qac_pipe_disable_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += qac_common_qac_glb_config_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += qac_common_qac_dod_limit_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += qac_common_qac_mem_init_done_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += qac_common_qac_mem_init_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += qac_common_qac_dod_cnt_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x2c) {
      offset -= 0x1c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_ep_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      r += qac_common_qac_ep_resume_offset_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += qac_common_qac_discard_queue_throttleer_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += qac_common_qac_uc_disc_disable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += qac_common_qac_intr_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x4c) {
      offset -= 0x3c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_glb_ap_gre_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      r += qac_common_qac_glb_ap_gre_resume_offset_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5c && offset < 0x6c) {
      offset -= 0x5c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_glb_ap_red_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      r += qac_common_qac_glb_ap_red_resume_offset_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7c && offset < 0x8c) {
      offset -= 0x7c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_glb_ap_yel_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      r += qac_common_qac_glb_ap_yel_resume_offset_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x9c && offset < 0xac) {
      offset -= 0x9c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_ep_cnt_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xac && offset < 0xbc) {
      offset -= 0xac;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_wm_ep_cnt_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xbc && offset < 0xcc) {
      offset -= 0xbc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_ep_cnt_ph_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xcc && offset < 0xdc) {
      offset -= 0xcc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_glb_ap_cnt_ph_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xdc && offset < 0xec) {
      offset -= 0xdc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_wm_glb_ap_cnt_ph_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xec && offset < 0xfc) {
      offset -= 0xec;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_glb_ap_cnt_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xfc && offset < 0x10c) {
      offset -= 0xfc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_wm_glb_ap_cnt_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10c && offset < 0x11c) {
      offset -= 0x10c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_cnt_pkt_pipe0_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x11c && offset < 0x12c) {
      offset -= 0x11c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_cnt_cell_pipe0_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x12c && offset < 0x13c) {
      offset -= 0x12c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_cnt_pkt_pipe1_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x13c && offset < 0x14c) {
      offset -= 0x13c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_cnt_cell_pipe1_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14c && offset < 0x15c) {
      offset -= 0x14c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_cnt_pkt_pipe2_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x15c && offset < 0x16c) {
      offset -= 0x15c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_cnt_cell_pipe2_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x16c && offset < 0x17c) {
      offset -= 0x16c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_cnt_pkt_pipe3_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x17c && offset < 0x18c) {
      offset -= 0x17c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_cnt_cell_pipe3_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18c && offset < 0x190) {
      offset -= 0x18c;
      r += qac_common_qac_pre_fifo_offset_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x19c && offset < 0x1ac) {
      offset -= 0x19c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_limit_shr_cell_pipe0_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1ac && offset < 0x1bc) {
      offset -= 0x1ac;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_limit_shr_cell_pipe1_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1bc && offset < 0x1cc) {
      offset -= 0x1bc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_limit_shr_cell_pipe2_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1cc && offset < 0x1dc) {
      offset -= 0x1cc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_limit_shr_cell_pipe3_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1dc && offset < 0x1ec) {
      offset -= 0x1dc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_limit_min_cell_pipe0_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1ec && offset < 0x1fc) {
      offset -= 0x1ec;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_limit_min_cell_pipe1_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1fc && offset < 0x20c) {
      offset -= 0x1fc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_limit_min_cell_pipe2_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20c && offset < 0x21c) {
      offset -= 0x20c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_limit_min_cell_pipe3_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x21c && offset < 0x22c) {
      offset -= 0x21c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_limit_pkt_pipe0_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x22c && offset < 0x23c) {
      offset -= 0x22c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_limit_pkt_pipe1_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x23c && offset < 0x24c) {
      offset -= 0x23c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_limit_pkt_pipe2_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24c && offset < 0x25c) {
      offset -= 0x24c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_common_qac_pre_fifo_limit_pkt_pipe3_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x25c && offset < 0x260) {
      offset -= 0x25c;
      r += qac_common_qac_mcct_pkt_limit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x260 && offset < 0x264) {
      offset -= 0x260;
      r += qac_common_qac_mcct_dis_pkt_hys_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x264 && offset < 0x268) {
      offset -= 0x264;
      r += qac_common_qac_mcct_cnt_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x268 && offset < 0x26c) {
      offset -= 0x268;
      r += qac_common_qac_queue_parser_fifo_cred_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x26c && offset < 0x270) {
      offset -= 0x26c;
      r += qac_common_qac_pipe_disable_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += qac_common_qac_glb_config_.to_string(print_zeros,indent_string) ;
    r += qac_common_qac_dod_limit_cell_.to_string(print_zeros,indent_string) ;
    r += qac_common_qac_mem_init_done_.to_string(print_zeros,indent_string) ;
    r += qac_common_qac_mem_init_en_.to_string(print_zeros,indent_string) ;
    r += qac_common_qac_dod_cnt_cell_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_ep_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    r += qac_common_qac_ep_resume_offset_cell_.to_string(print_zeros,indent_string) ;
    r += qac_common_qac_discard_queue_throttleer_.to_string(print_zeros,indent_string) ;
    r += qac_common_qac_uc_disc_disable_.to_string(print_zeros,indent_string) ;
    r += qac_common_qac_intr_stat_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_glb_ap_gre_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    r += qac_common_qac_glb_ap_gre_resume_offset_cell_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_glb_ap_red_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    r += qac_common_qac_glb_ap_red_resume_offset_cell_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_glb_ap_yel_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    r += qac_common_qac_glb_ap_yel_resume_offset_cell_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_ep_cnt_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_wm_ep_cnt_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_ep_cnt_ph_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_glb_ap_cnt_ph_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_wm_glb_ap_cnt_ph_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_glb_ap_cnt_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_wm_glb_ap_cnt_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_cnt_pkt_pipe0_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_cnt_cell_pipe0_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_cnt_pkt_pipe1_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_cnt_cell_pipe1_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_cnt_pkt_pipe2_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_cnt_cell_pipe2_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_cnt_pkt_pipe3_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_cnt_cell_pipe3_[a0].to_string(print_zeros,indent_string) ;
    }
    r += qac_common_qac_pre_fifo_offset_cell_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_limit_shr_cell_pipe0_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_limit_shr_cell_pipe1_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_limit_shr_cell_pipe2_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_limit_shr_cell_pipe3_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_limit_min_cell_pipe0_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_limit_min_cell_pipe1_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_limit_min_cell_pipe2_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_limit_min_cell_pipe3_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_limit_pkt_pipe0_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_limit_pkt_pipe1_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_limit_pkt_pipe2_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += qac_common_qac_pre_fifo_limit_pkt_pipe3_[a0].to_string(print_zeros,indent_string) ;
    }
    r += qac_common_qac_mcct_pkt_limit_.to_string(print_zeros,indent_string) ;
    r += qac_common_qac_mcct_dis_pkt_hys_.to_string(print_zeros,indent_string) ;
    r += qac_common_qac_mcct_cnt_pkt_.to_string(print_zeros,indent_string) ;
    r += qac_common_qac_queue_parser_fifo_cred_.to_string(print_zeros,indent_string) ;
    r += qac_common_qac_pipe_disable_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  QacGlbConfigMutable qac_common_qac_glb_config_;
  QacDodLimitCellMutable qac_common_qac_dod_limit_cell_;
  QacMemInitDoneMutable qac_common_qac_mem_init_done_;
  QacMemInitEnMutable qac_common_qac_mem_init_en_;
  QacDodCntCellMutable qac_common_qac_dod_cnt_cell_;
  std::array< QacEpLimitCellMutable, 4 > qac_common_qac_ep_limit_cell_;
  QacResumeOffsetCellMutable qac_common_qac_ep_resume_offset_cell_;
  QacDiscardQueueThrottleerMutable qac_common_qac_discard_queue_throttleer_;
  QacUcDiscDisableMutable qac_common_qac_uc_disc_disable_;
  QacIntrStatMutable qac_common_qac_intr_stat_;
  std::array< QacGlbApGreLimitCellMutable, 4 > qac_common_qac_glb_ap_gre_limit_cell_;
  QacResumeOffsetCellMutable qac_common_qac_glb_ap_gre_resume_offset_cell_;
  std::array< QacGlbApRedLimitCellMutable, 4 > qac_common_qac_glb_ap_red_limit_cell_;
  QacResumeOffsetCellMutable qac_common_qac_glb_ap_red_resume_offset_cell_;
  std::array< QacGlbApYelLimitCellMutable, 4 > qac_common_qac_glb_ap_yel_limit_cell_;
  QacResumeOffsetCellMutable qac_common_qac_glb_ap_yel_resume_offset_cell_;
  std::array< QacEpCntCellMutable, 4 > qac_common_qac_ep_cnt_cell_;
  std::array< QacWmEpCntCellMutable, 4 > qac_common_qac_wm_ep_cnt_cell_;
  std::array< QacEpCntPhMutable, 4 > qac_common_qac_ep_cnt_ph_;
  std::array< QacGlbApCntPhMutable, 4 > qac_common_qac_glb_ap_cnt_ph_;
  std::array< QacWmGlbApCntPhMutable, 4 > qac_common_qac_wm_glb_ap_cnt_ph_;
  std::array< QacGlbApCntCellMutable, 4 > qac_common_qac_glb_ap_cnt_cell_;
  std::array< QacWmGlbApCntCellMutable, 4 > qac_common_qac_wm_glb_ap_cnt_cell_;
  std::array< QacPreFifoCntPktMutable, 4 > qac_common_qac_pre_fifo_cnt_pkt_pipe0_;
  std::array< QacPreFifoCntCellMutable, 4 > qac_common_qac_pre_fifo_cnt_cell_pipe0_;
  std::array< QacPreFifoCntPktMutable, 4 > qac_common_qac_pre_fifo_cnt_pkt_pipe1_;
  std::array< QacPreFifoCntCellMutable, 4 > qac_common_qac_pre_fifo_cnt_cell_pipe1_;
  std::array< QacPreFifoCntPktMutable, 4 > qac_common_qac_pre_fifo_cnt_pkt_pipe2_;
  std::array< QacPreFifoCntCellMutable, 4 > qac_common_qac_pre_fifo_cnt_cell_pipe2_;
  std::array< QacPreFifoCntPktMutable, 4 > qac_common_qac_pre_fifo_cnt_pkt_pipe3_;
  std::array< QacPreFifoCntCellMutable, 4 > qac_common_qac_pre_fifo_cnt_cell_pipe3_;
  QacPreFifoOffsetCellMutable qac_common_qac_pre_fifo_offset_cell_;
  std::array< QacPreFifoLimitShrCellMutable, 4 > qac_common_qac_pre_fifo_limit_shr_cell_pipe0_;
  std::array< QacPreFifoLimitShrCellMutable, 4 > qac_common_qac_pre_fifo_limit_shr_cell_pipe1_;
  std::array< QacPreFifoLimitShrCellMutable, 4 > qac_common_qac_pre_fifo_limit_shr_cell_pipe2_;
  std::array< QacPreFifoLimitShrCellMutable, 4 > qac_common_qac_pre_fifo_limit_shr_cell_pipe3_;
  std::array< QacPreFifoLimitMinCellMutable, 4 > qac_common_qac_pre_fifo_limit_min_cell_pipe0_;
  std::array< QacPreFifoLimitMinCellMutable, 4 > qac_common_qac_pre_fifo_limit_min_cell_pipe1_;
  std::array< QacPreFifoLimitMinCellMutable, 4 > qac_common_qac_pre_fifo_limit_min_cell_pipe2_;
  std::array< QacPreFifoLimitMinCellMutable, 4 > qac_common_qac_pre_fifo_limit_min_cell_pipe3_;
  std::array< QacPreFifoLimitPktMutable, 4 > qac_common_qac_pre_fifo_limit_pkt_pipe0_;
  std::array< QacPreFifoLimitPktMutable, 4 > qac_common_qac_pre_fifo_limit_pkt_pipe1_;
  std::array< QacPreFifoLimitPktMutable, 4 > qac_common_qac_pre_fifo_limit_pkt_pipe2_;
  std::array< QacPreFifoLimitPktMutable, 4 > qac_common_qac_pre_fifo_limit_pkt_pipe3_;
  QacMcctPktLimitMutable qac_common_qac_mcct_pkt_limit_;
  QacMcctDisPktHysMutable qac_common_qac_mcct_dis_pkt_hys_;
  QacMcctCntPktMutable qac_common_qac_mcct_cnt_pkt_;
  QacQueueParserFifoCredMutable qac_common_qac_queue_parser_fifo_cred_;
  QacPipeDisableMutable qac_common_qac_pipe_disable_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    offset += 0x100000; // to get to tm_qac_top
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_QAC_COMMON_BLOCK_MUTABLE_H__
