/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_QAC_GLB_CONFIG_MUTABLE_H__
#define __REGISTER_INCLUDES_QAC_GLB_CONFIG_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class QacGlbConfigMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  QacGlbConfigMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, true, write_callback, read_callback, std::string("QacGlbConfigMutable"))
    {
    }
  QacGlbConfigMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "QacGlbConfigMutable")
    {
    }
public:






  uint8_t discd_apid() { return discd_apid_; }
  void discd_apid(const uint8_t &v) { discd_apid_=v; }






  uint8_t discd_apid_en() { return discd_apid_en_; }
  void discd_apid_en(const uint8_t &v) { discd_apid_en_=v; }





  uint8_t pre_pri0_apid() { return pre_pri0_apid_; }
  void pre_pri0_apid(const uint8_t &v) { pre_pri0_apid_=v; }





  uint8_t pre_pri1_apid() { return pre_pri1_apid_; }
  void pre_pri1_apid(const uint8_t &v) { pre_pri1_apid_=v; }





  uint8_t pre_pri2_apid() { return pre_pri2_apid_; }
  void pre_pri2_apid(const uint8_t &v) { pre_pri2_apid_=v; }





  uint8_t pre_pri3_apid() { return pre_pri3_apid_; }
  void pre_pri3_apid(const uint8_t &v) { pre_pri3_apid_=v; }







  uint8_t ap_color_drop_en() { return ap_color_drop_en_; }
  void ap_color_drop_en(const uint8_t &v) { ap_color_drop_en_=v; }






  uint16_t reset_floor() { return reset_floor_; }
  void reset_floor(const uint16_t &v) { reset_floor_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (discd_apid_ & 0x3);
    *data |= ((discd_apid_en_ & 0x1) << 2);
    *data |= ((pre_pri0_apid_ & 0x3) << 3);
    *data |= ((pre_pri1_apid_ & 0x3) << 5);
    *data |= ((pre_pri2_apid_ & 0x3) << 7);
    *data |= ((pre_pri3_apid_ & 0x3) << 9);
    *data |= ((ap_color_drop_en_ & 0xf) << 11);
    *data |= (reset_floor_ << 15);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    discd_apid_ = (data & 0x3);
    discd_apid_en_ = ((data >> 2) & 0x1);
    pre_pri0_apid_ = ((data >> 3) & 0x3);
    pre_pri1_apid_ = ((data >> 5) & 0x3);
    pre_pri2_apid_ = ((data >> 7) & 0x3);
    pre_pri3_apid_ = ((data >> 9) & 0x3);
    ap_color_drop_en_ = ((data >> 11) & 0xf);
    reset_floor_ = (data >> 15);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    discd_apid_ = 0x3;
    discd_apid_en_ = 0x1;
    pre_pri0_apid_ = 0x3;
    pre_pri1_apid_ = 0x3;
    pre_pri2_apid_ = 0x3;
    pre_pri3_apid_ = 0x3;
    ap_color_drop_en_ = 0xf;
    reset_floor_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("QacGlbConfigMutable") + ":\n";
    r += indent_string + "  " + std::string("discd_apid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(discd_apid_) ) + "\n";
    all_zeros &= (0 == discd_apid_);
    r += indent_string + "  " + std::string("discd_apid_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(discd_apid_en_) ) + "\n";
    all_zeros &= (0 == discd_apid_en_);
    r += indent_string + "  " + std::string("pre_pri0_apid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pre_pri0_apid_) ) + "\n";
    all_zeros &= (0 == pre_pri0_apid_);
    r += indent_string + "  " + std::string("pre_pri1_apid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pre_pri1_apid_) ) + "\n";
    all_zeros &= (0 == pre_pri1_apid_);
    r += indent_string + "  " + std::string("pre_pri2_apid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pre_pri2_apid_) ) + "\n";
    all_zeros &= (0 == pre_pri2_apid_);
    r += indent_string + "  " + std::string("pre_pri3_apid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pre_pri3_apid_) ) + "\n";
    all_zeros &= (0 == pre_pri3_apid_);
    r += indent_string + "  " + std::string("ap_color_drop_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ap_color_drop_en_) ) + "\n";
    all_zeros &= (0 == ap_color_drop_en_);
    r += indent_string + "  " + std::string("reset_floor") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(reset_floor_) ) + "\n";
    all_zeros &= (0 == reset_floor_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("QacGlbConfigMutable") + ":\n";
    r += indent_string + "  " + std::string("discd_apid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(discd_apid_) ) + "\n";
    all_zeros &= (0 == discd_apid_);
    r += indent_string + "  " + std::string("discd_apid_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(discd_apid_en_) ) + "\n";
    all_zeros &= (0 == discd_apid_en_);
    r += indent_string + "  " + std::string("pre_pri0_apid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pre_pri0_apid_) ) + "\n";
    all_zeros &= (0 == pre_pri0_apid_);
    r += indent_string + "  " + std::string("pre_pri1_apid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pre_pri1_apid_) ) + "\n";
    all_zeros &= (0 == pre_pri1_apid_);
    r += indent_string + "  " + std::string("pre_pri2_apid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pre_pri2_apid_) ) + "\n";
    all_zeros &= (0 == pre_pri2_apid_);
    r += indent_string + "  " + std::string("pre_pri3_apid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pre_pri3_apid_) ) + "\n";
    all_zeros &= (0 == pre_pri3_apid_);
    r += indent_string + "  " + std::string("ap_color_drop_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ap_color_drop_en_) ) + "\n";
    all_zeros &= (0 == ap_color_drop_en_);
    r += indent_string + "  " + std::string("reset_floor") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(reset_floor_) ) + "\n";
    all_zeros &= (0 == reset_floor_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t discd_apid_;
  uint8_t discd_apid_en_;
  uint8_t pre_pri0_apid_;
  uint8_t pre_pri1_apid_;
  uint8_t pre_pri2_apid_;
  uint8_t pre_pri3_apid_;
  uint8_t ap_color_drop_en_;
  uint16_t reset_floor_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    offset += 0x100000; // to get to tm_qac_top
    offset += 0x4; // to get to qac_common_qac_glb_config
    return offset;
  }

};





  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_QAC_GLB_CONFIG_MUTABLE_H__
