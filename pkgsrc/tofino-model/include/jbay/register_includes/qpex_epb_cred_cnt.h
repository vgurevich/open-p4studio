/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_QPEX_EPB_CRED_CNT_H__
#define __REGISTER_INCLUDES_QPEX_EPB_CRED_CNT_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class QpexEpbCredCnt : public model_core::RegisterBlock<RegisterCallback> {
public:
  QpexEpbCredCnt(
      int chipNumber, int index_tm_pex_pipe_rspec, int index_qpex_epb_cred_cnt, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_pex_pipe_rspec, index_qpex_epb_cred_cnt), 8, false, write_callback, read_callback, std::string("QpexEpbCredCnt")+":"+boost::lexical_cast<std::string>(index_tm_pex_pipe_rspec) + "," + boost::lexical_cast<std::string>(index_qpex_epb_cred_cnt))
    {
    }
  QpexEpbCredCnt(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "QpexEpbCredCnt")
    {
    }
public:





  uint8_t &cred0() { return cred0_; }





  uint8_t &cred1() { return cred1_; }





  uint8_t &cred2() { return cred2_; }





  uint8_t &cred3() { return cred3_; }





  uint8_t &cred4() { return cred4_; }





  uint8_t &cred5() { return cred5_; }





  uint8_t &cred6() { return cred6_; }





  uint8_t &cred7() { return cred7_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = cred0_;
      *data |= (cred1_ << 8);
      *data |= (cred2_ << 16);
      *data |= (cred3_ << 24);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = cred4_;
      *data |= (cred5_ << 8);
      *data |= (cred6_ << 16);
      *data |= (cred7_ << 24);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      cred0_ = data;
      cred1_ = (data >> 8);
      cred2_ = (data >> 16);
      cred3_ = (data >> 24);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      cred4_ = data;
      cred5_ = (data >> 8);
      cred6_ = (data >> 16);
      cred7_ = (data >> 24);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    cred0_ = 0x0;
    cred1_ = 0x0;
    cred2_ = 0x0;
    cred3_ = 0x0;
    cred4_ = 0x0;
    cred5_ = 0x0;
    cred6_ = 0x0;
    cred7_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("QpexEpbCredCnt") + ":\n";
    r += indent_string + "  " + std::string("cred0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred0_) ) + "\n";
    all_zeros &= (0 == cred0_);
    r += indent_string + "  " + std::string("cred1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred1_) ) + "\n";
    all_zeros &= (0 == cred1_);
    r += indent_string + "  " + std::string("cred2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred2_) ) + "\n";
    all_zeros &= (0 == cred2_);
    r += indent_string + "  " + std::string("cred3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred3_) ) + "\n";
    all_zeros &= (0 == cred3_);
    r += indent_string + "  " + std::string("cred4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred4_) ) + "\n";
    all_zeros &= (0 == cred4_);
    r += indent_string + "  " + std::string("cred5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred5_) ) + "\n";
    all_zeros &= (0 == cred5_);
    r += indent_string + "  " + std::string("cred6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred6_) ) + "\n";
    all_zeros &= (0 == cred6_);
    r += indent_string + "  " + std::string("cred7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred7_) ) + "\n";
    all_zeros &= (0 == cred7_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("QpexEpbCredCnt") + ":\n";
    r += indent_string + "  " + std::string("cred0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred0_) ) + "\n";
    all_zeros &= (0 == cred0_);
    r += indent_string + "  " + std::string("cred1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred1_) ) + "\n";
    all_zeros &= (0 == cred1_);
    r += indent_string + "  " + std::string("cred2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred2_) ) + "\n";
    all_zeros &= (0 == cred2_);
    r += indent_string + "  " + std::string("cred3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred3_) ) + "\n";
    all_zeros &= (0 == cred3_);
    r += indent_string + "  " + std::string("cred4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred4_) ) + "\n";
    all_zeros &= (0 == cred4_);
    r += indent_string + "  " + std::string("cred5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred5_) ) + "\n";
    all_zeros &= (0 == cred5_);
    r += indent_string + "  " + std::string("cred6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred6_) ) + "\n";
    all_zeros &= (0 == cred6_);
    r += indent_string + "  " + std::string("cred7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred7_) ) + "\n";
    all_zeros &= (0 == cred7_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t cred0_;
  uint8_t cred1_;
  uint8_t cred2_;
  uint8_t cred3_;
  uint8_t cred4_;
  uint8_t cred5_;
  uint8_t cred6_;
  uint8_t cred7_;
private:
  static int StartOffset(
      int index_tm_pex_pipe_rspec, int index_qpex_epb_cred_cnt
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    offset += 0x300000; // to get to tm_pex_top
    assert(index_tm_pex_pipe_rspec < 4);
    offset += index_tm_pex_pipe_rspec * 0x4000; // tm_pex_pipe_rspec[]
    offset += 0x100; // to get to pt_epb_cred
    assert(index_qpex_epb_cred_cnt < 9);
    offset += index_qpex_epb_cred_cnt * 0x8; // qpex_epb_cred_cnt[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_QPEX_EPB_CRED_CNT_H__
