/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_S2P_REG_H__
#define __REGISTER_INCLUDES_S2P_REG_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "s2p_reg_byte_adj_mbe_err_log.h"
#include "s2p_reg_byte_adj_sbe_err_log.h"
#include "s2p_reg_byte_ctr.h"
#include "s2p_reg_chan_en.h"
#include "s2p_reg_copy2cpu.h"
#include "s2p_reg_ctr_sample.h"
#include "s2p_reg_ctr_time.h"
#include "s2p_reg_debug_ctrl.h"
#include "s2p_reg_ecc.h"
#include "s2p_reg_empty_sop_hold_r.h"
#include "s2p_reg_intr.h"
#include "s2p_reg_mirr_mbe_err_log.h"
#include "s2p_reg_mirr_sbe_err_log.h"
#include "s2p_reg_pipe_map.h"
#include "s2p_reg_pkt_ctr.h"
#include "s2p_reg_port_rate_cfg.h"
#include "s2p_reg_sb_oflow_err_log.h"
#include "s2p_reg_sb_uflow_err_log.h"
#include "s2p_reg_sb_0_mbe_err_log.h"
#include "s2p_reg_sb_0_sbe_err_log.h"
#include "s2p_reg_sb_1_mbe_err_log.h"
#include "s2p_reg_sb_1_sbe_err_log.h"
#include "s2p_reg_sb_2_mbe_err_log.h"
#include "s2p_reg_sb_2_sbe_err_log.h"
#include "s2p_reg_sb_3_mbe_err_log.h"
#include "s2p_reg_sb_3_sbe_err_log.h"
#include "s2p_reg_sop_mop_hold_r.h"
#include "s2p_reg_tm_cred_low_wmark.h"
#include "s2p_reg_tm_cred_oflow_err_log.h"
#include "s2p_reg_tm_cred_rd.h"
#include "s2p_reg_tm_cred_uflow_err_log.h"
#include "s2p_reg_tm_cred_wr.h"

namespace jbay {
  namespace register_classes {

class S2pReg : public model_core::RegisterBlock<RegisterCallback> {
public:
  S2pReg(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 2936, false, write_callback, read_callback, std::string("S2pReg")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  S2pReg(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "S2pReg")
    {
    }
public:









  S2pRegPortRateCfg &port_rate_cfg(int j0) { return port_rate_cfg_[j0]; }






  S2pRegChanEn &chan_en(int j0) { return chan_en_[j0]; }




  S2pRegCopy2cpu &copy2cpu() { return copy2cpu_; }







  S2pRegTmCredWr &tm_cred_wr(int j0) { return tm_cred_wr_[j0]; }





  S2pRegTmCredRd &tm_cred_rd() { return tm_cred_rd_; }






  S2pRegPktCtr &pkt_ctr(int j0) { return pkt_ctr_[j0]; }






  S2pRegByteCtr &byte_ctr(int j0) { return byte_ctr_[j0]; }




  S2pRegCtrTime &ctr_time() { return ctr_time_; }




  S2pRegCtrSample &ctr_sample() { return ctr_sample_; }








  S2pRegEcc &ecc() { return ecc_; }





  S2pRegSb_0SbeErrLog &sb_0_sbe_err_log() { return sb_0_sbe_err_log_; }





  S2pRegSb_0MbeErrLog &sb_0_mbe_err_log() { return sb_0_mbe_err_log_; }





  S2pRegSb_1SbeErrLog &sb_1_sbe_err_log() { return sb_1_sbe_err_log_; }





  S2pRegSb_1MbeErrLog &sb_1_mbe_err_log() { return sb_1_mbe_err_log_; }





  S2pRegSb_2SbeErrLog &sb_2_sbe_err_log() { return sb_2_sbe_err_log_; }





  S2pRegSb_2MbeErrLog &sb_2_mbe_err_log() { return sb_2_mbe_err_log_; }





  S2pRegSb_3SbeErrLog &sb_3_sbe_err_log() { return sb_3_sbe_err_log_; }





  S2pRegSb_3MbeErrLog &sb_3_mbe_err_log() { return sb_3_mbe_err_log_; }





  S2pRegSbOflowErrLog &sb_oflow_err_log() { return sb_oflow_err_log_; }





  S2pRegSbUflowErrLog &sb_uflow_err_log() { return sb_uflow_err_log_; }





  S2pRegMirrSbeErrLog &mirr_sbe_err_log() { return mirr_sbe_err_log_; }





  S2pRegMirrMbeErrLog &mirr_mbe_err_log() { return mirr_mbe_err_log_; }





  S2pRegByteAdjSbeErrLog &byte_adj_sbe_err_log() { return byte_adj_sbe_err_log_; }





  S2pRegByteAdjMbeErrLog &byte_adj_mbe_err_log() { return byte_adj_mbe_err_log_; }





  S2pRegTmCredOflowErrLog &tm_cred_oflow_err_log() { return tm_cred_oflow_err_log_; }





  S2pRegTmCredUflowErrLog &tm_cred_uflow_err_log() { return tm_cred_uflow_err_log_; }





  S2pRegDebugCtrl &debug_ctrl() { return debug_ctrl_; }





  S2pRegPipeMap &pipe_map() { return pipe_map_; }






  S2pRegEmptySopHoldR &hold_es_400g() { return hold_es_400g_; }






  S2pRegEmptySopHoldR &hold_es_200g() { return hold_es_200g_; }






  S2pRegEmptySopHoldR &hold_es_100g() { return hold_es_100g_; }






  S2pRegEmptySopHoldR &hold_es_50g() { return hold_es_50g_; }






  S2pRegEmptySopHoldR &hold_es_40g() { return hold_es_40g_; }






  S2pRegEmptySopHoldR &hold_es_25g() { return hold_es_25g_; }






  S2pRegEmptySopHoldR &hold_es_10g() { return hold_es_10g_; }





  S2pRegSopMopHoldR &hold_sm_400g() { return hold_sm_400g_; }





  S2pRegSopMopHoldR &hold_sm_200g() { return hold_sm_200g_; }





  S2pRegSopMopHoldR &hold_sm_100g() { return hold_sm_100g_; }





  S2pRegSopMopHoldR &hold_sm_50g() { return hold_sm_50g_; }





  S2pRegSopMopHoldR &hold_sm_40g() { return hold_sm_40g_; }





  S2pRegSopMopHoldR &hold_sm_25g() { return hold_sm_25g_; }





  S2pRegSopMopHoldR &hold_sm_10g() { return hold_sm_10g_; }





  S2pRegTmCredLowWmark &tm_cred_low_wmark() { return tm_cred_low_wmark_; }
  S2pRegIntr &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x40 && offset < 0x64) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      port_rate_cfg_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xa4) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      chan_en_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      if (read_callback_) read_callback_();
      copy2cpu_.read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tm_cred_wr_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xc4) {
      offset -= 0xc0;
      if (read_callback_) read_callback_();
      tm_cred_rd_.read( offset, data );
    }
    else if (offset >= 0x400 && offset < 0x640) {
      offset -= 0x400;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      pkt_ctr_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x800 && offset < 0xa40) {
      offset -= 0x800;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      byte_ctr_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xa40 && offset < 0xa48) {
      offset -= 0xa40;
      if (read_callback_) read_callback_();
      ctr_time_.read( offset, data );
    }
    else if (offset >= 0xa48 && offset < 0xa4c) {
      offset -= 0xa48;
      if (read_callback_) read_callback_();
      ctr_sample_.read( offset, data );
    }
    else if (offset >= 0xa80 && offset < 0xae0) {
      offset -= 0xa80;
      if (read_callback_) read_callback_();
      ecc_.read( offset, data );
    }
    else if (offset >= 0xaf4 && offset < 0xaf8) {
      offset -= 0xaf4;
      if (read_callback_) read_callback_();
      sb_0_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xaf8 && offset < 0xafc) {
      offset -= 0xaf8;
      if (read_callback_) read_callback_();
      sb_0_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xafc && offset < 0xb00) {
      offset -= 0xafc;
      if (read_callback_) read_callback_();
      sb_1_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb00 && offset < 0xb04) {
      offset -= 0xb00;
      if (read_callback_) read_callback_();
      sb_1_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb04 && offset < 0xb08) {
      offset -= 0xb04;
      if (read_callback_) read_callback_();
      sb_2_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb08 && offset < 0xb0c) {
      offset -= 0xb08;
      if (read_callback_) read_callback_();
      sb_2_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb0c && offset < 0xb10) {
      offset -= 0xb0c;
      if (read_callback_) read_callback_();
      sb_3_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb10 && offset < 0xb14) {
      offset -= 0xb10;
      if (read_callback_) read_callback_();
      sb_3_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb14 && offset < 0xb18) {
      offset -= 0xb14;
      if (read_callback_) read_callback_();
      sb_oflow_err_log_.read( offset, data );
    }
    else if (offset >= 0xb18 && offset < 0xb1c) {
      offset -= 0xb18;
      if (read_callback_) read_callback_();
      sb_uflow_err_log_.read( offset, data );
    }
    else if (offset >= 0xb1c && offset < 0xb20) {
      offset -= 0xb1c;
      if (read_callback_) read_callback_();
      mirr_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb20 && offset < 0xb24) {
      offset -= 0xb20;
      if (read_callback_) read_callback_();
      mirr_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb24 && offset < 0xb28) {
      offset -= 0xb24;
      if (read_callback_) read_callback_();
      byte_adj_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb28 && offset < 0xb2c) {
      offset -= 0xb28;
      if (read_callback_) read_callback_();
      byte_adj_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb2c && offset < 0xb30) {
      offset -= 0xb2c;
      if (read_callback_) read_callback_();
      tm_cred_oflow_err_log_.read( offset, data );
    }
    else if (offset >= 0xb30 && offset < 0xb34) {
      offset -= 0xb30;
      if (read_callback_) read_callback_();
      tm_cred_uflow_err_log_.read( offset, data );
    }
    else if (offset >= 0xb34 && offset < 0xb38) {
      offset -= 0xb34;
      if (read_callback_) read_callback_();
      debug_ctrl_.read( offset, data );
    }
    else if (offset >= 0xb38 && offset < 0xb3c) {
      offset -= 0xb38;
      if (read_callback_) read_callback_();
      pipe_map_.read( offset, data );
    }
    else if (offset >= 0xb3c && offset < 0xb40) {
      offset -= 0xb3c;
      if (read_callback_) read_callback_();
      hold_es_400g_.read( offset, data );
    }
    else if (offset >= 0xb40 && offset < 0xb44) {
      offset -= 0xb40;
      if (read_callback_) read_callback_();
      hold_es_200g_.read( offset, data );
    }
    else if (offset >= 0xb44 && offset < 0xb48) {
      offset -= 0xb44;
      if (read_callback_) read_callback_();
      hold_es_100g_.read( offset, data );
    }
    else if (offset >= 0xb48 && offset < 0xb4c) {
      offset -= 0xb48;
      if (read_callback_) read_callback_();
      hold_es_50g_.read( offset, data );
    }
    else if (offset >= 0xb4c && offset < 0xb50) {
      offset -= 0xb4c;
      if (read_callback_) read_callback_();
      hold_es_40g_.read( offset, data );
    }
    else if (offset >= 0xb50 && offset < 0xb54) {
      offset -= 0xb50;
      if (read_callback_) read_callback_();
      hold_es_25g_.read( offset, data );
    }
    else if (offset >= 0xb54 && offset < 0xb58) {
      offset -= 0xb54;
      if (read_callback_) read_callback_();
      hold_es_10g_.read( offset, data );
    }
    else if (offset >= 0xb58 && offset < 0xb5c) {
      offset -= 0xb58;
      if (read_callback_) read_callback_();
      hold_sm_400g_.read( offset, data );
    }
    else if (offset >= 0xb5c && offset < 0xb60) {
      offset -= 0xb5c;
      if (read_callback_) read_callback_();
      hold_sm_200g_.read( offset, data );
    }
    else if (offset >= 0xb60 && offset < 0xb64) {
      offset -= 0xb60;
      if (read_callback_) read_callback_();
      hold_sm_100g_.read( offset, data );
    }
    else if (offset >= 0xb64 && offset < 0xb68) {
      offset -= 0xb64;
      if (read_callback_) read_callback_();
      hold_sm_50g_.read( offset, data );
    }
    else if (offset >= 0xb68 && offset < 0xb6c) {
      offset -= 0xb68;
      if (read_callback_) read_callback_();
      hold_sm_40g_.read( offset, data );
    }
    else if (offset >= 0xb6c && offset < 0xb70) {
      offset -= 0xb6c;
      if (read_callback_) read_callback_();
      hold_sm_25g_.read( offset, data );
    }
    else if (offset >= 0xb70 && offset < 0xb74) {
      offset -= 0xb70;
      if (read_callback_) read_callback_();
      hold_sm_10g_.read( offset, data );
    }
    else if (offset >= 0xb74 && offset < 0xb78) {
      offset -= 0xb74;
      if (read_callback_) read_callback_();
      tm_cred_low_wmark_.read( offset, data );
    }
    else if (offset >= 0xae0 && offset < 0xaf4) {
      offset -= 0xae0;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x40 && offset < 0x64) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      port_rate_cfg_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xa4) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      chan_en_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      copy2cpu_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tm_cred_wr_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xc4) {
      offset -= 0xc0;
      tm_cred_rd_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400 && offset < 0x640) {
      offset -= 0x400;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      pkt_ctr_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x800 && offset < 0xa40) {
      offset -= 0x800;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      byte_ctr_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa40 && offset < 0xa48) {
      offset -= 0xa40;
      ctr_time_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa48 && offset < 0xa4c) {
      offset -= 0xa48;
      ctr_sample_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa80 && offset < 0xae0) {
      offset -= 0xa80;
      ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xaf4 && offset < 0xaf8) {
      offset -= 0xaf4;
      sb_0_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xaf8 && offset < 0xafc) {
      offset -= 0xaf8;
      sb_0_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xafc && offset < 0xb00) {
      offset -= 0xafc;
      sb_1_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb00 && offset < 0xb04) {
      offset -= 0xb00;
      sb_1_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb04 && offset < 0xb08) {
      offset -= 0xb04;
      sb_2_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb08 && offset < 0xb0c) {
      offset -= 0xb08;
      sb_2_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0c && offset < 0xb10) {
      offset -= 0xb0c;
      sb_3_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb10 && offset < 0xb14) {
      offset -= 0xb10;
      sb_3_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb14 && offset < 0xb18) {
      offset -= 0xb14;
      sb_oflow_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb18 && offset < 0xb1c) {
      offset -= 0xb18;
      sb_uflow_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb1c && offset < 0xb20) {
      offset -= 0xb1c;
      mirr_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb20 && offset < 0xb24) {
      offset -= 0xb20;
      mirr_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb24 && offset < 0xb28) {
      offset -= 0xb24;
      byte_adj_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb28 && offset < 0xb2c) {
      offset -= 0xb28;
      byte_adj_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb2c && offset < 0xb30) {
      offset -= 0xb2c;
      tm_cred_oflow_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb30 && offset < 0xb34) {
      offset -= 0xb30;
      tm_cred_uflow_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb34 && offset < 0xb38) {
      offset -= 0xb34;
      debug_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb38 && offset < 0xb3c) {
      offset -= 0xb38;
      pipe_map_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb3c && offset < 0xb40) {
      offset -= 0xb3c;
      hold_es_400g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb40 && offset < 0xb44) {
      offset -= 0xb40;
      hold_es_200g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb44 && offset < 0xb48) {
      offset -= 0xb44;
      hold_es_100g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb48 && offset < 0xb4c) {
      offset -= 0xb48;
      hold_es_50g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb4c && offset < 0xb50) {
      offset -= 0xb4c;
      hold_es_40g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb50 && offset < 0xb54) {
      offset -= 0xb50;
      hold_es_25g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb54 && offset < 0xb58) {
      offset -= 0xb54;
      hold_es_10g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb58 && offset < 0xb5c) {
      offset -= 0xb58;
      hold_sm_400g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb5c && offset < 0xb60) {
      offset -= 0xb5c;
      hold_sm_200g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb60 && offset < 0xb64) {
      offset -= 0xb60;
      hold_sm_100g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb64 && offset < 0xb68) {
      offset -= 0xb64;
      hold_sm_50g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb68 && offset < 0xb6c) {
      offset -= 0xb68;
      hold_sm_40g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb6c && offset < 0xb70) {
      offset -= 0xb6c;
      hold_sm_25g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb70 && offset < 0xb74) {
      offset -= 0xb70;
      hold_sm_10g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb74 && offset < 0xb78) {
      offset -= 0xb74;
      tm_cred_low_wmark_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xae0 && offset < 0xaf4) {
      offset -= 0xae0;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : port_rate_cfg_) {
      f0.reset();
    }
    for (auto &f0 : chan_en_) {
      f0.reset();
    }
    copy2cpu_.reset();
    for (auto &f0 : tm_cred_wr_) {
      f0.reset();
    }
    tm_cred_rd_.reset();
    for (auto &f0 : pkt_ctr_) {
      f0.reset();
    }
    for (auto &f0 : byte_ctr_) {
      f0.reset();
    }
    ctr_time_.reset();
    ctr_sample_.reset();
    ecc_.reset();
    sb_0_sbe_err_log_.reset();
    sb_0_mbe_err_log_.reset();
    sb_1_sbe_err_log_.reset();
    sb_1_mbe_err_log_.reset();
    sb_2_sbe_err_log_.reset();
    sb_2_mbe_err_log_.reset();
    sb_3_sbe_err_log_.reset();
    sb_3_mbe_err_log_.reset();
    sb_oflow_err_log_.reset();
    sb_uflow_err_log_.reset();
    mirr_sbe_err_log_.reset();
    mirr_mbe_err_log_.reset();
    byte_adj_sbe_err_log_.reset();
    byte_adj_mbe_err_log_.reset();
    tm_cred_oflow_err_log_.reset();
    tm_cred_uflow_err_log_.reset();
    debug_ctrl_.reset();
    pipe_map_.reset();
    hold_es_400g_.reset();
    hold_es_200g_.reset();
    hold_es_100g_.reset();
    hold_es_50g_.reset();
    hold_es_40g_.reset();
    hold_es_25g_.reset();
    hold_es_10g_.reset();
    hold_sm_400g_.reset();
    hold_sm_200g_.reset();
    hold_sm_100g_.reset();
    hold_sm_50g_.reset();
    hold_sm_40g_.reset();
    hold_sm_25g_.reset();
    hold_sm_10g_.reset();
    tm_cred_low_wmark_.reset();
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x40 && offset < 0x64) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += port_rate_cfg_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xa4) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += chan_en_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      r += copy2cpu_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tm_cred_wr_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xc4) {
      offset -= 0xc0;
      r += tm_cred_rd_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400 && offset < 0x640) {
      offset -= 0x400;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += pkt_ctr_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x800 && offset < 0xa40) {
      offset -= 0x800;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += byte_ctr_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa40 && offset < 0xa48) {
      offset -= 0xa40;
      r += ctr_time_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa48 && offset < 0xa4c) {
      offset -= 0xa48;
      r += ctr_sample_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa80 && offset < 0xae0) {
      offset -= 0xa80;
      r += ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xaf4 && offset < 0xaf8) {
      offset -= 0xaf4;
      r += sb_0_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xaf8 && offset < 0xafc) {
      offset -= 0xaf8;
      r += sb_0_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xafc && offset < 0xb00) {
      offset -= 0xafc;
      r += sb_1_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb00 && offset < 0xb04) {
      offset -= 0xb00;
      r += sb_1_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb04 && offset < 0xb08) {
      offset -= 0xb04;
      r += sb_2_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb08 && offset < 0xb0c) {
      offset -= 0xb08;
      r += sb_2_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0c && offset < 0xb10) {
      offset -= 0xb0c;
      r += sb_3_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb10 && offset < 0xb14) {
      offset -= 0xb10;
      r += sb_3_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb14 && offset < 0xb18) {
      offset -= 0xb14;
      r += sb_oflow_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb18 && offset < 0xb1c) {
      offset -= 0xb18;
      r += sb_uflow_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb1c && offset < 0xb20) {
      offset -= 0xb1c;
      r += mirr_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb20 && offset < 0xb24) {
      offset -= 0xb20;
      r += mirr_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb24 && offset < 0xb28) {
      offset -= 0xb24;
      r += byte_adj_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb28 && offset < 0xb2c) {
      offset -= 0xb28;
      r += byte_adj_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb2c && offset < 0xb30) {
      offset -= 0xb2c;
      r += tm_cred_oflow_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb30 && offset < 0xb34) {
      offset -= 0xb30;
      r += tm_cred_uflow_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb34 && offset < 0xb38) {
      offset -= 0xb34;
      r += debug_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb38 && offset < 0xb3c) {
      offset -= 0xb38;
      r += pipe_map_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb3c && offset < 0xb40) {
      offset -= 0xb3c;
      r += hold_es_400g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb40 && offset < 0xb44) {
      offset -= 0xb40;
      r += hold_es_200g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb44 && offset < 0xb48) {
      offset -= 0xb44;
      r += hold_es_100g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb48 && offset < 0xb4c) {
      offset -= 0xb48;
      r += hold_es_50g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb4c && offset < 0xb50) {
      offset -= 0xb4c;
      r += hold_es_40g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb50 && offset < 0xb54) {
      offset -= 0xb50;
      r += hold_es_25g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb54 && offset < 0xb58) {
      offset -= 0xb54;
      r += hold_es_10g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb58 && offset < 0xb5c) {
      offset -= 0xb58;
      r += hold_sm_400g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb5c && offset < 0xb60) {
      offset -= 0xb5c;
      r += hold_sm_200g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb60 && offset < 0xb64) {
      offset -= 0xb60;
      r += hold_sm_100g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb64 && offset < 0xb68) {
      offset -= 0xb64;
      r += hold_sm_50g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb68 && offset < 0xb6c) {
      offset -= 0xb68;
      r += hold_sm_40g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb6c && offset < 0xb70) {
      offset -= 0xb6c;
      r += hold_sm_25g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb70 && offset < 0xb74) {
      offset -= 0xb70;
      r += hold_sm_10g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb74 && offset < 0xb78) {
      offset -= 0xb74;
      r += tm_cred_low_wmark_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xae0 && offset < 0xaf4) {
      offset -= 0xae0;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<9;++a0) {
      r += port_rate_cfg_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<9;++a0) {
      r += chan_en_[a0].to_string(print_zeros,indent_string) ;
    }
    r += copy2cpu_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += tm_cred_wr_[a0].to_string(print_zeros,indent_string) ;
    }
    r += tm_cred_rd_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<72;++a0) {
      r += pkt_ctr_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<72;++a0) {
      r += byte_ctr_[a0].to_string(print_zeros,indent_string) ;
    }
    r += ctr_time_.to_string(print_zeros,indent_string) ;
    r += ctr_sample_.to_string(print_zeros,indent_string) ;
    r += ecc_.to_string(print_zeros,indent_string) ;
    r += sb_0_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_0_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_1_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_1_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_2_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_2_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_3_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_3_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_oflow_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_uflow_err_log_.to_string(print_zeros,indent_string) ;
    r += mirr_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += mirr_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += byte_adj_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += byte_adj_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += tm_cred_oflow_err_log_.to_string(print_zeros,indent_string) ;
    r += tm_cred_uflow_err_log_.to_string(print_zeros,indent_string) ;
    r += debug_ctrl_.to_string(print_zeros,indent_string) ;
    r += pipe_map_.to_string(print_zeros,indent_string) ;
    r += hold_es_400g_.to_string(print_zeros,indent_string) ;
    r += hold_es_200g_.to_string(print_zeros,indent_string) ;
    r += hold_es_100g_.to_string(print_zeros,indent_string) ;
    r += hold_es_50g_.to_string(print_zeros,indent_string) ;
    r += hold_es_40g_.to_string(print_zeros,indent_string) ;
    r += hold_es_25g_.to_string(print_zeros,indent_string) ;
    r += hold_es_10g_.to_string(print_zeros,indent_string) ;
    r += hold_sm_400g_.to_string(print_zeros,indent_string) ;
    r += hold_sm_200g_.to_string(print_zeros,indent_string) ;
    r += hold_sm_100g_.to_string(print_zeros,indent_string) ;
    r += hold_sm_50g_.to_string(print_zeros,indent_string) ;
    r += hold_sm_40g_.to_string(print_zeros,indent_string) ;
    r += hold_sm_25g_.to_string(print_zeros,indent_string) ;
    r += hold_sm_10g_.to_string(print_zeros,indent_string) ;
    r += tm_cred_low_wmark_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< S2pRegPortRateCfg, 9 > port_rate_cfg_;
  std::array< S2pRegChanEn, 9 > chan_en_;
  S2pRegCopy2cpu copy2cpu_;
  std::array< S2pRegTmCredWr, 4 > tm_cred_wr_;
  S2pRegTmCredRd tm_cred_rd_;
  std::array< S2pRegPktCtr, 72 > pkt_ctr_;
  std::array< S2pRegByteCtr, 72 > byte_ctr_;
  S2pRegCtrTime ctr_time_;
  S2pRegCtrSample ctr_sample_;
  S2pRegEcc ecc_;
  S2pRegSb_0SbeErrLog sb_0_sbe_err_log_;
  S2pRegSb_0MbeErrLog sb_0_mbe_err_log_;
  S2pRegSb_1SbeErrLog sb_1_sbe_err_log_;
  S2pRegSb_1MbeErrLog sb_1_mbe_err_log_;
  S2pRegSb_2SbeErrLog sb_2_sbe_err_log_;
  S2pRegSb_2MbeErrLog sb_2_mbe_err_log_;
  S2pRegSb_3SbeErrLog sb_3_sbe_err_log_;
  S2pRegSb_3MbeErrLog sb_3_mbe_err_log_;
  S2pRegSbOflowErrLog sb_oflow_err_log_;
  S2pRegSbUflowErrLog sb_uflow_err_log_;
  S2pRegMirrSbeErrLog mirr_sbe_err_log_;
  S2pRegMirrMbeErrLog mirr_mbe_err_log_;
  S2pRegByteAdjSbeErrLog byte_adj_sbe_err_log_;
  S2pRegByteAdjMbeErrLog byte_adj_mbe_err_log_;
  S2pRegTmCredOflowErrLog tm_cred_oflow_err_log_;
  S2pRegTmCredUflowErrLog tm_cred_uflow_err_log_;
  S2pRegDebugCtrl debug_ctrl_;
  S2pRegPipeMap pipe_map_;
  S2pRegEmptySopHoldR hold_es_400g_;
  S2pRegEmptySopHoldR hold_es_200g_;
  S2pRegEmptySopHoldR hold_es_100g_;
  S2pRegEmptySopHoldR hold_es_50g_;
  S2pRegEmptySopHoldR hold_es_40g_;
  S2pRegEmptySopHoldR hold_es_25g_;
  S2pRegEmptySopHoldR hold_es_10g_;
  S2pRegSopMopHoldR hold_sm_400g_;
  S2pRegSopMopHoldR hold_sm_200g_;
  S2pRegSopMopHoldR hold_sm_100g_;
  S2pRegSopMopHoldR hold_sm_50g_;
  S2pRegSopMopHoldR hold_sm_40g_;
  S2pRegSopMopHoldR hold_sm_25g_;
  S2pRegSopMopHoldR hold_sm_10g_;
  S2pRegTmCredLowWmark tm_cred_low_wmark_;
  S2pRegIntr intr_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x1a000; // to get to s2preg
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_S2P_REG_H__
