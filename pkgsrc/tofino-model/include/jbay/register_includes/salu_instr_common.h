/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_SALU_INSTR_COMMON_H__
#define __REGISTER_INCLUDES_SALU_INSTR_COMMON_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class SaluInstrCommon : public model_core::RegisterBlock<RegisterCallback> {
public:
  SaluInstrCommon(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_meter_alu_group_addrmap, int index_salu_instr_common, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_meter_alu_group_addrmap, index_salu_instr_common), 4, false, write_callback, read_callback, std::string("SaluInstrCommon")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_meter_alu_group_addrmap) + "," + boost::lexical_cast<std::string>(index_salu_instr_common))
    {
    }
  SaluInstrCommon(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "SaluInstrCommon")
    {
    }
public:



  uint8_t &salu_alu2_lo_bsrc_math() { return salu_alu2_lo_bsrc_math_; }






  uint8_t &salu_alu2_lo_math_src() { return salu_alu2_lo_math_src_; }



  uint8_t &salu_datasize() { return salu_datasize_; }



  uint8_t &salu_op_dual() { return salu_op_dual_; }


  uint8_t &salu_lmatch_sbus_listen() { return salu_lmatch_sbus_listen_; }


  uint8_t &salu_match_sbus_listen() { return salu_match_sbus_listen_; }



  uint8_t &salu_minmax_mask_ctl() { return salu_minmax_mask_ctl_; }






  uint8_t &salu_minmax_ctl() { return salu_minmax_ctl_; }


  uint8_t &salu_minmax_enable() { return salu_minmax_enable_; }


  uint8_t &salu_minmax_postinc_enable() { return salu_minmax_postinc_enable_; }


  uint8_t &salu_minmax_postdec_enable() { return salu_minmax_postdec_enable_; }




  uint8_t &salu_minmax_postmod_value_ctl() { return salu_minmax_postmod_value_ctl_; }




  uint8_t &salu_minmax_src_sel() { return salu_minmax_src_sel_; }


  uint8_t &salu_divide_enable() { return salu_divide_enable_; }





  uint8_t &salu_sbus_learn_comb() { return salu_sbus_learn_comb_; }





  uint8_t &salu_sbus_match_comb() { return salu_sbus_match_comb_; }




  uint8_t &salu_sbus_in_comb() { return salu_sbus_in_comb_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (salu_alu2_lo_bsrc_math_ & 0x1);
    *data |= ((salu_alu2_lo_math_src_ & 0x3) << 1);
    *data |= ((salu_datasize_ & 0x7) << 3);
    *data |= ((salu_op_dual_ & 0x1) << 6);
    *data |= ((salu_lmatch_sbus_listen_ & 0x7) << 7);
    *data |= ((salu_match_sbus_listen_ & 0x7) << 10);
    *data |= ((salu_minmax_mask_ctl_ & 0x1) << 13);
    *data |= ((salu_minmax_ctl_ & 0x3) << 14);
    *data |= ((salu_minmax_enable_ & 0x1) << 16);
    *data |= ((salu_minmax_postinc_enable_ & 0x1) << 17);
    *data |= ((salu_minmax_postdec_enable_ & 0x1) << 18);
    *data |= ((salu_minmax_postmod_value_ctl_ & 0x1) << 19);
    *data |= ((salu_minmax_src_sel_ & 0x1) << 20);
    *data |= ((salu_divide_enable_ & 0x1) << 21);
    *data |= ((salu_sbus_learn_comb_ & 0x1) << 22);
    *data |= ((salu_sbus_match_comb_ & 0x1) << 23);
    *data |= ((salu_sbus_in_comb_ & 0x1) << 24);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    salu_alu2_lo_bsrc_math_ = (data & 0x1);
    salu_alu2_lo_math_src_ = ((data >> 1) & 0x3);
    salu_datasize_ = ((data >> 3) & 0x7);
    salu_op_dual_ = ((data >> 6) & 0x1);
    salu_lmatch_sbus_listen_ = ((data >> 7) & 0x7);
    salu_match_sbus_listen_ = ((data >> 10) & 0x7);
    salu_minmax_mask_ctl_ = ((data >> 13) & 0x1);
    salu_minmax_ctl_ = ((data >> 14) & 0x3);
    salu_minmax_enable_ = ((data >> 16) & 0x1);
    salu_minmax_postinc_enable_ = ((data >> 17) & 0x1);
    salu_minmax_postdec_enable_ = ((data >> 18) & 0x1);
    salu_minmax_postmod_value_ctl_ = ((data >> 19) & 0x1);
    salu_minmax_src_sel_ = ((data >> 20) & 0x1);
    salu_divide_enable_ = ((data >> 21) & 0x1);
    salu_sbus_learn_comb_ = ((data >> 22) & 0x1);
    salu_sbus_match_comb_ = ((data >> 23) & 0x1);
    salu_sbus_in_comb_ = ((data >> 24) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    salu_alu2_lo_bsrc_math_ = 0x0;
    salu_alu2_lo_math_src_ = 0x0;
    salu_datasize_ = 0x0;
    salu_op_dual_ = 0x0;
    salu_lmatch_sbus_listen_ = 0x0;
    salu_match_sbus_listen_ = 0x0;
    salu_minmax_mask_ctl_ = 0x0;
    salu_minmax_ctl_ = 0x0;
    salu_minmax_enable_ = 0x0;
    salu_minmax_postinc_enable_ = 0x0;
    salu_minmax_postdec_enable_ = 0x0;
    salu_minmax_postmod_value_ctl_ = 0x0;
    salu_minmax_src_sel_ = 0x0;
    salu_divide_enable_ = 0x0;
    salu_sbus_learn_comb_ = 0x0;
    salu_sbus_match_comb_ = 0x0;
    salu_sbus_in_comb_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("SaluInstrCommon") + ":\n";
    r += indent_string + "  " + std::string("salu_alu2_lo_bsrc_math") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_alu2_lo_bsrc_math_) ) + "\n";
    all_zeros &= (0 == salu_alu2_lo_bsrc_math_);
    r += indent_string + "  " + std::string("salu_alu2_lo_math_src") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_alu2_lo_math_src_) ) + "\n";
    all_zeros &= (0 == salu_alu2_lo_math_src_);
    r += indent_string + "  " + std::string("salu_datasize") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_datasize_) ) + "\n";
    all_zeros &= (0 == salu_datasize_);
    r += indent_string + "  " + std::string("salu_op_dual") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_op_dual_) ) + "\n";
    all_zeros &= (0 == salu_op_dual_);
    r += indent_string + "  " + std::string("salu_lmatch_sbus_listen") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_lmatch_sbus_listen_) ) + "\n";
    all_zeros &= (0 == salu_lmatch_sbus_listen_);
    r += indent_string + "  " + std::string("salu_match_sbus_listen") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_match_sbus_listen_) ) + "\n";
    all_zeros &= (0 == salu_match_sbus_listen_);
    r += indent_string + "  " + std::string("salu_minmax_mask_ctl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_minmax_mask_ctl_) ) + "\n";
    all_zeros &= (0 == salu_minmax_mask_ctl_);
    r += indent_string + "  " + std::string("salu_minmax_ctl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_minmax_ctl_) ) + "\n";
    all_zeros &= (0 == salu_minmax_ctl_);
    r += indent_string + "  " + std::string("salu_minmax_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_minmax_enable_) ) + "\n";
    all_zeros &= (0 == salu_minmax_enable_);
    r += indent_string + "  " + std::string("salu_minmax_postinc_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_minmax_postinc_enable_) ) + "\n";
    all_zeros &= (0 == salu_minmax_postinc_enable_);
    r += indent_string + "  " + std::string("salu_minmax_postdec_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_minmax_postdec_enable_) ) + "\n";
    all_zeros &= (0 == salu_minmax_postdec_enable_);
    r += indent_string + "  " + std::string("salu_minmax_postmod_value_ctl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_minmax_postmod_value_ctl_) ) + "\n";
    all_zeros &= (0 == salu_minmax_postmod_value_ctl_);
    r += indent_string + "  " + std::string("salu_minmax_src_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_minmax_src_sel_) ) + "\n";
    all_zeros &= (0 == salu_minmax_src_sel_);
    r += indent_string + "  " + std::string("salu_divide_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_divide_enable_) ) + "\n";
    all_zeros &= (0 == salu_divide_enable_);
    r += indent_string + "  " + std::string("salu_sbus_learn_comb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_sbus_learn_comb_) ) + "\n";
    all_zeros &= (0 == salu_sbus_learn_comb_);
    r += indent_string + "  " + std::string("salu_sbus_match_comb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_sbus_match_comb_) ) + "\n";
    all_zeros &= (0 == salu_sbus_match_comb_);
    r += indent_string + "  " + std::string("salu_sbus_in_comb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_sbus_in_comb_) ) + "\n";
    all_zeros &= (0 == salu_sbus_in_comb_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("SaluInstrCommon") + ":\n";
    r += indent_string + "  " + std::string("salu_alu2_lo_bsrc_math") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_alu2_lo_bsrc_math_) ) + "\n";
    all_zeros &= (0 == salu_alu2_lo_bsrc_math_);
    r += indent_string + "  " + std::string("salu_alu2_lo_math_src") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_alu2_lo_math_src_) ) + "\n";
    all_zeros &= (0 == salu_alu2_lo_math_src_);
    r += indent_string + "  " + std::string("salu_datasize") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_datasize_) ) + "\n";
    all_zeros &= (0 == salu_datasize_);
    r += indent_string + "  " + std::string("salu_op_dual") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_op_dual_) ) + "\n";
    all_zeros &= (0 == salu_op_dual_);
    r += indent_string + "  " + std::string("salu_lmatch_sbus_listen") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_lmatch_sbus_listen_) ) + "\n";
    all_zeros &= (0 == salu_lmatch_sbus_listen_);
    r += indent_string + "  " + std::string("salu_match_sbus_listen") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_match_sbus_listen_) ) + "\n";
    all_zeros &= (0 == salu_match_sbus_listen_);
    r += indent_string + "  " + std::string("salu_minmax_mask_ctl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_minmax_mask_ctl_) ) + "\n";
    all_zeros &= (0 == salu_minmax_mask_ctl_);
    r += indent_string + "  " + std::string("salu_minmax_ctl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_minmax_ctl_) ) + "\n";
    all_zeros &= (0 == salu_minmax_ctl_);
    r += indent_string + "  " + std::string("salu_minmax_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_minmax_enable_) ) + "\n";
    all_zeros &= (0 == salu_minmax_enable_);
    r += indent_string + "  " + std::string("salu_minmax_postinc_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_minmax_postinc_enable_) ) + "\n";
    all_zeros &= (0 == salu_minmax_postinc_enable_);
    r += indent_string + "  " + std::string("salu_minmax_postdec_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_minmax_postdec_enable_) ) + "\n";
    all_zeros &= (0 == salu_minmax_postdec_enable_);
    r += indent_string + "  " + std::string("salu_minmax_postmod_value_ctl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_minmax_postmod_value_ctl_) ) + "\n";
    all_zeros &= (0 == salu_minmax_postmod_value_ctl_);
    r += indent_string + "  " + std::string("salu_minmax_src_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_minmax_src_sel_) ) + "\n";
    all_zeros &= (0 == salu_minmax_src_sel_);
    r += indent_string + "  " + std::string("salu_divide_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_divide_enable_) ) + "\n";
    all_zeros &= (0 == salu_divide_enable_);
    r += indent_string + "  " + std::string("salu_sbus_learn_comb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_sbus_learn_comb_) ) + "\n";
    all_zeros &= (0 == salu_sbus_learn_comb_);
    r += indent_string + "  " + std::string("salu_sbus_match_comb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_sbus_match_comb_) ) + "\n";
    all_zeros &= (0 == salu_sbus_match_comb_);
    r += indent_string + "  " + std::string("salu_sbus_in_comb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_sbus_in_comb_) ) + "\n";
    all_zeros &= (0 == salu_sbus_in_comb_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t salu_alu2_lo_bsrc_math_;
  uint8_t salu_alu2_lo_math_src_;
  uint8_t salu_datasize_;
  uint8_t salu_op_dual_;
  uint8_t salu_lmatch_sbus_listen_;
  uint8_t salu_match_sbus_listen_;
  uint8_t salu_minmax_mask_ctl_;
  uint8_t salu_minmax_ctl_;
  uint8_t salu_minmax_enable_;
  uint8_t salu_minmax_postinc_enable_;
  uint8_t salu_minmax_postdec_enable_;
  uint8_t salu_minmax_postmod_value_ctl_;
  uint8_t salu_minmax_src_sel_;
  uint8_t salu_divide_enable_;
  uint8_t salu_sbus_learn_comb_;
  uint8_t salu_sbus_match_comb_;
  uint8_t salu_sbus_in_comb_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_meter_alu_group_addrmap, int index_salu_instr_common
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to rams
    offset += 0x10000; // to get to map_alu
    offset += 0x3000; // to get to meter_group
    assert(index_mau_meter_alu_group_addrmap < 4);
    offset += index_mau_meter_alu_group_addrmap * 0x400; // mau_meter_alu_group_addrmap[]
    offset += 0x200; // to get to stateful
    offset += 0x80; // to get to salu_instr_common
    assert(index_salu_instr_common < 4);
    offset += index_salu_instr_common * 0x4; // salu_instr_common[]
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_SALU_INSTR_COMMON_H__
