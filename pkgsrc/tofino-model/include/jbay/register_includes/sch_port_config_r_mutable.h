/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_SCH_PORT_CONFIG_R_MUTABLE_H__
#define __REGISTER_INCLUDES_SCH_PORT_CONFIG_R_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class SchPortConfigRMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum TmTopRspecEnum {
    kTmSchaTop,
    kTmSchbTop
  };
public:
  SchPortConfigRMutable(
      int chipNumber, TmTopRspecEnum selector_tm_top_rspec, int index_tm_sch_pipe_rspec, int index_sch_port_config_r, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_tm_top_rspec, index_tm_sch_pipe_rspec, index_sch_port_config_r), 4, true, write_callback, read_callback, std::string("SchPortConfigRMutable")+":"+boost::lexical_cast<std::string>(selector_tm_top_rspec) + "," + boost::lexical_cast<std::string>(index_tm_sch_pipe_rspec) + "," + boost::lexical_cast<std::string>(index_sch_port_config_r))
    {
    }
  SchPortConfigRMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "SchPortConfigRMutable")
    {
    }
public:





  uint8_t enb() { return enb_; }
  void enb(const uint8_t &v) { enb_=v; }






  uint8_t pfc_upd_enb() { return pfc_upd_enb_; }
  void pfc_upd_enb(const uint8_t &v) { pfc_upd_enb_=v; }






  uint8_t tdm_enb() { return tdm_enb_; }
  void tdm_enb(const uint8_t &v) { tdm_enb_=v; }





  uint8_t max_rate_enb() { return max_rate_enb_; }
  void max_rate_enb(const uint8_t &v) { max_rate_enb_=v; }












  uint8_t port_speed_mode() { return port_speed_mode_; }
  void port_speed_mode(const uint8_t &v) { port_speed_mode_=v; }





  uint8_t pps() { return pps_; }
  void pps(const uint8_t &v) { pps_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (enb_ & 0x1);
    *data |= ((pfc_upd_enb_ & 0x1) << 1);
    *data |= ((tdm_enb_ & 0x1) << 2);
    *data |= ((max_rate_enb_ & 0x1) << 3);
    *data |= ((port_speed_mode_ & 0x7) << 8);
    *data |= ((pps_ & 0x1) << 31);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    enb_ = (data & 0x1);
    pfc_upd_enb_ = ((data >> 1) & 0x1);
    tdm_enb_ = ((data >> 2) & 0x1);
    max_rate_enb_ = ((data >> 3) & 0x1);
    port_speed_mode_ = ((data >> 8) & 0x7);
    pps_ = ((data >> 31) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    enb_ = 0x1;
    pfc_upd_enb_ = 0x1;
    tdm_enb_ = 0x0;
    max_rate_enb_ = 0x1;
    port_speed_mode_ = 0;
    pps_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("SchPortConfigRMutable") + ":\n";
    r += indent_string + "  " + std::string("enb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enb_) ) + "\n";
    all_zeros &= (0 == enb_);
    r += indent_string + "  " + std::string("pfc_upd_enb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_upd_enb_) ) + "\n";
    all_zeros &= (0 == pfc_upd_enb_);
    r += indent_string + "  " + std::string("tdm_enb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tdm_enb_) ) + "\n";
    all_zeros &= (0 == tdm_enb_);
    r += indent_string + "  " + std::string("max_rate_enb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(max_rate_enb_) ) + "\n";
    all_zeros &= (0 == max_rate_enb_);
    r += indent_string + "  " + std::string("port_speed_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port_speed_mode_) ) + "\n";
    all_zeros &= (0 == port_speed_mode_);
    r += indent_string + "  " + std::string("pps") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pps_) ) + "\n";
    all_zeros &= (0 == pps_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("SchPortConfigRMutable") + ":\n";
    r += indent_string + "  " + std::string("enb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enb_) ) + "\n";
    all_zeros &= (0 == enb_);
    r += indent_string + "  " + std::string("pfc_upd_enb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_upd_enb_) ) + "\n";
    all_zeros &= (0 == pfc_upd_enb_);
    r += indent_string + "  " + std::string("tdm_enb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tdm_enb_) ) + "\n";
    all_zeros &= (0 == tdm_enb_);
    r += indent_string + "  " + std::string("max_rate_enb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(max_rate_enb_) ) + "\n";
    all_zeros &= (0 == max_rate_enb_);
    r += indent_string + "  " + std::string("port_speed_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port_speed_mode_) ) + "\n";
    all_zeros &= (0 == port_speed_mode_);
    r += indent_string + "  " + std::string("pps") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pps_) ) + "\n";
    all_zeros &= (0 == pps_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t enb_;
  uint8_t pfc_upd_enb_;
  uint8_t tdm_enb_;
  uint8_t max_rate_enb_;
  uint8_t port_speed_mode_;
  uint8_t pps_;
private:
  static int StartOffset(
      TmTopRspecEnum selector_tm_top_rspec, int index_tm_sch_pipe_rspec, int index_sch_port_config_r
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    switch (selector_tm_top_rspec) {
      case kTmSchaTop:
        offset += 0x180000; // to get to tm_scha_top
        assert(index_tm_sch_pipe_rspec < 2);
        offset += index_tm_sch_pipe_rspec * 0x8000; // tm_sch_pipe_rspec[]
        offset += 0x600; // to get to port_config
        assert(index_sch_port_config_r < 72);
        offset += index_sch_port_config_r * 0x4; // sch_port_config_r[]
        break;
      case kTmSchbTop:
        offset += 0x200000; // to get to tm_schb_top
        assert(index_tm_sch_pipe_rspec < 2);
        offset += index_tm_sch_pipe_rspec * 0x8000; // tm_sch_pipe_rspec[]
        offset += 0x600; // to get to port_config
        assert(index_sch_port_config_r < 72);
        offset += index_sch_port_config_r * 0x4; // sch_port_config_r[]
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_SCH_PORT_CONFIG_R_MUTABLE_H__
