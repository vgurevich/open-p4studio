/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_SCH_READY_R_H__
#define __REGISTER_INCLUDES_SCH_READY_R_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class SchReadyR : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum TmTopRspecEnum {
    kTmSchaTop,
    kTmSchbTop
  };
public:
  SchReadyR(
      int chipNumber, TmTopRspecEnum selector_tm_top_rspec, int index_tm_sch_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_tm_top_rspec, index_tm_sch_pipe_rspec), 4, false, write_callback, read_callback, std::string("SchReadyR")+":"+boost::lexical_cast<std::string>(selector_tm_top_rspec) + "," + boost::lexical_cast<std::string>(index_tm_sch_pipe_rspec))
    {
    }
  SchReadyR(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "SchReadyR")
    {
    }
public:




  uint8_t &p_max_dynamic() { return p_max_dynamic_; }




  uint8_t &p_max_static() { return p_max_static_; }




  uint8_t &l1_max_dynamic() { return l1_max_dynamic_; }




  uint8_t &l1_max_static() { return l1_max_static_; }




  uint8_t &l1_exc_dynamic() { return l1_exc_dynamic_; }




  uint8_t &l1_exc_static() { return l1_exc_static_; }




  uint8_t &l1_min_dynamic() { return l1_min_dynamic_; }




  uint8_t &l1_min_static() { return l1_min_static_; }




  uint8_t &q_max_dynamic() { return q_max_dynamic_; }




  uint8_t &q_max_static() { return q_max_static_; }




  uint8_t &q_exc_dynamic() { return q_exc_dynamic_; }




  uint8_t &q_exc_static() { return q_exc_static_; }




  uint8_t &q_min_dynamic() { return q_min_dynamic_; }




  uint8_t &q_min_static() { return q_min_static_; }




  uint8_t &tdm() { return tdm_; }




  uint8_t &pexcr() { return pexcr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (p_max_dynamic_ & 0x1);
    *data |= ((p_max_static_ & 0x1) << 1);
    *data |= ((l1_max_dynamic_ & 0x1) << 2);
    *data |= ((l1_max_static_ & 0x1) << 3);
    *data |= ((l1_exc_dynamic_ & 0x1) << 4);
    *data |= ((l1_exc_static_ & 0x1) << 5);
    *data |= ((l1_min_dynamic_ & 0x1) << 6);
    *data |= ((l1_min_static_ & 0x1) << 7);
    *data |= ((q_max_dynamic_ & 0x1) << 8);
    *data |= ((q_max_static_ & 0x1) << 9);
    *data |= ((q_exc_dynamic_ & 0x1) << 10);
    *data |= ((q_exc_static_ & 0x1) << 11);
    *data |= ((q_min_dynamic_ & 0x1) << 12);
    *data |= ((q_min_static_ & 0x1) << 13);
    *data |= ((tdm_ & 0x1) << 14);
    *data |= ((pexcr_ & 0x1) << 15);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    p_max_dynamic_ = (data & 0x1);
    p_max_static_ = ((data >> 1) & 0x1);
    l1_max_dynamic_ = ((data >> 2) & 0x1);
    l1_max_static_ = ((data >> 3) & 0x1);
    l1_exc_dynamic_ = ((data >> 4) & 0x1);
    l1_exc_static_ = ((data >> 5) & 0x1);
    l1_min_dynamic_ = ((data >> 6) & 0x1);
    l1_min_static_ = ((data >> 7) & 0x1);
    q_max_dynamic_ = ((data >> 8) & 0x1);
    q_max_static_ = ((data >> 9) & 0x1);
    q_exc_dynamic_ = ((data >> 10) & 0x1);
    q_exc_static_ = ((data >> 11) & 0x1);
    q_min_dynamic_ = ((data >> 12) & 0x1);
    q_min_static_ = ((data >> 13) & 0x1);
    tdm_ = ((data >> 14) & 0x1);
    pexcr_ = ((data >> 15) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    p_max_dynamic_ = 0x0;
    p_max_static_ = 0x0;
    l1_max_dynamic_ = 0x0;
    l1_max_static_ = 0x0;
    l1_exc_dynamic_ = 0x0;
    l1_exc_static_ = 0x0;
    l1_min_dynamic_ = 0x0;
    l1_min_static_ = 0x0;
    q_max_dynamic_ = 0x0;
    q_max_static_ = 0x0;
    q_exc_dynamic_ = 0x0;
    q_exc_static_ = 0x0;
    q_min_dynamic_ = 0x0;
    q_min_static_ = 0x0;
    tdm_ = 0x0;
    pexcr_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("SchReadyR") + ":\n";
    r += indent_string + "  " + std::string("p_max_dynamic") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(p_max_dynamic_) ) + "\n";
    all_zeros &= (0 == p_max_dynamic_);
    r += indent_string + "  " + std::string("p_max_static") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(p_max_static_) ) + "\n";
    all_zeros &= (0 == p_max_static_);
    r += indent_string + "  " + std::string("l1_max_dynamic") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_max_dynamic_) ) + "\n";
    all_zeros &= (0 == l1_max_dynamic_);
    r += indent_string + "  " + std::string("l1_max_static") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_max_static_) ) + "\n";
    all_zeros &= (0 == l1_max_static_);
    r += indent_string + "  " + std::string("l1_exc_dynamic") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_exc_dynamic_) ) + "\n";
    all_zeros &= (0 == l1_exc_dynamic_);
    r += indent_string + "  " + std::string("l1_exc_static") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_exc_static_) ) + "\n";
    all_zeros &= (0 == l1_exc_static_);
    r += indent_string + "  " + std::string("l1_min_dynamic") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_min_dynamic_) ) + "\n";
    all_zeros &= (0 == l1_min_dynamic_);
    r += indent_string + "  " + std::string("l1_min_static") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_min_static_) ) + "\n";
    all_zeros &= (0 == l1_min_static_);
    r += indent_string + "  " + std::string("q_max_dynamic") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_max_dynamic_) ) + "\n";
    all_zeros &= (0 == q_max_dynamic_);
    r += indent_string + "  " + std::string("q_max_static") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_max_static_) ) + "\n";
    all_zeros &= (0 == q_max_static_);
    r += indent_string + "  " + std::string("q_exc_dynamic") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_exc_dynamic_) ) + "\n";
    all_zeros &= (0 == q_exc_dynamic_);
    r += indent_string + "  " + std::string("q_exc_static") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_exc_static_) ) + "\n";
    all_zeros &= (0 == q_exc_static_);
    r += indent_string + "  " + std::string("q_min_dynamic") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_min_dynamic_) ) + "\n";
    all_zeros &= (0 == q_min_dynamic_);
    r += indent_string + "  " + std::string("q_min_static") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_min_static_) ) + "\n";
    all_zeros &= (0 == q_min_static_);
    r += indent_string + "  " + std::string("tdm") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tdm_) ) + "\n";
    all_zeros &= (0 == tdm_);
    r += indent_string + "  " + std::string("pexcr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pexcr_) ) + "\n";
    all_zeros &= (0 == pexcr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("SchReadyR") + ":\n";
    r += indent_string + "  " + std::string("p_max_dynamic") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(p_max_dynamic_) ) + "\n";
    all_zeros &= (0 == p_max_dynamic_);
    r += indent_string + "  " + std::string("p_max_static") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(p_max_static_) ) + "\n";
    all_zeros &= (0 == p_max_static_);
    r += indent_string + "  " + std::string("l1_max_dynamic") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_max_dynamic_) ) + "\n";
    all_zeros &= (0 == l1_max_dynamic_);
    r += indent_string + "  " + std::string("l1_max_static") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_max_static_) ) + "\n";
    all_zeros &= (0 == l1_max_static_);
    r += indent_string + "  " + std::string("l1_exc_dynamic") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_exc_dynamic_) ) + "\n";
    all_zeros &= (0 == l1_exc_dynamic_);
    r += indent_string + "  " + std::string("l1_exc_static") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_exc_static_) ) + "\n";
    all_zeros &= (0 == l1_exc_static_);
    r += indent_string + "  " + std::string("l1_min_dynamic") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_min_dynamic_) ) + "\n";
    all_zeros &= (0 == l1_min_dynamic_);
    r += indent_string + "  " + std::string("l1_min_static") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_min_static_) ) + "\n";
    all_zeros &= (0 == l1_min_static_);
    r += indent_string + "  " + std::string("q_max_dynamic") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_max_dynamic_) ) + "\n";
    all_zeros &= (0 == q_max_dynamic_);
    r += indent_string + "  " + std::string("q_max_static") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_max_static_) ) + "\n";
    all_zeros &= (0 == q_max_static_);
    r += indent_string + "  " + std::string("q_exc_dynamic") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_exc_dynamic_) ) + "\n";
    all_zeros &= (0 == q_exc_dynamic_);
    r += indent_string + "  " + std::string("q_exc_static") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_exc_static_) ) + "\n";
    all_zeros &= (0 == q_exc_static_);
    r += indent_string + "  " + std::string("q_min_dynamic") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_min_dynamic_) ) + "\n";
    all_zeros &= (0 == q_min_dynamic_);
    r += indent_string + "  " + std::string("q_min_static") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_min_static_) ) + "\n";
    all_zeros &= (0 == q_min_static_);
    r += indent_string + "  " + std::string("tdm") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tdm_) ) + "\n";
    all_zeros &= (0 == tdm_);
    r += indent_string + "  " + std::string("pexcr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pexcr_) ) + "\n";
    all_zeros &= (0 == pexcr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t p_max_dynamic_;
  uint8_t p_max_static_;
  uint8_t l1_max_dynamic_;
  uint8_t l1_max_static_;
  uint8_t l1_exc_dynamic_;
  uint8_t l1_exc_static_;
  uint8_t l1_min_dynamic_;
  uint8_t l1_min_static_;
  uint8_t q_max_dynamic_;
  uint8_t q_max_static_;
  uint8_t q_exc_dynamic_;
  uint8_t q_exc_static_;
  uint8_t q_min_dynamic_;
  uint8_t q_min_static_;
  uint8_t tdm_;
  uint8_t pexcr_;
private:
  static int StartOffset(
      TmTopRspecEnum selector_tm_top_rspec, int index_tm_sch_pipe_rspec
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    switch (selector_tm_top_rspec) {
      case kTmSchaTop:
        offset += 0x180000; // to get to tm_scha_top
        assert(index_tm_sch_pipe_rspec < 2);
        offset += index_tm_sch_pipe_rspec * 0x8000; // tm_sch_pipe_rspec[]
        offset += 0x104; // to get to ready
        break;
      case kTmSchbTop:
        offset += 0x200000; // to get to tm_schb_top
        assert(index_tm_sch_pipe_rspec < 2);
        offset += index_tm_sch_pipe_rspec * 0x8000; // tm_sch_pipe_rspec[]
        offset += 0x104; // to get to ready
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_SCH_READY_R_H__
