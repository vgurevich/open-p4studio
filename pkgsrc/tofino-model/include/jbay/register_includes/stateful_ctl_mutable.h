/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_STATEFUL_CTL_MUTABLE_H__
#define __REGISTER_INCLUDES_STATEFUL_CTL_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class StatefulCtlMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  StatefulCtlMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_meter_alu_group_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_meter_alu_group_addrmap), 4, true, write_callback, read_callback, std::string("StatefulCtlMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_meter_alu_group_addrmap))
    {
    }
  StatefulCtlMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "StatefulCtlMutable")
    {
    }
public:


  uint8_t salu_enable() { return salu_enable_; }
  void salu_enable(const uint8_t &v) { salu_enable_=v; }




  uint8_t salu_output_pred_comb_shift() { return salu_output_pred_comb_shift_; }
  void salu_output_pred_comb_shift(const uint8_t &v) { salu_output_pred_comb_shift_=v; }





  uint8_t salu_output_pred_shift() { return salu_output_pred_shift_; }
  void salu_output_pred_shift(const uint8_t &v) { salu_output_pred_shift_=v; }



  uint8_t salu_output_pred_sel() { return salu_output_pred_sel_; }
  void salu_output_pred_sel(const uint8_t &v) { salu_output_pred_sel_=v; }



  uint8_t salu_stage_id() { return salu_stage_id_; }
  void salu_stage_id(const uint8_t &v) { salu_stage_id_=v; }




  uint8_t salu_stage_id_enable() { return salu_stage_id_enable_; }
  void salu_stage_id_enable(const uint8_t &v) { salu_stage_id_enable_=v; }




  uint8_t salu_clear_value_ctl() { return salu_clear_value_ctl_; }
  void salu_clear_value_ctl(const uint8_t &v) { salu_clear_value_ctl_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (salu_enable_ & 0x1);
    *data |= ((salu_output_pred_comb_shift_ & 0x1f) << 1);
    *data |= ((salu_output_pred_shift_ & 0x7) << 6);
    *data |= ((salu_output_pred_sel_ & 0x3) << 9);
    *data |= ((salu_stage_id_ & 0x7f) << 11);
    *data |= ((salu_stage_id_enable_ & 0x1) << 18);
    *data |= ((salu_clear_value_ctl_ & 0x1) << 19);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    salu_enable_ = (data & 0x1);
    salu_output_pred_comb_shift_ = ((data >> 1) & 0x1f);
    salu_output_pred_shift_ = ((data >> 6) & 0x7);
    salu_output_pred_sel_ = ((data >> 9) & 0x3);
    salu_stage_id_ = ((data >> 11) & 0x7f);
    salu_stage_id_enable_ = ((data >> 18) & 0x1);
    salu_clear_value_ctl_ = ((data >> 19) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    salu_enable_ = 0x0;
    salu_output_pred_comb_shift_ = 0x0;
    salu_output_pred_shift_ = 0x0;
    salu_output_pred_sel_ = 0x0;
    salu_stage_id_ = 0x0;
    salu_stage_id_enable_ = 0x0;
    salu_clear_value_ctl_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("StatefulCtlMutable") + ":\n";
    r += indent_string + "  " + std::string("salu_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_enable_) ) + "\n";
    all_zeros &= (0 == salu_enable_);
    r += indent_string + "  " + std::string("salu_output_pred_comb_shift") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_output_pred_comb_shift_) ) + "\n";
    all_zeros &= (0 == salu_output_pred_comb_shift_);
    r += indent_string + "  " + std::string("salu_output_pred_shift") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_output_pred_shift_) ) + "\n";
    all_zeros &= (0 == salu_output_pred_shift_);
    r += indent_string + "  " + std::string("salu_output_pred_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_output_pred_sel_) ) + "\n";
    all_zeros &= (0 == salu_output_pred_sel_);
    r += indent_string + "  " + std::string("salu_stage_id") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_stage_id_) ) + "\n";
    all_zeros &= (0 == salu_stage_id_);
    r += indent_string + "  " + std::string("salu_stage_id_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_stage_id_enable_) ) + "\n";
    all_zeros &= (0 == salu_stage_id_enable_);
    r += indent_string + "  " + std::string("salu_clear_value_ctl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_clear_value_ctl_) ) + "\n";
    all_zeros &= (0 == salu_clear_value_ctl_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("StatefulCtlMutable") + ":\n";
    r += indent_string + "  " + std::string("salu_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_enable_) ) + "\n";
    all_zeros &= (0 == salu_enable_);
    r += indent_string + "  " + std::string("salu_output_pred_comb_shift") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_output_pred_comb_shift_) ) + "\n";
    all_zeros &= (0 == salu_output_pred_comb_shift_);
    r += indent_string + "  " + std::string("salu_output_pred_shift") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_output_pred_shift_) ) + "\n";
    all_zeros &= (0 == salu_output_pred_shift_);
    r += indent_string + "  " + std::string("salu_output_pred_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_output_pred_sel_) ) + "\n";
    all_zeros &= (0 == salu_output_pred_sel_);
    r += indent_string + "  " + std::string("salu_stage_id") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_stage_id_) ) + "\n";
    all_zeros &= (0 == salu_stage_id_);
    r += indent_string + "  " + std::string("salu_stage_id_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_stage_id_enable_) ) + "\n";
    all_zeros &= (0 == salu_stage_id_enable_);
    r += indent_string + "  " + std::string("salu_clear_value_ctl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_clear_value_ctl_) ) + "\n";
    all_zeros &= (0 == salu_clear_value_ctl_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t salu_enable_;
  uint8_t salu_output_pred_comb_shift_;
  uint8_t salu_output_pred_shift_;
  uint8_t salu_output_pred_sel_;
  uint8_t salu_stage_id_;
  uint8_t salu_stage_id_enable_;
  uint8_t salu_clear_value_ctl_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_meter_alu_group_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to rams
    offset += 0x10000; // to get to map_alu
    offset += 0x3000; // to get to meter_group
    assert(index_mau_meter_alu_group_addrmap < 4);
    offset += index_mau_meter_alu_group_addrmap * 0x400; // mau_meter_alu_group_addrmap[]
    offset += 0x200; // to get to stateful
    offset += 0x1cc; // to get to stateful_ctl
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_STATEFUL_CTL_MUTABLE_H__
