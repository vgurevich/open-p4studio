/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TBUS_INT_STAT0_H__
#define __REGISTER_INCLUDES_TBUS_INT_STAT0_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class TbusIntStat0 : public model_core::RegisterBlock<RegisterCallback> {
public:
  TbusIntStat0(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, false, write_callback, read_callback, std::string("TbusIntStat0"))
    {
    }
  TbusIntStat0(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "TbusIntStat0")
    {
    }
public:





  uint8_t &host_overflow() { return host_overflow_; }





  uint8_t &tx_dr_0_empty() { return tx_dr_0_empty_; }





  uint8_t &tx_dr_1_empty() { return tx_dr_1_empty_; }





  uint8_t &tx_dr_2_empty() { return tx_dr_2_empty_; }





  uint8_t &tx_dr_3_empty() { return tx_dr_3_empty_; }





  uint8_t &tx_dr_0_full() { return tx_dr_0_full_; }





  uint8_t &tx_dr_1_full() { return tx_dr_1_full_; }





  uint8_t &tx_dr_2_full() { return tx_dr_2_full_; }





  uint8_t &tx_dr_3_full() { return tx_dr_3_full_; }





  uint8_t &cpl_dr_0_empty() { return cpl_dr_0_empty_; }





  uint8_t &cpl_dr_1_empty() { return cpl_dr_1_empty_; }





  uint8_t &cpl_dr_2_empty() { return cpl_dr_2_empty_; }





  uint8_t &cpl_dr_3_empty() { return cpl_dr_3_empty_; }





  uint8_t &cpl_dr_0_full() { return cpl_dr_0_full_; }





  uint8_t &cpl_dr_1_full() { return cpl_dr_1_full_; }





  uint8_t &cpl_dr_2_full() { return cpl_dr_2_full_; }





  uint8_t &cpl_dr_3_full() { return cpl_dr_3_full_; }





  uint8_t &tx_dr_0_rd_err() { return tx_dr_0_rd_err_; }





  uint8_t &tx_dr_1_rd_err() { return tx_dr_1_rd_err_; }





  uint8_t &tx_dr_2_rd_err() { return tx_dr_2_rd_err_; }





  uint8_t &tx_dr_3_rd_err() { return tx_dr_3_rd_err_; }





  uint8_t &fm_dr_0_rd_err() { return fm_dr_0_rd_err_; }





  uint8_t &fm_dr_1_rd_err() { return fm_dr_1_rd_err_; }





  uint8_t &fm_dr_2_rd_err() { return fm_dr_2_rd_err_; }





  uint8_t &fm_dr_3_rd_err() { return fm_dr_3_rd_err_; }





  uint8_t &fm_dr_4_rd_err() { return fm_dr_4_rd_err_; }





  uint8_t &fm_dr_5_rd_err() { return fm_dr_5_rd_err_; }





  uint8_t &fm_dr_6_rd_err() { return fm_dr_6_rd_err_; }





  uint8_t &fm_dr_7_rd_err() { return fm_dr_7_rd_err_; }





  uint8_t &tbus_flush_done() { return tbus_flush_done_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (host_overflow_ & 0x1);
    *data |= ((tx_dr_0_empty_ & 0x1) << 1);
    *data |= ((tx_dr_1_empty_ & 0x1) << 2);
    *data |= ((tx_dr_2_empty_ & 0x1) << 3);
    *data |= ((tx_dr_3_empty_ & 0x1) << 4);
    *data |= ((tx_dr_0_full_ & 0x1) << 5);
    *data |= ((tx_dr_1_full_ & 0x1) << 6);
    *data |= ((tx_dr_2_full_ & 0x1) << 7);
    *data |= ((tx_dr_3_full_ & 0x1) << 8);
    *data |= ((cpl_dr_0_empty_ & 0x1) << 9);
    *data |= ((cpl_dr_1_empty_ & 0x1) << 10);
    *data |= ((cpl_dr_2_empty_ & 0x1) << 11);
    *data |= ((cpl_dr_3_empty_ & 0x1) << 12);
    *data |= ((cpl_dr_0_full_ & 0x1) << 13);
    *data |= ((cpl_dr_1_full_ & 0x1) << 14);
    *data |= ((cpl_dr_2_full_ & 0x1) << 15);
    *data |= ((cpl_dr_3_full_ & 0x1) << 16);
    *data |= ((tx_dr_0_rd_err_ & 0x1) << 17);
    *data |= ((tx_dr_1_rd_err_ & 0x1) << 18);
    *data |= ((tx_dr_2_rd_err_ & 0x1) << 19);
    *data |= ((tx_dr_3_rd_err_ & 0x1) << 20);
    *data |= ((fm_dr_0_rd_err_ & 0x1) << 21);
    *data |= ((fm_dr_1_rd_err_ & 0x1) << 22);
    *data |= ((fm_dr_2_rd_err_ & 0x1) << 23);
    *data |= ((fm_dr_3_rd_err_ & 0x1) << 24);
    *data |= ((fm_dr_4_rd_err_ & 0x1) << 25);
    *data |= ((fm_dr_5_rd_err_ & 0x1) << 26);
    *data |= ((fm_dr_6_rd_err_ & 0x1) << 27);
    *data |= ((fm_dr_7_rd_err_ & 0x1) << 28);
    *data |= ((tbus_flush_done_ & 0x1) << 29);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    host_overflow_ &= ~(data & 0x1);
    tx_dr_0_empty_ &= ~((data >> 1) & 0x1);
    tx_dr_1_empty_ &= ~((data >> 2) & 0x1);
    tx_dr_2_empty_ &= ~((data >> 3) & 0x1);
    tx_dr_3_empty_ &= ~((data >> 4) & 0x1);
    tx_dr_0_full_ &= ~((data >> 5) & 0x1);
    tx_dr_1_full_ &= ~((data >> 6) & 0x1);
    tx_dr_2_full_ &= ~((data >> 7) & 0x1);
    tx_dr_3_full_ &= ~((data >> 8) & 0x1);
    cpl_dr_0_empty_ &= ~((data >> 9) & 0x1);
    cpl_dr_1_empty_ &= ~((data >> 10) & 0x1);
    cpl_dr_2_empty_ &= ~((data >> 11) & 0x1);
    cpl_dr_3_empty_ &= ~((data >> 12) & 0x1);
    cpl_dr_0_full_ &= ~((data >> 13) & 0x1);
    cpl_dr_1_full_ &= ~((data >> 14) & 0x1);
    cpl_dr_2_full_ &= ~((data >> 15) & 0x1);
    cpl_dr_3_full_ &= ~((data >> 16) & 0x1);
    tx_dr_0_rd_err_ &= ~((data >> 17) & 0x1);
    tx_dr_1_rd_err_ &= ~((data >> 18) & 0x1);
    tx_dr_2_rd_err_ &= ~((data >> 19) & 0x1);
    tx_dr_3_rd_err_ &= ~((data >> 20) & 0x1);
    fm_dr_0_rd_err_ &= ~((data >> 21) & 0x1);
    fm_dr_1_rd_err_ &= ~((data >> 22) & 0x1);
    fm_dr_2_rd_err_ &= ~((data >> 23) & 0x1);
    fm_dr_3_rd_err_ &= ~((data >> 24) & 0x1);
    fm_dr_4_rd_err_ &= ~((data >> 25) & 0x1);
    fm_dr_5_rd_err_ &= ~((data >> 26) & 0x1);
    fm_dr_6_rd_err_ &= ~((data >> 27) & 0x1);
    fm_dr_7_rd_err_ &= ~((data >> 28) & 0x1);
    tbus_flush_done_ &= ~((data >> 29) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    host_overflow_ = 0x0;
    tx_dr_0_empty_ = 0x0;
    tx_dr_1_empty_ = 0x0;
    tx_dr_2_empty_ = 0x0;
    tx_dr_3_empty_ = 0x0;
    tx_dr_0_full_ = 0x0;
    tx_dr_1_full_ = 0x0;
    tx_dr_2_full_ = 0x0;
    tx_dr_3_full_ = 0x0;
    cpl_dr_0_empty_ = 0x0;
    cpl_dr_1_empty_ = 0x0;
    cpl_dr_2_empty_ = 0x0;
    cpl_dr_3_empty_ = 0x0;
    cpl_dr_0_full_ = 0x0;
    cpl_dr_1_full_ = 0x0;
    cpl_dr_2_full_ = 0x0;
    cpl_dr_3_full_ = 0x0;
    tx_dr_0_rd_err_ = 0x0;
    tx_dr_1_rd_err_ = 0x0;
    tx_dr_2_rd_err_ = 0x0;
    tx_dr_3_rd_err_ = 0x0;
    fm_dr_0_rd_err_ = 0x0;
    fm_dr_1_rd_err_ = 0x0;
    fm_dr_2_rd_err_ = 0x0;
    fm_dr_3_rd_err_ = 0x0;
    fm_dr_4_rd_err_ = 0x0;
    fm_dr_5_rd_err_ = 0x0;
    fm_dr_6_rd_err_ = 0x0;
    fm_dr_7_rd_err_ = 0x0;
    tbus_flush_done_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TbusIntStat0") + ":\n";
    r += indent_string + "  " + std::string("host_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(host_overflow_) ) + "\n";
    all_zeros &= (0 == host_overflow_);
    r += indent_string + "  " + std::string("tx_dr_0_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_0_empty_) ) + "\n";
    all_zeros &= (0 == tx_dr_0_empty_);
    r += indent_string + "  " + std::string("tx_dr_1_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_1_empty_) ) + "\n";
    all_zeros &= (0 == tx_dr_1_empty_);
    r += indent_string + "  " + std::string("tx_dr_2_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_2_empty_) ) + "\n";
    all_zeros &= (0 == tx_dr_2_empty_);
    r += indent_string + "  " + std::string("tx_dr_3_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_3_empty_) ) + "\n";
    all_zeros &= (0 == tx_dr_3_empty_);
    r += indent_string + "  " + std::string("tx_dr_0_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_0_full_) ) + "\n";
    all_zeros &= (0 == tx_dr_0_full_);
    r += indent_string + "  " + std::string("tx_dr_1_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_1_full_) ) + "\n";
    all_zeros &= (0 == tx_dr_1_full_);
    r += indent_string + "  " + std::string("tx_dr_2_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_2_full_) ) + "\n";
    all_zeros &= (0 == tx_dr_2_full_);
    r += indent_string + "  " + std::string("tx_dr_3_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_3_full_) ) + "\n";
    all_zeros &= (0 == tx_dr_3_full_);
    r += indent_string + "  " + std::string("cpl_dr_0_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpl_dr_0_empty_) ) + "\n";
    all_zeros &= (0 == cpl_dr_0_empty_);
    r += indent_string + "  " + std::string("cpl_dr_1_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpl_dr_1_empty_) ) + "\n";
    all_zeros &= (0 == cpl_dr_1_empty_);
    r += indent_string + "  " + std::string("cpl_dr_2_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpl_dr_2_empty_) ) + "\n";
    all_zeros &= (0 == cpl_dr_2_empty_);
    r += indent_string + "  " + std::string("cpl_dr_3_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpl_dr_3_empty_) ) + "\n";
    all_zeros &= (0 == cpl_dr_3_empty_);
    r += indent_string + "  " + std::string("cpl_dr_0_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpl_dr_0_full_) ) + "\n";
    all_zeros &= (0 == cpl_dr_0_full_);
    r += indent_string + "  " + std::string("cpl_dr_1_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpl_dr_1_full_) ) + "\n";
    all_zeros &= (0 == cpl_dr_1_full_);
    r += indent_string + "  " + std::string("cpl_dr_2_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpl_dr_2_full_) ) + "\n";
    all_zeros &= (0 == cpl_dr_2_full_);
    r += indent_string + "  " + std::string("cpl_dr_3_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpl_dr_3_full_) ) + "\n";
    all_zeros &= (0 == cpl_dr_3_full_);
    r += indent_string + "  " + std::string("tx_dr_0_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_0_rd_err_) ) + "\n";
    all_zeros &= (0 == tx_dr_0_rd_err_);
    r += indent_string + "  " + std::string("tx_dr_1_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_1_rd_err_) ) + "\n";
    all_zeros &= (0 == tx_dr_1_rd_err_);
    r += indent_string + "  " + std::string("tx_dr_2_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_2_rd_err_) ) + "\n";
    all_zeros &= (0 == tx_dr_2_rd_err_);
    r += indent_string + "  " + std::string("tx_dr_3_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_3_rd_err_) ) + "\n";
    all_zeros &= (0 == tx_dr_3_rd_err_);
    r += indent_string + "  " + std::string("fm_dr_0_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_0_rd_err_) ) + "\n";
    all_zeros &= (0 == fm_dr_0_rd_err_);
    r += indent_string + "  " + std::string("fm_dr_1_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_1_rd_err_) ) + "\n";
    all_zeros &= (0 == fm_dr_1_rd_err_);
    r += indent_string + "  " + std::string("fm_dr_2_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_2_rd_err_) ) + "\n";
    all_zeros &= (0 == fm_dr_2_rd_err_);
    r += indent_string + "  " + std::string("fm_dr_3_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_3_rd_err_) ) + "\n";
    all_zeros &= (0 == fm_dr_3_rd_err_);
    r += indent_string + "  " + std::string("fm_dr_4_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_4_rd_err_) ) + "\n";
    all_zeros &= (0 == fm_dr_4_rd_err_);
    r += indent_string + "  " + std::string("fm_dr_5_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_5_rd_err_) ) + "\n";
    all_zeros &= (0 == fm_dr_5_rd_err_);
    r += indent_string + "  " + std::string("fm_dr_6_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_6_rd_err_) ) + "\n";
    all_zeros &= (0 == fm_dr_6_rd_err_);
    r += indent_string + "  " + std::string("fm_dr_7_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_7_rd_err_) ) + "\n";
    all_zeros &= (0 == fm_dr_7_rd_err_);
    r += indent_string + "  " + std::string("tbus_flush_done") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tbus_flush_done_) ) + "\n";
    all_zeros &= (0 == tbus_flush_done_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TbusIntStat0") + ":\n";
    r += indent_string + "  " + std::string("host_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(host_overflow_) ) + "\n";
    all_zeros &= (0 == host_overflow_);
    r += indent_string + "  " + std::string("tx_dr_0_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_0_empty_) ) + "\n";
    all_zeros &= (0 == tx_dr_0_empty_);
    r += indent_string + "  " + std::string("tx_dr_1_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_1_empty_) ) + "\n";
    all_zeros &= (0 == tx_dr_1_empty_);
    r += indent_string + "  " + std::string("tx_dr_2_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_2_empty_) ) + "\n";
    all_zeros &= (0 == tx_dr_2_empty_);
    r += indent_string + "  " + std::string("tx_dr_3_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_3_empty_) ) + "\n";
    all_zeros &= (0 == tx_dr_3_empty_);
    r += indent_string + "  " + std::string("tx_dr_0_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_0_full_) ) + "\n";
    all_zeros &= (0 == tx_dr_0_full_);
    r += indent_string + "  " + std::string("tx_dr_1_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_1_full_) ) + "\n";
    all_zeros &= (0 == tx_dr_1_full_);
    r += indent_string + "  " + std::string("tx_dr_2_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_2_full_) ) + "\n";
    all_zeros &= (0 == tx_dr_2_full_);
    r += indent_string + "  " + std::string("tx_dr_3_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_3_full_) ) + "\n";
    all_zeros &= (0 == tx_dr_3_full_);
    r += indent_string + "  " + std::string("cpl_dr_0_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpl_dr_0_empty_) ) + "\n";
    all_zeros &= (0 == cpl_dr_0_empty_);
    r += indent_string + "  " + std::string("cpl_dr_1_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpl_dr_1_empty_) ) + "\n";
    all_zeros &= (0 == cpl_dr_1_empty_);
    r += indent_string + "  " + std::string("cpl_dr_2_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpl_dr_2_empty_) ) + "\n";
    all_zeros &= (0 == cpl_dr_2_empty_);
    r += indent_string + "  " + std::string("cpl_dr_3_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpl_dr_3_empty_) ) + "\n";
    all_zeros &= (0 == cpl_dr_3_empty_);
    r += indent_string + "  " + std::string("cpl_dr_0_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpl_dr_0_full_) ) + "\n";
    all_zeros &= (0 == cpl_dr_0_full_);
    r += indent_string + "  " + std::string("cpl_dr_1_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpl_dr_1_full_) ) + "\n";
    all_zeros &= (0 == cpl_dr_1_full_);
    r += indent_string + "  " + std::string("cpl_dr_2_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpl_dr_2_full_) ) + "\n";
    all_zeros &= (0 == cpl_dr_2_full_);
    r += indent_string + "  " + std::string("cpl_dr_3_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpl_dr_3_full_) ) + "\n";
    all_zeros &= (0 == cpl_dr_3_full_);
    r += indent_string + "  " + std::string("tx_dr_0_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_0_rd_err_) ) + "\n";
    all_zeros &= (0 == tx_dr_0_rd_err_);
    r += indent_string + "  " + std::string("tx_dr_1_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_1_rd_err_) ) + "\n";
    all_zeros &= (0 == tx_dr_1_rd_err_);
    r += indent_string + "  " + std::string("tx_dr_2_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_2_rd_err_) ) + "\n";
    all_zeros &= (0 == tx_dr_2_rd_err_);
    r += indent_string + "  " + std::string("tx_dr_3_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_dr_3_rd_err_) ) + "\n";
    all_zeros &= (0 == tx_dr_3_rd_err_);
    r += indent_string + "  " + std::string("fm_dr_0_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_0_rd_err_) ) + "\n";
    all_zeros &= (0 == fm_dr_0_rd_err_);
    r += indent_string + "  " + std::string("fm_dr_1_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_1_rd_err_) ) + "\n";
    all_zeros &= (0 == fm_dr_1_rd_err_);
    r += indent_string + "  " + std::string("fm_dr_2_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_2_rd_err_) ) + "\n";
    all_zeros &= (0 == fm_dr_2_rd_err_);
    r += indent_string + "  " + std::string("fm_dr_3_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_3_rd_err_) ) + "\n";
    all_zeros &= (0 == fm_dr_3_rd_err_);
    r += indent_string + "  " + std::string("fm_dr_4_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_4_rd_err_) ) + "\n";
    all_zeros &= (0 == fm_dr_4_rd_err_);
    r += indent_string + "  " + std::string("fm_dr_5_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_5_rd_err_) ) + "\n";
    all_zeros &= (0 == fm_dr_5_rd_err_);
    r += indent_string + "  " + std::string("fm_dr_6_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_6_rd_err_) ) + "\n";
    all_zeros &= (0 == fm_dr_6_rd_err_);
    r += indent_string + "  " + std::string("fm_dr_7_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_7_rd_err_) ) + "\n";
    all_zeros &= (0 == fm_dr_7_rd_err_);
    r += indent_string + "  " + std::string("tbus_flush_done") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tbus_flush_done_) ) + "\n";
    all_zeros &= (0 == tbus_flush_done_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t host_overflow_;
  uint8_t tx_dr_0_empty_;
  uint8_t tx_dr_1_empty_;
  uint8_t tx_dr_2_empty_;
  uint8_t tx_dr_3_empty_;
  uint8_t tx_dr_0_full_;
  uint8_t tx_dr_1_full_;
  uint8_t tx_dr_2_full_;
  uint8_t tx_dr_3_full_;
  uint8_t cpl_dr_0_empty_;
  uint8_t cpl_dr_1_empty_;
  uint8_t cpl_dr_2_empty_;
  uint8_t cpl_dr_3_empty_;
  uint8_t cpl_dr_0_full_;
  uint8_t cpl_dr_1_full_;
  uint8_t cpl_dr_2_full_;
  uint8_t cpl_dr_3_full_;
  uint8_t tx_dr_0_rd_err_;
  uint8_t tx_dr_1_rd_err_;
  uint8_t tx_dr_2_rd_err_;
  uint8_t tx_dr_3_rd_err_;
  uint8_t fm_dr_0_rd_err_;
  uint8_t fm_dr_1_rd_err_;
  uint8_t fm_dr_2_rd_err_;
  uint8_t fm_dr_3_rd_err_;
  uint8_t fm_dr_4_rd_err_;
  uint8_t fm_dr_5_rd_err_;
  uint8_t fm_dr_6_rd_err_;
  uint8_t fm_dr_7_rd_err_;
  uint8_t tbus_flush_done_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x300000; // to get to tbc
    offset += 0x20; // to get to intr_stat0
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_TBUS_INT_STAT0_H__
