/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_CAA_TOP_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_TM_CAA_TOP_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "caa_ba_blocks_freecnt_r_mutable.h"
#include "caa_bank_ctrl_r_mutable.h"
#include "caa_block_enable_r_mutable.h"
#include "caa_block_g_mutable.h"
#include "caa_block_linkmem_r_mutable.h"
#include "caa_block_ready_r_mutable.h"
#include "caa_block_reset_r_mutable.h"
#include "caa_block_valid_r_mutable.h"
#include "caa_cdm_org_r_mutable.h"
#include "caa_ctrl_r_mutable.h"
#include "caa_epipe_g_mutable.h"
#include "caa_fa_almost_full_threshold_r_mutable.h"
#include "caa_fa_full_threshold_r_mutable.h"
#include "caa_fa_hyst_threshold_r_mutable.h"
#include "caa_indir_access_addr_r_mutable.h"
#include "tm_caa_cdm_rspec_mutable.h"
#include "tm_caa_top_rspec_debug_bus_ctrl_mutable.h"
#include "tm_caa_top_rspec_ecc_mutable.h"
#include "tm_caa_top_rspec_intr_mutable.h"
#include "tm_caa_top_rspec_linkmem_mbe_err_log_mutable.h"
#include "tm_caa_top_rspec_linkmem_sbe_err_log_mutable.h"
#include "tm_caa_top_rspec_overflow_err_log_mutable.h"
#include "tm_caa_top_rspec_underflow_err_log_mutable.h"

namespace jbay {
  namespace register_classes {

class TmCaaTopRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmCaaTopRspecMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 524288, true, write_callback, read_callback, std::string("TmCaaTopRspecMutable"))
    {
    }
  TmCaaTopRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "TmCaaTopRspecMutable")
    {
    }
public:






  CaaCdmOrgRMutable &cdm_org() { return cdm_org_; }






  CaaCtrlRMutable &ctrl() { return ctrl_; }








  CaaFaFullThresholdRMutable &full_threshold() { return full_threshold_; }








  CaaFaHystThresholdRMutable &hyst_threshold() { return hyst_threshold_; }









  CaaFaAlmostFullThresholdRMutable &almost_full_threshold() { return almost_full_threshold_; }






  CaaBlockValidRMutable &block_valid() { return block_valid_; }






  CaaBlockResetRMutable &block_reset() { return block_reset_; }






  CaaBlockEnableRMutable &block_enable() { return block_enable_; }






  CaaBlockReadyRMutable &block_ready() { return block_ready_; }







  CaaBaBlocksFreecntRMutable &blocks_freecnt() { return blocks_freecnt_; }









  CaaBankCtrlRMutable &caa_bank_ctr(int j0) { return caa_bank_ctr_[j0]; }








  CaaIndirAccessAddrRMutable &lmem_indir_access_addr() { return lmem_indir_access_addr_; }











  CaaBlockLinkmemRMutable &lmem_indir_access_data() { return lmem_indir_access_data_; }








  TmCaaTopRspecEccMutable &ecc() { return ecc_; }





  TmCaaTopRspecLinkmemSbeErrLogMutable &linkmem_sbe_err_log() { return linkmem_sbe_err_log_; }





  TmCaaTopRspecLinkmemMbeErrLogMutable &linkmem_mbe_err_log() { return linkmem_mbe_err_log_; }





  TmCaaTopRspecOverflowErrLogMutable &overflow_err_log() { return overflow_err_log_; }





  TmCaaTopRspecUnderflowErrLogMutable &underflow_err_log() { return underflow_err_log_; }





  TmCaaTopRspecDebugBusCtrlMutable &debug_bus_ctrl() { return debug_bus_ctrl_; }





  TmCaaCdmRspecMutable &cdm_lo() { return cdm_lo_; }





  TmCaaCdmRspecMutable &cdm_hi() { return cdm_hi_; }








  CaaEpipeGMutable &epipe(int j0) { return epipe_[j0]; }







  CaaBlockGMutable &block(int j0) { return block_[j0]; }
  TmCaaTopRspecIntrMutable &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      cdm_org_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      ctrl_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      full_threshold_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      hyst_threshold_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      almost_full_threshold_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x218) {
      offset -= 0x200;
      if (read_callback_) read_callback_();
      block_valid_.read( offset, data );
    }
    else if (offset >= 0x220 && offset < 0x238) {
      offset -= 0x220;
      if (read_callback_) read_callback_();
      block_reset_.read( offset, data );
    }
    else if (offset >= 0x240 && offset < 0x258) {
      offset -= 0x240;
      if (read_callback_) read_callback_();
      block_enable_.read( offset, data );
    }
    else if (offset >= 0x260 && offset < 0x278) {
      offset -= 0x260;
      if (read_callback_) read_callback_();
      block_ready_.read( offset, data );
    }
    else if (offset >= 0x278 && offset < 0x27c) {
      offset -= 0x278;
      if (read_callback_) read_callback_();
      blocks_freecnt_.read( offset, data );
    }
    else if (offset >= 0x3000 && offset < 0x3600) {
      offset -= 0x3000;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      caa_bank_ctr_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3600 && offset < 0x3604) {
      offset -= 0x3600;
      if (read_callback_) read_callback_();
      lmem_indir_access_addr_.read( offset, data );
    }
    else if (offset >= 0x3604 && offset < 0x3608) {
      offset -= 0x3604;
      if (read_callback_) read_callback_();
      lmem_indir_access_data_.read( offset, data );
    }
    else if (offset >= 0x3680 && offset < 0x36e0) {
      offset -= 0x3680;
      if (read_callback_) read_callback_();
      ecc_.read( offset, data );
    }
    else if (offset >= 0x36f4 && offset < 0x36f8) {
      offset -= 0x36f4;
      if (read_callback_) read_callback_();
      linkmem_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x36f8 && offset < 0x36fc) {
      offset -= 0x36f8;
      if (read_callback_) read_callback_();
      linkmem_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x36fc && offset < 0x3700) {
      offset -= 0x36fc;
      if (read_callback_) read_callback_();
      overflow_err_log_.read( offset, data );
    }
    else if (offset >= 0x3700 && offset < 0x3704) {
      offset -= 0x3700;
      if (read_callback_) read_callback_();
      underflow_err_log_.read( offset, data );
    }
    else if (offset >= 0x3704 && offset < 0x3708) {
      offset -= 0x3704;
      if (read_callback_) read_callback_();
      debug_bus_ctrl_.read( offset, data );
    }
    else if (offset >= 0x20000 && offset < 0x28000) {
      offset -= 0x20000;
      if (read_callback_) read_callback_();
      cdm_lo_.read( offset, data );
    }
    else if (offset >= 0x28000 && offset < 0x30000) {
      offset -= 0x28000;
      if (read_callback_) read_callback_();
      cdm_hi_.read( offset, data );
    }
    else if (offset >= 0x1000 && offset < 0x1180) {
      offset -= 0x1000;
      int i0 = offset / 0x18;
      offset  -= i0 * 0x18;
      if (read_callback_) read_callback_();
      epipe_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x2000 && offset < 0x2900) {
      offset -= 0x2000;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      if (read_callback_) read_callback_();
      block_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x36e0 && offset < 0x36f4) {
      offset -= 0x36e0;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      cdm_org_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      full_threshold_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      hyst_threshold_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      almost_full_threshold_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x218) {
      offset -= 0x200;
      block_valid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x220 && offset < 0x238) {
      offset -= 0x220;
      block_reset_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x240 && offset < 0x258) {
      offset -= 0x240;
      block_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x260 && offset < 0x278) {
      offset -= 0x260;
      block_ready_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x278 && offset < 0x27c) {
      offset -= 0x278;
      blocks_freecnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3000 && offset < 0x3600) {
      offset -= 0x3000;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      caa_bank_ctr_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3600 && offset < 0x3604) {
      offset -= 0x3600;
      lmem_indir_access_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3604 && offset < 0x3608) {
      offset -= 0x3604;
      lmem_indir_access_data_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3680 && offset < 0x36e0) {
      offset -= 0x3680;
      ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x36f4 && offset < 0x36f8) {
      offset -= 0x36f4;
      linkmem_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x36f8 && offset < 0x36fc) {
      offset -= 0x36f8;
      linkmem_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x36fc && offset < 0x3700) {
      offset -= 0x36fc;
      overflow_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3700 && offset < 0x3704) {
      offset -= 0x3700;
      underflow_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3704 && offset < 0x3708) {
      offset -= 0x3704;
      debug_bus_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20000 && offset < 0x28000) {
      offset -= 0x20000;
      cdm_lo_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28000 && offset < 0x30000) {
      offset -= 0x28000;
      cdm_hi_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1000 && offset < 0x1180) {
      offset -= 0x1000;
      int i0 = offset / 0x18;
      offset  -= i0 * 0x18;
      epipe_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2000 && offset < 0x2900) {
      offset -= 0x2000;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      block_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x36e0 && offset < 0x36f4) {
      offset -= 0x36e0;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    cdm_org_.reset();
    ctrl_.reset();
    full_threshold_.reset();
    hyst_threshold_.reset();
    almost_full_threshold_.reset();
    block_valid_.reset();
    block_reset_.reset();
    block_enable_.reset();
    block_ready_.reset();
    blocks_freecnt_.reset();
    for (auto &f0 : caa_bank_ctr_) {
      f0.reset();
    }
    lmem_indir_access_addr_.reset();
    lmem_indir_access_data_.reset();
    ecc_.reset();
    linkmem_sbe_err_log_.reset();
    linkmem_mbe_err_log_.reset();
    overflow_err_log_.reset();
    underflow_err_log_.reset();
    debug_bus_ctrl_.reset();
    cdm_lo_.reset();
    cdm_hi_.reset();
    for (auto &f0 : epipe_) {
      f0.reset();
    }
    for (auto &f0 : block_) {
      f0.reset();
    }
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += cdm_org_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += full_threshold_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += hyst_threshold_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += almost_full_threshold_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x218) {
      offset -= 0x200;
      r += block_valid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x220 && offset < 0x238) {
      offset -= 0x220;
      r += block_reset_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x240 && offset < 0x258) {
      offset -= 0x240;
      r += block_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x260 && offset < 0x278) {
      offset -= 0x260;
      r += block_ready_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x278 && offset < 0x27c) {
      offset -= 0x278;
      r += blocks_freecnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3000 && offset < 0x3600) {
      offset -= 0x3000;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += caa_bank_ctr_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3600 && offset < 0x3604) {
      offset -= 0x3600;
      r += lmem_indir_access_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3604 && offset < 0x3608) {
      offset -= 0x3604;
      r += lmem_indir_access_data_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3680 && offset < 0x36e0) {
      offset -= 0x3680;
      r += ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x36f4 && offset < 0x36f8) {
      offset -= 0x36f4;
      r += linkmem_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x36f8 && offset < 0x36fc) {
      offset -= 0x36f8;
      r += linkmem_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x36fc && offset < 0x3700) {
      offset -= 0x36fc;
      r += overflow_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3700 && offset < 0x3704) {
      offset -= 0x3700;
      r += underflow_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3704 && offset < 0x3708) {
      offset -= 0x3704;
      r += debug_bus_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20000 && offset < 0x28000) {
      offset -= 0x20000;
      r += cdm_lo_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28000 && offset < 0x30000) {
      offset -= 0x28000;
      r += cdm_hi_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1000 && offset < 0x1180) {
      offset -= 0x1000;
      int i0 = offset / 0x18;
      offset  -= i0 * 0x18;
      r += epipe_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2000 && offset < 0x2900) {
      offset -= 0x2000;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      r += block_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x36e0 && offset < 0x36f4) {
      offset -= 0x36e0;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += cdm_org_.to_string(print_zeros,indent_string) ;
    r += ctrl_.to_string(print_zeros,indent_string) ;
    r += full_threshold_.to_string(print_zeros,indent_string) ;
    r += hyst_threshold_.to_string(print_zeros,indent_string) ;
    r += almost_full_threshold_.to_string(print_zeros,indent_string) ;
    r += block_valid_.to_string(print_zeros,indent_string) ;
    r += block_reset_.to_string(print_zeros,indent_string) ;
    r += block_enable_.to_string(print_zeros,indent_string) ;
    r += block_ready_.to_string(print_zeros,indent_string) ;
    r += blocks_freecnt_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<384;++a0) {
      r += caa_bank_ctr_[a0].to_string(print_zeros,indent_string) ;
    }
    r += lmem_indir_access_addr_.to_string(print_zeros,indent_string) ;
    r += lmem_indir_access_data_.to_string(print_zeros,indent_string) ;
    r += ecc_.to_string(print_zeros,indent_string) ;
    r += linkmem_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += linkmem_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += overflow_err_log_.to_string(print_zeros,indent_string) ;
    r += underflow_err_log_.to_string(print_zeros,indent_string) ;
    r += debug_bus_ctrl_.to_string(print_zeros,indent_string) ;
    r += cdm_lo_.to_string(print_zeros,indent_string) ;
    r += cdm_hi_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<16;++a0) {
      r += epipe_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<192;++a0) {
      r += block_[a0].to_string(print_zeros,indent_string) ;
    }
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  CaaCdmOrgRMutable cdm_org_;
  CaaCtrlRMutable ctrl_;
  CaaFaFullThresholdRMutable full_threshold_;
  CaaFaHystThresholdRMutable hyst_threshold_;
  CaaFaAlmostFullThresholdRMutable almost_full_threshold_;
  CaaBlockValidRMutable block_valid_;
  CaaBlockResetRMutable block_reset_;
  CaaBlockEnableRMutable block_enable_;
  CaaBlockReadyRMutable block_ready_;
  CaaBaBlocksFreecntRMutable blocks_freecnt_;
  std::array< CaaBankCtrlRMutable, 384 > caa_bank_ctr_;
  CaaIndirAccessAddrRMutable lmem_indir_access_addr_;
  CaaBlockLinkmemRMutable lmem_indir_access_data_;
  TmCaaTopRspecEccMutable ecc_;
  TmCaaTopRspecLinkmemSbeErrLogMutable linkmem_sbe_err_log_;
  TmCaaTopRspecLinkmemMbeErrLogMutable linkmem_mbe_err_log_;
  TmCaaTopRspecOverflowErrLogMutable overflow_err_log_;
  TmCaaTopRspecUnderflowErrLogMutable underflow_err_log_;
  TmCaaTopRspecDebugBusCtrlMutable debug_bus_ctrl_;
  TmCaaCdmRspecMutable cdm_lo_;
  TmCaaCdmRspecMutable cdm_hi_;
  std::array< CaaEpipeGMutable, 16 > epipe_;
  std::array< CaaBlockGMutable, 192 > block_;
  TmCaaTopRspecIntrMutable intr_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    offset += 0x80000; // to get to tm_caa_top
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_TM_CAA_TOP_RSPEC_MUTABLE_H__
