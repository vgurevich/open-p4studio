/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_CLC_COMMON_RSPEC_H__
#define __REGISTER_INCLUDES_TM_CLC_COMMON_RSPEC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "qclc_ct_tot.h"
#include "qclc_pt_ct_cnt.h"
#include "qclc_pt_tot_cnt.h"
#include "qclc_top_ctrl.h"

namespace jbay {
  namespace register_classes {

class TmClcCommonRspec : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmClcCommonRspec(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 16384, false, write_callback, read_callback, std::string("TmClcCommonRspec"))
    {
    }
  TmClcCommonRspec(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "TmClcCommonRspec")
    {
    }
public:





  QclcTopCtrl &top_ctrl() { return top_ctrl_; }





  QclcCtTot &tot_th() { return tot_th_; }







  QclcPtCtCnt &qclc_pt_ct_cnt_pipe0(int j0) { return qclc_pt_ct_cnt_pipe0_[j0]; }







  QclcPtCtCnt &qclc_pt_ct_cnt_pipe1(int j0) { return qclc_pt_ct_cnt_pipe1_[j0]; }







  QclcPtCtCnt &qclc_pt_ct_cnt_pipe2(int j0) { return qclc_pt_ct_cnt_pipe2_[j0]; }







  QclcPtCtCnt &qclc_pt_ct_cnt_pipe3(int j0) { return qclc_pt_ct_cnt_pipe3_[j0]; }





  QclcPtTotCnt &ct_tot_cnt() { return ct_tot_cnt_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      top_ctrl_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      tot_th_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qclc_pt_ct_cnt_pipe0_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x148) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qclc_pt_ct_cnt_pipe1_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x1c8) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qclc_pt_ct_cnt_pipe2_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x248) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qclc_pt_ct_cnt_pipe3_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x248 && offset < 0x24c) {
      offset -= 0x248;
      if (read_callback_) read_callback_();
      ct_tot_cnt_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      top_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      tot_th_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qclc_pt_ct_cnt_pipe0_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x148) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qclc_pt_ct_cnt_pipe1_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x1c8) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qclc_pt_ct_cnt_pipe2_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x248) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qclc_pt_ct_cnt_pipe3_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x248 && offset < 0x24c) {
      offset -= 0x248;
      ct_tot_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    top_ctrl_.reset();
    tot_th_.reset();
    for (auto &f0 : qclc_pt_ct_cnt_pipe0_) {
      f0.reset();
    }
    for (auto &f0 : qclc_pt_ct_cnt_pipe1_) {
      f0.reset();
    }
    for (auto &f0 : qclc_pt_ct_cnt_pipe2_) {
      f0.reset();
    }
    for (auto &f0 : qclc_pt_ct_cnt_pipe3_) {
      f0.reset();
    }
    ct_tot_cnt_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += top_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += tot_th_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qclc_pt_ct_cnt_pipe0_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x148) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qclc_pt_ct_cnt_pipe1_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x1c8) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qclc_pt_ct_cnt_pipe2_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x248) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qclc_pt_ct_cnt_pipe3_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x248 && offset < 0x24c) {
      offset -= 0x248;
      r += ct_tot_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += top_ctrl_.to_string(print_zeros,indent_string) ;
    r += tot_th_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<18;++a0) {
      r += qclc_pt_ct_cnt_pipe0_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<18;++a0) {
      r += qclc_pt_ct_cnt_pipe1_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<18;++a0) {
      r += qclc_pt_ct_cnt_pipe2_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<18;++a0) {
      r += qclc_pt_ct_cnt_pipe3_[a0].to_string(print_zeros,indent_string) ;
    }
    r += ct_tot_cnt_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  QclcTopCtrl top_ctrl_;
  QclcCtTot tot_th_;
  std::array< QclcPtCtCnt, 18 > qclc_pt_ct_cnt_pipe0_;
  std::array< QclcPtCtCnt, 18 > qclc_pt_ct_cnt_pipe1_;
  std::array< QclcPtCtCnt, 18 > qclc_pt_ct_cnt_pipe2_;
  std::array< QclcPtCtCnt, 18 > qclc_pt_ct_cnt_pipe3_;
  QclcPtTotCnt ct_tot_cnt_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    offset += 0x280000; // to get to tm_clc_top
    offset += 0x20000; // to get to clc_common
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_TM_CLC_COMMON_RSPEC_H__
