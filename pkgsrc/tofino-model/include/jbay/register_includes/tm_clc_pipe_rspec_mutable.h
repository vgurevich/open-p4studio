/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_CLC_PIPE_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_TM_CLC_PIPE_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "clc_debug_reg_mutable.h"
#include "port_ct_state_mutable.h"
#include "qclc_fifo_threshold_mutable.h"
#include "qclc_pipe_ctrl_mutable.h"
#include "qclc_pt_spd_mutable.h"
#include "tm_clc_pipe_rspec_clc_qac_merr_log_mutable.h"
#include "tm_clc_pipe_rspec_clc_qac_serr_log_mutable.h"
#include "tm_clc_pipe_rspec_debug_bus_ctrl_mutable.h"
#include "tm_clc_pipe_rspec_ecc_mutable.h"
#include "tm_clc_pipe_rspec_enfifo_merr_ep0_log_mutable.h"
#include "tm_clc_pipe_rspec_enfifo_merr_ep1_log_mutable.h"
#include "tm_clc_pipe_rspec_enfifo_merr_ep2_log_mutable.h"
#include "tm_clc_pipe_rspec_enfifo_merr_ep3_log_mutable.h"
#include "tm_clc_pipe_rspec_enfifo_serr_ep0_log_mutable.h"
#include "tm_clc_pipe_rspec_enfifo_serr_ep1_log_mutable.h"
#include "tm_clc_pipe_rspec_enfifo_serr_ep2_log_mutable.h"
#include "tm_clc_pipe_rspec_enfifo_serr_ep3_log_mutable.h"
#include "tm_clc_pipe_rspec_intr_mutable.h"
#include "tm_clc_pipe_rspec_mc_ct_cnt_mutable.h"
#include "tm_clc_pipe_rspec_uc_ct_cnt_mutable.h"

namespace jbay {
  namespace register_classes {

class TmClcPipeRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmClcPipeRspecMutable(
      int chipNumber, int index_tm_clc_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_clc_pipe_rspec), 16384, true, write_callback, read_callback, std::string("TmClcPipeRspecMutable")+":"+boost::lexical_cast<std::string>(index_tm_clc_pipe_rspec))
    {
    }
  TmClcPipeRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "TmClcPipeRspecMutable")
    {
    }
public:





  QclcPipeCtrlMutable &pipe_ctrl() { return pipe_ctrl_; }








  TmClcPipeRspecEccMutable &ecc() { return ecc_; }





  TmClcPipeRspecEnfifoSerrEp0LogMutable &enfifo_serr_ep0_log() { return enfifo_serr_ep0_log_; }





  TmClcPipeRspecEnfifoSerrEp1LogMutable &enfifo_serr_ep1_log() { return enfifo_serr_ep1_log_; }





  TmClcPipeRspecEnfifoSerrEp2LogMutable &enfifo_serr_ep2_log() { return enfifo_serr_ep2_log_; }





  TmClcPipeRspecEnfifoSerrEp3LogMutable &enfifo_serr_ep3_log() { return enfifo_serr_ep3_log_; }





  TmClcPipeRspecEnfifoMerrEp0LogMutable &enfifo_merr_ep0_log() { return enfifo_merr_ep0_log_; }





  TmClcPipeRspecEnfifoMerrEp1LogMutable &enfifo_merr_ep1_log() { return enfifo_merr_ep1_log_; }





  TmClcPipeRspecEnfifoMerrEp2LogMutable &enfifo_merr_ep2_log() { return enfifo_merr_ep2_log_; }





  TmClcPipeRspecEnfifoMerrEp3LogMutable &enfifo_merr_ep3_log() { return enfifo_merr_ep3_log_; }





  TmClcPipeRspecClcQacSerrLogMutable &clc_qac_serr_log() { return clc_qac_serr_log_; }





  TmClcPipeRspecClcQacMerrLogMutable &clc_qac_merr_log() { return clc_qac_merr_log_; }





  QclcFifoThresholdMutable &fifo_threshold() { return fifo_threshold_; }







  QclcPtSpdMutable &qclc_pt_spd(int j0) { return qclc_pt_spd_[j0]; }





  ClcDebugRegMutable &clc_debug_reg() { return clc_debug_reg_; }







  PortCtStateMutable &ingress_port_ct_state(int j0) { return ingress_port_ct_state_[j0]; }







  PortCtStateMutable &egress_port_ct_state(int j0) { return egress_port_ct_state_[j0]; }





  TmClcPipeRspecMcCtCntMutable &mc_ct_cnt() { return mc_ct_cnt_; }





  TmClcPipeRspecUcCtCntMutable &uc_ct_cnt() { return uc_ct_cnt_; }





  TmClcPipeRspecDebugBusCtrlMutable &debug_bus_ctrl() { return debug_bus_ctrl_; }
  TmClcPipeRspecIntrMutable &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      pipe_ctrl_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0x10) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      ecc_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      enfifo_serr_ep0_log_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      enfifo_serr_ep1_log_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      enfifo_serr_ep2_log_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      enfifo_serr_ep3_log_.read( offset, data );
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      if (read_callback_) read_callback_();
      enfifo_merr_ep0_log_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      enfifo_merr_ep1_log_.read( offset, data );
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      if (read_callback_) read_callback_();
      enfifo_merr_ep2_log_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      enfifo_merr_ep3_log_.read( offset, data );
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      if (read_callback_) read_callback_();
      clc_qac_serr_log_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      clc_qac_merr_log_.read( offset, data );
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      if (read_callback_) read_callback_();
      fifo_threshold_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x320) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qclc_pt_spd_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x320 && offset < 0x324) {
      offset -= 0x320;
      if (read_callback_) read_callback_();
      clc_debug_reg_.read( offset, data );
    }
    else if (offset >= 0x330 && offset < 0x33c) {
      offset -= 0x330;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      ingress_port_ct_state_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x340 && offset < 0x34c) {
      offset -= 0x340;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      egress_port_ct_state_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x34c && offset < 0x350) {
      offset -= 0x34c;
      if (read_callback_) read_callback_();
      mc_ct_cnt_.read( offset, data );
    }
    else if (offset >= 0x350 && offset < 0x354) {
      offset -= 0x350;
      if (read_callback_) read_callback_();
      uc_ct_cnt_.read( offset, data );
    }
    else if (offset >= 0x354 && offset < 0x358) {
      offset -= 0x354;
      if (read_callback_) read_callback_();
      debug_bus_ctrl_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      pipe_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0x10) {
      offset -= 0x8;
      ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      enfifo_serr_ep0_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      enfifo_serr_ep1_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      enfifo_serr_ep2_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      enfifo_serr_ep3_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      enfifo_merr_ep0_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      enfifo_merr_ep1_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      enfifo_merr_ep2_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      enfifo_merr_ep3_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      clc_qac_serr_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      clc_qac_merr_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      fifo_threshold_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x320) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qclc_pt_spd_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x320 && offset < 0x324) {
      offset -= 0x320;
      clc_debug_reg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x330 && offset < 0x33c) {
      offset -= 0x330;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      ingress_port_ct_state_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x340 && offset < 0x34c) {
      offset -= 0x340;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      egress_port_ct_state_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34c && offset < 0x350) {
      offset -= 0x34c;
      mc_ct_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x350 && offset < 0x354) {
      offset -= 0x350;
      uc_ct_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x354 && offset < 0x358) {
      offset -= 0x354;
      debug_bus_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    pipe_ctrl_.reset();
    ecc_.reset();
    enfifo_serr_ep0_log_.reset();
    enfifo_serr_ep1_log_.reset();
    enfifo_serr_ep2_log_.reset();
    enfifo_serr_ep3_log_.reset();
    enfifo_merr_ep0_log_.reset();
    enfifo_merr_ep1_log_.reset();
    enfifo_merr_ep2_log_.reset();
    enfifo_merr_ep3_log_.reset();
    clc_qac_serr_log_.reset();
    clc_qac_merr_log_.reset();
    fifo_threshold_.reset();
    for (auto &f0 : qclc_pt_spd_) {
      f0.reset();
    }
    clc_debug_reg_.reset();
    for (auto &f0 : ingress_port_ct_state_) {
      f0.reset();
    }
    for (auto &f0 : egress_port_ct_state_) {
      f0.reset();
    }
    mc_ct_cnt_.reset();
    uc_ct_cnt_.reset();
    debug_bus_ctrl_.reset();
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += pipe_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0x10) {
      offset -= 0x8;
      r += ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += enfifo_serr_ep0_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += enfifo_serr_ep1_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += enfifo_serr_ep2_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      r += enfifo_serr_ep3_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      r += enfifo_merr_ep0_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      r += enfifo_merr_ep1_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      r += enfifo_merr_ep2_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      r += enfifo_merr_ep3_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      r += clc_qac_serr_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      r += clc_qac_merr_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      r += fifo_threshold_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x320) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qclc_pt_spd_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x320 && offset < 0x324) {
      offset -= 0x320;
      r += clc_debug_reg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x330 && offset < 0x33c) {
      offset -= 0x330;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += ingress_port_ct_state_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x340 && offset < 0x34c) {
      offset -= 0x340;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += egress_port_ct_state_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34c && offset < 0x350) {
      offset -= 0x34c;
      r += mc_ct_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x350 && offset < 0x354) {
      offset -= 0x350;
      r += uc_ct_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x354 && offset < 0x358) {
      offset -= 0x354;
      r += debug_bus_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += pipe_ctrl_.to_string(print_zeros,indent_string) ;
    r += ecc_.to_string(print_zeros,indent_string) ;
    r += enfifo_serr_ep0_log_.to_string(print_zeros,indent_string) ;
    r += enfifo_serr_ep1_log_.to_string(print_zeros,indent_string) ;
    r += enfifo_serr_ep2_log_.to_string(print_zeros,indent_string) ;
    r += enfifo_serr_ep3_log_.to_string(print_zeros,indent_string) ;
    r += enfifo_merr_ep0_log_.to_string(print_zeros,indent_string) ;
    r += enfifo_merr_ep1_log_.to_string(print_zeros,indent_string) ;
    r += enfifo_merr_ep2_log_.to_string(print_zeros,indent_string) ;
    r += enfifo_merr_ep3_log_.to_string(print_zeros,indent_string) ;
    r += clc_qac_serr_log_.to_string(print_zeros,indent_string) ;
    r += clc_qac_merr_log_.to_string(print_zeros,indent_string) ;
    r += fifo_threshold_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<72;++a0) {
      r += qclc_pt_spd_[a0].to_string(print_zeros,indent_string) ;
    }
    r += clc_debug_reg_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<3;++a0) {
      r += ingress_port_ct_state_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<3;++a0) {
      r += egress_port_ct_state_[a0].to_string(print_zeros,indent_string) ;
    }
    r += mc_ct_cnt_.to_string(print_zeros,indent_string) ;
    r += uc_ct_cnt_.to_string(print_zeros,indent_string) ;
    r += debug_bus_ctrl_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  QclcPipeCtrlMutable pipe_ctrl_;
  TmClcPipeRspecEccMutable ecc_;
  TmClcPipeRspecEnfifoSerrEp0LogMutable enfifo_serr_ep0_log_;
  TmClcPipeRspecEnfifoSerrEp1LogMutable enfifo_serr_ep1_log_;
  TmClcPipeRspecEnfifoSerrEp2LogMutable enfifo_serr_ep2_log_;
  TmClcPipeRspecEnfifoSerrEp3LogMutable enfifo_serr_ep3_log_;
  TmClcPipeRspecEnfifoMerrEp0LogMutable enfifo_merr_ep0_log_;
  TmClcPipeRspecEnfifoMerrEp1LogMutable enfifo_merr_ep1_log_;
  TmClcPipeRspecEnfifoMerrEp2LogMutable enfifo_merr_ep2_log_;
  TmClcPipeRspecEnfifoMerrEp3LogMutable enfifo_merr_ep3_log_;
  TmClcPipeRspecClcQacSerrLogMutable clc_qac_serr_log_;
  TmClcPipeRspecClcQacMerrLogMutable clc_qac_merr_log_;
  QclcFifoThresholdMutable fifo_threshold_;
  std::array< QclcPtSpdMutable, 72 > qclc_pt_spd_;
  ClcDebugRegMutable clc_debug_reg_;
  std::array< PortCtStateMutable, 3 > ingress_port_ct_state_;
  std::array< PortCtStateMutable, 3 > egress_port_ct_state_;
  TmClcPipeRspecMcCtCntMutable mc_ct_cnt_;
  TmClcPipeRspecUcCtCntMutable uc_ct_cnt_;
  TmClcPipeRspecDebugBusCtrlMutable debug_bus_ctrl_;
  TmClcPipeRspecIntrMutable intr_;
private:
  static int StartOffset(
      int index_tm_clc_pipe_rspec
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    offset += 0x280000; // to get to tm_clc_top
    assert(index_tm_clc_pipe_rspec < 4);
    offset += index_tm_clc_pipe_rspec * 0x4000; // tm_clc_pipe_rspec[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_TM_CLC_PIPE_RSPEC_MUTABLE_H__
