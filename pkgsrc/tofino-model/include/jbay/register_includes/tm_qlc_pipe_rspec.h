/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_QLC_PIPE_RSPEC_H__
#define __REGISTER_INCLUDES_TM_QLC_PIPE_RSPEC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "qlc_dis_cred.h"
#include "qlc_dis_qlen.h"
#include "qlc_fifo_threshold.h"
#include "qlc_pex_dis_cnt.h"
#include "qlc_pipe_control.h"
#include "qlc_qac_dis_cnt.h"
#include "qlc_qid_deq_cnt.h"
#include "qlc_qid_eq_cnt.h"
#include "qlc_tot_dis_dq_cnt.h"
#include "qlc_tot_dq_cnt.h"
#include "qlc_tot_eq_cnt.h"
#include "tm_qlc_pipe_rspec_debug_bus_ctrl.h"
#include "tm_qlc_pipe_rspec_ecc.h"
#include "tm_qlc_pipe_rspec_intr.h"
#include "tm_qlc_pipe_rspec_linkmem_mbe_err_log.h"
#include "tm_qlc_pipe_rspec_linkmem_sbe_err_log.h"
#include "tm_qlc_pipe_rspec_schdeq_err_log.h"

namespace jbay {
  namespace register_classes {

class TmQlcPipeRspec : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmQlcPipeRspec(
      int chipNumber, int index_tm_qlc_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_qlc_pipe_rspec), 32768, false, write_callback, read_callback, std::string("TmQlcPipeRspec")+":"+boost::lexical_cast<std::string>(index_tm_qlc_pipe_rspec))
    {
    }
  TmQlcPipeRspec(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "TmQlcPipeRspec")
    {
    }
public:





  QlcPipeControl &control() { return control_; }








  TmQlcPipeRspecEcc &ecc() { return ecc_; }





  TmQlcPipeRspecLinkmemMbeErrLog &linkmem_mbe_err_log() { return linkmem_mbe_err_log_; }





  TmQlcPipeRspecLinkmemSbeErrLog &linkmem_sbe_err_log() { return linkmem_sbe_err_log_; }





  TmQlcPipeRspecSchdeqErrLog &schdeq_err_log() { return schdeq_err_log_; }







  QlcDisQlen &dis_qlen(int j0) { return dis_qlen_[j0]; }





  QlcDisCred &dis_cred() { return dis_cred_; }





  QlcFifoThreshold &fifo_threshold() { return fifo_threshold_; }





  QlcPexDisCnt &pex_dis_cnt() { return pex_dis_cnt_; }





  QlcQacDisCnt &qac_dis_cnt() { return qac_dis_cnt_; }





  QlcQidEqCnt &qid_eq_cnt() { return qid_eq_cnt_; }





  QlcQidDeqCnt &qid_deq_cnt() { return qid_deq_cnt_; }





  QlcTotEqCnt &tot_eq_cnt() { return tot_eq_cnt_; }





  QlcTotDqCnt &tot_dq_cnt() { return tot_dq_cnt_; }





  QlcTotDisDqCnt &tot_dis_dq_cnt() { return tot_dis_dq_cnt_; }





  TmQlcPipeRspecDebugBusCtrl &debug_bus_ctrl() { return debug_bus_ctrl_; }
  TmQlcPipeRspecIntr &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      control_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      ecc_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      linkmem_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      linkmem_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      schdeq_err_log_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x100) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      dis_qlen_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      dis_cred_.read( offset, data );
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      if (read_callback_) read_callback_();
      fifo_threshold_.read( offset, data );
    }
    else if (offset >= 0x108 && offset < 0x110) {
      offset -= 0x108;
      if (read_callback_) read_callback_();
      pex_dis_cnt_.read( offset, data );
    }
    else if (offset >= 0x110 && offset < 0x118) {
      offset -= 0x110;
      if (read_callback_) read_callback_();
      qac_dis_cnt_.read( offset, data );
    }
    else if (offset >= 0x118 && offset < 0x120) {
      offset -= 0x118;
      if (read_callback_) read_callback_();
      qid_eq_cnt_.read( offset, data );
    }
    else if (offset >= 0x120 && offset < 0x128) {
      offset -= 0x120;
      if (read_callback_) read_callback_();
      qid_deq_cnt_.read( offset, data );
    }
    else if (offset >= 0x128 && offset < 0x130) {
      offset -= 0x128;
      if (read_callback_) read_callback_();
      tot_eq_cnt_.read( offset, data );
    }
    else if (offset >= 0x130 && offset < 0x138) {
      offset -= 0x130;
      if (read_callback_) read_callback_();
      tot_dq_cnt_.read( offset, data );
    }
    else if (offset >= 0x138 && offset < 0x140) {
      offset -= 0x138;
      if (read_callback_) read_callback_();
      tot_dis_dq_cnt_.read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      if (read_callback_) read_callback_();
      debug_bus_ctrl_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      control_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      linkmem_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      linkmem_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      schdeq_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x100) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      dis_qlen_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      dis_cred_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      fifo_threshold_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x108 && offset < 0x110) {
      offset -= 0x108;
      pex_dis_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x110 && offset < 0x118) {
      offset -= 0x110;
      qac_dis_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x118 && offset < 0x120) {
      offset -= 0x118;
      qid_eq_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x120 && offset < 0x128) {
      offset -= 0x120;
      qid_deq_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x128 && offset < 0x130) {
      offset -= 0x128;
      tot_eq_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x130 && offset < 0x138) {
      offset -= 0x130;
      tot_dq_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x138 && offset < 0x140) {
      offset -= 0x138;
      tot_dis_dq_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      debug_bus_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    control_.reset();
    ecc_.reset();
    linkmem_mbe_err_log_.reset();
    linkmem_sbe_err_log_.reset();
    schdeq_err_log_.reset();
    for (auto &f0 : dis_qlen_) {
      f0.reset();
    }
    dis_cred_.reset();
    fifo_threshold_.reset();
    pex_dis_cnt_.reset();
    qac_dis_cnt_.reset();
    qid_eq_cnt_.reset();
    qid_deq_cnt_.reset();
    tot_eq_cnt_.reset();
    tot_dq_cnt_.reset();
    tot_dis_dq_cnt_.reset();
    debug_bus_ctrl_.reset();
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += control_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += linkmem_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += linkmem_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += schdeq_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x100) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += dis_qlen_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      r += dis_cred_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      r += fifo_threshold_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x108 && offset < 0x110) {
      offset -= 0x108;
      r += pex_dis_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x110 && offset < 0x118) {
      offset -= 0x110;
      r += qac_dis_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x118 && offset < 0x120) {
      offset -= 0x118;
      r += qid_eq_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x120 && offset < 0x128) {
      offset -= 0x120;
      r += qid_deq_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x128 && offset < 0x130) {
      offset -= 0x128;
      r += tot_eq_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x130 && offset < 0x138) {
      offset -= 0x130;
      r += tot_dq_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x138 && offset < 0x140) {
      offset -= 0x138;
      r += tot_dis_dq_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      r += debug_bus_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += control_.to_string(print_zeros,indent_string) ;
    r += ecc_.to_string(print_zeros,indent_string) ;
    r += linkmem_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += linkmem_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += schdeq_err_log_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<32;++a0) {
      r += dis_qlen_[a0].to_string(print_zeros,indent_string) ;
    }
    r += dis_cred_.to_string(print_zeros,indent_string) ;
    r += fifo_threshold_.to_string(print_zeros,indent_string) ;
    r += pex_dis_cnt_.to_string(print_zeros,indent_string) ;
    r += qac_dis_cnt_.to_string(print_zeros,indent_string) ;
    r += qid_eq_cnt_.to_string(print_zeros,indent_string) ;
    r += qid_deq_cnt_.to_string(print_zeros,indent_string) ;
    r += tot_eq_cnt_.to_string(print_zeros,indent_string) ;
    r += tot_dq_cnt_.to_string(print_zeros,indent_string) ;
    r += tot_dis_dq_cnt_.to_string(print_zeros,indent_string) ;
    r += debug_bus_ctrl_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  QlcPipeControl control_;
  TmQlcPipeRspecEcc ecc_;
  TmQlcPipeRspecLinkmemMbeErrLog linkmem_mbe_err_log_;
  TmQlcPipeRspecLinkmemSbeErrLog linkmem_sbe_err_log_;
  TmQlcPipeRspecSchdeqErrLog schdeq_err_log_;
  std::array< QlcDisQlen, 32 > dis_qlen_;
  QlcDisCred dis_cred_;
  QlcFifoThreshold fifo_threshold_;
  QlcPexDisCnt pex_dis_cnt_;
  QlcQacDisCnt qac_dis_cnt_;
  QlcQidEqCnt qid_eq_cnt_;
  QlcQidDeqCnt qid_deq_cnt_;
  QlcTotEqCnt tot_eq_cnt_;
  QlcTotDqCnt tot_dq_cnt_;
  QlcTotDisDqCnt tot_dis_dq_cnt_;
  TmQlcPipeRspecDebugBusCtrl debug_bus_ctrl_;
  TmQlcPipeRspecIntr intr_;
private:
  static int StartOffset(
      int index_tm_qlc_pipe_rspec
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    offset += 0x380000; // to get to tm_qlc_top
    assert(index_tm_qlc_pipe_rspec < 4);
    offset += index_tm_qlc_pipe_rspec * 0x8000; // tm_qlc_pipe_rspec[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_TM_QLC_PIPE_RSPEC_H__
