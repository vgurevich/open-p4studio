/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_SCH_PIPE_RSPEC_ARRAY_H__
#define __REGISTER_INCLUDES_TM_SCH_PIPE_RSPEC_ARRAY_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "sch_adv_cntr_r.h"
#include "sch_advfc_config_r.h"
#include "sch_advfc_status_r.h"
#include "sch_byte_count_adjust_r.h"
#include "sch_ctrl_r.h"
#include "sch_l1_config_r.h"
#include "sch_mac_pex_status_r.h"
#include "sch_pex_credit_ctrl_r.h"
#include "sch_port_arb_ctrl_r.h"
#include "sch_port_config_r.h"
#include "sch_port_pex_status_r.h"
#include "sch_port_pfc_status_r.h"
#include "sch_pq_ctrl_r.h"
#include "sch_pq_port_en_r.h"
#include "sch_pq_port_profile_sel_r.h"
#include "sch_queue_config_r.h"
#include "sch_queue_flush_ctrl_r.h"
#include "sch_queue_flush_mask_r.h"
#include "sch_ready_r.h"
#include "sch_tdm_config_r.h"
#include "sch_tdm_table_entry_r.h"
#include "sch_watchdog_config_r.h"
#include "sch_watchdog_status_r.h"
#include "sch_watchdog_timer_r.h"
#include "tm_sch_pipe_rspec.h"
#include "tm_sch_pipe_rspec_debug_bus_ctrl.h"
#include "tm_sch_pipe_rspec_ecc.h"
#include "tm_sch_pipe_rspec_intr.h"
#include "tm_sch_pipe_rspec_l1_excrate_mbe_err_log.h"
#include "tm_sch_pipe_rspec_l1_excrate_sbe_err_log.h"
#include "tm_sch_pipe_rspec_l1_maxrate_mbe_err_log.h"
#include "tm_sch_pipe_rspec_l1_maxrate_sbe_err_log.h"
#include "tm_sch_pipe_rspec_l1_minrate_mbe_err_log.h"
#include "tm_sch_pipe_rspec_l1_minrate_sbe_err_log.h"
#include "tm_sch_pipe_rspec_p_maxrate_mbe_err_log.h"
#include "tm_sch_pipe_rspec_p_maxrate_sbe_err_log.h"
#include "tm_sch_pipe_rspec_pex_credit_err_log.h"
#include "tm_sch_pipe_rspec_pex_mac_credit_err_log.h"
#include "tm_sch_pipe_rspec_q_excrate_mbe_err_log.h"
#include "tm_sch_pipe_rspec_q_excrate_sbe_err_log.h"
#include "tm_sch_pipe_rspec_q_maxrate_mbe_err_log.h"
#include "tm_sch_pipe_rspec_q_maxrate_sbe_err_log.h"
#include "tm_sch_pipe_rspec_q_minrate_mbe_err_log.h"
#include "tm_sch_pipe_rspec_q_minrate_sbe_err_log.h"
#include "tm_sch_pipe_rspec_q_watchdog_mbe_err_log.h"
#include "tm_sch_pipe_rspec_q_watchdog_sbe_err_log.h"
#include "tm_sch_pipe_rspec_tdm_table_mbe_err_log.h"
#include "tm_sch_pipe_rspec_tdm_table_sbe_err_log.h"
#include "tm_sch_pipe_rspec_upd_edprsr_advfc_mbe_err_log.h"
#include "tm_sch_pipe_rspec_upd_edprsr_advfc_sbe_err_log.h"
#include "tm_sch_pipe_rspec_upd_edprsr_mbe_err_log.h"
#include "tm_sch_pipe_rspec_upd_edprsr_sbe_err_log.h"
#include "tm_sch_pipe_rspec_upd_pex0_mbe_err_log.h"
#include "tm_sch_pipe_rspec_upd_pex0_sbe_err_log.h"
#include "tm_sch_pipe_rspec_upd_pex1_mbe_err_log.h"
#include "tm_sch_pipe_rspec_upd_pex1_sbe_err_log.h"
#include "tm_sch_pipe_rspec_upd_wac_mbe_err_log.h"
#include "tm_sch_pipe_rspec_upd_wac_sbe_err_log.h"

namespace jbay {
  namespace register_classes {

class TmSchPipeRspecArray : public model_core::RegisterBlock<RegisterArrayCallback> {
public:
  enum TmTopRspecEnum {
    kTmSchaTop,
    kTmSchbTop
  };
public:
  TmSchPipeRspecArray(
      int chipNumber, TmTopRspecEnum selector_tm_top_rspec, RegisterArrayCallback& write_callback = 0, RegisterArrayCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_tm_top_rspec), 32768 * ArraySize(selector_tm_top_rspec, -1), false, write_callback, read_callback, std::string("TmSchPipeRspecArray")+":"+boost::lexical_cast<std::string>(selector_tm_top_rspec)),
    array(RealArraySize(selector_tm_top_rspec, -1)),
    size0_(ArraySize(selector_tm_top_rspec, 0)),
    real_size0_(RealArraySize(selector_tm_top_rspec, 0))
    {
    }
public:








  TmSchPipeRspecEcc &ecc(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].ecc();
  }





  TmSchPipeRspecTdmTableSbeErrLog &tdm_table_sbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].tdm_table_sbe_err_log();
  }





  TmSchPipeRspecTdmTableMbeErrLog &tdm_table_mbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].tdm_table_mbe_err_log();
  }





  TmSchPipeRspecUpdWacSbeErrLog &upd_wac_sbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].upd_wac_sbe_err_log();
  }





  TmSchPipeRspecUpdWacMbeErrLog &upd_wac_mbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].upd_wac_mbe_err_log();
  }





  TmSchPipeRspecUpdEdprsrAdvfcSbeErrLog &upd_edprsr_advfc_sbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].upd_edprsr_advfc_sbe_err_log();
  }





  TmSchPipeRspecUpdEdprsrAdvfcMbeErrLog &upd_edprsr_advfc_mbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].upd_edprsr_advfc_mbe_err_log();
  }





  TmSchPipeRspecQMinrateSbeErrLog &q_minrate_sbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_minrate_sbe_err_log();
  }





  TmSchPipeRspecQMinrateMbeErrLog &q_minrate_mbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_minrate_mbe_err_log();
  }





  TmSchPipeRspecQExcrateSbeErrLog &q_excrate_sbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_excrate_sbe_err_log();
  }





  TmSchPipeRspecQExcrateMbeErrLog &q_excrate_mbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_excrate_mbe_err_log();
  }





  TmSchPipeRspecQMaxrateSbeErrLog &q_maxrate_sbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_maxrate_sbe_err_log();
  }





  TmSchPipeRspecQMaxrateMbeErrLog &q_maxrate_mbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_maxrate_mbe_err_log();
  }





  TmSchPipeRspecL1MinrateSbeErrLog &l1_minrate_sbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].l1_minrate_sbe_err_log();
  }





  TmSchPipeRspecL1MinrateMbeErrLog &l1_minrate_mbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].l1_minrate_mbe_err_log();
  }





  TmSchPipeRspecL1ExcrateSbeErrLog &l1_excrate_sbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].l1_excrate_sbe_err_log();
  }





  TmSchPipeRspecL1ExcrateMbeErrLog &l1_excrate_mbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].l1_excrate_mbe_err_log();
  }





  TmSchPipeRspecL1MaxrateSbeErrLog &l1_maxrate_sbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].l1_maxrate_sbe_err_log();
  }





  TmSchPipeRspecL1MaxrateMbeErrLog &l1_maxrate_mbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].l1_maxrate_mbe_err_log();
  }





  TmSchPipeRspecPMaxrateSbeErrLog &p_maxrate_sbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].p_maxrate_sbe_err_log();
  }





  TmSchPipeRspecPMaxrateMbeErrLog &p_maxrate_mbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].p_maxrate_mbe_err_log();
  }












  TmSchPipeRspecUpdPex0SbeErrLog &upd_pex0_sbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].upd_pex0_sbe_err_log();
  }












  TmSchPipeRspecUpdPex0MbeErrLog &upd_pex0_mbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].upd_pex0_mbe_err_log();
  }












  TmSchPipeRspecUpdPex1SbeErrLog &upd_pex1_sbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].upd_pex1_sbe_err_log();
  }












  TmSchPipeRspecUpdPex1MbeErrLog &upd_pex1_mbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].upd_pex1_mbe_err_log();
  }












  TmSchPipeRspecUpdEdprsrSbeErrLog &upd_edprsr_sbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].upd_edprsr_sbe_err_log();
  }












  TmSchPipeRspecUpdEdprsrMbeErrLog &upd_edprsr_mbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].upd_edprsr_mbe_err_log();
  }





  TmSchPipeRspecPexCreditErrLog &pex_credit_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].pex_credit_err_log();
  }





  TmSchPipeRspecPexMacCreditErrLog &pex_mac_credit_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].pex_mac_credit_err_log();
  }





  TmSchPipeRspecQWatchdogSbeErrLog &q_watchdog_sbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_watchdog_sbe_err_log();
  }





  TmSchPipeRspecQWatchdogMbeErrLog &q_watchdog_mbe_err_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_watchdog_mbe_err_log();
  }






  SchCtrlR &ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].ctrl();
  }






  SchReadyR &ready(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].ready();
  }






  SchByteCountAdjustR &global_bytecnt_adj(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].global_bytecnt_adj();
  }





  SchTdmConfigR &tdm_config(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].tdm_config();
  }












  SchTdmTableEntryR &tdm_table(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].tdm_table(j0);
  }





  SchPortArbCtrlR &port_arb_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].port_arb_ctrl();
  }





  SchPexCreditCtrlR &pex_credit_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].pex_credit_ctrl();
  }








  SchPortConfigR &port_config(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].port_config(j0);
  }






  SchPortPfcStatusR &port_pfc_status_mem(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].port_pfc_status_mem(j0);
  }












  SchPortPexStatusR &port_pex_status_mem(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].port_pex_status_mem(j0);
  }









  SchMacPexStatusR &mac_pex_status_mem(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].mac_pex_status_mem(j0);
  }








  SchL1ConfigR &l1_config(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].l1_config(j0);
  }









  SchQueueConfigR &queue_config(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].queue_config(j0);
  }




  SchQueueFlushCtrlR &queue_flush_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].queue_flush_ctrl();
  }




  SchQueueFlushMaskR &queue_flush_mask(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].queue_flush_mask();
  }





  SchWatchdogConfigR &watchdog_config(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].watchdog_config();
  }







  SchWatchdogStatusR &watchdog_status(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].watchdog_status(j0);
  }





  SchWatchdogTimerR &watchdog_timer(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].watchdog_timer();
  }





  SchAdvfcConfigR &iadvfc_config(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].iadvfc_config();
  }





  SchAdvfcStatusR &iadvfc_status(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].iadvfc_status();
  }





  SchAdvCntrR &iadvfc_ctr(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].iadvfc_ctr();
  }





  SchAdvfcConfigR &eadvfc_config(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].eadvfc_config();
  }





  SchAdvfcStatusR &eadvfc_status(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].eadvfc_status();
  }





  SchAdvCntrR &eadvfc_ctr(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].eadvfc_ctr();
  }










  SchPqCtrlR &pq_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].pq_ctrl();
  }






  SchPqPortEnR &pq_port_en(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].pq_port_en();
  }






  SchPqPortProfileSelR &pq_port_profile_sel(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].pq_port_profile_sel();
  }





  TmSchPipeRspecDebugBusCtrl &debug_bus_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].debug_bus_ctrl();
  }
  TmSchPipeRspecIntr &intr(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].intr();
  }
  bool calculate_index(
      uint32_t* offset, uint32_t* a0
      ) const {
    int i = (*offset)/32768;
    (*offset) -= (i*32768);
    uint32_t t = i;
    *a0 = t;
    bool in_bounds = true;
    in_bounds &= CheckArrayBounds(*a0,real_size0_,size0_,*offset,0,true);
    return in_bounds;
  }


  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return true;
    if (read_callback_) read_callback_(a0);
    array[a0].read(offset,data);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return true;
    array[a0].write(offset,data);
    if (write_callback_) write_callback_(a0);
    return true;
  }

  void reset(
      
      ) {
    for (uint32_t i=0;i<array.size();++i) {
      array[i].reset();
      int t = i;
      int a0 = t;
      if (write_callback_) write_callback_(a0);
    }
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return "OUT_OF_BOUNDS";
    std::string r_s = array[a0].to_string(print_zeros,indent_string+"  ");
    if (! r_s.empty()) {
      r += indent_string + std::string("TmSchPipeRspecArray") + "["+boost::lexical_cast<std::string>(a0)+"]"+ ":\n" + r_s ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<real_size0_;++a0) {
      std::string r_s = array[a0].to_string(print_zeros,indent_string+"  ");
      if (! r_s.empty()) {
        r += indent_string + std::string("TmSchPipeRspecArray") + "["+boost::lexical_cast<std::string>(a0)+"]"+ ":\n" + r_s ;
      }
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::vector<TmSchPipeRspec> array;
  uint32_t size0_;
  uint32_t real_size0_;
private:
  static int StartOffset(
      TmTopRspecEnum selector_tm_top_rspec
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    switch (selector_tm_top_rspec) {
      case kTmSchaTop:
        offset += 0x180000; // to get to tm_scha_top
        break;
      case kTmSchbTop:
        offset += 0x200000; // to get to tm_schb_top
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

  static int ArraySize(
      TmTopRspecEnum selector_tm_top_rspec, int dimension
      ) {
    switch (selector_tm_top_rspec) {
      case kTmSchaTop:
        switch (dimension) {
          case -1:
            return 2;
            break;
          case 0:
            return 2;
            break;
          default:
            assert(0);
            break;
        }
        break;
      case kTmSchbTop:
        switch (dimension) {
          case -1:
            return 2;
            break;
          case 0:
            return 2;
            break;
          default:
            assert(0);
            break;
        }
        break;
      default:
        assert(0);
        break;
    }
  }

  static int RealArraySize(
      TmTopRspecEnum selector_tm_top_rspec, int dimension
      ) {
    switch (selector_tm_top_rspec) {
      case kTmSchaTop:
        switch (dimension) {
          case -1:
            return 2;
            break;
          case 0:
            return 2;
            break;
          default:
            assert(0);
            break;
        }
        break;
      case kTmSchbTop:
        switch (dimension) {
          case -1:
            return 2;
            break;
          case 0:
            return 2;
            break;
          default:
            assert(0);
            break;
        }
        break;
      default:
        assert(0);
        break;
    }
  }

};









  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_TM_SCH_PIPE_RSPEC_ARRAY_H__
