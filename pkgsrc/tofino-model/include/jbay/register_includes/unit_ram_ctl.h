/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_UNIT_RAM_CTL_H__
#define __REGISTER_INCLUDES_UNIT_RAM_CTL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbay {
  namespace register_classes {

class UnitRamCtl : public model_core::RegisterBlock<RegisterCallback> {
public:
  UnitRamCtl(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_unit_ram_row_addrmap, int index_mau_unit_ram_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_unit_ram_row_addrmap, index_mau_unit_ram_addrmap), 4, false, write_callback, read_callback, std::string("UnitRamCtl")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_unit_ram_row_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_unit_ram_addrmap))
    {
    }
  UnitRamCtl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "UnitRamCtl")
    {
    }
public:








  uint8_t &match_ram_write_data_mux_select() { return match_ram_write_data_mux_select_; }









  uint8_t &match_ram_read_data_mux_select() { return match_ram_read_data_mux_select_; }


  uint8_t &match_ram_matchdata_bus1_sel() { return match_ram_matchdata_bus1_sel_; }







  uint8_t &match_result_bus_select() { return match_result_bus_select_; }







  uint8_t &tind_result_bus_select() { return tind_result_bus_select_; }




  uint8_t &match_entry_enable() { return match_entry_enable_; }



  uint8_t &match_ram_logical_table() { return match_ram_logical_table_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (match_ram_write_data_mux_select_ & 0x7);
    *data |= ((match_ram_read_data_mux_select_ & 0x7) << 3);
    *data |= ((match_ram_matchdata_bus1_sel_ & 0x1) << 6);
    *data |= ((match_result_bus_select_ & 0x3) << 7);
    *data |= ((tind_result_bus_select_ & 0x3) << 9);
    *data |= ((match_entry_enable_ & 0x1f) << 11);
    *data |= ((match_ram_logical_table_ & 0xf) << 16);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    match_ram_write_data_mux_select_ = (data & 0x7);
    match_ram_read_data_mux_select_ = ((data >> 3) & 0x7);
    match_ram_matchdata_bus1_sel_ = ((data >> 6) & 0x1);
    match_result_bus_select_ = ((data >> 7) & 0x3);
    tind_result_bus_select_ = ((data >> 9) & 0x3);
    match_entry_enable_ = ((data >> 11) & 0x1f);
    match_ram_logical_table_ = ((data >> 16) & 0xf);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    match_ram_write_data_mux_select_ = 0x0;
    match_ram_read_data_mux_select_ = 0x0;
    match_ram_matchdata_bus1_sel_ = 0x0;
    match_result_bus_select_ = 0x0;
    tind_result_bus_select_ = 0x0;
    match_entry_enable_ = 0x0;
    match_ram_logical_table_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("UnitRamCtl") + ":\n";
    r += indent_string + "  " + std::string("match_ram_write_data_mux_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(match_ram_write_data_mux_select_) ) + "\n";
    all_zeros &= (0 == match_ram_write_data_mux_select_);
    r += indent_string + "  " + std::string("match_ram_read_data_mux_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(match_ram_read_data_mux_select_) ) + "\n";
    all_zeros &= (0 == match_ram_read_data_mux_select_);
    r += indent_string + "  " + std::string("match_ram_matchdata_bus1_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(match_ram_matchdata_bus1_sel_) ) + "\n";
    all_zeros &= (0 == match_ram_matchdata_bus1_sel_);
    r += indent_string + "  " + std::string("match_result_bus_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(match_result_bus_select_) ) + "\n";
    all_zeros &= (0 == match_result_bus_select_);
    r += indent_string + "  " + std::string("tind_result_bus_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tind_result_bus_select_) ) + "\n";
    all_zeros &= (0 == tind_result_bus_select_);
    r += indent_string + "  " + std::string("match_entry_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(match_entry_enable_) ) + "\n";
    all_zeros &= (0 == match_entry_enable_);
    r += indent_string + "  " + std::string("match_ram_logical_table") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(match_ram_logical_table_) ) + "\n";
    all_zeros &= (0 == match_ram_logical_table_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("UnitRamCtl") + ":\n";
    r += indent_string + "  " + std::string("match_ram_write_data_mux_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(match_ram_write_data_mux_select_) ) + "\n";
    all_zeros &= (0 == match_ram_write_data_mux_select_);
    r += indent_string + "  " + std::string("match_ram_read_data_mux_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(match_ram_read_data_mux_select_) ) + "\n";
    all_zeros &= (0 == match_ram_read_data_mux_select_);
    r += indent_string + "  " + std::string("match_ram_matchdata_bus1_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(match_ram_matchdata_bus1_sel_) ) + "\n";
    all_zeros &= (0 == match_ram_matchdata_bus1_sel_);
    r += indent_string + "  " + std::string("match_result_bus_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(match_result_bus_select_) ) + "\n";
    all_zeros &= (0 == match_result_bus_select_);
    r += indent_string + "  " + std::string("tind_result_bus_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tind_result_bus_select_) ) + "\n";
    all_zeros &= (0 == tind_result_bus_select_);
    r += indent_string + "  " + std::string("match_entry_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(match_entry_enable_) ) + "\n";
    all_zeros &= (0 == match_entry_enable_);
    r += indent_string + "  " + std::string("match_ram_logical_table") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(match_ram_logical_table_) ) + "\n";
    all_zeros &= (0 == match_ram_logical_table_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t match_ram_write_data_mux_select_;
  uint8_t match_ram_read_data_mux_select_;
  uint8_t match_ram_matchdata_bus1_sel_;
  uint8_t match_result_bus_select_;
  uint8_t tind_result_bus_select_;
  uint8_t match_entry_enable_;
  uint8_t match_ram_logical_table_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_unit_ram_row_addrmap, int index_mau_unit_ram_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to rams
    offset += 0x8000; // to get to row
    assert(index_mau_unit_ram_row_addrmap < 8);
    offset += index_mau_unit_ram_row_addrmap * 0x1000; // mau_unit_ram_row_addrmap[]
    assert(index_mau_unit_ram_addrmap < 12);
    offset += index_mau_unit_ram_addrmap * 0x80; // mau_unit_ram_addrmap[]
    offset += 0x10; // to get to unit_ram_ctl
    return offset;
  }

};















  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_UNIT_RAM_CTL_H__
