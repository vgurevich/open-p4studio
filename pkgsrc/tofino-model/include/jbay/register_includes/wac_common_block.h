/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_WAC_COMMON_BLOCK_H__
#define __REGISTER_INCLUDES_WAC_COMMON_BLOCK_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "wac_ap_cnt_cell.h"
#include "wac_ap_limit_cell.h"
#include "wac_ap_offset_cell.h"
#include "wac_ap_red_limit_cell.h"
#include "wac_ap_red_offset_cell.h"
#include "wac_ap_yel_limit_cell.h"
#include "wac_ap_yel_offset_cell.h"
#include "wac_caa_block_hdr_cell.h"
#include "wac_caa_rsvd_blocks.h"
#include "wac_cnt48.h"
#include "wac_dod_cnt_cell.h"
#include "wac_dod_limit_cell.h"
#include "wac_glb_cell_limit.h"
#include "wac_glb_config.h"
#include "wac_glb_min_limit_cell.h"
#include "wac_hdr_cnt_cell.h"
#include "wac_hdr_limit_cell.h"
#include "wac_hdr_offset_cell.h"
#include "wac_mem_init_done.h"
#include "wac_pfc_pool_limit_cell.h"
#include "wac_pfc_pool_step_timer.h"
#include "wac_qac_afull_th.h"
#include "wac_wm_ap_cnt_cell.h"
#include "wac_wm_hdr_cnt_cell.h"
#include "wac_wm_tot_cnt_cell.h"

namespace jbay {
  namespace register_classes {

class WacCommonBlock : public model_core::RegisterBlock<RegisterCallback> {
public:
  WacCommonBlock(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 516, false, write_callback, read_callback, std::string("WacCommonBlock"))
    {
    }
  WacCommonBlock(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "WacCommonBlock")
    {
    }
public:





  WacGlbConfig &wac_common_wac_glb_config() { return wac_common_wac_glb_config_; }





  WacQacAfullTh &wac_common_wac_qac_afull_th() { return wac_common_wac_qac_afull_th_; }





  WacMemInitDone &wac_common_wac_mem_init_done() { return wac_common_wac_mem_init_done_; }







  WacApLimitCell &wac_common_wac_ap_limit_cell(int j0) { return wac_common_wac_ap_limit_cell_[j0]; }





  WacApOffsetCell &wac_common_wac_ap_offset_cell() { return wac_common_wac_ap_offset_cell_; }







  WacApRedLimitCell &wac_common_wac_ap_red_limit_cell(int j0) { return wac_common_wac_ap_red_limit_cell_[j0]; }





  WacApRedOffsetCell &wac_common_wac_ap_red_offset_cell() { return wac_common_wac_ap_red_offset_cell_; }







  WacApYelLimitCell &wac_common_wac_ap_yel_limit_cell(int j0) { return wac_common_wac_ap_yel_limit_cell_[j0]; }





  WacApYelOffsetCell &wac_common_wac_ap_yel_offset_cell() { return wac_common_wac_ap_yel_offset_cell_; }





  WacDodLimitCell &wac_common_wac_dod_limit_cell() { return wac_common_wac_dod_limit_cell_; }





  WacGlbMinLimitCell &wac_common_wac_glb_min_limit_cell() { return wac_common_wac_glb_min_limit_cell_; }





  WacCaaBlockHdrCell &wac_common_wac_caa_block_hdr_cell() { return wac_common_wac_caa_block_hdr_cell_; }





  WacCaaRsvdBlocks &wac_common_wac_caa_rsvd_blocks() { return wac_common_wac_caa_rsvd_blocks_; }





  WacGlbCellLimit &wac_common_wac_glb_cell_limit() { return wac_common_wac_glb_cell_limit_; }







  WacApCntCell &wac_common_wac_ap_cnt_cell(int j0) { return wac_common_wac_ap_cnt_cell_[j0]; }







  WacWmApCntCell &wac_common_wac_wm_ap_cnt_cell(int j0) { return wac_common_wac_wm_ap_cnt_cell_[j0]; }





  WacWmTotCntCell &wac_common_wac_wm_tot_cnt_cell() { return wac_common_wac_wm_tot_cnt_cell_; }





  WacHdrCntCell &wac_common_wac_hdr_cnt_cell() { return wac_common_wac_hdr_cnt_cell_; }





  WacWmHdrCntCell &wac_common_wac_wm_hdr_cnt_cell() { return wac_common_wac_wm_hdr_cnt_cell_; }





  WacHdrLimitCell &wac_common_wac_hdr_limit_cell() { return wac_common_wac_hdr_limit_cell_; }





  WacHdrOffsetCell &wac_common_wac_hdr_offset_cell() { return wac_common_wac_hdr_offset_cell_; }





  WacDodCntCell &wac_common_wac_dod_cnt_cell() { return wac_common_wac_dod_cnt_cell_; }







  WacPfcPoolLimitCell &wac_common_wac_pfc_pool_0_limit_cell(int j0) { return wac_common_wac_pfc_pool_0_limit_cell_[j0]; }







  WacPfcPoolLimitCell &wac_common_wac_pfc_pool_1_limit_cell(int j0) { return wac_common_wac_pfc_pool_1_limit_cell_[j0]; }







  WacPfcPoolLimitCell &wac_common_wac_pfc_pool_2_limit_cell(int j0) { return wac_common_wac_pfc_pool_2_limit_cell_[j0]; }







  WacPfcPoolLimitCell &wac_common_wac_pfc_pool_3_limit_cell(int j0) { return wac_common_wac_pfc_pool_3_limit_cell_[j0]; }





  WacCnt48 &wac_common_wac_dod_cnt48() { return wac_common_wac_dod_cnt48_; }





  WacCnt48 &wac_common_wac_dod_drop_cnt48() { return wac_common_wac_dod_drop_cnt48_; }







  WacCnt48 &wac_common_wac_sop_cred_rtn_cnt(int j0) { return wac_common_wac_sop_cred_rtn_cnt_[j0]; }





  WacPfcPoolStepTimer &wac_common_wac_pfc_pool_step_timer() { return wac_common_wac_pfc_pool_step_timer_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      wac_common_wac_glb_config_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_qac_afull_th_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      wac_common_wac_mem_init_done_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x1c) {
      offset -= 0xc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_ap_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      wac_common_wac_ap_offset_cell_.read( offset, data );
    }
    else if (offset >= 0x2c && offset < 0x3c) {
      offset -= 0x2c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_ap_red_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      wac_common_wac_ap_red_offset_cell_.read( offset, data );
    }
    else if (offset >= 0x4c && offset < 0x5c) {
      offset -= 0x4c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_ap_yel_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      if (read_callback_) read_callback_();
      wac_common_wac_ap_yel_offset_cell_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      wac_common_wac_dod_limit_cell_.read( offset, data );
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      if (read_callback_) read_callback_();
      wac_common_wac_glb_min_limit_cell_.read( offset, data );
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      if (read_callback_) read_callback_();
      wac_common_wac_caa_block_hdr_cell_.read( offset, data );
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      if (read_callback_) read_callback_();
      wac_common_wac_caa_rsvd_blocks_.read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      if (read_callback_) read_callback_();
      wac_common_wac_glb_cell_limit_.read( offset, data );
    }
    else if (offset >= 0x7c && offset < 0x8c) {
      offset -= 0x7c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_ap_cnt_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x8c && offset < 0x9c) {
      offset -= 0x8c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_wm_ap_cnt_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      if (read_callback_) read_callback_();
      wac_common_wac_wm_tot_cnt_cell_.read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      if (read_callback_) read_callback_();
      wac_common_wac_hdr_cnt_cell_.read( offset, data );
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      if (read_callback_) read_callback_();
      wac_common_wac_wm_hdr_cnt_cell_.read( offset, data );
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      if (read_callback_) read_callback_();
      wac_common_wac_hdr_limit_cell_.read( offset, data );
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      if (read_callback_) read_callback_();
      wac_common_wac_hdr_offset_cell_.read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      if (read_callback_) read_callback_();
      wac_common_wac_dod_cnt_cell_.read( offset, data );
    }
    else if (offset >= 0xcc && offset < 0xec) {
      offset -= 0xcc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_pfc_pool_0_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xec && offset < 0x10c) {
      offset -= 0xec;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_pfc_pool_1_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x10c && offset < 0x12c) {
      offset -= 0x10c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_pfc_pool_2_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x12c && offset < 0x14c) {
      offset -= 0x12c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_pfc_pool_3_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x14c && offset < 0x154) {
      offset -= 0x14c;
      if (read_callback_) read_callback_();
      wac_common_wac_dod_cnt48_.read( offset, data );
    }
    else if (offset >= 0x154 && offset < 0x15c) {
      offset -= 0x154;
      if (read_callback_) read_callback_();
      wac_common_wac_dod_drop_cnt48_.read( offset, data );
    }
    else if (offset >= 0x16c && offset < 0x1ec) {
      offset -= 0x16c;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      wac_common_wac_sop_cred_rtn_cnt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1ec && offset < 0x1f0) {
      offset -= 0x1ec;
      if (read_callback_) read_callback_();
      wac_common_wac_pfc_pool_step_timer_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      wac_common_wac_glb_config_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      wac_common_wac_qac_afull_th_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      wac_common_wac_mem_init_done_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x1c) {
      offset -= 0xc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_ap_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      wac_common_wac_ap_offset_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x3c) {
      offset -= 0x2c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_ap_red_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      wac_common_wac_ap_red_offset_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c && offset < 0x5c) {
      offset -= 0x4c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_ap_yel_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      wac_common_wac_ap_yel_offset_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      wac_common_wac_dod_limit_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      wac_common_wac_glb_min_limit_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      wac_common_wac_caa_block_hdr_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      wac_common_wac_caa_rsvd_blocks_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      wac_common_wac_glb_cell_limit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7c && offset < 0x8c) {
      offset -= 0x7c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_ap_cnt_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8c && offset < 0x9c) {
      offset -= 0x8c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_wm_ap_cnt_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      wac_common_wac_wm_tot_cnt_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      wac_common_wac_hdr_cnt_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      wac_common_wac_wm_hdr_cnt_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      wac_common_wac_hdr_limit_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      wac_common_wac_hdr_offset_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      wac_common_wac_dod_cnt_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xcc && offset < 0xec) {
      offset -= 0xcc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_pfc_pool_0_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xec && offset < 0x10c) {
      offset -= 0xec;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_pfc_pool_1_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10c && offset < 0x12c) {
      offset -= 0x10c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_pfc_pool_2_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x12c && offset < 0x14c) {
      offset -= 0x12c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_pfc_pool_3_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14c && offset < 0x154) {
      offset -= 0x14c;
      wac_common_wac_dod_cnt48_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x154 && offset < 0x15c) {
      offset -= 0x154;
      wac_common_wac_dod_drop_cnt48_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x16c && offset < 0x1ec) {
      offset -= 0x16c;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      wac_common_wac_sop_cred_rtn_cnt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1ec && offset < 0x1f0) {
      offset -= 0x1ec;
      wac_common_wac_pfc_pool_step_timer_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    wac_common_wac_glb_config_.reset();
    wac_common_wac_qac_afull_th_.reset();
    wac_common_wac_mem_init_done_.reset();
    for (auto &f0 : wac_common_wac_ap_limit_cell_) {
      f0.reset();
    }
    wac_common_wac_ap_offset_cell_.reset();
    for (auto &f0 : wac_common_wac_ap_red_limit_cell_) {
      f0.reset();
    }
    wac_common_wac_ap_red_offset_cell_.reset();
    for (auto &f0 : wac_common_wac_ap_yel_limit_cell_) {
      f0.reset();
    }
    wac_common_wac_ap_yel_offset_cell_.reset();
    wac_common_wac_dod_limit_cell_.reset();
    wac_common_wac_glb_min_limit_cell_.reset();
    wac_common_wac_caa_block_hdr_cell_.reset();
    wac_common_wac_caa_rsvd_blocks_.reset();
    wac_common_wac_glb_cell_limit_.reset();
    for (auto &f0 : wac_common_wac_ap_cnt_cell_) {
      f0.reset();
    }
    for (auto &f0 : wac_common_wac_wm_ap_cnt_cell_) {
      f0.reset();
    }
    wac_common_wac_wm_tot_cnt_cell_.reset();
    wac_common_wac_hdr_cnt_cell_.reset();
    wac_common_wac_wm_hdr_cnt_cell_.reset();
    wac_common_wac_hdr_limit_cell_.reset();
    wac_common_wac_hdr_offset_cell_.reset();
    wac_common_wac_dod_cnt_cell_.reset();
    for (auto &f0 : wac_common_wac_pfc_pool_0_limit_cell_) {
      f0.reset();
    }
    for (auto &f0 : wac_common_wac_pfc_pool_1_limit_cell_) {
      f0.reset();
    }
    for (auto &f0 : wac_common_wac_pfc_pool_2_limit_cell_) {
      f0.reset();
    }
    for (auto &f0 : wac_common_wac_pfc_pool_3_limit_cell_) {
      f0.reset();
    }
    wac_common_wac_dod_cnt48_.reset();
    wac_common_wac_dod_drop_cnt48_.reset();
    for (auto &f0 : wac_common_wac_sop_cred_rtn_cnt_) {
      f0.reset();
    }
    wac_common_wac_pfc_pool_step_timer_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += wac_common_wac_glb_config_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += wac_common_wac_qac_afull_th_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += wac_common_wac_mem_init_done_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x1c) {
      offset -= 0xc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_ap_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += wac_common_wac_ap_offset_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c && offset < 0x3c) {
      offset -= 0x2c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_ap_red_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += wac_common_wac_ap_red_offset_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c && offset < 0x5c) {
      offset -= 0x4c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_ap_yel_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      r += wac_common_wac_ap_yel_offset_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      r += wac_common_wac_dod_limit_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      r += wac_common_wac_glb_min_limit_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      r += wac_common_wac_caa_block_hdr_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      r += wac_common_wac_caa_rsvd_blocks_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      r += wac_common_wac_glb_cell_limit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7c && offset < 0x8c) {
      offset -= 0x7c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_ap_cnt_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8c && offset < 0x9c) {
      offset -= 0x8c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_wm_ap_cnt_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      r += wac_common_wac_wm_tot_cnt_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      r += wac_common_wac_hdr_cnt_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      r += wac_common_wac_wm_hdr_cnt_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      r += wac_common_wac_hdr_limit_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      r += wac_common_wac_hdr_offset_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      r += wac_common_wac_dod_cnt_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xcc && offset < 0xec) {
      offset -= 0xcc;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_pfc_pool_0_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xec && offset < 0x10c) {
      offset -= 0xec;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_pfc_pool_1_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10c && offset < 0x12c) {
      offset -= 0x10c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_pfc_pool_2_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x12c && offset < 0x14c) {
      offset -= 0x12c;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_pfc_pool_3_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14c && offset < 0x154) {
      offset -= 0x14c;
      r += wac_common_wac_dod_cnt48_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x154 && offset < 0x15c) {
      offset -= 0x154;
      r += wac_common_wac_dod_drop_cnt48_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x16c && offset < 0x1ec) {
      offset -= 0x16c;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += wac_common_wac_sop_cred_rtn_cnt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1ec && offset < 0x1f0) {
      offset -= 0x1ec;
      r += wac_common_wac_pfc_pool_step_timer_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += wac_common_wac_glb_config_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_qac_afull_th_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_mem_init_done_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_common_wac_ap_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wac_common_wac_ap_offset_cell_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_common_wac_ap_red_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wac_common_wac_ap_red_offset_cell_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_common_wac_ap_yel_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wac_common_wac_ap_yel_offset_cell_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_dod_limit_cell_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_glb_min_limit_cell_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_caa_block_hdr_cell_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_caa_rsvd_blocks_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_glb_cell_limit_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_common_wac_ap_cnt_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_common_wac_wm_ap_cnt_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wac_common_wac_wm_tot_cnt_cell_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_hdr_cnt_cell_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_wm_hdr_cnt_cell_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_hdr_limit_cell_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_hdr_offset_cell_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_dod_cnt_cell_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<8;++a0) {
      r += wac_common_wac_pfc_pool_0_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += wac_common_wac_pfc_pool_1_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += wac_common_wac_pfc_pool_2_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += wac_common_wac_pfc_pool_3_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wac_common_wac_dod_cnt48_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_dod_drop_cnt48_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<16;++a0) {
      r += wac_common_wac_sop_cred_rtn_cnt_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wac_common_wac_pfc_pool_step_timer_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  WacGlbConfig wac_common_wac_glb_config_;
  WacQacAfullTh wac_common_wac_qac_afull_th_;
  WacMemInitDone wac_common_wac_mem_init_done_;
  std::array< WacApLimitCell, 4 > wac_common_wac_ap_limit_cell_;
  WacApOffsetCell wac_common_wac_ap_offset_cell_;
  std::array< WacApRedLimitCell, 4 > wac_common_wac_ap_red_limit_cell_;
  WacApRedOffsetCell wac_common_wac_ap_red_offset_cell_;
  std::array< WacApYelLimitCell, 4 > wac_common_wac_ap_yel_limit_cell_;
  WacApYelOffsetCell wac_common_wac_ap_yel_offset_cell_;
  WacDodLimitCell wac_common_wac_dod_limit_cell_;
  WacGlbMinLimitCell wac_common_wac_glb_min_limit_cell_;
  WacCaaBlockHdrCell wac_common_wac_caa_block_hdr_cell_;
  WacCaaRsvdBlocks wac_common_wac_caa_rsvd_blocks_;
  WacGlbCellLimit wac_common_wac_glb_cell_limit_;
  std::array< WacApCntCell, 4 > wac_common_wac_ap_cnt_cell_;
  std::array< WacWmApCntCell, 4 > wac_common_wac_wm_ap_cnt_cell_;
  WacWmTotCntCell wac_common_wac_wm_tot_cnt_cell_;
  WacHdrCntCell wac_common_wac_hdr_cnt_cell_;
  WacWmHdrCntCell wac_common_wac_wm_hdr_cnt_cell_;
  WacHdrLimitCell wac_common_wac_hdr_limit_cell_;
  WacHdrOffsetCell wac_common_wac_hdr_offset_cell_;
  WacDodCntCell wac_common_wac_dod_cnt_cell_;
  std::array< WacPfcPoolLimitCell, 8 > wac_common_wac_pfc_pool_0_limit_cell_;
  std::array< WacPfcPoolLimitCell, 8 > wac_common_wac_pfc_pool_1_limit_cell_;
  std::array< WacPfcPoolLimitCell, 8 > wac_common_wac_pfc_pool_2_limit_cell_;
  std::array< WacPfcPoolLimitCell, 8 > wac_common_wac_pfc_pool_3_limit_cell_;
  WacCnt48 wac_common_wac_dod_cnt48_;
  WacCnt48 wac_common_wac_dod_drop_cnt48_;
  std::array< WacCnt48, 16 > wac_common_wac_sop_cred_rtn_cnt_;
  WacPfcPoolStepTimer wac_common_wac_pfc_pool_step_timer_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    offset += 0x20000; // to get to wac_common
    return offset;
  }

};





  }; // namespace register_classes
}; // namespace jbay

#endif // __REGISTER_INCLUDES_WAC_COMMON_BLOCK_H__
