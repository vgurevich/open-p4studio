/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_CBUS_INT_STAT0_H__
#define __REGISTER_INCLUDES_CBUS_INT_STAT0_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class CbusIntStat0 : public model_core::RegisterBlock<RegisterCallback> {
public:
  CbusIntStat0(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, false, write_callback, read_callback, std::string("CbusIntStat0"))
    {
    }
  CbusIntStat0(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "CbusIntStat0")
    {
    }
public:





  uint8_t &host_overflow() { return host_overflow_; }





  uint8_t &wl0_tx_dr_empty() { return wl0_tx_dr_empty_; }





  uint8_t &wl0_tx_dr_full() { return wl0_tx_dr_full_; }





  uint8_t &wl0_cpl_dr_empty() { return wl0_cpl_dr_empty_; }





  uint8_t &wl0_cpl_dr_full() { return wl0_cpl_dr_full_; }





  uint8_t &wl1_tx_dr_empty() { return wl1_tx_dr_empty_; }





  uint8_t &wl1_tx_dr_full() { return wl1_tx_dr_full_; }





  uint8_t &wl1_cpl_dr_empty() { return wl1_cpl_dr_empty_; }





  uint8_t &wl1_cpl_dr_full() { return wl1_cpl_dr_full_; }





  uint8_t &rb0_tx_dr_empty() { return rb0_tx_dr_empty_; }





  uint8_t &rb0_tx_dr_full() { return rb0_tx_dr_full_; }





  uint8_t &rb0_cpl_dr_empty() { return rb0_cpl_dr_empty_; }





  uint8_t &rb0_cpl_dr_full() { return rb0_cpl_dr_full_; }





  uint8_t &rb1_tx_dr_empty() { return rb1_tx_dr_empty_; }





  uint8_t &rb1_tx_dr_full() { return rb1_tx_dr_full_; }





  uint8_t &rb1_cpl_dr_empty() { return rb1_cpl_dr_empty_; }





  uint8_t &rb1_cpl_dr_full() { return rb1_cpl_dr_full_; }





  uint8_t &lq_fm_dr_empty() { return lq_fm_dr_empty_; }





  uint8_t &lq_fm_dr_full() { return lq_fm_dr_full_; }





  uint8_t &lq_rx_dr_empty() { return lq_rx_dr_empty_; }





  uint8_t &lq_rx_dr_full() { return lq_rx_dr_full_; }





  uint8_t &wl0_tx_dr_rd_err() { return wl0_tx_dr_rd_err_; }





  uint8_t &wl1_tx_dr_rd_err() { return wl1_tx_dr_rd_err_; }





  uint8_t &rb0_tx_dr_rd_err() { return rb0_tx_dr_rd_err_; }





  uint8_t &rb1_tx_dr_rd_err() { return rb1_tx_dr_rd_err_; }





  uint8_t &lq_fm_dr_rd_err() { return lq_fm_dr_rd_err_; }





  uint8_t &cbus_flush_done() { return cbus_flush_done_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (host_overflow_ & 0x1);
    *data |= ((wl0_tx_dr_empty_ & 0x1) << 1);
    *data |= ((wl0_tx_dr_full_ & 0x1) << 2);
    *data |= ((wl0_cpl_dr_empty_ & 0x1) << 3);
    *data |= ((wl0_cpl_dr_full_ & 0x1) << 4);
    *data |= ((wl1_tx_dr_empty_ & 0x1) << 5);
    *data |= ((wl1_tx_dr_full_ & 0x1) << 6);
    *data |= ((wl1_cpl_dr_empty_ & 0x1) << 7);
    *data |= ((wl1_cpl_dr_full_ & 0x1) << 8);
    *data |= ((rb0_tx_dr_empty_ & 0x1) << 9);
    *data |= ((rb0_tx_dr_full_ & 0x1) << 10);
    *data |= ((rb0_cpl_dr_empty_ & 0x1) << 11);
    *data |= ((rb0_cpl_dr_full_ & 0x1) << 12);
    *data |= ((rb1_tx_dr_empty_ & 0x1) << 13);
    *data |= ((rb1_tx_dr_full_ & 0x1) << 14);
    *data |= ((rb1_cpl_dr_empty_ & 0x1) << 15);
    *data |= ((rb1_cpl_dr_full_ & 0x1) << 16);
    *data |= ((lq_fm_dr_empty_ & 0x1) << 17);
    *data |= ((lq_fm_dr_full_ & 0x1) << 18);
    *data |= ((lq_rx_dr_empty_ & 0x1) << 19);
    *data |= ((lq_rx_dr_full_ & 0x1) << 20);
    *data |= ((wl0_tx_dr_rd_err_ & 0x1) << 21);
    *data |= ((wl1_tx_dr_rd_err_ & 0x1) << 22);
    *data |= ((rb0_tx_dr_rd_err_ & 0x1) << 23);
    *data |= ((rb1_tx_dr_rd_err_ & 0x1) << 24);
    *data |= ((lq_fm_dr_rd_err_ & 0x1) << 25);
    *data |= ((cbus_flush_done_ & 0x1) << 26);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    host_overflow_ &= ~(data & 0x1);
    wl0_tx_dr_empty_ &= ~((data >> 1) & 0x1);
    wl0_tx_dr_full_ &= ~((data >> 2) & 0x1);
    wl0_cpl_dr_empty_ &= ~((data >> 3) & 0x1);
    wl0_cpl_dr_full_ &= ~((data >> 4) & 0x1);
    wl1_tx_dr_empty_ &= ~((data >> 5) & 0x1);
    wl1_tx_dr_full_ &= ~((data >> 6) & 0x1);
    wl1_cpl_dr_empty_ &= ~((data >> 7) & 0x1);
    wl1_cpl_dr_full_ &= ~((data >> 8) & 0x1);
    rb0_tx_dr_empty_ &= ~((data >> 9) & 0x1);
    rb0_tx_dr_full_ &= ~((data >> 10) & 0x1);
    rb0_cpl_dr_empty_ &= ~((data >> 11) & 0x1);
    rb0_cpl_dr_full_ &= ~((data >> 12) & 0x1);
    rb1_tx_dr_empty_ &= ~((data >> 13) & 0x1);
    rb1_tx_dr_full_ &= ~((data >> 14) & 0x1);
    rb1_cpl_dr_empty_ &= ~((data >> 15) & 0x1);
    rb1_cpl_dr_full_ &= ~((data >> 16) & 0x1);
    lq_fm_dr_empty_ &= ~((data >> 17) & 0x1);
    lq_fm_dr_full_ &= ~((data >> 18) & 0x1);
    lq_rx_dr_empty_ &= ~((data >> 19) & 0x1);
    lq_rx_dr_full_ &= ~((data >> 20) & 0x1);
    wl0_tx_dr_rd_err_ &= ~((data >> 21) & 0x1);
    wl1_tx_dr_rd_err_ &= ~((data >> 22) & 0x1);
    rb0_tx_dr_rd_err_ &= ~((data >> 23) & 0x1);
    rb1_tx_dr_rd_err_ &= ~((data >> 24) & 0x1);
    lq_fm_dr_rd_err_ &= ~((data >> 25) & 0x1);
    cbus_flush_done_ &= ~((data >> 26) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    host_overflow_ = 0x0;
    wl0_tx_dr_empty_ = 0x0;
    wl0_tx_dr_full_ = 0x0;
    wl0_cpl_dr_empty_ = 0x0;
    wl0_cpl_dr_full_ = 0x0;
    wl1_tx_dr_empty_ = 0x0;
    wl1_tx_dr_full_ = 0x0;
    wl1_cpl_dr_empty_ = 0x0;
    wl1_cpl_dr_full_ = 0x0;
    rb0_tx_dr_empty_ = 0x0;
    rb0_tx_dr_full_ = 0x0;
    rb0_cpl_dr_empty_ = 0x0;
    rb0_cpl_dr_full_ = 0x0;
    rb1_tx_dr_empty_ = 0x0;
    rb1_tx_dr_full_ = 0x0;
    rb1_cpl_dr_empty_ = 0x0;
    rb1_cpl_dr_full_ = 0x0;
    lq_fm_dr_empty_ = 0x0;
    lq_fm_dr_full_ = 0x0;
    lq_rx_dr_empty_ = 0x0;
    lq_rx_dr_full_ = 0x0;
    wl0_tx_dr_rd_err_ = 0x0;
    wl1_tx_dr_rd_err_ = 0x0;
    rb0_tx_dr_rd_err_ = 0x0;
    rb1_tx_dr_rd_err_ = 0x0;
    lq_fm_dr_rd_err_ = 0x0;
    cbus_flush_done_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("CbusIntStat0") + ":\n";
    r += indent_string + "  " + std::string("host_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(host_overflow_) ) + "\n";
    all_zeros &= (0 == host_overflow_);
    r += indent_string + "  " + std::string("wl0_tx_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl0_tx_dr_empty_) ) + "\n";
    all_zeros &= (0 == wl0_tx_dr_empty_);
    r += indent_string + "  " + std::string("wl0_tx_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl0_tx_dr_full_) ) + "\n";
    all_zeros &= (0 == wl0_tx_dr_full_);
    r += indent_string + "  " + std::string("wl0_cpl_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl0_cpl_dr_empty_) ) + "\n";
    all_zeros &= (0 == wl0_cpl_dr_empty_);
    r += indent_string + "  " + std::string("wl0_cpl_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl0_cpl_dr_full_) ) + "\n";
    all_zeros &= (0 == wl0_cpl_dr_full_);
    r += indent_string + "  " + std::string("wl1_tx_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl1_tx_dr_empty_) ) + "\n";
    all_zeros &= (0 == wl1_tx_dr_empty_);
    r += indent_string + "  " + std::string("wl1_tx_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl1_tx_dr_full_) ) + "\n";
    all_zeros &= (0 == wl1_tx_dr_full_);
    r += indent_string + "  " + std::string("wl1_cpl_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl1_cpl_dr_empty_) ) + "\n";
    all_zeros &= (0 == wl1_cpl_dr_empty_);
    r += indent_string + "  " + std::string("wl1_cpl_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl1_cpl_dr_full_) ) + "\n";
    all_zeros &= (0 == wl1_cpl_dr_full_);
    r += indent_string + "  " + std::string("rb0_tx_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb0_tx_dr_empty_) ) + "\n";
    all_zeros &= (0 == rb0_tx_dr_empty_);
    r += indent_string + "  " + std::string("rb0_tx_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb0_tx_dr_full_) ) + "\n";
    all_zeros &= (0 == rb0_tx_dr_full_);
    r += indent_string + "  " + std::string("rb0_cpl_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb0_cpl_dr_empty_) ) + "\n";
    all_zeros &= (0 == rb0_cpl_dr_empty_);
    r += indent_string + "  " + std::string("rb0_cpl_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb0_cpl_dr_full_) ) + "\n";
    all_zeros &= (0 == rb0_cpl_dr_full_);
    r += indent_string + "  " + std::string("rb1_tx_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb1_tx_dr_empty_) ) + "\n";
    all_zeros &= (0 == rb1_tx_dr_empty_);
    r += indent_string + "  " + std::string("rb1_tx_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb1_tx_dr_full_) ) + "\n";
    all_zeros &= (0 == rb1_tx_dr_full_);
    r += indent_string + "  " + std::string("rb1_cpl_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb1_cpl_dr_empty_) ) + "\n";
    all_zeros &= (0 == rb1_cpl_dr_empty_);
    r += indent_string + "  " + std::string("rb1_cpl_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb1_cpl_dr_full_) ) + "\n";
    all_zeros &= (0 == rb1_cpl_dr_full_);
    r += indent_string + "  " + std::string("lq_fm_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lq_fm_dr_empty_) ) + "\n";
    all_zeros &= (0 == lq_fm_dr_empty_);
    r += indent_string + "  " + std::string("lq_fm_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lq_fm_dr_full_) ) + "\n";
    all_zeros &= (0 == lq_fm_dr_full_);
    r += indent_string + "  " + std::string("lq_rx_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lq_rx_dr_empty_) ) + "\n";
    all_zeros &= (0 == lq_rx_dr_empty_);
    r += indent_string + "  " + std::string("lq_rx_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lq_rx_dr_full_) ) + "\n";
    all_zeros &= (0 == lq_rx_dr_full_);
    r += indent_string + "  " + std::string("wl0_tx_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl0_tx_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == wl0_tx_dr_rd_err_);
    r += indent_string + "  " + std::string("wl1_tx_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl1_tx_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == wl1_tx_dr_rd_err_);
    r += indent_string + "  " + std::string("rb0_tx_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb0_tx_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == rb0_tx_dr_rd_err_);
    r += indent_string + "  " + std::string("rb1_tx_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb1_tx_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == rb1_tx_dr_rd_err_);
    r += indent_string + "  " + std::string("lq_fm_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lq_fm_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == lq_fm_dr_rd_err_);
    r += indent_string + "  " + std::string("cbus_flush_done") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cbus_flush_done_) ) + "\n";
    all_zeros &= (0 == cbus_flush_done_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("CbusIntStat0") + ":\n";
    r += indent_string + "  " + std::string("host_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(host_overflow_) ) + "\n";
    all_zeros &= (0 == host_overflow_);
    r += indent_string + "  " + std::string("wl0_tx_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl0_tx_dr_empty_) ) + "\n";
    all_zeros &= (0 == wl0_tx_dr_empty_);
    r += indent_string + "  " + std::string("wl0_tx_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl0_tx_dr_full_) ) + "\n";
    all_zeros &= (0 == wl0_tx_dr_full_);
    r += indent_string + "  " + std::string("wl0_cpl_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl0_cpl_dr_empty_) ) + "\n";
    all_zeros &= (0 == wl0_cpl_dr_empty_);
    r += indent_string + "  " + std::string("wl0_cpl_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl0_cpl_dr_full_) ) + "\n";
    all_zeros &= (0 == wl0_cpl_dr_full_);
    r += indent_string + "  " + std::string("wl1_tx_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl1_tx_dr_empty_) ) + "\n";
    all_zeros &= (0 == wl1_tx_dr_empty_);
    r += indent_string + "  " + std::string("wl1_tx_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl1_tx_dr_full_) ) + "\n";
    all_zeros &= (0 == wl1_tx_dr_full_);
    r += indent_string + "  " + std::string("wl1_cpl_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl1_cpl_dr_empty_) ) + "\n";
    all_zeros &= (0 == wl1_cpl_dr_empty_);
    r += indent_string + "  " + std::string("wl1_cpl_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl1_cpl_dr_full_) ) + "\n";
    all_zeros &= (0 == wl1_cpl_dr_full_);
    r += indent_string + "  " + std::string("rb0_tx_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb0_tx_dr_empty_) ) + "\n";
    all_zeros &= (0 == rb0_tx_dr_empty_);
    r += indent_string + "  " + std::string("rb0_tx_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb0_tx_dr_full_) ) + "\n";
    all_zeros &= (0 == rb0_tx_dr_full_);
    r += indent_string + "  " + std::string("rb0_cpl_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb0_cpl_dr_empty_) ) + "\n";
    all_zeros &= (0 == rb0_cpl_dr_empty_);
    r += indent_string + "  " + std::string("rb0_cpl_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb0_cpl_dr_full_) ) + "\n";
    all_zeros &= (0 == rb0_cpl_dr_full_);
    r += indent_string + "  " + std::string("rb1_tx_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb1_tx_dr_empty_) ) + "\n";
    all_zeros &= (0 == rb1_tx_dr_empty_);
    r += indent_string + "  " + std::string("rb1_tx_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb1_tx_dr_full_) ) + "\n";
    all_zeros &= (0 == rb1_tx_dr_full_);
    r += indent_string + "  " + std::string("rb1_cpl_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb1_cpl_dr_empty_) ) + "\n";
    all_zeros &= (0 == rb1_cpl_dr_empty_);
    r += indent_string + "  " + std::string("rb1_cpl_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb1_cpl_dr_full_) ) + "\n";
    all_zeros &= (0 == rb1_cpl_dr_full_);
    r += indent_string + "  " + std::string("lq_fm_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lq_fm_dr_empty_) ) + "\n";
    all_zeros &= (0 == lq_fm_dr_empty_);
    r += indent_string + "  " + std::string("lq_fm_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lq_fm_dr_full_) ) + "\n";
    all_zeros &= (0 == lq_fm_dr_full_);
    r += indent_string + "  " + std::string("lq_rx_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lq_rx_dr_empty_) ) + "\n";
    all_zeros &= (0 == lq_rx_dr_empty_);
    r += indent_string + "  " + std::string("lq_rx_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lq_rx_dr_full_) ) + "\n";
    all_zeros &= (0 == lq_rx_dr_full_);
    r += indent_string + "  " + std::string("wl0_tx_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl0_tx_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == wl0_tx_dr_rd_err_);
    r += indent_string + "  " + std::string("wl1_tx_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wl1_tx_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == wl1_tx_dr_rd_err_);
    r += indent_string + "  " + std::string("rb0_tx_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb0_tx_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == rb0_tx_dr_rd_err_);
    r += indent_string + "  " + std::string("rb1_tx_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb1_tx_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == rb1_tx_dr_rd_err_);
    r += indent_string + "  " + std::string("lq_fm_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lq_fm_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == lq_fm_dr_rd_err_);
    r += indent_string + "  " + std::string("cbus_flush_done") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cbus_flush_done_) ) + "\n";
    all_zeros &= (0 == cbus_flush_done_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t host_overflow_;
  uint8_t wl0_tx_dr_empty_;
  uint8_t wl0_tx_dr_full_;
  uint8_t wl0_cpl_dr_empty_;
  uint8_t wl0_cpl_dr_full_;
  uint8_t wl1_tx_dr_empty_;
  uint8_t wl1_tx_dr_full_;
  uint8_t wl1_cpl_dr_empty_;
  uint8_t wl1_cpl_dr_full_;
  uint8_t rb0_tx_dr_empty_;
  uint8_t rb0_tx_dr_full_;
  uint8_t rb0_cpl_dr_empty_;
  uint8_t rb0_cpl_dr_full_;
  uint8_t rb1_tx_dr_empty_;
  uint8_t rb1_tx_dr_full_;
  uint8_t rb1_cpl_dr_empty_;
  uint8_t rb1_cpl_dr_full_;
  uint8_t lq_fm_dr_empty_;
  uint8_t lq_fm_dr_full_;
  uint8_t lq_rx_dr_empty_;
  uint8_t lq_rx_dr_full_;
  uint8_t wl0_tx_dr_rd_err_;
  uint8_t wl1_tx_dr_rd_err_;
  uint8_t rb0_tx_dr_rd_err_;
  uint8_t rb1_tx_dr_rd_err_;
  uint8_t lq_fm_dr_rd_err_;
  uint8_t cbus_flush_done_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x280000; // to get to cbc
    offset += 0x24; // to get to intr_stat0
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_CBUS_INT_STAT0_H__
