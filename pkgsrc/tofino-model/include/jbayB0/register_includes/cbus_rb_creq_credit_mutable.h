/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_CBUS_RB_CREQ_CREDIT_MUTABLE_H__
#define __REGISTER_INCLUDES_CBUS_RB_CREQ_CREDIT_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class CbusRbCreqCreditMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  CbusRbCreqCreditMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 12, true, write_callback, read_callback, std::string("CbusRbCreqCreditMutable"))
    {
    }
  CbusRbCreqCreditMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "CbusRbCreqCreditMutable")
    {
    }
public:







  uint8_t credit(int j0) { return credit_[j0]; }
  void credit(int j0,const uint8_t &v) { credit_[j0]=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (credit_[0] & 0x1f);
      *data |= ((credit_[1] & 0x1f) << 5);
      *data |= ((credit_[2] & 0x1f) << 10);
      *data |= ((credit_[3] & 0x1f) << 15);
      *data |= ((credit_[4] & 0x1f) << 20);
      *data |= ((credit_[5] & 0x1f) << 25);
      *data |= ((credit_[6] & 0x3) << 30);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = ((credit_[6] & 0x1c) >> 2);
      *data |= ((credit_[7] & 0x1f) << 3);
      *data |= ((credit_[8] & 0x1f) << 8);
      *data |= ((credit_[9] & 0x1f) << 13);
      *data |= ((credit_[10] & 0x1f) << 18);
      *data |= ((credit_[11] & 0x1f) << 23);
      *data |= ((credit_[12] & 0xf) << 28);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = ((credit_[12] & 0x10) >> 4);
      *data |= ((credit_[13] & 0x1f) << 1);
      *data |= ((credit_[14] & 0x1f) << 6);
      *data |= ((credit_[15] & 0x1f) << 11);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      credit_[0] = (data & 0x1f);
      credit_[1] = ((data >> 5) & 0x1f);
      credit_[2] = ((data >> 10) & 0x1f);
      credit_[3] = ((data >> 15) & 0x1f);
      credit_[4] = ((data >> 20) & 0x1f);
      credit_[5] = ((data >> 25) & 0x1f);
      credit_[6] = (((data >> 30) & 0x3) | (credit_[6] & 0x1c));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      credit_[6] = (((data << 2) & 0x1c) | (credit_[6] & 0x3));
      credit_[7] = ((data >> 3) & 0x1f);
      credit_[8] = ((data >> 8) & 0x1f);
      credit_[9] = ((data >> 13) & 0x1f);
      credit_[10] = ((data >> 18) & 0x1f);
      credit_[11] = ((data >> 23) & 0x1f);
      credit_[12] = (((data >> 28) & 0xf) | (credit_[12] & 0x10));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      credit_[12] = (((data << 4) & 0x10) | (credit_[12] & 0xf));
      credit_[13] = ((data >> 1) & 0x1f);
      credit_[14] = ((data >> 6) & 0x1f);
      credit_[15] = ((data >> 11) & 0x1f);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    credit_[0] = 0x0;
    credit_[1] = 0x0;
    credit_[2] = 0x0;
    credit_[3] = 0x0;
    credit_[4] = 0x0;
    credit_[5] = 0x0;
    credit_[6] = 0x0;
    credit_[7] = 0x0;
    credit_[8] = 0x0;
    credit_[9] = 0x0;
    credit_[10] = 0x0;
    credit_[11] = 0x0;
    credit_[12] = 0x0;
    credit_[13] = 0x0;
    credit_[14] = 0x0;
    credit_[15] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("CbusRbCreqCreditMutable") + ":\n";
    for (uint32_t f=0;f<16;++f) {
      r += indent_string + "  " + std::string("credit") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(credit_[f]) ) + "\n";
      all_zeros &= (0 == credit_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("CbusRbCreqCreditMutable") + ":\n";
    for (uint32_t f=0;f<16;++f) {
      r += indent_string + "  " + std::string("credit") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(credit_[f]) ) + "\n";
      all_zeros &= (0 == credit_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 16 > credit_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x280000; // to get to cbc
    offset += 0xc0; // to get to rb_creq_credit
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_CBUS_RB_CREQ_CREDIT_MUTABLE_H__
