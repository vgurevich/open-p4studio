/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_CBUS_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_CBUS_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "cbus_arb_ctrl_mutable.h"
#include "cbus_controller_mbe_log_mutable.h"
#include "cbus_controller_sbe_log_mutable.h"
#include "cbus_ctrl_mutable.h"
#include "cbus_dma_log_mutable.h"
#include "cbus_flush_mutable.h"
#include "cbus_freeze_en0_mutable.h"
#include "cbus_freeze_en1_mutable.h"
#include "cbus_host_creq_credit_mutable.h"
#include "cbus_host_slv_credit_mutable.h"
#include "cbus_int_en0_0_mutable.h"
#include "cbus_int_en0_1_mutable.h"
#include "cbus_int_en0_2_mutable.h"
#include "cbus_int_en0_3_mutable.h"
#include "cbus_int_en1_0_mutable.h"
#include "cbus_int_en1_1_mutable.h"
#include "cbus_int_en1_2_mutable.h"
#include "cbus_int_en1_3_mutable.h"
#include "cbus_int_inj_mutable.h"
#include "cbus_int_stat0_mutable.h"
#include "cbus_int_stat1_mutable.h"
#include "cbus_link_down_mutable.h"
#include "cbus_lq_fm_dr_rd_err_log_mutable.h"
#include "cbus_lq_slot_credit_mutable.h"
#include "cbus_mst_ctrl_log_mutable.h"
#include "cbus_parity_err_log_mutable.h"
#include "cbus_pri_ctrl_mutable.h"
#include "cbus_rb_creq_credit_mutable.h"
#include "cbus_rb_tx_dr_rd_err_log_mutable.h"
#include "cbus_wl_creq_credit_mutable.h"
#include "cbus_wl_tx_dr_rd_err_log_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class CbusRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  CbusRspecMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 240, true, write_callback, read_callback, std::string("CbusRspecMutable"))
    {
    }
  CbusRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "CbusRspecMutable")
    {
    }
public:





  CbusCtrlMutable &ctrl() { return ctrl_; }





  CbusFlushMutable &flush() { return flush_; }





  CbusLinkDownMutable &link_down() { return link_down_; }






  CbusArbCtrlMutable &arb_ctrl() { return arb_ctrl_; }








  CbusPriCtrlMutable &pri_ctrl() { return pri_ctrl_; }





  CbusIntStat0Mutable &intr_stat0() { return intr_stat0_; }





  CbusIntStat1Mutable &intr_stat1() { return intr_stat1_; }





  CbusIntEn0_0Mutable &intr_en0_0() { return intr_en0_0_; }





  CbusIntEn0_1Mutable &intr_en0_1() { return intr_en0_1_; }





  CbusIntEn0_2Mutable &intr_en0_2() { return intr_en0_2_; }





  CbusIntEn0_3Mutable &intr_en0_3() { return intr_en0_3_; }





  CbusIntEn1_0Mutable &intr_en1_0() { return intr_en1_0_; }





  CbusIntEn1_1Mutable &intr_en1_1() { return intr_en1_1_; }





  CbusIntEn1_2Mutable &intr_en1_2() { return intr_en1_2_; }





  CbusIntEn1_3Mutable &intr_en1_3() { return intr_en1_3_; }





  CbusFreezeEn0Mutable &freeze_en0() { return freeze_en0_; }





  CbusFreezeEn1Mutable &freeze_en1() { return freeze_en1_; }





  CbusIntInjMutable &intr_inj() { return intr_inj_; }







  CbusWlTxDrRdErrLogMutable &wl_tx_dr_rd_err_log(int j0) { return wl_tx_dr_rd_err_log_[j0]; }







  CbusRbTxDrRdErrLogMutable &rb_tx_dr_rd_err_log(int j0) { return rb_tx_dr_rd_err_log_[j0]; }





  CbusLqFmDrRdErrLogMutable &lq_fm_dr_rd_err_log() { return lq_fm_dr_rd_err_log_; }





  CbusControllerMbeLogMutable &controller_mbe_log() { return controller_mbe_log_; }





  CbusControllerSbeLogMutable &controller_sbe_log() { return controller_sbe_log_; }
















  CbusParityErrLogMutable &parity_err_log(int j0) { return parity_err_log_[j0]; }





  CbusHostCreqCreditMutable &host_creq_credit() { return host_creq_credit_; }





  CbusWlCreqCreditMutable &wl_creq_credit() { return wl_creq_credit_; }





  CbusRbCreqCreditMutable &rb_creq_credit() { return rb_creq_credit_; }





  CbusLqSlotCreditMutable &lq_slot_credit() { return lq_slot_credit_; }





  CbusHostSlvCreditMutable &host_slave_credit() { return host_slave_credit_; }





  CbusDmaLogMutable &dma_log() { return dma_log_; }





  CbusMstCtrlLogMutable &mst_ctrl_log() { return mst_ctrl_log_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      ctrl_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      flush_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      link_down_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      arb_ctrl_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      pri_ctrl_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      intr_stat0_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      intr_stat1_.read( offset, data );
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      if (read_callback_) read_callback_();
      intr_en0_0_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      intr_en0_1_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      intr_en0_2_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      intr_en0_3_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      intr_en1_0_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      intr_en1_1_.read( offset, data );
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      if (read_callback_) read_callback_();
      intr_en1_2_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      intr_en1_3_.read( offset, data );
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      if (read_callback_) read_callback_();
      freeze_en0_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      freeze_en1_.read( offset, data );
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      if (read_callback_) read_callback_();
      intr_inj_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wl_tx_dr_rd_err_log_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      rb_tx_dr_rd_err_log_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      if (read_callback_) read_callback_();
      lq_fm_dr_rd_err_log_.read( offset, data );
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      if (read_callback_) read_callback_();
      controller_mbe_log_.read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      if (read_callback_) read_callback_();
      controller_sbe_log_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x9c) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      parity_err_log_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xac) {
      offset -= 0xa0;
      if (read_callback_) read_callback_();
      host_creq_credit_.read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xbc) {
      offset -= 0xb0;
      if (read_callback_) read_callback_();
      wl_creq_credit_.read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xcc) {
      offset -= 0xc0;
      if (read_callback_) read_callback_();
      rb_creq_credit_.read( offset, data );
    }
    else if (offset >= 0xcc && offset < 0xd0) {
      offset -= 0xcc;
      if (read_callback_) read_callback_();
      lq_slot_credit_.read( offset, data );
    }
    else if (offset >= 0xd0 && offset < 0xd4) {
      offset -= 0xd0;
      if (read_callback_) read_callback_();
      host_slave_credit_.read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0xec) {
      offset -= 0xe0;
      if (read_callback_) read_callback_();
      dma_log_.read( offset, data );
    }
    else if (offset >= 0xec && offset < 0xf0) {
      offset -= 0xec;
      if (read_callback_) read_callback_();
      mst_ctrl_log_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      flush_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      link_down_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      arb_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      pri_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      intr_stat0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      intr_stat1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      intr_en0_0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      intr_en0_1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      intr_en0_2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      intr_en0_3_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      intr_en1_0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      intr_en1_1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      intr_en1_2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      intr_en1_3_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      freeze_en0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      freeze_en1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      intr_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wl_tx_dr_rd_err_log_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      rb_tx_dr_rd_err_log_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      lq_fm_dr_rd_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      controller_mbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      controller_sbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x9c) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      parity_err_log_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xac) {
      offset -= 0xa0;
      host_creq_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xbc) {
      offset -= 0xb0;
      wl_creq_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xcc) {
      offset -= 0xc0;
      rb_creq_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xcc && offset < 0xd0) {
      offset -= 0xcc;
      lq_slot_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd0 && offset < 0xd4) {
      offset -= 0xd0;
      host_slave_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0xec) {
      offset -= 0xe0;
      dma_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xec && offset < 0xf0) {
      offset -= 0xec;
      mst_ctrl_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    ctrl_.reset();
    flush_.reset();
    link_down_.reset();
    arb_ctrl_.reset();
    pri_ctrl_.reset();
    intr_stat0_.reset();
    intr_stat1_.reset();
    intr_en0_0_.reset();
    intr_en0_1_.reset();
    intr_en0_2_.reset();
    intr_en0_3_.reset();
    intr_en1_0_.reset();
    intr_en1_1_.reset();
    intr_en1_2_.reset();
    intr_en1_3_.reset();
    freeze_en0_.reset();
    freeze_en1_.reset();
    intr_inj_.reset();
    for (auto &f0 : wl_tx_dr_rd_err_log_) {
      f0.reset();
    }
    for (auto &f0 : rb_tx_dr_rd_err_log_) {
      f0.reset();
    }
    lq_fm_dr_rd_err_log_.reset();
    controller_mbe_log_.reset();
    controller_sbe_log_.reset();
    for (auto &f0 : parity_err_log_) {
      f0.reset();
    }
    host_creq_credit_.reset();
    wl_creq_credit_.reset();
    rb_creq_credit_.reset();
    lq_slot_credit_.reset();
    host_slave_credit_.reset();
    dma_log_.reset();
    mst_ctrl_log_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += flush_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += link_down_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += arb_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += pri_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += intr_stat0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += intr_stat1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      r += intr_en0_0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += intr_en0_1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += intr_en0_2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += intr_en0_3_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += intr_en1_0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      r += intr_en1_1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      r += intr_en1_2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      r += intr_en1_3_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      r += freeze_en0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      r += freeze_en1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      r += intr_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wl_tx_dr_rd_err_log_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += rb_tx_dr_rd_err_log_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      r += lq_fm_dr_rd_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      r += controller_mbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      r += controller_sbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x9c) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += parity_err_log_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xac) {
      offset -= 0xa0;
      r += host_creq_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xbc) {
      offset -= 0xb0;
      r += wl_creq_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xcc) {
      offset -= 0xc0;
      r += rb_creq_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xcc && offset < 0xd0) {
      offset -= 0xcc;
      r += lq_slot_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd0 && offset < 0xd4) {
      offset -= 0xd0;
      r += host_slave_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0xec) {
      offset -= 0xe0;
      r += dma_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xec && offset < 0xf0) {
      offset -= 0xec;
      r += mst_ctrl_log_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += ctrl_.to_string(print_zeros,indent_string) ;
    r += flush_.to_string(print_zeros,indent_string) ;
    r += link_down_.to_string(print_zeros,indent_string) ;
    r += arb_ctrl_.to_string(print_zeros,indent_string) ;
    r += pri_ctrl_.to_string(print_zeros,indent_string) ;
    r += intr_stat0_.to_string(print_zeros,indent_string) ;
    r += intr_stat1_.to_string(print_zeros,indent_string) ;
    r += intr_en0_0_.to_string(print_zeros,indent_string) ;
    r += intr_en0_1_.to_string(print_zeros,indent_string) ;
    r += intr_en0_2_.to_string(print_zeros,indent_string) ;
    r += intr_en0_3_.to_string(print_zeros,indent_string) ;
    r += intr_en1_0_.to_string(print_zeros,indent_string) ;
    r += intr_en1_1_.to_string(print_zeros,indent_string) ;
    r += intr_en1_2_.to_string(print_zeros,indent_string) ;
    r += intr_en1_3_.to_string(print_zeros,indent_string) ;
    r += freeze_en0_.to_string(print_zeros,indent_string) ;
    r += freeze_en1_.to_string(print_zeros,indent_string) ;
    r += intr_inj_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<2;++a0) {
      r += wl_tx_dr_rd_err_log_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += rb_tx_dr_rd_err_log_[a0].to_string(print_zeros,indent_string) ;
    }
    r += lq_fm_dr_rd_err_log_.to_string(print_zeros,indent_string) ;
    r += controller_mbe_log_.to_string(print_zeros,indent_string) ;
    r += controller_sbe_log_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<7;++a0) {
      r += parity_err_log_[a0].to_string(print_zeros,indent_string) ;
    }
    r += host_creq_credit_.to_string(print_zeros,indent_string) ;
    r += wl_creq_credit_.to_string(print_zeros,indent_string) ;
    r += rb_creq_credit_.to_string(print_zeros,indent_string) ;
    r += lq_slot_credit_.to_string(print_zeros,indent_string) ;
    r += host_slave_credit_.to_string(print_zeros,indent_string) ;
    r += dma_log_.to_string(print_zeros,indent_string) ;
    r += mst_ctrl_log_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  CbusCtrlMutable ctrl_;
  CbusFlushMutable flush_;
  CbusLinkDownMutable link_down_;
  CbusArbCtrlMutable arb_ctrl_;
  CbusPriCtrlMutable pri_ctrl_;
  CbusIntStat0Mutable intr_stat0_;
  CbusIntStat1Mutable intr_stat1_;
  CbusIntEn0_0Mutable intr_en0_0_;
  CbusIntEn0_1Mutable intr_en0_1_;
  CbusIntEn0_2Mutable intr_en0_2_;
  CbusIntEn0_3Mutable intr_en0_3_;
  CbusIntEn1_0Mutable intr_en1_0_;
  CbusIntEn1_1Mutable intr_en1_1_;
  CbusIntEn1_2Mutable intr_en1_2_;
  CbusIntEn1_3Mutable intr_en1_3_;
  CbusFreezeEn0Mutable freeze_en0_;
  CbusFreezeEn1Mutable freeze_en1_;
  CbusIntInjMutable intr_inj_;
  std::array< CbusWlTxDrRdErrLogMutable, 2 > wl_tx_dr_rd_err_log_;
  std::array< CbusRbTxDrRdErrLogMutable, 2 > rb_tx_dr_rd_err_log_;
  CbusLqFmDrRdErrLogMutable lq_fm_dr_rd_err_log_;
  CbusControllerMbeLogMutable controller_mbe_log_;
  CbusControllerSbeLogMutable controller_sbe_log_;
  std::array< CbusParityErrLogMutable, 7 > parity_err_log_;
  CbusHostCreqCreditMutable host_creq_credit_;
  CbusWlCreqCreditMutable wl_creq_credit_;
  CbusRbCreqCreditMutable rb_creq_credit_;
  CbusLqSlotCreditMutable lq_slot_credit_;
  CbusHostSlvCreditMutable host_slave_credit_;
  CbusDmaLogMutable dma_log_;
  CbusMstCtrlLogMutable mst_ctrl_log_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x280000; // to get to cbc
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_CBUS_RSPEC_MUTABLE_H__
