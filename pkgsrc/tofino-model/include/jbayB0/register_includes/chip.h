/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_CHIP_H__
#define __REGISTER_INCLUDES_CHIP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "dvsl_addrmap.h"
#include "eth100g_addrmap.h"
#include "eth400g_addrmap.h"
#include "eth_gpio_regs.h"
#include "gpio_iotile_rspec.h"
#include "pipe_addrmap.h"
#include "serdes_addrmap.h"

namespace jbayB0 {
  namespace register_classes {

class Chip : public model_core::RegisterBlock<RegisterCallback> {
public:
  Chip(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 134217728, false, write_callback, read_callback, std::string("Chip"))
    {
    }
  Chip(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "Chip")
    {
    }
public:





  DvslAddrmap &device_select() { return device_select_; }





  Eth100gAddrmap &eth100g_regs() { return eth100g_regs_; }





  Eth400gAddrmap &eth400g_p1() { return eth400g_p1_; }





  Eth400gAddrmap &eth400g_p2() { return eth400g_p2_; }





  Eth400gAddrmap &eth400g_p3() { return eth400g_p3_; }





  Eth400gAddrmap &eth400g_p4() { return eth400g_p4_; }





  Eth400gAddrmap &eth400g_p5() { return eth400g_p5_; }





  Eth400gAddrmap &eth400g_p6() { return eth400g_p6_; }





  Eth400gAddrmap &eth400g_p7() { return eth400g_p7_; }





  Eth400gAddrmap &eth400g_p8() { return eth400g_p8_; }





  Eth400gAddrmap &eth400g_p9() { return eth400g_p9_; }





  Eth400gAddrmap &eth400g_p10() { return eth400g_p10_; }





  Eth400gAddrmap &eth400g_p11() { return eth400g_p11_; }





  Eth400gAddrmap &eth400g_p12() { return eth400g_p12_; }





  Eth400gAddrmap &eth400g_p13() { return eth400g_p13_; }





  Eth400gAddrmap &eth400g_p14() { return eth400g_p14_; }





  Eth400gAddrmap &eth400g_p15() { return eth400g_p15_; }





  Eth400gAddrmap &eth400g_p16() { return eth400g_p16_; }





  Eth400gAddrmap &eth400g_p17() { return eth400g_p17_; }





  Eth400gAddrmap &eth400g_p18() { return eth400g_p18_; }





  Eth400gAddrmap &eth400g_p19() { return eth400g_p19_; }





  Eth400gAddrmap &eth400g_p20() { return eth400g_p20_; }





  Eth400gAddrmap &eth400g_p21() { return eth400g_p21_; }





  Eth400gAddrmap &eth400g_p22() { return eth400g_p22_; }





  Eth400gAddrmap &eth400g_p23() { return eth400g_p23_; }





  Eth400gAddrmap &eth400g_p24() { return eth400g_p24_; }





  Eth400gAddrmap &eth400g_p25() { return eth400g_p25_; }





  Eth400gAddrmap &eth400g_p26() { return eth400g_p26_; }





  Eth400gAddrmap &eth400g_p27() { return eth400g_p27_; }





  Eth400gAddrmap &eth400g_p28() { return eth400g_p28_; }





  Eth400gAddrmap &eth400g_p29() { return eth400g_p29_; }





  Eth400gAddrmap &eth400g_p30() { return eth400g_p30_; }





  Eth400gAddrmap &eth400g_p31() { return eth400g_p31_; }





  Eth400gAddrmap &eth400g_p32() { return eth400g_p32_; }





  EthGpioRegs &ethgpiobr() { return ethgpiobr_; }





  EthGpioRegs &ethgpiotl() { return ethgpiotl_; }





  GpioIotileRspec &gpio_iotile_bl() { return gpio_iotile_bl_; }





  GpioIotileRspec &gpio_iotile_br() { return gpio_iotile_br_; }





  GpioIotileRspec &gpio_iotile_tr() { return gpio_iotile_tr_; }





  GpioIotileRspec &gpio_iotile_tl() { return gpio_iotile_tl_; }





  Eth100gAddrmap &eth100g_regs_rot() { return eth100g_regs_rot_; }




  SerdesAddrmap &serdes() { return serdes_; }







  PipeAddrmap &pipes(int j0) { return pipes_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x1000000) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      device_select_.read( offset, data );
    }
    else if (offset >= 0x2000000 && offset < 0x2040000) {
      offset -= 0x2000000;
      if (read_callback_) read_callback_();
      eth100g_regs_.read( offset, data );
    }
    else if (offset >= 0x2040000 && offset < 0x2080000) {
      offset -= 0x2040000;
      if (read_callback_) read_callback_();
      eth400g_p1_.read( offset, data );
    }
    else if (offset >= 0x2080000 && offset < 0x20c0000) {
      offset -= 0x2080000;
      if (read_callback_) read_callback_();
      eth400g_p2_.read( offset, data );
    }
    else if (offset >= 0x20c0000 && offset < 0x2100000) {
      offset -= 0x20c0000;
      if (read_callback_) read_callback_();
      eth400g_p3_.read( offset, data );
    }
    else if (offset >= 0x2100000 && offset < 0x2140000) {
      offset -= 0x2100000;
      if (read_callback_) read_callback_();
      eth400g_p4_.read( offset, data );
    }
    else if (offset >= 0x2140000 && offset < 0x2180000) {
      offset -= 0x2140000;
      if (read_callback_) read_callback_();
      eth400g_p5_.read( offset, data );
    }
    else if (offset >= 0x2180000 && offset < 0x21c0000) {
      offset -= 0x2180000;
      if (read_callback_) read_callback_();
      eth400g_p6_.read( offset, data );
    }
    else if (offset >= 0x21c0000 && offset < 0x2200000) {
      offset -= 0x21c0000;
      if (read_callback_) read_callback_();
      eth400g_p7_.read( offset, data );
    }
    else if (offset >= 0x2200000 && offset < 0x2240000) {
      offset -= 0x2200000;
      if (read_callback_) read_callback_();
      eth400g_p8_.read( offset, data );
    }
    else if (offset >= 0x2240000 && offset < 0x2280000) {
      offset -= 0x2240000;
      if (read_callback_) read_callback_();
      eth400g_p9_.read( offset, data );
    }
    else if (offset >= 0x2280000 && offset < 0x22c0000) {
      offset -= 0x2280000;
      if (read_callback_) read_callback_();
      eth400g_p10_.read( offset, data );
    }
    else if (offset >= 0x22c0000 && offset < 0x2300000) {
      offset -= 0x22c0000;
      if (read_callback_) read_callback_();
      eth400g_p11_.read( offset, data );
    }
    else if (offset >= 0x2300000 && offset < 0x2340000) {
      offset -= 0x2300000;
      if (read_callback_) read_callback_();
      eth400g_p12_.read( offset, data );
    }
    else if (offset >= 0x2340000 && offset < 0x2380000) {
      offset -= 0x2340000;
      if (read_callback_) read_callback_();
      eth400g_p13_.read( offset, data );
    }
    else if (offset >= 0x2380000 && offset < 0x23c0000) {
      offset -= 0x2380000;
      if (read_callback_) read_callback_();
      eth400g_p14_.read( offset, data );
    }
    else if (offset >= 0x23c0000 && offset < 0x2400000) {
      offset -= 0x23c0000;
      if (read_callback_) read_callback_();
      eth400g_p15_.read( offset, data );
    }
    else if (offset >= 0x2400000 && offset < 0x2440000) {
      offset -= 0x2400000;
      if (read_callback_) read_callback_();
      eth400g_p16_.read( offset, data );
    }
    else if (offset >= 0x2440000 && offset < 0x2480000) {
      offset -= 0x2440000;
      if (read_callback_) read_callback_();
      eth400g_p17_.read( offset, data );
    }
    else if (offset >= 0x2480000 && offset < 0x24c0000) {
      offset -= 0x2480000;
      if (read_callback_) read_callback_();
      eth400g_p18_.read( offset, data );
    }
    else if (offset >= 0x24c0000 && offset < 0x2500000) {
      offset -= 0x24c0000;
      if (read_callback_) read_callback_();
      eth400g_p19_.read( offset, data );
    }
    else if (offset >= 0x2500000 && offset < 0x2540000) {
      offset -= 0x2500000;
      if (read_callback_) read_callback_();
      eth400g_p20_.read( offset, data );
    }
    else if (offset >= 0x2540000 && offset < 0x2580000) {
      offset -= 0x2540000;
      if (read_callback_) read_callback_();
      eth400g_p21_.read( offset, data );
    }
    else if (offset >= 0x2580000 && offset < 0x25c0000) {
      offset -= 0x2580000;
      if (read_callback_) read_callback_();
      eth400g_p22_.read( offset, data );
    }
    else if (offset >= 0x25c0000 && offset < 0x2600000) {
      offset -= 0x25c0000;
      if (read_callback_) read_callback_();
      eth400g_p23_.read( offset, data );
    }
    else if (offset >= 0x2600000 && offset < 0x2640000) {
      offset -= 0x2600000;
      if (read_callback_) read_callback_();
      eth400g_p24_.read( offset, data );
    }
    else if (offset >= 0x2640000 && offset < 0x2680000) {
      offset -= 0x2640000;
      if (read_callback_) read_callback_();
      eth400g_p25_.read( offset, data );
    }
    else if (offset >= 0x2680000 && offset < 0x26c0000) {
      offset -= 0x2680000;
      if (read_callback_) read_callback_();
      eth400g_p26_.read( offset, data );
    }
    else if (offset >= 0x26c0000 && offset < 0x2700000) {
      offset -= 0x26c0000;
      if (read_callback_) read_callback_();
      eth400g_p27_.read( offset, data );
    }
    else if (offset >= 0x2700000 && offset < 0x2740000) {
      offset -= 0x2700000;
      if (read_callback_) read_callback_();
      eth400g_p28_.read( offset, data );
    }
    else if (offset >= 0x2740000 && offset < 0x2780000) {
      offset -= 0x2740000;
      if (read_callback_) read_callback_();
      eth400g_p29_.read( offset, data );
    }
    else if (offset >= 0x2780000 && offset < 0x27c0000) {
      offset -= 0x2780000;
      if (read_callback_) read_callback_();
      eth400g_p30_.read( offset, data );
    }
    else if (offset >= 0x27c0000 && offset < 0x2800000) {
      offset -= 0x27c0000;
      if (read_callback_) read_callback_();
      eth400g_p31_.read( offset, data );
    }
    else if (offset >= 0x2800000 && offset < 0x2840000) {
      offset -= 0x2800000;
      if (read_callback_) read_callback_();
      eth400g_p32_.read( offset, data );
    }
    else if (offset >= 0x2840000 && offset < 0x2880000) {
      offset -= 0x2840000;
      if (read_callback_) read_callback_();
      ethgpiobr_.read( offset, data );
    }
    else if (offset >= 0x2880000 && offset < 0x28c0000) {
      offset -= 0x2880000;
      if (read_callback_) read_callback_();
      ethgpiotl_.read( offset, data );
    }
    else if (offset >= 0x28c0000 && offset < 0x28c002c) {
      offset -= 0x28c0000;
      if (read_callback_) read_callback_();
      gpio_iotile_bl_.read( offset, data );
    }
    else if (offset >= 0x2900000 && offset < 0x290002c) {
      offset -= 0x2900000;
      if (read_callback_) read_callback_();
      gpio_iotile_br_.read( offset, data );
    }
    else if (offset >= 0x2940000 && offset < 0x294002c) {
      offset -= 0x2940000;
      if (read_callback_) read_callback_();
      gpio_iotile_tr_.read( offset, data );
    }
    else if (offset >= 0x2980000 && offset < 0x298002c) {
      offset -= 0x2980000;
      if (read_callback_) read_callback_();
      gpio_iotile_tl_.read( offset, data );
    }
    else if (offset >= 0x29c0000 && offset < 0x2a00000) {
      offset -= 0x29c0000;
      if (read_callback_) read_callback_();
      eth100g_regs_rot_.read( offset, data );
    }
    else if (offset >= 0x3000000 && offset < 0x4000000) {
      offset -= 0x3000000;
      if (read_callback_) read_callback_();
      serdes_.read( offset, data );
    }
    else if (offset >= 0x4000000 && offset < 0x8000000) {
      offset -= 0x4000000;
      int i0 = offset / 0x1000000;
      offset  -= i0 * 0x1000000;
      if (read_callback_) read_callback_();
      pipes_[ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x1000000) {
      offset -= 0x0;
      device_select_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2000000 && offset < 0x2040000) {
      offset -= 0x2000000;
      eth100g_regs_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2040000 && offset < 0x2080000) {
      offset -= 0x2040000;
      eth400g_p1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2080000 && offset < 0x20c0000) {
      offset -= 0x2080000;
      eth400g_p2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20c0000 && offset < 0x2100000) {
      offset -= 0x20c0000;
      eth400g_p3_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2100000 && offset < 0x2140000) {
      offset -= 0x2100000;
      eth400g_p4_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2140000 && offset < 0x2180000) {
      offset -= 0x2140000;
      eth400g_p5_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2180000 && offset < 0x21c0000) {
      offset -= 0x2180000;
      eth400g_p6_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x21c0000 && offset < 0x2200000) {
      offset -= 0x21c0000;
      eth400g_p7_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2200000 && offset < 0x2240000) {
      offset -= 0x2200000;
      eth400g_p8_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2240000 && offset < 0x2280000) {
      offset -= 0x2240000;
      eth400g_p9_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2280000 && offset < 0x22c0000) {
      offset -= 0x2280000;
      eth400g_p10_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x22c0000 && offset < 0x2300000) {
      offset -= 0x22c0000;
      eth400g_p11_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2300000 && offset < 0x2340000) {
      offset -= 0x2300000;
      eth400g_p12_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2340000 && offset < 0x2380000) {
      offset -= 0x2340000;
      eth400g_p13_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2380000 && offset < 0x23c0000) {
      offset -= 0x2380000;
      eth400g_p14_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x23c0000 && offset < 0x2400000) {
      offset -= 0x23c0000;
      eth400g_p15_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2400000 && offset < 0x2440000) {
      offset -= 0x2400000;
      eth400g_p16_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2440000 && offset < 0x2480000) {
      offset -= 0x2440000;
      eth400g_p17_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2480000 && offset < 0x24c0000) {
      offset -= 0x2480000;
      eth400g_p18_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24c0000 && offset < 0x2500000) {
      offset -= 0x24c0000;
      eth400g_p19_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2500000 && offset < 0x2540000) {
      offset -= 0x2500000;
      eth400g_p20_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2540000 && offset < 0x2580000) {
      offset -= 0x2540000;
      eth400g_p21_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2580000 && offset < 0x25c0000) {
      offset -= 0x2580000;
      eth400g_p22_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x25c0000 && offset < 0x2600000) {
      offset -= 0x25c0000;
      eth400g_p23_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2600000 && offset < 0x2640000) {
      offset -= 0x2600000;
      eth400g_p24_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2640000 && offset < 0x2680000) {
      offset -= 0x2640000;
      eth400g_p25_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2680000 && offset < 0x26c0000) {
      offset -= 0x2680000;
      eth400g_p26_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x26c0000 && offset < 0x2700000) {
      offset -= 0x26c0000;
      eth400g_p27_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2700000 && offset < 0x2740000) {
      offset -= 0x2700000;
      eth400g_p28_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2740000 && offset < 0x2780000) {
      offset -= 0x2740000;
      eth400g_p29_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2780000 && offset < 0x27c0000) {
      offset -= 0x2780000;
      eth400g_p30_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x27c0000 && offset < 0x2800000) {
      offset -= 0x27c0000;
      eth400g_p31_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2800000 && offset < 0x2840000) {
      offset -= 0x2800000;
      eth400g_p32_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2840000 && offset < 0x2880000) {
      offset -= 0x2840000;
      ethgpiobr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2880000 && offset < 0x28c0000) {
      offset -= 0x2880000;
      ethgpiotl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28c0000 && offset < 0x28c002c) {
      offset -= 0x28c0000;
      gpio_iotile_bl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2900000 && offset < 0x290002c) {
      offset -= 0x2900000;
      gpio_iotile_br_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2940000 && offset < 0x294002c) {
      offset -= 0x2940000;
      gpio_iotile_tr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2980000 && offset < 0x298002c) {
      offset -= 0x2980000;
      gpio_iotile_tl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x29c0000 && offset < 0x2a00000) {
      offset -= 0x29c0000;
      eth100g_regs_rot_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3000000 && offset < 0x4000000) {
      offset -= 0x3000000;
      serdes_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4000000 && offset < 0x8000000) {
      offset -= 0x4000000;
      int i0 = offset / 0x1000000;
      offset  -= i0 * 0x1000000;
      pipes_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    device_select_.reset();
    eth100g_regs_.reset();
    eth400g_p1_.reset();
    eth400g_p2_.reset();
    eth400g_p3_.reset();
    eth400g_p4_.reset();
    eth400g_p5_.reset();
    eth400g_p6_.reset();
    eth400g_p7_.reset();
    eth400g_p8_.reset();
    eth400g_p9_.reset();
    eth400g_p10_.reset();
    eth400g_p11_.reset();
    eth400g_p12_.reset();
    eth400g_p13_.reset();
    eth400g_p14_.reset();
    eth400g_p15_.reset();
    eth400g_p16_.reset();
    eth400g_p17_.reset();
    eth400g_p18_.reset();
    eth400g_p19_.reset();
    eth400g_p20_.reset();
    eth400g_p21_.reset();
    eth400g_p22_.reset();
    eth400g_p23_.reset();
    eth400g_p24_.reset();
    eth400g_p25_.reset();
    eth400g_p26_.reset();
    eth400g_p27_.reset();
    eth400g_p28_.reset();
    eth400g_p29_.reset();
    eth400g_p30_.reset();
    eth400g_p31_.reset();
    eth400g_p32_.reset();
    ethgpiobr_.reset();
    ethgpiotl_.reset();
    gpio_iotile_bl_.reset();
    gpio_iotile_br_.reset();
    gpio_iotile_tr_.reset();
    gpio_iotile_tl_.reset();
    eth100g_regs_rot_.reset();
    serdes_.reset();
    for (auto &f0 : pipes_) {
      f0.reset();
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x1000000) {
      offset -= 0x0;
      r += device_select_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2000000 && offset < 0x2040000) {
      offset -= 0x2000000;
      r += eth100g_regs_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2040000 && offset < 0x2080000) {
      offset -= 0x2040000;
      r += eth400g_p1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2080000 && offset < 0x20c0000) {
      offset -= 0x2080000;
      r += eth400g_p2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20c0000 && offset < 0x2100000) {
      offset -= 0x20c0000;
      r += eth400g_p3_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2100000 && offset < 0x2140000) {
      offset -= 0x2100000;
      r += eth400g_p4_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2140000 && offset < 0x2180000) {
      offset -= 0x2140000;
      r += eth400g_p5_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2180000 && offset < 0x21c0000) {
      offset -= 0x2180000;
      r += eth400g_p6_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x21c0000 && offset < 0x2200000) {
      offset -= 0x21c0000;
      r += eth400g_p7_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2200000 && offset < 0x2240000) {
      offset -= 0x2200000;
      r += eth400g_p8_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2240000 && offset < 0x2280000) {
      offset -= 0x2240000;
      r += eth400g_p9_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2280000 && offset < 0x22c0000) {
      offset -= 0x2280000;
      r += eth400g_p10_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x22c0000 && offset < 0x2300000) {
      offset -= 0x22c0000;
      r += eth400g_p11_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2300000 && offset < 0x2340000) {
      offset -= 0x2300000;
      r += eth400g_p12_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2340000 && offset < 0x2380000) {
      offset -= 0x2340000;
      r += eth400g_p13_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2380000 && offset < 0x23c0000) {
      offset -= 0x2380000;
      r += eth400g_p14_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x23c0000 && offset < 0x2400000) {
      offset -= 0x23c0000;
      r += eth400g_p15_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2400000 && offset < 0x2440000) {
      offset -= 0x2400000;
      r += eth400g_p16_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2440000 && offset < 0x2480000) {
      offset -= 0x2440000;
      r += eth400g_p17_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2480000 && offset < 0x24c0000) {
      offset -= 0x2480000;
      r += eth400g_p18_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24c0000 && offset < 0x2500000) {
      offset -= 0x24c0000;
      r += eth400g_p19_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2500000 && offset < 0x2540000) {
      offset -= 0x2500000;
      r += eth400g_p20_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2540000 && offset < 0x2580000) {
      offset -= 0x2540000;
      r += eth400g_p21_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2580000 && offset < 0x25c0000) {
      offset -= 0x2580000;
      r += eth400g_p22_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x25c0000 && offset < 0x2600000) {
      offset -= 0x25c0000;
      r += eth400g_p23_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2600000 && offset < 0x2640000) {
      offset -= 0x2600000;
      r += eth400g_p24_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2640000 && offset < 0x2680000) {
      offset -= 0x2640000;
      r += eth400g_p25_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2680000 && offset < 0x26c0000) {
      offset -= 0x2680000;
      r += eth400g_p26_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x26c0000 && offset < 0x2700000) {
      offset -= 0x26c0000;
      r += eth400g_p27_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2700000 && offset < 0x2740000) {
      offset -= 0x2700000;
      r += eth400g_p28_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2740000 && offset < 0x2780000) {
      offset -= 0x2740000;
      r += eth400g_p29_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2780000 && offset < 0x27c0000) {
      offset -= 0x2780000;
      r += eth400g_p30_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x27c0000 && offset < 0x2800000) {
      offset -= 0x27c0000;
      r += eth400g_p31_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2800000 && offset < 0x2840000) {
      offset -= 0x2800000;
      r += eth400g_p32_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2840000 && offset < 0x2880000) {
      offset -= 0x2840000;
      r += ethgpiobr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2880000 && offset < 0x28c0000) {
      offset -= 0x2880000;
      r += ethgpiotl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28c0000 && offset < 0x28c002c) {
      offset -= 0x28c0000;
      r += gpio_iotile_bl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2900000 && offset < 0x290002c) {
      offset -= 0x2900000;
      r += gpio_iotile_br_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2940000 && offset < 0x294002c) {
      offset -= 0x2940000;
      r += gpio_iotile_tr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2980000 && offset < 0x298002c) {
      offset -= 0x2980000;
      r += gpio_iotile_tl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x29c0000 && offset < 0x2a00000) {
      offset -= 0x29c0000;
      r += eth100g_regs_rot_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3000000 && offset < 0x4000000) {
      offset -= 0x3000000;
      r += serdes_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4000000 && offset < 0x8000000) {
      offset -= 0x4000000;
      int i0 = offset / 0x1000000;
      offset  -= i0 * 0x1000000;
      r += pipes_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += device_select_.to_string(print_zeros,indent_string) ;
    r += eth100g_regs_.to_string(print_zeros,indent_string) ;
    r += eth400g_p1_.to_string(print_zeros,indent_string) ;
    r += eth400g_p2_.to_string(print_zeros,indent_string) ;
    r += eth400g_p3_.to_string(print_zeros,indent_string) ;
    r += eth400g_p4_.to_string(print_zeros,indent_string) ;
    r += eth400g_p5_.to_string(print_zeros,indent_string) ;
    r += eth400g_p6_.to_string(print_zeros,indent_string) ;
    r += eth400g_p7_.to_string(print_zeros,indent_string) ;
    r += eth400g_p8_.to_string(print_zeros,indent_string) ;
    r += eth400g_p9_.to_string(print_zeros,indent_string) ;
    r += eth400g_p10_.to_string(print_zeros,indent_string) ;
    r += eth400g_p11_.to_string(print_zeros,indent_string) ;
    r += eth400g_p12_.to_string(print_zeros,indent_string) ;
    r += eth400g_p13_.to_string(print_zeros,indent_string) ;
    r += eth400g_p14_.to_string(print_zeros,indent_string) ;
    r += eth400g_p15_.to_string(print_zeros,indent_string) ;
    r += eth400g_p16_.to_string(print_zeros,indent_string) ;
    r += eth400g_p17_.to_string(print_zeros,indent_string) ;
    r += eth400g_p18_.to_string(print_zeros,indent_string) ;
    r += eth400g_p19_.to_string(print_zeros,indent_string) ;
    r += eth400g_p20_.to_string(print_zeros,indent_string) ;
    r += eth400g_p21_.to_string(print_zeros,indent_string) ;
    r += eth400g_p22_.to_string(print_zeros,indent_string) ;
    r += eth400g_p23_.to_string(print_zeros,indent_string) ;
    r += eth400g_p24_.to_string(print_zeros,indent_string) ;
    r += eth400g_p25_.to_string(print_zeros,indent_string) ;
    r += eth400g_p26_.to_string(print_zeros,indent_string) ;
    r += eth400g_p27_.to_string(print_zeros,indent_string) ;
    r += eth400g_p28_.to_string(print_zeros,indent_string) ;
    r += eth400g_p29_.to_string(print_zeros,indent_string) ;
    r += eth400g_p30_.to_string(print_zeros,indent_string) ;
    r += eth400g_p31_.to_string(print_zeros,indent_string) ;
    r += eth400g_p32_.to_string(print_zeros,indent_string) ;
    r += ethgpiobr_.to_string(print_zeros,indent_string) ;
    r += ethgpiotl_.to_string(print_zeros,indent_string) ;
    r += gpio_iotile_bl_.to_string(print_zeros,indent_string) ;
    r += gpio_iotile_br_.to_string(print_zeros,indent_string) ;
    r += gpio_iotile_tr_.to_string(print_zeros,indent_string) ;
    r += gpio_iotile_tl_.to_string(print_zeros,indent_string) ;
    r += eth100g_regs_rot_.to_string(print_zeros,indent_string) ;
    r += serdes_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += pipes_[a0].to_string(print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DvslAddrmap device_select_;
  Eth100gAddrmap eth100g_regs_;
  Eth400gAddrmap eth400g_p1_;
  Eth400gAddrmap eth400g_p2_;
  Eth400gAddrmap eth400g_p3_;
  Eth400gAddrmap eth400g_p4_;
  Eth400gAddrmap eth400g_p5_;
  Eth400gAddrmap eth400g_p6_;
  Eth400gAddrmap eth400g_p7_;
  Eth400gAddrmap eth400g_p8_;
  Eth400gAddrmap eth400g_p9_;
  Eth400gAddrmap eth400g_p10_;
  Eth400gAddrmap eth400g_p11_;
  Eth400gAddrmap eth400g_p12_;
  Eth400gAddrmap eth400g_p13_;
  Eth400gAddrmap eth400g_p14_;
  Eth400gAddrmap eth400g_p15_;
  Eth400gAddrmap eth400g_p16_;
  Eth400gAddrmap eth400g_p17_;
  Eth400gAddrmap eth400g_p18_;
  Eth400gAddrmap eth400g_p19_;
  Eth400gAddrmap eth400g_p20_;
  Eth400gAddrmap eth400g_p21_;
  Eth400gAddrmap eth400g_p22_;
  Eth400gAddrmap eth400g_p23_;
  Eth400gAddrmap eth400g_p24_;
  Eth400gAddrmap eth400g_p25_;
  Eth400gAddrmap eth400g_p26_;
  Eth400gAddrmap eth400g_p27_;
  Eth400gAddrmap eth400g_p28_;
  Eth400gAddrmap eth400g_p29_;
  Eth400gAddrmap eth400g_p30_;
  Eth400gAddrmap eth400g_p31_;
  Eth400gAddrmap eth400g_p32_;
  EthGpioRegs ethgpiobr_;
  EthGpioRegs ethgpiotl_;
  GpioIotileRspec gpio_iotile_bl_;
  GpioIotileRspec gpio_iotile_br_;
  GpioIotileRspec gpio_iotile_tr_;
  GpioIotileRspec gpio_iotile_tl_;
  Eth100gAddrmap eth100g_regs_rot_;
  SerdesAddrmap serdes_;
  std::array< PipeAddrmap, 4 > pipes_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_CHIP_H__
