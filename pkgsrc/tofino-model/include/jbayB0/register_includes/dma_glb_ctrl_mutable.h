/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DMA_GLB_CTRL_MUTABLE_H__
#define __REGISTER_INCLUDES_DMA_GLB_CTRL_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class DmaGlbCtrlMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DmaGlbCtrlMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, true, write_callback, read_callback, std::string("DmaGlbCtrlMutable"))
    {
    }
  DmaGlbCtrlMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DmaGlbCtrlMutable")
    {
    }
public:







  uint8_t dma_en() { return dma_en_; }
  void dma_en(const uint8_t &v) { dma_en_=v; }






  uint8_t txtlp_cut_through() { return txtlp_cut_through_; }
  void txtlp_cut_through(const uint8_t &v) { txtlp_cut_through_=v; }






  uint8_t ena_ordto() { return ena_ordto_; }
  void ena_ordto(const uint8_t &v) { ena_ordto_=v; }






  uint8_t pb_wrr_en() { return pb_wrr_en_; }
  void pb_wrr_en(const uint8_t &v) { pb_wrr_en_=v; }






  uint8_t tb_wrr_en() { return tb_wrr_en_; }
  void tb_wrr_en(const uint8_t &v) { tb_wrr_en_=v; }






  uint8_t es_wrr_en() { return es_wrr_en_; }
  void es_wrr_en(const uint8_t &v) { es_wrr_en_=v; }





  uint8_t wrr_basetime() { return wrr_basetime_; }
  void wrr_basetime(const uint8_t &v) { wrr_basetime_=v; }





  uint16_t dma_rsvd() { return dma_rsvd_; }
  void dma_rsvd(const uint16_t &v) { dma_rsvd_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (dma_en_ & 0x1);
    *data |= ((txtlp_cut_through_ & 0x1) << 1);
    *data |= ((ena_ordto_ & 0x1) << 2);
    *data |= ((pb_wrr_en_ & 0x1) << 4);
    *data |= ((tb_wrr_en_ & 0x1) << 5);
    *data |= ((es_wrr_en_ & 0x1) << 6);
    *data |= (wrr_basetime_ << 8);
    *data |= (dma_rsvd_ << 16);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    dma_en_ = (data & 0x1);
    txtlp_cut_through_ = ((data >> 1) & 0x1);
    ena_ordto_ = ((data >> 2) & 0x1);
    pb_wrr_en_ = ((data >> 4) & 0x1);
    tb_wrr_en_ = ((data >> 5) & 0x1);
    es_wrr_en_ = ((data >> 6) & 0x1);
    wrr_basetime_ = (data >> 8);
    dma_rsvd_ = (data >> 16);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    dma_en_ = 0x0;
    txtlp_cut_through_ = 0x0;
    ena_ordto_ = 0x0;
    pb_wrr_en_ = 0x0;
    tb_wrr_en_ = 0x0;
    es_wrr_en_ = 0x0;
    wrr_basetime_ = 0x0;
    dma_rsvd_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DmaGlbCtrlMutable") + ":\n";
    r += indent_string + "  " + std::string("dma_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dma_en_) ) + "\n";
    all_zeros &= (0 == dma_en_);
    r += indent_string + "  " + std::string("txtlp_cut_through") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txtlp_cut_through_) ) + "\n";
    all_zeros &= (0 == txtlp_cut_through_);
    r += indent_string + "  " + std::string("ena_ordto") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ena_ordto_) ) + "\n";
    all_zeros &= (0 == ena_ordto_);
    r += indent_string + "  " + std::string("pb_wrr_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pb_wrr_en_) ) + "\n";
    all_zeros &= (0 == pb_wrr_en_);
    r += indent_string + "  " + std::string("tb_wrr_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tb_wrr_en_) ) + "\n";
    all_zeros &= (0 == tb_wrr_en_);
    r += indent_string + "  " + std::string("es_wrr_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(es_wrr_en_) ) + "\n";
    all_zeros &= (0 == es_wrr_en_);
    r += indent_string + "  " + std::string("wrr_basetime") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wrr_basetime_) ) + "\n";
    all_zeros &= (0 == wrr_basetime_);
    r += indent_string + "  " + std::string("dma_rsvd") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dma_rsvd_) ) + "\n";
    all_zeros &= (0 == dma_rsvd_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DmaGlbCtrlMutable") + ":\n";
    r += indent_string + "  " + std::string("dma_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dma_en_) ) + "\n";
    all_zeros &= (0 == dma_en_);
    r += indent_string + "  " + std::string("txtlp_cut_through") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txtlp_cut_through_) ) + "\n";
    all_zeros &= (0 == txtlp_cut_through_);
    r += indent_string + "  " + std::string("ena_ordto") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ena_ordto_) ) + "\n";
    all_zeros &= (0 == ena_ordto_);
    r += indent_string + "  " + std::string("pb_wrr_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pb_wrr_en_) ) + "\n";
    all_zeros &= (0 == pb_wrr_en_);
    r += indent_string + "  " + std::string("tb_wrr_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tb_wrr_en_) ) + "\n";
    all_zeros &= (0 == tb_wrr_en_);
    r += indent_string + "  " + std::string("es_wrr_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(es_wrr_en_) ) + "\n";
    all_zeros &= (0 == es_wrr_en_);
    r += indent_string + "  " + std::string("wrr_basetime") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wrr_basetime_) ) + "\n";
    all_zeros &= (0 == wrr_basetime_);
    r += indent_string + "  " + std::string("dma_rsvd") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dma_rsvd_) ) + "\n";
    all_zeros &= (0 == dma_rsvd_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t dma_en_;
  uint8_t txtlp_cut_through_;
  uint8_t ena_ordto_;
  uint8_t pb_wrr_en_;
  uint8_t tb_wrr_en_;
  uint8_t es_wrr_en_;
  uint8_t wrr_basetime_;
  uint16_t dma_rsvd_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x14; // to get to dma_glb_ctrl
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_DMA_GLB_CTRL_MUTABLE_H__
