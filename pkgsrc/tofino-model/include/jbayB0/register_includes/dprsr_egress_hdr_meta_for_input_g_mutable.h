/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_EGRESS_HDR_META_FOR_INPUT_G_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_EGRESS_HDR_META_FOR_INPUT_G_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "dprsr_egress_hdr_meta_for_input_g_m_afc_mutable.h"
#include "dprsr_egress_hdr_meta_for_input_g_m_capture_tx_ts_mutable.h"
#include "dprsr_egress_hdr_meta_for_input_g_m_force_tx_err_mutable.h"
#include "dprsr_egress_hdr_meta_for_input_g_m_mirr_c2c_ctrl_mutable.h"
#include "dprsr_egress_hdr_meta_for_input_g_m_mirr_coal_smpl_len_mutable.h"
#include "dprsr_egress_hdr_meta_for_input_g_m_mirr_dond_ctrl_mutable.h"
#include "dprsr_egress_hdr_meta_for_input_g_m_mirr_epipe_port_mutable.h"
#include "dprsr_egress_hdr_meta_for_input_g_m_mirr_hash_mutable.h"
#include "dprsr_egress_hdr_meta_for_input_g_m_mirr_icos_mutable.h"
#include "dprsr_egress_hdr_meta_for_input_g_m_mirr_io_sel_mutable.h"
#include "dprsr_egress_hdr_meta_for_input_g_m_mirr_mc_ctrl_mutable.h"
#include "dprsr_egress_hdr_meta_for_input_g_m_mirr_qid_mutable.h"
#include "dprsr_egress_hdr_meta_for_input_g_m_mtu_trunc_err_f_mutable.h"
#include "dprsr_egress_hdr_meta_for_input_g_m_mtu_trunc_len_mutable.h"
#include "dprsr_egress_hdr_meta_for_input_g_m_tx_pkt_has_offsets_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class DprsrEgressHdrMetaForInputGMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrEgressHdrMetaForInputGMutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 60, true, write_callback, read_callback, std::string("DprsrEgressHdrMetaForInputGMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrEgressHdrMetaForInputGMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrEgressHdrMetaForInputGMutable")
    {
    }
public:





  DprsrEgressHdrMetaForInputGMForceTxErrMutable &egr_meta_pov_m_force_tx_err() { return egr_meta_pov_m_force_tx_err_; }





  DprsrEgressHdrMetaForInputGMCaptureTxTsMutable &egr_meta_pov_m_capture_tx_ts() { return egr_meta_pov_m_capture_tx_ts_; }





  DprsrEgressHdrMetaForInputGMTxPktHasOffsetsMutable &egr_meta_pov_m_tx_pkt_has_offsets() { return egr_meta_pov_m_tx_pkt_has_offsets_; }





  DprsrEgressHdrMetaForInputGMMirrIoSelMutable &egr_meta_pov_m_mirr_io_sel() { return egr_meta_pov_m_mirr_io_sel_; }





  DprsrEgressHdrMetaForInputGMMirrHashMutable &egr_meta_pov_m_mirr_hash() { return egr_meta_pov_m_mirr_hash_; }





  DprsrEgressHdrMetaForInputGMMirrEpipePortMutable &egr_meta_pov_m_mirr_epipe_port() { return egr_meta_pov_m_mirr_epipe_port_; }





  DprsrEgressHdrMetaForInputGMMirrQidMutable &egr_meta_pov_m_mirr_qid() { return egr_meta_pov_m_mirr_qid_; }





  DprsrEgressHdrMetaForInputGMMirrDondCtrlMutable &egr_meta_pov_m_mirr_dond_ctrl() { return egr_meta_pov_m_mirr_dond_ctrl_; }





  DprsrEgressHdrMetaForInputGMMirrIcosMutable &egr_meta_pov_m_mirr_icos() { return egr_meta_pov_m_mirr_icos_; }





  DprsrEgressHdrMetaForInputGMMirrMcCtrlMutable &egr_meta_pov_m_mirr_mc_ctrl() { return egr_meta_pov_m_mirr_mc_ctrl_; }





  DprsrEgressHdrMetaForInputGMMirrC2cCtrlMutable &egr_meta_pov_m_mirr_c2c_ctrl() { return egr_meta_pov_m_mirr_c2c_ctrl_; }





  DprsrEgressHdrMetaForInputGMMirrCoalSmplLenMutable &egr_meta_pov_m_mirr_coal_smpl_len() { return egr_meta_pov_m_mirr_coal_smpl_len_; }





  DprsrEgressHdrMetaForInputGMAfcMutable &egr_meta_pov_m_afc() { return egr_meta_pov_m_afc_; }





  DprsrEgressHdrMetaForInputGMMtuTruncLenMutable &egr_meta_pov_m_mtu_trunc_len() { return egr_meta_pov_m_mtu_trunc_len_; }





  DprsrEgressHdrMetaForInputGMMtuTruncErrFMutable &egr_meta_pov_m_mtu_trunc_err_f() { return egr_meta_pov_m_mtu_trunc_err_f_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x2900 && offset < 0x2904) {
      offset -= 0x2900;
      if (read_callback_) read_callback_();
      egr_meta_pov_m_force_tx_err_.read( offset, data );
    }
    else if (offset >= 0x2904 && offset < 0x2908) {
      offset -= 0x2904;
      if (read_callback_) read_callback_();
      egr_meta_pov_m_capture_tx_ts_.read( offset, data );
    }
    else if (offset >= 0x2908 && offset < 0x290c) {
      offset -= 0x2908;
      if (read_callback_) read_callback_();
      egr_meta_pov_m_tx_pkt_has_offsets_.read( offset, data );
    }
    else if (offset >= 0x290c && offset < 0x2910) {
      offset -= 0x290c;
      if (read_callback_) read_callback_();
      egr_meta_pov_m_mirr_io_sel_.read( offset, data );
    }
    else if (offset >= 0x2910 && offset < 0x2914) {
      offset -= 0x2910;
      if (read_callback_) read_callback_();
      egr_meta_pov_m_mirr_hash_.read( offset, data );
    }
    else if (offset >= 0x2914 && offset < 0x2918) {
      offset -= 0x2914;
      if (read_callback_) read_callback_();
      egr_meta_pov_m_mirr_epipe_port_.read( offset, data );
    }
    else if (offset >= 0x2918 && offset < 0x291c) {
      offset -= 0x2918;
      if (read_callback_) read_callback_();
      egr_meta_pov_m_mirr_qid_.read( offset, data );
    }
    else if (offset >= 0x291c && offset < 0x2920) {
      offset -= 0x291c;
      if (read_callback_) read_callback_();
      egr_meta_pov_m_mirr_dond_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2920 && offset < 0x2924) {
      offset -= 0x2920;
      if (read_callback_) read_callback_();
      egr_meta_pov_m_mirr_icos_.read( offset, data );
    }
    else if (offset >= 0x2924 && offset < 0x2928) {
      offset -= 0x2924;
      if (read_callback_) read_callback_();
      egr_meta_pov_m_mirr_mc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2928 && offset < 0x292c) {
      offset -= 0x2928;
      if (read_callback_) read_callback_();
      egr_meta_pov_m_mirr_c2c_ctrl_.read( offset, data );
    }
    else if (offset >= 0x292c && offset < 0x2930) {
      offset -= 0x292c;
      if (read_callback_) read_callback_();
      egr_meta_pov_m_mirr_coal_smpl_len_.read( offset, data );
    }
    else if (offset >= 0x2930 && offset < 0x2934) {
      offset -= 0x2930;
      if (read_callback_) read_callback_();
      egr_meta_pov_m_afc_.read( offset, data );
    }
    else if (offset >= 0x2934 && offset < 0x2938) {
      offset -= 0x2934;
      if (read_callback_) read_callback_();
      egr_meta_pov_m_mtu_trunc_len_.read( offset, data );
    }
    else if (offset >= 0x2938 && offset < 0x293c) {
      offset -= 0x2938;
      if (read_callback_) read_callback_();
      egr_meta_pov_m_mtu_trunc_err_f_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x2900 && offset < 0x2904) {
      offset -= 0x2900;
      egr_meta_pov_m_force_tx_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2904 && offset < 0x2908) {
      offset -= 0x2904;
      egr_meta_pov_m_capture_tx_ts_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2908 && offset < 0x290c) {
      offset -= 0x2908;
      egr_meta_pov_m_tx_pkt_has_offsets_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x290c && offset < 0x2910) {
      offset -= 0x290c;
      egr_meta_pov_m_mirr_io_sel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2910 && offset < 0x2914) {
      offset -= 0x2910;
      egr_meta_pov_m_mirr_hash_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2914 && offset < 0x2918) {
      offset -= 0x2914;
      egr_meta_pov_m_mirr_epipe_port_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2918 && offset < 0x291c) {
      offset -= 0x2918;
      egr_meta_pov_m_mirr_qid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x291c && offset < 0x2920) {
      offset -= 0x291c;
      egr_meta_pov_m_mirr_dond_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2920 && offset < 0x2924) {
      offset -= 0x2920;
      egr_meta_pov_m_mirr_icos_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2924 && offset < 0x2928) {
      offset -= 0x2924;
      egr_meta_pov_m_mirr_mc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2928 && offset < 0x292c) {
      offset -= 0x2928;
      egr_meta_pov_m_mirr_c2c_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x292c && offset < 0x2930) {
      offset -= 0x292c;
      egr_meta_pov_m_mirr_coal_smpl_len_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2930 && offset < 0x2934) {
      offset -= 0x2930;
      egr_meta_pov_m_afc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2934 && offset < 0x2938) {
      offset -= 0x2934;
      egr_meta_pov_m_mtu_trunc_len_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2938 && offset < 0x293c) {
      offset -= 0x2938;
      egr_meta_pov_m_mtu_trunc_err_f_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    egr_meta_pov_m_force_tx_err_.reset();
    egr_meta_pov_m_capture_tx_ts_.reset();
    egr_meta_pov_m_tx_pkt_has_offsets_.reset();
    egr_meta_pov_m_mirr_io_sel_.reset();
    egr_meta_pov_m_mirr_hash_.reset();
    egr_meta_pov_m_mirr_epipe_port_.reset();
    egr_meta_pov_m_mirr_qid_.reset();
    egr_meta_pov_m_mirr_dond_ctrl_.reset();
    egr_meta_pov_m_mirr_icos_.reset();
    egr_meta_pov_m_mirr_mc_ctrl_.reset();
    egr_meta_pov_m_mirr_c2c_ctrl_.reset();
    egr_meta_pov_m_mirr_coal_smpl_len_.reset();
    egr_meta_pov_m_afc_.reset();
    egr_meta_pov_m_mtu_trunc_len_.reset();
    egr_meta_pov_m_mtu_trunc_err_f_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x2900 && offset < 0x2904) {
      offset -= 0x2900;
      r += egr_meta_pov_m_force_tx_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2904 && offset < 0x2908) {
      offset -= 0x2904;
      r += egr_meta_pov_m_capture_tx_ts_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2908 && offset < 0x290c) {
      offset -= 0x2908;
      r += egr_meta_pov_m_tx_pkt_has_offsets_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x290c && offset < 0x2910) {
      offset -= 0x290c;
      r += egr_meta_pov_m_mirr_io_sel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2910 && offset < 0x2914) {
      offset -= 0x2910;
      r += egr_meta_pov_m_mirr_hash_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2914 && offset < 0x2918) {
      offset -= 0x2914;
      r += egr_meta_pov_m_mirr_epipe_port_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2918 && offset < 0x291c) {
      offset -= 0x2918;
      r += egr_meta_pov_m_mirr_qid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x291c && offset < 0x2920) {
      offset -= 0x291c;
      r += egr_meta_pov_m_mirr_dond_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2920 && offset < 0x2924) {
      offset -= 0x2920;
      r += egr_meta_pov_m_mirr_icos_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2924 && offset < 0x2928) {
      offset -= 0x2924;
      r += egr_meta_pov_m_mirr_mc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2928 && offset < 0x292c) {
      offset -= 0x2928;
      r += egr_meta_pov_m_mirr_c2c_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x292c && offset < 0x2930) {
      offset -= 0x292c;
      r += egr_meta_pov_m_mirr_coal_smpl_len_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2930 && offset < 0x2934) {
      offset -= 0x2930;
      r += egr_meta_pov_m_afc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2934 && offset < 0x2938) {
      offset -= 0x2934;
      r += egr_meta_pov_m_mtu_trunc_len_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2938 && offset < 0x293c) {
      offset -= 0x2938;
      r += egr_meta_pov_m_mtu_trunc_err_f_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += egr_meta_pov_m_force_tx_err_.to_string(print_zeros,indent_string) ;
    r += egr_meta_pov_m_capture_tx_ts_.to_string(print_zeros,indent_string) ;
    r += egr_meta_pov_m_tx_pkt_has_offsets_.to_string(print_zeros,indent_string) ;
    r += egr_meta_pov_m_mirr_io_sel_.to_string(print_zeros,indent_string) ;
    r += egr_meta_pov_m_mirr_hash_.to_string(print_zeros,indent_string) ;
    r += egr_meta_pov_m_mirr_epipe_port_.to_string(print_zeros,indent_string) ;
    r += egr_meta_pov_m_mirr_qid_.to_string(print_zeros,indent_string) ;
    r += egr_meta_pov_m_mirr_dond_ctrl_.to_string(print_zeros,indent_string) ;
    r += egr_meta_pov_m_mirr_icos_.to_string(print_zeros,indent_string) ;
    r += egr_meta_pov_m_mirr_mc_ctrl_.to_string(print_zeros,indent_string) ;
    r += egr_meta_pov_m_mirr_c2c_ctrl_.to_string(print_zeros,indent_string) ;
    r += egr_meta_pov_m_mirr_coal_smpl_len_.to_string(print_zeros,indent_string) ;
    r += egr_meta_pov_m_afc_.to_string(print_zeros,indent_string) ;
    r += egr_meta_pov_m_mtu_trunc_len_.to_string(print_zeros,indent_string) ;
    r += egr_meta_pov_m_mtu_trunc_err_f_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrEgressHdrMetaForInputGMForceTxErrMutable egr_meta_pov_m_force_tx_err_;
  DprsrEgressHdrMetaForInputGMCaptureTxTsMutable egr_meta_pov_m_capture_tx_ts_;
  DprsrEgressHdrMetaForInputGMTxPktHasOffsetsMutable egr_meta_pov_m_tx_pkt_has_offsets_;
  DprsrEgressHdrMetaForInputGMMirrIoSelMutable egr_meta_pov_m_mirr_io_sel_;
  DprsrEgressHdrMetaForInputGMMirrHashMutable egr_meta_pov_m_mirr_hash_;
  DprsrEgressHdrMetaForInputGMMirrEpipePortMutable egr_meta_pov_m_mirr_epipe_port_;
  DprsrEgressHdrMetaForInputGMMirrQidMutable egr_meta_pov_m_mirr_qid_;
  DprsrEgressHdrMetaForInputGMMirrDondCtrlMutable egr_meta_pov_m_mirr_dond_ctrl_;
  DprsrEgressHdrMetaForInputGMMirrIcosMutable egr_meta_pov_m_mirr_icos_;
  DprsrEgressHdrMetaForInputGMMirrMcCtrlMutable egr_meta_pov_m_mirr_mc_ctrl_;
  DprsrEgressHdrMetaForInputGMMirrC2cCtrlMutable egr_meta_pov_m_mirr_c2c_ctrl_;
  DprsrEgressHdrMetaForInputGMMirrCoalSmplLenMutable egr_meta_pov_m_mirr_coal_smpl_len_;
  DprsrEgressHdrMetaForInputGMAfcMutable egr_meta_pov_m_afc_;
  DprsrEgressHdrMetaForInputGMMtuTruncLenMutable egr_meta_pov_m_mtu_trunc_len_;
  DprsrEgressHdrMetaForInputGMMtuTruncErrFMutable egr_meta_pov_m_mtu_trunc_err_f_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x28000; // to get to icr
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_DPRSR_EGRESS_HDR_META_FOR_INPUT_G_MUTABLE_H__
