/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_HE_REGS_H_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_HE_REGS_H_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "dprsr_hdr_cred_dbg_reload_r_mutable.h"
#include "dprsr_hdr_cred_max_cfg_r_mutable.h"
#include "dprsr_hdr_cred_sel_r_mutable.h"
#include "dprsr_hdr_cred_thresh_cfg_r_mutable.h"
#include "dprsr_hdr_creds_r_mutable.h"
#include "dprsr_hdr_status_r_mutable.h"
#include "dprsr_hdr_xbar_const_defs_r_mutable.h"
#include "dprsr_he_regs_h_cfg48_data_mutable.h"
#include "dprsr_he_regs_h_cfg48_mask_mutable.h"
#include "dprsr_he_regs_h_intr_mutable.h"
#include "dprsr_he_regs_h_ipkt_mac0_ecc_ctrl_mutable.h"
#include "dprsr_he_regs_h_ipkt_mac0_mbe_err_log_mutable.h"
#include "dprsr_he_regs_h_ipkt_mac0_sbe_err_log_mutable.h"
#include "dprsr_he_regs_h_ipkt_mac1_ecc_ctrl_mutable.h"
#include "dprsr_he_regs_h_ipkt_mac1_mbe_err_log_mutable.h"
#include "dprsr_he_regs_h_ipkt_mac1_sbe_err_log_mutable.h"
#include "dprsr_he_regs_h_ipkt_mac2_ecc_ctrl_mutable.h"
#include "dprsr_he_regs_h_ipkt_mac2_mbe_err_log_mutable.h"
#include "dprsr_he_regs_h_ipkt_mac2_sbe_err_log_mutable.h"
#include "dprsr_he_regs_h_max_src_chunks_mutable.h"
#include "dprsr_he_regs_h_mirrtbl_ecc_ctrl_mutable.h"
#include "dprsr_he_regs_h_mirrtbl_mbe_err_log_mutable.h"
#include "dprsr_he_regs_h_mirrtbl_sbe_err_log_mutable.h"
#include "dprsr_mirr_timeout_r_mutable.h"
#include "dprsr_slice_lat_ctrl_r_mutable.h"
#include "fd_word_clot_sel_info_r_mutable.h"
#include "pp_ctr_cfg48_r_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class DprsrHeRegsHMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrHeRegsHMutable(
      int chipNumber, int index_pipe_addrmap, int index_dprsr_ho_e, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_dprsr_ho_e), 260, true, write_callback, read_callback, std::string("DprsrHeRegsHMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_dprsr_ho_e))
    {
    }
  DprsrHeRegsHMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrHeRegsHMutable")
    {
    }
public:








  FdWordClotSelInfoRMutable &h_compress_clot_sel(int j0) { return h_compress_clot_sel_[j0]; }





  DprsrHdrXbarConstDefsRMutable &h_hdr_xbar_const() { return h_hdr_xbar_const_; }






  DprsrMirrTimeoutRMutable &h_mirr_hdr_tbl() { return h_mirr_hdr_tbl_; }





  DprsrHdrCredThreshCfgRMutable &h_cred_thresh() { return h_cred_thresh_; }








  DprsrHdrCredMaxCfgRMutable &h_cred_max() { return h_cred_max_; }






  DprsrHdrCredSelRMutable &h_cred_dbg_chan_sel() { return h_cred_dbg_chan_sel_; }






  DprsrHdrCredsRMutable &h_cred_dbg_credits() { return h_cred_dbg_credits_; }







  DprsrHdrCredDbgReloadRMutable &h_cred_dbg_reload() { return h_cred_dbg_reload_; }





  DprsrHeRegsHMirrtblSbeErrLogMutable &h_mirrtbl_sbe_err_log() { return h_mirrtbl_sbe_err_log_; }





  DprsrHeRegsHMirrtblMbeErrLogMutable &h_mirrtbl_mbe_err_log() { return h_mirrtbl_mbe_err_log_; }





  DprsrHeRegsHIpktMac0SbeErrLogMutable &h_ipkt_mac0_sbe_err_log() { return h_ipkt_mac0_sbe_err_log_; }





  DprsrHeRegsHIpktMac0MbeErrLogMutable &h_ipkt_mac0_mbe_err_log() { return h_ipkt_mac0_mbe_err_log_; }





  DprsrHeRegsHIpktMac1SbeErrLogMutable &h_ipkt_mac1_sbe_err_log() { return h_ipkt_mac1_sbe_err_log_; }





  DprsrHeRegsHIpktMac1MbeErrLogMutable &h_ipkt_mac1_mbe_err_log() { return h_ipkt_mac1_mbe_err_log_; }





  DprsrHeRegsHIpktMac2SbeErrLogMutable &h_ipkt_mac2_sbe_err_log() { return h_ipkt_mac2_sbe_err_log_; }





  DprsrHeRegsHIpktMac2MbeErrLogMutable &h_ipkt_mac2_mbe_err_log() { return h_ipkt_mac2_mbe_err_log_; }





  DprsrHeRegsHMirrtblEccCtrlMutable &h_mirrtbl_ecc_ctrl() { return h_mirrtbl_ecc_ctrl_; }





  DprsrHeRegsHIpktMac0EccCtrlMutable &h_ipkt_mac0_ecc_ctrl() { return h_ipkt_mac0_ecc_ctrl_; }





  DprsrHeRegsHIpktMac1EccCtrlMutable &h_ipkt_mac1_ecc_ctrl() { return h_ipkt_mac1_ecc_ctrl_; }





  DprsrHeRegsHIpktMac2EccCtrlMutable &h_ipkt_mac2_ecc_ctrl() { return h_ipkt_mac2_ecc_ctrl_; }






  DprsrHdrStatusRMutable &h_hdr_status() { return h_hdr_status_; }







  DprsrSliceLatCtrlRMutable &h_hdr_latency_ctrl() { return h_hdr_latency_ctrl_; }








  PpCtrCfg48RMutable &h_cfg48(int j0) { return h_cfg48_[j0]; }




















  DprsrHeRegsHCfg48MaskMutable &h_cfg48_mask(int j0) { return h_cfg48_mask_[j0]; }








  DprsrHeRegsHCfg48DataMutable &h_cfg48_data(int j0) { return h_cfg48_data_[j0]; }













  DprsrHeRegsHMaxSrcChunksMutable &h_max_src_chunks() { return h_max_src_chunks_; }
  DprsrHeRegsHIntrMutable &h_intr() { return h_intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x40) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      h_compress_clot_sel_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      h_hdr_xbar_const_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      h_mirr_hdr_tbl_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      h_cred_thresh_.read( offset, data );
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      if (read_callback_) read_callback_();
      h_cred_max_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      h_cred_dbg_chan_sel_.read( offset, data );
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      if (read_callback_) read_callback_();
      h_cred_dbg_credits_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      h_cred_dbg_reload_.read( offset, data );
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      if (read_callback_) read_callback_();
      h_mirrtbl_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x98 && offset < 0x9c) {
      offset -= 0x98;
      if (read_callback_) read_callback_();
      h_mirrtbl_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      if (read_callback_) read_callback_();
      h_ipkt_mac0_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      if (read_callback_) read_callback_();
      h_ipkt_mac0_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      if (read_callback_) read_callback_();
      h_ipkt_mac1_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      if (read_callback_) read_callback_();
      h_ipkt_mac1_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      if (read_callback_) read_callback_();
      h_ipkt_mac2_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      if (read_callback_) read_callback_();
      h_ipkt_mac2_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb4 && offset < 0xb8) {
      offset -= 0xb4;
      if (read_callback_) read_callback_();
      h_mirrtbl_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0xb8 && offset < 0xc0) {
      offset -= 0xb8;
      if (read_callback_) read_callback_();
      h_ipkt_mac0_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xc8) {
      offset -= 0xc0;
      if (read_callback_) read_callback_();
      h_ipkt_mac1_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0xc8 && offset < 0xd0) {
      offset -= 0xc8;
      if (read_callback_) read_callback_();
      h_ipkt_mac2_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0xd0 && offset < 0xd4) {
      offset -= 0xd0;
      if (read_callback_) read_callback_();
      h_hdr_status_.read( offset, data );
    }
    else if (offset >= 0xd4 && offset < 0xd8) {
      offset -= 0xd4;
      if (read_callback_) read_callback_();
      h_hdr_latency_ctrl_.read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0xf0) {
      offset -= 0xe0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      h_cfg48_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xf0 && offset < 0xf8) {
      offset -= 0xf0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      h_cfg48_mask_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xf8 && offset < 0x100) {
      offset -= 0xf8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      h_cfg48_data_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      h_max_src_chunks_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x94) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      h_intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x40) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      h_compress_clot_sel_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      h_hdr_xbar_const_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      h_mirr_hdr_tbl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      h_cred_thresh_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      h_cred_max_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      h_cred_dbg_chan_sel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      h_cred_dbg_credits_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      h_cred_dbg_reload_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      h_mirrtbl_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x98 && offset < 0x9c) {
      offset -= 0x98;
      h_mirrtbl_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      h_ipkt_mac0_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      h_ipkt_mac0_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      h_ipkt_mac1_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      h_ipkt_mac1_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      h_ipkt_mac2_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      h_ipkt_mac2_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb4 && offset < 0xb8) {
      offset -= 0xb4;
      h_mirrtbl_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb8 && offset < 0xc0) {
      offset -= 0xb8;
      h_ipkt_mac0_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xc8) {
      offset -= 0xc0;
      h_ipkt_mac1_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc8 && offset < 0xd0) {
      offset -= 0xc8;
      h_ipkt_mac2_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd0 && offset < 0xd4) {
      offset -= 0xd0;
      h_hdr_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd4 && offset < 0xd8) {
      offset -= 0xd4;
      h_hdr_latency_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0xf0) {
      offset -= 0xe0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      h_cfg48_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf0 && offset < 0xf8) {
      offset -= 0xf0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      h_cfg48_mask_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf8 && offset < 0x100) {
      offset -= 0xf8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      h_cfg48_data_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      h_max_src_chunks_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x94) {
      offset -= 0x80;
      h_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : h_compress_clot_sel_) {
      f0.reset();
    }
    h_hdr_xbar_const_.reset();
    h_mirr_hdr_tbl_.reset();
    h_cred_thresh_.reset();
    h_cred_max_.reset();
    h_cred_dbg_chan_sel_.reset();
    h_cred_dbg_credits_.reset();
    h_cred_dbg_reload_.reset();
    h_mirrtbl_sbe_err_log_.reset();
    h_mirrtbl_mbe_err_log_.reset();
    h_ipkt_mac0_sbe_err_log_.reset();
    h_ipkt_mac0_mbe_err_log_.reset();
    h_ipkt_mac1_sbe_err_log_.reset();
    h_ipkt_mac1_mbe_err_log_.reset();
    h_ipkt_mac2_sbe_err_log_.reset();
    h_ipkt_mac2_mbe_err_log_.reset();
    h_mirrtbl_ecc_ctrl_.reset();
    h_ipkt_mac0_ecc_ctrl_.reset();
    h_ipkt_mac1_ecc_ctrl_.reset();
    h_ipkt_mac2_ecc_ctrl_.reset();
    h_hdr_status_.reset();
    h_hdr_latency_ctrl_.reset();
    for (auto &f0 : h_cfg48_) {
      f0.reset();
    }
    for (auto &f0 : h_cfg48_mask_) {
      f0.reset();
    }
    for (auto &f0 : h_cfg48_data_) {
      f0.reset();
    }
    h_max_src_chunks_.reset();
    h_intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x40) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += h_compress_clot_sel_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      r += h_hdr_xbar_const_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      r += h_mirr_hdr_tbl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      r += h_cred_thresh_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      r += h_cred_max_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      r += h_cred_dbg_chan_sel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      r += h_cred_dbg_credits_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      r += h_cred_dbg_reload_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      r += h_mirrtbl_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x98 && offset < 0x9c) {
      offset -= 0x98;
      r += h_mirrtbl_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      r += h_ipkt_mac0_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      r += h_ipkt_mac0_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      r += h_ipkt_mac1_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      r += h_ipkt_mac1_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      r += h_ipkt_mac2_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      r += h_ipkt_mac2_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb4 && offset < 0xb8) {
      offset -= 0xb4;
      r += h_mirrtbl_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb8 && offset < 0xc0) {
      offset -= 0xb8;
      r += h_ipkt_mac0_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xc8) {
      offset -= 0xc0;
      r += h_ipkt_mac1_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc8 && offset < 0xd0) {
      offset -= 0xc8;
      r += h_ipkt_mac2_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd0 && offset < 0xd4) {
      offset -= 0xd0;
      r += h_hdr_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd4 && offset < 0xd8) {
      offset -= 0xd4;
      r += h_hdr_latency_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0xf0) {
      offset -= 0xe0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += h_cfg48_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf0 && offset < 0xf8) {
      offset -= 0xf0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += h_cfg48_mask_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf8 && offset < 0x100) {
      offset -= 0xf8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += h_cfg48_data_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      r += h_max_src_chunks_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x94) {
      offset -= 0x80;
      r += h_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<16;++a0) {
      r += h_compress_clot_sel_[a0].to_string(print_zeros,indent_string) ;
    }
    r += h_hdr_xbar_const_.to_string(print_zeros,indent_string) ;
    r += h_mirr_hdr_tbl_.to_string(print_zeros,indent_string) ;
    r += h_cred_thresh_.to_string(print_zeros,indent_string) ;
    r += h_cred_max_.to_string(print_zeros,indent_string) ;
    r += h_cred_dbg_chan_sel_.to_string(print_zeros,indent_string) ;
    r += h_cred_dbg_credits_.to_string(print_zeros,indent_string) ;
    r += h_cred_dbg_reload_.to_string(print_zeros,indent_string) ;
    r += h_mirrtbl_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += h_mirrtbl_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += h_ipkt_mac0_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += h_ipkt_mac0_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += h_ipkt_mac1_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += h_ipkt_mac1_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += h_ipkt_mac2_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += h_ipkt_mac2_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += h_mirrtbl_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += h_ipkt_mac0_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += h_ipkt_mac1_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += h_ipkt_mac2_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += h_hdr_status_.to_string(print_zeros,indent_string) ;
    r += h_hdr_latency_ctrl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<2;++a0) {
      r += h_cfg48_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += h_cfg48_mask_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += h_cfg48_data_[a0].to_string(print_zeros,indent_string) ;
    }
    r += h_max_src_chunks_.to_string(print_zeros,indent_string) ;
    r += h_intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< FdWordClotSelInfoRMutable, 16 > h_compress_clot_sel_;
  DprsrHdrXbarConstDefsRMutable h_hdr_xbar_const_;
  DprsrMirrTimeoutRMutable h_mirr_hdr_tbl_;
  DprsrHdrCredThreshCfgRMutable h_cred_thresh_;
  DprsrHdrCredMaxCfgRMutable h_cred_max_;
  DprsrHdrCredSelRMutable h_cred_dbg_chan_sel_;
  DprsrHdrCredsRMutable h_cred_dbg_credits_;
  DprsrHdrCredDbgReloadRMutable h_cred_dbg_reload_;
  DprsrHeRegsHMirrtblSbeErrLogMutable h_mirrtbl_sbe_err_log_;
  DprsrHeRegsHMirrtblMbeErrLogMutable h_mirrtbl_mbe_err_log_;
  DprsrHeRegsHIpktMac0SbeErrLogMutable h_ipkt_mac0_sbe_err_log_;
  DprsrHeRegsHIpktMac0MbeErrLogMutable h_ipkt_mac0_mbe_err_log_;
  DprsrHeRegsHIpktMac1SbeErrLogMutable h_ipkt_mac1_sbe_err_log_;
  DprsrHeRegsHIpktMac1MbeErrLogMutable h_ipkt_mac1_mbe_err_log_;
  DprsrHeRegsHIpktMac2SbeErrLogMutable h_ipkt_mac2_sbe_err_log_;
  DprsrHeRegsHIpktMac2MbeErrLogMutable h_ipkt_mac2_mbe_err_log_;
  DprsrHeRegsHMirrtblEccCtrlMutable h_mirrtbl_ecc_ctrl_;
  DprsrHeRegsHIpktMac0EccCtrlMutable h_ipkt_mac0_ecc_ctrl_;
  DprsrHeRegsHIpktMac1EccCtrlMutable h_ipkt_mac1_ecc_ctrl_;
  DprsrHeRegsHIpktMac2EccCtrlMutable h_ipkt_mac2_ecc_ctrl_;
  DprsrHdrStatusRMutable h_hdr_status_;
  DprsrSliceLatCtrlRMutable h_hdr_latency_ctrl_;
  std::array< PpCtrCfg48RMutable, 2 > h_cfg48_;
  std::array< DprsrHeRegsHCfg48MaskMutable, 2 > h_cfg48_mask_;
  std::array< DprsrHeRegsHCfg48DataMutable, 2 > h_cfg48_data_;
  DprsrHeRegsHMaxSrcChunksMutable h_max_src_chunks_;
  DprsrHeRegsHIntrMutable h_intr_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_dprsr_ho_e
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x38000; // to get to ho_e
    assert(index_dprsr_ho_e < 4);
    offset += index_dprsr_ho_e * 0x2000; // dprsr_ho_e[]
    offset += 0xc00; // to get to her
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_DPRSR_HE_REGS_H_MUTABLE_H__
