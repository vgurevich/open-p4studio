/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_I_FULLCSUM_ENGINE_G_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_I_FULLCSUM_ENGINE_G_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "dprsr_fullcsum_row_entry_mutable.h"
#include "dprsr_i_fullcsum_engine_g_csum_constant_mutable.h"
#include "dprsr_i_fullcsum_engine_g_tags_mutable.h"
#include "dprsr_i_fullcsum_engine_g_zeros_as_ones_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class DprsrIFullcsumEngineGMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrIFullcsumEngineGMutable(
      int chipNumber, int index_pipe_addrmap, int index_dprsr_i_fullcsum_engine_g, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_dprsr_i_fullcsum_engine_g), 256, true, write_callback, read_callback, std::string("DprsrIFullcsumEngineGMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_dprsr_i_fullcsum_engine_g))
    {
    }
  DprsrIFullcsumEngineGMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrIFullcsumEngineGMutable")
    {
    }
public:






  DprsrFullcsumRowEntryMutable &csum_engine_clot_entry(int j0) { return csum_engine_clot_entry_[j0]; }






  DprsrFullcsumRowEntryMutable &csum_engine_phv_entry(int j0) { return csum_engine_phv_entry_[j0]; }







  DprsrIFullcsumEngineGTagsMutable &csum_engine_tags(int j0) { return csum_engine_tags_[j0]; }





  DprsrIFullcsumEngineGCsumConstantMutable &csum_engine_csum_constant() { return csum_engine_csum_constant_; }





  DprsrIFullcsumEngineGZerosAsOnesMutable &csum_engine_zeros_as_ones() { return csum_engine_zeros_as_ones_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x2000 && offset < 0x2040) {
      offset -= 0x2000;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      csum_engine_clot_entry_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x2040 && offset < 0x2060) {
      offset -= 0x2040;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      csum_engine_phv_entry_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x2080 && offset < 0x20c0) {
      offset -= 0x2080;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      csum_engine_tags_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x20c0 && offset < 0x20c4) {
      offset -= 0x20c0;
      if (read_callback_) read_callback_();
      csum_engine_csum_constant_.read( offset, data );
    }
    else if (offset >= 0x20c4 && offset < 0x20c8) {
      offset -= 0x20c4;
      if (read_callback_) read_callback_();
      csum_engine_zeros_as_ones_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x2000 && offset < 0x2040) {
      offset -= 0x2000;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      csum_engine_clot_entry_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2040 && offset < 0x2060) {
      offset -= 0x2040;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      csum_engine_phv_entry_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2080 && offset < 0x20c0) {
      offset -= 0x2080;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      csum_engine_tags_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20c0 && offset < 0x20c4) {
      offset -= 0x20c0;
      csum_engine_csum_constant_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20c4 && offset < 0x20c8) {
      offset -= 0x20c4;
      csum_engine_zeros_as_ones_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : csum_engine_clot_entry_) {
      f0.reset();
    }
    for (auto &f0 : csum_engine_phv_entry_) {
      f0.reset();
    }
    for (auto &f0 : csum_engine_tags_) {
      f0.reset();
    }
    csum_engine_csum_constant_.reset();
    csum_engine_zeros_as_ones_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x2000 && offset < 0x2040) {
      offset -= 0x2000;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += csum_engine_clot_entry_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2040 && offset < 0x2060) {
      offset -= 0x2040;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += csum_engine_phv_entry_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2080 && offset < 0x20c0) {
      offset -= 0x2080;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += csum_engine_tags_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20c0 && offset < 0x20c4) {
      offset -= 0x20c0;
      r += csum_engine_csum_constant_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20c4 && offset < 0x20c8) {
      offset -= 0x20c4;
      r += csum_engine_zeros_as_ones_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<16;++a0) {
      r += csum_engine_clot_entry_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += csum_engine_phv_entry_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += csum_engine_tags_[a0].to_string(print_zeros,indent_string) ;
    }
    r += csum_engine_csum_constant_.to_string(print_zeros,indent_string) ;
    r += csum_engine_zeros_as_ones_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< DprsrFullcsumRowEntryMutable, 16 > csum_engine_clot_entry_;
  std::array< DprsrFullcsumRowEntryMutable, 8 > csum_engine_phv_entry_;
  std::array< DprsrIFullcsumEngineGTagsMutable, 16 > csum_engine_tags_;
  DprsrIFullcsumEngineGCsumConstantMutable csum_engine_csum_constant_;
  DprsrIFullcsumEngineGZerosAsOnesMutable csum_engine_zeros_as_ones_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_dprsr_i_fullcsum_engine_g
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x28000; // to get to icr
    offset += 0x2000; // to get to csum_engine
    assert(index_dprsr_i_fullcsum_engine_g < 8);
    offset += index_dprsr_i_fullcsum_engine_g * 0x100; // dprsr_i_fullcsum_engine_g[]
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_DPRSR_I_FULLCSUM_ENGINE_G_MUTABLE_H__
