/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_IC_REGS_H__
#define __REGISTER_INCLUDES_DPRSR_IC_REGS_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "dprsr_egress_hdr_meta_for_input_g.h"
#include "dprsr_i_fullcsum_engine_g.h"
#include "dprsr_ic_regs_cfg48_data.h"
#include "dprsr_ic_regs_cfg48_mask.h"
#include "dprsr_ic_regs_e_buff_overflow_log.h"
#include "dprsr_ic_regs_e_chan_mismatch_err_log.h"
#include "dprsr_ic_regs_e_clot_fifo_ecc_ctrl.h"
#include "dprsr_ic_regs_e_clot_fifo_mbe_err_log.h"
#include "dprsr_ic_regs_e_clot_fifo_sbe_err_log.h"
#include "dprsr_ic_regs_e_cmd_ecc_ctrl.h"
#include "dprsr_ic_regs_e_cmd_mbe_err_log.h"
#include "dprsr_ic_regs_e_cmd_sbe_err_log.h"
#include "dprsr_ic_regs_e_fdinfo_ecc_ctrl.h"
#include "dprsr_ic_regs_e_fdinfo_mbe_err_log.h"
#include "dprsr_ic_regs_e_fdinfo_sbe_err_log.h"
#include "dprsr_ic_regs_e_freelist_empty_err_log.h"
#include "dprsr_ic_regs_e_meta_ecc_ctrl.h"
#include "dprsr_ic_regs_e_meta_mbe_err_log.h"
#include "dprsr_ic_regs_e_meta_sbe_err_log.h"
#include "dprsr_ic_regs_e_phv16_grp.h"
#include "dprsr_ic_regs_e_phv32_grp.h"
#include "dprsr_ic_regs_e_phv8_grp.h"
#include "dprsr_ic_regs_e_volts_ecc_ctrl.h"
#include "dprsr_ic_regs_e_volts_mbe_err_log.h"
#include "dprsr_ic_regs_e_volts_sbe_err_log.h"
#include "dprsr_ic_regs_i_buff_overflow_log.h"
#include "dprsr_ic_regs_i_chan_mismatch_err_log.h"
#include "dprsr_ic_regs_i_clot_fifo_ecc_ctrl.h"
#include "dprsr_ic_regs_i_clot_fifo_mbe_err_log.h"
#include "dprsr_ic_regs_i_clot_fifo_sbe_err_log.h"
#include "dprsr_ic_regs_i_cmd_ecc_ctrl.h"
#include "dprsr_ic_regs_i_cmd_mbe_err_log.h"
#include "dprsr_ic_regs_i_cmd_sbe_err_log.h"
#include "dprsr_ic_regs_i_fdinfo_ecc_ctrl.h"
#include "dprsr_ic_regs_i_fdinfo_mbe_err_log.h"
#include "dprsr_ic_regs_i_fdinfo_sbe_err_log.h"
#include "dprsr_ic_regs_i_freelist_empty_err_log.h"
#include "dprsr_ic_regs_i_meta_ecc_ctrl.h"
#include "dprsr_ic_regs_i_meta_mbe_err_log.h"
#include "dprsr_ic_regs_i_meta_sbe_err_log.h"
#include "dprsr_ic_regs_i_phv16_grp.h"
#include "dprsr_ic_regs_i_phv32_grp.h"
#include "dprsr_ic_regs_i_phv8_grp.h"
#include "dprsr_ic_regs_i_volts_ecc_ctrl.h"
#include "dprsr_ic_regs_i_volts_mbe_err_log.h"
#include "dprsr_ic_regs_i_volts_sbe_err_log.h"
#include "dprsr_ic_regs_intr.h"
#include "dprsr_ic_regs_intr_b.h"
#include "dprsr_ic_regs_lfltr_eop_delay.h"
#include "dprsr_ic_regs_mac0_en.h"
#include "dprsr_ic_regs_mac0_rates.h"
#include "dprsr_ic_regs_mac1_en.h"
#include "dprsr_ic_regs_mac1_rates.h"
#include "dprsr_ic_regs_mac2_en.h"
#include "dprsr_ic_regs_mac2_rates.h"
#include "dprsr_ic_regs_mac3_en.h"
#include "dprsr_ic_regs_mac3_rates.h"
#include "dprsr_ic_regs_mac4_en.h"
#include "dprsr_ic_regs_mac4_rates.h"
#include "dprsr_ic_regs_mac5_en.h"
#include "dprsr_ic_regs_mac5_rates.h"
#include "dprsr_ic_regs_mac6_en.h"
#include "dprsr_ic_regs_mac6_rates.h"
#include "dprsr_ic_regs_mac7_en.h"
#include "dprsr_ic_regs_mac7_rates.h"
#include "dprsr_ic_regs_mac8_en.h"
#include "dprsr_ic_regs_mac8_rates.h"
#include "dprsr_ic_regs_mau_acctg_fifo_ecc_ctrl.h"
#include "dprsr_ic_regs_mau_acctg_fifo_fifo_mbe_err_log.h"
#include "dprsr_ic_regs_mau_acctg_fifo_fifo_sbe_err_log.h"
#include "dprsr_ic_regs_mau_acctg_fifo_wmk.h"
#include "dprsr_ic_regs_max_inp_buff_entries.h"
#include "dprsr_ic_regs_phv16_ecc_ctrl.h"
#include "dprsr_ic_regs_phv16_mbe_err_log.h"
#include "dprsr_ic_regs_phv16_sbe_err_log.h"
#include "dprsr_ic_regs_phv32_ecc_ctrl.h"
#include "dprsr_ic_regs_phv32_mbe_err_log.h"
#include "dprsr_ic_regs_phv32_sbe_err_log.h"
#include "dprsr_ic_regs_phv8_ecc_ctrl.h"
#include "dprsr_ic_regs_phv8_mbe_err_log.h"
#include "dprsr_ic_regs_phv8_sbe_err_log.h"
#include "dprsr_ic_regs_phv_count_sel.h"
#include "dprsr_ic_regs_pv_tbl_mbe_err_log.h"
#include "dprsr_ic_regs_pv_tbl_sbe_err_log.h"
#include "dprsr_ic_regs_pvt_ecc_ctrl.h"
#include "dprsr_ic_regs_slice_max_credits.h"
#include "dprsr_ingress_hdr_meta_for_input_g.h"
#include "dprsr_inp_egr_unicast_check_r.h"
#include "dprsr_inp_empty_status_r.h"
#include "dprsr_inp_phv_count_r.h"
#include "dprsr_input_non_pp_ing_and_egr_g.h"
#include "dprsr_learn_mask_entry_r.h"
#include "dprsr_phv_timeout_r.h"
#include "dprsr_slice_lat_fcu_r.h"
#include "pp_ctr_cfg48_r.h"

namespace jbayB0 {
  namespace register_classes {

class DprsrIcRegs : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrIcRegs(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 12288, false, write_callback, read_callback, std::string("DprsrIcRegs")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrIcRegs(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DprsrIcRegs")
    {
    }
public:






  DprsrIcRegsIPhv8Grp &i_phv8_grp() { return i_phv8_grp_; }






  DprsrIcRegsIPhv16Grp &i_phv16_grp() { return i_phv16_grp_; }






  DprsrIcRegsIPhv32Grp &i_phv32_grp() { return i_phv32_grp_; }






  DprsrIcRegsEPhv8Grp &e_phv8_grp() { return e_phv8_grp_; }






  DprsrIcRegsEPhv16Grp &e_phv16_grp() { return e_phv16_grp_; }






  DprsrIcRegsEPhv32Grp &e_phv32_grp() { return e_phv32_grp_; }





  DprsrIcRegsMac0Rates &mac0_rates() { return mac0_rates_; }






  DprsrIcRegsMac0En &mac0_en() { return mac0_en_; }





  DprsrIcRegsMac1Rates &mac1_rates() { return mac1_rates_; }






  DprsrIcRegsMac1En &mac1_en() { return mac1_en_; }





  DprsrIcRegsMac2Rates &mac2_rates() { return mac2_rates_; }






  DprsrIcRegsMac2En &mac2_en() { return mac2_en_; }





  DprsrIcRegsMac3Rates &mac3_rates() { return mac3_rates_; }






  DprsrIcRegsMac3En &mac3_en() { return mac3_en_; }





  DprsrIcRegsMac4Rates &mac4_rates() { return mac4_rates_; }






  DprsrIcRegsMac4En &mac4_en() { return mac4_en_; }





  DprsrIcRegsMac5Rates &mac5_rates() { return mac5_rates_; }






  DprsrIcRegsMac5En &mac5_en() { return mac5_en_; }





  DprsrIcRegsMac6Rates &mac6_rates() { return mac6_rates_; }






  DprsrIcRegsMac6En &mac6_en() { return mac6_en_; }





  DprsrIcRegsMac7Rates &mac7_rates() { return mac7_rates_; }






  DprsrIcRegsMac7En &mac7_en() { return mac7_en_; }





  DprsrIcRegsMac8Rates &mac8_rates() { return mac8_rates_; }






  DprsrIcRegsMac8En &mac8_en() { return mac8_en_; }









  DprsrLearnMaskEntryR &lrnmask(int j0) { return lrnmask_[j0]; }





  DprsrIcRegsPvTblSbeErrLog &pv_tbl_sbe_err_log() { return pv_tbl_sbe_err_log_; }





  DprsrIcRegsPvTblMbeErrLog &pv_tbl_mbe_err_log() { return pv_tbl_mbe_err_log_; }





  DprsrIcRegsIClotFifoSbeErrLog &i_clot_fifo_sbe_err_log() { return i_clot_fifo_sbe_err_log_; }





  DprsrIcRegsIClotFifoMbeErrLog &i_clot_fifo_mbe_err_log() { return i_clot_fifo_mbe_err_log_; }





  DprsrIcRegsEClotFifoSbeErrLog &e_clot_fifo_sbe_err_log() { return e_clot_fifo_sbe_err_log_; }





  DprsrIcRegsEClotFifoMbeErrLog &e_clot_fifo_mbe_err_log() { return e_clot_fifo_mbe_err_log_; }





  DprsrIcRegsMauAcctgFifoFifoSbeErrLog &mau_acctg_fifo_fifo_sbe_err_log() { return mau_acctg_fifo_fifo_sbe_err_log_; }





  DprsrIcRegsMauAcctgFifoFifoMbeErrLog &mau_acctg_fifo_fifo_mbe_err_log() { return mau_acctg_fifo_fifo_mbe_err_log_; }






  DprsrPhvTimeoutR &pvt_cfg() { return pvt_cfg_; }





  DprsrIcRegsPvtEccCtrl &pvt_ecc_ctrl() { return pvt_ecc_ctrl_; }





  DprsrIcRegsIClotFifoEccCtrl &i_clot_fifo_ecc_ctrl() { return i_clot_fifo_ecc_ctrl_; }





  DprsrIcRegsEClotFifoEccCtrl &e_clot_fifo_ecc_ctrl() { return e_clot_fifo_ecc_ctrl_; }





  DprsrIcRegsMauAcctgFifoEccCtrl &mau_acctg_fifo_ecc_ctrl() { return mau_acctg_fifo_ecc_ctrl_; }






  DprsrIcRegsMauAcctgFifoWmk &mau_acctg_fifo_wmk() { return mau_acctg_fifo_wmk_; }








  DprsrIcRegsMaxInpBuffEntries &max_inp_buff_entries() { return max_inp_buff_entries_; }







  DprsrIcRegsSliceMaxCredits &slice_max_credits() { return slice_max_credits_; }





  DprsrIcRegsIMetaSbeErrLog &i_meta_sbe_err_log() { return i_meta_sbe_err_log_; }





  DprsrIcRegsIMetaMbeErrLog &i_meta_mbe_err_log() { return i_meta_mbe_err_log_; }





  DprsrIcRegsEMetaSbeErrLog &e_meta_sbe_err_log() { return e_meta_sbe_err_log_; }





  DprsrIcRegsEMetaMbeErrLog &e_meta_mbe_err_log() { return e_meta_mbe_err_log_; }





  DprsrIcRegsPhv32SbeErrLog &phv32_sbe_err_log() { return phv32_sbe_err_log_; }





  DprsrIcRegsPhv32MbeErrLog &phv32_mbe_err_log() { return phv32_mbe_err_log_; }





  DprsrIcRegsPhv16SbeErrLog &phv16_sbe_err_log() { return phv16_sbe_err_log_; }





  DprsrIcRegsPhv16MbeErrLog &phv16_mbe_err_log() { return phv16_mbe_err_log_; }





  DprsrIcRegsPhv8SbeErrLog &phv8_sbe_err_log() { return phv8_sbe_err_log_; }





  DprsrIcRegsPhv8MbeErrLog &phv8_mbe_err_log() { return phv8_mbe_err_log_; }





  DprsrIcRegsIVoltsSbeErrLog &i_volts_sbe_err_log() { return i_volts_sbe_err_log_; }





  DprsrIcRegsIVoltsMbeErrLog &i_volts_mbe_err_log() { return i_volts_mbe_err_log_; }





  DprsrIcRegsEVoltsSbeErrLog &e_volts_sbe_err_log() { return e_volts_sbe_err_log_; }





  DprsrIcRegsEVoltsMbeErrLog &e_volts_mbe_err_log() { return e_volts_mbe_err_log_; }





  DprsrIcRegsIFdinfoSbeErrLog &i_fdinfo_sbe_err_log() { return i_fdinfo_sbe_err_log_; }





  DprsrIcRegsIFdinfoMbeErrLog &i_fdinfo_mbe_err_log() { return i_fdinfo_mbe_err_log_; }





  DprsrIcRegsEFdinfoSbeErrLog &e_fdinfo_sbe_err_log() { return e_fdinfo_sbe_err_log_; }





  DprsrIcRegsEFdinfoMbeErrLog &e_fdinfo_mbe_err_log() { return e_fdinfo_mbe_err_log_; }





  DprsrIcRegsICmdSbeErrLog &i_cmd_sbe_err_log() { return i_cmd_sbe_err_log_; }





  DprsrIcRegsICmdMbeErrLog &i_cmd_mbe_err_log() { return i_cmd_mbe_err_log_; }





  DprsrIcRegsECmdSbeErrLog &e_cmd_sbe_err_log() { return e_cmd_sbe_err_log_; }





  DprsrIcRegsECmdMbeErrLog &e_cmd_mbe_err_log() { return e_cmd_mbe_err_log_; }





  DprsrIcRegsIBuffOverflowLog &i_buff_overflow_log() { return i_buff_overflow_log_; }





  DprsrIcRegsEBuffOverflowLog &e_buff_overflow_log() { return e_buff_overflow_log_; }





  DprsrIcRegsIMetaEccCtrl &i_meta_ecc_ctrl() { return i_meta_ecc_ctrl_; }





  DprsrIcRegsEMetaEccCtrl &e_meta_ecc_ctrl() { return e_meta_ecc_ctrl_; }





  DprsrIcRegsPhv32EccCtrl &phv32_ecc_ctrl() { return phv32_ecc_ctrl_; }





  DprsrIcRegsPhv16EccCtrl &phv16_ecc_ctrl() { return phv16_ecc_ctrl_; }





  DprsrIcRegsPhv8EccCtrl &phv8_ecc_ctrl() { return phv8_ecc_ctrl_; }





  DprsrIcRegsIVoltsEccCtrl &i_volts_ecc_ctrl() { return i_volts_ecc_ctrl_; }





  DprsrIcRegsEVoltsEccCtrl &e_volts_ecc_ctrl() { return e_volts_ecc_ctrl_; }





  DprsrIcRegsIFdinfoEccCtrl &i_fdinfo_ecc_ctrl() { return i_fdinfo_ecc_ctrl_; }





  DprsrIcRegsEFdinfoEccCtrl &e_fdinfo_ecc_ctrl() { return e_fdinfo_ecc_ctrl_; }





  DprsrIcRegsICmdEccCtrl &i_cmd_ecc_ctrl() { return i_cmd_ecc_ctrl_; }





  DprsrIcRegsECmdEccCtrl &e_cmd_ecc_ctrl() { return e_cmd_ecc_ctrl_; }





  DprsrIcRegsIFreelistEmptyErrLog &i_freelist_empty_err_log() { return i_freelist_empty_err_log_; }





  DprsrIcRegsEFreelistEmptyErrLog &e_freelist_empty_err_log() { return e_freelist_empty_err_log_; }





  DprsrIcRegsPhvCountSel &phv_count_sel() { return phv_count_sel_; }






  DprsrInpPhvCountR &phv_count() { return phv_count_; }





  DprsrInpEmptyStatusR &input_status() { return input_status_; }







  DprsrSliceLatFcuR &fcu_latency_ctrl() { return fcu_latency_ctrl_; }






  DprsrInpEgrUnicastCheckR &egr_unicast_check() { return egr_unicast_check_; }








  DprsrIcRegsLfltrEopDelay &lfltr_eop_delay() { return lfltr_eop_delay_; }







  DprsrIcRegsIChanMismatchErrLog &i_chan_mismatch_err_log() { return i_chan_mismatch_err_log_; }







  DprsrIcRegsEChanMismatchErrLog &e_chan_mismatch_err_log() { return e_chan_mismatch_err_log_; }








  PpCtrCfg48R &cfg48(int j0) { return cfg48_[j0]; }




















  DprsrIcRegsCfg48Mask &cfg48_mask(int j0) { return cfg48_mask_[j0]; }








  DprsrIcRegsCfg48Data &cfg48_data(int j0) { return cfg48_data_[j0]; }






  DprsrInputNonPpIngAndEgrG &ingr() { return ingr_; }






  DprsrInputNonPpIngAndEgrG &egr() { return egr_; }








  DprsrIFullcsumEngineG &csum_engine(int j0) { return csum_engine_[j0]; }





  DprsrIngressHdrMetaForInputG &ingr_meta_pov() { return ingr_meta_pov_; }





  DprsrEgressHdrMetaForInputG &egr_meta_pov() { return egr_meta_pov_; }
  DprsrIcRegsIntr &intr() { return intr_; }
  DprsrIcRegsIntrB &intr_b() { return intr_b_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x2808 && offset < 0x280c) {
      offset -= 0x2808;
      if (read_callback_) read_callback_();
      i_phv8_grp_.read( offset, data );
    }
    else if (offset >= 0x280c && offset < 0x2810) {
      offset -= 0x280c;
      if (read_callback_) read_callback_();
      i_phv16_grp_.read( offset, data );
    }
    else if (offset >= 0x2810 && offset < 0x2814) {
      offset -= 0x2810;
      if (read_callback_) read_callback_();
      i_phv32_grp_.read( offset, data );
    }
    else if (offset >= 0x2814 && offset < 0x2818) {
      offset -= 0x2814;
      if (read_callback_) read_callback_();
      e_phv8_grp_.read( offset, data );
    }
    else if (offset >= 0x2818 && offset < 0x281c) {
      offset -= 0x2818;
      if (read_callback_) read_callback_();
      e_phv16_grp_.read( offset, data );
    }
    else if (offset >= 0x281c && offset < 0x2820) {
      offset -= 0x281c;
      if (read_callback_) read_callback_();
      e_phv32_grp_.read( offset, data );
    }
    else if (offset >= 0x2820 && offset < 0x2824) {
      offset -= 0x2820;
      if (read_callback_) read_callback_();
      mac0_rates_.read( offset, data );
    }
    else if (offset >= 0x2824 && offset < 0x2828) {
      offset -= 0x2824;
      if (read_callback_) read_callback_();
      mac0_en_.read( offset, data );
    }
    else if (offset >= 0x2828 && offset < 0x282c) {
      offset -= 0x2828;
      if (read_callback_) read_callback_();
      mac1_rates_.read( offset, data );
    }
    else if (offset >= 0x282c && offset < 0x2830) {
      offset -= 0x282c;
      if (read_callback_) read_callback_();
      mac1_en_.read( offset, data );
    }
    else if (offset >= 0x2830 && offset < 0x2834) {
      offset -= 0x2830;
      if (read_callback_) read_callback_();
      mac2_rates_.read( offset, data );
    }
    else if (offset >= 0x2834 && offset < 0x2838) {
      offset -= 0x2834;
      if (read_callback_) read_callback_();
      mac2_en_.read( offset, data );
    }
    else if (offset >= 0x2838 && offset < 0x283c) {
      offset -= 0x2838;
      if (read_callback_) read_callback_();
      mac3_rates_.read( offset, data );
    }
    else if (offset >= 0x283c && offset < 0x2840) {
      offset -= 0x283c;
      if (read_callback_) read_callback_();
      mac3_en_.read( offset, data );
    }
    else if (offset >= 0x2840 && offset < 0x2844) {
      offset -= 0x2840;
      if (read_callback_) read_callback_();
      mac4_rates_.read( offset, data );
    }
    else if (offset >= 0x2844 && offset < 0x2848) {
      offset -= 0x2844;
      if (read_callback_) read_callback_();
      mac4_en_.read( offset, data );
    }
    else if (offset >= 0x2848 && offset < 0x284c) {
      offset -= 0x2848;
      if (read_callback_) read_callback_();
      mac5_rates_.read( offset, data );
    }
    else if (offset >= 0x284c && offset < 0x2850) {
      offset -= 0x284c;
      if (read_callback_) read_callback_();
      mac5_en_.read( offset, data );
    }
    else if (offset >= 0x2850 && offset < 0x2854) {
      offset -= 0x2850;
      if (read_callback_) read_callback_();
      mac6_rates_.read( offset, data );
    }
    else if (offset >= 0x2854 && offset < 0x2858) {
      offset -= 0x2854;
      if (read_callback_) read_callback_();
      mac6_en_.read( offset, data );
    }
    else if (offset >= 0x2858 && offset < 0x285c) {
      offset -= 0x2858;
      if (read_callback_) read_callback_();
      mac7_rates_.read( offset, data );
    }
    else if (offset >= 0x285c && offset < 0x2860) {
      offset -= 0x285c;
      if (read_callback_) read_callback_();
      mac7_en_.read( offset, data );
    }
    else if (offset >= 0x2860 && offset < 0x2864) {
      offset -= 0x2860;
      if (read_callback_) read_callback_();
      mac8_rates_.read( offset, data );
    }
    else if (offset >= 0x2864 && offset < 0x2868) {
      offset -= 0x2864;
      if (read_callback_) read_callback_();
      mac8_en_.read( offset, data );
    }
    else if (offset >= 0x2a00 && offset < 0x2b80) {
      offset -= 0x2a00;
      int i0 = offset / 0x30;
      offset  -= i0 * 0x30;
      if (read_callback_) read_callback_();
      lrnmask_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x2b94 && offset < 0x2b98) {
      offset -= 0x2b94;
      if (read_callback_) read_callback_();
      pv_tbl_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2b98 && offset < 0x2b9c) {
      offset -= 0x2b98;
      if (read_callback_) read_callback_();
      pv_tbl_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2b9c && offset < 0x2ba0) {
      offset -= 0x2b9c;
      if (read_callback_) read_callback_();
      i_clot_fifo_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2ba0 && offset < 0x2ba4) {
      offset -= 0x2ba0;
      if (read_callback_) read_callback_();
      i_clot_fifo_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2ba4 && offset < 0x2ba8) {
      offset -= 0x2ba4;
      if (read_callback_) read_callback_();
      e_clot_fifo_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2ba8 && offset < 0x2bac) {
      offset -= 0x2ba8;
      if (read_callback_) read_callback_();
      e_clot_fifo_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2bac && offset < 0x2bb0) {
      offset -= 0x2bac;
      if (read_callback_) read_callback_();
      mau_acctg_fifo_fifo_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2bb0 && offset < 0x2bb4) {
      offset -= 0x2bb0;
      if (read_callback_) read_callback_();
      mau_acctg_fifo_fifo_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2bb4 && offset < 0x2bb8) {
      offset -= 0x2bb4;
      if (read_callback_) read_callback_();
      pvt_cfg_.read( offset, data );
    }
    else if (offset >= 0x2bb8 && offset < 0x2bbc) {
      offset -= 0x2bb8;
      if (read_callback_) read_callback_();
      pvt_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2bbc && offset < 0x2bc0) {
      offset -= 0x2bbc;
      if (read_callback_) read_callback_();
      i_clot_fifo_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2bc0 && offset < 0x2bc4) {
      offset -= 0x2bc0;
      if (read_callback_) read_callback_();
      e_clot_fifo_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2bc4 && offset < 0x2bc8) {
      offset -= 0x2bc4;
      if (read_callback_) read_callback_();
      mau_acctg_fifo_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2bc8 && offset < 0x2bcc) {
      offset -= 0x2bc8;
      if (read_callback_) read_callback_();
      mau_acctg_fifo_wmk_.read( offset, data );
    }
    else if (offset >= 0x2bcc && offset < 0x2bd0) {
      offset -= 0x2bcc;
      if (read_callback_) read_callback_();
      max_inp_buff_entries_.read( offset, data );
    }
    else if (offset >= 0x2bd0 && offset < 0x2bd4) {
      offset -= 0x2bd0;
      if (read_callback_) read_callback_();
      slice_max_credits_.read( offset, data );
    }
    else if (offset >= 0x2bf4 && offset < 0x2bf8) {
      offset -= 0x2bf4;
      if (read_callback_) read_callback_();
      i_meta_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2bf8 && offset < 0x2bfc) {
      offset -= 0x2bf8;
      if (read_callback_) read_callback_();
      i_meta_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2bfc && offset < 0x2c00) {
      offset -= 0x2bfc;
      if (read_callback_) read_callback_();
      e_meta_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c00 && offset < 0x2c04) {
      offset -= 0x2c00;
      if (read_callback_) read_callback_();
      e_meta_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c04 && offset < 0x2c08) {
      offset -= 0x2c04;
      if (read_callback_) read_callback_();
      phv32_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c08 && offset < 0x2c0c) {
      offset -= 0x2c08;
      if (read_callback_) read_callback_();
      phv32_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c0c && offset < 0x2c10) {
      offset -= 0x2c0c;
      if (read_callback_) read_callback_();
      phv16_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c10 && offset < 0x2c14) {
      offset -= 0x2c10;
      if (read_callback_) read_callback_();
      phv16_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c14 && offset < 0x2c18) {
      offset -= 0x2c14;
      if (read_callback_) read_callback_();
      phv8_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c18 && offset < 0x2c1c) {
      offset -= 0x2c18;
      if (read_callback_) read_callback_();
      phv8_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c1c && offset < 0x2c20) {
      offset -= 0x2c1c;
      if (read_callback_) read_callback_();
      i_volts_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c20 && offset < 0x2c24) {
      offset -= 0x2c20;
      if (read_callback_) read_callback_();
      i_volts_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c24 && offset < 0x2c28) {
      offset -= 0x2c24;
      if (read_callback_) read_callback_();
      e_volts_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c28 && offset < 0x2c2c) {
      offset -= 0x2c28;
      if (read_callback_) read_callback_();
      e_volts_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c2c && offset < 0x2c30) {
      offset -= 0x2c2c;
      if (read_callback_) read_callback_();
      i_fdinfo_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c30 && offset < 0x2c34) {
      offset -= 0x2c30;
      if (read_callback_) read_callback_();
      i_fdinfo_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c34 && offset < 0x2c38) {
      offset -= 0x2c34;
      if (read_callback_) read_callback_();
      e_fdinfo_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c38 && offset < 0x2c3c) {
      offset -= 0x2c38;
      if (read_callback_) read_callback_();
      e_fdinfo_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c3c && offset < 0x2c40) {
      offset -= 0x2c3c;
      if (read_callback_) read_callback_();
      i_cmd_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c40 && offset < 0x2c44) {
      offset -= 0x2c40;
      if (read_callback_) read_callback_();
      i_cmd_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c44 && offset < 0x2c48) {
      offset -= 0x2c44;
      if (read_callback_) read_callback_();
      e_cmd_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c48 && offset < 0x2c4c) {
      offset -= 0x2c48;
      if (read_callback_) read_callback_();
      e_cmd_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c4c && offset < 0x2c50) {
      offset -= 0x2c4c;
      if (read_callback_) read_callback_();
      i_buff_overflow_log_.read( offset, data );
    }
    else if (offset >= 0x2c50 && offset < 0x2c54) {
      offset -= 0x2c50;
      if (read_callback_) read_callback_();
      e_buff_overflow_log_.read( offset, data );
    }
    else if (offset >= 0x2c54 && offset < 0x2c58) {
      offset -= 0x2c54;
      if (read_callback_) read_callback_();
      i_meta_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2c58 && offset < 0x2c5c) {
      offset -= 0x2c58;
      if (read_callback_) read_callback_();
      e_meta_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2c60 && offset < 0x2c6c) {
      offset -= 0x2c60;
      if (read_callback_) read_callback_();
      phv32_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2c70 && offset < 0x2c78) {
      offset -= 0x2c70;
      if (read_callback_) read_callback_();
      phv16_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2c78 && offset < 0x2c80) {
      offset -= 0x2c78;
      if (read_callback_) read_callback_();
      phv8_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2c80 && offset < 0x2c84) {
      offset -= 0x2c80;
      if (read_callback_) read_callback_();
      i_volts_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2c84 && offset < 0x2c88) {
      offset -= 0x2c84;
      if (read_callback_) read_callback_();
      e_volts_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2c88 && offset < 0x2c8c) {
      offset -= 0x2c88;
      if (read_callback_) read_callback_();
      i_fdinfo_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2c8c && offset < 0x2c90) {
      offset -= 0x2c8c;
      if (read_callback_) read_callback_();
      e_fdinfo_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2c90 && offset < 0x2c94) {
      offset -= 0x2c90;
      if (read_callback_) read_callback_();
      i_cmd_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2c94 && offset < 0x2c98) {
      offset -= 0x2c94;
      if (read_callback_) read_callback_();
      e_cmd_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2c98 && offset < 0x2c9c) {
      offset -= 0x2c98;
      if (read_callback_) read_callback_();
      i_freelist_empty_err_log_.read( offset, data );
    }
    else if (offset >= 0x2c9c && offset < 0x2ca0) {
      offset -= 0x2c9c;
      if (read_callback_) read_callback_();
      e_freelist_empty_err_log_.read( offset, data );
    }
    else if (offset >= 0x2ca0 && offset < 0x2ca4) {
      offset -= 0x2ca0;
      if (read_callback_) read_callback_();
      phv_count_sel_.read( offset, data );
    }
    else if (offset >= 0x2ca4 && offset < 0x2ca8) {
      offset -= 0x2ca4;
      if (read_callback_) read_callback_();
      phv_count_.read( offset, data );
    }
    else if (offset >= 0x2ca8 && offset < 0x2cac) {
      offset -= 0x2ca8;
      if (read_callback_) read_callback_();
      input_status_.read( offset, data );
    }
    else if (offset >= 0x2cac && offset < 0x2cb0) {
      offset -= 0x2cac;
      if (read_callback_) read_callback_();
      fcu_latency_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2cb0 && offset < 0x2cb4) {
      offset -= 0x2cb0;
      if (read_callback_) read_callback_();
      egr_unicast_check_.read( offset, data );
    }
    else if (offset >= 0x2cb4 && offset < 0x2cb8) {
      offset -= 0x2cb4;
      if (read_callback_) read_callback_();
      lfltr_eop_delay_.read( offset, data );
    }
    else if (offset >= 0x2cb8 && offset < 0x2cbc) {
      offset -= 0x2cb8;
      if (read_callback_) read_callback_();
      i_chan_mismatch_err_log_.read( offset, data );
    }
    else if (offset >= 0x2cbc && offset < 0x2cc0) {
      offset -= 0x2cbc;
      if (read_callback_) read_callback_();
      e_chan_mismatch_err_log_.read( offset, data );
    }
    else if (offset >= 0x2cc0 && offset < 0x2ce0) {
      offset -= 0x2cc0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      cfg48_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x2ce0 && offset < 0x2cf0) {
      offset -= 0x2ce0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      cfg48_mask_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x2cf0 && offset < 0x2d00) {
      offset -= 0x2cf0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      cfg48_data_[ i0 ].read( offset, data );
    }
    else if (offset < 0x1000) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      ingr_.read( offset, data );
    }
    else if (offset >= 0x1000 && offset < 0x2000) {
      offset -= 0x1000;
      if (read_callback_) read_callback_();
      egr_.read( offset, data );
    }
    else if (offset >= 0x2000 && offset < 0x2800) {
      offset -= 0x2000;
      int i0 = offset / 0x100;
      offset  -= i0 * 0x100;
      if (read_callback_) read_callback_();
      csum_engine_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x2880 && offset < 0x28e4) {
      offset -= 0x2880;
      if (read_callback_) read_callback_();
      ingr_meta_pov_.read( offset, data );
    }
    else if (offset >= 0x2900 && offset < 0x293c) {
      offset -= 0x2900;
      if (read_callback_) read_callback_();
      egr_meta_pov_.read( offset, data );
    }
    else if (offset >= 0x2b80 && offset < 0x2b94) {
      offset -= 0x2b80;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    else if (offset >= 0x2be0 && offset < 0x2bf4) {
      offset -= 0x2be0;
      if (read_callback_) read_callback_();
      intr_b_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x2808 && offset < 0x280c) {
      offset -= 0x2808;
      i_phv8_grp_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x280c && offset < 0x2810) {
      offset -= 0x280c;
      i_phv16_grp_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2810 && offset < 0x2814) {
      offset -= 0x2810;
      i_phv32_grp_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2814 && offset < 0x2818) {
      offset -= 0x2814;
      e_phv8_grp_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2818 && offset < 0x281c) {
      offset -= 0x2818;
      e_phv16_grp_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x281c && offset < 0x2820) {
      offset -= 0x281c;
      e_phv32_grp_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2820 && offset < 0x2824) {
      offset -= 0x2820;
      mac0_rates_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2824 && offset < 0x2828) {
      offset -= 0x2824;
      mac0_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2828 && offset < 0x282c) {
      offset -= 0x2828;
      mac1_rates_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x282c && offset < 0x2830) {
      offset -= 0x282c;
      mac1_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2830 && offset < 0x2834) {
      offset -= 0x2830;
      mac2_rates_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2834 && offset < 0x2838) {
      offset -= 0x2834;
      mac2_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2838 && offset < 0x283c) {
      offset -= 0x2838;
      mac3_rates_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x283c && offset < 0x2840) {
      offset -= 0x283c;
      mac3_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2840 && offset < 0x2844) {
      offset -= 0x2840;
      mac4_rates_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2844 && offset < 0x2848) {
      offset -= 0x2844;
      mac4_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2848 && offset < 0x284c) {
      offset -= 0x2848;
      mac5_rates_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x284c && offset < 0x2850) {
      offset -= 0x284c;
      mac5_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2850 && offset < 0x2854) {
      offset -= 0x2850;
      mac6_rates_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2854 && offset < 0x2858) {
      offset -= 0x2854;
      mac6_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2858 && offset < 0x285c) {
      offset -= 0x2858;
      mac7_rates_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x285c && offset < 0x2860) {
      offset -= 0x285c;
      mac7_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2860 && offset < 0x2864) {
      offset -= 0x2860;
      mac8_rates_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2864 && offset < 0x2868) {
      offset -= 0x2864;
      mac8_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2a00 && offset < 0x2b80) {
      offset -= 0x2a00;
      int i0 = offset / 0x30;
      offset  -= i0 * 0x30;
      lrnmask_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2b94 && offset < 0x2b98) {
      offset -= 0x2b94;
      pv_tbl_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2b98 && offset < 0x2b9c) {
      offset -= 0x2b98;
      pv_tbl_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2b9c && offset < 0x2ba0) {
      offset -= 0x2b9c;
      i_clot_fifo_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2ba0 && offset < 0x2ba4) {
      offset -= 0x2ba0;
      i_clot_fifo_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2ba4 && offset < 0x2ba8) {
      offset -= 0x2ba4;
      e_clot_fifo_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2ba8 && offset < 0x2bac) {
      offset -= 0x2ba8;
      e_clot_fifo_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2bac && offset < 0x2bb0) {
      offset -= 0x2bac;
      mau_acctg_fifo_fifo_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2bb0 && offset < 0x2bb4) {
      offset -= 0x2bb0;
      mau_acctg_fifo_fifo_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2bb4 && offset < 0x2bb8) {
      offset -= 0x2bb4;
      pvt_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2bb8 && offset < 0x2bbc) {
      offset -= 0x2bb8;
      pvt_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2bbc && offset < 0x2bc0) {
      offset -= 0x2bbc;
      i_clot_fifo_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2bc0 && offset < 0x2bc4) {
      offset -= 0x2bc0;
      e_clot_fifo_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2bc4 && offset < 0x2bc8) {
      offset -= 0x2bc4;
      mau_acctg_fifo_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2bc8 && offset < 0x2bcc) {
      offset -= 0x2bc8;
      mau_acctg_fifo_wmk_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2bcc && offset < 0x2bd0) {
      offset -= 0x2bcc;
      max_inp_buff_entries_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2bd0 && offset < 0x2bd4) {
      offset -= 0x2bd0;
      slice_max_credits_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2bf4 && offset < 0x2bf8) {
      offset -= 0x2bf4;
      i_meta_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2bf8 && offset < 0x2bfc) {
      offset -= 0x2bf8;
      i_meta_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2bfc && offset < 0x2c00) {
      offset -= 0x2bfc;
      e_meta_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c00 && offset < 0x2c04) {
      offset -= 0x2c00;
      e_meta_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c04 && offset < 0x2c08) {
      offset -= 0x2c04;
      phv32_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c08 && offset < 0x2c0c) {
      offset -= 0x2c08;
      phv32_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c0c && offset < 0x2c10) {
      offset -= 0x2c0c;
      phv16_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c10 && offset < 0x2c14) {
      offset -= 0x2c10;
      phv16_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c14 && offset < 0x2c18) {
      offset -= 0x2c14;
      phv8_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c18 && offset < 0x2c1c) {
      offset -= 0x2c18;
      phv8_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c1c && offset < 0x2c20) {
      offset -= 0x2c1c;
      i_volts_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c20 && offset < 0x2c24) {
      offset -= 0x2c20;
      i_volts_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c24 && offset < 0x2c28) {
      offset -= 0x2c24;
      e_volts_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c28 && offset < 0x2c2c) {
      offset -= 0x2c28;
      e_volts_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c2c && offset < 0x2c30) {
      offset -= 0x2c2c;
      i_fdinfo_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c30 && offset < 0x2c34) {
      offset -= 0x2c30;
      i_fdinfo_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c34 && offset < 0x2c38) {
      offset -= 0x2c34;
      e_fdinfo_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c38 && offset < 0x2c3c) {
      offset -= 0x2c38;
      e_fdinfo_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c3c && offset < 0x2c40) {
      offset -= 0x2c3c;
      i_cmd_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c40 && offset < 0x2c44) {
      offset -= 0x2c40;
      i_cmd_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c44 && offset < 0x2c48) {
      offset -= 0x2c44;
      e_cmd_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c48 && offset < 0x2c4c) {
      offset -= 0x2c48;
      e_cmd_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c4c && offset < 0x2c50) {
      offset -= 0x2c4c;
      i_buff_overflow_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c50 && offset < 0x2c54) {
      offset -= 0x2c50;
      e_buff_overflow_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c54 && offset < 0x2c58) {
      offset -= 0x2c54;
      i_meta_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c58 && offset < 0x2c5c) {
      offset -= 0x2c58;
      e_meta_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c60 && offset < 0x2c6c) {
      offset -= 0x2c60;
      phv32_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c70 && offset < 0x2c78) {
      offset -= 0x2c70;
      phv16_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c78 && offset < 0x2c80) {
      offset -= 0x2c78;
      phv8_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c80 && offset < 0x2c84) {
      offset -= 0x2c80;
      i_volts_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c84 && offset < 0x2c88) {
      offset -= 0x2c84;
      e_volts_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c88 && offset < 0x2c8c) {
      offset -= 0x2c88;
      i_fdinfo_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c8c && offset < 0x2c90) {
      offset -= 0x2c8c;
      e_fdinfo_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c90 && offset < 0x2c94) {
      offset -= 0x2c90;
      i_cmd_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c94 && offset < 0x2c98) {
      offset -= 0x2c94;
      e_cmd_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c98 && offset < 0x2c9c) {
      offset -= 0x2c98;
      i_freelist_empty_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c9c && offset < 0x2ca0) {
      offset -= 0x2c9c;
      e_freelist_empty_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2ca0 && offset < 0x2ca4) {
      offset -= 0x2ca0;
      phv_count_sel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2ca4 && offset < 0x2ca8) {
      offset -= 0x2ca4;
      phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2ca8 && offset < 0x2cac) {
      offset -= 0x2ca8;
      input_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2cac && offset < 0x2cb0) {
      offset -= 0x2cac;
      fcu_latency_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2cb0 && offset < 0x2cb4) {
      offset -= 0x2cb0;
      egr_unicast_check_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2cb4 && offset < 0x2cb8) {
      offset -= 0x2cb4;
      lfltr_eop_delay_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2cb8 && offset < 0x2cbc) {
      offset -= 0x2cb8;
      i_chan_mismatch_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2cbc && offset < 0x2cc0) {
      offset -= 0x2cbc;
      e_chan_mismatch_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2cc0 && offset < 0x2ce0) {
      offset -= 0x2cc0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      cfg48_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2ce0 && offset < 0x2cf0) {
      offset -= 0x2ce0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      cfg48_mask_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2cf0 && offset < 0x2d00) {
      offset -= 0x2cf0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      cfg48_data_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset < 0x1000) {
      offset -= 0x0;
      ingr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1000 && offset < 0x2000) {
      offset -= 0x1000;
      egr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2000 && offset < 0x2800) {
      offset -= 0x2000;
      int i0 = offset / 0x100;
      offset  -= i0 * 0x100;
      csum_engine_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2880 && offset < 0x28e4) {
      offset -= 0x2880;
      ingr_meta_pov_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2900 && offset < 0x293c) {
      offset -= 0x2900;
      egr_meta_pov_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2b80 && offset < 0x2b94) {
      offset -= 0x2b80;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2be0 && offset < 0x2bf4) {
      offset -= 0x2be0;
      intr_b_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    i_phv8_grp_.reset();
    i_phv16_grp_.reset();
    i_phv32_grp_.reset();
    e_phv8_grp_.reset();
    e_phv16_grp_.reset();
    e_phv32_grp_.reset();
    mac0_rates_.reset();
    mac0_en_.reset();
    mac1_rates_.reset();
    mac1_en_.reset();
    mac2_rates_.reset();
    mac2_en_.reset();
    mac3_rates_.reset();
    mac3_en_.reset();
    mac4_rates_.reset();
    mac4_en_.reset();
    mac5_rates_.reset();
    mac5_en_.reset();
    mac6_rates_.reset();
    mac6_en_.reset();
    mac7_rates_.reset();
    mac7_en_.reset();
    mac8_rates_.reset();
    mac8_en_.reset();
    for (auto &f0 : lrnmask_) {
      f0.reset();
    }
    pv_tbl_sbe_err_log_.reset();
    pv_tbl_mbe_err_log_.reset();
    i_clot_fifo_sbe_err_log_.reset();
    i_clot_fifo_mbe_err_log_.reset();
    e_clot_fifo_sbe_err_log_.reset();
    e_clot_fifo_mbe_err_log_.reset();
    mau_acctg_fifo_fifo_sbe_err_log_.reset();
    mau_acctg_fifo_fifo_mbe_err_log_.reset();
    pvt_cfg_.reset();
    pvt_ecc_ctrl_.reset();
    i_clot_fifo_ecc_ctrl_.reset();
    e_clot_fifo_ecc_ctrl_.reset();
    mau_acctg_fifo_ecc_ctrl_.reset();
    mau_acctg_fifo_wmk_.reset();
    max_inp_buff_entries_.reset();
    slice_max_credits_.reset();
    i_meta_sbe_err_log_.reset();
    i_meta_mbe_err_log_.reset();
    e_meta_sbe_err_log_.reset();
    e_meta_mbe_err_log_.reset();
    phv32_sbe_err_log_.reset();
    phv32_mbe_err_log_.reset();
    phv16_sbe_err_log_.reset();
    phv16_mbe_err_log_.reset();
    phv8_sbe_err_log_.reset();
    phv8_mbe_err_log_.reset();
    i_volts_sbe_err_log_.reset();
    i_volts_mbe_err_log_.reset();
    e_volts_sbe_err_log_.reset();
    e_volts_mbe_err_log_.reset();
    i_fdinfo_sbe_err_log_.reset();
    i_fdinfo_mbe_err_log_.reset();
    e_fdinfo_sbe_err_log_.reset();
    e_fdinfo_mbe_err_log_.reset();
    i_cmd_sbe_err_log_.reset();
    i_cmd_mbe_err_log_.reset();
    e_cmd_sbe_err_log_.reset();
    e_cmd_mbe_err_log_.reset();
    i_buff_overflow_log_.reset();
    e_buff_overflow_log_.reset();
    i_meta_ecc_ctrl_.reset();
    e_meta_ecc_ctrl_.reset();
    phv32_ecc_ctrl_.reset();
    phv16_ecc_ctrl_.reset();
    phv8_ecc_ctrl_.reset();
    i_volts_ecc_ctrl_.reset();
    e_volts_ecc_ctrl_.reset();
    i_fdinfo_ecc_ctrl_.reset();
    e_fdinfo_ecc_ctrl_.reset();
    i_cmd_ecc_ctrl_.reset();
    e_cmd_ecc_ctrl_.reset();
    i_freelist_empty_err_log_.reset();
    e_freelist_empty_err_log_.reset();
    phv_count_sel_.reset();
    phv_count_.reset();
    input_status_.reset();
    fcu_latency_ctrl_.reset();
    egr_unicast_check_.reset();
    lfltr_eop_delay_.reset();
    i_chan_mismatch_err_log_.reset();
    e_chan_mismatch_err_log_.reset();
    for (auto &f0 : cfg48_) {
      f0.reset();
    }
    for (auto &f0 : cfg48_mask_) {
      f0.reset();
    }
    for (auto &f0 : cfg48_data_) {
      f0.reset();
    }
    ingr_.reset();
    egr_.reset();
    for (auto &f0 : csum_engine_) {
      f0.reset();
    }
    ingr_meta_pov_.reset();
    egr_meta_pov_.reset();
    intr_.reset();
    intr_b_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x2808 && offset < 0x280c) {
      offset -= 0x2808;
      r += i_phv8_grp_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x280c && offset < 0x2810) {
      offset -= 0x280c;
      r += i_phv16_grp_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2810 && offset < 0x2814) {
      offset -= 0x2810;
      r += i_phv32_grp_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2814 && offset < 0x2818) {
      offset -= 0x2814;
      r += e_phv8_grp_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2818 && offset < 0x281c) {
      offset -= 0x2818;
      r += e_phv16_grp_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x281c && offset < 0x2820) {
      offset -= 0x281c;
      r += e_phv32_grp_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2820 && offset < 0x2824) {
      offset -= 0x2820;
      r += mac0_rates_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2824 && offset < 0x2828) {
      offset -= 0x2824;
      r += mac0_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2828 && offset < 0x282c) {
      offset -= 0x2828;
      r += mac1_rates_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x282c && offset < 0x2830) {
      offset -= 0x282c;
      r += mac1_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2830 && offset < 0x2834) {
      offset -= 0x2830;
      r += mac2_rates_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2834 && offset < 0x2838) {
      offset -= 0x2834;
      r += mac2_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2838 && offset < 0x283c) {
      offset -= 0x2838;
      r += mac3_rates_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x283c && offset < 0x2840) {
      offset -= 0x283c;
      r += mac3_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2840 && offset < 0x2844) {
      offset -= 0x2840;
      r += mac4_rates_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2844 && offset < 0x2848) {
      offset -= 0x2844;
      r += mac4_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2848 && offset < 0x284c) {
      offset -= 0x2848;
      r += mac5_rates_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x284c && offset < 0x2850) {
      offset -= 0x284c;
      r += mac5_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2850 && offset < 0x2854) {
      offset -= 0x2850;
      r += mac6_rates_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2854 && offset < 0x2858) {
      offset -= 0x2854;
      r += mac6_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2858 && offset < 0x285c) {
      offset -= 0x2858;
      r += mac7_rates_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x285c && offset < 0x2860) {
      offset -= 0x285c;
      r += mac7_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2860 && offset < 0x2864) {
      offset -= 0x2860;
      r += mac8_rates_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2864 && offset < 0x2868) {
      offset -= 0x2864;
      r += mac8_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2a00 && offset < 0x2b80) {
      offset -= 0x2a00;
      int i0 = offset / 0x30;
      offset  -= i0 * 0x30;
      r += lrnmask_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2b94 && offset < 0x2b98) {
      offset -= 0x2b94;
      r += pv_tbl_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2b98 && offset < 0x2b9c) {
      offset -= 0x2b98;
      r += pv_tbl_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2b9c && offset < 0x2ba0) {
      offset -= 0x2b9c;
      r += i_clot_fifo_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2ba0 && offset < 0x2ba4) {
      offset -= 0x2ba0;
      r += i_clot_fifo_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2ba4 && offset < 0x2ba8) {
      offset -= 0x2ba4;
      r += e_clot_fifo_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2ba8 && offset < 0x2bac) {
      offset -= 0x2ba8;
      r += e_clot_fifo_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2bac && offset < 0x2bb0) {
      offset -= 0x2bac;
      r += mau_acctg_fifo_fifo_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2bb0 && offset < 0x2bb4) {
      offset -= 0x2bb0;
      r += mau_acctg_fifo_fifo_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2bb4 && offset < 0x2bb8) {
      offset -= 0x2bb4;
      r += pvt_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2bb8 && offset < 0x2bbc) {
      offset -= 0x2bb8;
      r += pvt_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2bbc && offset < 0x2bc0) {
      offset -= 0x2bbc;
      r += i_clot_fifo_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2bc0 && offset < 0x2bc4) {
      offset -= 0x2bc0;
      r += e_clot_fifo_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2bc4 && offset < 0x2bc8) {
      offset -= 0x2bc4;
      r += mau_acctg_fifo_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2bc8 && offset < 0x2bcc) {
      offset -= 0x2bc8;
      r += mau_acctg_fifo_wmk_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2bcc && offset < 0x2bd0) {
      offset -= 0x2bcc;
      r += max_inp_buff_entries_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2bd0 && offset < 0x2bd4) {
      offset -= 0x2bd0;
      r += slice_max_credits_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2bf4 && offset < 0x2bf8) {
      offset -= 0x2bf4;
      r += i_meta_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2bf8 && offset < 0x2bfc) {
      offset -= 0x2bf8;
      r += i_meta_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2bfc && offset < 0x2c00) {
      offset -= 0x2bfc;
      r += e_meta_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c00 && offset < 0x2c04) {
      offset -= 0x2c00;
      r += e_meta_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c04 && offset < 0x2c08) {
      offset -= 0x2c04;
      r += phv32_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c08 && offset < 0x2c0c) {
      offset -= 0x2c08;
      r += phv32_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c0c && offset < 0x2c10) {
      offset -= 0x2c0c;
      r += phv16_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c10 && offset < 0x2c14) {
      offset -= 0x2c10;
      r += phv16_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c14 && offset < 0x2c18) {
      offset -= 0x2c14;
      r += phv8_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c18 && offset < 0x2c1c) {
      offset -= 0x2c18;
      r += phv8_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c1c && offset < 0x2c20) {
      offset -= 0x2c1c;
      r += i_volts_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c20 && offset < 0x2c24) {
      offset -= 0x2c20;
      r += i_volts_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c24 && offset < 0x2c28) {
      offset -= 0x2c24;
      r += e_volts_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c28 && offset < 0x2c2c) {
      offset -= 0x2c28;
      r += e_volts_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c2c && offset < 0x2c30) {
      offset -= 0x2c2c;
      r += i_fdinfo_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c30 && offset < 0x2c34) {
      offset -= 0x2c30;
      r += i_fdinfo_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c34 && offset < 0x2c38) {
      offset -= 0x2c34;
      r += e_fdinfo_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c38 && offset < 0x2c3c) {
      offset -= 0x2c38;
      r += e_fdinfo_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c3c && offset < 0x2c40) {
      offset -= 0x2c3c;
      r += i_cmd_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c40 && offset < 0x2c44) {
      offset -= 0x2c40;
      r += i_cmd_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c44 && offset < 0x2c48) {
      offset -= 0x2c44;
      r += e_cmd_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c48 && offset < 0x2c4c) {
      offset -= 0x2c48;
      r += e_cmd_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c4c && offset < 0x2c50) {
      offset -= 0x2c4c;
      r += i_buff_overflow_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c50 && offset < 0x2c54) {
      offset -= 0x2c50;
      r += e_buff_overflow_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c54 && offset < 0x2c58) {
      offset -= 0x2c54;
      r += i_meta_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c58 && offset < 0x2c5c) {
      offset -= 0x2c58;
      r += e_meta_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c60 && offset < 0x2c6c) {
      offset -= 0x2c60;
      r += phv32_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c70 && offset < 0x2c78) {
      offset -= 0x2c70;
      r += phv16_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c78 && offset < 0x2c80) {
      offset -= 0x2c78;
      r += phv8_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c80 && offset < 0x2c84) {
      offset -= 0x2c80;
      r += i_volts_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c84 && offset < 0x2c88) {
      offset -= 0x2c84;
      r += e_volts_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c88 && offset < 0x2c8c) {
      offset -= 0x2c88;
      r += i_fdinfo_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c8c && offset < 0x2c90) {
      offset -= 0x2c8c;
      r += e_fdinfo_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c90 && offset < 0x2c94) {
      offset -= 0x2c90;
      r += i_cmd_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c94 && offset < 0x2c98) {
      offset -= 0x2c94;
      r += e_cmd_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c98 && offset < 0x2c9c) {
      offset -= 0x2c98;
      r += i_freelist_empty_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c9c && offset < 0x2ca0) {
      offset -= 0x2c9c;
      r += e_freelist_empty_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2ca0 && offset < 0x2ca4) {
      offset -= 0x2ca0;
      r += phv_count_sel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2ca4 && offset < 0x2ca8) {
      offset -= 0x2ca4;
      r += phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2ca8 && offset < 0x2cac) {
      offset -= 0x2ca8;
      r += input_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2cac && offset < 0x2cb0) {
      offset -= 0x2cac;
      r += fcu_latency_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2cb0 && offset < 0x2cb4) {
      offset -= 0x2cb0;
      r += egr_unicast_check_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2cb4 && offset < 0x2cb8) {
      offset -= 0x2cb4;
      r += lfltr_eop_delay_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2cb8 && offset < 0x2cbc) {
      offset -= 0x2cb8;
      r += i_chan_mismatch_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2cbc && offset < 0x2cc0) {
      offset -= 0x2cbc;
      r += e_chan_mismatch_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2cc0 && offset < 0x2ce0) {
      offset -= 0x2cc0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += cfg48_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2ce0 && offset < 0x2cf0) {
      offset -= 0x2ce0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += cfg48_mask_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2cf0 && offset < 0x2d00) {
      offset -= 0x2cf0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += cfg48_data_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset < 0x1000) {
      offset -= 0x0;
      r += ingr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1000 && offset < 0x2000) {
      offset -= 0x1000;
      r += egr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2000 && offset < 0x2800) {
      offset -= 0x2000;
      int i0 = offset / 0x100;
      offset  -= i0 * 0x100;
      r += csum_engine_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2880 && offset < 0x28e4) {
      offset -= 0x2880;
      r += ingr_meta_pov_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2900 && offset < 0x293c) {
      offset -= 0x2900;
      r += egr_meta_pov_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2b80 && offset < 0x2b94) {
      offset -= 0x2b80;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2be0 && offset < 0x2bf4) {
      offset -= 0x2be0;
      r += intr_b_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += i_phv8_grp_.to_string(print_zeros,indent_string) ;
    r += i_phv16_grp_.to_string(print_zeros,indent_string) ;
    r += i_phv32_grp_.to_string(print_zeros,indent_string) ;
    r += e_phv8_grp_.to_string(print_zeros,indent_string) ;
    r += e_phv16_grp_.to_string(print_zeros,indent_string) ;
    r += e_phv32_grp_.to_string(print_zeros,indent_string) ;
    r += mac0_rates_.to_string(print_zeros,indent_string) ;
    r += mac0_en_.to_string(print_zeros,indent_string) ;
    r += mac1_rates_.to_string(print_zeros,indent_string) ;
    r += mac1_en_.to_string(print_zeros,indent_string) ;
    r += mac2_rates_.to_string(print_zeros,indent_string) ;
    r += mac2_en_.to_string(print_zeros,indent_string) ;
    r += mac3_rates_.to_string(print_zeros,indent_string) ;
    r += mac3_en_.to_string(print_zeros,indent_string) ;
    r += mac4_rates_.to_string(print_zeros,indent_string) ;
    r += mac4_en_.to_string(print_zeros,indent_string) ;
    r += mac5_rates_.to_string(print_zeros,indent_string) ;
    r += mac5_en_.to_string(print_zeros,indent_string) ;
    r += mac6_rates_.to_string(print_zeros,indent_string) ;
    r += mac6_en_.to_string(print_zeros,indent_string) ;
    r += mac7_rates_.to_string(print_zeros,indent_string) ;
    r += mac7_en_.to_string(print_zeros,indent_string) ;
    r += mac8_rates_.to_string(print_zeros,indent_string) ;
    r += mac8_en_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<8;++a0) {
      r += lrnmask_[a0].to_string(print_zeros,indent_string) ;
    }
    r += pv_tbl_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += pv_tbl_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += i_clot_fifo_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += i_clot_fifo_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += e_clot_fifo_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += e_clot_fifo_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += mau_acctg_fifo_fifo_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += mau_acctg_fifo_fifo_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += pvt_cfg_.to_string(print_zeros,indent_string) ;
    r += pvt_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += i_clot_fifo_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += e_clot_fifo_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += mau_acctg_fifo_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += mau_acctg_fifo_wmk_.to_string(print_zeros,indent_string) ;
    r += max_inp_buff_entries_.to_string(print_zeros,indent_string) ;
    r += slice_max_credits_.to_string(print_zeros,indent_string) ;
    r += i_meta_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += i_meta_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += e_meta_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += e_meta_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += phv32_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += phv32_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += phv16_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += phv16_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += phv8_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += phv8_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += i_volts_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += i_volts_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += e_volts_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += e_volts_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += i_fdinfo_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += i_fdinfo_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += e_fdinfo_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += e_fdinfo_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += i_cmd_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += i_cmd_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += e_cmd_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += e_cmd_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += i_buff_overflow_log_.to_string(print_zeros,indent_string) ;
    r += e_buff_overflow_log_.to_string(print_zeros,indent_string) ;
    r += i_meta_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += e_meta_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += phv32_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += phv16_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += phv8_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += i_volts_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += e_volts_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += i_fdinfo_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += e_fdinfo_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += i_cmd_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += e_cmd_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += i_freelist_empty_err_log_.to_string(print_zeros,indent_string) ;
    r += e_freelist_empty_err_log_.to_string(print_zeros,indent_string) ;
    r += phv_count_sel_.to_string(print_zeros,indent_string) ;
    r += phv_count_.to_string(print_zeros,indent_string) ;
    r += input_status_.to_string(print_zeros,indent_string) ;
    r += fcu_latency_ctrl_.to_string(print_zeros,indent_string) ;
    r += egr_unicast_check_.to_string(print_zeros,indent_string) ;
    r += lfltr_eop_delay_.to_string(print_zeros,indent_string) ;
    r += i_chan_mismatch_err_log_.to_string(print_zeros,indent_string) ;
    r += e_chan_mismatch_err_log_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += cfg48_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += cfg48_mask_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += cfg48_data_[a0].to_string(print_zeros,indent_string) ;
    }
    r += ingr_.to_string(print_zeros,indent_string) ;
    r += egr_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<8;++a0) {
      r += csum_engine_[a0].to_string(print_zeros,indent_string) ;
    }
    r += ingr_meta_pov_.to_string(print_zeros,indent_string) ;
    r += egr_meta_pov_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    r += intr_b_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrIcRegsIPhv8Grp i_phv8_grp_;
  DprsrIcRegsIPhv16Grp i_phv16_grp_;
  DprsrIcRegsIPhv32Grp i_phv32_grp_;
  DprsrIcRegsEPhv8Grp e_phv8_grp_;
  DprsrIcRegsEPhv16Grp e_phv16_grp_;
  DprsrIcRegsEPhv32Grp e_phv32_grp_;
  DprsrIcRegsMac0Rates mac0_rates_;
  DprsrIcRegsMac0En mac0_en_;
  DprsrIcRegsMac1Rates mac1_rates_;
  DprsrIcRegsMac1En mac1_en_;
  DprsrIcRegsMac2Rates mac2_rates_;
  DprsrIcRegsMac2En mac2_en_;
  DprsrIcRegsMac3Rates mac3_rates_;
  DprsrIcRegsMac3En mac3_en_;
  DprsrIcRegsMac4Rates mac4_rates_;
  DprsrIcRegsMac4En mac4_en_;
  DprsrIcRegsMac5Rates mac5_rates_;
  DprsrIcRegsMac5En mac5_en_;
  DprsrIcRegsMac6Rates mac6_rates_;
  DprsrIcRegsMac6En mac6_en_;
  DprsrIcRegsMac7Rates mac7_rates_;
  DprsrIcRegsMac7En mac7_en_;
  DprsrIcRegsMac8Rates mac8_rates_;
  DprsrIcRegsMac8En mac8_en_;
  std::array< DprsrLearnMaskEntryR, 8 > lrnmask_;
  DprsrIcRegsPvTblSbeErrLog pv_tbl_sbe_err_log_;
  DprsrIcRegsPvTblMbeErrLog pv_tbl_mbe_err_log_;
  DprsrIcRegsIClotFifoSbeErrLog i_clot_fifo_sbe_err_log_;
  DprsrIcRegsIClotFifoMbeErrLog i_clot_fifo_mbe_err_log_;
  DprsrIcRegsEClotFifoSbeErrLog e_clot_fifo_sbe_err_log_;
  DprsrIcRegsEClotFifoMbeErrLog e_clot_fifo_mbe_err_log_;
  DprsrIcRegsMauAcctgFifoFifoSbeErrLog mau_acctg_fifo_fifo_sbe_err_log_;
  DprsrIcRegsMauAcctgFifoFifoMbeErrLog mau_acctg_fifo_fifo_mbe_err_log_;
  DprsrPhvTimeoutR pvt_cfg_;
  DprsrIcRegsPvtEccCtrl pvt_ecc_ctrl_;
  DprsrIcRegsIClotFifoEccCtrl i_clot_fifo_ecc_ctrl_;
  DprsrIcRegsEClotFifoEccCtrl e_clot_fifo_ecc_ctrl_;
  DprsrIcRegsMauAcctgFifoEccCtrl mau_acctg_fifo_ecc_ctrl_;
  DprsrIcRegsMauAcctgFifoWmk mau_acctg_fifo_wmk_;
  DprsrIcRegsMaxInpBuffEntries max_inp_buff_entries_;
  DprsrIcRegsSliceMaxCredits slice_max_credits_;
  DprsrIcRegsIMetaSbeErrLog i_meta_sbe_err_log_;
  DprsrIcRegsIMetaMbeErrLog i_meta_mbe_err_log_;
  DprsrIcRegsEMetaSbeErrLog e_meta_sbe_err_log_;
  DprsrIcRegsEMetaMbeErrLog e_meta_mbe_err_log_;
  DprsrIcRegsPhv32SbeErrLog phv32_sbe_err_log_;
  DprsrIcRegsPhv32MbeErrLog phv32_mbe_err_log_;
  DprsrIcRegsPhv16SbeErrLog phv16_sbe_err_log_;
  DprsrIcRegsPhv16MbeErrLog phv16_mbe_err_log_;
  DprsrIcRegsPhv8SbeErrLog phv8_sbe_err_log_;
  DprsrIcRegsPhv8MbeErrLog phv8_mbe_err_log_;
  DprsrIcRegsIVoltsSbeErrLog i_volts_sbe_err_log_;
  DprsrIcRegsIVoltsMbeErrLog i_volts_mbe_err_log_;
  DprsrIcRegsEVoltsSbeErrLog e_volts_sbe_err_log_;
  DprsrIcRegsEVoltsMbeErrLog e_volts_mbe_err_log_;
  DprsrIcRegsIFdinfoSbeErrLog i_fdinfo_sbe_err_log_;
  DprsrIcRegsIFdinfoMbeErrLog i_fdinfo_mbe_err_log_;
  DprsrIcRegsEFdinfoSbeErrLog e_fdinfo_sbe_err_log_;
  DprsrIcRegsEFdinfoMbeErrLog e_fdinfo_mbe_err_log_;
  DprsrIcRegsICmdSbeErrLog i_cmd_sbe_err_log_;
  DprsrIcRegsICmdMbeErrLog i_cmd_mbe_err_log_;
  DprsrIcRegsECmdSbeErrLog e_cmd_sbe_err_log_;
  DprsrIcRegsECmdMbeErrLog e_cmd_mbe_err_log_;
  DprsrIcRegsIBuffOverflowLog i_buff_overflow_log_;
  DprsrIcRegsEBuffOverflowLog e_buff_overflow_log_;
  DprsrIcRegsIMetaEccCtrl i_meta_ecc_ctrl_;
  DprsrIcRegsEMetaEccCtrl e_meta_ecc_ctrl_;
  DprsrIcRegsPhv32EccCtrl phv32_ecc_ctrl_;
  DprsrIcRegsPhv16EccCtrl phv16_ecc_ctrl_;
  DprsrIcRegsPhv8EccCtrl phv8_ecc_ctrl_;
  DprsrIcRegsIVoltsEccCtrl i_volts_ecc_ctrl_;
  DprsrIcRegsEVoltsEccCtrl e_volts_ecc_ctrl_;
  DprsrIcRegsIFdinfoEccCtrl i_fdinfo_ecc_ctrl_;
  DprsrIcRegsEFdinfoEccCtrl e_fdinfo_ecc_ctrl_;
  DprsrIcRegsICmdEccCtrl i_cmd_ecc_ctrl_;
  DprsrIcRegsECmdEccCtrl e_cmd_ecc_ctrl_;
  DprsrIcRegsIFreelistEmptyErrLog i_freelist_empty_err_log_;
  DprsrIcRegsEFreelistEmptyErrLog e_freelist_empty_err_log_;
  DprsrIcRegsPhvCountSel phv_count_sel_;
  DprsrInpPhvCountR phv_count_;
  DprsrInpEmptyStatusR input_status_;
  DprsrSliceLatFcuR fcu_latency_ctrl_;
  DprsrInpEgrUnicastCheckR egr_unicast_check_;
  DprsrIcRegsLfltrEopDelay lfltr_eop_delay_;
  DprsrIcRegsIChanMismatchErrLog i_chan_mismatch_err_log_;
  DprsrIcRegsEChanMismatchErrLog e_chan_mismatch_err_log_;
  std::array< PpCtrCfg48R, 4 > cfg48_;
  std::array< DprsrIcRegsCfg48Mask, 4 > cfg48_mask_;
  std::array< DprsrIcRegsCfg48Data, 4 > cfg48_data_;
  DprsrInputNonPpIngAndEgrG ingr_;
  DprsrInputNonPpIngAndEgrG egr_;
  std::array< DprsrIFullcsumEngineG, 8 > csum_engine_;
  DprsrIngressHdrMetaForInputG ingr_meta_pov_;
  DprsrEgressHdrMetaForInputG egr_meta_pov_;
  DprsrIcRegsIntr intr_;
  DprsrIcRegsIntrB intr_b_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x28000; // to get to icr
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_DPRSR_IC_REGS_H__
