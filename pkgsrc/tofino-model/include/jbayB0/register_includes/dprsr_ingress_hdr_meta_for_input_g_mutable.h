/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_INGRESS_HDR_META_FOR_INPUT_G_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_INGRESS_HDR_META_FOR_INPUT_G_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "dprsr_ingress_hdr_meta_for_input_g_m_afc_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_bypss_egr_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_copy_to_cpu_cos_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_ct_disable_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_ct_mcast_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_deflect_on_drop_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_hash1_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_hash2_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_icos_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_mirr_c2c_ctrl_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_mirr_coal_smpl_len_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_mirr_dond_ctrl_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_mirr_epipe_port_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_mirr_hash_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_mirr_icos_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_mirr_io_sel_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_mirr_mc_ctrl_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_mirr_qid_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_mtu_trunc_err_f_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_mtu_trunc_len_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_pkt_color_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_qid_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_rid_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_xid_l1_mutable.h"
#include "dprsr_ingress_hdr_meta_for_input_g_m_xid_l2_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class DprsrIngressHdrMetaForInputGMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrIngressHdrMetaForInputGMutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 100, true, write_callback, read_callback, std::string("DprsrIngressHdrMetaForInputGMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrIngressHdrMetaForInputGMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrIngressHdrMetaForInputGMutable")
    {
    }
public:





  DprsrIngressHdrMetaForInputGMHash1Mutable &ingr_meta_pov_m_hash1() { return ingr_meta_pov_m_hash1_; }





  DprsrIngressHdrMetaForInputGMHash2Mutable &ingr_meta_pov_m_hash2() { return ingr_meta_pov_m_hash2_; }





  DprsrIngressHdrMetaForInputGMCopyToCpuCosMutable &ingr_meta_pov_m_copy_to_cpu_cos() { return ingr_meta_pov_m_copy_to_cpu_cos_; }





  DprsrIngressHdrMetaForInputGMDeflectOnDropMutable &ingr_meta_pov_m_deflect_on_drop() { return ingr_meta_pov_m_deflect_on_drop_; }





  DprsrIngressHdrMetaForInputGMIcosMutable &ingr_meta_pov_m_icos() { return ingr_meta_pov_m_icos_; }





  DprsrIngressHdrMetaForInputGMPktColorMutable &ingr_meta_pov_m_pkt_color() { return ingr_meta_pov_m_pkt_color_; }





  DprsrIngressHdrMetaForInputGMQidMutable &ingr_meta_pov_m_qid() { return ingr_meta_pov_m_qid_; }





  DprsrIngressHdrMetaForInputGMXidL1Mutable &ingr_meta_pov_m_xid_l1() { return ingr_meta_pov_m_xid_l1_; }





  DprsrIngressHdrMetaForInputGMXidL2Mutable &ingr_meta_pov_m_xid_l2() { return ingr_meta_pov_m_xid_l2_; }





  DprsrIngressHdrMetaForInputGMRidMutable &ingr_meta_pov_m_rid() { return ingr_meta_pov_m_rid_; }





  DprsrIngressHdrMetaForInputGMBypssEgrMutable &ingr_meta_pov_m_bypss_egr() { return ingr_meta_pov_m_bypss_egr_; }





  DprsrIngressHdrMetaForInputGMCtDisableMutable &ingr_meta_pov_m_ct_disable() { return ingr_meta_pov_m_ct_disable_; }





  DprsrIngressHdrMetaForInputGMCtMcastMutable &ingr_meta_pov_m_ct_mcast() { return ingr_meta_pov_m_ct_mcast_; }





  DprsrIngressHdrMetaForInputGMMirrIoSelMutable &ingr_meta_pov_m_mirr_io_sel() { return ingr_meta_pov_m_mirr_io_sel_; }





  DprsrIngressHdrMetaForInputGMMirrHashMutable &ingr_meta_pov_m_mirr_hash() { return ingr_meta_pov_m_mirr_hash_; }





  DprsrIngressHdrMetaForInputGMMirrEpipePortMutable &ingr_meta_pov_m_mirr_epipe_port() { return ingr_meta_pov_m_mirr_epipe_port_; }





  DprsrIngressHdrMetaForInputGMMirrQidMutable &ingr_meta_pov_m_mirr_qid() { return ingr_meta_pov_m_mirr_qid_; }





  DprsrIngressHdrMetaForInputGMMirrDondCtrlMutable &ingr_meta_pov_m_mirr_dond_ctrl() { return ingr_meta_pov_m_mirr_dond_ctrl_; }





  DprsrIngressHdrMetaForInputGMMirrIcosMutable &ingr_meta_pov_m_mirr_icos() { return ingr_meta_pov_m_mirr_icos_; }





  DprsrIngressHdrMetaForInputGMMirrMcCtrlMutable &ingr_meta_pov_m_mirr_mc_ctrl() { return ingr_meta_pov_m_mirr_mc_ctrl_; }





  DprsrIngressHdrMetaForInputGMMirrC2cCtrlMutable &ingr_meta_pov_m_mirr_c2c_ctrl() { return ingr_meta_pov_m_mirr_c2c_ctrl_; }





  DprsrIngressHdrMetaForInputGMMirrCoalSmplLenMutable &ingr_meta_pov_m_mirr_coal_smpl_len() { return ingr_meta_pov_m_mirr_coal_smpl_len_; }





  DprsrIngressHdrMetaForInputGMAfcMutable &ingr_meta_pov_m_afc() { return ingr_meta_pov_m_afc_; }





  DprsrIngressHdrMetaForInputGMMtuTruncLenMutable &ingr_meta_pov_m_mtu_trunc_len() { return ingr_meta_pov_m_mtu_trunc_len_; }





  DprsrIngressHdrMetaForInputGMMtuTruncErrFMutable &ingr_meta_pov_m_mtu_trunc_err_f() { return ingr_meta_pov_m_mtu_trunc_err_f_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x2880 && offset < 0x2884) {
      offset -= 0x2880;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_hash1_.read( offset, data );
    }
    else if (offset >= 0x2884 && offset < 0x2888) {
      offset -= 0x2884;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_hash2_.read( offset, data );
    }
    else if (offset >= 0x2888 && offset < 0x288c) {
      offset -= 0x2888;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_copy_to_cpu_cos_.read( offset, data );
    }
    else if (offset >= 0x288c && offset < 0x2890) {
      offset -= 0x288c;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_deflect_on_drop_.read( offset, data );
    }
    else if (offset >= 0x2890 && offset < 0x2894) {
      offset -= 0x2890;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_icos_.read( offset, data );
    }
    else if (offset >= 0x2894 && offset < 0x2898) {
      offset -= 0x2894;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_pkt_color_.read( offset, data );
    }
    else if (offset >= 0x2898 && offset < 0x289c) {
      offset -= 0x2898;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_qid_.read( offset, data );
    }
    else if (offset >= 0x289c && offset < 0x28a0) {
      offset -= 0x289c;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_xid_l1_.read( offset, data );
    }
    else if (offset >= 0x28a0 && offset < 0x28a4) {
      offset -= 0x28a0;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_xid_l2_.read( offset, data );
    }
    else if (offset >= 0x28a4 && offset < 0x28a8) {
      offset -= 0x28a4;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_rid_.read( offset, data );
    }
    else if (offset >= 0x28a8 && offset < 0x28ac) {
      offset -= 0x28a8;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_bypss_egr_.read( offset, data );
    }
    else if (offset >= 0x28ac && offset < 0x28b0) {
      offset -= 0x28ac;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_ct_disable_.read( offset, data );
    }
    else if (offset >= 0x28b0 && offset < 0x28b4) {
      offset -= 0x28b0;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_ct_mcast_.read( offset, data );
    }
    else if (offset >= 0x28b4 && offset < 0x28b8) {
      offset -= 0x28b4;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_mirr_io_sel_.read( offset, data );
    }
    else if (offset >= 0x28b8 && offset < 0x28bc) {
      offset -= 0x28b8;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_mirr_hash_.read( offset, data );
    }
    else if (offset >= 0x28bc && offset < 0x28c0) {
      offset -= 0x28bc;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_mirr_epipe_port_.read( offset, data );
    }
    else if (offset >= 0x28c0 && offset < 0x28c4) {
      offset -= 0x28c0;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_mirr_qid_.read( offset, data );
    }
    else if (offset >= 0x28c4 && offset < 0x28c8) {
      offset -= 0x28c4;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_mirr_dond_ctrl_.read( offset, data );
    }
    else if (offset >= 0x28c8 && offset < 0x28cc) {
      offset -= 0x28c8;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_mirr_icos_.read( offset, data );
    }
    else if (offset >= 0x28cc && offset < 0x28d0) {
      offset -= 0x28cc;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_mirr_mc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x28d0 && offset < 0x28d4) {
      offset -= 0x28d0;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_mirr_c2c_ctrl_.read( offset, data );
    }
    else if (offset >= 0x28d4 && offset < 0x28d8) {
      offset -= 0x28d4;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_mirr_coal_smpl_len_.read( offset, data );
    }
    else if (offset >= 0x28d8 && offset < 0x28dc) {
      offset -= 0x28d8;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_afc_.read( offset, data );
    }
    else if (offset >= 0x28dc && offset < 0x28e0) {
      offset -= 0x28dc;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_mtu_trunc_len_.read( offset, data );
    }
    else if (offset >= 0x28e0 && offset < 0x28e4) {
      offset -= 0x28e0;
      if (read_callback_) read_callback_();
      ingr_meta_pov_m_mtu_trunc_err_f_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x2880 && offset < 0x2884) {
      offset -= 0x2880;
      ingr_meta_pov_m_hash1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2884 && offset < 0x2888) {
      offset -= 0x2884;
      ingr_meta_pov_m_hash2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2888 && offset < 0x288c) {
      offset -= 0x2888;
      ingr_meta_pov_m_copy_to_cpu_cos_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x288c && offset < 0x2890) {
      offset -= 0x288c;
      ingr_meta_pov_m_deflect_on_drop_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2890 && offset < 0x2894) {
      offset -= 0x2890;
      ingr_meta_pov_m_icos_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2894 && offset < 0x2898) {
      offset -= 0x2894;
      ingr_meta_pov_m_pkt_color_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2898 && offset < 0x289c) {
      offset -= 0x2898;
      ingr_meta_pov_m_qid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x289c && offset < 0x28a0) {
      offset -= 0x289c;
      ingr_meta_pov_m_xid_l1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28a0 && offset < 0x28a4) {
      offset -= 0x28a0;
      ingr_meta_pov_m_xid_l2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28a4 && offset < 0x28a8) {
      offset -= 0x28a4;
      ingr_meta_pov_m_rid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28a8 && offset < 0x28ac) {
      offset -= 0x28a8;
      ingr_meta_pov_m_bypss_egr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28ac && offset < 0x28b0) {
      offset -= 0x28ac;
      ingr_meta_pov_m_ct_disable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28b0 && offset < 0x28b4) {
      offset -= 0x28b0;
      ingr_meta_pov_m_ct_mcast_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28b4 && offset < 0x28b8) {
      offset -= 0x28b4;
      ingr_meta_pov_m_mirr_io_sel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28b8 && offset < 0x28bc) {
      offset -= 0x28b8;
      ingr_meta_pov_m_mirr_hash_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28bc && offset < 0x28c0) {
      offset -= 0x28bc;
      ingr_meta_pov_m_mirr_epipe_port_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28c0 && offset < 0x28c4) {
      offset -= 0x28c0;
      ingr_meta_pov_m_mirr_qid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28c4 && offset < 0x28c8) {
      offset -= 0x28c4;
      ingr_meta_pov_m_mirr_dond_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28c8 && offset < 0x28cc) {
      offset -= 0x28c8;
      ingr_meta_pov_m_mirr_icos_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28cc && offset < 0x28d0) {
      offset -= 0x28cc;
      ingr_meta_pov_m_mirr_mc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28d0 && offset < 0x28d4) {
      offset -= 0x28d0;
      ingr_meta_pov_m_mirr_c2c_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28d4 && offset < 0x28d8) {
      offset -= 0x28d4;
      ingr_meta_pov_m_mirr_coal_smpl_len_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28d8 && offset < 0x28dc) {
      offset -= 0x28d8;
      ingr_meta_pov_m_afc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28dc && offset < 0x28e0) {
      offset -= 0x28dc;
      ingr_meta_pov_m_mtu_trunc_len_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28e0 && offset < 0x28e4) {
      offset -= 0x28e0;
      ingr_meta_pov_m_mtu_trunc_err_f_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    ingr_meta_pov_m_hash1_.reset();
    ingr_meta_pov_m_hash2_.reset();
    ingr_meta_pov_m_copy_to_cpu_cos_.reset();
    ingr_meta_pov_m_deflect_on_drop_.reset();
    ingr_meta_pov_m_icos_.reset();
    ingr_meta_pov_m_pkt_color_.reset();
    ingr_meta_pov_m_qid_.reset();
    ingr_meta_pov_m_xid_l1_.reset();
    ingr_meta_pov_m_xid_l2_.reset();
    ingr_meta_pov_m_rid_.reset();
    ingr_meta_pov_m_bypss_egr_.reset();
    ingr_meta_pov_m_ct_disable_.reset();
    ingr_meta_pov_m_ct_mcast_.reset();
    ingr_meta_pov_m_mirr_io_sel_.reset();
    ingr_meta_pov_m_mirr_hash_.reset();
    ingr_meta_pov_m_mirr_epipe_port_.reset();
    ingr_meta_pov_m_mirr_qid_.reset();
    ingr_meta_pov_m_mirr_dond_ctrl_.reset();
    ingr_meta_pov_m_mirr_icos_.reset();
    ingr_meta_pov_m_mirr_mc_ctrl_.reset();
    ingr_meta_pov_m_mirr_c2c_ctrl_.reset();
    ingr_meta_pov_m_mirr_coal_smpl_len_.reset();
    ingr_meta_pov_m_afc_.reset();
    ingr_meta_pov_m_mtu_trunc_len_.reset();
    ingr_meta_pov_m_mtu_trunc_err_f_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x2880 && offset < 0x2884) {
      offset -= 0x2880;
      r += ingr_meta_pov_m_hash1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2884 && offset < 0x2888) {
      offset -= 0x2884;
      r += ingr_meta_pov_m_hash2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2888 && offset < 0x288c) {
      offset -= 0x2888;
      r += ingr_meta_pov_m_copy_to_cpu_cos_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x288c && offset < 0x2890) {
      offset -= 0x288c;
      r += ingr_meta_pov_m_deflect_on_drop_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2890 && offset < 0x2894) {
      offset -= 0x2890;
      r += ingr_meta_pov_m_icos_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2894 && offset < 0x2898) {
      offset -= 0x2894;
      r += ingr_meta_pov_m_pkt_color_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2898 && offset < 0x289c) {
      offset -= 0x2898;
      r += ingr_meta_pov_m_qid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x289c && offset < 0x28a0) {
      offset -= 0x289c;
      r += ingr_meta_pov_m_xid_l1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28a0 && offset < 0x28a4) {
      offset -= 0x28a0;
      r += ingr_meta_pov_m_xid_l2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28a4 && offset < 0x28a8) {
      offset -= 0x28a4;
      r += ingr_meta_pov_m_rid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28a8 && offset < 0x28ac) {
      offset -= 0x28a8;
      r += ingr_meta_pov_m_bypss_egr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28ac && offset < 0x28b0) {
      offset -= 0x28ac;
      r += ingr_meta_pov_m_ct_disable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28b0 && offset < 0x28b4) {
      offset -= 0x28b0;
      r += ingr_meta_pov_m_ct_mcast_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28b4 && offset < 0x28b8) {
      offset -= 0x28b4;
      r += ingr_meta_pov_m_mirr_io_sel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28b8 && offset < 0x28bc) {
      offset -= 0x28b8;
      r += ingr_meta_pov_m_mirr_hash_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28bc && offset < 0x28c0) {
      offset -= 0x28bc;
      r += ingr_meta_pov_m_mirr_epipe_port_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28c0 && offset < 0x28c4) {
      offset -= 0x28c0;
      r += ingr_meta_pov_m_mirr_qid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28c4 && offset < 0x28c8) {
      offset -= 0x28c4;
      r += ingr_meta_pov_m_mirr_dond_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28c8 && offset < 0x28cc) {
      offset -= 0x28c8;
      r += ingr_meta_pov_m_mirr_icos_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28cc && offset < 0x28d0) {
      offset -= 0x28cc;
      r += ingr_meta_pov_m_mirr_mc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28d0 && offset < 0x28d4) {
      offset -= 0x28d0;
      r += ingr_meta_pov_m_mirr_c2c_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28d4 && offset < 0x28d8) {
      offset -= 0x28d4;
      r += ingr_meta_pov_m_mirr_coal_smpl_len_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28d8 && offset < 0x28dc) {
      offset -= 0x28d8;
      r += ingr_meta_pov_m_afc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28dc && offset < 0x28e0) {
      offset -= 0x28dc;
      r += ingr_meta_pov_m_mtu_trunc_len_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28e0 && offset < 0x28e4) {
      offset -= 0x28e0;
      r += ingr_meta_pov_m_mtu_trunc_err_f_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += ingr_meta_pov_m_hash1_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_hash2_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_copy_to_cpu_cos_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_deflect_on_drop_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_icos_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_pkt_color_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_qid_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_xid_l1_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_xid_l2_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_rid_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_bypss_egr_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_ct_disable_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_ct_mcast_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_mirr_io_sel_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_mirr_hash_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_mirr_epipe_port_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_mirr_qid_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_mirr_dond_ctrl_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_mirr_icos_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_mirr_mc_ctrl_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_mirr_c2c_ctrl_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_mirr_coal_smpl_len_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_afc_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_mtu_trunc_len_.to_string(print_zeros,indent_string) ;
    r += ingr_meta_pov_m_mtu_trunc_err_f_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrIngressHdrMetaForInputGMHash1Mutable ingr_meta_pov_m_hash1_;
  DprsrIngressHdrMetaForInputGMHash2Mutable ingr_meta_pov_m_hash2_;
  DprsrIngressHdrMetaForInputGMCopyToCpuCosMutable ingr_meta_pov_m_copy_to_cpu_cos_;
  DprsrIngressHdrMetaForInputGMDeflectOnDropMutable ingr_meta_pov_m_deflect_on_drop_;
  DprsrIngressHdrMetaForInputGMIcosMutable ingr_meta_pov_m_icos_;
  DprsrIngressHdrMetaForInputGMPktColorMutable ingr_meta_pov_m_pkt_color_;
  DprsrIngressHdrMetaForInputGMQidMutable ingr_meta_pov_m_qid_;
  DprsrIngressHdrMetaForInputGMXidL1Mutable ingr_meta_pov_m_xid_l1_;
  DprsrIngressHdrMetaForInputGMXidL2Mutable ingr_meta_pov_m_xid_l2_;
  DprsrIngressHdrMetaForInputGMRidMutable ingr_meta_pov_m_rid_;
  DprsrIngressHdrMetaForInputGMBypssEgrMutable ingr_meta_pov_m_bypss_egr_;
  DprsrIngressHdrMetaForInputGMCtDisableMutable ingr_meta_pov_m_ct_disable_;
  DprsrIngressHdrMetaForInputGMCtMcastMutable ingr_meta_pov_m_ct_mcast_;
  DprsrIngressHdrMetaForInputGMMirrIoSelMutable ingr_meta_pov_m_mirr_io_sel_;
  DprsrIngressHdrMetaForInputGMMirrHashMutable ingr_meta_pov_m_mirr_hash_;
  DprsrIngressHdrMetaForInputGMMirrEpipePortMutable ingr_meta_pov_m_mirr_epipe_port_;
  DprsrIngressHdrMetaForInputGMMirrQidMutable ingr_meta_pov_m_mirr_qid_;
  DprsrIngressHdrMetaForInputGMMirrDondCtrlMutable ingr_meta_pov_m_mirr_dond_ctrl_;
  DprsrIngressHdrMetaForInputGMMirrIcosMutable ingr_meta_pov_m_mirr_icos_;
  DprsrIngressHdrMetaForInputGMMirrMcCtrlMutable ingr_meta_pov_m_mirr_mc_ctrl_;
  DprsrIngressHdrMetaForInputGMMirrC2cCtrlMutable ingr_meta_pov_m_mirr_c2c_ctrl_;
  DprsrIngressHdrMetaForInputGMMirrCoalSmplLenMutable ingr_meta_pov_m_mirr_coal_smpl_len_;
  DprsrIngressHdrMetaForInputGMAfcMutable ingr_meta_pov_m_afc_;
  DprsrIngressHdrMetaForInputGMMtuTruncLenMutable ingr_meta_pov_m_mtu_trunc_len_;
  DprsrIngressHdrMetaForInputGMMtuTruncErrFMutable ingr_meta_pov_m_mtu_trunc_err_f_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x28000; // to get to icr
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_DPRSR_INGRESS_HDR_META_FOR_INPUT_G_MUTABLE_H__
