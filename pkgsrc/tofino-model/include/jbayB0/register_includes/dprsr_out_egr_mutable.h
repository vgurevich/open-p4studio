/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_OUT_EGR_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_OUT_EGR_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "dprsr_cfg_bytadj_dis_r_mutable.h"
#include "dprsr_cfg_crc_chk_dis_r_mutable.h"
#include "dprsr_cfg_crc_dis_r_mutable.h"
#include "dprsr_cfg_crc_err_dis_r_mutable.h"
#include "dprsr_cfg_crc_err_inj_r_mutable.h"
#include "dprsr_cred_status_r_mutable.h"
#include "dprsr_epb_bp_thresh_pipe_mutable.h"
#include "dprsr_out_egr_arb_fifo_cred_mutable.h"
#include "dprsr_out_egr_cfg48_data_mutable.h"
#include "dprsr_out_egr_cfg48_data_sel_mutable.h"
#include "dprsr_out_egr_cfg48_mask_mutable.h"
#include "dprsr_out_egr_chan_status_cfg_mutable.h"
#include "dprsr_out_egr_ctl_chan_err_log_mutable.h"
#include "dprsr_out_egr_ctrl_timeout_mutable.h"
#include "dprsr_out_egr_diag_bus_mutable.h"
#include "dprsr_out_egr_intr_0_mutable.h"
#include "dprsr_out_egr_intr_1_mutable.h"
#include "dprsr_out_egr_meta0_ecc_ctrl_mutable.h"
#include "dprsr_out_egr_meta1_ecc_ctrl_mutable.h"
#include "dprsr_out_egr_meta2_ecc_ctrl_mutable.h"
#include "dprsr_out_egr_meta_mbe_err_log_mutable.h"
#include "dprsr_out_egr_meta_sbe_err_log_mutable.h"
#include "dprsr_out_egr_mirrhdr0_ecc_ctrl_mutable.h"
#include "dprsr_out_egr_mirrhdr1_ecc_ctrl_mutable.h"
#include "dprsr_out_egr_mirrhdr2_ecc_ctrl_mutable.h"
#include "dprsr_out_egr_mirrhdr_mbe_err_log_mutable.h"
#include "dprsr_out_egr_mirrhdr_sbe_err_log_mutable.h"
#include "dprsr_out_egr_pktdata0_ecc_ctrl_mutable.h"
#include "dprsr_out_egr_pktdata1_ecc_ctrl_mutable.h"
#include "dprsr_out_egr_pktdata2_ecc_ctrl_mutable.h"
#include "dprsr_out_egr_pktdata_mbe_err_log_mutable.h"
#include "dprsr_out_egr_pktdata_sbe_err_log_mutable.h"
#include "dprsr_out_egr_pkthdr0_ecc_ctrl_mutable.h"
#include "dprsr_out_egr_pkthdr1_ecc_ctrl_mutable.h"
#include "dprsr_out_egr_pkthdr2_ecc_ctrl_mutable.h"
#include "dprsr_out_egr_pkthdr_mbe_err_log_mutable.h"
#include "dprsr_out_egr_pkthdr_sbe_err_log_mutable.h"
#include "dprsr_out_egr_tmsch0_ecc_ctrl_mutable.h"
#include "dprsr_out_egr_tmsch1_ecc_ctrl_mutable.h"
#include "dprsr_out_egr_tmsch2_ecc_ctrl_mutable.h"
#include "dprsr_out_egr_tmsch_mbe_err_log_mutable.h"
#include "dprsr_out_egr_tmsch_sbe_err_log_mutable.h"
#include "dprsr_out_egr_u_thresh_100_g_mutable.h"
#include "dprsr_out_egr_u_thresh_10_g_mutable.h"
#include "dprsr_out_egr_u_thresh_200_g_mutable.h"
#include "dprsr_out_egr_u_thresh_25_g_mutable.h"
#include "dprsr_out_egr_u_thresh_400_g_mutable.h"
#include "dprsr_out_egr_u_thresh_40_g_mutable.h"
#include "dprsr_out_egr_u_thresh_50_g_mutable.h"
#include "dprsr_output_chan_status_r_mutable.h"
#include "dprsr_output_status_r_mutable.h"
#include "dprsr_perf_byt_count_r_mutable.h"
#include "dprsr_perf_count_r_mutable.h"
#include "dprsr_perf_probe_r_mutable.h"
#include "dprsr_teop_inhibit_r_mutable.h"
#include "dprsr_underrun_mode_r_mutable.h"
#include "dprsr_x_creds_pipe_mutable.h"
#include "pp_ctr_cfg48_r_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class DprsrOutEgrMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrOutEgrMutable(
      int chipNumber, int index_pipe_addrmap, int index_dprsr_ho_e, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_dprsr_ho_e), 4096, true, write_callback, read_callback, std::string("DprsrOutEgrMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_dprsr_ho_e))
    {
    }
  DprsrOutEgrMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrOutEgrMutable")
    {
    }
public:






  DprsrCfgCrcDisRMutable &cfg_crc_dis() { return cfg_crc_dis_; }






  DprsrCfgCrcErrDisRMutable &cfg_crc_err_dis() { return cfg_crc_err_dis_; }






  DprsrCfgCrcErrInjRMutable &cfg_crc_err_inj() { return cfg_crc_err_inj_; }






  DprsrCfgCrcChkDisRMutable &cfg_crc_chk_dis() { return cfg_crc_chk_dis_; }





  DprsrCfgBytadjDisRMutable &cfg_bytadj() { return cfg_bytadj_; }







  DprsrCredStatusRMutable &crd_status() { return crd_status_; }







  DprsrPerfBytCountRMutable &perf_byt(int j0) { return perf_byt_[j0]; }





  DprsrPerfBytCountRMutable &perf_byt_time() { return perf_byt_time_; }







  DprsrPerfCountRMutable &perf_pkt(int j0) { return perf_pkt_[j0]; }





  DprsrPerfCountRMutable &perf_pkt_time() { return perf_pkt_time_; }





  DprsrPerfProbeRMutable &perf_probe() { return perf_probe_; }





  DprsrOutEgrMetaSbeErrLogMutable &meta_sbe_err_log() { return meta_sbe_err_log_; }





  DprsrOutEgrMetaMbeErrLogMutable &meta_mbe_err_log() { return meta_mbe_err_log_; }





  DprsrOutEgrPkthdrSbeErrLogMutable &pkthdr_sbe_err_log() { return pkthdr_sbe_err_log_; }





  DprsrOutEgrPkthdrMbeErrLogMutable &pkthdr_mbe_err_log() { return pkthdr_mbe_err_log_; }





  DprsrOutEgrMirrhdrSbeErrLogMutable &mirrhdr_sbe_err_log() { return mirrhdr_sbe_err_log_; }





  DprsrOutEgrMirrhdrMbeErrLogMutable &mirrhdr_mbe_err_log() { return mirrhdr_mbe_err_log_; }





  DprsrOutEgrPktdataSbeErrLogMutable &pktdata_sbe_err_log() { return pktdata_sbe_err_log_; }





  DprsrOutEgrPktdataMbeErrLogMutable &pktdata_mbe_err_log() { return pktdata_mbe_err_log_; }





  DprsrOutEgrTmschSbeErrLogMutable &tmsch_sbe_err_log() { return tmsch_sbe_err_log_; }





  DprsrOutEgrTmschMbeErrLogMutable &tmsch_mbe_err_log() { return tmsch_mbe_err_log_; }





  DprsrOutEgrMeta0EccCtrlMutable &meta0_ecc_ctrl() { return meta0_ecc_ctrl_; }





  DprsrOutEgrMeta1EccCtrlMutable &meta1_ecc_ctrl() { return meta1_ecc_ctrl_; }





  DprsrOutEgrMeta2EccCtrlMutable &meta2_ecc_ctrl() { return meta2_ecc_ctrl_; }





  DprsrOutEgrPkthdr0EccCtrlMutable &pkthdr0_ecc_ctrl() { return pkthdr0_ecc_ctrl_; }





  DprsrOutEgrPkthdr1EccCtrlMutable &pkthdr1_ecc_ctrl() { return pkthdr1_ecc_ctrl_; }





  DprsrOutEgrPkthdr2EccCtrlMutable &pkthdr2_ecc_ctrl() { return pkthdr2_ecc_ctrl_; }





  DprsrOutEgrMirrhdr0EccCtrlMutable &mirrhdr0_ecc_ctrl() { return mirrhdr0_ecc_ctrl_; }





  DprsrOutEgrMirrhdr1EccCtrlMutable &mirrhdr1_ecc_ctrl() { return mirrhdr1_ecc_ctrl_; }





  DprsrOutEgrMirrhdr2EccCtrlMutable &mirrhdr2_ecc_ctrl() { return mirrhdr2_ecc_ctrl_; }





  DprsrOutEgrPktdata0EccCtrlMutable &pktdata0_ecc_ctrl() { return pktdata0_ecc_ctrl_; }





  DprsrOutEgrPktdata1EccCtrlMutable &pktdata1_ecc_ctrl() { return pktdata1_ecc_ctrl_; }





  DprsrOutEgrPktdata2EccCtrlMutable &pktdata2_ecc_ctrl() { return pktdata2_ecc_ctrl_; }





  DprsrOutEgrTmsch0EccCtrlMutable &tmsch0_ecc_ctrl() { return tmsch0_ecc_ctrl_; }





  DprsrOutEgrTmsch1EccCtrlMutable &tmsch1_ecc_ctrl() { return tmsch1_ecc_ctrl_; }





  DprsrOutEgrTmsch2EccCtrlMutable &tmsch2_ecc_ctrl() { return tmsch2_ecc_ctrl_; }








  DprsrUnderrunModeRMutable &u_mode() { return u_mode_; }








  DprsrOutEgrUThresh_10GMutable &u_thresh_10_g() { return u_thresh_10_g_; }








  DprsrOutEgrUThresh_25GMutable &u_thresh_25_g() { return u_thresh_25_g_; }








  DprsrOutEgrUThresh_40GMutable &u_thresh_40_g() { return u_thresh_40_g_; }








  DprsrOutEgrUThresh_50GMutable &u_thresh_50_g() { return u_thresh_50_g_; }








  DprsrOutEgrUThresh_100GMutable &u_thresh_100_g() { return u_thresh_100_g_; }








  DprsrOutEgrUThresh_200GMutable &u_thresh_200_g() { return u_thresh_200_g_; }








  DprsrOutEgrUThresh_400GMutable &u_thresh_400_g() { return u_thresh_400_g_; }







  DprsrTeopInhibitRMutable &teop() { return teop_; }





  DprsrOutEgrCtlChanErrLogMutable &ctl_chan_err_log() { return ctl_chan_err_log_; }










  DprsrOutEgrArbFifoCredMutable &arb_fifo_cred() { return arb_fifo_cred_; }








  PpCtrCfg48RMutable &cfg48(int j0) { return cfg48_[j0]; }








































  DprsrOutEgrCfg48MaskMutable &cfg48_mask(int j0) { return cfg48_mask_[j0]; }








  DprsrOutEgrCfg48DataMutable &cfg48_data(int j0) { return cfg48_data_[j0]; }







  DprsrOutEgrCfg48DataSelMutable &cfg48_data_sel() { return cfg48_data_sel_; }








  DprsrOutEgrCtrlTimeoutMutable &ctrl_timeout() { return ctrl_timeout_; }






  DprsrOutputStatusRMutable &output_status() { return output_status_; }






  DprsrOutEgrDiagBusMutable &diag_bus() { return diag_bus_; }







  DprsrOutEgrChanStatusCfgMutable &chan_status_cfg() { return chan_status_cfg_; }





  DprsrOutputChanStatusRMutable &chan_info() { return chan_info_; }





  DprsrEpbBpThreshPipeMutable &epb_bp() { return epb_bp_; }







  DprsrXCredsPipeMutable &cfg_ebuf() { return cfg_ebuf_; }
  DprsrOutEgrIntr_0Mutable &intr_0() { return intr_0_; }
  DprsrOutEgrIntr_1Mutable &intr_1() { return intr_1_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x148 && offset < 0x14c) {
      offset -= 0x148;
      if (read_callback_) read_callback_();
      cfg_crc_dis_.read( offset, data );
    }
    else if (offset >= 0x14c && offset < 0x150) {
      offset -= 0x14c;
      if (read_callback_) read_callback_();
      cfg_crc_err_dis_.read( offset, data );
    }
    else if (offset >= 0x150 && offset < 0x154) {
      offset -= 0x150;
      if (read_callback_) read_callback_();
      cfg_crc_err_inj_.read( offset, data );
    }
    else if (offset >= 0x154 && offset < 0x158) {
      offset -= 0x154;
      if (read_callback_) read_callback_();
      cfg_crc_chk_dis_.read( offset, data );
    }
    else if (offset >= 0x158 && offset < 0x15c) {
      offset -= 0x158;
      if (read_callback_) read_callback_();
      cfg_bytadj_.read( offset, data );
    }
    else if (offset >= 0x15c && offset < 0x160) {
      offset -= 0x15c;
      if (read_callback_) read_callback_();
      crd_status_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x290) {
      offset -= 0x200;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      perf_byt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x290 && offset < 0x298) {
      offset -= 0x290;
      if (read_callback_) read_callback_();
      perf_byt_time_.read( offset, data );
    }
    else if (offset >= 0x300 && offset < 0x390) {
      offset -= 0x300;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      perf_pkt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x390 && offset < 0x398) {
      offset -= 0x390;
      if (read_callback_) read_callback_();
      perf_pkt_time_.read( offset, data );
    }
    else if (offset >= 0x398 && offset < 0x39c) {
      offset -= 0x398;
      if (read_callback_) read_callback_();
      perf_probe_.read( offset, data );
    }
    else if (offset >= 0x3d4 && offset < 0x3d8) {
      offset -= 0x3d4;
      if (read_callback_) read_callback_();
      meta_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x3d8 && offset < 0x3dc) {
      offset -= 0x3d8;
      if (read_callback_) read_callback_();
      meta_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x3dc && offset < 0x3e0) {
      offset -= 0x3dc;
      if (read_callback_) read_callback_();
      pkthdr_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x3e0 && offset < 0x3e4) {
      offset -= 0x3e0;
      if (read_callback_) read_callback_();
      pkthdr_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x3e4 && offset < 0x3e8) {
      offset -= 0x3e4;
      if (read_callback_) read_callback_();
      mirrhdr_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x3e8 && offset < 0x3ec) {
      offset -= 0x3e8;
      if (read_callback_) read_callback_();
      mirrhdr_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x3ec && offset < 0x3f0) {
      offset -= 0x3ec;
      if (read_callback_) read_callback_();
      pktdata_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x3f0 && offset < 0x3f4) {
      offset -= 0x3f0;
      if (read_callback_) read_callback_();
      pktdata_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x3f4 && offset < 0x3f8) {
      offset -= 0x3f4;
      if (read_callback_) read_callback_();
      tmsch_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x3f8 && offset < 0x3fc) {
      offset -= 0x3f8;
      if (read_callback_) read_callback_();
      tmsch_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x3fc && offset < 0x400) {
      offset -= 0x3fc;
      if (read_callback_) read_callback_();
      meta0_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x400 && offset < 0x404) {
      offset -= 0x400;
      if (read_callback_) read_callback_();
      meta1_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x404 && offset < 0x408) {
      offset -= 0x404;
      if (read_callback_) read_callback_();
      meta2_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x408 && offset < 0x40c) {
      offset -= 0x408;
      if (read_callback_) read_callback_();
      pkthdr0_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x40c && offset < 0x410) {
      offset -= 0x40c;
      if (read_callback_) read_callback_();
      pkthdr1_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x410 && offset < 0x414) {
      offset -= 0x410;
      if (read_callback_) read_callback_();
      pkthdr2_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x414 && offset < 0x418) {
      offset -= 0x414;
      if (read_callback_) read_callback_();
      mirrhdr0_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x418 && offset < 0x41c) {
      offset -= 0x418;
      if (read_callback_) read_callback_();
      mirrhdr1_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x41c && offset < 0x420) {
      offset -= 0x41c;
      if (read_callback_) read_callback_();
      mirrhdr2_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x420 && offset < 0x428) {
      offset -= 0x420;
      if (read_callback_) read_callback_();
      pktdata0_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x428 && offset < 0x430) {
      offset -= 0x428;
      if (read_callback_) read_callback_();
      pktdata1_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x430 && offset < 0x438) {
      offset -= 0x430;
      if (read_callback_) read_callback_();
      pktdata2_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x438 && offset < 0x43c) {
      offset -= 0x438;
      if (read_callback_) read_callback_();
      tmsch0_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x43c && offset < 0x440) {
      offset -= 0x43c;
      if (read_callback_) read_callback_();
      tmsch1_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x440 && offset < 0x444) {
      offset -= 0x440;
      if (read_callback_) read_callback_();
      tmsch2_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x444 && offset < 0x448) {
      offset -= 0x444;
      if (read_callback_) read_callback_();
      u_mode_.read( offset, data );
    }
    else if (offset >= 0x448 && offset < 0x44c) {
      offset -= 0x448;
      if (read_callback_) read_callback_();
      u_thresh_10_g_.read( offset, data );
    }
    else if (offset >= 0x44c && offset < 0x450) {
      offset -= 0x44c;
      if (read_callback_) read_callback_();
      u_thresh_25_g_.read( offset, data );
    }
    else if (offset >= 0x450 && offset < 0x454) {
      offset -= 0x450;
      if (read_callback_) read_callback_();
      u_thresh_40_g_.read( offset, data );
    }
    else if (offset >= 0x454 && offset < 0x458) {
      offset -= 0x454;
      if (read_callback_) read_callback_();
      u_thresh_50_g_.read( offset, data );
    }
    else if (offset >= 0x458 && offset < 0x45c) {
      offset -= 0x458;
      if (read_callback_) read_callback_();
      u_thresh_100_g_.read( offset, data );
    }
    else if (offset >= 0x45c && offset < 0x460) {
      offset -= 0x45c;
      if (read_callback_) read_callback_();
      u_thresh_200_g_.read( offset, data );
    }
    else if (offset >= 0x460 && offset < 0x464) {
      offset -= 0x460;
      if (read_callback_) read_callback_();
      u_thresh_400_g_.read( offset, data );
    }
    else if (offset >= 0x464 && offset < 0x468) {
      offset -= 0x464;
      if (read_callback_) read_callback_();
      teop_.read( offset, data );
    }
    else if (offset >= 0x468 && offset < 0x46c) {
      offset -= 0x468;
      if (read_callback_) read_callback_();
      ctl_chan_err_log_.read( offset, data );
    }
    else if (offset >= 0x46c && offset < 0x470) {
      offset -= 0x46c;
      if (read_callback_) read_callback_();
      arb_fifo_cred_.read( offset, data );
    }
    else if (offset >= 0x480 && offset < 0x4a0) {
      offset -= 0x480;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      cfg48_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x4a0 && offset < 0x4b0) {
      offset -= 0x4a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      cfg48_mask_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x4b0 && offset < 0x4c0) {
      offset -= 0x4b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      cfg48_data_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x4c0 && offset < 0x4c4) {
      offset -= 0x4c0;
      if (read_callback_) read_callback_();
      cfg48_data_sel_.read( offset, data );
    }
    else if (offset >= 0x4c4 && offset < 0x4c8) {
      offset -= 0x4c4;
      if (read_callback_) read_callback_();
      ctrl_timeout_.read( offset, data );
    }
    else if (offset >= 0x4c8 && offset < 0x4cc) {
      offset -= 0x4c8;
      if (read_callback_) read_callback_();
      output_status_.read( offset, data );
    }
    else if (offset >= 0x4cc && offset < 0x4d0) {
      offset -= 0x4cc;
      if (read_callback_) read_callback_();
      diag_bus_.read( offset, data );
    }
    else if (offset >= 0x4d0 && offset < 0x4d4) {
      offset -= 0x4d0;
      if (read_callback_) read_callback_();
      chan_status_cfg_.read( offset, data );
    }
    else if (offset >= 0x4d4 && offset < 0x4d8) {
      offset -= 0x4d4;
      if (read_callback_) read_callback_();
      chan_info_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      epb_bp_.read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x148) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      cfg_ebuf_.read( offset, data );
    }
    else if (offset >= 0x3a0 && offset < 0x3b4) {
      offset -= 0x3a0;
      if (read_callback_) read_callback_();
      intr_0_.read( offset, data );
    }
    else if (offset >= 0x3c0 && offset < 0x3d4) {
      offset -= 0x3c0;
      if (read_callback_) read_callback_();
      intr_1_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x148 && offset < 0x14c) {
      offset -= 0x148;
      cfg_crc_dis_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14c && offset < 0x150) {
      offset -= 0x14c;
      cfg_crc_err_dis_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x150 && offset < 0x154) {
      offset -= 0x150;
      cfg_crc_err_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x154 && offset < 0x158) {
      offset -= 0x154;
      cfg_crc_chk_dis_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x158 && offset < 0x15c) {
      offset -= 0x158;
      cfg_bytadj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x15c && offset < 0x160) {
      offset -= 0x15c;
      crd_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x290) {
      offset -= 0x200;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      perf_byt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x290 && offset < 0x298) {
      offset -= 0x290;
      perf_byt_time_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x300 && offset < 0x390) {
      offset -= 0x300;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      perf_pkt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x390 && offset < 0x398) {
      offset -= 0x390;
      perf_pkt_time_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x398 && offset < 0x39c) {
      offset -= 0x398;
      perf_probe_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3d4 && offset < 0x3d8) {
      offset -= 0x3d4;
      meta_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3d8 && offset < 0x3dc) {
      offset -= 0x3d8;
      meta_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3dc && offset < 0x3e0) {
      offset -= 0x3dc;
      pkthdr_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3e0 && offset < 0x3e4) {
      offset -= 0x3e0;
      pkthdr_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3e4 && offset < 0x3e8) {
      offset -= 0x3e4;
      mirrhdr_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3e8 && offset < 0x3ec) {
      offset -= 0x3e8;
      mirrhdr_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3ec && offset < 0x3f0) {
      offset -= 0x3ec;
      pktdata_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3f0 && offset < 0x3f4) {
      offset -= 0x3f0;
      pktdata_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3f4 && offset < 0x3f8) {
      offset -= 0x3f4;
      tmsch_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3f8 && offset < 0x3fc) {
      offset -= 0x3f8;
      tmsch_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3fc && offset < 0x400) {
      offset -= 0x3fc;
      meta0_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400 && offset < 0x404) {
      offset -= 0x400;
      meta1_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x404 && offset < 0x408) {
      offset -= 0x404;
      meta2_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x408 && offset < 0x40c) {
      offset -= 0x408;
      pkthdr0_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40c && offset < 0x410) {
      offset -= 0x40c;
      pkthdr1_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x410 && offset < 0x414) {
      offset -= 0x410;
      pkthdr2_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x414 && offset < 0x418) {
      offset -= 0x414;
      mirrhdr0_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x418 && offset < 0x41c) {
      offset -= 0x418;
      mirrhdr1_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x41c && offset < 0x420) {
      offset -= 0x41c;
      mirrhdr2_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x420 && offset < 0x428) {
      offset -= 0x420;
      pktdata0_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x428 && offset < 0x430) {
      offset -= 0x428;
      pktdata1_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x430 && offset < 0x438) {
      offset -= 0x430;
      pktdata2_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x438 && offset < 0x43c) {
      offset -= 0x438;
      tmsch0_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x43c && offset < 0x440) {
      offset -= 0x43c;
      tmsch1_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x440 && offset < 0x444) {
      offset -= 0x440;
      tmsch2_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x444 && offset < 0x448) {
      offset -= 0x444;
      u_mode_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x448 && offset < 0x44c) {
      offset -= 0x448;
      u_thresh_10_g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x44c && offset < 0x450) {
      offset -= 0x44c;
      u_thresh_25_g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x450 && offset < 0x454) {
      offset -= 0x450;
      u_thresh_40_g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x454 && offset < 0x458) {
      offset -= 0x454;
      u_thresh_50_g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x458 && offset < 0x45c) {
      offset -= 0x458;
      u_thresh_100_g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x45c && offset < 0x460) {
      offset -= 0x45c;
      u_thresh_200_g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x460 && offset < 0x464) {
      offset -= 0x460;
      u_thresh_400_g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x464 && offset < 0x468) {
      offset -= 0x464;
      teop_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x468 && offset < 0x46c) {
      offset -= 0x468;
      ctl_chan_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x46c && offset < 0x470) {
      offset -= 0x46c;
      arb_fifo_cred_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x480 && offset < 0x4a0) {
      offset -= 0x480;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      cfg48_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4a0 && offset < 0x4b0) {
      offset -= 0x4a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      cfg48_mask_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4b0 && offset < 0x4c0) {
      offset -= 0x4b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      cfg48_data_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c0 && offset < 0x4c4) {
      offset -= 0x4c0;
      cfg48_data_sel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c4 && offset < 0x4c8) {
      offset -= 0x4c4;
      ctrl_timeout_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c8 && offset < 0x4cc) {
      offset -= 0x4c8;
      output_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4cc && offset < 0x4d0) {
      offset -= 0x4cc;
      diag_bus_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4d0 && offset < 0x4d4) {
      offset -= 0x4d0;
      chan_status_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4d4 && offset < 0x4d8) {
      offset -= 0x4d4;
      chan_info_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      epb_bp_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x148) {
      offset -= 0x100;
      cfg_ebuf_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3a0 && offset < 0x3b4) {
      offset -= 0x3a0;
      intr_0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c0 && offset < 0x3d4) {
      offset -= 0x3c0;
      intr_1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    cfg_crc_dis_.reset();
    cfg_crc_err_dis_.reset();
    cfg_crc_err_inj_.reset();
    cfg_crc_chk_dis_.reset();
    cfg_bytadj_.reset();
    crd_status_.reset();
    for (auto &f0 : perf_byt_) {
      f0.reset();
    }
    perf_byt_time_.reset();
    for (auto &f0 : perf_pkt_) {
      f0.reset();
    }
    perf_pkt_time_.reset();
    perf_probe_.reset();
    meta_sbe_err_log_.reset();
    meta_mbe_err_log_.reset();
    pkthdr_sbe_err_log_.reset();
    pkthdr_mbe_err_log_.reset();
    mirrhdr_sbe_err_log_.reset();
    mirrhdr_mbe_err_log_.reset();
    pktdata_sbe_err_log_.reset();
    pktdata_mbe_err_log_.reset();
    tmsch_sbe_err_log_.reset();
    tmsch_mbe_err_log_.reset();
    meta0_ecc_ctrl_.reset();
    meta1_ecc_ctrl_.reset();
    meta2_ecc_ctrl_.reset();
    pkthdr0_ecc_ctrl_.reset();
    pkthdr1_ecc_ctrl_.reset();
    pkthdr2_ecc_ctrl_.reset();
    mirrhdr0_ecc_ctrl_.reset();
    mirrhdr1_ecc_ctrl_.reset();
    mirrhdr2_ecc_ctrl_.reset();
    pktdata0_ecc_ctrl_.reset();
    pktdata1_ecc_ctrl_.reset();
    pktdata2_ecc_ctrl_.reset();
    tmsch0_ecc_ctrl_.reset();
    tmsch1_ecc_ctrl_.reset();
    tmsch2_ecc_ctrl_.reset();
    u_mode_.reset();
    u_thresh_10_g_.reset();
    u_thresh_25_g_.reset();
    u_thresh_40_g_.reset();
    u_thresh_50_g_.reset();
    u_thresh_100_g_.reset();
    u_thresh_200_g_.reset();
    u_thresh_400_g_.reset();
    teop_.reset();
    ctl_chan_err_log_.reset();
    arb_fifo_cred_.reset();
    for (auto &f0 : cfg48_) {
      f0.reset();
    }
    for (auto &f0 : cfg48_mask_) {
      f0.reset();
    }
    for (auto &f0 : cfg48_data_) {
      f0.reset();
    }
    cfg48_data_sel_.reset();
    ctrl_timeout_.reset();
    output_status_.reset();
    diag_bus_.reset();
    chan_status_cfg_.reset();
    chan_info_.reset();
    epb_bp_.reset();
    cfg_ebuf_.reset();
    intr_0_.reset();
    intr_1_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x148 && offset < 0x14c) {
      offset -= 0x148;
      r += cfg_crc_dis_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14c && offset < 0x150) {
      offset -= 0x14c;
      r += cfg_crc_err_dis_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x150 && offset < 0x154) {
      offset -= 0x150;
      r += cfg_crc_err_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x154 && offset < 0x158) {
      offset -= 0x154;
      r += cfg_crc_chk_dis_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x158 && offset < 0x15c) {
      offset -= 0x158;
      r += cfg_bytadj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x15c && offset < 0x160) {
      offset -= 0x15c;
      r += crd_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x290) {
      offset -= 0x200;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += perf_byt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x290 && offset < 0x298) {
      offset -= 0x290;
      r += perf_byt_time_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x300 && offset < 0x390) {
      offset -= 0x300;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += perf_pkt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x390 && offset < 0x398) {
      offset -= 0x390;
      r += perf_pkt_time_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x398 && offset < 0x39c) {
      offset -= 0x398;
      r += perf_probe_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3d4 && offset < 0x3d8) {
      offset -= 0x3d4;
      r += meta_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3d8 && offset < 0x3dc) {
      offset -= 0x3d8;
      r += meta_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3dc && offset < 0x3e0) {
      offset -= 0x3dc;
      r += pkthdr_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3e0 && offset < 0x3e4) {
      offset -= 0x3e0;
      r += pkthdr_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3e4 && offset < 0x3e8) {
      offset -= 0x3e4;
      r += mirrhdr_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3e8 && offset < 0x3ec) {
      offset -= 0x3e8;
      r += mirrhdr_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3ec && offset < 0x3f0) {
      offset -= 0x3ec;
      r += pktdata_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3f0 && offset < 0x3f4) {
      offset -= 0x3f0;
      r += pktdata_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3f4 && offset < 0x3f8) {
      offset -= 0x3f4;
      r += tmsch_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3f8 && offset < 0x3fc) {
      offset -= 0x3f8;
      r += tmsch_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3fc && offset < 0x400) {
      offset -= 0x3fc;
      r += meta0_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400 && offset < 0x404) {
      offset -= 0x400;
      r += meta1_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x404 && offset < 0x408) {
      offset -= 0x404;
      r += meta2_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x408 && offset < 0x40c) {
      offset -= 0x408;
      r += pkthdr0_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40c && offset < 0x410) {
      offset -= 0x40c;
      r += pkthdr1_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x410 && offset < 0x414) {
      offset -= 0x410;
      r += pkthdr2_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x414 && offset < 0x418) {
      offset -= 0x414;
      r += mirrhdr0_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x418 && offset < 0x41c) {
      offset -= 0x418;
      r += mirrhdr1_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x41c && offset < 0x420) {
      offset -= 0x41c;
      r += mirrhdr2_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x420 && offset < 0x428) {
      offset -= 0x420;
      r += pktdata0_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x428 && offset < 0x430) {
      offset -= 0x428;
      r += pktdata1_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x430 && offset < 0x438) {
      offset -= 0x430;
      r += pktdata2_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x438 && offset < 0x43c) {
      offset -= 0x438;
      r += tmsch0_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x43c && offset < 0x440) {
      offset -= 0x43c;
      r += tmsch1_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x440 && offset < 0x444) {
      offset -= 0x440;
      r += tmsch2_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x444 && offset < 0x448) {
      offset -= 0x444;
      r += u_mode_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x448 && offset < 0x44c) {
      offset -= 0x448;
      r += u_thresh_10_g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x44c && offset < 0x450) {
      offset -= 0x44c;
      r += u_thresh_25_g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x450 && offset < 0x454) {
      offset -= 0x450;
      r += u_thresh_40_g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x454 && offset < 0x458) {
      offset -= 0x454;
      r += u_thresh_50_g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x458 && offset < 0x45c) {
      offset -= 0x458;
      r += u_thresh_100_g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x45c && offset < 0x460) {
      offset -= 0x45c;
      r += u_thresh_200_g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x460 && offset < 0x464) {
      offset -= 0x460;
      r += u_thresh_400_g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x464 && offset < 0x468) {
      offset -= 0x464;
      r += teop_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x468 && offset < 0x46c) {
      offset -= 0x468;
      r += ctl_chan_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x46c && offset < 0x470) {
      offset -= 0x46c;
      r += arb_fifo_cred_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x480 && offset < 0x4a0) {
      offset -= 0x480;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += cfg48_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4a0 && offset < 0x4b0) {
      offset -= 0x4a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += cfg48_mask_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4b0 && offset < 0x4c0) {
      offset -= 0x4b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += cfg48_data_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c0 && offset < 0x4c4) {
      offset -= 0x4c0;
      r += cfg48_data_sel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c4 && offset < 0x4c8) {
      offset -= 0x4c4;
      r += ctrl_timeout_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c8 && offset < 0x4cc) {
      offset -= 0x4c8;
      r += output_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4cc && offset < 0x4d0) {
      offset -= 0x4cc;
      r += diag_bus_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4d0 && offset < 0x4d4) {
      offset -= 0x4d0;
      r += chan_status_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4d4 && offset < 0x4d8) {
      offset -= 0x4d4;
      r += chan_info_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      r += epb_bp_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x148) {
      offset -= 0x100;
      r += cfg_ebuf_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3a0 && offset < 0x3b4) {
      offset -= 0x3a0;
      r += intr_0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c0 && offset < 0x3d4) {
      offset -= 0x3c0;
      r += intr_1_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += cfg_crc_dis_.to_string(print_zeros,indent_string) ;
    r += cfg_crc_err_dis_.to_string(print_zeros,indent_string) ;
    r += cfg_crc_err_inj_.to_string(print_zeros,indent_string) ;
    r += cfg_crc_chk_dis_.to_string(print_zeros,indent_string) ;
    r += cfg_bytadj_.to_string(print_zeros,indent_string) ;
    r += crd_status_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<18;++a0) {
      r += perf_byt_[a0].to_string(print_zeros,indent_string) ;
    }
    r += perf_byt_time_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<18;++a0) {
      r += perf_pkt_[a0].to_string(print_zeros,indent_string) ;
    }
    r += perf_pkt_time_.to_string(print_zeros,indent_string) ;
    r += perf_probe_.to_string(print_zeros,indent_string) ;
    r += meta_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += meta_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += pkthdr_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += pkthdr_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += mirrhdr_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += mirrhdr_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += pktdata_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += pktdata_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += tmsch_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += tmsch_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += meta0_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += meta1_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += meta2_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += pkthdr0_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += pkthdr1_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += pkthdr2_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += mirrhdr0_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += mirrhdr1_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += mirrhdr2_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += pktdata0_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += pktdata1_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += pktdata2_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += tmsch0_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += tmsch1_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += tmsch2_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += u_mode_.to_string(print_zeros,indent_string) ;
    r += u_thresh_10_g_.to_string(print_zeros,indent_string) ;
    r += u_thresh_25_g_.to_string(print_zeros,indent_string) ;
    r += u_thresh_40_g_.to_string(print_zeros,indent_string) ;
    r += u_thresh_50_g_.to_string(print_zeros,indent_string) ;
    r += u_thresh_100_g_.to_string(print_zeros,indent_string) ;
    r += u_thresh_200_g_.to_string(print_zeros,indent_string) ;
    r += u_thresh_400_g_.to_string(print_zeros,indent_string) ;
    r += teop_.to_string(print_zeros,indent_string) ;
    r += ctl_chan_err_log_.to_string(print_zeros,indent_string) ;
    r += arb_fifo_cred_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += cfg48_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += cfg48_mask_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += cfg48_data_[a0].to_string(print_zeros,indent_string) ;
    }
    r += cfg48_data_sel_.to_string(print_zeros,indent_string) ;
    r += ctrl_timeout_.to_string(print_zeros,indent_string) ;
    r += output_status_.to_string(print_zeros,indent_string) ;
    r += diag_bus_.to_string(print_zeros,indent_string) ;
    r += chan_status_cfg_.to_string(print_zeros,indent_string) ;
    r += chan_info_.to_string(print_zeros,indent_string) ;
    r += epb_bp_.to_string(print_zeros,indent_string) ;
    r += cfg_ebuf_.to_string(print_zeros,indent_string) ;
    r += intr_0_.to_string(print_zeros,indent_string) ;
    r += intr_1_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrCfgCrcDisRMutable cfg_crc_dis_;
  DprsrCfgCrcErrDisRMutable cfg_crc_err_dis_;
  DprsrCfgCrcErrInjRMutable cfg_crc_err_inj_;
  DprsrCfgCrcChkDisRMutable cfg_crc_chk_dis_;
  DprsrCfgBytadjDisRMutable cfg_bytadj_;
  DprsrCredStatusRMutable crd_status_;
  std::array< DprsrPerfBytCountRMutable, 18 > perf_byt_;
  DprsrPerfBytCountRMutable perf_byt_time_;
  std::array< DprsrPerfCountRMutable, 18 > perf_pkt_;
  DprsrPerfCountRMutable perf_pkt_time_;
  DprsrPerfProbeRMutable perf_probe_;
  DprsrOutEgrMetaSbeErrLogMutable meta_sbe_err_log_;
  DprsrOutEgrMetaMbeErrLogMutable meta_mbe_err_log_;
  DprsrOutEgrPkthdrSbeErrLogMutable pkthdr_sbe_err_log_;
  DprsrOutEgrPkthdrMbeErrLogMutable pkthdr_mbe_err_log_;
  DprsrOutEgrMirrhdrSbeErrLogMutable mirrhdr_sbe_err_log_;
  DprsrOutEgrMirrhdrMbeErrLogMutable mirrhdr_mbe_err_log_;
  DprsrOutEgrPktdataSbeErrLogMutable pktdata_sbe_err_log_;
  DprsrOutEgrPktdataMbeErrLogMutable pktdata_mbe_err_log_;
  DprsrOutEgrTmschSbeErrLogMutable tmsch_sbe_err_log_;
  DprsrOutEgrTmschMbeErrLogMutable tmsch_mbe_err_log_;
  DprsrOutEgrMeta0EccCtrlMutable meta0_ecc_ctrl_;
  DprsrOutEgrMeta1EccCtrlMutable meta1_ecc_ctrl_;
  DprsrOutEgrMeta2EccCtrlMutable meta2_ecc_ctrl_;
  DprsrOutEgrPkthdr0EccCtrlMutable pkthdr0_ecc_ctrl_;
  DprsrOutEgrPkthdr1EccCtrlMutable pkthdr1_ecc_ctrl_;
  DprsrOutEgrPkthdr2EccCtrlMutable pkthdr2_ecc_ctrl_;
  DprsrOutEgrMirrhdr0EccCtrlMutable mirrhdr0_ecc_ctrl_;
  DprsrOutEgrMirrhdr1EccCtrlMutable mirrhdr1_ecc_ctrl_;
  DprsrOutEgrMirrhdr2EccCtrlMutable mirrhdr2_ecc_ctrl_;
  DprsrOutEgrPktdata0EccCtrlMutable pktdata0_ecc_ctrl_;
  DprsrOutEgrPktdata1EccCtrlMutable pktdata1_ecc_ctrl_;
  DprsrOutEgrPktdata2EccCtrlMutable pktdata2_ecc_ctrl_;
  DprsrOutEgrTmsch0EccCtrlMutable tmsch0_ecc_ctrl_;
  DprsrOutEgrTmsch1EccCtrlMutable tmsch1_ecc_ctrl_;
  DprsrOutEgrTmsch2EccCtrlMutable tmsch2_ecc_ctrl_;
  DprsrUnderrunModeRMutable u_mode_;
  DprsrOutEgrUThresh_10GMutable u_thresh_10_g_;
  DprsrOutEgrUThresh_25GMutable u_thresh_25_g_;
  DprsrOutEgrUThresh_40GMutable u_thresh_40_g_;
  DprsrOutEgrUThresh_50GMutable u_thresh_50_g_;
  DprsrOutEgrUThresh_100GMutable u_thresh_100_g_;
  DprsrOutEgrUThresh_200GMutable u_thresh_200_g_;
  DprsrOutEgrUThresh_400GMutable u_thresh_400_g_;
  DprsrTeopInhibitRMutable teop_;
  DprsrOutEgrCtlChanErrLogMutable ctl_chan_err_log_;
  DprsrOutEgrArbFifoCredMutable arb_fifo_cred_;
  std::array< PpCtrCfg48RMutable, 4 > cfg48_;
  std::array< DprsrOutEgrCfg48MaskMutable, 4 > cfg48_mask_;
  std::array< DprsrOutEgrCfg48DataMutable, 4 > cfg48_data_;
  DprsrOutEgrCfg48DataSelMutable cfg48_data_sel_;
  DprsrOutEgrCtrlTimeoutMutable ctrl_timeout_;
  DprsrOutputStatusRMutable output_status_;
  DprsrOutEgrDiagBusMutable diag_bus_;
  DprsrOutEgrChanStatusCfgMutable chan_status_cfg_;
  DprsrOutputChanStatusRMutable chan_info_;
  DprsrEpbBpThreshPipeMutable epb_bp_;
  DprsrXCredsPipeMutable cfg_ebuf_;
  DprsrOutEgrIntr_0Mutable intr_0_;
  DprsrOutEgrIntr_1Mutable intr_1_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_dprsr_ho_e
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x38000; // to get to ho_e
    assert(index_dprsr_ho_e < 4);
    offset += index_dprsr_ho_e * 0x2000; // dprsr_ho_e[]
    offset += 0x1000; // to get to out_egr
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_DPRSR_OUT_EGR_MUTABLE_H__
