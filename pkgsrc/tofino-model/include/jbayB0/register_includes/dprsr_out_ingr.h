/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_OUT_INGR_H__
#define __REGISTER_INCLUDES_DPRSR_OUT_INGR_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "dprsr_cfg_crc_chk_dis_r.h"
#include "dprsr_cfg_crc_dis_r.h"
#include "dprsr_cfg_crc_err_dis_r.h"
#include "dprsr_cfg_crc_err_inj_r.h"
#include "dprsr_cred_status_r.h"
#include "dprsr_out_ingr_arb_fifo_cred.h"
#include "dprsr_out_ingr_cfg48_data.h"
#include "dprsr_out_ingr_cfg48_data_sel.h"
#include "dprsr_out_ingr_cfg48_mask.h"
#include "dprsr_out_ingr_chan_status_cfg.h"
#include "dprsr_out_ingr_ctl_chan_err_log.h"
#include "dprsr_out_ingr_ctrl_timeout.h"
#include "dprsr_out_ingr_diag_bus.h"
#include "dprsr_out_ingr_intr_0.h"
#include "dprsr_out_ingr_intr_1.h"
#include "dprsr_out_ingr_meta0_ecc_ctrl.h"
#include "dprsr_out_ingr_meta1_ecc_ctrl.h"
#include "dprsr_out_ingr_meta2_ecc_ctrl.h"
#include "dprsr_out_ingr_meta_mbe_err_log.h"
#include "dprsr_out_ingr_meta_sbe_err_log.h"
#include "dprsr_out_ingr_mirrhdr0_ecc_ctrl.h"
#include "dprsr_out_ingr_mirrhdr1_ecc_ctrl.h"
#include "dprsr_out_ingr_mirrhdr2_ecc_ctrl.h"
#include "dprsr_out_ingr_mirrhdr_mbe_err_log.h"
#include "dprsr_out_ingr_mirrhdr_sbe_err_log.h"
#include "dprsr_out_ingr_pktdata0_ecc_ctrl.h"
#include "dprsr_out_ingr_pktdata1_ecc_ctrl.h"
#include "dprsr_out_ingr_pktdata2_ecc_ctrl.h"
#include "dprsr_out_ingr_pktdata_mbe_err_log.h"
#include "dprsr_out_ingr_pktdata_sbe_err_log.h"
#include "dprsr_out_ingr_pkthdr0_ecc_ctrl.h"
#include "dprsr_out_ingr_pkthdr1_ecc_ctrl.h"
#include "dprsr_out_ingr_pkthdr2_ecc_ctrl.h"
#include "dprsr_out_ingr_pkthdr_mbe_err_log.h"
#include "dprsr_out_ingr_pkthdr_sbe_err_log.h"
#include "dprsr_out_ingr_u_thresh_100_g.h"
#include "dprsr_out_ingr_u_thresh_10_g.h"
#include "dprsr_out_ingr_u_thresh_200_g.h"
#include "dprsr_out_ingr_u_thresh_25_g.h"
#include "dprsr_out_ingr_u_thresh_400_g.h"
#include "dprsr_out_ingr_u_thresh_40_g.h"
#include "dprsr_out_ingr_u_thresh_50_g.h"
#include "dprsr_output_chan_status_r.h"
#include "dprsr_output_status_r.h"
#include "dprsr_perf_byt_count_r.h"
#include "dprsr_perf_count_r.h"
#include "dprsr_perf_probe_r.h"
#include "dprsr_underrun_mode_r.h"
#include "dprsr_x_creds_pipe.h"
#include "pp_ctr_cfg48_r.h"

namespace jbayB0 {
  namespace register_classes {

class DprsrOutIngr : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrOutIngr(
      int chipNumber, int index_pipe_addrmap, int index_dprsr_ho_i, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_dprsr_ho_i), 4096, false, write_callback, read_callback, std::string("DprsrOutIngr")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_dprsr_ho_i))
    {
    }
  DprsrOutIngr(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DprsrOutIngr")
    {
    }
public:






  DprsrCfgCrcDisR &cfg_crc_dis() { return cfg_crc_dis_; }






  DprsrCfgCrcErrDisR &cfg_crc_err_dis() { return cfg_crc_err_dis_; }






  DprsrCfgCrcErrInjR &cfg_crc_err_inj() { return cfg_crc_err_inj_; }






  DprsrCfgCrcChkDisR &cfg_crc_chk_dis() { return cfg_crc_chk_dis_; }







  DprsrCredStatusR &crd_status() { return crd_status_; }







  DprsrPerfBytCountR &perf_byt(int j0) { return perf_byt_[j0]; }





  DprsrPerfBytCountR &perf_byt_time() { return perf_byt_time_; }







  DprsrPerfCountR &perf_pkt(int j0) { return perf_pkt_[j0]; }





  DprsrPerfCountR &perf_pkt_time() { return perf_pkt_time_; }





  DprsrPerfProbeR &perf_probe() { return perf_probe_; }





  DprsrOutIngrMetaSbeErrLog &meta_sbe_err_log() { return meta_sbe_err_log_; }





  DprsrOutIngrMetaMbeErrLog &meta_mbe_err_log() { return meta_mbe_err_log_; }





  DprsrOutIngrPkthdrSbeErrLog &pkthdr_sbe_err_log() { return pkthdr_sbe_err_log_; }





  DprsrOutIngrPkthdrMbeErrLog &pkthdr_mbe_err_log() { return pkthdr_mbe_err_log_; }





  DprsrOutIngrMirrhdrSbeErrLog &mirrhdr_sbe_err_log() { return mirrhdr_sbe_err_log_; }





  DprsrOutIngrMirrhdrMbeErrLog &mirrhdr_mbe_err_log() { return mirrhdr_mbe_err_log_; }





  DprsrOutIngrPktdataSbeErrLog &pktdata_sbe_err_log() { return pktdata_sbe_err_log_; }





  DprsrOutIngrPktdataMbeErrLog &pktdata_mbe_err_log() { return pktdata_mbe_err_log_; }





  DprsrOutIngrMeta0EccCtrl &meta0_ecc_ctrl() { return meta0_ecc_ctrl_; }





  DprsrOutIngrMeta1EccCtrl &meta1_ecc_ctrl() { return meta1_ecc_ctrl_; }





  DprsrOutIngrMeta2EccCtrl &meta2_ecc_ctrl() { return meta2_ecc_ctrl_; }





  DprsrOutIngrPkthdr0EccCtrl &pkthdr0_ecc_ctrl() { return pkthdr0_ecc_ctrl_; }





  DprsrOutIngrPkthdr1EccCtrl &pkthdr1_ecc_ctrl() { return pkthdr1_ecc_ctrl_; }





  DprsrOutIngrPkthdr2EccCtrl &pkthdr2_ecc_ctrl() { return pkthdr2_ecc_ctrl_; }





  DprsrOutIngrMirrhdr0EccCtrl &mirrhdr0_ecc_ctrl() { return mirrhdr0_ecc_ctrl_; }





  DprsrOutIngrMirrhdr1EccCtrl &mirrhdr1_ecc_ctrl() { return mirrhdr1_ecc_ctrl_; }





  DprsrOutIngrMirrhdr2EccCtrl &mirrhdr2_ecc_ctrl() { return mirrhdr2_ecc_ctrl_; }





  DprsrOutIngrPktdata0EccCtrl &pktdata0_ecc_ctrl() { return pktdata0_ecc_ctrl_; }





  DprsrOutIngrPktdata1EccCtrl &pktdata1_ecc_ctrl() { return pktdata1_ecc_ctrl_; }





  DprsrOutIngrPktdata2EccCtrl &pktdata2_ecc_ctrl() { return pktdata2_ecc_ctrl_; }








  DprsrUnderrunModeR &u_mode() { return u_mode_; }








  DprsrOutIngrUThresh_10G &u_thresh_10_g() { return u_thresh_10_g_; }








  DprsrOutIngrUThresh_25G &u_thresh_25_g() { return u_thresh_25_g_; }








  DprsrOutIngrUThresh_40G &u_thresh_40_g() { return u_thresh_40_g_; }








  DprsrOutIngrUThresh_50G &u_thresh_50_g() { return u_thresh_50_g_; }








  DprsrOutIngrUThresh_100G &u_thresh_100_g() { return u_thresh_100_g_; }








  DprsrOutIngrUThresh_200G &u_thresh_200_g() { return u_thresh_200_g_; }








  DprsrOutIngrUThresh_400G &u_thresh_400_g() { return u_thresh_400_g_; }





  DprsrOutIngrCtlChanErrLog &ctl_chan_err_log() { return ctl_chan_err_log_; }










  DprsrOutIngrArbFifoCred &arb_fifo_cred() { return arb_fifo_cred_; }








  PpCtrCfg48R &cfg48(int j0) { return cfg48_[j0]; }








































  DprsrOutIngrCfg48Mask &cfg48_mask(int j0) { return cfg48_mask_[j0]; }








  DprsrOutIngrCfg48Data &cfg48_data(int j0) { return cfg48_data_[j0]; }







  DprsrOutIngrCfg48DataSel &cfg48_data_sel() { return cfg48_data_sel_; }








  DprsrOutIngrCtrlTimeout &ctrl_timeout() { return ctrl_timeout_; }






  DprsrOutputStatusR &output_status() { return output_status_; }






  DprsrOutIngrDiagBus &diag_bus() { return diag_bus_; }







  DprsrOutIngrChanStatusCfg &chan_status_cfg() { return chan_status_cfg_; }





  DprsrOutputChanStatusR &chan_info() { return chan_info_; }







  DprsrXCredsPipe &cfg_s2p() { return cfg_s2p_; }
  DprsrOutIngrIntr_0 &intr_0() { return intr_0_; }
  DprsrOutIngrIntr_1 &intr_1() { return intr_1_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0xc8 && offset < 0xcc) {
      offset -= 0xc8;
      if (read_callback_) read_callback_();
      cfg_crc_dis_.read( offset, data );
    }
    else if (offset >= 0xcc && offset < 0xd0) {
      offset -= 0xcc;
      if (read_callback_) read_callback_();
      cfg_crc_err_dis_.read( offset, data );
    }
    else if (offset >= 0xd0 && offset < 0xd4) {
      offset -= 0xd0;
      if (read_callback_) read_callback_();
      cfg_crc_err_inj_.read( offset, data );
    }
    else if (offset >= 0xd4 && offset < 0xd8) {
      offset -= 0xd4;
      if (read_callback_) read_callback_();
      cfg_crc_chk_dis_.read( offset, data );
    }
    else if (offset >= 0xd8 && offset < 0xdc) {
      offset -= 0xd8;
      if (read_callback_) read_callback_();
      crd_status_.read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x190) {
      offset -= 0x100;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      perf_byt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x190 && offset < 0x198) {
      offset -= 0x190;
      if (read_callback_) read_callback_();
      perf_byt_time_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x290) {
      offset -= 0x200;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      perf_pkt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x290 && offset < 0x298) {
      offset -= 0x290;
      if (read_callback_) read_callback_();
      perf_pkt_time_.read( offset, data );
    }
    else if (offset >= 0x298 && offset < 0x29c) {
      offset -= 0x298;
      if (read_callback_) read_callback_();
      perf_probe_.read( offset, data );
    }
    else if (offset >= 0x2d4 && offset < 0x2d8) {
      offset -= 0x2d4;
      if (read_callback_) read_callback_();
      meta_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2d8 && offset < 0x2dc) {
      offset -= 0x2d8;
      if (read_callback_) read_callback_();
      meta_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2dc && offset < 0x2e0) {
      offset -= 0x2dc;
      if (read_callback_) read_callback_();
      pkthdr_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2e0 && offset < 0x2e4) {
      offset -= 0x2e0;
      if (read_callback_) read_callback_();
      pkthdr_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2e4 && offset < 0x2e8) {
      offset -= 0x2e4;
      if (read_callback_) read_callback_();
      mirrhdr_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2e8 && offset < 0x2ec) {
      offset -= 0x2e8;
      if (read_callback_) read_callback_();
      mirrhdr_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2ec && offset < 0x2f0) {
      offset -= 0x2ec;
      if (read_callback_) read_callback_();
      pktdata_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2f0 && offset < 0x2f4) {
      offset -= 0x2f0;
      if (read_callback_) read_callback_();
      pktdata_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x2f4 && offset < 0x2f8) {
      offset -= 0x2f4;
      if (read_callback_) read_callback_();
      meta0_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2f8 && offset < 0x2fc) {
      offset -= 0x2f8;
      if (read_callback_) read_callback_();
      meta1_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x2fc && offset < 0x300) {
      offset -= 0x2fc;
      if (read_callback_) read_callback_();
      meta2_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x300 && offset < 0x304) {
      offset -= 0x300;
      if (read_callback_) read_callback_();
      pkthdr0_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x304 && offset < 0x308) {
      offset -= 0x304;
      if (read_callback_) read_callback_();
      pkthdr1_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x308 && offset < 0x30c) {
      offset -= 0x308;
      if (read_callback_) read_callback_();
      pkthdr2_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x30c && offset < 0x310) {
      offset -= 0x30c;
      if (read_callback_) read_callback_();
      mirrhdr0_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x310 && offset < 0x314) {
      offset -= 0x310;
      if (read_callback_) read_callback_();
      mirrhdr1_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x314 && offset < 0x318) {
      offset -= 0x314;
      if (read_callback_) read_callback_();
      mirrhdr2_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x318 && offset < 0x320) {
      offset -= 0x318;
      if (read_callback_) read_callback_();
      pktdata0_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x320 && offset < 0x328) {
      offset -= 0x320;
      if (read_callback_) read_callback_();
      pktdata1_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x328 && offset < 0x330) {
      offset -= 0x328;
      if (read_callback_) read_callback_();
      pktdata2_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x330 && offset < 0x334) {
      offset -= 0x330;
      if (read_callback_) read_callback_();
      u_mode_.read( offset, data );
    }
    else if (offset >= 0x334 && offset < 0x338) {
      offset -= 0x334;
      if (read_callback_) read_callback_();
      u_thresh_10_g_.read( offset, data );
    }
    else if (offset >= 0x338 && offset < 0x33c) {
      offset -= 0x338;
      if (read_callback_) read_callback_();
      u_thresh_25_g_.read( offset, data );
    }
    else if (offset >= 0x33c && offset < 0x340) {
      offset -= 0x33c;
      if (read_callback_) read_callback_();
      u_thresh_40_g_.read( offset, data );
    }
    else if (offset >= 0x340 && offset < 0x344) {
      offset -= 0x340;
      if (read_callback_) read_callback_();
      u_thresh_50_g_.read( offset, data );
    }
    else if (offset >= 0x344 && offset < 0x348) {
      offset -= 0x344;
      if (read_callback_) read_callback_();
      u_thresh_100_g_.read( offset, data );
    }
    else if (offset >= 0x348 && offset < 0x34c) {
      offset -= 0x348;
      if (read_callback_) read_callback_();
      u_thresh_200_g_.read( offset, data );
    }
    else if (offset >= 0x34c && offset < 0x350) {
      offset -= 0x34c;
      if (read_callback_) read_callback_();
      u_thresh_400_g_.read( offset, data );
    }
    else if (offset >= 0x350 && offset < 0x354) {
      offset -= 0x350;
      if (read_callback_) read_callback_();
      ctl_chan_err_log_.read( offset, data );
    }
    else if (offset >= 0x354 && offset < 0x358) {
      offset -= 0x354;
      if (read_callback_) read_callback_();
      arb_fifo_cred_.read( offset, data );
    }
    else if (offset >= 0x360 && offset < 0x380) {
      offset -= 0x360;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      cfg48_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x380 && offset < 0x390) {
      offset -= 0x380;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      cfg48_mask_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x390 && offset < 0x3a0) {
      offset -= 0x390;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      cfg48_data_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3a0 && offset < 0x3a4) {
      offset -= 0x3a0;
      if (read_callback_) read_callback_();
      cfg48_data_sel_.read( offset, data );
    }
    else if (offset >= 0x3a4 && offset < 0x3a8) {
      offset -= 0x3a4;
      if (read_callback_) read_callback_();
      ctrl_timeout_.read( offset, data );
    }
    else if (offset >= 0x3a8 && offset < 0x3ac) {
      offset -= 0x3a8;
      if (read_callback_) read_callback_();
      output_status_.read( offset, data );
    }
    else if (offset >= 0x3ac && offset < 0x3b0) {
      offset -= 0x3ac;
      if (read_callback_) read_callback_();
      diag_bus_.read( offset, data );
    }
    else if (offset >= 0x3b0 && offset < 0x3b4) {
      offset -= 0x3b0;
      if (read_callback_) read_callback_();
      chan_status_cfg_.read( offset, data );
    }
    else if (offset >= 0x3b4 && offset < 0x3b8) {
      offset -= 0x3b4;
      if (read_callback_) read_callback_();
      chan_info_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      cfg_s2p_.read( offset, data );
    }
    else if (offset >= 0x2a0 && offset < 0x2b4) {
      offset -= 0x2a0;
      if (read_callback_) read_callback_();
      intr_0_.read( offset, data );
    }
    else if (offset >= 0x2c0 && offset < 0x2d4) {
      offset -= 0x2c0;
      if (read_callback_) read_callback_();
      intr_1_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0xc8 && offset < 0xcc) {
      offset -= 0xc8;
      cfg_crc_dis_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xcc && offset < 0xd0) {
      offset -= 0xcc;
      cfg_crc_err_dis_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd0 && offset < 0xd4) {
      offset -= 0xd0;
      cfg_crc_err_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd4 && offset < 0xd8) {
      offset -= 0xd4;
      cfg_crc_chk_dis_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd8 && offset < 0xdc) {
      offset -= 0xd8;
      crd_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x190) {
      offset -= 0x100;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      perf_byt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x190 && offset < 0x198) {
      offset -= 0x190;
      perf_byt_time_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x290) {
      offset -= 0x200;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      perf_pkt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x290 && offset < 0x298) {
      offset -= 0x290;
      perf_pkt_time_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x298 && offset < 0x29c) {
      offset -= 0x298;
      perf_probe_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2d4 && offset < 0x2d8) {
      offset -= 0x2d4;
      meta_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2d8 && offset < 0x2dc) {
      offset -= 0x2d8;
      meta_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2dc && offset < 0x2e0) {
      offset -= 0x2dc;
      pkthdr_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2e0 && offset < 0x2e4) {
      offset -= 0x2e0;
      pkthdr_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2e4 && offset < 0x2e8) {
      offset -= 0x2e4;
      mirrhdr_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2e8 && offset < 0x2ec) {
      offset -= 0x2e8;
      mirrhdr_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2ec && offset < 0x2f0) {
      offset -= 0x2ec;
      pktdata_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2f0 && offset < 0x2f4) {
      offset -= 0x2f0;
      pktdata_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2f4 && offset < 0x2f8) {
      offset -= 0x2f4;
      meta0_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2f8 && offset < 0x2fc) {
      offset -= 0x2f8;
      meta1_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2fc && offset < 0x300) {
      offset -= 0x2fc;
      meta2_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x300 && offset < 0x304) {
      offset -= 0x300;
      pkthdr0_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x304 && offset < 0x308) {
      offset -= 0x304;
      pkthdr1_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x308 && offset < 0x30c) {
      offset -= 0x308;
      pkthdr2_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30c && offset < 0x310) {
      offset -= 0x30c;
      mirrhdr0_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x310 && offset < 0x314) {
      offset -= 0x310;
      mirrhdr1_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x314 && offset < 0x318) {
      offset -= 0x314;
      mirrhdr2_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x318 && offset < 0x320) {
      offset -= 0x318;
      pktdata0_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x320 && offset < 0x328) {
      offset -= 0x320;
      pktdata1_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x328 && offset < 0x330) {
      offset -= 0x328;
      pktdata2_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x330 && offset < 0x334) {
      offset -= 0x330;
      u_mode_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x334 && offset < 0x338) {
      offset -= 0x334;
      u_thresh_10_g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x338 && offset < 0x33c) {
      offset -= 0x338;
      u_thresh_25_g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x33c && offset < 0x340) {
      offset -= 0x33c;
      u_thresh_40_g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x340 && offset < 0x344) {
      offset -= 0x340;
      u_thresh_50_g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x344 && offset < 0x348) {
      offset -= 0x344;
      u_thresh_100_g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x348 && offset < 0x34c) {
      offset -= 0x348;
      u_thresh_200_g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34c && offset < 0x350) {
      offset -= 0x34c;
      u_thresh_400_g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x350 && offset < 0x354) {
      offset -= 0x350;
      ctl_chan_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x354 && offset < 0x358) {
      offset -= 0x354;
      arb_fifo_cred_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x360 && offset < 0x380) {
      offset -= 0x360;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      cfg48_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x380 && offset < 0x390) {
      offset -= 0x380;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      cfg48_mask_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x390 && offset < 0x3a0) {
      offset -= 0x390;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      cfg48_data_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3a0 && offset < 0x3a4) {
      offset -= 0x3a0;
      cfg48_data_sel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3a4 && offset < 0x3a8) {
      offset -= 0x3a4;
      ctrl_timeout_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3a8 && offset < 0x3ac) {
      offset -= 0x3a8;
      output_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3ac && offset < 0x3b0) {
      offset -= 0x3ac;
      diag_bus_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3b0 && offset < 0x3b4) {
      offset -= 0x3b0;
      chan_status_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3b4 && offset < 0x3b8) {
      offset -= 0x3b4;
      chan_info_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      cfg_s2p_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2a0 && offset < 0x2b4) {
      offset -= 0x2a0;
      intr_0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c0 && offset < 0x2d4) {
      offset -= 0x2c0;
      intr_1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    cfg_crc_dis_.reset();
    cfg_crc_err_dis_.reset();
    cfg_crc_err_inj_.reset();
    cfg_crc_chk_dis_.reset();
    crd_status_.reset();
    for (auto &f0 : perf_byt_) {
      f0.reset();
    }
    perf_byt_time_.reset();
    for (auto &f0 : perf_pkt_) {
      f0.reset();
    }
    perf_pkt_time_.reset();
    perf_probe_.reset();
    meta_sbe_err_log_.reset();
    meta_mbe_err_log_.reset();
    pkthdr_sbe_err_log_.reset();
    pkthdr_mbe_err_log_.reset();
    mirrhdr_sbe_err_log_.reset();
    mirrhdr_mbe_err_log_.reset();
    pktdata_sbe_err_log_.reset();
    pktdata_mbe_err_log_.reset();
    meta0_ecc_ctrl_.reset();
    meta1_ecc_ctrl_.reset();
    meta2_ecc_ctrl_.reset();
    pkthdr0_ecc_ctrl_.reset();
    pkthdr1_ecc_ctrl_.reset();
    pkthdr2_ecc_ctrl_.reset();
    mirrhdr0_ecc_ctrl_.reset();
    mirrhdr1_ecc_ctrl_.reset();
    mirrhdr2_ecc_ctrl_.reset();
    pktdata0_ecc_ctrl_.reset();
    pktdata1_ecc_ctrl_.reset();
    pktdata2_ecc_ctrl_.reset();
    u_mode_.reset();
    u_thresh_10_g_.reset();
    u_thresh_25_g_.reset();
    u_thresh_40_g_.reset();
    u_thresh_50_g_.reset();
    u_thresh_100_g_.reset();
    u_thresh_200_g_.reset();
    u_thresh_400_g_.reset();
    ctl_chan_err_log_.reset();
    arb_fifo_cred_.reset();
    for (auto &f0 : cfg48_) {
      f0.reset();
    }
    for (auto &f0 : cfg48_mask_) {
      f0.reset();
    }
    for (auto &f0 : cfg48_data_) {
      f0.reset();
    }
    cfg48_data_sel_.reset();
    ctrl_timeout_.reset();
    output_status_.reset();
    diag_bus_.reset();
    chan_status_cfg_.reset();
    chan_info_.reset();
    cfg_s2p_.reset();
    intr_0_.reset();
    intr_1_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0xc8 && offset < 0xcc) {
      offset -= 0xc8;
      r += cfg_crc_dis_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xcc && offset < 0xd0) {
      offset -= 0xcc;
      r += cfg_crc_err_dis_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd0 && offset < 0xd4) {
      offset -= 0xd0;
      r += cfg_crc_err_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd4 && offset < 0xd8) {
      offset -= 0xd4;
      r += cfg_crc_chk_dis_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd8 && offset < 0xdc) {
      offset -= 0xd8;
      r += crd_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x190) {
      offset -= 0x100;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += perf_byt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x190 && offset < 0x198) {
      offset -= 0x190;
      r += perf_byt_time_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x290) {
      offset -= 0x200;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += perf_pkt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x290 && offset < 0x298) {
      offset -= 0x290;
      r += perf_pkt_time_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x298 && offset < 0x29c) {
      offset -= 0x298;
      r += perf_probe_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2d4 && offset < 0x2d8) {
      offset -= 0x2d4;
      r += meta_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2d8 && offset < 0x2dc) {
      offset -= 0x2d8;
      r += meta_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2dc && offset < 0x2e0) {
      offset -= 0x2dc;
      r += pkthdr_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2e0 && offset < 0x2e4) {
      offset -= 0x2e0;
      r += pkthdr_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2e4 && offset < 0x2e8) {
      offset -= 0x2e4;
      r += mirrhdr_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2e8 && offset < 0x2ec) {
      offset -= 0x2e8;
      r += mirrhdr_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2ec && offset < 0x2f0) {
      offset -= 0x2ec;
      r += pktdata_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2f0 && offset < 0x2f4) {
      offset -= 0x2f0;
      r += pktdata_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2f4 && offset < 0x2f8) {
      offset -= 0x2f4;
      r += meta0_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2f8 && offset < 0x2fc) {
      offset -= 0x2f8;
      r += meta1_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2fc && offset < 0x300) {
      offset -= 0x2fc;
      r += meta2_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x300 && offset < 0x304) {
      offset -= 0x300;
      r += pkthdr0_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x304 && offset < 0x308) {
      offset -= 0x304;
      r += pkthdr1_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x308 && offset < 0x30c) {
      offset -= 0x308;
      r += pkthdr2_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30c && offset < 0x310) {
      offset -= 0x30c;
      r += mirrhdr0_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x310 && offset < 0x314) {
      offset -= 0x310;
      r += mirrhdr1_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x314 && offset < 0x318) {
      offset -= 0x314;
      r += mirrhdr2_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x318 && offset < 0x320) {
      offset -= 0x318;
      r += pktdata0_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x320 && offset < 0x328) {
      offset -= 0x320;
      r += pktdata1_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x328 && offset < 0x330) {
      offset -= 0x328;
      r += pktdata2_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x330 && offset < 0x334) {
      offset -= 0x330;
      r += u_mode_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x334 && offset < 0x338) {
      offset -= 0x334;
      r += u_thresh_10_g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x338 && offset < 0x33c) {
      offset -= 0x338;
      r += u_thresh_25_g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x33c && offset < 0x340) {
      offset -= 0x33c;
      r += u_thresh_40_g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x340 && offset < 0x344) {
      offset -= 0x340;
      r += u_thresh_50_g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x344 && offset < 0x348) {
      offset -= 0x344;
      r += u_thresh_100_g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x348 && offset < 0x34c) {
      offset -= 0x348;
      r += u_thresh_200_g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34c && offset < 0x350) {
      offset -= 0x34c;
      r += u_thresh_400_g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x350 && offset < 0x354) {
      offset -= 0x350;
      r += ctl_chan_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x354 && offset < 0x358) {
      offset -= 0x354;
      r += arb_fifo_cred_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x360 && offset < 0x380) {
      offset -= 0x360;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += cfg48_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x380 && offset < 0x390) {
      offset -= 0x380;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += cfg48_mask_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x390 && offset < 0x3a0) {
      offset -= 0x390;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += cfg48_data_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3a0 && offset < 0x3a4) {
      offset -= 0x3a0;
      r += cfg48_data_sel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3a4 && offset < 0x3a8) {
      offset -= 0x3a4;
      r += ctrl_timeout_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3a8 && offset < 0x3ac) {
      offset -= 0x3a8;
      r += output_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3ac && offset < 0x3b0) {
      offset -= 0x3ac;
      r += diag_bus_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3b0 && offset < 0x3b4) {
      offset -= 0x3b0;
      r += chan_status_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3b4 && offset < 0x3b8) {
      offset -= 0x3b4;
      r += chan_info_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      r += cfg_s2p_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2a0 && offset < 0x2b4) {
      offset -= 0x2a0;
      r += intr_0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c0 && offset < 0x2d4) {
      offset -= 0x2c0;
      r += intr_1_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += cfg_crc_dis_.to_string(print_zeros,indent_string) ;
    r += cfg_crc_err_dis_.to_string(print_zeros,indent_string) ;
    r += cfg_crc_err_inj_.to_string(print_zeros,indent_string) ;
    r += cfg_crc_chk_dis_.to_string(print_zeros,indent_string) ;
    r += crd_status_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<18;++a0) {
      r += perf_byt_[a0].to_string(print_zeros,indent_string) ;
    }
    r += perf_byt_time_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<18;++a0) {
      r += perf_pkt_[a0].to_string(print_zeros,indent_string) ;
    }
    r += perf_pkt_time_.to_string(print_zeros,indent_string) ;
    r += perf_probe_.to_string(print_zeros,indent_string) ;
    r += meta_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += meta_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += pkthdr_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += pkthdr_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += mirrhdr_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += mirrhdr_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += pktdata_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += pktdata_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += meta0_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += meta1_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += meta2_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += pkthdr0_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += pkthdr1_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += pkthdr2_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += mirrhdr0_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += mirrhdr1_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += mirrhdr2_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += pktdata0_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += pktdata1_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += pktdata2_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += u_mode_.to_string(print_zeros,indent_string) ;
    r += u_thresh_10_g_.to_string(print_zeros,indent_string) ;
    r += u_thresh_25_g_.to_string(print_zeros,indent_string) ;
    r += u_thresh_40_g_.to_string(print_zeros,indent_string) ;
    r += u_thresh_50_g_.to_string(print_zeros,indent_string) ;
    r += u_thresh_100_g_.to_string(print_zeros,indent_string) ;
    r += u_thresh_200_g_.to_string(print_zeros,indent_string) ;
    r += u_thresh_400_g_.to_string(print_zeros,indent_string) ;
    r += ctl_chan_err_log_.to_string(print_zeros,indent_string) ;
    r += arb_fifo_cred_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += cfg48_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += cfg48_mask_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += cfg48_data_[a0].to_string(print_zeros,indent_string) ;
    }
    r += cfg48_data_sel_.to_string(print_zeros,indent_string) ;
    r += ctrl_timeout_.to_string(print_zeros,indent_string) ;
    r += output_status_.to_string(print_zeros,indent_string) ;
    r += diag_bus_.to_string(print_zeros,indent_string) ;
    r += chan_status_cfg_.to_string(print_zeros,indent_string) ;
    r += chan_info_.to_string(print_zeros,indent_string) ;
    r += cfg_s2p_.to_string(print_zeros,indent_string) ;
    r += intr_0_.to_string(print_zeros,indent_string) ;
    r += intr_1_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrCfgCrcDisR cfg_crc_dis_;
  DprsrCfgCrcErrDisR cfg_crc_err_dis_;
  DprsrCfgCrcErrInjR cfg_crc_err_inj_;
  DprsrCfgCrcChkDisR cfg_crc_chk_dis_;
  DprsrCredStatusR crd_status_;
  std::array< DprsrPerfBytCountR, 18 > perf_byt_;
  DprsrPerfBytCountR perf_byt_time_;
  std::array< DprsrPerfCountR, 18 > perf_pkt_;
  DprsrPerfCountR perf_pkt_time_;
  DprsrPerfProbeR perf_probe_;
  DprsrOutIngrMetaSbeErrLog meta_sbe_err_log_;
  DprsrOutIngrMetaMbeErrLog meta_mbe_err_log_;
  DprsrOutIngrPkthdrSbeErrLog pkthdr_sbe_err_log_;
  DprsrOutIngrPkthdrMbeErrLog pkthdr_mbe_err_log_;
  DprsrOutIngrMirrhdrSbeErrLog mirrhdr_sbe_err_log_;
  DprsrOutIngrMirrhdrMbeErrLog mirrhdr_mbe_err_log_;
  DprsrOutIngrPktdataSbeErrLog pktdata_sbe_err_log_;
  DprsrOutIngrPktdataMbeErrLog pktdata_mbe_err_log_;
  DprsrOutIngrMeta0EccCtrl meta0_ecc_ctrl_;
  DprsrOutIngrMeta1EccCtrl meta1_ecc_ctrl_;
  DprsrOutIngrMeta2EccCtrl meta2_ecc_ctrl_;
  DprsrOutIngrPkthdr0EccCtrl pkthdr0_ecc_ctrl_;
  DprsrOutIngrPkthdr1EccCtrl pkthdr1_ecc_ctrl_;
  DprsrOutIngrPkthdr2EccCtrl pkthdr2_ecc_ctrl_;
  DprsrOutIngrMirrhdr0EccCtrl mirrhdr0_ecc_ctrl_;
  DprsrOutIngrMirrhdr1EccCtrl mirrhdr1_ecc_ctrl_;
  DprsrOutIngrMirrhdr2EccCtrl mirrhdr2_ecc_ctrl_;
  DprsrOutIngrPktdata0EccCtrl pktdata0_ecc_ctrl_;
  DprsrOutIngrPktdata1EccCtrl pktdata1_ecc_ctrl_;
  DprsrOutIngrPktdata2EccCtrl pktdata2_ecc_ctrl_;
  DprsrUnderrunModeR u_mode_;
  DprsrOutIngrUThresh_10G u_thresh_10_g_;
  DprsrOutIngrUThresh_25G u_thresh_25_g_;
  DprsrOutIngrUThresh_40G u_thresh_40_g_;
  DprsrOutIngrUThresh_50G u_thresh_50_g_;
  DprsrOutIngrUThresh_100G u_thresh_100_g_;
  DprsrOutIngrUThresh_200G u_thresh_200_g_;
  DprsrOutIngrUThresh_400G u_thresh_400_g_;
  DprsrOutIngrCtlChanErrLog ctl_chan_err_log_;
  DprsrOutIngrArbFifoCred arb_fifo_cred_;
  std::array< PpCtrCfg48R, 4 > cfg48_;
  std::array< DprsrOutIngrCfg48Mask, 4 > cfg48_mask_;
  std::array< DprsrOutIngrCfg48Data, 4 > cfg48_data_;
  DprsrOutIngrCfg48DataSel cfg48_data_sel_;
  DprsrOutIngrCtrlTimeout ctrl_timeout_;
  DprsrOutputStatusR output_status_;
  DprsrOutIngrDiagBus diag_bus_;
  DprsrOutIngrChanStatusCfg chan_status_cfg_;
  DprsrOutputChanStatusR chan_info_;
  DprsrXCredsPipe cfg_s2p_;
  DprsrOutIngrIntr_0 intr_0_;
  DprsrOutIngrIntr_1 intr_1_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_dprsr_ho_i
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x30000; // to get to ho_i
    assert(index_dprsr_ho_i < 4);
    offset += index_dprsr_ho_i * 0x2000; // dprsr_ho_i[]
    offset += 0x1000; // to get to out_ingr
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_DPRSR_OUT_INGR_H__
