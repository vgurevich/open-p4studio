/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_OUT_INGR_INTR_1_EN0_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_OUT_INGR_INTR_1_EN0_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class DprsrOutIngrIntr_1En0Mutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrOutIngrIntr_1En0Mutable(
      int chipNumber, int index_pipe_addrmap, int index_dprsr_ho_i, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_dprsr_ho_i), 4, true, write_callback, read_callback, std::string("DprsrOutIngrIntr_1En0Mutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_dprsr_ho_i))
    {
    }
  DprsrOutIngrIntr_1En0Mutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrOutIngrIntr_1En0Mutable")
    {
    }
public:
  uint8_t meta_sbe() { return meta_sbe_; }
  void meta_sbe(const uint8_t &v) { meta_sbe_=v; }
  uint8_t meta_mbe() { return meta_mbe_; }
  void meta_mbe(const uint8_t &v) { meta_mbe_=v; }
  uint8_t pkthdr_sbe() { return pkthdr_sbe_; }
  void pkthdr_sbe(const uint8_t &v) { pkthdr_sbe_=v; }
  uint8_t pkthdr_mbe() { return pkthdr_mbe_; }
  void pkthdr_mbe(const uint8_t &v) { pkthdr_mbe_=v; }
  uint8_t mirrhdr_sbe() { return mirrhdr_sbe_; }
  void mirrhdr_sbe(const uint8_t &v) { mirrhdr_sbe_=v; }
  uint8_t mirrhdr_mbe() { return mirrhdr_mbe_; }
  void mirrhdr_mbe(const uint8_t &v) { mirrhdr_mbe_=v; }
  uint8_t pktdata_sbe() { return pktdata_sbe_; }
  void pktdata_sbe(const uint8_t &v) { pktdata_sbe_=v; }
  uint8_t pktdata_mbe() { return pktdata_mbe_; }
  void pktdata_mbe(const uint8_t &v) { pktdata_mbe_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (meta_sbe_ & 0x1);
    *data |= ((meta_mbe_ & 0x1) << 1);
    *data |= ((pkthdr_sbe_ & 0x1) << 2);
    *data |= ((pkthdr_mbe_ & 0x1) << 3);
    *data |= ((mirrhdr_sbe_ & 0x1) << 4);
    *data |= ((mirrhdr_mbe_ & 0x1) << 5);
    *data |= ((pktdata_sbe_ & 0x1) << 6);
    *data |= ((pktdata_mbe_ & 0x1) << 7);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    meta_sbe_ = (data & 0x1);
    meta_mbe_ = ((data >> 1) & 0x1);
    pkthdr_sbe_ = ((data >> 2) & 0x1);
    pkthdr_mbe_ = ((data >> 3) & 0x1);
    mirrhdr_sbe_ = ((data >> 4) & 0x1);
    mirrhdr_mbe_ = ((data >> 5) & 0x1);
    pktdata_sbe_ = ((data >> 6) & 0x1);
    pktdata_mbe_ = ((data >> 7) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    meta_sbe_ = 0x0;
    meta_mbe_ = 0x0;
    pkthdr_sbe_ = 0x0;
    pkthdr_mbe_ = 0x0;
    mirrhdr_sbe_ = 0x0;
    mirrhdr_mbe_ = 0x0;
    pktdata_sbe_ = 0x0;
    pktdata_mbe_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrOutIngrIntr_1En0Mutable") + ":\n";
    r += indent_string + "  " + std::string("meta_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_sbe_) ) + "\n";
    all_zeros &= (0 == meta_sbe_);
    r += indent_string + "  " + std::string("meta_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_mbe_) ) + "\n";
    all_zeros &= (0 == meta_mbe_);
    r += indent_string + "  " + std::string("pkthdr_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkthdr_sbe_) ) + "\n";
    all_zeros &= (0 == pkthdr_sbe_);
    r += indent_string + "  " + std::string("pkthdr_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkthdr_mbe_) ) + "\n";
    all_zeros &= (0 == pkthdr_mbe_);
    r += indent_string + "  " + std::string("mirrhdr_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirrhdr_sbe_) ) + "\n";
    all_zeros &= (0 == mirrhdr_sbe_);
    r += indent_string + "  " + std::string("mirrhdr_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirrhdr_mbe_) ) + "\n";
    all_zeros &= (0 == mirrhdr_mbe_);
    r += indent_string + "  " + std::string("pktdata_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdata_sbe_) ) + "\n";
    all_zeros &= (0 == pktdata_sbe_);
    r += indent_string + "  " + std::string("pktdata_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdata_mbe_) ) + "\n";
    all_zeros &= (0 == pktdata_mbe_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrOutIngrIntr_1En0Mutable") + ":\n";
    r += indent_string + "  " + std::string("meta_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_sbe_) ) + "\n";
    all_zeros &= (0 == meta_sbe_);
    r += indent_string + "  " + std::string("meta_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_mbe_) ) + "\n";
    all_zeros &= (0 == meta_mbe_);
    r += indent_string + "  " + std::string("pkthdr_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkthdr_sbe_) ) + "\n";
    all_zeros &= (0 == pkthdr_sbe_);
    r += indent_string + "  " + std::string("pkthdr_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkthdr_mbe_) ) + "\n";
    all_zeros &= (0 == pkthdr_mbe_);
    r += indent_string + "  " + std::string("mirrhdr_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirrhdr_sbe_) ) + "\n";
    all_zeros &= (0 == mirrhdr_sbe_);
    r += indent_string + "  " + std::string("mirrhdr_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirrhdr_mbe_) ) + "\n";
    all_zeros &= (0 == mirrhdr_mbe_);
    r += indent_string + "  " + std::string("pktdata_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdata_sbe_) ) + "\n";
    all_zeros &= (0 == pktdata_sbe_);
    r += indent_string + "  " + std::string("pktdata_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdata_mbe_) ) + "\n";
    all_zeros &= (0 == pktdata_mbe_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t meta_sbe_;
  uint8_t meta_mbe_;
  uint8_t pkthdr_sbe_;
  uint8_t pkthdr_mbe_;
  uint8_t mirrhdr_sbe_;
  uint8_t mirrhdr_mbe_;
  uint8_t pktdata_sbe_;
  uint8_t pktdata_mbe_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_dprsr_ho_i
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x100000; // to get to dprsrreg
    offset += 0x30000; // to get to ho_i
    assert(index_dprsr_ho_i < 4);
    offset += index_dprsr_ho_i * 0x2000; // dprsr_ho_i[]
    offset += 0x1000; // to get to out_ingr
    offset += 0x2c4; // to get to intr_1_en0
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_DPRSR_OUT_INGR_INTR_1_EN0_MUTABLE_H__
