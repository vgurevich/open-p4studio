/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_EBUF100_CHAN_GROUP_H__
#define __REGISTER_INCLUDES_EBUF100_CHAN_GROUP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "ebuf100_chnl_ctrl.h"
#include "ebuf100_chnl_fifo_ctrl.h"
#include "ebuf100_chnl_fifo_stat.h"
#include "ebuf100_chnl_pktnum.h"
#include "ebuf100_chnl_stat.h"

namespace jbayB0 {
  namespace register_classes {

class Ebuf100ChanGroup : public model_core::RegisterBlock<RegisterCallback> {
public:
  Ebuf100ChanGroup(
      int chipNumber, int index_pipe_addrmap, int index_ebuf900_reg, int index_ebuf100_chan_group, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ebuf900_reg, index_ebuf100_chan_group), 120, false, write_callback, read_callback, std::string("Ebuf100ChanGroup")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ebuf900_reg) + "," + boost::lexical_cast<std::string>(index_ebuf100_chan_group))
    {
    }
  Ebuf100ChanGroup(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "Ebuf100ChanGroup")
    {
    }
public:





  Ebuf100ChnlCtrl &chan_group_chnl_ctrl() { return chan_group_chnl_ctrl_; }






  Ebuf100ChnlStat &chan_group_chnl_stat() { return chan_group_chnl_stat_; }







  Ebuf100ChnlFifoCtrl &chan_group_chnl_fifo_ctrl() { return chan_group_chnl_fifo_ctrl_; }






  Ebuf100ChnlFifoStat &chan_group_chnl_fifo_stat() { return chan_group_chnl_fifo_stat_; }





  Ebuf100ChnlPktnum &chan_group_chnl_pktnum() { return chan_group_chnl_pktnum_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      chan_group_chnl_ctrl_.read( offset, data );
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      if (read_callback_) read_callback_();
      chan_group_chnl_stat_.read( offset, data );
    }
    else if (offset >= 0x108 && offset < 0x110) {
      offset -= 0x108;
      if (read_callback_) read_callback_();
      chan_group_chnl_fifo_ctrl_.read( offset, data );
    }
    else if (offset >= 0x110 && offset < 0x118) {
      offset -= 0x110;
      if (read_callback_) read_callback_();
      chan_group_chnl_fifo_stat_.read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x178) {
      offset -= 0x140;
      if (read_callback_) read_callback_();
      chan_group_chnl_pktnum_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      chan_group_chnl_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      chan_group_chnl_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x108 && offset < 0x110) {
      offset -= 0x108;
      chan_group_chnl_fifo_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x110 && offset < 0x118) {
      offset -= 0x110;
      chan_group_chnl_fifo_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x178) {
      offset -= 0x140;
      chan_group_chnl_pktnum_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    chan_group_chnl_ctrl_.reset();
    chan_group_chnl_stat_.reset();
    chan_group_chnl_fifo_ctrl_.reset();
    chan_group_chnl_fifo_stat_.reset();
    chan_group_chnl_pktnum_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      r += chan_group_chnl_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      r += chan_group_chnl_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x108 && offset < 0x110) {
      offset -= 0x108;
      r += chan_group_chnl_fifo_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x110 && offset < 0x118) {
      offset -= 0x110;
      r += chan_group_chnl_fifo_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x178) {
      offset -= 0x140;
      r += chan_group_chnl_pktnum_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += chan_group_chnl_ctrl_.to_string(print_zeros,indent_string) ;
    r += chan_group_chnl_stat_.to_string(print_zeros,indent_string) ;
    r += chan_group_chnl_fifo_ctrl_.to_string(print_zeros,indent_string) ;
    r += chan_group_chnl_fifo_stat_.to_string(print_zeros,indent_string) ;
    r += chan_group_chnl_pktnum_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  Ebuf100ChnlCtrl chan_group_chnl_ctrl_;
  Ebuf100ChnlStat chan_group_chnl_stat_;
  Ebuf100ChnlFifoCtrl chan_group_chnl_fifo_ctrl_;
  Ebuf100ChnlFifoStat chan_group_chnl_fifo_stat_;
  Ebuf100ChnlPktnum chan_group_chnl_pktnum_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ebuf900_reg, int index_ebuf100_chan_group
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x40000; // to get to ebuf900reg
    assert(index_ebuf900_reg < 4);
    offset += index_ebuf900_reg * 0x2000; // ebuf900_reg[]
    offset += 0x1000; // to get to ebuf100reg
    offset += 0x100; // to get to chan_group
    assert(index_ebuf100_chan_group < 2);
    offset += index_ebuf100_chan_group * 0x78; // ebuf100_chan_group[]
    return offset;
  }

};





  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_EBUF100_CHAN_GROUP_H__
