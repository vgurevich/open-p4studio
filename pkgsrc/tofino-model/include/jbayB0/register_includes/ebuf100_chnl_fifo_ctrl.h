/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_EBUF100_CHNL_FIFO_CTRL_H__
#define __REGISTER_INCLUDES_EBUF100_CHNL_FIFO_CTRL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class Ebuf100ChnlFifoCtrl : public model_core::RegisterBlock<RegisterCallback> {
public:
  Ebuf100ChnlFifoCtrl(
      int chipNumber, int index_pipe_addrmap, int index_ebuf900_reg, int index_ebuf100_chan_group, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ebuf900_reg, index_ebuf100_chan_group), 8, false, write_callback, read_callback, std::string("Ebuf100ChnlFifoCtrl")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ebuf900_reg) + "," + boost::lexical_cast<std::string>(index_ebuf100_chan_group))
    {
    }
  Ebuf100ChnlFifoCtrl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "Ebuf100ChnlFifoCtrl")
    {
    }
public:







  uint8_t &warp_fifo_begin() { return warp_fifo_begin_; }







  uint8_t &warp_fifo_end() { return warp_fifo_end_; }






  uint8_t &warp_fifo_size() { return warp_fifo_size_; }







  uint8_t &dprsr_fifo_begin() { return dprsr_fifo_begin_; }







  uint8_t &dprsr_fifo_end() { return dprsr_fifo_end_; }









  uint8_t &dprsr_fifo_size() { return dprsr_fifo_size_; }





  uint8_t &mac_fifo_begin() { return mac_fifo_begin_; }





  uint8_t &mac_fifo_end() { return mac_fifo_end_; }






  uint8_t &mac_fifo_size() { return mac_fifo_size_; }





  uint8_t &clear_warp_fifo_max_occu() { return clear_warp_fifo_max_occu_; }





  uint8_t &clear_dprsr_fifo_max_occu() { return clear_dprsr_fifo_max_occu_; }





  uint8_t &clear_mac_fifo_max_occu() { return clear_mac_fifo_max_occu_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (warp_fifo_begin_ & 0x1f);
      *data |= ((warp_fifo_end_ & 0x1f) << 5);
      *data |= ((warp_fifo_size_ & 0x3f) << 10);
      *data |= ((dprsr_fifo_begin_ & 0x1f) << 16);
      *data |= ((dprsr_fifo_end_ & 0x1f) << 22);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (dprsr_fifo_size_ & 0x1f);
      *data |= ((mac_fifo_begin_ & 0x1f) << 6);
      *data |= ((mac_fifo_end_ & 0x1f) << 11);
      *data |= ((mac_fifo_size_ & 0x3f) << 16);
      *data |= ((clear_warp_fifo_max_occu_ & 0x1) << 22);
      *data |= ((clear_dprsr_fifo_max_occu_ & 0x1) << 23);
      *data |= ((clear_mac_fifo_max_occu_ & 0x1) << 24);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      warp_fifo_begin_ = (data & 0x1f);
      warp_fifo_end_ = ((data >> 5) & 0x1f);
      warp_fifo_size_ = ((data >> 10) & 0x3f);
      dprsr_fifo_begin_ = ((data >> 16) & 0x1f);
      dprsr_fifo_end_ = ((data >> 22) & 0x1f);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      dprsr_fifo_size_ = (data & 0x1f);
      mac_fifo_begin_ = ((data >> 6) & 0x1f);
      mac_fifo_end_ = ((data >> 11) & 0x1f);
      mac_fifo_size_ = ((data >> 16) & 0x3f);
      clear_warp_fifo_max_occu_ = ((data >> 22) & 0x1);
      clear_dprsr_fifo_max_occu_ = ((data >> 23) & 0x1);
      clear_mac_fifo_max_occu_ = ((data >> 24) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    warp_fifo_begin_ = 0x0;
    warp_fifo_end_ = 0xf;
    warp_fifo_size_ = 0x10;
    dprsr_fifo_begin_ = 0x0;
    dprsr_fifo_end_ = 0xf;
    dprsr_fifo_size_ = 0x10;
    mac_fifo_begin_ = 0x0;
    mac_fifo_end_ = 0x7;
    mac_fifo_size_ = 0x8;
    clear_warp_fifo_max_occu_ = 0x0;
    clear_dprsr_fifo_max_occu_ = 0x0;
    clear_mac_fifo_max_occu_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Ebuf100ChnlFifoCtrl") + ":\n";
    r += indent_string + "  " + std::string("warp_fifo_begin") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(warp_fifo_begin_) ) + "\n";
    all_zeros &= (0 == warp_fifo_begin_);
    r += indent_string + "  " + std::string("warp_fifo_end") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(warp_fifo_end_) ) + "\n";
    all_zeros &= (0 == warp_fifo_end_);
    r += indent_string + "  " + std::string("warp_fifo_size") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(warp_fifo_size_) ) + "\n";
    all_zeros &= (0 == warp_fifo_size_);
    r += indent_string + "  " + std::string("dprsr_fifo_begin") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_fifo_begin_) ) + "\n";
    all_zeros &= (0 == dprsr_fifo_begin_);
    r += indent_string + "  " + std::string("dprsr_fifo_end") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_fifo_end_) ) + "\n";
    all_zeros &= (0 == dprsr_fifo_end_);
    r += indent_string + "  " + std::string("dprsr_fifo_size") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_fifo_size_) ) + "\n";
    all_zeros &= (0 == dprsr_fifo_size_);
    r += indent_string + "  " + std::string("mac_fifo_begin") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_fifo_begin_) ) + "\n";
    all_zeros &= (0 == mac_fifo_begin_);
    r += indent_string + "  " + std::string("mac_fifo_end") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_fifo_end_) ) + "\n";
    all_zeros &= (0 == mac_fifo_end_);
    r += indent_string + "  " + std::string("mac_fifo_size") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_fifo_size_) ) + "\n";
    all_zeros &= (0 == mac_fifo_size_);
    r += indent_string + "  " + std::string("clear_warp_fifo_max_occu") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(clear_warp_fifo_max_occu_) ) + "\n";
    all_zeros &= (0 == clear_warp_fifo_max_occu_);
    r += indent_string + "  " + std::string("clear_dprsr_fifo_max_occu") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(clear_dprsr_fifo_max_occu_) ) + "\n";
    all_zeros &= (0 == clear_dprsr_fifo_max_occu_);
    r += indent_string + "  " + std::string("clear_mac_fifo_max_occu") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(clear_mac_fifo_max_occu_) ) + "\n";
    all_zeros &= (0 == clear_mac_fifo_max_occu_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Ebuf100ChnlFifoCtrl") + ":\n";
    r += indent_string + "  " + std::string("warp_fifo_begin") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(warp_fifo_begin_) ) + "\n";
    all_zeros &= (0 == warp_fifo_begin_);
    r += indent_string + "  " + std::string("warp_fifo_end") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(warp_fifo_end_) ) + "\n";
    all_zeros &= (0 == warp_fifo_end_);
    r += indent_string + "  " + std::string("warp_fifo_size") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(warp_fifo_size_) ) + "\n";
    all_zeros &= (0 == warp_fifo_size_);
    r += indent_string + "  " + std::string("dprsr_fifo_begin") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_fifo_begin_) ) + "\n";
    all_zeros &= (0 == dprsr_fifo_begin_);
    r += indent_string + "  " + std::string("dprsr_fifo_end") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_fifo_end_) ) + "\n";
    all_zeros &= (0 == dprsr_fifo_end_);
    r += indent_string + "  " + std::string("dprsr_fifo_size") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_fifo_size_) ) + "\n";
    all_zeros &= (0 == dprsr_fifo_size_);
    r += indent_string + "  " + std::string("mac_fifo_begin") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_fifo_begin_) ) + "\n";
    all_zeros &= (0 == mac_fifo_begin_);
    r += indent_string + "  " + std::string("mac_fifo_end") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_fifo_end_) ) + "\n";
    all_zeros &= (0 == mac_fifo_end_);
    r += indent_string + "  " + std::string("mac_fifo_size") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_fifo_size_) ) + "\n";
    all_zeros &= (0 == mac_fifo_size_);
    r += indent_string + "  " + std::string("clear_warp_fifo_max_occu") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(clear_warp_fifo_max_occu_) ) + "\n";
    all_zeros &= (0 == clear_warp_fifo_max_occu_);
    r += indent_string + "  " + std::string("clear_dprsr_fifo_max_occu") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(clear_dprsr_fifo_max_occu_) ) + "\n";
    all_zeros &= (0 == clear_dprsr_fifo_max_occu_);
    r += indent_string + "  " + std::string("clear_mac_fifo_max_occu") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(clear_mac_fifo_max_occu_) ) + "\n";
    all_zeros &= (0 == clear_mac_fifo_max_occu_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t warp_fifo_begin_;
  uint8_t warp_fifo_end_;
  uint8_t warp_fifo_size_;
  uint8_t dprsr_fifo_begin_;
  uint8_t dprsr_fifo_end_;
  uint8_t dprsr_fifo_size_;
  uint8_t mac_fifo_begin_;
  uint8_t mac_fifo_end_;
  uint8_t mac_fifo_size_;
  uint8_t clear_warp_fifo_max_occu_;
  uint8_t clear_dprsr_fifo_max_occu_;
  uint8_t clear_mac_fifo_max_occu_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ebuf900_reg, int index_ebuf100_chan_group
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x40000; // to get to ebuf900reg
    assert(index_ebuf900_reg < 4);
    offset += index_ebuf900_reg * 0x2000; // ebuf900_reg[]
    offset += 0x1000; // to get to ebuf100reg
    assert(index_ebuf100_chan_group < 2);
    offset += index_ebuf100_chan_group * 0x78; // ebuf100_chan_group[]
    offset += 0x108; // to get to chan_group_chnl_fifo_ctrl
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_EBUF100_CHNL_FIFO_CTRL_H__
