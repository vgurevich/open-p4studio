/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_EBUF400_CHNL_PKTNUM_H__
#define __REGISTER_INCLUDES_EBUF400_CHNL_PKTNUM_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class Ebuf400ChnlPktnum : public model_core::RegisterBlock<RegisterCallback> {
public:
  Ebuf400ChnlPktnum(
      int chipNumber, int index_pipe_addrmap, int index_ebuf900_reg, int index_ebuf400_rspec, int index_ebuf400_chan_group, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ebuf900_reg, index_ebuf400_rspec, index_ebuf400_chan_group), 56, false, write_callback, read_callback, std::string("Ebuf400ChnlPktnum")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ebuf900_reg) + "," + boost::lexical_cast<std::string>(index_ebuf400_rspec) + "," + boost::lexical_cast<std::string>(index_ebuf400_chan_group))
    {
    }
  Ebuf400ChnlPktnum(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "Ebuf400ChnlPktnum")
    {
    }
public:






  uint64_t &dprsr_rcv_pkt() { return dprsr_rcv_pkt_; }






  uint32_t &dprsr_err_pkt() { return dprsr_err_pkt_; }







  uint32_t &dprsr_runt_pkt() { return dprsr_runt_pkt_; }






  uint32_t &dprsr_ct_timeout_pkt() { return dprsr_ct_timeout_pkt_; }







  uint32_t &dprsr_drp_pkt() { return dprsr_drp_pkt_; }






  uint64_t &warp_rcv_pkt() { return warp_rcv_pkt_; }






  uint32_t &warp_err_pkt() { return warp_err_pkt_; }







  uint32_t &warp_runt_pkt() { return warp_runt_pkt_; }







  uint32_t &warp_drp_pkt() { return warp_drp_pkt_; }






  uint64_t &mac_xmt_pkt() { return mac_xmt_pkt_; }






  uint32_t &mac_err_pkt() { return mac_err_pkt_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (dprsr_rcv_pkt_ & 0xffffffff);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = ((dprsr_rcv_pkt_ & UINT64_C(0xffffffff00000000)) >> 32);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = dprsr_err_pkt_;
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = dprsr_runt_pkt_;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      if (read_callback_) read_callback_();
      *data = dprsr_ct_timeout_pkt_;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      if (read_callback_) read_callback_();
      *data = dprsr_drp_pkt_;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      if (read_callback_) read_callback_();
      *data = (warp_rcv_pkt_ & 0xffffffff);
    }
    else if (offset >= 0x1c && offset < 0x20) {
      if (read_callback_) read_callback_();
      *data = ((warp_rcv_pkt_ & UINT64_C(0xffffffff00000000)) >> 32);
    }
    else if (offset >= 0x20 && offset < 0x24) {
      if (read_callback_) read_callback_();
      *data = warp_err_pkt_;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      if (read_callback_) read_callback_();
      *data = warp_runt_pkt_;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      if (read_callback_) read_callback_();
      *data = warp_drp_pkt_;
    }
    else if (offset >= 0x2c && offset < 0x30) {
      if (read_callback_) read_callback_();
      *data = (mac_xmt_pkt_ & 0xffffffff);
    }
    else if (offset >= 0x30 && offset < 0x34) {
      if (read_callback_) read_callback_();
      *data = ((mac_xmt_pkt_ & UINT64_C(0xffffffff00000000)) >> 32);
    }
    else if (offset >= 0x34 && offset < 0x38) {
      if (read_callback_) read_callback_();
      *data = mac_err_pkt_;
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      dprsr_rcv_pkt_ = ((static_cast<uint64_t>(data) & 0xffffffff) | (dprsr_rcv_pkt_ & UINT64_C(0xffffffff00000000)));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      dprsr_rcv_pkt_ = (((static_cast<uint64_t>(data) << 32) & UINT64_C(0xffffffff00000000)) | (dprsr_rcv_pkt_ & 0xffffffff));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      dprsr_err_pkt_ = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      dprsr_runt_pkt_ = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      dprsr_ct_timeout_pkt_ = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      dprsr_drp_pkt_ = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      warp_rcv_pkt_ = ((static_cast<uint64_t>(data) & 0xffffffff) | (warp_rcv_pkt_ & UINT64_C(0xffffffff00000000)));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      warp_rcv_pkt_ = (((static_cast<uint64_t>(data) << 32) & UINT64_C(0xffffffff00000000)) | (warp_rcv_pkt_ & 0xffffffff));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      warp_err_pkt_ = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      warp_runt_pkt_ = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      warp_drp_pkt_ = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      mac_xmt_pkt_ = ((static_cast<uint64_t>(data) & 0xffffffff) | (mac_xmt_pkt_ & UINT64_C(0xffffffff00000000)));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      mac_xmt_pkt_ = (((static_cast<uint64_t>(data) << 32) & UINT64_C(0xffffffff00000000)) | (mac_xmt_pkt_ & 0xffffffff));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      mac_err_pkt_ = data;
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    dprsr_rcv_pkt_ = UINT64_C(0x0);
    dprsr_err_pkt_ = 0x0;
    dprsr_runt_pkt_ = 0x0;
    dprsr_ct_timeout_pkt_ = 0x0;
    dprsr_drp_pkt_ = 0x0;
    warp_rcv_pkt_ = UINT64_C(0x0);
    warp_err_pkt_ = 0x0;
    warp_runt_pkt_ = 0x0;
    warp_drp_pkt_ = 0x0;
    mac_xmt_pkt_ = UINT64_C(0x0);
    mac_err_pkt_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Ebuf400ChnlPktnum") + ":\n";
    r += indent_string + "  " + std::string("dprsr_rcv_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_rcv_pkt_) ) + "\n";
    all_zeros &= (0 == dprsr_rcv_pkt_);
    r += indent_string + "  " + std::string("dprsr_err_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_err_pkt_) ) + "\n";
    all_zeros &= (0 == dprsr_err_pkt_);
    r += indent_string + "  " + std::string("dprsr_runt_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_runt_pkt_) ) + "\n";
    all_zeros &= (0 == dprsr_runt_pkt_);
    r += indent_string + "  " + std::string("dprsr_ct_timeout_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_ct_timeout_pkt_) ) + "\n";
    all_zeros &= (0 == dprsr_ct_timeout_pkt_);
    r += indent_string + "  " + std::string("dprsr_drp_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_drp_pkt_) ) + "\n";
    all_zeros &= (0 == dprsr_drp_pkt_);
    r += indent_string + "  " + std::string("warp_rcv_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(warp_rcv_pkt_) ) + "\n";
    all_zeros &= (0 == warp_rcv_pkt_);
    r += indent_string + "  " + std::string("warp_err_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(warp_err_pkt_) ) + "\n";
    all_zeros &= (0 == warp_err_pkt_);
    r += indent_string + "  " + std::string("warp_runt_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(warp_runt_pkt_) ) + "\n";
    all_zeros &= (0 == warp_runt_pkt_);
    r += indent_string + "  " + std::string("warp_drp_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(warp_drp_pkt_) ) + "\n";
    all_zeros &= (0 == warp_drp_pkt_);
    r += indent_string + "  " + std::string("mac_xmt_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_xmt_pkt_) ) + "\n";
    all_zeros &= (0 == mac_xmt_pkt_);
    r += indent_string + "  " + std::string("mac_err_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_err_pkt_) ) + "\n";
    all_zeros &= (0 == mac_err_pkt_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Ebuf400ChnlPktnum") + ":\n";
    r += indent_string + "  " + std::string("dprsr_rcv_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_rcv_pkt_) ) + "\n";
    all_zeros &= (0 == dprsr_rcv_pkt_);
    r += indent_string + "  " + std::string("dprsr_err_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_err_pkt_) ) + "\n";
    all_zeros &= (0 == dprsr_err_pkt_);
    r += indent_string + "  " + std::string("dprsr_runt_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_runt_pkt_) ) + "\n";
    all_zeros &= (0 == dprsr_runt_pkt_);
    r += indent_string + "  " + std::string("dprsr_ct_timeout_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_ct_timeout_pkt_) ) + "\n";
    all_zeros &= (0 == dprsr_ct_timeout_pkt_);
    r += indent_string + "  " + std::string("dprsr_drp_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_drp_pkt_) ) + "\n";
    all_zeros &= (0 == dprsr_drp_pkt_);
    r += indent_string + "  " + std::string("warp_rcv_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(warp_rcv_pkt_) ) + "\n";
    all_zeros &= (0 == warp_rcv_pkt_);
    r += indent_string + "  " + std::string("warp_err_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(warp_err_pkt_) ) + "\n";
    all_zeros &= (0 == warp_err_pkt_);
    r += indent_string + "  " + std::string("warp_runt_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(warp_runt_pkt_) ) + "\n";
    all_zeros &= (0 == warp_runt_pkt_);
    r += indent_string + "  " + std::string("warp_drp_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(warp_drp_pkt_) ) + "\n";
    all_zeros &= (0 == warp_drp_pkt_);
    r += indent_string + "  " + std::string("mac_xmt_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_xmt_pkt_) ) + "\n";
    all_zeros &= (0 == mac_xmt_pkt_);
    r += indent_string + "  " + std::string("mac_err_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_err_pkt_) ) + "\n";
    all_zeros &= (0 == mac_err_pkt_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint64_t dprsr_rcv_pkt_;
  uint32_t dprsr_err_pkt_;
  uint32_t dprsr_runt_pkt_;
  uint32_t dprsr_ct_timeout_pkt_;
  uint32_t dprsr_drp_pkt_;
  uint64_t warp_rcv_pkt_;
  uint32_t warp_err_pkt_;
  uint32_t warp_runt_pkt_;
  uint32_t warp_drp_pkt_;
  uint64_t mac_xmt_pkt_;
  uint32_t mac_err_pkt_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ebuf900_reg, int index_ebuf400_rspec, int index_ebuf400_chan_group
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x40000; // to get to ebuf900reg
    assert(index_ebuf900_reg < 4);
    offset += index_ebuf900_reg * 0x2000; // ebuf900_reg[]
    assert(index_ebuf400_rspec < 2);
    offset += index_ebuf400_rspec * 0x800; // ebuf400_rspec[]
    assert(index_ebuf400_chan_group < 8);
    offset += index_ebuf400_chan_group * 0x78; // ebuf400_chan_group[]
    offset += 0x440; // to get to chan_group_chnl_pktnum
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_EBUF400_CHNL_PKTNUM_H__
