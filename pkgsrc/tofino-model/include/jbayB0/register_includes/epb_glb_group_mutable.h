/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_EPB_GLB_GROUP_MUTABLE_H__
#define __REGISTER_INCLUDES_EPB_GLB_GROUP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "epb_ctrl_mutable.h"
#include "epb_ecc_dis_mutable.h"
#include "epb_ecc_inj_mutable.h"
#include "epb_glb_group_intr_stat_mutable.h"
#include "epb_glb_group_port_en_mutable.h"
#include "epb_glb_group_port_rates_mutable.h"
#include "epb_intr_log_group_mutable.h"
#include "epb_parser_maxbyte_mutable.h"
#include "epb_prsr_crd_mutable.h"
#include "epb_prsr_crd_stat_mutable.h"
#include "epb_prsr_stat_mutable.h"
#include "epb_status_mutable.h"
#include "epb_sw_reset_mutable.h"
#include "epb_time_offset_mutable.h"
#include "glb_epb_tim_off_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class EpbGlbGroupMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  EpbGlbGroupMutable(
      int chipNumber, int index_pipe_addrmap, int index_epb_prsr4_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_epb_prsr4_reg), 180, true, write_callback, read_callback, std::string("EpbGlbGroupMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_epb_prsr4_reg))
    {
    }
  EpbGlbGroupMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "EpbGlbGroupMutable")
    {
    }
public:





  EpbSwResetMutable &glb_group_sw_reset() { return glb_group_sw_reset_; }






  EpbStatusMutable &glb_group_glb_status() { return glb_group_glb_status_; }







  EpbGlbGroupPortRatesMutable &glb_group_port_rates() { return glb_group_port_rates_; }





  EpbGlbGroupPortEnMutable &glb_group_port_en() { return glb_group_port_en_; }





  EpbCtrlMutable &glb_group_glb_ctrl() { return glb_group_glb_ctrl_; }






  EpbPrsrCrdMutable &glb_group_glb_prsr_crd() { return glb_group_glb_prsr_crd_; }






  EpbPrsrCrdStatMutable &glb_group_glb_prsr_crd_stat() { return glb_group_glb_prsr_crd_stat_; }






  EpbPrsrStatMutable &glb_group_glb_prsr_stat() { return glb_group_glb_prsr_stat_; }





  EpbParserMaxbyteMutable &glb_group_glb_parser_maxbyte() { return glb_group_glb_parser_maxbyte_; }






  EpbEccInjMutable &glb_group_ecc_inj() { return glb_group_ecc_inj_; }






  EpbEccDisMutable &glb_group_ecc_dis() { return glb_group_ecc_dis_; }






  EpbTimeOffsetMutable &glb_group_time_offset() { return glb_group_time_offset_; }





  GlbEpbTimOffMutable &glb_group_glb_epb_tim_off() { return glb_group_glb_epb_tim_off_; }
  EpbGlbGroupIntrStatMutable &glb_group_intr_stat() { return glb_group_intr_stat_; }
  EpbIntrLogGroupMutable &glb_group_intr_log_group() { return glb_group_intr_log_group_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      glb_group_sw_reset_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      glb_group_glb_status_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      glb_group_port_rates_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      glb_group_port_en_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      glb_group_glb_ctrl_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      glb_group_glb_prsr_crd_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      glb_group_glb_prsr_crd_stat_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      glb_group_glb_prsr_stat_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      glb_group_glb_parser_maxbyte_.read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      if (read_callback_) read_callback_();
      glb_group_ecc_inj_.read( offset, data );
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      if (read_callback_) read_callback_();
      glb_group_ecc_dis_.read( offset, data );
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      if (read_callback_) read_callback_();
      glb_group_time_offset_.read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      if (read_callback_) read_callback_();
      glb_group_glb_epb_tim_off_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x68) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      glb_group_intr_stat_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xa0) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      glb_group_intr_log_group_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      glb_group_sw_reset_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      glb_group_glb_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      glb_group_port_rates_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      glb_group_port_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      glb_group_glb_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      glb_group_glb_prsr_crd_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      glb_group_glb_prsr_crd_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      glb_group_glb_prsr_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      glb_group_glb_parser_maxbyte_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      glb_group_ecc_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      glb_group_ecc_dis_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      glb_group_time_offset_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      glb_group_glb_epb_tim_off_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x68) {
      offset -= 0x40;
      glb_group_intr_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xa0) {
      offset -= 0x80;
      glb_group_intr_log_group_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    glb_group_sw_reset_.reset();
    glb_group_glb_status_.reset();
    glb_group_port_rates_.reset();
    glb_group_port_en_.reset();
    glb_group_glb_ctrl_.reset();
    glb_group_glb_prsr_crd_.reset();
    glb_group_glb_prsr_crd_stat_.reset();
    glb_group_glb_prsr_stat_.reset();
    glb_group_glb_parser_maxbyte_.reset();
    glb_group_ecc_inj_.reset();
    glb_group_ecc_dis_.reset();
    glb_group_time_offset_.reset();
    glb_group_glb_epb_tim_off_.reset();
    glb_group_intr_stat_.reset();
    glb_group_intr_log_group_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += glb_group_sw_reset_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += glb_group_glb_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += glb_group_port_rates_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += glb_group_port_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += glb_group_glb_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += glb_group_glb_prsr_crd_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += glb_group_glb_prsr_crd_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      r += glb_group_glb_prsr_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += glb_group_glb_parser_maxbyte_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      r += glb_group_ecc_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      r += glb_group_ecc_dis_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      r += glb_group_time_offset_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      r += glb_group_glb_epb_tim_off_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x68) {
      offset -= 0x40;
      r += glb_group_intr_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xa0) {
      offset -= 0x80;
      r += glb_group_intr_log_group_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += glb_group_sw_reset_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_status_.to_string(print_zeros,indent_string) ;
    r += glb_group_port_rates_.to_string(print_zeros,indent_string) ;
    r += glb_group_port_en_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_ctrl_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_prsr_crd_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_prsr_crd_stat_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_prsr_stat_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_parser_maxbyte_.to_string(print_zeros,indent_string) ;
    r += glb_group_ecc_inj_.to_string(print_zeros,indent_string) ;
    r += glb_group_ecc_dis_.to_string(print_zeros,indent_string) ;
    r += glb_group_time_offset_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_epb_tim_off_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_stat_.to_string(print_zeros,indent_string) ;
    r += glb_group_intr_log_group_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  EpbSwResetMutable glb_group_sw_reset_;
  EpbStatusMutable glb_group_glb_status_;
  EpbGlbGroupPortRatesMutable glb_group_port_rates_;
  EpbGlbGroupPortEnMutable glb_group_port_en_;
  EpbCtrlMutable glb_group_glb_ctrl_;
  EpbPrsrCrdMutable glb_group_glb_prsr_crd_;
  EpbPrsrCrdStatMutable glb_group_glb_prsr_crd_stat_;
  EpbPrsrStatMutable glb_group_glb_prsr_stat_;
  EpbParserMaxbyteMutable glb_group_glb_parser_maxbyte_;
  EpbEccInjMutable glb_group_ecc_inj_;
  EpbEccDisMutable glb_group_ecc_dis_;
  EpbTimeOffsetMutable glb_group_time_offset_;
  GlbEpbTimOffMutable glb_group_glb_epb_tim_off_;
  EpbGlbGroupIntrStatMutable glb_group_intr_stat_;
  EpbIntrLogGroupMutable glb_group_intr_log_group_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_epb_prsr4_reg
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x20000; // to get to epbprsr4reg
    assert(index_epb_prsr4_reg < 9);
    offset += index_epb_prsr4_reg * 0x2000; // epb_prsr4_reg[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_EPB_GLB_GROUP_MUTABLE_H__
