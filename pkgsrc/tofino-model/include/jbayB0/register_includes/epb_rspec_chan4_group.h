/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_EPB_RSPEC_CHAN4_GROUP_H__
#define __REGISTER_INCLUDES_EPB_RSPEC_CHAN4_GROUP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "epb_chnl_ctrl.h"
#include "epb_chnl_deparser_send_pkt.h"
#include "epb_chnl_fifo_cfg.h"
#include "epb_chnl_fifo_ctrl.h"
#include "epb_chnl_p2s_received_pkt.h"
#include "epb_chnl_parser_send_pkt.h"
#include "epb_chnl_pktnum0.h"
#include "epb_chnl_pktnum1.h"
#include "epb_chnl_pktnum2.h"
#include "epb_chnl_pktnum3.h"
#include "epb_chnl_stat.h"
#include "epb_chnl_warp_send_pkt.h"

namespace jbayB0 {
  namespace register_classes {

class EpbRspecChan4Group : public model_core::RegisterBlock<RegisterCallback> {
public:
  EpbRspecChan4Group(
      int chipNumber, int index_pipe_addrmap, int index_epb_prsr4_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_epb_prsr4_reg), 108, false, write_callback, read_callback, std::string("EpbRspecChan4Group")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_epb_prsr4_reg))
    {
    }
  EpbRspecChan4Group(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "EpbRspecChan4Group")
    {
    }
public:





  EpbChnlCtrl &chan4_group_chnl_ctrl() { return chan4_group_chnl_ctrl_; }





  EpbChnlFifoCtrl &chan4_group_chnl_fifo_ctrl() { return chan4_group_chnl_fifo_ctrl_; }







  EpbChnlFifoCfg &chan4_group_chnl_fifo_cfg() { return chan4_group_chnl_fifo_cfg_; }






  EpbChnlStat &chan4_group_chnl_stat() { return chan4_group_chnl_stat_; }







  EpbChnlPktnum0 &chan4_group_chnl_pktnum0() { return chan4_group_chnl_pktnum0_; }






  EpbChnlPktnum1 &chan4_group_chnl_pktnum1() { return chan4_group_chnl_pktnum1_; }






  EpbChnlPktnum2 &chan4_group_chnl_pktnum2() { return chan4_group_chnl_pktnum2_; }






  EpbChnlPktnum3 &chan4_group_chnl_pktnum3() { return chan4_group_chnl_pktnum3_; }





  EpbChnlParserSendPkt &chan4_group_chnl_parser_send_pkt() { return chan4_group_chnl_parser_send_pkt_; }





  EpbChnlDeparserSendPkt &chan4_group_chnl_deparser_send_pkt() { return chan4_group_chnl_deparser_send_pkt_; }





  EpbChnlWarpSendPkt &chan4_group_chnl_warp_send_pkt() { return chan4_group_chnl_warp_send_pkt_; }





  EpbChnlP2sReceivedPkt &chan4_group_chnl_p2s_received_pkt() { return chan4_group_chnl_p2s_received_pkt_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0xc00 && offset < 0xc08) {
      offset -= 0xc00;
      if (read_callback_) read_callback_();
      chan4_group_chnl_ctrl_.read( offset, data );
    }
    else if (offset >= 0xc08 && offset < 0xc10) {
      offset -= 0xc08;
      if (read_callback_) read_callback_();
      chan4_group_chnl_fifo_ctrl_.read( offset, data );
    }
    else if (offset >= 0xc10 && offset < 0xc14) {
      offset -= 0xc10;
      if (read_callback_) read_callback_();
      chan4_group_chnl_fifo_cfg_.read( offset, data );
    }
    else if (offset >= 0xc14 && offset < 0xc18) {
      offset -= 0xc14;
      if (read_callback_) read_callback_();
      chan4_group_chnl_stat_.read( offset, data );
    }
    else if (offset >= 0xc18 && offset < 0xc1c) {
      offset -= 0xc18;
      if (read_callback_) read_callback_();
      chan4_group_chnl_pktnum0_.read( offset, data );
    }
    else if (offset >= 0xc1c && offset < 0xc20) {
      offset -= 0xc1c;
      if (read_callback_) read_callback_();
      chan4_group_chnl_pktnum1_.read( offset, data );
    }
    else if (offset >= 0xc20 && offset < 0xc24) {
      offset -= 0xc20;
      if (read_callback_) read_callback_();
      chan4_group_chnl_pktnum2_.read( offset, data );
    }
    else if (offset >= 0xc28 && offset < 0xc30) {
      offset -= 0xc28;
      if (read_callback_) read_callback_();
      chan4_group_chnl_pktnum3_.read( offset, data );
    }
    else if (offset >= 0xc30 && offset < 0xc3c) {
      offset -= 0xc30;
      if (read_callback_) read_callback_();
      chan4_group_chnl_parser_send_pkt_.read( offset, data );
    }
    else if (offset >= 0xc40 && offset < 0xc4c) {
      offset -= 0xc40;
      if (read_callback_) read_callback_();
      chan4_group_chnl_deparser_send_pkt_.read( offset, data );
    }
    else if (offset >= 0xc50 && offset < 0xc5c) {
      offset -= 0xc50;
      if (read_callback_) read_callback_();
      chan4_group_chnl_warp_send_pkt_.read( offset, data );
    }
    else if (offset >= 0xc60 && offset < 0xc6c) {
      offset -= 0xc60;
      if (read_callback_) read_callback_();
      chan4_group_chnl_p2s_received_pkt_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0xc00 && offset < 0xc08) {
      offset -= 0xc00;
      chan4_group_chnl_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc08 && offset < 0xc10) {
      offset -= 0xc08;
      chan4_group_chnl_fifo_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc10 && offset < 0xc14) {
      offset -= 0xc10;
      chan4_group_chnl_fifo_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc14 && offset < 0xc18) {
      offset -= 0xc14;
      chan4_group_chnl_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc18 && offset < 0xc1c) {
      offset -= 0xc18;
      chan4_group_chnl_pktnum0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc1c && offset < 0xc20) {
      offset -= 0xc1c;
      chan4_group_chnl_pktnum1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc20 && offset < 0xc24) {
      offset -= 0xc20;
      chan4_group_chnl_pktnum2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc28 && offset < 0xc30) {
      offset -= 0xc28;
      chan4_group_chnl_pktnum3_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc30 && offset < 0xc3c) {
      offset -= 0xc30;
      chan4_group_chnl_parser_send_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc40 && offset < 0xc4c) {
      offset -= 0xc40;
      chan4_group_chnl_deparser_send_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc50 && offset < 0xc5c) {
      offset -= 0xc50;
      chan4_group_chnl_warp_send_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc60 && offset < 0xc6c) {
      offset -= 0xc60;
      chan4_group_chnl_p2s_received_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    chan4_group_chnl_ctrl_.reset();
    chan4_group_chnl_fifo_ctrl_.reset();
    chan4_group_chnl_fifo_cfg_.reset();
    chan4_group_chnl_stat_.reset();
    chan4_group_chnl_pktnum0_.reset();
    chan4_group_chnl_pktnum1_.reset();
    chan4_group_chnl_pktnum2_.reset();
    chan4_group_chnl_pktnum3_.reset();
    chan4_group_chnl_parser_send_pkt_.reset();
    chan4_group_chnl_deparser_send_pkt_.reset();
    chan4_group_chnl_warp_send_pkt_.reset();
    chan4_group_chnl_p2s_received_pkt_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0xc00 && offset < 0xc08) {
      offset -= 0xc00;
      r += chan4_group_chnl_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc08 && offset < 0xc10) {
      offset -= 0xc08;
      r += chan4_group_chnl_fifo_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc10 && offset < 0xc14) {
      offset -= 0xc10;
      r += chan4_group_chnl_fifo_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc14 && offset < 0xc18) {
      offset -= 0xc14;
      r += chan4_group_chnl_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc18 && offset < 0xc1c) {
      offset -= 0xc18;
      r += chan4_group_chnl_pktnum0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc1c && offset < 0xc20) {
      offset -= 0xc1c;
      r += chan4_group_chnl_pktnum1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc20 && offset < 0xc24) {
      offset -= 0xc20;
      r += chan4_group_chnl_pktnum2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc28 && offset < 0xc30) {
      offset -= 0xc28;
      r += chan4_group_chnl_pktnum3_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc30 && offset < 0xc3c) {
      offset -= 0xc30;
      r += chan4_group_chnl_parser_send_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc40 && offset < 0xc4c) {
      offset -= 0xc40;
      r += chan4_group_chnl_deparser_send_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc50 && offset < 0xc5c) {
      offset -= 0xc50;
      r += chan4_group_chnl_warp_send_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc60 && offset < 0xc6c) {
      offset -= 0xc60;
      r += chan4_group_chnl_p2s_received_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += chan4_group_chnl_ctrl_.to_string(print_zeros,indent_string) ;
    r += chan4_group_chnl_fifo_ctrl_.to_string(print_zeros,indent_string) ;
    r += chan4_group_chnl_fifo_cfg_.to_string(print_zeros,indent_string) ;
    r += chan4_group_chnl_stat_.to_string(print_zeros,indent_string) ;
    r += chan4_group_chnl_pktnum0_.to_string(print_zeros,indent_string) ;
    r += chan4_group_chnl_pktnum1_.to_string(print_zeros,indent_string) ;
    r += chan4_group_chnl_pktnum2_.to_string(print_zeros,indent_string) ;
    r += chan4_group_chnl_pktnum3_.to_string(print_zeros,indent_string) ;
    r += chan4_group_chnl_parser_send_pkt_.to_string(print_zeros,indent_string) ;
    r += chan4_group_chnl_deparser_send_pkt_.to_string(print_zeros,indent_string) ;
    r += chan4_group_chnl_warp_send_pkt_.to_string(print_zeros,indent_string) ;
    r += chan4_group_chnl_p2s_received_pkt_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  EpbChnlCtrl chan4_group_chnl_ctrl_;
  EpbChnlFifoCtrl chan4_group_chnl_fifo_ctrl_;
  EpbChnlFifoCfg chan4_group_chnl_fifo_cfg_;
  EpbChnlStat chan4_group_chnl_stat_;
  EpbChnlPktnum0 chan4_group_chnl_pktnum0_;
  EpbChnlPktnum1 chan4_group_chnl_pktnum1_;
  EpbChnlPktnum2 chan4_group_chnl_pktnum2_;
  EpbChnlPktnum3 chan4_group_chnl_pktnum3_;
  EpbChnlParserSendPkt chan4_group_chnl_parser_send_pkt_;
  EpbChnlDeparserSendPkt chan4_group_chnl_deparser_send_pkt_;
  EpbChnlWarpSendPkt chan4_group_chnl_warp_send_pkt_;
  EpbChnlP2sReceivedPkt chan4_group_chnl_p2s_received_pkt_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_epb_prsr4_reg
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x20000; // to get to epbprsr4reg
    assert(index_epb_prsr4_reg < 9);
    offset += index_epb_prsr4_reg * 0x2000; // epb_prsr4_reg[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_EPB_RSPEC_CHAN4_GROUP_H__
