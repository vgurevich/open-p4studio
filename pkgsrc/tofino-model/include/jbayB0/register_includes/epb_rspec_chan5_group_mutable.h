/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_EPB_RSPEC_CHAN5_GROUP_MUTABLE_H__
#define __REGISTER_INCLUDES_EPB_RSPEC_CHAN5_GROUP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "epb_chnl_ctrl_mutable.h"
#include "epb_chnl_deparser_send_pkt_mutable.h"
#include "epb_chnl_fifo_cfg_mutable.h"
#include "epb_chnl_fifo_ctrl_mutable.h"
#include "epb_chnl_p2s_received_pkt_mutable.h"
#include "epb_chnl_parser_send_pkt_mutable.h"
#include "epb_chnl_pktnum0_mutable.h"
#include "epb_chnl_pktnum1_mutable.h"
#include "epb_chnl_pktnum2_mutable.h"
#include "epb_chnl_pktnum3_mutable.h"
#include "epb_chnl_stat_mutable.h"
#include "epb_chnl_warp_send_pkt_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class EpbRspecChan5GroupMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  EpbRspecChan5GroupMutable(
      int chipNumber, int index_pipe_addrmap, int index_epb_prsr4_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_epb_prsr4_reg), 108, true, write_callback, read_callback, std::string("EpbRspecChan5GroupMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_epb_prsr4_reg))
    {
    }
  EpbRspecChan5GroupMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "EpbRspecChan5GroupMutable")
    {
    }
public:





  EpbChnlCtrlMutable &chan5_group_chnl_ctrl() { return chan5_group_chnl_ctrl_; }





  EpbChnlFifoCtrlMutable &chan5_group_chnl_fifo_ctrl() { return chan5_group_chnl_fifo_ctrl_; }







  EpbChnlFifoCfgMutable &chan5_group_chnl_fifo_cfg() { return chan5_group_chnl_fifo_cfg_; }






  EpbChnlStatMutable &chan5_group_chnl_stat() { return chan5_group_chnl_stat_; }







  EpbChnlPktnum0Mutable &chan5_group_chnl_pktnum0() { return chan5_group_chnl_pktnum0_; }






  EpbChnlPktnum1Mutable &chan5_group_chnl_pktnum1() { return chan5_group_chnl_pktnum1_; }






  EpbChnlPktnum2Mutable &chan5_group_chnl_pktnum2() { return chan5_group_chnl_pktnum2_; }






  EpbChnlPktnum3Mutable &chan5_group_chnl_pktnum3() { return chan5_group_chnl_pktnum3_; }





  EpbChnlParserSendPktMutable &chan5_group_chnl_parser_send_pkt() { return chan5_group_chnl_parser_send_pkt_; }





  EpbChnlDeparserSendPktMutable &chan5_group_chnl_deparser_send_pkt() { return chan5_group_chnl_deparser_send_pkt_; }





  EpbChnlWarpSendPktMutable &chan5_group_chnl_warp_send_pkt() { return chan5_group_chnl_warp_send_pkt_; }





  EpbChnlP2sReceivedPktMutable &chan5_group_chnl_p2s_received_pkt() { return chan5_group_chnl_p2s_received_pkt_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0xd00 && offset < 0xd08) {
      offset -= 0xd00;
      if (read_callback_) read_callback_();
      chan5_group_chnl_ctrl_.read( offset, data );
    }
    else if (offset >= 0xd08 && offset < 0xd10) {
      offset -= 0xd08;
      if (read_callback_) read_callback_();
      chan5_group_chnl_fifo_ctrl_.read( offset, data );
    }
    else if (offset >= 0xd10 && offset < 0xd14) {
      offset -= 0xd10;
      if (read_callback_) read_callback_();
      chan5_group_chnl_fifo_cfg_.read( offset, data );
    }
    else if (offset >= 0xd14 && offset < 0xd18) {
      offset -= 0xd14;
      if (read_callback_) read_callback_();
      chan5_group_chnl_stat_.read( offset, data );
    }
    else if (offset >= 0xd18 && offset < 0xd1c) {
      offset -= 0xd18;
      if (read_callback_) read_callback_();
      chan5_group_chnl_pktnum0_.read( offset, data );
    }
    else if (offset >= 0xd1c && offset < 0xd20) {
      offset -= 0xd1c;
      if (read_callback_) read_callback_();
      chan5_group_chnl_pktnum1_.read( offset, data );
    }
    else if (offset >= 0xd20 && offset < 0xd24) {
      offset -= 0xd20;
      if (read_callback_) read_callback_();
      chan5_group_chnl_pktnum2_.read( offset, data );
    }
    else if (offset >= 0xd28 && offset < 0xd30) {
      offset -= 0xd28;
      if (read_callback_) read_callback_();
      chan5_group_chnl_pktnum3_.read( offset, data );
    }
    else if (offset >= 0xd30 && offset < 0xd3c) {
      offset -= 0xd30;
      if (read_callback_) read_callback_();
      chan5_group_chnl_parser_send_pkt_.read( offset, data );
    }
    else if (offset >= 0xd40 && offset < 0xd4c) {
      offset -= 0xd40;
      if (read_callback_) read_callback_();
      chan5_group_chnl_deparser_send_pkt_.read( offset, data );
    }
    else if (offset >= 0xd50 && offset < 0xd5c) {
      offset -= 0xd50;
      if (read_callback_) read_callback_();
      chan5_group_chnl_warp_send_pkt_.read( offset, data );
    }
    else if (offset >= 0xd60 && offset < 0xd6c) {
      offset -= 0xd60;
      if (read_callback_) read_callback_();
      chan5_group_chnl_p2s_received_pkt_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0xd00 && offset < 0xd08) {
      offset -= 0xd00;
      chan5_group_chnl_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd08 && offset < 0xd10) {
      offset -= 0xd08;
      chan5_group_chnl_fifo_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd10 && offset < 0xd14) {
      offset -= 0xd10;
      chan5_group_chnl_fifo_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd14 && offset < 0xd18) {
      offset -= 0xd14;
      chan5_group_chnl_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd18 && offset < 0xd1c) {
      offset -= 0xd18;
      chan5_group_chnl_pktnum0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd1c && offset < 0xd20) {
      offset -= 0xd1c;
      chan5_group_chnl_pktnum1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd20 && offset < 0xd24) {
      offset -= 0xd20;
      chan5_group_chnl_pktnum2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd28 && offset < 0xd30) {
      offset -= 0xd28;
      chan5_group_chnl_pktnum3_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd30 && offset < 0xd3c) {
      offset -= 0xd30;
      chan5_group_chnl_parser_send_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd40 && offset < 0xd4c) {
      offset -= 0xd40;
      chan5_group_chnl_deparser_send_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd50 && offset < 0xd5c) {
      offset -= 0xd50;
      chan5_group_chnl_warp_send_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd60 && offset < 0xd6c) {
      offset -= 0xd60;
      chan5_group_chnl_p2s_received_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    chan5_group_chnl_ctrl_.reset();
    chan5_group_chnl_fifo_ctrl_.reset();
    chan5_group_chnl_fifo_cfg_.reset();
    chan5_group_chnl_stat_.reset();
    chan5_group_chnl_pktnum0_.reset();
    chan5_group_chnl_pktnum1_.reset();
    chan5_group_chnl_pktnum2_.reset();
    chan5_group_chnl_pktnum3_.reset();
    chan5_group_chnl_parser_send_pkt_.reset();
    chan5_group_chnl_deparser_send_pkt_.reset();
    chan5_group_chnl_warp_send_pkt_.reset();
    chan5_group_chnl_p2s_received_pkt_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0xd00 && offset < 0xd08) {
      offset -= 0xd00;
      r += chan5_group_chnl_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd08 && offset < 0xd10) {
      offset -= 0xd08;
      r += chan5_group_chnl_fifo_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd10 && offset < 0xd14) {
      offset -= 0xd10;
      r += chan5_group_chnl_fifo_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd14 && offset < 0xd18) {
      offset -= 0xd14;
      r += chan5_group_chnl_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd18 && offset < 0xd1c) {
      offset -= 0xd18;
      r += chan5_group_chnl_pktnum0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd1c && offset < 0xd20) {
      offset -= 0xd1c;
      r += chan5_group_chnl_pktnum1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd20 && offset < 0xd24) {
      offset -= 0xd20;
      r += chan5_group_chnl_pktnum2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd28 && offset < 0xd30) {
      offset -= 0xd28;
      r += chan5_group_chnl_pktnum3_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd30 && offset < 0xd3c) {
      offset -= 0xd30;
      r += chan5_group_chnl_parser_send_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd40 && offset < 0xd4c) {
      offset -= 0xd40;
      r += chan5_group_chnl_deparser_send_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd50 && offset < 0xd5c) {
      offset -= 0xd50;
      r += chan5_group_chnl_warp_send_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd60 && offset < 0xd6c) {
      offset -= 0xd60;
      r += chan5_group_chnl_p2s_received_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += chan5_group_chnl_ctrl_.to_string(print_zeros,indent_string) ;
    r += chan5_group_chnl_fifo_ctrl_.to_string(print_zeros,indent_string) ;
    r += chan5_group_chnl_fifo_cfg_.to_string(print_zeros,indent_string) ;
    r += chan5_group_chnl_stat_.to_string(print_zeros,indent_string) ;
    r += chan5_group_chnl_pktnum0_.to_string(print_zeros,indent_string) ;
    r += chan5_group_chnl_pktnum1_.to_string(print_zeros,indent_string) ;
    r += chan5_group_chnl_pktnum2_.to_string(print_zeros,indent_string) ;
    r += chan5_group_chnl_pktnum3_.to_string(print_zeros,indent_string) ;
    r += chan5_group_chnl_parser_send_pkt_.to_string(print_zeros,indent_string) ;
    r += chan5_group_chnl_deparser_send_pkt_.to_string(print_zeros,indent_string) ;
    r += chan5_group_chnl_warp_send_pkt_.to_string(print_zeros,indent_string) ;
    r += chan5_group_chnl_p2s_received_pkt_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  EpbChnlCtrlMutable chan5_group_chnl_ctrl_;
  EpbChnlFifoCtrlMutable chan5_group_chnl_fifo_ctrl_;
  EpbChnlFifoCfgMutable chan5_group_chnl_fifo_cfg_;
  EpbChnlStatMutable chan5_group_chnl_stat_;
  EpbChnlPktnum0Mutable chan5_group_chnl_pktnum0_;
  EpbChnlPktnum1Mutable chan5_group_chnl_pktnum1_;
  EpbChnlPktnum2Mutable chan5_group_chnl_pktnum2_;
  EpbChnlPktnum3Mutable chan5_group_chnl_pktnum3_;
  EpbChnlParserSendPktMutable chan5_group_chnl_parser_send_pkt_;
  EpbChnlDeparserSendPktMutable chan5_group_chnl_deparser_send_pkt_;
  EpbChnlWarpSendPktMutable chan5_group_chnl_warp_send_pkt_;
  EpbChnlP2sReceivedPktMutable chan5_group_chnl_p2s_received_pkt_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_epb_prsr4_reg
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x20000; // to get to epbprsr4reg
    assert(index_epb_prsr4_reg < 9);
    offset += index_epb_prsr4_reg * 0x2000; // epb_prsr4_reg[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_EPB_RSPEC_CHAN5_GROUP_MUTABLE_H__
