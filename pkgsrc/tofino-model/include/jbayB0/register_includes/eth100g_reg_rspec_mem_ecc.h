/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH100G_REG_RSPEC_MEM_ECC_H__
#define __REGISTER_INCLUDES_ETH100G_REG_RSPEC_MEM_ECC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class Eth100gRegRspecMemEcc : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum JbayRegEnum {
    kEth100gRegs,
    kEth100gRegsRot
  };
public:
  Eth100gRegRspecMemEcc(
      int chipNumber, JbayRegEnum selector_jbay_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_jbay_reg), 4, false, write_callback, read_callback, std::string("Eth100gRegRspecMemEcc")+":"+boost::lexical_cast<std::string>(selector_jbay_reg))
    {
    }
  Eth100gRegRspecMemEcc(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "Eth100gRegRspecMemEcc")
    {
    }
public:




  uint8_t &txfifo_sram_disable_check() { return txfifo_sram_disable_check_; }




  uint8_t &txfifo_sram_inject_sbe() { return txfifo_sram_inject_sbe_; }




  uint8_t &txfifo_sram_inject_mbe() { return txfifo_sram_inject_mbe_; }




  uint8_t &statsmem_disable_check() { return statsmem_disable_check_; }




  uint8_t &statsmem_inject_sbe() { return statsmem_inject_sbe_; }




  uint8_t &statsmem_inject_mbe() { return statsmem_inject_mbe_; }




  uint8_t &tv80mem_disable_check() { return tv80mem_disable_check_; }




  uint8_t &tv80mem_inject_sbe() { return tv80mem_inject_sbe_; }




  uint8_t &tv80mem_inject_mbe() { return tv80mem_inject_mbe_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (txfifo_sram_disable_check_ & 0x1);
    *data |= ((txfifo_sram_inject_sbe_ & 0x1) << 1);
    *data |= ((txfifo_sram_inject_mbe_ & 0x1) << 2);
    *data |= ((statsmem_disable_check_ & 0x1) << 4);
    *data |= ((statsmem_inject_sbe_ & 0x1) << 5);
    *data |= ((statsmem_inject_mbe_ & 0x1) << 6);
    *data |= ((tv80mem_disable_check_ & 0x1) << 8);
    *data |= ((tv80mem_inject_sbe_ & 0x1) << 9);
    *data |= ((tv80mem_inject_mbe_ & 0x1) << 10);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    txfifo_sram_disable_check_ = (data & 0x1);
    txfifo_sram_inject_sbe_ = ((data >> 1) & 0x1);
    txfifo_sram_inject_mbe_ = ((data >> 2) & 0x1);
    statsmem_disable_check_ = ((data >> 4) & 0x1);
    statsmem_inject_sbe_ = ((data >> 5) & 0x1);
    statsmem_inject_mbe_ = ((data >> 6) & 0x1);
    tv80mem_disable_check_ = ((data >> 8) & 0x1);
    tv80mem_inject_sbe_ = ((data >> 9) & 0x1);
    tv80mem_inject_mbe_ = ((data >> 10) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    txfifo_sram_disable_check_ = 0x0;
    txfifo_sram_inject_sbe_ = 0x0;
    txfifo_sram_inject_mbe_ = 0x0;
    statsmem_disable_check_ = 0x0;
    statsmem_inject_sbe_ = 0x0;
    statsmem_inject_mbe_ = 0x0;
    tv80mem_disable_check_ = 0x0;
    tv80mem_inject_sbe_ = 0x0;
    tv80mem_inject_mbe_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth100gRegRspecMemEcc") + ":\n";
    r += indent_string + "  " + std::string("txfifo_sram_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_sram_disable_check_) ) + "\n";
    all_zeros &= (0 == txfifo_sram_disable_check_);
    r += indent_string + "  " + std::string("txfifo_sram_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_sram_inject_sbe_) ) + "\n";
    all_zeros &= (0 == txfifo_sram_inject_sbe_);
    r += indent_string + "  " + std::string("txfifo_sram_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_sram_inject_mbe_) ) + "\n";
    all_zeros &= (0 == txfifo_sram_inject_mbe_);
    r += indent_string + "  " + std::string("statsmem_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(statsmem_disable_check_) ) + "\n";
    all_zeros &= (0 == statsmem_disable_check_);
    r += indent_string + "  " + std::string("statsmem_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(statsmem_inject_sbe_) ) + "\n";
    all_zeros &= (0 == statsmem_inject_sbe_);
    r += indent_string + "  " + std::string("statsmem_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(statsmem_inject_mbe_) ) + "\n";
    all_zeros &= (0 == statsmem_inject_mbe_);
    r += indent_string + "  " + std::string("tv80mem_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80mem_disable_check_) ) + "\n";
    all_zeros &= (0 == tv80mem_disable_check_);
    r += indent_string + "  " + std::string("tv80mem_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80mem_inject_sbe_) ) + "\n";
    all_zeros &= (0 == tv80mem_inject_sbe_);
    r += indent_string + "  " + std::string("tv80mem_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80mem_inject_mbe_) ) + "\n";
    all_zeros &= (0 == tv80mem_inject_mbe_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth100gRegRspecMemEcc") + ":\n";
    r += indent_string + "  " + std::string("txfifo_sram_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_sram_disable_check_) ) + "\n";
    all_zeros &= (0 == txfifo_sram_disable_check_);
    r += indent_string + "  " + std::string("txfifo_sram_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_sram_inject_sbe_) ) + "\n";
    all_zeros &= (0 == txfifo_sram_inject_sbe_);
    r += indent_string + "  " + std::string("txfifo_sram_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_sram_inject_mbe_) ) + "\n";
    all_zeros &= (0 == txfifo_sram_inject_mbe_);
    r += indent_string + "  " + std::string("statsmem_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(statsmem_disable_check_) ) + "\n";
    all_zeros &= (0 == statsmem_disable_check_);
    r += indent_string + "  " + std::string("statsmem_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(statsmem_inject_sbe_) ) + "\n";
    all_zeros &= (0 == statsmem_inject_sbe_);
    r += indent_string + "  " + std::string("statsmem_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(statsmem_inject_mbe_) ) + "\n";
    all_zeros &= (0 == statsmem_inject_mbe_);
    r += indent_string + "  " + std::string("tv80mem_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80mem_disable_check_) ) + "\n";
    all_zeros &= (0 == tv80mem_disable_check_);
    r += indent_string + "  " + std::string("tv80mem_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80mem_inject_sbe_) ) + "\n";
    all_zeros &= (0 == tv80mem_inject_sbe_);
    r += indent_string + "  " + std::string("tv80mem_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80mem_inject_mbe_) ) + "\n";
    all_zeros &= (0 == tv80mem_inject_mbe_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t txfifo_sram_disable_check_;
  uint8_t txfifo_sram_inject_sbe_;
  uint8_t txfifo_sram_inject_mbe_;
  uint8_t statsmem_disable_check_;
  uint8_t statsmem_inject_sbe_;
  uint8_t statsmem_inject_mbe_;
  uint8_t tv80mem_disable_check_;
  uint8_t tv80mem_inject_sbe_;
  uint8_t tv80mem_inject_mbe_;
private:
  static int StartOffset(
      JbayRegEnum selector_jbay_reg
      ) {
    int offset=0;
    switch (selector_jbay_reg) {
      case kEth100gRegs:
        offset += 0x2000000; // to get to eth100g_regs
        offset += 0x1fc00; // to get to eth100g_reg
        offset += 0x134; // to get to mem_ecc
        break;
      case kEth100gRegsRot:
        offset += 0x29c0000; // to get to eth100g_regs_rot
        offset += 0x1fc00; // to get to eth100g_reg
        offset += 0x134; // to get to mem_ecc
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};












  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_ETH100G_REG_RSPEC_MEM_ECC_H__
