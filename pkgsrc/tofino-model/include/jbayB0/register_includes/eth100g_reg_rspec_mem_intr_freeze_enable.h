/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH100G_REG_RSPEC_MEM_INTR_FREEZE_ENABLE_H__
#define __REGISTER_INCLUDES_ETH100G_REG_RSPEC_MEM_INTR_FREEZE_ENABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class Eth100gRegRspecMemIntrFreezeEnable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum JbayRegEnum {
    kEth100gRegs,
    kEth100gRegsRot
  };
public:
  Eth100gRegRspecMemIntrFreezeEnable(
      int chipNumber, JbayRegEnum selector_jbay_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_jbay_reg), 4, false, write_callback, read_callback, std::string("Eth100gRegRspecMemIntrFreezeEnable")+":"+boost::lexical_cast<std::string>(selector_jbay_reg))
    {
    }
  Eth100gRegRspecMemIntrFreezeEnable(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "Eth100gRegRspecMemIntrFreezeEnable")
    {
    }
public:
  uint8_t &txfifo_sbe() { return txfifo_sbe_; }
  uint8_t &txfifo_mbe() { return txfifo_mbe_; }
  uint8_t &statsmem_sbe() { return statsmem_sbe_; }
  uint8_t &statsmem_mbe() { return statsmem_mbe_; }
  uint8_t &tv80mem_sbe() { return tv80mem_sbe_; }
  uint8_t &tv80mem_mbe() { return tv80mem_mbe_; }
  uint8_t &mdioci_werr() { return mdioci_werr_; }
  uint8_t &mdioci_rerr() { return mdioci_rerr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (txfifo_sbe_ & 0x1);
    *data |= ((txfifo_mbe_ & 0x1) << 1);
    *data |= ((statsmem_sbe_ & 0x1) << 2);
    *data |= ((statsmem_mbe_ & 0x1) << 3);
    *data |= ((tv80mem_sbe_ & 0x1) << 4);
    *data |= ((tv80mem_mbe_ & 0x1) << 5);
    *data |= ((mdioci_werr_ & 0x1) << 6);
    *data |= ((mdioci_rerr_ & 0x1) << 7);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    txfifo_sbe_ = (data & 0x1);
    txfifo_mbe_ = ((data >> 1) & 0x1);
    statsmem_sbe_ = ((data >> 2) & 0x1);
    statsmem_mbe_ = ((data >> 3) & 0x1);
    tv80mem_sbe_ = ((data >> 4) & 0x1);
    tv80mem_mbe_ = ((data >> 5) & 0x1);
    mdioci_werr_ = ((data >> 6) & 0x1);
    mdioci_rerr_ = ((data >> 7) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    txfifo_sbe_ = 0x0;
    txfifo_mbe_ = 0x0;
    statsmem_sbe_ = 0x0;
    statsmem_mbe_ = 0x0;
    tv80mem_sbe_ = 0x0;
    tv80mem_mbe_ = 0x0;
    mdioci_werr_ = 0x0;
    mdioci_rerr_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth100gRegRspecMemIntrFreezeEnable") + ":\n";
    r += indent_string + "  " + std::string("txfifo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_sbe_) ) + "\n";
    all_zeros &= (0 == txfifo_sbe_);
    r += indent_string + "  " + std::string("txfifo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_mbe_) ) + "\n";
    all_zeros &= (0 == txfifo_mbe_);
    r += indent_string + "  " + std::string("statsmem_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(statsmem_sbe_) ) + "\n";
    all_zeros &= (0 == statsmem_sbe_);
    r += indent_string + "  " + std::string("statsmem_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(statsmem_mbe_) ) + "\n";
    all_zeros &= (0 == statsmem_mbe_);
    r += indent_string + "  " + std::string("tv80mem_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80mem_sbe_) ) + "\n";
    all_zeros &= (0 == tv80mem_sbe_);
    r += indent_string + "  " + std::string("tv80mem_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80mem_mbe_) ) + "\n";
    all_zeros &= (0 == tv80mem_mbe_);
    r += indent_string + "  " + std::string("mdioci_werr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mdioci_werr_) ) + "\n";
    all_zeros &= (0 == mdioci_werr_);
    r += indent_string + "  " + std::string("mdioci_rerr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mdioci_rerr_) ) + "\n";
    all_zeros &= (0 == mdioci_rerr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth100gRegRspecMemIntrFreezeEnable") + ":\n";
    r += indent_string + "  " + std::string("txfifo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_sbe_) ) + "\n";
    all_zeros &= (0 == txfifo_sbe_);
    r += indent_string + "  " + std::string("txfifo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_mbe_) ) + "\n";
    all_zeros &= (0 == txfifo_mbe_);
    r += indent_string + "  " + std::string("statsmem_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(statsmem_sbe_) ) + "\n";
    all_zeros &= (0 == statsmem_sbe_);
    r += indent_string + "  " + std::string("statsmem_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(statsmem_mbe_) ) + "\n";
    all_zeros &= (0 == statsmem_mbe_);
    r += indent_string + "  " + std::string("tv80mem_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80mem_sbe_) ) + "\n";
    all_zeros &= (0 == tv80mem_sbe_);
    r += indent_string + "  " + std::string("tv80mem_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80mem_mbe_) ) + "\n";
    all_zeros &= (0 == tv80mem_mbe_);
    r += indent_string + "  " + std::string("mdioci_werr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mdioci_werr_) ) + "\n";
    all_zeros &= (0 == mdioci_werr_);
    r += indent_string + "  " + std::string("mdioci_rerr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mdioci_rerr_) ) + "\n";
    all_zeros &= (0 == mdioci_rerr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t txfifo_sbe_;
  uint8_t txfifo_mbe_;
  uint8_t statsmem_sbe_;
  uint8_t statsmem_mbe_;
  uint8_t tv80mem_sbe_;
  uint8_t tv80mem_mbe_;
  uint8_t mdioci_werr_;
  uint8_t mdioci_rerr_;
private:
  static int StartOffset(
      JbayRegEnum selector_jbay_reg
      ) {
    int offset=0;
    switch (selector_jbay_reg) {
      case kEth100gRegs:
        offset += 0x2000000; // to get to eth100g_regs
        offset += 0x1fc00; // to get to eth100g_reg
        offset += 0x110; // to get to mem_intr_freeze_enable
        break;
      case kEth100gRegsRot:
        offset += 0x29c0000; // to get to eth100g_regs_rot
        offset += 0x1fc00; // to get to eth100g_reg
        offset += 0x110; // to get to mem_intr_freeze_enable
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_ETH100G_REG_RSPEC_MEM_INTR_FREEZE_ENABLE_H__
