/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH100G_REG_RSPEC_TV80_INTR_MUTABLE_H__
#define __REGISTER_INCLUDES_ETH100G_REG_RSPEC_TV80_INTR_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "eth100g_reg_rspec_tv80_intr_en0_mutable.h"
#include "eth100g_reg_rspec_tv80_intr_en1_mutable.h"
#include "eth100g_reg_rspec_tv80_intr_freeze_enable_mutable.h"
#include "eth100g_reg_rspec_tv80_intr_inj_mutable.h"
#include "eth100g_reg_rspec_tv80_intr_stat_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class Eth100gRegRspecTv80IntrMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum JbayRegEnum {
    kEth100gRegs,
    kEth100gRegsRot
  };
public:
  Eth100gRegRspecTv80IntrMutable(
      int chipNumber, JbayRegEnum selector_jbay_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_jbay_reg), 20, true, write_callback, read_callback, std::string("Eth100gRegRspecTv80IntrMutable")+":"+boost::lexical_cast<std::string>(selector_jbay_reg))
    {
    }
  Eth100gRegRspecTv80IntrMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "Eth100gRegRspecTv80IntrMutable")
    {
    }
public:






  Eth100gRegRspecTv80IntrStatMutable &tv80_intr_stat() { return tv80_intr_stat_; }







  Eth100gRegRspecTv80IntrEn0Mutable &tv80_intr_en0() { return tv80_intr_en0_; }







  Eth100gRegRspecTv80IntrEn1Mutable &tv80_intr_en1() { return tv80_intr_en1_; }








  Eth100gRegRspecTv80IntrInjMutable &tv80_intr_inj() { return tv80_intr_inj_; }





  Eth100gRegRspecTv80IntrFreezeEnableMutable &tv80_intr_freeze_enable() { return tv80_intr_freeze_enable_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x160 && offset < 0x164) {
      offset -= 0x160;
      if (read_callback_) read_callback_();
      tv80_intr_stat_.read( offset, data );
    }
    else if (offset >= 0x164 && offset < 0x168) {
      offset -= 0x164;
      if (read_callback_) read_callback_();
      tv80_intr_en0_.read( offset, data );
    }
    else if (offset >= 0x168 && offset < 0x16c) {
      offset -= 0x168;
      if (read_callback_) read_callback_();
      tv80_intr_en1_.read( offset, data );
    }
    else if (offset >= 0x16c && offset < 0x170) {
      offset -= 0x16c;
      if (read_callback_) read_callback_();
      tv80_intr_inj_.read( offset, data );
    }
    else if (offset >= 0x170 && offset < 0x174) {
      offset -= 0x170;
      if (read_callback_) read_callback_();
      tv80_intr_freeze_enable_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x160 && offset < 0x164) {
      offset -= 0x160;
      tv80_intr_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x164 && offset < 0x168) {
      offset -= 0x164;
      tv80_intr_en0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x168 && offset < 0x16c) {
      offset -= 0x168;
      tv80_intr_en1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x16c && offset < 0x170) {
      offset -= 0x16c;
      tv80_intr_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x170 && offset < 0x174) {
      offset -= 0x170;
      tv80_intr_freeze_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    tv80_intr_stat_.reset();
    tv80_intr_en0_.reset();
    tv80_intr_en1_.reset();
    tv80_intr_inj_.reset();
    tv80_intr_freeze_enable_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x160 && offset < 0x164) {
      offset -= 0x160;
      r += tv80_intr_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x164 && offset < 0x168) {
      offset -= 0x164;
      r += tv80_intr_en0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x168 && offset < 0x16c) {
      offset -= 0x168;
      r += tv80_intr_en1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x16c && offset < 0x170) {
      offset -= 0x16c;
      r += tv80_intr_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x170 && offset < 0x174) {
      offset -= 0x170;
      r += tv80_intr_freeze_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += tv80_intr_stat_.to_string(print_zeros,indent_string) ;
    r += tv80_intr_en0_.to_string(print_zeros,indent_string) ;
    r += tv80_intr_en1_.to_string(print_zeros,indent_string) ;
    r += tv80_intr_inj_.to_string(print_zeros,indent_string) ;
    r += tv80_intr_freeze_enable_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  Eth100gRegRspecTv80IntrStatMutable tv80_intr_stat_;
  Eth100gRegRspecTv80IntrEn0Mutable tv80_intr_en0_;
  Eth100gRegRspecTv80IntrEn1Mutable tv80_intr_en1_;
  Eth100gRegRspecTv80IntrInjMutable tv80_intr_inj_;
  Eth100gRegRspecTv80IntrFreezeEnableMutable tv80_intr_freeze_enable_;
private:
  static int StartOffset(
      JbayRegEnum selector_jbay_reg
      ) {
    int offset=0;
    switch (selector_jbay_reg) {
      case kEth100gRegs:
        offset += 0x2000000; // to get to eth100g_regs
        offset += 0x1fc00; // to get to eth100g_reg
        break;
      case kEth100gRegsRot:
        offset += 0x29c0000; // to get to eth100g_regs_rot
        offset += 0x1fc00; // to get to eth100g_reg
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_ETH100G_REG_RSPEC_TV80_INTR_MUTABLE_H__
