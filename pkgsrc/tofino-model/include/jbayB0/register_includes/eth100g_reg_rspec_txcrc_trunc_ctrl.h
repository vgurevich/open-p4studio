/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH100G_REG_RSPEC_TXCRC_TRUNC_CTRL_H__
#define __REGISTER_INCLUDES_ETH100G_REG_RSPEC_TXCRC_TRUNC_CTRL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class Eth100gRegRspecTxcrcTruncCtrl : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum JbayRegEnum {
    kEth100gRegs,
    kEth100gRegsRot
  };
public:
  Eth100gRegRspecTxcrcTruncCtrl(
      int chipNumber, JbayRegEnum selector_jbay_reg, int index_eth100g_reg_rspec_txcrc_trunc_ctrl, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_jbay_reg, index_eth100g_reg_rspec_txcrc_trunc_ctrl), 4, false, write_callback, read_callback, std::string("Eth100gRegRspecTxcrcTruncCtrl")+":"+boost::lexical_cast<std::string>(selector_jbay_reg) + "," + boost::lexical_cast<std::string>(index_eth100g_reg_rspec_txcrc_trunc_ctrl))
    {
    }
  Eth100gRegRspecTxcrcTruncCtrl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "Eth100gRegRspecTxcrcTruncCtrl")
    {
    }
public:






  uint8_t &crcchk_dis() { return crcchk_dis_; }






  uint8_t &crcerr_dis() { return crcerr_dis_; }







  uint8_t &crcrmv_dis() { return crcrmv_dis_; }





  uint8_t &trunc_ena() { return trunc_ena_; }






  uint16_t &trunc_size() { return trunc_size_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (crcchk_dis_ & 0x1);
    *data |= ((crcerr_dis_ & 0x1) << 1);
    *data |= ((crcrmv_dis_ & 0x1) << 2);
    *data |= ((trunc_ena_ & 0x1) << 3);
    *data |= ((trunc_size_ & 0x3fff) << 16);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    crcchk_dis_ = (data & 0x1);
    crcerr_dis_ = ((data >> 1) & 0x1);
    crcrmv_dis_ = ((data >> 2) & 0x1);
    trunc_ena_ = ((data >> 3) & 0x1);
    trunc_size_ = ((data >> 16) & 0x3fff);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    crcchk_dis_ = 0x0;
    crcerr_dis_ = 0x0;
    crcrmv_dis_ = 0x0;
    trunc_ena_ = 0x0;
    trunc_size_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth100gRegRspecTxcrcTruncCtrl") + ":\n";
    r += indent_string + "  " + std::string("crcchk_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcchk_dis_) ) + "\n";
    all_zeros &= (0 == crcchk_dis_);
    r += indent_string + "  " + std::string("crcerr_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcerr_dis_) ) + "\n";
    all_zeros &= (0 == crcerr_dis_);
    r += indent_string + "  " + std::string("crcrmv_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcrmv_dis_) ) + "\n";
    all_zeros &= (0 == crcrmv_dis_);
    r += indent_string + "  " + std::string("trunc_ena") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(trunc_ena_) ) + "\n";
    all_zeros &= (0 == trunc_ena_);
    r += indent_string + "  " + std::string("trunc_size") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(trunc_size_) ) + "\n";
    all_zeros &= (0 == trunc_size_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth100gRegRspecTxcrcTruncCtrl") + ":\n";
    r += indent_string + "  " + std::string("crcchk_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcchk_dis_) ) + "\n";
    all_zeros &= (0 == crcchk_dis_);
    r += indent_string + "  " + std::string("crcerr_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcerr_dis_) ) + "\n";
    all_zeros &= (0 == crcerr_dis_);
    r += indent_string + "  " + std::string("crcrmv_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcrmv_dis_) ) + "\n";
    all_zeros &= (0 == crcrmv_dis_);
    r += indent_string + "  " + std::string("trunc_ena") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(trunc_ena_) ) + "\n";
    all_zeros &= (0 == trunc_ena_);
    r += indent_string + "  " + std::string("trunc_size") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(trunc_size_) ) + "\n";
    all_zeros &= (0 == trunc_size_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t crcchk_dis_;
  uint8_t crcerr_dis_;
  uint8_t crcrmv_dis_;
  uint8_t trunc_ena_;
  uint16_t trunc_size_;
private:
  static int StartOffset(
      JbayRegEnum selector_jbay_reg, int index_eth100g_reg_rspec_txcrc_trunc_ctrl
      ) {
    int offset=0;
    switch (selector_jbay_reg) {
      case kEth100gRegs:
        offset += 0x2000000; // to get to eth100g_regs
        offset += 0x1fc00; // to get to eth100g_reg
        offset += 0x90; // to get to txcrc_trunc_ctrl
        assert(index_eth100g_reg_rspec_txcrc_trunc_ctrl < 4);
        offset += index_eth100g_reg_rspec_txcrc_trunc_ctrl * 0x4; // eth100g_reg_rspec_txcrc_trunc_ctrl[]
        break;
      case kEth100gRegsRot:
        offset += 0x29c0000; // to get to eth100g_regs_rot
        offset += 0x1fc00; // to get to eth100g_reg
        offset += 0x90; // to get to txcrc_trunc_ctrl
        assert(index_eth100g_reg_rspec_txcrc_trunc_ctrl < 4);
        offset += index_eth100g_reg_rspec_txcrc_trunc_ctrl * 0x4; // eth100g_reg_rspec_txcrc_trunc_ctrl[]
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_ETH100G_REG_RSPEC_TXCRC_TRUNC_CTRL_H__
