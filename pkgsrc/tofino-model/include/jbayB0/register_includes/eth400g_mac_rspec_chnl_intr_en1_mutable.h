/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH400G_MAC_RSPEC_CHNL_INTR_EN1_MUTABLE_H__
#define __REGISTER_INCLUDES_ETH400G_MAC_RSPEC_CHNL_INTR_EN1_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class Eth400gMacRspecChnlIntrEn1Mutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum JbayRegEnum {
    kEth400gP1,
    kEth400gP10,
    kEth400gP11,
    kEth400gP12,
    kEth400gP13,
    kEth400gP14,
    kEth400gP15,
    kEth400gP16,
    kEth400gP17,
    kEth400gP18,
    kEth400gP19,
    kEth400gP2,
    kEth400gP20,
    kEth400gP21,
    kEth400gP22,
    kEth400gP23,
    kEth400gP24,
    kEth400gP25,
    kEth400gP26,
    kEth400gP27,
    kEth400gP28,
    kEth400gP29,
    kEth400gP3,
    kEth400gP30,
    kEth400gP31,
    kEth400gP32,
    kEth400gP4,
    kEth400gP5,
    kEth400gP6,
    kEth400gP7,
    kEth400gP8,
    kEth400gP9
  };
public:
  Eth400gMacRspecChnlIntrEn1Mutable(
      int chipNumber, JbayRegEnum selector_jbay_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_jbay_reg), 4, true, write_callback, read_callback, std::string("Eth400gMacRspecChnlIntrEn1Mutable")+":"+boost::lexical_cast<std::string>(selector_jbay_reg))
    {
    }
  Eth400gMacRspecChnlIntrEn1Mutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "Eth400gMacRspecChnlIntrEn1Mutable")
    {
    }
public:
  uint8_t rxcrc_err0() { return rxcrc_err0_; }
  void rxcrc_err0(const uint8_t &v) { rxcrc_err0_=v; }
  uint8_t rxcrc_err1() { return rxcrc_err1_; }
  void rxcrc_err1(const uint8_t &v) { rxcrc_err1_=v; }
  uint8_t rxcrc_err2() { return rxcrc_err2_; }
  void rxcrc_err2(const uint8_t &v) { rxcrc_err2_=v; }
  uint8_t rxcrc_err3() { return rxcrc_err3_; }
  void rxcrc_err3(const uint8_t &v) { rxcrc_err3_=v; }
  uint8_t rxcrc_err4() { return rxcrc_err4_; }
  void rxcrc_err4(const uint8_t &v) { rxcrc_err4_=v; }
  uint8_t rxcrc_err5() { return rxcrc_err5_; }
  void rxcrc_err5(const uint8_t &v) { rxcrc_err5_=v; }
  uint8_t rxcrc_err6() { return rxcrc_err6_; }
  void rxcrc_err6(const uint8_t &v) { rxcrc_err6_=v; }
  uint8_t rxcrc_err7() { return rxcrc_err7_; }
  void rxcrc_err7(const uint8_t &v) { rxcrc_err7_=v; }
  uint8_t txcrc_err0() { return txcrc_err0_; }
  void txcrc_err0(const uint8_t &v) { txcrc_err0_=v; }
  uint8_t txcrc_err1() { return txcrc_err1_; }
  void txcrc_err1(const uint8_t &v) { txcrc_err1_=v; }
  uint8_t txcrc_err2() { return txcrc_err2_; }
  void txcrc_err2(const uint8_t &v) { txcrc_err2_=v; }
  uint8_t txcrc_err3() { return txcrc_err3_; }
  void txcrc_err3(const uint8_t &v) { txcrc_err3_=v; }
  uint8_t txcrc_err4() { return txcrc_err4_; }
  void txcrc_err4(const uint8_t &v) { txcrc_err4_=v; }
  uint8_t txcrc_err5() { return txcrc_err5_; }
  void txcrc_err5(const uint8_t &v) { txcrc_err5_=v; }
  uint8_t txcrc_err6() { return txcrc_err6_; }
  void txcrc_err6(const uint8_t &v) { txcrc_err6_=v; }
  uint8_t txcrc_err7() { return txcrc_err7_; }
  void txcrc_err7(const uint8_t &v) { txcrc_err7_=v; }
  uint8_t txfifo_ovf0() { return txfifo_ovf0_; }
  void txfifo_ovf0(const uint8_t &v) { txfifo_ovf0_=v; }
  uint8_t txfifo_ovf1() { return txfifo_ovf1_; }
  void txfifo_ovf1(const uint8_t &v) { txfifo_ovf1_=v; }
  uint8_t txfifo_ovf2() { return txfifo_ovf2_; }
  void txfifo_ovf2(const uint8_t &v) { txfifo_ovf2_=v; }
  uint8_t txfifo_ovf3() { return txfifo_ovf3_; }
  void txfifo_ovf3(const uint8_t &v) { txfifo_ovf3_=v; }
  uint8_t txfifo_ovf4() { return txfifo_ovf4_; }
  void txfifo_ovf4(const uint8_t &v) { txfifo_ovf4_=v; }
  uint8_t txfifo_ovf5() { return txfifo_ovf5_; }
  void txfifo_ovf5(const uint8_t &v) { txfifo_ovf5_=v; }
  uint8_t txfifo_ovf6() { return txfifo_ovf6_; }
  void txfifo_ovf6(const uint8_t &v) { txfifo_ovf6_=v; }
  uint8_t txfifo_ovf7() { return txfifo_ovf7_; }
  void txfifo_ovf7(const uint8_t &v) { txfifo_ovf7_=v; }
  uint8_t rxeop_timo0() { return rxeop_timo0_; }
  void rxeop_timo0(const uint8_t &v) { rxeop_timo0_=v; }
  uint8_t rxeop_timo1() { return rxeop_timo1_; }
  void rxeop_timo1(const uint8_t &v) { rxeop_timo1_=v; }
  uint8_t rxeop_timo2() { return rxeop_timo2_; }
  void rxeop_timo2(const uint8_t &v) { rxeop_timo2_=v; }
  uint8_t rxeop_timo3() { return rxeop_timo3_; }
  void rxeop_timo3(const uint8_t &v) { rxeop_timo3_=v; }
  uint8_t rxeop_timo4() { return rxeop_timo4_; }
  void rxeop_timo4(const uint8_t &v) { rxeop_timo4_=v; }
  uint8_t rxeop_timo5() { return rxeop_timo5_; }
  void rxeop_timo5(const uint8_t &v) { rxeop_timo5_=v; }
  uint8_t rxeop_timo6() { return rxeop_timo6_; }
  void rxeop_timo6(const uint8_t &v) { rxeop_timo6_=v; }
  uint8_t rxeop_timo7() { return rxeop_timo7_; }
  void rxeop_timo7(const uint8_t &v) { rxeop_timo7_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (rxcrc_err0_ & 0x1);
    *data |= ((rxcrc_err1_ & 0x1) << 1);
    *data |= ((rxcrc_err2_ & 0x1) << 2);
    *data |= ((rxcrc_err3_ & 0x1) << 3);
    *data |= ((rxcrc_err4_ & 0x1) << 4);
    *data |= ((rxcrc_err5_ & 0x1) << 5);
    *data |= ((rxcrc_err6_ & 0x1) << 6);
    *data |= ((rxcrc_err7_ & 0x1) << 7);
    *data |= ((txcrc_err0_ & 0x1) << 8);
    *data |= ((txcrc_err1_ & 0x1) << 9);
    *data |= ((txcrc_err2_ & 0x1) << 10);
    *data |= ((txcrc_err3_ & 0x1) << 11);
    *data |= ((txcrc_err4_ & 0x1) << 12);
    *data |= ((txcrc_err5_ & 0x1) << 13);
    *data |= ((txcrc_err6_ & 0x1) << 14);
    *data |= ((txcrc_err7_ & 0x1) << 15);
    *data |= ((txfifo_ovf0_ & 0x1) << 16);
    *data |= ((txfifo_ovf1_ & 0x1) << 17);
    *data |= ((txfifo_ovf2_ & 0x1) << 18);
    *data |= ((txfifo_ovf3_ & 0x1) << 19);
    *data |= ((txfifo_ovf4_ & 0x1) << 20);
    *data |= ((txfifo_ovf5_ & 0x1) << 21);
    *data |= ((txfifo_ovf6_ & 0x1) << 22);
    *data |= ((txfifo_ovf7_ & 0x1) << 23);
    *data |= ((rxeop_timo0_ & 0x1) << 24);
    *data |= ((rxeop_timo1_ & 0x1) << 25);
    *data |= ((rxeop_timo2_ & 0x1) << 26);
    *data |= ((rxeop_timo3_ & 0x1) << 27);
    *data |= ((rxeop_timo4_ & 0x1) << 28);
    *data |= ((rxeop_timo5_ & 0x1) << 29);
    *data |= ((rxeop_timo6_ & 0x1) << 30);
    *data |= ((rxeop_timo7_ & 0x1) << 31);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    rxcrc_err0_ = (data & 0x1);
    rxcrc_err1_ = ((data >> 1) & 0x1);
    rxcrc_err2_ = ((data >> 2) & 0x1);
    rxcrc_err3_ = ((data >> 3) & 0x1);
    rxcrc_err4_ = ((data >> 4) & 0x1);
    rxcrc_err5_ = ((data >> 5) & 0x1);
    rxcrc_err6_ = ((data >> 6) & 0x1);
    rxcrc_err7_ = ((data >> 7) & 0x1);
    txcrc_err0_ = ((data >> 8) & 0x1);
    txcrc_err1_ = ((data >> 9) & 0x1);
    txcrc_err2_ = ((data >> 10) & 0x1);
    txcrc_err3_ = ((data >> 11) & 0x1);
    txcrc_err4_ = ((data >> 12) & 0x1);
    txcrc_err5_ = ((data >> 13) & 0x1);
    txcrc_err6_ = ((data >> 14) & 0x1);
    txcrc_err7_ = ((data >> 15) & 0x1);
    txfifo_ovf0_ = ((data >> 16) & 0x1);
    txfifo_ovf1_ = ((data >> 17) & 0x1);
    txfifo_ovf2_ = ((data >> 18) & 0x1);
    txfifo_ovf3_ = ((data >> 19) & 0x1);
    txfifo_ovf4_ = ((data >> 20) & 0x1);
    txfifo_ovf5_ = ((data >> 21) & 0x1);
    txfifo_ovf6_ = ((data >> 22) & 0x1);
    txfifo_ovf7_ = ((data >> 23) & 0x1);
    rxeop_timo0_ = ((data >> 24) & 0x1);
    rxeop_timo1_ = ((data >> 25) & 0x1);
    rxeop_timo2_ = ((data >> 26) & 0x1);
    rxeop_timo3_ = ((data >> 27) & 0x1);
    rxeop_timo4_ = ((data >> 28) & 0x1);
    rxeop_timo5_ = ((data >> 29) & 0x1);
    rxeop_timo6_ = ((data >> 30) & 0x1);
    rxeop_timo7_ = ((data >> 31) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    rxcrc_err0_ = 0x0;
    rxcrc_err1_ = 0x0;
    rxcrc_err2_ = 0x0;
    rxcrc_err3_ = 0x0;
    rxcrc_err4_ = 0x0;
    rxcrc_err5_ = 0x0;
    rxcrc_err6_ = 0x0;
    rxcrc_err7_ = 0x0;
    txcrc_err0_ = 0x0;
    txcrc_err1_ = 0x0;
    txcrc_err2_ = 0x0;
    txcrc_err3_ = 0x0;
    txcrc_err4_ = 0x0;
    txcrc_err5_ = 0x0;
    txcrc_err6_ = 0x0;
    txcrc_err7_ = 0x0;
    txfifo_ovf0_ = 0x0;
    txfifo_ovf1_ = 0x0;
    txfifo_ovf2_ = 0x0;
    txfifo_ovf3_ = 0x0;
    txfifo_ovf4_ = 0x0;
    txfifo_ovf5_ = 0x0;
    txfifo_ovf6_ = 0x0;
    txfifo_ovf7_ = 0x0;
    rxeop_timo0_ = 0x0;
    rxeop_timo1_ = 0x0;
    rxeop_timo2_ = 0x0;
    rxeop_timo3_ = 0x0;
    rxeop_timo4_ = 0x0;
    rxeop_timo5_ = 0x0;
    rxeop_timo6_ = 0x0;
    rxeop_timo7_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth400gMacRspecChnlIntrEn1Mutable") + ":\n";
    r += indent_string + "  " + std::string("rxcrc_err0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err0_) ) + "\n";
    all_zeros &= (0 == rxcrc_err0_);
    r += indent_string + "  " + std::string("rxcrc_err1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err1_) ) + "\n";
    all_zeros &= (0 == rxcrc_err1_);
    r += indent_string + "  " + std::string("rxcrc_err2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err2_) ) + "\n";
    all_zeros &= (0 == rxcrc_err2_);
    r += indent_string + "  " + std::string("rxcrc_err3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err3_) ) + "\n";
    all_zeros &= (0 == rxcrc_err3_);
    r += indent_string + "  " + std::string("rxcrc_err4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err4_) ) + "\n";
    all_zeros &= (0 == rxcrc_err4_);
    r += indent_string + "  " + std::string("rxcrc_err5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err5_) ) + "\n";
    all_zeros &= (0 == rxcrc_err5_);
    r += indent_string + "  " + std::string("rxcrc_err6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err6_) ) + "\n";
    all_zeros &= (0 == rxcrc_err6_);
    r += indent_string + "  " + std::string("rxcrc_err7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err7_) ) + "\n";
    all_zeros &= (0 == rxcrc_err7_);
    r += indent_string + "  " + std::string("txcrc_err0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err0_) ) + "\n";
    all_zeros &= (0 == txcrc_err0_);
    r += indent_string + "  " + std::string("txcrc_err1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err1_) ) + "\n";
    all_zeros &= (0 == txcrc_err1_);
    r += indent_string + "  " + std::string("txcrc_err2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err2_) ) + "\n";
    all_zeros &= (0 == txcrc_err2_);
    r += indent_string + "  " + std::string("txcrc_err3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err3_) ) + "\n";
    all_zeros &= (0 == txcrc_err3_);
    r += indent_string + "  " + std::string("txcrc_err4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err4_) ) + "\n";
    all_zeros &= (0 == txcrc_err4_);
    r += indent_string + "  " + std::string("txcrc_err5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err5_) ) + "\n";
    all_zeros &= (0 == txcrc_err5_);
    r += indent_string + "  " + std::string("txcrc_err6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err6_) ) + "\n";
    all_zeros &= (0 == txcrc_err6_);
    r += indent_string + "  " + std::string("txcrc_err7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err7_) ) + "\n";
    all_zeros &= (0 == txcrc_err7_);
    r += indent_string + "  " + std::string("txfifo_ovf0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf0_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf0_);
    r += indent_string + "  " + std::string("txfifo_ovf1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf1_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf1_);
    r += indent_string + "  " + std::string("txfifo_ovf2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf2_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf2_);
    r += indent_string + "  " + std::string("txfifo_ovf3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf3_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf3_);
    r += indent_string + "  " + std::string("txfifo_ovf4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf4_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf4_);
    r += indent_string + "  " + std::string("txfifo_ovf5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf5_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf5_);
    r += indent_string + "  " + std::string("txfifo_ovf6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf6_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf6_);
    r += indent_string + "  " + std::string("txfifo_ovf7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf7_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf7_);
    r += indent_string + "  " + std::string("rxeop_timo0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo0_) ) + "\n";
    all_zeros &= (0 == rxeop_timo0_);
    r += indent_string + "  " + std::string("rxeop_timo1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo1_) ) + "\n";
    all_zeros &= (0 == rxeop_timo1_);
    r += indent_string + "  " + std::string("rxeop_timo2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo2_) ) + "\n";
    all_zeros &= (0 == rxeop_timo2_);
    r += indent_string + "  " + std::string("rxeop_timo3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo3_) ) + "\n";
    all_zeros &= (0 == rxeop_timo3_);
    r += indent_string + "  " + std::string("rxeop_timo4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo4_) ) + "\n";
    all_zeros &= (0 == rxeop_timo4_);
    r += indent_string + "  " + std::string("rxeop_timo5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo5_) ) + "\n";
    all_zeros &= (0 == rxeop_timo5_);
    r += indent_string + "  " + std::string("rxeop_timo6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo6_) ) + "\n";
    all_zeros &= (0 == rxeop_timo6_);
    r += indent_string + "  " + std::string("rxeop_timo7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo7_) ) + "\n";
    all_zeros &= (0 == rxeop_timo7_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth400gMacRspecChnlIntrEn1Mutable") + ":\n";
    r += indent_string + "  " + std::string("rxcrc_err0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err0_) ) + "\n";
    all_zeros &= (0 == rxcrc_err0_);
    r += indent_string + "  " + std::string("rxcrc_err1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err1_) ) + "\n";
    all_zeros &= (0 == rxcrc_err1_);
    r += indent_string + "  " + std::string("rxcrc_err2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err2_) ) + "\n";
    all_zeros &= (0 == rxcrc_err2_);
    r += indent_string + "  " + std::string("rxcrc_err3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err3_) ) + "\n";
    all_zeros &= (0 == rxcrc_err3_);
    r += indent_string + "  " + std::string("rxcrc_err4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err4_) ) + "\n";
    all_zeros &= (0 == rxcrc_err4_);
    r += indent_string + "  " + std::string("rxcrc_err5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err5_) ) + "\n";
    all_zeros &= (0 == rxcrc_err5_);
    r += indent_string + "  " + std::string("rxcrc_err6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err6_) ) + "\n";
    all_zeros &= (0 == rxcrc_err6_);
    r += indent_string + "  " + std::string("rxcrc_err7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcrc_err7_) ) + "\n";
    all_zeros &= (0 == rxcrc_err7_);
    r += indent_string + "  " + std::string("txcrc_err0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err0_) ) + "\n";
    all_zeros &= (0 == txcrc_err0_);
    r += indent_string + "  " + std::string("txcrc_err1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err1_) ) + "\n";
    all_zeros &= (0 == txcrc_err1_);
    r += indent_string + "  " + std::string("txcrc_err2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err2_) ) + "\n";
    all_zeros &= (0 == txcrc_err2_);
    r += indent_string + "  " + std::string("txcrc_err3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err3_) ) + "\n";
    all_zeros &= (0 == txcrc_err3_);
    r += indent_string + "  " + std::string("txcrc_err4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err4_) ) + "\n";
    all_zeros &= (0 == txcrc_err4_);
    r += indent_string + "  " + std::string("txcrc_err5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err5_) ) + "\n";
    all_zeros &= (0 == txcrc_err5_);
    r += indent_string + "  " + std::string("txcrc_err6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err6_) ) + "\n";
    all_zeros &= (0 == txcrc_err6_);
    r += indent_string + "  " + std::string("txcrc_err7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txcrc_err7_) ) + "\n";
    all_zeros &= (0 == txcrc_err7_);
    r += indent_string + "  " + std::string("txfifo_ovf0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf0_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf0_);
    r += indent_string + "  " + std::string("txfifo_ovf1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf1_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf1_);
    r += indent_string + "  " + std::string("txfifo_ovf2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf2_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf2_);
    r += indent_string + "  " + std::string("txfifo_ovf3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf3_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf3_);
    r += indent_string + "  " + std::string("txfifo_ovf4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf4_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf4_);
    r += indent_string + "  " + std::string("txfifo_ovf5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf5_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf5_);
    r += indent_string + "  " + std::string("txfifo_ovf6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf6_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf6_);
    r += indent_string + "  " + std::string("txfifo_ovf7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_ovf7_) ) + "\n";
    all_zeros &= (0 == txfifo_ovf7_);
    r += indent_string + "  " + std::string("rxeop_timo0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo0_) ) + "\n";
    all_zeros &= (0 == rxeop_timo0_);
    r += indent_string + "  " + std::string("rxeop_timo1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo1_) ) + "\n";
    all_zeros &= (0 == rxeop_timo1_);
    r += indent_string + "  " + std::string("rxeop_timo2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo2_) ) + "\n";
    all_zeros &= (0 == rxeop_timo2_);
    r += indent_string + "  " + std::string("rxeop_timo3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo3_) ) + "\n";
    all_zeros &= (0 == rxeop_timo3_);
    r += indent_string + "  " + std::string("rxeop_timo4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo4_) ) + "\n";
    all_zeros &= (0 == rxeop_timo4_);
    r += indent_string + "  " + std::string("rxeop_timo5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo5_) ) + "\n";
    all_zeros &= (0 == rxeop_timo5_);
    r += indent_string + "  " + std::string("rxeop_timo6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo6_) ) + "\n";
    all_zeros &= (0 == rxeop_timo6_);
    r += indent_string + "  " + std::string("rxeop_timo7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxeop_timo7_) ) + "\n";
    all_zeros &= (0 == rxeop_timo7_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t rxcrc_err0_;
  uint8_t rxcrc_err1_;
  uint8_t rxcrc_err2_;
  uint8_t rxcrc_err3_;
  uint8_t rxcrc_err4_;
  uint8_t rxcrc_err5_;
  uint8_t rxcrc_err6_;
  uint8_t rxcrc_err7_;
  uint8_t txcrc_err0_;
  uint8_t txcrc_err1_;
  uint8_t txcrc_err2_;
  uint8_t txcrc_err3_;
  uint8_t txcrc_err4_;
  uint8_t txcrc_err5_;
  uint8_t txcrc_err6_;
  uint8_t txcrc_err7_;
  uint8_t txfifo_ovf0_;
  uint8_t txfifo_ovf1_;
  uint8_t txfifo_ovf2_;
  uint8_t txfifo_ovf3_;
  uint8_t txfifo_ovf4_;
  uint8_t txfifo_ovf5_;
  uint8_t txfifo_ovf6_;
  uint8_t txfifo_ovf7_;
  uint8_t rxeop_timo0_;
  uint8_t rxeop_timo1_;
  uint8_t rxeop_timo2_;
  uint8_t rxeop_timo3_;
  uint8_t rxeop_timo4_;
  uint8_t rxeop_timo5_;
  uint8_t rxeop_timo6_;
  uint8_t rxeop_timo7_;
private:
  static int StartOffset(
      JbayRegEnum selector_jbay_reg
      ) {
    int offset=0;
    switch (selector_jbay_reg) {
      case kEth400gP1:
        offset += 0x2040000; // to get to eth400g_p1
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP10:
        offset += 0x2280000; // to get to eth400g_p10
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP11:
        offset += 0x22c0000; // to get to eth400g_p11
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP12:
        offset += 0x2300000; // to get to eth400g_p12
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP13:
        offset += 0x2340000; // to get to eth400g_p13
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP14:
        offset += 0x2380000; // to get to eth400g_p14
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP15:
        offset += 0x23c0000; // to get to eth400g_p15
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP16:
        offset += 0x2400000; // to get to eth400g_p16
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP17:
        offset += 0x2440000; // to get to eth400g_p17
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP18:
        offset += 0x2480000; // to get to eth400g_p18
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP19:
        offset += 0x24c0000; // to get to eth400g_p19
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP2:
        offset += 0x2080000; // to get to eth400g_p2
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP20:
        offset += 0x2500000; // to get to eth400g_p20
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP21:
        offset += 0x2540000; // to get to eth400g_p21
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP22:
        offset += 0x2580000; // to get to eth400g_p22
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP23:
        offset += 0x25c0000; // to get to eth400g_p23
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP24:
        offset += 0x2600000; // to get to eth400g_p24
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP25:
        offset += 0x2640000; // to get to eth400g_p25
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP26:
        offset += 0x2680000; // to get to eth400g_p26
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP27:
        offset += 0x26c0000; // to get to eth400g_p27
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP28:
        offset += 0x2700000; // to get to eth400g_p28
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP29:
        offset += 0x2740000; // to get to eth400g_p29
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP3:
        offset += 0x20c0000; // to get to eth400g_p3
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP30:
        offset += 0x2780000; // to get to eth400g_p30
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP31:
        offset += 0x27c0000; // to get to eth400g_p31
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP32:
        offset += 0x2800000; // to get to eth400g_p32
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP4:
        offset += 0x2100000; // to get to eth400g_p4
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP5:
        offset += 0x2140000; // to get to eth400g_p5
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP6:
        offset += 0x2180000; // to get to eth400g_p6
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP7:
        offset += 0x21c0000; // to get to eth400g_p7
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP8:
        offset += 0x2200000; // to get to eth400g_p8
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      case kEth400gP9:
        offset += 0x2240000; // to get to eth400g_p9
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1a8; // to get to chnl_intr_en1
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_ETH400G_MAC_RSPEC_CHNL_INTR_EN1_MUTABLE_H__
