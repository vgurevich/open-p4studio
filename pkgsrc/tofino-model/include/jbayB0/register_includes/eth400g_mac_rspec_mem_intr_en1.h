/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH400G_MAC_RSPEC_MEM_INTR_EN1_H__
#define __REGISTER_INCLUDES_ETH400G_MAC_RSPEC_MEM_INTR_EN1_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class Eth400gMacRspecMemIntrEn1 : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum JbayRegEnum {
    kEth400gP1,
    kEth400gP10,
    kEth400gP11,
    kEth400gP12,
    kEth400gP13,
    kEth400gP14,
    kEth400gP15,
    kEth400gP16,
    kEth400gP17,
    kEth400gP18,
    kEth400gP19,
    kEth400gP2,
    kEth400gP20,
    kEth400gP21,
    kEth400gP22,
    kEth400gP23,
    kEth400gP24,
    kEth400gP25,
    kEth400gP26,
    kEth400gP27,
    kEth400gP28,
    kEth400gP29,
    kEth400gP3,
    kEth400gP30,
    kEth400gP31,
    kEth400gP32,
    kEth400gP4,
    kEth400gP5,
    kEth400gP6,
    kEth400gP7,
    kEth400gP8,
    kEth400gP9
  };
public:
  Eth400gMacRspecMemIntrEn1(
      int chipNumber, JbayRegEnum selector_jbay_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_jbay_reg), 4, false, write_callback, read_callback, std::string("Eth400gMacRspecMemIntrEn1")+":"+boost::lexical_cast<std::string>(selector_jbay_reg))
    {
    }
  Eth400gMacRspecMemIntrEn1(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "Eth400gMacRspecMemIntrEn1")
    {
    }
public:
  uint8_t &txfifo_sbe() { return txfifo_sbe_; }
  uint8_t &txfifo_mbe() { return txfifo_mbe_; }
  uint8_t &txappfifo_sbe() { return txappfifo_sbe_; }
  uint8_t &txappfifo_mbe() { return txappfifo_mbe_; }
  uint8_t &rxappfifo_sbe() { return rxappfifo_sbe_; }
  uint8_t &rxappfifo_mbe() { return rxappfifo_mbe_; }
  uint8_t &statsmem_sbe() { return statsmem_sbe_; }
  uint8_t &statsmem_mbe() { return statsmem_mbe_; }
  uint8_t &tv80mem_sbe() { return tv80mem_sbe_; }
  uint8_t &tv80mem_mbe() { return tv80mem_mbe_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (txfifo_sbe_ & 0x1);
    *data |= ((txfifo_mbe_ & 0x1) << 1);
    *data |= ((txappfifo_sbe_ & 0x1) << 2);
    *data |= ((txappfifo_mbe_ & 0x1) << 3);
    *data |= ((rxappfifo_sbe_ & 0x1) << 4);
    *data |= ((rxappfifo_mbe_ & 0x1) << 5);
    *data |= ((statsmem_sbe_ & 0x1) << 6);
    *data |= ((statsmem_mbe_ & 0x1) << 7);
    *data |= ((tv80mem_sbe_ & 0x1) << 8);
    *data |= ((tv80mem_mbe_ & 0x1) << 9);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    txfifo_sbe_ = (data & 0x1);
    txfifo_mbe_ = ((data >> 1) & 0x1);
    txappfifo_sbe_ = ((data >> 2) & 0x1);
    txappfifo_mbe_ = ((data >> 3) & 0x1);
    rxappfifo_sbe_ = ((data >> 4) & 0x1);
    rxappfifo_mbe_ = ((data >> 5) & 0x1);
    statsmem_sbe_ = ((data >> 6) & 0x1);
    statsmem_mbe_ = ((data >> 7) & 0x1);
    tv80mem_sbe_ = ((data >> 8) & 0x1);
    tv80mem_mbe_ = ((data >> 9) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    txfifo_sbe_ = 0x0;
    txfifo_mbe_ = 0x0;
    txappfifo_sbe_ = 0x0;
    txappfifo_mbe_ = 0x0;
    rxappfifo_sbe_ = 0x0;
    rxappfifo_mbe_ = 0x0;
    statsmem_sbe_ = 0x0;
    statsmem_mbe_ = 0x0;
    tv80mem_sbe_ = 0x0;
    tv80mem_mbe_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth400gMacRspecMemIntrEn1") + ":\n";
    r += indent_string + "  " + std::string("txfifo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_sbe_) ) + "\n";
    all_zeros &= (0 == txfifo_sbe_);
    r += indent_string + "  " + std::string("txfifo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_mbe_) ) + "\n";
    all_zeros &= (0 == txfifo_mbe_);
    r += indent_string + "  " + std::string("txappfifo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txappfifo_sbe_) ) + "\n";
    all_zeros &= (0 == txappfifo_sbe_);
    r += indent_string + "  " + std::string("txappfifo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txappfifo_mbe_) ) + "\n";
    all_zeros &= (0 == txappfifo_mbe_);
    r += indent_string + "  " + std::string("rxappfifo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxappfifo_sbe_) ) + "\n";
    all_zeros &= (0 == rxappfifo_sbe_);
    r += indent_string + "  " + std::string("rxappfifo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxappfifo_mbe_) ) + "\n";
    all_zeros &= (0 == rxappfifo_mbe_);
    r += indent_string + "  " + std::string("statsmem_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(statsmem_sbe_) ) + "\n";
    all_zeros &= (0 == statsmem_sbe_);
    r += indent_string + "  " + std::string("statsmem_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(statsmem_mbe_) ) + "\n";
    all_zeros &= (0 == statsmem_mbe_);
    r += indent_string + "  " + std::string("tv80mem_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80mem_sbe_) ) + "\n";
    all_zeros &= (0 == tv80mem_sbe_);
    r += indent_string + "  " + std::string("tv80mem_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80mem_mbe_) ) + "\n";
    all_zeros &= (0 == tv80mem_mbe_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("Eth400gMacRspecMemIntrEn1") + ":\n";
    r += indent_string + "  " + std::string("txfifo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_sbe_) ) + "\n";
    all_zeros &= (0 == txfifo_sbe_);
    r += indent_string + "  " + std::string("txfifo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txfifo_mbe_) ) + "\n";
    all_zeros &= (0 == txfifo_mbe_);
    r += indent_string + "  " + std::string("txappfifo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txappfifo_sbe_) ) + "\n";
    all_zeros &= (0 == txappfifo_sbe_);
    r += indent_string + "  " + std::string("txappfifo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txappfifo_mbe_) ) + "\n";
    all_zeros &= (0 == txappfifo_mbe_);
    r += indent_string + "  " + std::string("rxappfifo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxappfifo_sbe_) ) + "\n";
    all_zeros &= (0 == rxappfifo_sbe_);
    r += indent_string + "  " + std::string("rxappfifo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxappfifo_mbe_) ) + "\n";
    all_zeros &= (0 == rxappfifo_mbe_);
    r += indent_string + "  " + std::string("statsmem_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(statsmem_sbe_) ) + "\n";
    all_zeros &= (0 == statsmem_sbe_);
    r += indent_string + "  " + std::string("statsmem_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(statsmem_mbe_) ) + "\n";
    all_zeros &= (0 == statsmem_mbe_);
    r += indent_string + "  " + std::string("tv80mem_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80mem_sbe_) ) + "\n";
    all_zeros &= (0 == tv80mem_sbe_);
    r += indent_string + "  " + std::string("tv80mem_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80mem_mbe_) ) + "\n";
    all_zeros &= (0 == tv80mem_mbe_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t txfifo_sbe_;
  uint8_t txfifo_mbe_;
  uint8_t txappfifo_sbe_;
  uint8_t txappfifo_mbe_;
  uint8_t rxappfifo_sbe_;
  uint8_t rxappfifo_mbe_;
  uint8_t statsmem_sbe_;
  uint8_t statsmem_mbe_;
  uint8_t tv80mem_sbe_;
  uint8_t tv80mem_mbe_;
private:
  static int StartOffset(
      JbayRegEnum selector_jbay_reg
      ) {
    int offset=0;
    switch (selector_jbay_reg) {
      case kEth400gP1:
        offset += 0x2040000; // to get to eth400g_p1
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP10:
        offset += 0x2280000; // to get to eth400g_p10
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP11:
        offset += 0x22c0000; // to get to eth400g_p11
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP12:
        offset += 0x2300000; // to get to eth400g_p12
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP13:
        offset += 0x2340000; // to get to eth400g_p13
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP14:
        offset += 0x2380000; // to get to eth400g_p14
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP15:
        offset += 0x23c0000; // to get to eth400g_p15
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP16:
        offset += 0x2400000; // to get to eth400g_p16
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP17:
        offset += 0x2440000; // to get to eth400g_p17
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP18:
        offset += 0x2480000; // to get to eth400g_p18
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP19:
        offset += 0x24c0000; // to get to eth400g_p19
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP2:
        offset += 0x2080000; // to get to eth400g_p2
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP20:
        offset += 0x2500000; // to get to eth400g_p20
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP21:
        offset += 0x2540000; // to get to eth400g_p21
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP22:
        offset += 0x2580000; // to get to eth400g_p22
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP23:
        offset += 0x25c0000; // to get to eth400g_p23
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP24:
        offset += 0x2600000; // to get to eth400g_p24
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP25:
        offset += 0x2640000; // to get to eth400g_p25
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP26:
        offset += 0x2680000; // to get to eth400g_p26
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP27:
        offset += 0x26c0000; // to get to eth400g_p27
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP28:
        offset += 0x2700000; // to get to eth400g_p28
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP29:
        offset += 0x2740000; // to get to eth400g_p29
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP3:
        offset += 0x20c0000; // to get to eth400g_p3
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP30:
        offset += 0x2780000; // to get to eth400g_p30
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP31:
        offset += 0x27c0000; // to get to eth400g_p31
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP32:
        offset += 0x2800000; // to get to eth400g_p32
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP4:
        offset += 0x2100000; // to get to eth400g_p4
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP5:
        offset += 0x2140000; // to get to eth400g_p5
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP6:
        offset += 0x2180000; // to get to eth400g_p6
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP7:
        offset += 0x21c0000; // to get to eth400g_p7
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP8:
        offset += 0x2200000; // to get to eth400g_p8
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      case kEth400gP9:
        offset += 0x2240000; // to get to eth400g_p9
        offset += 0x10000; // to get to eth400g_mac
        offset += 0x1e8; // to get to mem_intr_en1
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_ETH400G_MAC_RSPEC_MEM_INTR_EN1_H__
