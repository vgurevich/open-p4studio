/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH400G_PCS_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_ETH400G_PCS_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "eth400g_pcs_rspec_deskew_ecc_mutable.h"
#include "eth400g_pcs_rspec_deskew_mbe_err_log_mutable.h"
#include "eth400g_pcs_rspec_deskew_sbe_err_log_mutable.h"
#include "eth400g_pcs_rspec_eth_clkobs_ctrl_mutable.h"
#include "eth400g_pcs_rspec_eth_mdioci_ctrl_mutable.h"
#include "eth400g_pcs_rspec_eth_mdioci_poll_ctrl_mutable.h"
#include "eth400g_pcs_rspec_eth_mdioci_poll_time_mutable.h"
#include "eth400g_pcs_rspec_eth_ppm_ctrl_mutable.h"
#include "eth400g_pcs_rspec_eth_ppm_sel_mutable.h"
#include "eth400g_pcs_rspec_eth_ppm_stat_mutable.h"
#include "eth400g_pcs_rspec_eth_rxsigok_bitsel_mutable.h"
#include "eth400g_pcs_rspec_eth_rxsigok_ctrl_mutable.h"
#include "eth400g_pcs_rspec_eth_soft_reset_mutable.h"
#include "eth400g_pcs_rspec_mdioci_en0_mutable.h"
#include "eth400g_pcs_rspec_mdioci_en1_mutable.h"
#include "eth400g_pcs_rspec_mdioci_freeze_enable_mutable.h"
#include "eth400g_pcs_rspec_mdioci_intr_stat_mutable.h"
#include "eth400g_pcs_rspec_mem_intr_mutable.h"
#include "eth400g_pcs_rspec_rsfec01_ecc_mutable.h"
#include "eth400g_pcs_rspec_rsfec23_ecc_mutable.h"
#include "eth400g_pcs_rspec_rsfec_mbe_err_log_mutable.h"
#include "eth400g_pcs_rspec_rsfec_sbe_err_log_mutable.h"
#include "eth400g_pcs_rspec_rxsds_mode_mutable.h"
#include "eth400g_pcs_rspec_sds_112g_mutable.h"
#include "eth400g_pcs_rspec_txsds_mode_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class Eth400gPcsRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum JbayRegEnum {
    kEth400gP1,
    kEth400gP10,
    kEth400gP11,
    kEth400gP12,
    kEth400gP13,
    kEth400gP14,
    kEth400gP15,
    kEth400gP16,
    kEth400gP17,
    kEth400gP18,
    kEth400gP19,
    kEth400gP2,
    kEth400gP20,
    kEth400gP21,
    kEth400gP22,
    kEth400gP23,
    kEth400gP24,
    kEth400gP25,
    kEth400gP26,
    kEth400gP27,
    kEth400gP28,
    kEth400gP29,
    kEth400gP3,
    kEth400gP30,
    kEth400gP31,
    kEth400gP32,
    kEth400gP4,
    kEth400gP5,
    kEth400gP6,
    kEth400gP7,
    kEth400gP8,
    kEth400gP9
  };
public:
  Eth400gPcsRspecMutable(
      int chipNumber, JbayRegEnum selector_jbay_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_jbay_reg), 152, true, write_callback, read_callback, std::string("Eth400gPcsRspecMutable")+":"+boost::lexical_cast<std::string>(selector_jbay_reg))
    {
    }
  Eth400gPcsRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "Eth400gPcsRspecMutable")
    {
    }
public:






  Eth400gPcsRspecEthSoftResetMutable &eth_soft_reset() { return eth_soft_reset_; }





  Eth400gPcsRspecEthClkobsCtrlMutable &eth_clkobs_ctrl() { return eth_clkobs_ctrl_; }







  Eth400gPcsRspecEthRxsigokCtrlMutable &eth_rxsigok_ctrl() { return eth_rxsigok_ctrl_; }






  Eth400gPcsRspecEthMdiociCtrlMutable &eth_mdioci_ctrl() { return eth_mdioci_ctrl_; }






  Eth400gPcsRspecEthMdiociPollCtrlMutable &eth_mdioci_poll_ctrl() { return eth_mdioci_poll_ctrl_; }





  Eth400gPcsRspecEthMdiociPollTimeMutable &eth_mdioci_poll_time() { return eth_mdioci_poll_time_; }





  Eth400gPcsRspecEthRxsigokBitselMutable &eth_rxsigok_bitsel() { return eth_rxsigok_bitsel_; }








  Eth400gPcsRspecDeskewEccMutable &deskew_ecc() { return deskew_ecc_; }








  Eth400gPcsRspecRsfec01EccMutable &rsfec01_ecc() { return rsfec01_ecc_; }








  Eth400gPcsRspecRsfec23EccMutable &rsfec23_ecc() { return rsfec23_ecc_; }





  Eth400gPcsRspecDeskewSbeErrLogMutable &deskew_sbe_err_log() { return deskew_sbe_err_log_; }





  Eth400gPcsRspecDeskewMbeErrLogMutable &deskew_mbe_err_log() { return deskew_mbe_err_log_; }






  Eth400gPcsRspecRsfecSbeErrLogMutable &rsfec_sbe_err_log() { return rsfec_sbe_err_log_; }





  Eth400gPcsRspecRsfecMbeErrLogMutable &rsfec_mbe_err_log() { return rsfec_mbe_err_log_; }





  Eth400gPcsRspecMdiociIntrStatMutable &mdioci_intr_stat() { return mdioci_intr_stat_; }







  Eth400gPcsRspecMdiociEn0Mutable &mdioci_en0() { return mdioci_en0_; }







  Eth400gPcsRspecMdiociEn1Mutable &mdioci_en1() { return mdioci_en1_; }





  Eth400gPcsRspecMdiociFreezeEnableMutable &mdioci_freeze_enable() { return mdioci_freeze_enable_; }





  Eth400gPcsRspecTxsdsModeMutable &txsds_mode() { return txsds_mode_; }





  Eth400gPcsRspecRxsdsModeMutable &rxsds_mode() { return rxsds_mode_; }









  Eth400gPcsRspecSds_112gMutable &sds_112g() { return sds_112g_; }





  Eth400gPcsRspecEthPpmSelMutable &eth_ppm_sel() { return eth_ppm_sel_; }





  Eth400gPcsRspecEthPpmCtrlMutable &eth_ppm_ctrl() { return eth_ppm_ctrl_; }





  Eth400gPcsRspecEthPpmStatMutable &eth_ppm_stat() { return eth_ppm_stat_; }
  Eth400gPcsRspecMemIntrMutable &mem_intr() { return mem_intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      eth_soft_reset_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      eth_clkobs_ctrl_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      eth_rxsigok_ctrl_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      eth_mdioci_ctrl_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      eth_mdioci_poll_ctrl_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      eth_mdioci_poll_time_.read( offset, data );
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      if (read_callback_) read_callback_();
      eth_rxsigok_bitsel_.read( offset, data );
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      if (read_callback_) read_callback_();
      deskew_ecc_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      rsfec01_ecc_.read( offset, data );
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      if (read_callback_) read_callback_();
      rsfec23_ecc_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      deskew_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      if (read_callback_) read_callback_();
      deskew_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      if (read_callback_) read_callback_();
      rsfec_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      if (read_callback_) read_callback_();
      rsfec_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      if (read_callback_) read_callback_();
      mdioci_intr_stat_.read( offset, data );
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      if (read_callback_) read_callback_();
      mdioci_en0_.read( offset, data );
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      if (read_callback_) read_callback_();
      mdioci_en1_.read( offset, data );
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      if (read_callback_) read_callback_();
      mdioci_freeze_enable_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      txsds_mode_.read( offset, data );
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      if (read_callback_) read_callback_();
      rxsds_mode_.read( offset, data );
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      if (read_callback_) read_callback_();
      sds_112g_.read( offset, data );
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      if (read_callback_) read_callback_();
      eth_ppm_sel_.read( offset, data );
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      if (read_callback_) read_callback_();
      eth_ppm_ctrl_.read( offset, data );
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      if (read_callback_) read_callback_();
      eth_ppm_stat_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x54) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      mem_intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      eth_soft_reset_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      eth_clkobs_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      eth_rxsigok_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      eth_mdioci_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      eth_mdioci_poll_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      eth_mdioci_poll_time_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      eth_rxsigok_bitsel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      deskew_ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      rsfec01_ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      rsfec23_ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      deskew_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      deskew_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      rsfec_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      rsfec_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      mdioci_intr_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      mdioci_en0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      mdioci_en1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      mdioci_freeze_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      txsds_mode_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      rxsds_mode_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      sds_112g_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      eth_ppm_sel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      eth_ppm_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      eth_ppm_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x54) {
      offset -= 0x40;
      mem_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    eth_soft_reset_.reset();
    eth_clkobs_ctrl_.reset();
    eth_rxsigok_ctrl_.reset();
    eth_mdioci_ctrl_.reset();
    eth_mdioci_poll_ctrl_.reset();
    eth_mdioci_poll_time_.reset();
    eth_rxsigok_bitsel_.reset();
    deskew_ecc_.reset();
    rsfec01_ecc_.reset();
    rsfec23_ecc_.reset();
    deskew_sbe_err_log_.reset();
    deskew_mbe_err_log_.reset();
    rsfec_sbe_err_log_.reset();
    rsfec_mbe_err_log_.reset();
    mdioci_intr_stat_.reset();
    mdioci_en0_.reset();
    mdioci_en1_.reset();
    mdioci_freeze_enable_.reset();
    txsds_mode_.reset();
    rxsds_mode_.reset();
    sds_112g_.reset();
    eth_ppm_sel_.reset();
    eth_ppm_ctrl_.reset();
    eth_ppm_stat_.reset();
    mem_intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += eth_soft_reset_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += eth_clkobs_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += eth_rxsigok_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += eth_mdioci_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += eth_mdioci_poll_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += eth_mdioci_poll_time_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      r += eth_rxsigok_bitsel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      r += deskew_ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      r += rsfec01_ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      r += rsfec23_ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      r += deskew_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      r += deskew_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      r += rsfec_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      r += rsfec_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      r += mdioci_intr_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      r += mdioci_en0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      r += mdioci_en1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      r += mdioci_freeze_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      r += txsds_mode_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      r += rxsds_mode_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      r += sds_112g_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      r += eth_ppm_sel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      r += eth_ppm_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      r += eth_ppm_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x54) {
      offset -= 0x40;
      r += mem_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += eth_soft_reset_.to_string(print_zeros,indent_string) ;
    r += eth_clkobs_ctrl_.to_string(print_zeros,indent_string) ;
    r += eth_rxsigok_ctrl_.to_string(print_zeros,indent_string) ;
    r += eth_mdioci_ctrl_.to_string(print_zeros,indent_string) ;
    r += eth_mdioci_poll_ctrl_.to_string(print_zeros,indent_string) ;
    r += eth_mdioci_poll_time_.to_string(print_zeros,indent_string) ;
    r += eth_rxsigok_bitsel_.to_string(print_zeros,indent_string) ;
    r += deskew_ecc_.to_string(print_zeros,indent_string) ;
    r += rsfec01_ecc_.to_string(print_zeros,indent_string) ;
    r += rsfec23_ecc_.to_string(print_zeros,indent_string) ;
    r += deskew_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += deskew_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += rsfec_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += rsfec_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += mdioci_intr_stat_.to_string(print_zeros,indent_string) ;
    r += mdioci_en0_.to_string(print_zeros,indent_string) ;
    r += mdioci_en1_.to_string(print_zeros,indent_string) ;
    r += mdioci_freeze_enable_.to_string(print_zeros,indent_string) ;
    r += txsds_mode_.to_string(print_zeros,indent_string) ;
    r += rxsds_mode_.to_string(print_zeros,indent_string) ;
    r += sds_112g_.to_string(print_zeros,indent_string) ;
    r += eth_ppm_sel_.to_string(print_zeros,indent_string) ;
    r += eth_ppm_ctrl_.to_string(print_zeros,indent_string) ;
    r += eth_ppm_stat_.to_string(print_zeros,indent_string) ;
    r += mem_intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  Eth400gPcsRspecEthSoftResetMutable eth_soft_reset_;
  Eth400gPcsRspecEthClkobsCtrlMutable eth_clkobs_ctrl_;
  Eth400gPcsRspecEthRxsigokCtrlMutable eth_rxsigok_ctrl_;
  Eth400gPcsRspecEthMdiociCtrlMutable eth_mdioci_ctrl_;
  Eth400gPcsRspecEthMdiociPollCtrlMutable eth_mdioci_poll_ctrl_;
  Eth400gPcsRspecEthMdiociPollTimeMutable eth_mdioci_poll_time_;
  Eth400gPcsRspecEthRxsigokBitselMutable eth_rxsigok_bitsel_;
  Eth400gPcsRspecDeskewEccMutable deskew_ecc_;
  Eth400gPcsRspecRsfec01EccMutable rsfec01_ecc_;
  Eth400gPcsRspecRsfec23EccMutable rsfec23_ecc_;
  Eth400gPcsRspecDeskewSbeErrLogMutable deskew_sbe_err_log_;
  Eth400gPcsRspecDeskewMbeErrLogMutable deskew_mbe_err_log_;
  Eth400gPcsRspecRsfecSbeErrLogMutable rsfec_sbe_err_log_;
  Eth400gPcsRspecRsfecMbeErrLogMutable rsfec_mbe_err_log_;
  Eth400gPcsRspecMdiociIntrStatMutable mdioci_intr_stat_;
  Eth400gPcsRspecMdiociEn0Mutable mdioci_en0_;
  Eth400gPcsRspecMdiociEn1Mutable mdioci_en1_;
  Eth400gPcsRspecMdiociFreezeEnableMutable mdioci_freeze_enable_;
  Eth400gPcsRspecTxsdsModeMutable txsds_mode_;
  Eth400gPcsRspecRxsdsModeMutable rxsds_mode_;
  Eth400gPcsRspecSds_112gMutable sds_112g_;
  Eth400gPcsRspecEthPpmSelMutable eth_ppm_sel_;
  Eth400gPcsRspecEthPpmCtrlMutable eth_ppm_ctrl_;
  Eth400gPcsRspecEthPpmStatMutable eth_ppm_stat_;
  Eth400gPcsRspecMemIntrMutable mem_intr_;
private:
  static int StartOffset(
      JbayRegEnum selector_jbay_reg
      ) {
    int offset=0;
    switch (selector_jbay_reg) {
      case kEth400gP1:
        offset += 0x2040000; // to get to eth400g_p1
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP10:
        offset += 0x2280000; // to get to eth400g_p10
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP11:
        offset += 0x22c0000; // to get to eth400g_p11
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP12:
        offset += 0x2300000; // to get to eth400g_p12
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP13:
        offset += 0x2340000; // to get to eth400g_p13
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP14:
        offset += 0x2380000; // to get to eth400g_p14
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP15:
        offset += 0x23c0000; // to get to eth400g_p15
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP16:
        offset += 0x2400000; // to get to eth400g_p16
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP17:
        offset += 0x2440000; // to get to eth400g_p17
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP18:
        offset += 0x2480000; // to get to eth400g_p18
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP19:
        offset += 0x24c0000; // to get to eth400g_p19
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP2:
        offset += 0x2080000; // to get to eth400g_p2
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP20:
        offset += 0x2500000; // to get to eth400g_p20
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP21:
        offset += 0x2540000; // to get to eth400g_p21
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP22:
        offset += 0x2580000; // to get to eth400g_p22
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP23:
        offset += 0x25c0000; // to get to eth400g_p23
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP24:
        offset += 0x2600000; // to get to eth400g_p24
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP25:
        offset += 0x2640000; // to get to eth400g_p25
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP26:
        offset += 0x2680000; // to get to eth400g_p26
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP27:
        offset += 0x26c0000; // to get to eth400g_p27
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP28:
        offset += 0x2700000; // to get to eth400g_p28
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP29:
        offset += 0x2740000; // to get to eth400g_p29
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP3:
        offset += 0x20c0000; // to get to eth400g_p3
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP30:
        offset += 0x2780000; // to get to eth400g_p30
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP31:
        offset += 0x27c0000; // to get to eth400g_p31
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP32:
        offset += 0x2800000; // to get to eth400g_p32
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP4:
        offset += 0x2100000; // to get to eth400g_p4
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP5:
        offset += 0x2140000; // to get to eth400g_p5
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP6:
        offset += 0x2180000; // to get to eth400g_p6
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP7:
        offset += 0x21c0000; // to get to eth400g_p7
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP8:
        offset += 0x2200000; // to get to eth400g_p8
        offset += 0x10400; // to get to eth400g_pcs
        break;
      case kEth400gP9:
        offset += 0x2240000; // to get to eth400g_p9
        offset += 0x10400; // to get to eth400g_pcs
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_ETH400G_PCS_RSPEC_MUTABLE_H__
