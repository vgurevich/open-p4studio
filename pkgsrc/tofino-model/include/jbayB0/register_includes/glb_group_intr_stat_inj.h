/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_GLB_GROUP_INTR_STAT_INJ_H__
#define __REGISTER_INCLUDES_GLB_GROUP_INTR_STAT_INJ_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class GlbGroupIntrStatInj : public model_core::RegisterBlock<RegisterCallback> {
public:
  GlbGroupIntrStatInj(
      int chipNumber, int index_pipe_addrmap, int index_ipb_prsr4_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ipb_prsr4_reg), 8, false, write_callback, read_callback, std::string("GlbGroupIntrStatInj")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ipb_prsr4_reg))
    {
    }
  GlbGroupIntrStatInj(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "GlbGroupIntrStatInj")
    {
    }
public:
  uint8_t &resubmit_twice() { return resubmit_twice_; }
  uint8_t &pc_fatal() { return pc_fatal_; }
  uint8_t &mac_protocol() { return mac_protocol_; }
  uint8_t &mac_runt_pkt() { return mac_runt_pkt_; }
  uint8_t &mac_oversz_pkt() { return mac_oversz_pkt_; }
  uint8_t &free_addr_uninit0() { return free_addr_uninit0_; }
  uint8_t &free_addr_uninit1() { return free_addr_uninit1_; }
  uint8_t &free_addr_uninit2() { return free_addr_uninit2_; }
  uint8_t &free_addr_uninit3() { return free_addr_uninit3_; }
  uint8_t &prsr_pkt_ctl_fatal0() { return prsr_pkt_ctl_fatal0_; }
  uint8_t &prsr_pkt_ctl_fatal1() { return prsr_pkt_ctl_fatal1_; }
  uint8_t &prsr_pkt_ctl_fatal2() { return prsr_pkt_ctl_fatal2_; }
  uint8_t &prsr_pkt_ctl_fatal3() { return prsr_pkt_ctl_fatal3_; }
  uint8_t &dprsr_pkt_ctl_fatal0() { return dprsr_pkt_ctl_fatal0_; }
  uint8_t &dprsr_pkt_ctl_fatal1() { return dprsr_pkt_ctl_fatal1_; }
  uint8_t &dprsr_pkt_ctl_fatal2() { return dprsr_pkt_ctl_fatal2_; }
  uint8_t &dprsr_pkt_ctl_fatal3() { return dprsr_pkt_ctl_fatal3_; }
  uint8_t &meta_fifo_fatal0() { return meta_fifo_fatal0_; }
  uint8_t &meta_fifo_fatal1() { return meta_fifo_fatal1_; }
  uint8_t &meta_fifo_fatal2() { return meta_fifo_fatal2_; }
  uint8_t &meta_fifo_fatal3() { return meta_fifo_fatal3_; }
  uint8_t &pbc_mem0_ecc_dual_err() { return pbc_mem0_ecc_dual_err_; }
  uint8_t &pbc_mem0_ecc_sngl_err() { return pbc_mem0_ecc_sngl_err_; }
  uint8_t &pbc_mem1_ecc_dual_err() { return pbc_mem1_ecc_dual_err_; }
  uint8_t &pbc_mem1_ecc_sngl_err() { return pbc_mem1_ecc_sngl_err_; }
  uint8_t &mbc_ecc_dual_err() { return mbc_ecc_dual_err_; }
  uint8_t &mbc_ecc_sngl_err() { return mbc_ecc_sngl_err_; }
  uint8_t &mbc_meta_fifo_ecc_dual_err() { return mbc_meta_fifo_ecc_dual_err_; }
  uint8_t &mbc_meta_fifo_ecc_sngl_err() { return mbc_meta_fifo_ecc_sngl_err_; }
  uint8_t &llc_mem0_ecc_dual_err() { return llc_mem0_ecc_dual_err_; }
  uint8_t &llc_mem0_ecc_sngl_err() { return llc_mem0_ecc_sngl_err_; }
  uint8_t &llc_mem1_ecc_dual_err() { return llc_mem1_ecc_dual_err_; }
  uint8_t &llc_mem1_ecc_sngl_err() { return llc_mem1_ecc_sngl_err_; }
  uint8_t &llc_mem2_ecc_dual_err() { return llc_mem2_ecc_dual_err_; }
  uint8_t &llc_mem2_ecc_sngl_err() { return llc_mem2_ecc_sngl_err_; }
  uint8_t &drop_mem0_ecc_dual_err() { return drop_mem0_ecc_dual_err_; }
  uint8_t &drop_mem0_ecc_sngl_err() { return drop_mem0_ecc_sngl_err_; }
  uint8_t &drop_mem1_ecc_dual_err() { return drop_mem1_ecc_dual_err_; }
  uint8_t &drop_mem1_ecc_sngl_err() { return drop_mem1_ecc_sngl_err_; }
  uint8_t &papc_merge_mem0_ecc_dual_err() { return papc_merge_mem0_ecc_dual_err_; }
  uint8_t &papc_merge_mem0_ecc_sngl_err() { return papc_merge_mem0_ecc_sngl_err_; }
  uint8_t &papc_merge_mem1_ecc_dual_err() { return papc_merge_mem1_ecc_dual_err_; }
  uint8_t &papc_merge_mem1_ecc_sngl_err() { return papc_merge_mem1_ecc_sngl_err_; }
  uint8_t &papc_ecc_dual_err() { return papc_ecc_dual_err_; }
  uint8_t &papc_ecc_sngl_err() { return papc_ecc_sngl_err_; }
  uint8_t &dppc_ecc_dual_err() { return dppc_ecc_dual_err_; }
  uint8_t &dppc_ecc_sngl_err() { return dppc_ecc_sngl_err_; }
  uint8_t &gacc_mem0_ecc_dual_err() { return gacc_mem0_ecc_dual_err_; }
  uint8_t &gacc_mem0_ecc_sngl_err() { return gacc_mem0_ecc_sngl_err_; }
  uint8_t &gacc_mem1_ecc_dual_err() { return gacc_mem1_ecc_dual_err_; }
  uint8_t &gacc_mem1_ecc_sngl_err() { return gacc_mem1_ecc_sngl_err_; }
  uint8_t &gacc_mem2_ecc_dual_err() { return gacc_mem2_ecc_dual_err_; }
  uint8_t &gacc_mem2_ecc_sngl_err() { return gacc_mem2_ecc_sngl_err_; }
  uint8_t &gacc_mem3_ecc_dual_err() { return gacc_mem3_ecc_dual_err_; }
  uint8_t &gacc_mem3_ecc_sngl_err() { return gacc_mem3_ecc_sngl_err_; }
  uint8_t &bcc_ecc_dual_err() { return bcc_ecc_dual_err_; }
  uint8_t &bcc_ecc_sngl_err() { return bcc_ecc_sngl_err_; }
  uint8_t &port_meta_fifo_overflow() { return port_meta_fifo_overflow_; }
  uint8_t &resub_2w_fifo_overflow() { return resub_2w_fifo_overflow_; }
  uint8_t &dprsr_pkt_pref_fifo_overflow() { return dprsr_pkt_pref_fifo_overflow_; }
  uint8_t &bcnt_pkt_fifo_overflow() { return bcnt_pkt_fifo_overflow_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (resubmit_twice_ & 0x1);
      *data |= ((pc_fatal_ & 0x1) << 1);
      *data |= ((mac_protocol_ & 0x1) << 2);
      *data |= ((mac_runt_pkt_ & 0x1) << 3);
      *data |= ((mac_oversz_pkt_ & 0x1) << 4);
      *data |= ((free_addr_uninit0_ & 0x1) << 5);
      *data |= ((free_addr_uninit1_ & 0x1) << 6);
      *data |= ((free_addr_uninit2_ & 0x1) << 7);
      *data |= ((free_addr_uninit3_ & 0x1) << 8);
      *data |= ((prsr_pkt_ctl_fatal0_ & 0x1) << 9);
      *data |= ((prsr_pkt_ctl_fatal1_ & 0x1) << 10);
      *data |= ((prsr_pkt_ctl_fatal2_ & 0x1) << 11);
      *data |= ((prsr_pkt_ctl_fatal3_ & 0x1) << 12);
      *data |= ((dprsr_pkt_ctl_fatal0_ & 0x1) << 13);
      *data |= ((dprsr_pkt_ctl_fatal1_ & 0x1) << 14);
      *data |= ((dprsr_pkt_ctl_fatal2_ & 0x1) << 15);
      *data |= ((dprsr_pkt_ctl_fatal3_ & 0x1) << 16);
      *data |= ((meta_fifo_fatal0_ & 0x1) << 17);
      *data |= ((meta_fifo_fatal1_ & 0x1) << 18);
      *data |= ((meta_fifo_fatal2_ & 0x1) << 19);
      *data |= ((meta_fifo_fatal3_ & 0x1) << 20);
      *data |= ((pbc_mem0_ecc_dual_err_ & 0x1) << 21);
      *data |= ((pbc_mem0_ecc_sngl_err_ & 0x1) << 22);
      *data |= ((pbc_mem1_ecc_dual_err_ & 0x1) << 23);
      *data |= ((pbc_mem1_ecc_sngl_err_ & 0x1) << 24);
      *data |= ((mbc_ecc_dual_err_ & 0x1) << 25);
      *data |= ((mbc_ecc_sngl_err_ & 0x1) << 26);
      *data |= ((mbc_meta_fifo_ecc_dual_err_ & 0x1) << 27);
      *data |= ((mbc_meta_fifo_ecc_sngl_err_ & 0x1) << 28);
      *data |= ((llc_mem0_ecc_dual_err_ & 0x1) << 29);
      *data |= ((llc_mem0_ecc_sngl_err_ & 0x1) << 30);
      *data |= ((llc_mem1_ecc_dual_err_ & 0x1) << 31);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (llc_mem1_ecc_sngl_err_ & 0x1);
      *data |= ((llc_mem2_ecc_dual_err_ & 0x1) << 1);
      *data |= ((llc_mem2_ecc_sngl_err_ & 0x1) << 2);
      *data |= ((drop_mem0_ecc_dual_err_ & 0x1) << 3);
      *data |= ((drop_mem0_ecc_sngl_err_ & 0x1) << 4);
      *data |= ((drop_mem1_ecc_dual_err_ & 0x1) << 5);
      *data |= ((drop_mem1_ecc_sngl_err_ & 0x1) << 6);
      *data |= ((papc_merge_mem0_ecc_dual_err_ & 0x1) << 7);
      *data |= ((papc_merge_mem0_ecc_sngl_err_ & 0x1) << 8);
      *data |= ((papc_merge_mem1_ecc_dual_err_ & 0x1) << 9);
      *data |= ((papc_merge_mem1_ecc_sngl_err_ & 0x1) << 10);
      *data |= ((papc_ecc_dual_err_ & 0x1) << 11);
      *data |= ((papc_ecc_sngl_err_ & 0x1) << 12);
      *data |= ((dppc_ecc_dual_err_ & 0x1) << 13);
      *data |= ((dppc_ecc_sngl_err_ & 0x1) << 14);
      *data |= ((gacc_mem0_ecc_dual_err_ & 0x1) << 15);
      *data |= ((gacc_mem0_ecc_sngl_err_ & 0x1) << 16);
      *data |= ((gacc_mem1_ecc_dual_err_ & 0x1) << 17);
      *data |= ((gacc_mem1_ecc_sngl_err_ & 0x1) << 18);
      *data |= ((gacc_mem2_ecc_dual_err_ & 0x1) << 19);
      *data |= ((gacc_mem2_ecc_sngl_err_ & 0x1) << 20);
      *data |= ((gacc_mem3_ecc_dual_err_ & 0x1) << 21);
      *data |= ((gacc_mem3_ecc_sngl_err_ & 0x1) << 22);
      *data |= ((bcc_ecc_dual_err_ & 0x1) << 23);
      *data |= ((bcc_ecc_sngl_err_ & 0x1) << 24);
      *data |= ((port_meta_fifo_overflow_ & 0x1) << 25);
      *data |= ((resub_2w_fifo_overflow_ & 0x1) << 26);
      *data |= ((dprsr_pkt_pref_fifo_overflow_ & 0x1) << 27);
      *data |= ((bcnt_pkt_fifo_overflow_ & 0x1) << 28);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      resubmit_twice_ = (data & 0x1);
      pc_fatal_ = ((data >> 1) & 0x1);
      mac_protocol_ = ((data >> 2) & 0x1);
      mac_runt_pkt_ = ((data >> 3) & 0x1);
      mac_oversz_pkt_ = ((data >> 4) & 0x1);
      free_addr_uninit0_ = ((data >> 5) & 0x1);
      free_addr_uninit1_ = ((data >> 6) & 0x1);
      free_addr_uninit2_ = ((data >> 7) & 0x1);
      free_addr_uninit3_ = ((data >> 8) & 0x1);
      prsr_pkt_ctl_fatal0_ = ((data >> 9) & 0x1);
      prsr_pkt_ctl_fatal1_ = ((data >> 10) & 0x1);
      prsr_pkt_ctl_fatal2_ = ((data >> 11) & 0x1);
      prsr_pkt_ctl_fatal3_ = ((data >> 12) & 0x1);
      dprsr_pkt_ctl_fatal0_ = ((data >> 13) & 0x1);
      dprsr_pkt_ctl_fatal1_ = ((data >> 14) & 0x1);
      dprsr_pkt_ctl_fatal2_ = ((data >> 15) & 0x1);
      dprsr_pkt_ctl_fatal3_ = ((data >> 16) & 0x1);
      meta_fifo_fatal0_ = ((data >> 17) & 0x1);
      meta_fifo_fatal1_ = ((data >> 18) & 0x1);
      meta_fifo_fatal2_ = ((data >> 19) & 0x1);
      meta_fifo_fatal3_ = ((data >> 20) & 0x1);
      pbc_mem0_ecc_dual_err_ = ((data >> 21) & 0x1);
      pbc_mem0_ecc_sngl_err_ = ((data >> 22) & 0x1);
      pbc_mem1_ecc_dual_err_ = ((data >> 23) & 0x1);
      pbc_mem1_ecc_sngl_err_ = ((data >> 24) & 0x1);
      mbc_ecc_dual_err_ = ((data >> 25) & 0x1);
      mbc_ecc_sngl_err_ = ((data >> 26) & 0x1);
      mbc_meta_fifo_ecc_dual_err_ = ((data >> 27) & 0x1);
      mbc_meta_fifo_ecc_sngl_err_ = ((data >> 28) & 0x1);
      llc_mem0_ecc_dual_err_ = ((data >> 29) & 0x1);
      llc_mem0_ecc_sngl_err_ = ((data >> 30) & 0x1);
      llc_mem1_ecc_dual_err_ = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      llc_mem1_ecc_sngl_err_ = (data & 0x1);
      llc_mem2_ecc_dual_err_ = ((data >> 1) & 0x1);
      llc_mem2_ecc_sngl_err_ = ((data >> 2) & 0x1);
      drop_mem0_ecc_dual_err_ = ((data >> 3) & 0x1);
      drop_mem0_ecc_sngl_err_ = ((data >> 4) & 0x1);
      drop_mem1_ecc_dual_err_ = ((data >> 5) & 0x1);
      drop_mem1_ecc_sngl_err_ = ((data >> 6) & 0x1);
      papc_merge_mem0_ecc_dual_err_ = ((data >> 7) & 0x1);
      papc_merge_mem0_ecc_sngl_err_ = ((data >> 8) & 0x1);
      papc_merge_mem1_ecc_dual_err_ = ((data >> 9) & 0x1);
      papc_merge_mem1_ecc_sngl_err_ = ((data >> 10) & 0x1);
      papc_ecc_dual_err_ = ((data >> 11) & 0x1);
      papc_ecc_sngl_err_ = ((data >> 12) & 0x1);
      dppc_ecc_dual_err_ = ((data >> 13) & 0x1);
      dppc_ecc_sngl_err_ = ((data >> 14) & 0x1);
      gacc_mem0_ecc_dual_err_ = ((data >> 15) & 0x1);
      gacc_mem0_ecc_sngl_err_ = ((data >> 16) & 0x1);
      gacc_mem1_ecc_dual_err_ = ((data >> 17) & 0x1);
      gacc_mem1_ecc_sngl_err_ = ((data >> 18) & 0x1);
      gacc_mem2_ecc_dual_err_ = ((data >> 19) & 0x1);
      gacc_mem2_ecc_sngl_err_ = ((data >> 20) & 0x1);
      gacc_mem3_ecc_dual_err_ = ((data >> 21) & 0x1);
      gacc_mem3_ecc_sngl_err_ = ((data >> 22) & 0x1);
      bcc_ecc_dual_err_ = ((data >> 23) & 0x1);
      bcc_ecc_sngl_err_ = ((data >> 24) & 0x1);
      port_meta_fifo_overflow_ = ((data >> 25) & 0x1);
      resub_2w_fifo_overflow_ = ((data >> 26) & 0x1);
      dprsr_pkt_pref_fifo_overflow_ = ((data >> 27) & 0x1);
      bcnt_pkt_fifo_overflow_ = ((data >> 28) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    resubmit_twice_ = 0x0;
    pc_fatal_ = 0x0;
    mac_protocol_ = 0x0;
    mac_runt_pkt_ = 0x0;
    mac_oversz_pkt_ = 0x0;
    free_addr_uninit0_ = 0x0;
    free_addr_uninit1_ = 0x0;
    free_addr_uninit2_ = 0x0;
    free_addr_uninit3_ = 0x0;
    prsr_pkt_ctl_fatal0_ = 0x0;
    prsr_pkt_ctl_fatal1_ = 0x0;
    prsr_pkt_ctl_fatal2_ = 0x0;
    prsr_pkt_ctl_fatal3_ = 0x0;
    dprsr_pkt_ctl_fatal0_ = 0x0;
    dprsr_pkt_ctl_fatal1_ = 0x0;
    dprsr_pkt_ctl_fatal2_ = 0x0;
    dprsr_pkt_ctl_fatal3_ = 0x0;
    meta_fifo_fatal0_ = 0x0;
    meta_fifo_fatal1_ = 0x0;
    meta_fifo_fatal2_ = 0x0;
    meta_fifo_fatal3_ = 0x0;
    pbc_mem0_ecc_dual_err_ = 0x0;
    pbc_mem0_ecc_sngl_err_ = 0x0;
    pbc_mem1_ecc_dual_err_ = 0x0;
    pbc_mem1_ecc_sngl_err_ = 0x0;
    mbc_ecc_dual_err_ = 0x0;
    mbc_ecc_sngl_err_ = 0x0;
    mbc_meta_fifo_ecc_dual_err_ = 0x0;
    mbc_meta_fifo_ecc_sngl_err_ = 0x0;
    llc_mem0_ecc_dual_err_ = 0x0;
    llc_mem0_ecc_sngl_err_ = 0x0;
    llc_mem1_ecc_dual_err_ = 0x0;
    llc_mem1_ecc_sngl_err_ = 0x0;
    llc_mem2_ecc_dual_err_ = 0x0;
    llc_mem2_ecc_sngl_err_ = 0x0;
    drop_mem0_ecc_dual_err_ = 0x0;
    drop_mem0_ecc_sngl_err_ = 0x0;
    drop_mem1_ecc_dual_err_ = 0x0;
    drop_mem1_ecc_sngl_err_ = 0x0;
    papc_merge_mem0_ecc_dual_err_ = 0x0;
    papc_merge_mem0_ecc_sngl_err_ = 0x0;
    papc_merge_mem1_ecc_dual_err_ = 0x0;
    papc_merge_mem1_ecc_sngl_err_ = 0x0;
    papc_ecc_dual_err_ = 0x0;
    papc_ecc_sngl_err_ = 0x0;
    dppc_ecc_dual_err_ = 0x0;
    dppc_ecc_sngl_err_ = 0x0;
    gacc_mem0_ecc_dual_err_ = 0x0;
    gacc_mem0_ecc_sngl_err_ = 0x0;
    gacc_mem1_ecc_dual_err_ = 0x0;
    gacc_mem1_ecc_sngl_err_ = 0x0;
    gacc_mem2_ecc_dual_err_ = 0x0;
    gacc_mem2_ecc_sngl_err_ = 0x0;
    gacc_mem3_ecc_dual_err_ = 0x0;
    gacc_mem3_ecc_sngl_err_ = 0x0;
    bcc_ecc_dual_err_ = 0x0;
    bcc_ecc_sngl_err_ = 0x0;
    port_meta_fifo_overflow_ = 0x0;
    resub_2w_fifo_overflow_ = 0x0;
    dprsr_pkt_pref_fifo_overflow_ = 0x0;
    bcnt_pkt_fifo_overflow_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("GlbGroupIntrStatInj") + ":\n";
    r += indent_string + "  " + std::string("resubmit_twice") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(resubmit_twice_) ) + "\n";
    all_zeros &= (0 == resubmit_twice_);
    r += indent_string + "  " + std::string("pc_fatal") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pc_fatal_) ) + "\n";
    all_zeros &= (0 == pc_fatal_);
    r += indent_string + "  " + std::string("mac_protocol") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_protocol_) ) + "\n";
    all_zeros &= (0 == mac_protocol_);
    r += indent_string + "  " + std::string("mac_runt_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_runt_pkt_) ) + "\n";
    all_zeros &= (0 == mac_runt_pkt_);
    r += indent_string + "  " + std::string("mac_oversz_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_oversz_pkt_) ) + "\n";
    all_zeros &= (0 == mac_oversz_pkt_);
    r += indent_string + "  " + std::string("free_addr_uninit0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_addr_uninit0_) ) + "\n";
    all_zeros &= (0 == free_addr_uninit0_);
    r += indent_string + "  " + std::string("free_addr_uninit1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_addr_uninit1_) ) + "\n";
    all_zeros &= (0 == free_addr_uninit1_);
    r += indent_string + "  " + std::string("free_addr_uninit2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_addr_uninit2_) ) + "\n";
    all_zeros &= (0 == free_addr_uninit2_);
    r += indent_string + "  " + std::string("free_addr_uninit3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_addr_uninit3_) ) + "\n";
    all_zeros &= (0 == free_addr_uninit3_);
    r += indent_string + "  " + std::string("prsr_pkt_ctl_fatal0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr_pkt_ctl_fatal0_) ) + "\n";
    all_zeros &= (0 == prsr_pkt_ctl_fatal0_);
    r += indent_string + "  " + std::string("prsr_pkt_ctl_fatal1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr_pkt_ctl_fatal1_) ) + "\n";
    all_zeros &= (0 == prsr_pkt_ctl_fatal1_);
    r += indent_string + "  " + std::string("prsr_pkt_ctl_fatal2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr_pkt_ctl_fatal2_) ) + "\n";
    all_zeros &= (0 == prsr_pkt_ctl_fatal2_);
    r += indent_string + "  " + std::string("prsr_pkt_ctl_fatal3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr_pkt_ctl_fatal3_) ) + "\n";
    all_zeros &= (0 == prsr_pkt_ctl_fatal3_);
    r += indent_string + "  " + std::string("dprsr_pkt_ctl_fatal0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_pkt_ctl_fatal0_) ) + "\n";
    all_zeros &= (0 == dprsr_pkt_ctl_fatal0_);
    r += indent_string + "  " + std::string("dprsr_pkt_ctl_fatal1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_pkt_ctl_fatal1_) ) + "\n";
    all_zeros &= (0 == dprsr_pkt_ctl_fatal1_);
    r += indent_string + "  " + std::string("dprsr_pkt_ctl_fatal2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_pkt_ctl_fatal2_) ) + "\n";
    all_zeros &= (0 == dprsr_pkt_ctl_fatal2_);
    r += indent_string + "  " + std::string("dprsr_pkt_ctl_fatal3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_pkt_ctl_fatal3_) ) + "\n";
    all_zeros &= (0 == dprsr_pkt_ctl_fatal3_);
    r += indent_string + "  " + std::string("meta_fifo_fatal0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_fifo_fatal0_) ) + "\n";
    all_zeros &= (0 == meta_fifo_fatal0_);
    r += indent_string + "  " + std::string("meta_fifo_fatal1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_fifo_fatal1_) ) + "\n";
    all_zeros &= (0 == meta_fifo_fatal1_);
    r += indent_string + "  " + std::string("meta_fifo_fatal2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_fifo_fatal2_) ) + "\n";
    all_zeros &= (0 == meta_fifo_fatal2_);
    r += indent_string + "  " + std::string("meta_fifo_fatal3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_fifo_fatal3_) ) + "\n";
    all_zeros &= (0 == meta_fifo_fatal3_);
    r += indent_string + "  " + std::string("pbc_mem0_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_mem0_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == pbc_mem0_ecc_dual_err_);
    r += indent_string + "  " + std::string("pbc_mem0_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_mem0_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == pbc_mem0_ecc_sngl_err_);
    r += indent_string + "  " + std::string("pbc_mem1_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_mem1_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == pbc_mem1_ecc_dual_err_);
    r += indent_string + "  " + std::string("pbc_mem1_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_mem1_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == pbc_mem1_ecc_sngl_err_);
    r += indent_string + "  " + std::string("mbc_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mbc_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == mbc_ecc_dual_err_);
    r += indent_string + "  " + std::string("mbc_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mbc_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == mbc_ecc_sngl_err_);
    r += indent_string + "  " + std::string("mbc_meta_fifo_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mbc_meta_fifo_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == mbc_meta_fifo_ecc_dual_err_);
    r += indent_string + "  " + std::string("mbc_meta_fifo_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mbc_meta_fifo_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == mbc_meta_fifo_ecc_sngl_err_);
    r += indent_string + "  " + std::string("llc_mem0_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem0_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == llc_mem0_ecc_dual_err_);
    r += indent_string + "  " + std::string("llc_mem0_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem0_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == llc_mem0_ecc_sngl_err_);
    r += indent_string + "  " + std::string("llc_mem1_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem1_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == llc_mem1_ecc_dual_err_);
    r += indent_string + "  " + std::string("llc_mem1_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem1_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == llc_mem1_ecc_sngl_err_);
    r += indent_string + "  " + std::string("llc_mem2_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem2_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == llc_mem2_ecc_dual_err_);
    r += indent_string + "  " + std::string("llc_mem2_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem2_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == llc_mem2_ecc_sngl_err_);
    r += indent_string + "  " + std::string("drop_mem0_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_mem0_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == drop_mem0_ecc_dual_err_);
    r += indent_string + "  " + std::string("drop_mem0_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_mem0_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == drop_mem0_ecc_sngl_err_);
    r += indent_string + "  " + std::string("drop_mem1_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_mem1_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == drop_mem1_ecc_dual_err_);
    r += indent_string + "  " + std::string("drop_mem1_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_mem1_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == drop_mem1_ecc_sngl_err_);
    r += indent_string + "  " + std::string("papc_merge_mem0_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_merge_mem0_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == papc_merge_mem0_ecc_dual_err_);
    r += indent_string + "  " + std::string("papc_merge_mem0_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_merge_mem0_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == papc_merge_mem0_ecc_sngl_err_);
    r += indent_string + "  " + std::string("papc_merge_mem1_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_merge_mem1_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == papc_merge_mem1_ecc_dual_err_);
    r += indent_string + "  " + std::string("papc_merge_mem1_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_merge_mem1_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == papc_merge_mem1_ecc_sngl_err_);
    r += indent_string + "  " + std::string("papc_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == papc_ecc_dual_err_);
    r += indent_string + "  " + std::string("papc_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == papc_ecc_sngl_err_);
    r += indent_string + "  " + std::string("dppc_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dppc_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == dppc_ecc_dual_err_);
    r += indent_string + "  " + std::string("dppc_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dppc_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == dppc_ecc_sngl_err_);
    r += indent_string + "  " + std::string("gacc_mem0_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem0_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == gacc_mem0_ecc_dual_err_);
    r += indent_string + "  " + std::string("gacc_mem0_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem0_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == gacc_mem0_ecc_sngl_err_);
    r += indent_string + "  " + std::string("gacc_mem1_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem1_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == gacc_mem1_ecc_dual_err_);
    r += indent_string + "  " + std::string("gacc_mem1_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem1_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == gacc_mem1_ecc_sngl_err_);
    r += indent_string + "  " + std::string("gacc_mem2_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem2_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == gacc_mem2_ecc_dual_err_);
    r += indent_string + "  " + std::string("gacc_mem2_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem2_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == gacc_mem2_ecc_sngl_err_);
    r += indent_string + "  " + std::string("gacc_mem3_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem3_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == gacc_mem3_ecc_dual_err_);
    r += indent_string + "  " + std::string("gacc_mem3_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem3_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == gacc_mem3_ecc_sngl_err_);
    r += indent_string + "  " + std::string("bcc_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bcc_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == bcc_ecc_dual_err_);
    r += indent_string + "  " + std::string("bcc_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bcc_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == bcc_ecc_sngl_err_);
    r += indent_string + "  " + std::string("port_meta_fifo_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port_meta_fifo_overflow_) ) + "\n";
    all_zeros &= (0 == port_meta_fifo_overflow_);
    r += indent_string + "  " + std::string("resub_2w_fifo_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(resub_2w_fifo_overflow_) ) + "\n";
    all_zeros &= (0 == resub_2w_fifo_overflow_);
    r += indent_string + "  " + std::string("dprsr_pkt_pref_fifo_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_pkt_pref_fifo_overflow_) ) + "\n";
    all_zeros &= (0 == dprsr_pkt_pref_fifo_overflow_);
    r += indent_string + "  " + std::string("bcnt_pkt_fifo_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bcnt_pkt_fifo_overflow_) ) + "\n";
    all_zeros &= (0 == bcnt_pkt_fifo_overflow_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("GlbGroupIntrStatInj") + ":\n";
    r += indent_string + "  " + std::string("resubmit_twice") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(resubmit_twice_) ) + "\n";
    all_zeros &= (0 == resubmit_twice_);
    r += indent_string + "  " + std::string("pc_fatal") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pc_fatal_) ) + "\n";
    all_zeros &= (0 == pc_fatal_);
    r += indent_string + "  " + std::string("mac_protocol") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_protocol_) ) + "\n";
    all_zeros &= (0 == mac_protocol_);
    r += indent_string + "  " + std::string("mac_runt_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_runt_pkt_) ) + "\n";
    all_zeros &= (0 == mac_runt_pkt_);
    r += indent_string + "  " + std::string("mac_oversz_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_oversz_pkt_) ) + "\n";
    all_zeros &= (0 == mac_oversz_pkt_);
    r += indent_string + "  " + std::string("free_addr_uninit0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_addr_uninit0_) ) + "\n";
    all_zeros &= (0 == free_addr_uninit0_);
    r += indent_string + "  " + std::string("free_addr_uninit1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_addr_uninit1_) ) + "\n";
    all_zeros &= (0 == free_addr_uninit1_);
    r += indent_string + "  " + std::string("free_addr_uninit2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_addr_uninit2_) ) + "\n";
    all_zeros &= (0 == free_addr_uninit2_);
    r += indent_string + "  " + std::string("free_addr_uninit3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_addr_uninit3_) ) + "\n";
    all_zeros &= (0 == free_addr_uninit3_);
    r += indent_string + "  " + std::string("prsr_pkt_ctl_fatal0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr_pkt_ctl_fatal0_) ) + "\n";
    all_zeros &= (0 == prsr_pkt_ctl_fatal0_);
    r += indent_string + "  " + std::string("prsr_pkt_ctl_fatal1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr_pkt_ctl_fatal1_) ) + "\n";
    all_zeros &= (0 == prsr_pkt_ctl_fatal1_);
    r += indent_string + "  " + std::string("prsr_pkt_ctl_fatal2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr_pkt_ctl_fatal2_) ) + "\n";
    all_zeros &= (0 == prsr_pkt_ctl_fatal2_);
    r += indent_string + "  " + std::string("prsr_pkt_ctl_fatal3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr_pkt_ctl_fatal3_) ) + "\n";
    all_zeros &= (0 == prsr_pkt_ctl_fatal3_);
    r += indent_string + "  " + std::string("dprsr_pkt_ctl_fatal0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_pkt_ctl_fatal0_) ) + "\n";
    all_zeros &= (0 == dprsr_pkt_ctl_fatal0_);
    r += indent_string + "  " + std::string("dprsr_pkt_ctl_fatal1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_pkt_ctl_fatal1_) ) + "\n";
    all_zeros &= (0 == dprsr_pkt_ctl_fatal1_);
    r += indent_string + "  " + std::string("dprsr_pkt_ctl_fatal2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_pkt_ctl_fatal2_) ) + "\n";
    all_zeros &= (0 == dprsr_pkt_ctl_fatal2_);
    r += indent_string + "  " + std::string("dprsr_pkt_ctl_fatal3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_pkt_ctl_fatal3_) ) + "\n";
    all_zeros &= (0 == dprsr_pkt_ctl_fatal3_);
    r += indent_string + "  " + std::string("meta_fifo_fatal0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_fifo_fatal0_) ) + "\n";
    all_zeros &= (0 == meta_fifo_fatal0_);
    r += indent_string + "  " + std::string("meta_fifo_fatal1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_fifo_fatal1_) ) + "\n";
    all_zeros &= (0 == meta_fifo_fatal1_);
    r += indent_string + "  " + std::string("meta_fifo_fatal2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_fifo_fatal2_) ) + "\n";
    all_zeros &= (0 == meta_fifo_fatal2_);
    r += indent_string + "  " + std::string("meta_fifo_fatal3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_fifo_fatal3_) ) + "\n";
    all_zeros &= (0 == meta_fifo_fatal3_);
    r += indent_string + "  " + std::string("pbc_mem0_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_mem0_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == pbc_mem0_ecc_dual_err_);
    r += indent_string + "  " + std::string("pbc_mem0_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_mem0_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == pbc_mem0_ecc_sngl_err_);
    r += indent_string + "  " + std::string("pbc_mem1_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_mem1_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == pbc_mem1_ecc_dual_err_);
    r += indent_string + "  " + std::string("pbc_mem1_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbc_mem1_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == pbc_mem1_ecc_sngl_err_);
    r += indent_string + "  " + std::string("mbc_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mbc_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == mbc_ecc_dual_err_);
    r += indent_string + "  " + std::string("mbc_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mbc_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == mbc_ecc_sngl_err_);
    r += indent_string + "  " + std::string("mbc_meta_fifo_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mbc_meta_fifo_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == mbc_meta_fifo_ecc_dual_err_);
    r += indent_string + "  " + std::string("mbc_meta_fifo_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mbc_meta_fifo_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == mbc_meta_fifo_ecc_sngl_err_);
    r += indent_string + "  " + std::string("llc_mem0_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem0_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == llc_mem0_ecc_dual_err_);
    r += indent_string + "  " + std::string("llc_mem0_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem0_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == llc_mem0_ecc_sngl_err_);
    r += indent_string + "  " + std::string("llc_mem1_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem1_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == llc_mem1_ecc_dual_err_);
    r += indent_string + "  " + std::string("llc_mem1_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem1_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == llc_mem1_ecc_sngl_err_);
    r += indent_string + "  " + std::string("llc_mem2_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem2_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == llc_mem2_ecc_dual_err_);
    r += indent_string + "  " + std::string("llc_mem2_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(llc_mem2_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == llc_mem2_ecc_sngl_err_);
    r += indent_string + "  " + std::string("drop_mem0_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_mem0_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == drop_mem0_ecc_dual_err_);
    r += indent_string + "  " + std::string("drop_mem0_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_mem0_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == drop_mem0_ecc_sngl_err_);
    r += indent_string + "  " + std::string("drop_mem1_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_mem1_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == drop_mem1_ecc_dual_err_);
    r += indent_string + "  " + std::string("drop_mem1_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_mem1_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == drop_mem1_ecc_sngl_err_);
    r += indent_string + "  " + std::string("papc_merge_mem0_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_merge_mem0_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == papc_merge_mem0_ecc_dual_err_);
    r += indent_string + "  " + std::string("papc_merge_mem0_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_merge_mem0_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == papc_merge_mem0_ecc_sngl_err_);
    r += indent_string + "  " + std::string("papc_merge_mem1_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_merge_mem1_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == papc_merge_mem1_ecc_dual_err_);
    r += indent_string + "  " + std::string("papc_merge_mem1_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_merge_mem1_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == papc_merge_mem1_ecc_sngl_err_);
    r += indent_string + "  " + std::string("papc_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == papc_ecc_dual_err_);
    r += indent_string + "  " + std::string("papc_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(papc_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == papc_ecc_sngl_err_);
    r += indent_string + "  " + std::string("dppc_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dppc_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == dppc_ecc_dual_err_);
    r += indent_string + "  " + std::string("dppc_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dppc_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == dppc_ecc_sngl_err_);
    r += indent_string + "  " + std::string("gacc_mem0_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem0_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == gacc_mem0_ecc_dual_err_);
    r += indent_string + "  " + std::string("gacc_mem0_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem0_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == gacc_mem0_ecc_sngl_err_);
    r += indent_string + "  " + std::string("gacc_mem1_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem1_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == gacc_mem1_ecc_dual_err_);
    r += indent_string + "  " + std::string("gacc_mem1_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem1_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == gacc_mem1_ecc_sngl_err_);
    r += indent_string + "  " + std::string("gacc_mem2_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem2_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == gacc_mem2_ecc_dual_err_);
    r += indent_string + "  " + std::string("gacc_mem2_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem2_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == gacc_mem2_ecc_sngl_err_);
    r += indent_string + "  " + std::string("gacc_mem3_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem3_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == gacc_mem3_ecc_dual_err_);
    r += indent_string + "  " + std::string("gacc_mem3_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gacc_mem3_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == gacc_mem3_ecc_sngl_err_);
    r += indent_string + "  " + std::string("bcc_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bcc_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == bcc_ecc_dual_err_);
    r += indent_string + "  " + std::string("bcc_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bcc_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == bcc_ecc_sngl_err_);
    r += indent_string + "  " + std::string("port_meta_fifo_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port_meta_fifo_overflow_) ) + "\n";
    all_zeros &= (0 == port_meta_fifo_overflow_);
    r += indent_string + "  " + std::string("resub_2w_fifo_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(resub_2w_fifo_overflow_) ) + "\n";
    all_zeros &= (0 == resub_2w_fifo_overflow_);
    r += indent_string + "  " + std::string("dprsr_pkt_pref_fifo_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprsr_pkt_pref_fifo_overflow_) ) + "\n";
    all_zeros &= (0 == dprsr_pkt_pref_fifo_overflow_);
    r += indent_string + "  " + std::string("bcnt_pkt_fifo_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bcnt_pkt_fifo_overflow_) ) + "\n";
    all_zeros &= (0 == bcnt_pkt_fifo_overflow_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t resubmit_twice_;
  uint8_t pc_fatal_;
  uint8_t mac_protocol_;
  uint8_t mac_runt_pkt_;
  uint8_t mac_oversz_pkt_;
  uint8_t free_addr_uninit0_;
  uint8_t free_addr_uninit1_;
  uint8_t free_addr_uninit2_;
  uint8_t free_addr_uninit3_;
  uint8_t prsr_pkt_ctl_fatal0_;
  uint8_t prsr_pkt_ctl_fatal1_;
  uint8_t prsr_pkt_ctl_fatal2_;
  uint8_t prsr_pkt_ctl_fatal3_;
  uint8_t dprsr_pkt_ctl_fatal0_;
  uint8_t dprsr_pkt_ctl_fatal1_;
  uint8_t dprsr_pkt_ctl_fatal2_;
  uint8_t dprsr_pkt_ctl_fatal3_;
  uint8_t meta_fifo_fatal0_;
  uint8_t meta_fifo_fatal1_;
  uint8_t meta_fifo_fatal2_;
  uint8_t meta_fifo_fatal3_;
  uint8_t pbc_mem0_ecc_dual_err_;
  uint8_t pbc_mem0_ecc_sngl_err_;
  uint8_t pbc_mem1_ecc_dual_err_;
  uint8_t pbc_mem1_ecc_sngl_err_;
  uint8_t mbc_ecc_dual_err_;
  uint8_t mbc_ecc_sngl_err_;
  uint8_t mbc_meta_fifo_ecc_dual_err_;
  uint8_t mbc_meta_fifo_ecc_sngl_err_;
  uint8_t llc_mem0_ecc_dual_err_;
  uint8_t llc_mem0_ecc_sngl_err_;
  uint8_t llc_mem1_ecc_dual_err_;
  uint8_t llc_mem1_ecc_sngl_err_;
  uint8_t llc_mem2_ecc_dual_err_;
  uint8_t llc_mem2_ecc_sngl_err_;
  uint8_t drop_mem0_ecc_dual_err_;
  uint8_t drop_mem0_ecc_sngl_err_;
  uint8_t drop_mem1_ecc_dual_err_;
  uint8_t drop_mem1_ecc_sngl_err_;
  uint8_t papc_merge_mem0_ecc_dual_err_;
  uint8_t papc_merge_mem0_ecc_sngl_err_;
  uint8_t papc_merge_mem1_ecc_dual_err_;
  uint8_t papc_merge_mem1_ecc_sngl_err_;
  uint8_t papc_ecc_dual_err_;
  uint8_t papc_ecc_sngl_err_;
  uint8_t dppc_ecc_dual_err_;
  uint8_t dppc_ecc_sngl_err_;
  uint8_t gacc_mem0_ecc_dual_err_;
  uint8_t gacc_mem0_ecc_sngl_err_;
  uint8_t gacc_mem1_ecc_dual_err_;
  uint8_t gacc_mem1_ecc_sngl_err_;
  uint8_t gacc_mem2_ecc_dual_err_;
  uint8_t gacc_mem2_ecc_sngl_err_;
  uint8_t gacc_mem3_ecc_dual_err_;
  uint8_t gacc_mem3_ecc_sngl_err_;
  uint8_t bcc_ecc_dual_err_;
  uint8_t bcc_ecc_sngl_err_;
  uint8_t port_meta_fifo_overflow_;
  uint8_t resub_2w_fifo_overflow_;
  uint8_t dprsr_pkt_pref_fifo_overflow_;
  uint8_t bcnt_pkt_fifo_overflow_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ipb_prsr4_reg
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    assert(index_ipb_prsr4_reg < 9);
    offset += index_ipb_prsr4_reg * 0x2000; // ipb_prsr4_reg[]
    offset += 0x58; // to get to glb_group_intr_stat_inj
    return offset;
  }

};












  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_GLB_GROUP_INTR_STAT_INJ_H__
