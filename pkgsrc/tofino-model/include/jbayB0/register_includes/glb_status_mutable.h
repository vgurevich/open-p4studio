/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_GLB_STATUS_MUTABLE_H__
#define __REGISTER_INCLUDES_GLB_STATUS_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class GlbStatusMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  GlbStatusMutable(
      int chipNumber, int index_pipe_addrmap, int index_ipb_prsr4_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ipb_prsr4_reg), 8, true, write_callback, read_callback, std::string("GlbStatusMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ipb_prsr4_reg))
    {
    }
  GlbStatusMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "GlbStatusMutable")
    {
    }
public:





  uint8_t free_list_used_cnt0() { return free_list_used_cnt0_; }
  void free_list_used_cnt0(const uint8_t &v) { free_list_used_cnt0_=v; }





  uint8_t free_list_used_cnt1() { return free_list_used_cnt1_; }
  void free_list_used_cnt1(const uint8_t &v) { free_list_used_cnt1_=v; }





  uint8_t free_list_used_cnt2() { return free_list_used_cnt2_; }
  void free_list_used_cnt2(const uint8_t &v) { free_list_used_cnt2_=v; }





  uint8_t free_list_used_cnt3() { return free_list_used_cnt3_; }
  void free_list_used_cnt3(const uint8_t &v) { free_list_used_cnt3_=v; }





  uint8_t free_list_init_done() { return free_list_init_done_; }
  void free_list_init_done(const uint8_t &v) { free_list_init_done_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = free_list_used_cnt0_;
      *data |= (free_list_used_cnt1_ << 8);
      *data |= (free_list_used_cnt2_ << 16);
      *data |= (free_list_used_cnt3_ << 24);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (free_list_init_done_ & 0x1);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      free_list_used_cnt0_ = data;
      free_list_used_cnt1_ = (data >> 8);
      free_list_used_cnt2_ = (data >> 16);
      free_list_used_cnt3_ = (data >> 24);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      free_list_init_done_ = (data & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    free_list_used_cnt0_ = 0x0;
    free_list_used_cnt1_ = 0x0;
    free_list_used_cnt2_ = 0x0;
    free_list_used_cnt3_ = 0x0;
    free_list_init_done_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("GlbStatusMutable") + ":\n";
    r += indent_string + "  " + std::string("free_list_used_cnt0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_list_used_cnt0_) ) + "\n";
    all_zeros &= (0 == free_list_used_cnt0_);
    r += indent_string + "  " + std::string("free_list_used_cnt1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_list_used_cnt1_) ) + "\n";
    all_zeros &= (0 == free_list_used_cnt1_);
    r += indent_string + "  " + std::string("free_list_used_cnt2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_list_used_cnt2_) ) + "\n";
    all_zeros &= (0 == free_list_used_cnt2_);
    r += indent_string + "  " + std::string("free_list_used_cnt3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_list_used_cnt3_) ) + "\n";
    all_zeros &= (0 == free_list_used_cnt3_);
    r += indent_string + "  " + std::string("free_list_init_done") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_list_init_done_) ) + "\n";
    all_zeros &= (0 == free_list_init_done_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("GlbStatusMutable") + ":\n";
    r += indent_string + "  " + std::string("free_list_used_cnt0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_list_used_cnt0_) ) + "\n";
    all_zeros &= (0 == free_list_used_cnt0_);
    r += indent_string + "  " + std::string("free_list_used_cnt1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_list_used_cnt1_) ) + "\n";
    all_zeros &= (0 == free_list_used_cnt1_);
    r += indent_string + "  " + std::string("free_list_used_cnt2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_list_used_cnt2_) ) + "\n";
    all_zeros &= (0 == free_list_used_cnt2_);
    r += indent_string + "  " + std::string("free_list_used_cnt3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_list_used_cnt3_) ) + "\n";
    all_zeros &= (0 == free_list_used_cnt3_);
    r += indent_string + "  " + std::string("free_list_init_done") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(free_list_init_done_) ) + "\n";
    all_zeros &= (0 == free_list_init_done_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t free_list_used_cnt0_;
  uint8_t free_list_used_cnt1_;
  uint8_t free_list_used_cnt2_;
  uint8_t free_list_used_cnt3_;
  uint8_t free_list_init_done_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ipb_prsr4_reg
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    assert(index_ipb_prsr4_reg < 9);
    offset += index_ipb_prsr4_reg * 0x2000; // ipb_prsr4_reg[]
    offset += 0x8; // to get to glb_group_glb_status
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_GLB_STATUS_MUTABLE_H__
