/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_GPIO_COMMON_REGS_ETH_GPIO_INTR_EN0_MUTABLE_H__
#define __REGISTER_INCLUDES_GPIO_COMMON_REGS_ETH_GPIO_INTR_EN0_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class GpioCommonRegsEthGpioIntrEn0Mutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum JbayRegEnum {
    kEthgpiobr,
    kEthgpiotl
  };
public:
  GpioCommonRegsEthGpioIntrEn0Mutable(
      int chipNumber, JbayRegEnum selector_jbay_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_jbay_reg), 4, true, write_callback, read_callback, std::string("GpioCommonRegsEthGpioIntrEn0Mutable")+":"+boost::lexical_cast<std::string>(selector_jbay_reg))
    {
    }
  GpioCommonRegsEthGpioIntrEn0Mutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "GpioCommonRegsEthGpioIntrEn0Mutable")
    {
    }
public:
  uint8_t gpio0_edge_capt() { return gpio0_edge_capt_; }
  void gpio0_edge_capt(const uint8_t &v) { gpio0_edge_capt_=v; }
  uint8_t gpio1_edge_capt() { return gpio1_edge_capt_; }
  void gpio1_edge_capt(const uint8_t &v) { gpio1_edge_capt_=v; }
  uint8_t gpio2_edge_capt() { return gpio2_edge_capt_; }
  void gpio2_edge_capt(const uint8_t &v) { gpio2_edge_capt_=v; }
  uint8_t gpio3_edge_capt() { return gpio3_edge_capt_; }
  void gpio3_edge_capt(const uint8_t &v) { gpio3_edge_capt_=v; }
  uint8_t gpio4_edge_capt() { return gpio4_edge_capt_; }
  void gpio4_edge_capt(const uint8_t &v) { gpio4_edge_capt_=v; }
  uint8_t gpio5_edge_capt() { return gpio5_edge_capt_; }
  void gpio5_edge_capt(const uint8_t &v) { gpio5_edge_capt_=v; }
  uint8_t gpio6_edge_capt() { return gpio6_edge_capt_; }
  void gpio6_edge_capt(const uint8_t &v) { gpio6_edge_capt_=v; }
  uint8_t gpio7_edge_capt() { return gpio7_edge_capt_; }
  void gpio7_edge_capt(const uint8_t &v) { gpio7_edge_capt_=v; }
  uint8_t gpio8_edge_capt() { return gpio8_edge_capt_; }
  void gpio8_edge_capt(const uint8_t &v) { gpio8_edge_capt_=v; }
  uint8_t gpio9_edge_capt() { return gpio9_edge_capt_; }
  void gpio9_edge_capt(const uint8_t &v) { gpio9_edge_capt_=v; }
  uint8_t gpio10_edge_capt() { return gpio10_edge_capt_; }
  void gpio10_edge_capt(const uint8_t &v) { gpio10_edge_capt_=v; }
  uint8_t gpio11_edge_capt() { return gpio11_edge_capt_; }
  void gpio11_edge_capt(const uint8_t &v) { gpio11_edge_capt_=v; }
  uint8_t i2c0_dev_nak() { return i2c0_dev_nak_; }
  void i2c0_dev_nak(const uint8_t &v) { i2c0_dev_nak_=v; }
  uint8_t i2c0_data_nak() { return i2c0_data_nak_; }
  void i2c0_data_nak(const uint8_t &v) { i2c0_data_nak_=v; }
  uint8_t i2c0_arb_lost() { return i2c0_arb_lost_; }
  void i2c0_arb_lost(const uint8_t &v) { i2c0_arb_lost_=v; }
  uint8_t i2c1_dev_nak() { return i2c1_dev_nak_; }
  void i2c1_dev_nak(const uint8_t &v) { i2c1_dev_nak_=v; }
  uint8_t i2c1_data_nak() { return i2c1_data_nak_; }
  void i2c1_data_nak(const uint8_t &v) { i2c1_data_nak_=v; }
  uint8_t i2c1_arb_lost() { return i2c1_arb_lost_; }
  void i2c1_arb_lost(const uint8_t &v) { i2c1_arb_lost_=v; }
  uint8_t i2c2_dev_nak() { return i2c2_dev_nak_; }
  void i2c2_dev_nak(const uint8_t &v) { i2c2_dev_nak_=v; }
  uint8_t i2c2_data_nak() { return i2c2_data_nak_; }
  void i2c2_data_nak(const uint8_t &v) { i2c2_data_nak_=v; }
  uint8_t i2c2_arb_lost() { return i2c2_arb_lost_; }
  void i2c2_arb_lost(const uint8_t &v) { i2c2_arb_lost_=v; }
  uint8_t i2c3_dev_nak() { return i2c3_dev_nak_; }
  void i2c3_dev_nak(const uint8_t &v) { i2c3_dev_nak_=v; }
  uint8_t i2c3_data_nak() { return i2c3_data_nak_; }
  void i2c3_data_nak(const uint8_t &v) { i2c3_data_nak_=v; }
  uint8_t i2c3_arb_lost() { return i2c3_arb_lost_; }
  void i2c3_arb_lost(const uint8_t &v) { i2c3_arb_lost_=v; }
  uint8_t i2c4_dev_nak() { return i2c4_dev_nak_; }
  void i2c4_dev_nak(const uint8_t &v) { i2c4_dev_nak_=v; }
  uint8_t i2c4_data_nak() { return i2c4_data_nak_; }
  void i2c4_data_nak(const uint8_t &v) { i2c4_data_nak_=v; }
  uint8_t i2c4_arb_lost() { return i2c4_arb_lost_; }
  void i2c4_arb_lost(const uint8_t &v) { i2c4_arb_lost_=v; }
  uint8_t i2c5_dev_nak() { return i2c5_dev_nak_; }
  void i2c5_dev_nak(const uint8_t &v) { i2c5_dev_nak_=v; }
  uint8_t i2c5_data_nak() { return i2c5_data_nak_; }
  void i2c5_data_nak(const uint8_t &v) { i2c5_data_nak_=v; }
  uint8_t i2c5_arb_lost() { return i2c5_arb_lost_; }
  void i2c5_arb_lost(const uint8_t &v) { i2c5_arb_lost_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (gpio0_edge_capt_ & 0x1);
    *data |= ((gpio1_edge_capt_ & 0x1) << 1);
    *data |= ((gpio2_edge_capt_ & 0x1) << 2);
    *data |= ((gpio3_edge_capt_ & 0x1) << 3);
    *data |= ((gpio4_edge_capt_ & 0x1) << 4);
    *data |= ((gpio5_edge_capt_ & 0x1) << 5);
    *data |= ((gpio6_edge_capt_ & 0x1) << 6);
    *data |= ((gpio7_edge_capt_ & 0x1) << 7);
    *data |= ((gpio8_edge_capt_ & 0x1) << 8);
    *data |= ((gpio9_edge_capt_ & 0x1) << 9);
    *data |= ((gpio10_edge_capt_ & 0x1) << 10);
    *data |= ((gpio11_edge_capt_ & 0x1) << 11);
    *data |= ((i2c0_dev_nak_ & 0x1) << 12);
    *data |= ((i2c0_data_nak_ & 0x1) << 13);
    *data |= ((i2c0_arb_lost_ & 0x1) << 14);
    *data |= ((i2c1_dev_nak_ & 0x1) << 15);
    *data |= ((i2c1_data_nak_ & 0x1) << 16);
    *data |= ((i2c1_arb_lost_ & 0x1) << 17);
    *data |= ((i2c2_dev_nak_ & 0x1) << 18);
    *data |= ((i2c2_data_nak_ & 0x1) << 19);
    *data |= ((i2c2_arb_lost_ & 0x1) << 20);
    *data |= ((i2c3_dev_nak_ & 0x1) << 21);
    *data |= ((i2c3_data_nak_ & 0x1) << 22);
    *data |= ((i2c3_arb_lost_ & 0x1) << 23);
    *data |= ((i2c4_dev_nak_ & 0x1) << 24);
    *data |= ((i2c4_data_nak_ & 0x1) << 25);
    *data |= ((i2c4_arb_lost_ & 0x1) << 26);
    *data |= ((i2c5_dev_nak_ & 0x1) << 27);
    *data |= ((i2c5_data_nak_ & 0x1) << 28);
    *data |= ((i2c5_arb_lost_ & 0x1) << 29);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    gpio0_edge_capt_ = (data & 0x1);
    gpio1_edge_capt_ = ((data >> 1) & 0x1);
    gpio2_edge_capt_ = ((data >> 2) & 0x1);
    gpio3_edge_capt_ = ((data >> 3) & 0x1);
    gpio4_edge_capt_ = ((data >> 4) & 0x1);
    gpio5_edge_capt_ = ((data >> 5) & 0x1);
    gpio6_edge_capt_ = ((data >> 6) & 0x1);
    gpio7_edge_capt_ = ((data >> 7) & 0x1);
    gpio8_edge_capt_ = ((data >> 8) & 0x1);
    gpio9_edge_capt_ = ((data >> 9) & 0x1);
    gpio10_edge_capt_ = ((data >> 10) & 0x1);
    gpio11_edge_capt_ = ((data >> 11) & 0x1);
    i2c0_dev_nak_ = ((data >> 12) & 0x1);
    i2c0_data_nak_ = ((data >> 13) & 0x1);
    i2c0_arb_lost_ = ((data >> 14) & 0x1);
    i2c1_dev_nak_ = ((data >> 15) & 0x1);
    i2c1_data_nak_ = ((data >> 16) & 0x1);
    i2c1_arb_lost_ = ((data >> 17) & 0x1);
    i2c2_dev_nak_ = ((data >> 18) & 0x1);
    i2c2_data_nak_ = ((data >> 19) & 0x1);
    i2c2_arb_lost_ = ((data >> 20) & 0x1);
    i2c3_dev_nak_ = ((data >> 21) & 0x1);
    i2c3_data_nak_ = ((data >> 22) & 0x1);
    i2c3_arb_lost_ = ((data >> 23) & 0x1);
    i2c4_dev_nak_ = ((data >> 24) & 0x1);
    i2c4_data_nak_ = ((data >> 25) & 0x1);
    i2c4_arb_lost_ = ((data >> 26) & 0x1);
    i2c5_dev_nak_ = ((data >> 27) & 0x1);
    i2c5_data_nak_ = ((data >> 28) & 0x1);
    i2c5_arb_lost_ = ((data >> 29) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    gpio0_edge_capt_ = 0x0;
    gpio1_edge_capt_ = 0x0;
    gpio2_edge_capt_ = 0x0;
    gpio3_edge_capt_ = 0x0;
    gpio4_edge_capt_ = 0x0;
    gpio5_edge_capt_ = 0x0;
    gpio6_edge_capt_ = 0x0;
    gpio7_edge_capt_ = 0x0;
    gpio8_edge_capt_ = 0x0;
    gpio9_edge_capt_ = 0x0;
    gpio10_edge_capt_ = 0x0;
    gpio11_edge_capt_ = 0x0;
    i2c0_dev_nak_ = 0x0;
    i2c0_data_nak_ = 0x0;
    i2c0_arb_lost_ = 0x0;
    i2c1_dev_nak_ = 0x0;
    i2c1_data_nak_ = 0x0;
    i2c1_arb_lost_ = 0x0;
    i2c2_dev_nak_ = 0x0;
    i2c2_data_nak_ = 0x0;
    i2c2_arb_lost_ = 0x0;
    i2c3_dev_nak_ = 0x0;
    i2c3_data_nak_ = 0x0;
    i2c3_arb_lost_ = 0x0;
    i2c4_dev_nak_ = 0x0;
    i2c4_data_nak_ = 0x0;
    i2c4_arb_lost_ = 0x0;
    i2c5_dev_nak_ = 0x0;
    i2c5_data_nak_ = 0x0;
    i2c5_arb_lost_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("GpioCommonRegsEthGpioIntrEn0Mutable") + ":\n";
    r += indent_string + "  " + std::string("gpio0_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio0_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio0_edge_capt_);
    r += indent_string + "  " + std::string("gpio1_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio1_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio1_edge_capt_);
    r += indent_string + "  " + std::string("gpio2_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio2_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio2_edge_capt_);
    r += indent_string + "  " + std::string("gpio3_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio3_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio3_edge_capt_);
    r += indent_string + "  " + std::string("gpio4_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio4_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio4_edge_capt_);
    r += indent_string + "  " + std::string("gpio5_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio5_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio5_edge_capt_);
    r += indent_string + "  " + std::string("gpio6_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio6_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio6_edge_capt_);
    r += indent_string + "  " + std::string("gpio7_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio7_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio7_edge_capt_);
    r += indent_string + "  " + std::string("gpio8_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio8_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio8_edge_capt_);
    r += indent_string + "  " + std::string("gpio9_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio9_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio9_edge_capt_);
    r += indent_string + "  " + std::string("gpio10_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio10_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio10_edge_capt_);
    r += indent_string + "  " + std::string("gpio11_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio11_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio11_edge_capt_);
    r += indent_string + "  " + std::string("i2c0_dev_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c0_dev_nak_) ) + "\n";
    all_zeros &= (0 == i2c0_dev_nak_);
    r += indent_string + "  " + std::string("i2c0_data_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c0_data_nak_) ) + "\n";
    all_zeros &= (0 == i2c0_data_nak_);
    r += indent_string + "  " + std::string("i2c0_arb_lost") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c0_arb_lost_) ) + "\n";
    all_zeros &= (0 == i2c0_arb_lost_);
    r += indent_string + "  " + std::string("i2c1_dev_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c1_dev_nak_) ) + "\n";
    all_zeros &= (0 == i2c1_dev_nak_);
    r += indent_string + "  " + std::string("i2c1_data_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c1_data_nak_) ) + "\n";
    all_zeros &= (0 == i2c1_data_nak_);
    r += indent_string + "  " + std::string("i2c1_arb_lost") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c1_arb_lost_) ) + "\n";
    all_zeros &= (0 == i2c1_arb_lost_);
    r += indent_string + "  " + std::string("i2c2_dev_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c2_dev_nak_) ) + "\n";
    all_zeros &= (0 == i2c2_dev_nak_);
    r += indent_string + "  " + std::string("i2c2_data_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c2_data_nak_) ) + "\n";
    all_zeros &= (0 == i2c2_data_nak_);
    r += indent_string + "  " + std::string("i2c2_arb_lost") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c2_arb_lost_) ) + "\n";
    all_zeros &= (0 == i2c2_arb_lost_);
    r += indent_string + "  " + std::string("i2c3_dev_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c3_dev_nak_) ) + "\n";
    all_zeros &= (0 == i2c3_dev_nak_);
    r += indent_string + "  " + std::string("i2c3_data_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c3_data_nak_) ) + "\n";
    all_zeros &= (0 == i2c3_data_nak_);
    r += indent_string + "  " + std::string("i2c3_arb_lost") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c3_arb_lost_) ) + "\n";
    all_zeros &= (0 == i2c3_arb_lost_);
    r += indent_string + "  " + std::string("i2c4_dev_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c4_dev_nak_) ) + "\n";
    all_zeros &= (0 == i2c4_dev_nak_);
    r += indent_string + "  " + std::string("i2c4_data_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c4_data_nak_) ) + "\n";
    all_zeros &= (0 == i2c4_data_nak_);
    r += indent_string + "  " + std::string("i2c4_arb_lost") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c4_arb_lost_) ) + "\n";
    all_zeros &= (0 == i2c4_arb_lost_);
    r += indent_string + "  " + std::string("i2c5_dev_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c5_dev_nak_) ) + "\n";
    all_zeros &= (0 == i2c5_dev_nak_);
    r += indent_string + "  " + std::string("i2c5_data_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c5_data_nak_) ) + "\n";
    all_zeros &= (0 == i2c5_data_nak_);
    r += indent_string + "  " + std::string("i2c5_arb_lost") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c5_arb_lost_) ) + "\n";
    all_zeros &= (0 == i2c5_arb_lost_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("GpioCommonRegsEthGpioIntrEn0Mutable") + ":\n";
    r += indent_string + "  " + std::string("gpio0_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio0_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio0_edge_capt_);
    r += indent_string + "  " + std::string("gpio1_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio1_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio1_edge_capt_);
    r += indent_string + "  " + std::string("gpio2_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio2_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio2_edge_capt_);
    r += indent_string + "  " + std::string("gpio3_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio3_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio3_edge_capt_);
    r += indent_string + "  " + std::string("gpio4_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio4_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio4_edge_capt_);
    r += indent_string + "  " + std::string("gpio5_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio5_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio5_edge_capt_);
    r += indent_string + "  " + std::string("gpio6_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio6_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio6_edge_capt_);
    r += indent_string + "  " + std::string("gpio7_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio7_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio7_edge_capt_);
    r += indent_string + "  " + std::string("gpio8_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio8_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio8_edge_capt_);
    r += indent_string + "  " + std::string("gpio9_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio9_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio9_edge_capt_);
    r += indent_string + "  " + std::string("gpio10_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio10_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio10_edge_capt_);
    r += indent_string + "  " + std::string("gpio11_edge_capt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(gpio11_edge_capt_) ) + "\n";
    all_zeros &= (0 == gpio11_edge_capt_);
    r += indent_string + "  " + std::string("i2c0_dev_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c0_dev_nak_) ) + "\n";
    all_zeros &= (0 == i2c0_dev_nak_);
    r += indent_string + "  " + std::string("i2c0_data_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c0_data_nak_) ) + "\n";
    all_zeros &= (0 == i2c0_data_nak_);
    r += indent_string + "  " + std::string("i2c0_arb_lost") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c0_arb_lost_) ) + "\n";
    all_zeros &= (0 == i2c0_arb_lost_);
    r += indent_string + "  " + std::string("i2c1_dev_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c1_dev_nak_) ) + "\n";
    all_zeros &= (0 == i2c1_dev_nak_);
    r += indent_string + "  " + std::string("i2c1_data_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c1_data_nak_) ) + "\n";
    all_zeros &= (0 == i2c1_data_nak_);
    r += indent_string + "  " + std::string("i2c1_arb_lost") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c1_arb_lost_) ) + "\n";
    all_zeros &= (0 == i2c1_arb_lost_);
    r += indent_string + "  " + std::string("i2c2_dev_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c2_dev_nak_) ) + "\n";
    all_zeros &= (0 == i2c2_dev_nak_);
    r += indent_string + "  " + std::string("i2c2_data_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c2_data_nak_) ) + "\n";
    all_zeros &= (0 == i2c2_data_nak_);
    r += indent_string + "  " + std::string("i2c2_arb_lost") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c2_arb_lost_) ) + "\n";
    all_zeros &= (0 == i2c2_arb_lost_);
    r += indent_string + "  " + std::string("i2c3_dev_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c3_dev_nak_) ) + "\n";
    all_zeros &= (0 == i2c3_dev_nak_);
    r += indent_string + "  " + std::string("i2c3_data_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c3_data_nak_) ) + "\n";
    all_zeros &= (0 == i2c3_data_nak_);
    r += indent_string + "  " + std::string("i2c3_arb_lost") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c3_arb_lost_) ) + "\n";
    all_zeros &= (0 == i2c3_arb_lost_);
    r += indent_string + "  " + std::string("i2c4_dev_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c4_dev_nak_) ) + "\n";
    all_zeros &= (0 == i2c4_dev_nak_);
    r += indent_string + "  " + std::string("i2c4_data_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c4_data_nak_) ) + "\n";
    all_zeros &= (0 == i2c4_data_nak_);
    r += indent_string + "  " + std::string("i2c4_arb_lost") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c4_arb_lost_) ) + "\n";
    all_zeros &= (0 == i2c4_arb_lost_);
    r += indent_string + "  " + std::string("i2c5_dev_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c5_dev_nak_) ) + "\n";
    all_zeros &= (0 == i2c5_dev_nak_);
    r += indent_string + "  " + std::string("i2c5_data_nak") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c5_data_nak_) ) + "\n";
    all_zeros &= (0 == i2c5_data_nak_);
    r += indent_string + "  " + std::string("i2c5_arb_lost") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i2c5_arb_lost_) ) + "\n";
    all_zeros &= (0 == i2c5_arb_lost_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t gpio0_edge_capt_;
  uint8_t gpio1_edge_capt_;
  uint8_t gpio2_edge_capt_;
  uint8_t gpio3_edge_capt_;
  uint8_t gpio4_edge_capt_;
  uint8_t gpio5_edge_capt_;
  uint8_t gpio6_edge_capt_;
  uint8_t gpio7_edge_capt_;
  uint8_t gpio8_edge_capt_;
  uint8_t gpio9_edge_capt_;
  uint8_t gpio10_edge_capt_;
  uint8_t gpio11_edge_capt_;
  uint8_t i2c0_dev_nak_;
  uint8_t i2c0_data_nak_;
  uint8_t i2c0_arb_lost_;
  uint8_t i2c1_dev_nak_;
  uint8_t i2c1_data_nak_;
  uint8_t i2c1_arb_lost_;
  uint8_t i2c2_dev_nak_;
  uint8_t i2c2_data_nak_;
  uint8_t i2c2_arb_lost_;
  uint8_t i2c3_dev_nak_;
  uint8_t i2c3_data_nak_;
  uint8_t i2c3_arb_lost_;
  uint8_t i2c4_dev_nak_;
  uint8_t i2c4_data_nak_;
  uint8_t i2c4_arb_lost_;
  uint8_t i2c5_dev_nak_;
  uint8_t i2c5_data_nak_;
  uint8_t i2c5_arb_lost_;
private:
  static int StartOffset(
      JbayRegEnum selector_jbay_reg
      ) {
    int offset=0;
    switch (selector_jbay_reg) {
      case kEthgpiobr:
        offset += 0x2840000; // to get to ethgpiobr
        offset += 0x200; // to get to gpio_common_regs
        offset += 0x164; // to get to eth_gpio_intr_en0
        break;
      case kEthgpiotl:
        offset += 0x2880000; // to get to ethgpiotl
        offset += 0x200; // to get to gpio_common_regs
        offset += 0x164; // to get to eth_gpio_intr_en0
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_GPIO_COMMON_REGS_ETH_GPIO_INTR_EN0_MUTABLE_H__
