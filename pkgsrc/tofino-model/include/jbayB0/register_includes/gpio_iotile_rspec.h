/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_GPIO_IOTILE_RSPEC_H__
#define __REGISTER_INCLUDES_GPIO_IOTILE_RSPEC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "gpio_iotile_rspec_clkobs_ctrl.h"
#include "gpio_iotile_rspec_mdioci_ctrl.h"
#include "gpio_iotile_rspec_mdioci_en0.h"
#include "gpio_iotile_rspec_mdioci_en1.h"
#include "gpio_iotile_rspec_mdioci_freeze_enable.h"
#include "gpio_iotile_rspec_mdioci_int_stat.h"
#include "gpio_iotile_rspec_tile_softreset.h"

namespace jbayB0 {
  namespace register_classes {

class GpioIotileRspec : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum JbayRegEnum {
    kGpioIotileBl,
    kGpioIotileBr,
    kGpioIotileTl,
    kGpioIotileTr
  };
public:
  GpioIotileRspec(
      int chipNumber, JbayRegEnum selector_jbay_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_jbay_reg), 44, false, write_callback, read_callback, std::string("GpioIotileRspec")+":"+boost::lexical_cast<std::string>(selector_jbay_reg))
    {
    }
  GpioIotileRspec(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "GpioIotileRspec")
    {
    }
public:





  GpioIotileRspecClkobsCtrl &clkobs_ctrl() { return clkobs_ctrl_; }






  GpioIotileRspecMdiociCtrl &mdioci_ctrl() { return mdioci_ctrl_; }





  GpioIotileRspecMdiociIntStat &mdioci_int_stat() { return mdioci_int_stat_; }







  GpioIotileRspecMdiociEn0 &mdioci_en0() { return mdioci_en0_; }







  GpioIotileRspecMdiociEn1 &mdioci_en1() { return mdioci_en1_; }





  GpioIotileRspecMdiociFreezeEnable &mdioci_freeze_enable() { return mdioci_freeze_enable_; }





  GpioIotileRspecTileSoftreset &tile_softreset() { return tile_softreset_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      clkobs_ctrl_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      mdioci_ctrl_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      mdioci_int_stat_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      mdioci_en0_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      mdioci_en1_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      mdioci_freeze_enable_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      tile_softreset_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      clkobs_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      mdioci_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      mdioci_int_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      mdioci_en0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      mdioci_en1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      mdioci_freeze_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      tile_softreset_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    clkobs_ctrl_.reset();
    mdioci_ctrl_.reset();
    mdioci_int_stat_.reset();
    mdioci_en0_.reset();
    mdioci_en1_.reset();
    mdioci_freeze_enable_.reset();
    tile_softreset_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += clkobs_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += mdioci_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += mdioci_int_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += mdioci_en0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += mdioci_en1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += mdioci_freeze_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += tile_softreset_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += clkobs_ctrl_.to_string(print_zeros,indent_string) ;
    r += mdioci_ctrl_.to_string(print_zeros,indent_string) ;
    r += mdioci_int_stat_.to_string(print_zeros,indent_string) ;
    r += mdioci_en0_.to_string(print_zeros,indent_string) ;
    r += mdioci_en1_.to_string(print_zeros,indent_string) ;
    r += mdioci_freeze_enable_.to_string(print_zeros,indent_string) ;
    r += tile_softreset_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  GpioIotileRspecClkobsCtrl clkobs_ctrl_;
  GpioIotileRspecMdiociCtrl mdioci_ctrl_;
  GpioIotileRspecMdiociIntStat mdioci_int_stat_;
  GpioIotileRspecMdiociEn0 mdioci_en0_;
  GpioIotileRspecMdiociEn1 mdioci_en1_;
  GpioIotileRspecMdiociFreezeEnable mdioci_freeze_enable_;
  GpioIotileRspecTileSoftreset tile_softreset_;
private:
  static int StartOffset(
      JbayRegEnum selector_jbay_reg
      ) {
    int offset=0;
    switch (selector_jbay_reg) {
      case kGpioIotileBl:
        offset += 0x28c0000; // to get to gpio_iotile_bl
        break;
      case kGpioIotileBr:
        offset += 0x2900000; // to get to gpio_iotile_br
        break;
      case kGpioIotileTl:
        offset += 0x2980000; // to get to gpio_iotile_tl
        break;
      case kGpioIotileTr:
        offset += 0x2940000; // to get to gpio_iotile_tr
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_GPIO_IOTILE_RSPEC_H__
