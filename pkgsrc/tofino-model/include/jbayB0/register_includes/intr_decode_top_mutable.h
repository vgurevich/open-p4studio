/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_INTR_DECODE_TOP_MUTABLE_H__
#define __REGISTER_INCLUDES_INTR_DECODE_TOP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class IntrDecodeTopMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  IntrDecodeTopMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap), 4, true, write_callback, read_callback, std::string("IntrDecodeTopMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap))
    {
    }
  IntrDecodeTopMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "IntrDecodeTopMutable")
    {
    }
public:


  uint8_t intr_decode_mau_cfg() { return intr_decode_mau_cfg_; }
  void intr_decode_mau_cfg(const uint8_t &v) { intr_decode_mau_cfg_=v; }


  uint8_t intr_decode_mau_ad() { return intr_decode_mau_ad_; }
  void intr_decode_mau_ad(const uint8_t &v) { intr_decode_mau_ad_=v; }


  uint8_t intr_decode_mau_mmc_bot() { return intr_decode_mau_mmc_bot_; }
  void intr_decode_mau_mmc_bot(const uint8_t &v) { intr_decode_mau_mmc_bot_=v; }


  uint8_t intr_decode_mau_mmc_top() { return intr_decode_mau_mmc_top_; }
  void intr_decode_mau_mmc_top(const uint8_t &v) { intr_decode_mau_mmc_top_=v; }


  uint8_t intr_decode_mau_snapshot() { return intr_decode_mau_snapshot_; }
  void intr_decode_mau_snapshot(const uint8_t &v) { intr_decode_mau_snapshot_=v; }


  uint8_t intr_decode_mau_imem() { return intr_decode_mau_imem_; }
  void intr_decode_mau_imem(const uint8_t &v) { intr_decode_mau_imem_=v; }


  uint8_t intr_decode_mau_gfm_hash() { return intr_decode_mau_gfm_hash_; }
  void intr_decode_mau_gfm_hash(const uint8_t &v) { intr_decode_mau_gfm_hash_=v; }


  uint8_t intr_decode_mau_tcam_array() { return intr_decode_mau_tcam_array_; }
  void intr_decode_mau_tcam_array(const uint8_t &v) { intr_decode_mau_tcam_array_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (intr_decode_mau_cfg_ & 0x3);
    *data |= ((intr_decode_mau_ad_ & 0x3) << 2);
    *data |= ((intr_decode_mau_mmc_bot_ & 0x3) << 4);
    *data |= ((intr_decode_mau_mmc_top_ & 0x3) << 6);
    *data |= ((intr_decode_mau_snapshot_ & 0x3) << 8);
    *data |= ((intr_decode_mau_imem_ & 0x3) << 10);
    *data |= ((intr_decode_mau_gfm_hash_ & 0x3) << 12);
    *data |= ((intr_decode_mau_tcam_array_ & 0x3) << 14);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    intr_decode_mau_cfg_ = (data & 0x3);
    intr_decode_mau_ad_ = ((data >> 2) & 0x3);
    intr_decode_mau_mmc_bot_ = ((data >> 4) & 0x3);
    intr_decode_mau_mmc_top_ = ((data >> 6) & 0x3);
    intr_decode_mau_snapshot_ = ((data >> 8) & 0x3);
    intr_decode_mau_imem_ = ((data >> 10) & 0x3);
    intr_decode_mau_gfm_hash_ = ((data >> 12) & 0x3);
    intr_decode_mau_tcam_array_ = ((data >> 14) & 0x3);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    intr_decode_mau_cfg_ = 0x0;
    intr_decode_mau_ad_ = 0x0;
    intr_decode_mau_mmc_bot_ = 0x0;
    intr_decode_mau_mmc_top_ = 0x0;
    intr_decode_mau_snapshot_ = 0x0;
    intr_decode_mau_imem_ = 0x0;
    intr_decode_mau_gfm_hash_ = 0x0;
    intr_decode_mau_tcam_array_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("IntrDecodeTopMutable") + ":\n";
    r += indent_string + "  " + std::string("intr_decode_mau_cfg") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_decode_mau_cfg_) ) + "\n";
    all_zeros &= (0 == intr_decode_mau_cfg_);
    r += indent_string + "  " + std::string("intr_decode_mau_ad") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_decode_mau_ad_) ) + "\n";
    all_zeros &= (0 == intr_decode_mau_ad_);
    r += indent_string + "  " + std::string("intr_decode_mau_mmc_bot") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_decode_mau_mmc_bot_) ) + "\n";
    all_zeros &= (0 == intr_decode_mau_mmc_bot_);
    r += indent_string + "  " + std::string("intr_decode_mau_mmc_top") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_decode_mau_mmc_top_) ) + "\n";
    all_zeros &= (0 == intr_decode_mau_mmc_top_);
    r += indent_string + "  " + std::string("intr_decode_mau_snapshot") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_decode_mau_snapshot_) ) + "\n";
    all_zeros &= (0 == intr_decode_mau_snapshot_);
    r += indent_string + "  " + std::string("intr_decode_mau_imem") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_decode_mau_imem_) ) + "\n";
    all_zeros &= (0 == intr_decode_mau_imem_);
    r += indent_string + "  " + std::string("intr_decode_mau_gfm_hash") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_decode_mau_gfm_hash_) ) + "\n";
    all_zeros &= (0 == intr_decode_mau_gfm_hash_);
    r += indent_string + "  " + std::string("intr_decode_mau_tcam_array") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_decode_mau_tcam_array_) ) + "\n";
    all_zeros &= (0 == intr_decode_mau_tcam_array_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("IntrDecodeTopMutable") + ":\n";
    r += indent_string + "  " + std::string("intr_decode_mau_cfg") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_decode_mau_cfg_) ) + "\n";
    all_zeros &= (0 == intr_decode_mau_cfg_);
    r += indent_string + "  " + std::string("intr_decode_mau_ad") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_decode_mau_ad_) ) + "\n";
    all_zeros &= (0 == intr_decode_mau_ad_);
    r += indent_string + "  " + std::string("intr_decode_mau_mmc_bot") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_decode_mau_mmc_bot_) ) + "\n";
    all_zeros &= (0 == intr_decode_mau_mmc_bot_);
    r += indent_string + "  " + std::string("intr_decode_mau_mmc_top") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_decode_mau_mmc_top_) ) + "\n";
    all_zeros &= (0 == intr_decode_mau_mmc_top_);
    r += indent_string + "  " + std::string("intr_decode_mau_snapshot") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_decode_mau_snapshot_) ) + "\n";
    all_zeros &= (0 == intr_decode_mau_snapshot_);
    r += indent_string + "  " + std::string("intr_decode_mau_imem") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_decode_mau_imem_) ) + "\n";
    all_zeros &= (0 == intr_decode_mau_imem_);
    r += indent_string + "  " + std::string("intr_decode_mau_gfm_hash") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_decode_mau_gfm_hash_) ) + "\n";
    all_zeros &= (0 == intr_decode_mau_gfm_hash_);
    r += indent_string + "  " + std::string("intr_decode_mau_tcam_array") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(intr_decode_mau_tcam_array_) ) + "\n";
    all_zeros &= (0 == intr_decode_mau_tcam_array_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t intr_decode_mau_cfg_;
  uint8_t intr_decode_mau_ad_;
  uint8_t intr_decode_mau_mmc_bot_;
  uint8_t intr_decode_mau_mmc_top_;
  uint8_t intr_decode_mau_snapshot_;
  uint8_t intr_decode_mau_imem_;
  uint8_t intr_decode_mau_gfm_hash_;
  uint8_t intr_decode_mau_tcam_array_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x40000; // to get to cfg_regs
    offset += 0x30; // to get to intr_decode_top
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_INTR_DECODE_TOP_MUTABLE_H__
