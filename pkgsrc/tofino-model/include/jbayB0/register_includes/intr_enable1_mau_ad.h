/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_INTR_ENABLE1_MAU_AD_H__
#define __REGISTER_INCLUDES_INTR_ENABLE1_MAU_AD_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class IntrEnable1MauAd : public model_core::RegisterBlock<RegisterCallback> {
public:
  IntrEnable1MauAd(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap), 4, false, write_callback, read_callback, std::string("IntrEnable1MauAd")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap))
    {
    }
  IntrEnable1MauAd(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "IntrEnable1MauAd")
    {
    }
public:



  uint8_t &def_stats_sbe() { return def_stats_sbe_; }



  uint8_t &def_meter_sbe() { return def_meter_sbe_; }


  uint8_t &idletime_slip() { return idletime_slip_; }


  uint8_t &meter_sweep() { return meter_sweep_; }


  uint8_t &stateful_log_done() { return stateful_log_done_; }


  uint8_t &stateful_log_watermark() { return stateful_log_watermark_; }



  uint8_t &stateful_log_overflow() { return stateful_log_overflow_; }



  uint8_t &stateful_log_underflow() { return stateful_log_underflow_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (def_stats_sbe_ & 0xf);
    *data |= ((def_meter_sbe_ & 0xf) << 4);
    *data |= ((idletime_slip_ & 0x1) << 8);
    *data |= ((meter_sweep_ & 0x1) << 9);
    *data |= ((stateful_log_done_ & 0xf) << 10);
    *data |= ((stateful_log_watermark_ & 0xf) << 14);
    *data |= ((stateful_log_overflow_ & 0xf) << 18);
    *data |= ((stateful_log_underflow_ & 0xf) << 22);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    def_stats_sbe_ = (data & 0xf);
    def_meter_sbe_ = ((data >> 4) & 0xf);
    idletime_slip_ = ((data >> 8) & 0x1);
    meter_sweep_ = ((data >> 9) & 0x1);
    stateful_log_done_ = ((data >> 10) & 0xf);
    stateful_log_watermark_ = ((data >> 14) & 0xf);
    stateful_log_overflow_ = ((data >> 18) & 0xf);
    stateful_log_underflow_ = ((data >> 22) & 0xf);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    def_stats_sbe_ = 0x0;
    def_meter_sbe_ = 0x0;
    idletime_slip_ = 0x0;
    meter_sweep_ = 0x0;
    stateful_log_done_ = 0x0;
    stateful_log_watermark_ = 0x0;
    stateful_log_overflow_ = 0x0;
    stateful_log_underflow_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("IntrEnable1MauAd") + ":\n";
    r += indent_string + "  " + std::string("def_stats_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(def_stats_sbe_) ) + "\n";
    all_zeros &= (0 == def_stats_sbe_);
    r += indent_string + "  " + std::string("def_meter_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(def_meter_sbe_) ) + "\n";
    all_zeros &= (0 == def_meter_sbe_);
    r += indent_string + "  " + std::string("idletime_slip") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idletime_slip_) ) + "\n";
    all_zeros &= (0 == idletime_slip_);
    r += indent_string + "  " + std::string("meter_sweep") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meter_sweep_) ) + "\n";
    all_zeros &= (0 == meter_sweep_);
    r += indent_string + "  " + std::string("stateful_log_done") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stateful_log_done_) ) + "\n";
    all_zeros &= (0 == stateful_log_done_);
    r += indent_string + "  " + std::string("stateful_log_watermark") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stateful_log_watermark_) ) + "\n";
    all_zeros &= (0 == stateful_log_watermark_);
    r += indent_string + "  " + std::string("stateful_log_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stateful_log_overflow_) ) + "\n";
    all_zeros &= (0 == stateful_log_overflow_);
    r += indent_string + "  " + std::string("stateful_log_underflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stateful_log_underflow_) ) + "\n";
    all_zeros &= (0 == stateful_log_underflow_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("IntrEnable1MauAd") + ":\n";
    r += indent_string + "  " + std::string("def_stats_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(def_stats_sbe_) ) + "\n";
    all_zeros &= (0 == def_stats_sbe_);
    r += indent_string + "  " + std::string("def_meter_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(def_meter_sbe_) ) + "\n";
    all_zeros &= (0 == def_meter_sbe_);
    r += indent_string + "  " + std::string("idletime_slip") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idletime_slip_) ) + "\n";
    all_zeros &= (0 == idletime_slip_);
    r += indent_string + "  " + std::string("meter_sweep") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meter_sweep_) ) + "\n";
    all_zeros &= (0 == meter_sweep_);
    r += indent_string + "  " + std::string("stateful_log_done") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stateful_log_done_) ) + "\n";
    all_zeros &= (0 == stateful_log_done_);
    r += indent_string + "  " + std::string("stateful_log_watermark") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stateful_log_watermark_) ) + "\n";
    all_zeros &= (0 == stateful_log_watermark_);
    r += indent_string + "  " + std::string("stateful_log_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stateful_log_overflow_) ) + "\n";
    all_zeros &= (0 == stateful_log_overflow_);
    r += indent_string + "  " + std::string("stateful_log_underflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stateful_log_underflow_) ) + "\n";
    all_zeros &= (0 == stateful_log_underflow_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t def_stats_sbe_;
  uint8_t def_meter_sbe_;
  uint8_t idletime_slip_;
  uint8_t meter_sweep_;
  uint8_t stateful_log_done_;
  uint8_t stateful_log_watermark_;
  uint8_t stateful_log_overflow_;
  uint8_t stateful_log_underflow_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to rams
    offset += 0x18000; // to get to match
    offset += 0x5c0; // to get to intr_enable1_mau_ad
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_INTR_ENABLE1_MAU_AD_H__
