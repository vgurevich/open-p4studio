/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_IPB_RSPEC_CHAN0_GROUP_H__
#define __REGISTER_INCLUDES_IPB_RSPEC_CHAN0_GROUP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "chnl_acc_ctrl.h"
#include "chnl_acc_stat.h"
#include "chnl_ctrl.h"
#include "chnl_deparser_drop_pkt.h"
#include "chnl_deparser_send_pkt.h"
#include "chnl_drop_trunc_pkt.h"
#include "chnl_fifo_ctrl.h"
#include "chnl_macs_received_pkt.h"
#include "chnl_meta.h"
#include "chnl_metanum.h"
#include "chnl_metanum_cfg.h"
#include "chnl_parser_discard_pkt.h"
#include "chnl_parser_send_pkt.h"
#include "chnl_pktnum0.h"
#include "chnl_pktnum0_cfg.h"
#include "chnl_pktnum1.h"
#include "chnl_pktnum1_cfg.h"
#include "chnl_resubmit_discard_pkt.h"
#include "chnl_resubmit_received_pkt.h"
#include "chnl_stat.h"
#include "chnl_wsch_discard_pkt.h"
#include "chnl_wsch_trunc_pkt.h"
#include "meta_fifo_ctrl.h"

namespace jbayB0 {
  namespace register_classes {

class IpbRspecChan0Group : public model_core::RegisterBlock<RegisterCallback> {
public:
  IpbRspecChan0Group(
      int chipNumber, int index_pipe_addrmap, int index_ipb_prsr4_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ipb_prsr4_reg), 216, false, write_callback, read_callback, std::string("IpbRspecChan0Group")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ipb_prsr4_reg))
    {
    }
  IpbRspecChan0Group(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "IpbRspecChan0Group")
    {
    }
public:





  ChnlCtrl &chan0_group_chnl_ctrl() { return chan0_group_chnl_ctrl_; }






  ChnlMeta &chan0_group_chnl_meta() { return chan0_group_chnl_meta_; }





  MetaFifoCtrl &chan0_group_meta_fifo_ctrl() { return chan0_group_meta_fifo_ctrl_; }





  ChnlFifoCtrl &chan0_group_chnl_fifo_ctrl() { return chan0_group_chnl_fifo_ctrl_; }





  ChnlAccCtrl &chan0_group_chnl_acc_ctrl() { return chan0_group_chnl_acc_ctrl_; }





  ChnlAccStat &chan0_group_chnl_acc_stat() { return chan0_group_chnl_acc_stat_; }







  ChnlPktnum0Cfg &chan0_group_chnl_pktnum0_cfg() { return chan0_group_chnl_pktnum0_cfg_; }







  ChnlPktnum1Cfg &chan0_group_chnl_pktnum1_cfg() { return chan0_group_chnl_pktnum1_cfg_; }







  ChnlMetanumCfg &chan0_group_chnl_metanum_cfg() { return chan0_group_chnl_metanum_cfg_; }






  ChnlStat &chan0_group_chnl_stat() { return chan0_group_chnl_stat_; }








  ChnlPktnum0 &chan0_group_chnl_pktnum0() { return chan0_group_chnl_pktnum0_; }






  ChnlPktnum1 &chan0_group_chnl_pktnum1() { return chan0_group_chnl_pktnum1_; }







  ChnlMetanum &chan0_group_chnl_metanum() { return chan0_group_chnl_metanum_; }





  ChnlDeparserDropPkt &chan0_group_chnl_deparser_drop_pkt() { return chan0_group_chnl_deparser_drop_pkt_; }









  ChnlWschDiscardPkt &chan0_group_chnl_wsch_discard_pkt() { return chan0_group_chnl_wsch_discard_pkt_; }





  ChnlWschTruncPkt &chan0_group_chnl_wsch_trunc_pkt() { return chan0_group_chnl_wsch_trunc_pkt_; }





  ChnlDropTruncPkt &chan0_group_chnl_drop_trunc_pkt() { return chan0_group_chnl_drop_trunc_pkt_; }





  ChnlResubmitDiscardPkt &chan0_group_chnl_resubmit_discard_pkt() { return chan0_group_chnl_resubmit_discard_pkt_; }





  ChnlParserDiscardPkt &chan0_group_chnl_parser_discard_pkt() { return chan0_group_chnl_parser_discard_pkt_; }








  ChnlParserSendPkt &chan0_group_chnl_parser_send_pkt() { return chan0_group_chnl_parser_send_pkt_; }








  ChnlDeparserSendPkt &chan0_group_chnl_deparser_send_pkt() { return chan0_group_chnl_deparser_send_pkt_; }





  ChnlMacsReceivedPkt &chan0_group_chnl_macs_received_pkt() { return chan0_group_chnl_macs_received_pkt_; }





  ChnlResubmitReceivedPkt &chan0_group_chnl_resubmit_received_pkt() { return chan0_group_chnl_resubmit_received_pkt_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x800 && offset < 0x808) {
      offset -= 0x800;
      if (read_callback_) read_callback_();
      chan0_group_chnl_ctrl_.read( offset, data );
    }
    else if (offset >= 0x810 && offset < 0x820) {
      offset -= 0x810;
      if (read_callback_) read_callback_();
      chan0_group_chnl_meta_.read( offset, data );
    }
    else if (offset >= 0x820 && offset < 0x824) {
      offset -= 0x820;
      if (read_callback_) read_callback_();
      chan0_group_meta_fifo_ctrl_.read( offset, data );
    }
    else if (offset >= 0x830 && offset < 0x83c) {
      offset -= 0x830;
      if (read_callback_) read_callback_();
      chan0_group_chnl_fifo_ctrl_.read( offset, data );
    }
    else if (offset >= 0x840 && offset < 0x84c) {
      offset -= 0x840;
      if (read_callback_) read_callback_();
      chan0_group_chnl_acc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x84c && offset < 0x850) {
      offset -= 0x84c;
      if (read_callback_) read_callback_();
      chan0_group_chnl_acc_stat_.read( offset, data );
    }
    else if (offset >= 0x850 && offset < 0x854) {
      offset -= 0x850;
      if (read_callback_) read_callback_();
      chan0_group_chnl_pktnum0_cfg_.read( offset, data );
    }
    else if (offset >= 0x854 && offset < 0x858) {
      offset -= 0x854;
      if (read_callback_) read_callback_();
      chan0_group_chnl_pktnum1_cfg_.read( offset, data );
    }
    else if (offset >= 0x858 && offset < 0x85c) {
      offset -= 0x858;
      if (read_callback_) read_callback_();
      chan0_group_chnl_metanum_cfg_.read( offset, data );
    }
    else if (offset >= 0x85c && offset < 0x860) {
      offset -= 0x85c;
      if (read_callback_) read_callback_();
      chan0_group_chnl_stat_.read( offset, data );
    }
    else if (offset >= 0x860 && offset < 0x864) {
      offset -= 0x860;
      if (read_callback_) read_callback_();
      chan0_group_chnl_pktnum0_.read( offset, data );
    }
    else if (offset >= 0x864 && offset < 0x868) {
      offset -= 0x864;
      if (read_callback_) read_callback_();
      chan0_group_chnl_pktnum1_.read( offset, data );
    }
    else if (offset >= 0x868 && offset < 0x86c) {
      offset -= 0x868;
      if (read_callback_) read_callback_();
      chan0_group_chnl_metanum_.read( offset, data );
    }
    else if (offset >= 0x870 && offset < 0x878) {
      offset -= 0x870;
      if (read_callback_) read_callback_();
      chan0_group_chnl_deparser_drop_pkt_.read( offset, data );
    }
    else if (offset >= 0x878 && offset < 0x880) {
      offset -= 0x878;
      if (read_callback_) read_callback_();
      chan0_group_chnl_wsch_discard_pkt_.read( offset, data );
    }
    else if (offset >= 0x880 && offset < 0x888) {
      offset -= 0x880;
      if (read_callback_) read_callback_();
      chan0_group_chnl_wsch_trunc_pkt_.read( offset, data );
    }
    else if (offset >= 0x888 && offset < 0x890) {
      offset -= 0x888;
      if (read_callback_) read_callback_();
      chan0_group_chnl_drop_trunc_pkt_.read( offset, data );
    }
    else if (offset >= 0x890 && offset < 0x898) {
      offset -= 0x890;
      if (read_callback_) read_callback_();
      chan0_group_chnl_resubmit_discard_pkt_.read( offset, data );
    }
    else if (offset >= 0x898 && offset < 0x8a0) {
      offset -= 0x898;
      if (read_callback_) read_callback_();
      chan0_group_chnl_parser_discard_pkt_.read( offset, data );
    }
    else if (offset >= 0x8a0 && offset < 0x8ac) {
      offset -= 0x8a0;
      if (read_callback_) read_callback_();
      chan0_group_chnl_parser_send_pkt_.read( offset, data );
    }
    else if (offset >= 0x8b0 && offset < 0x8bc) {
      offset -= 0x8b0;
      if (read_callback_) read_callback_();
      chan0_group_chnl_deparser_send_pkt_.read( offset, data );
    }
    else if (offset >= 0x8c0 && offset < 0x8cc) {
      offset -= 0x8c0;
      if (read_callback_) read_callback_();
      chan0_group_chnl_macs_received_pkt_.read( offset, data );
    }
    else if (offset >= 0x8d0 && offset < 0x8d8) {
      offset -= 0x8d0;
      if (read_callback_) read_callback_();
      chan0_group_chnl_resubmit_received_pkt_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x800 && offset < 0x808) {
      offset -= 0x800;
      chan0_group_chnl_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x810 && offset < 0x820) {
      offset -= 0x810;
      chan0_group_chnl_meta_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x820 && offset < 0x824) {
      offset -= 0x820;
      chan0_group_meta_fifo_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x830 && offset < 0x83c) {
      offset -= 0x830;
      chan0_group_chnl_fifo_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x840 && offset < 0x84c) {
      offset -= 0x840;
      chan0_group_chnl_acc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x84c && offset < 0x850) {
      offset -= 0x84c;
      chan0_group_chnl_acc_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x850 && offset < 0x854) {
      offset -= 0x850;
      chan0_group_chnl_pktnum0_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x854 && offset < 0x858) {
      offset -= 0x854;
      chan0_group_chnl_pktnum1_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x858 && offset < 0x85c) {
      offset -= 0x858;
      chan0_group_chnl_metanum_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x85c && offset < 0x860) {
      offset -= 0x85c;
      chan0_group_chnl_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x860 && offset < 0x864) {
      offset -= 0x860;
      chan0_group_chnl_pktnum0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x864 && offset < 0x868) {
      offset -= 0x864;
      chan0_group_chnl_pktnum1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x868 && offset < 0x86c) {
      offset -= 0x868;
      chan0_group_chnl_metanum_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x870 && offset < 0x878) {
      offset -= 0x870;
      chan0_group_chnl_deparser_drop_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x878 && offset < 0x880) {
      offset -= 0x878;
      chan0_group_chnl_wsch_discard_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x880 && offset < 0x888) {
      offset -= 0x880;
      chan0_group_chnl_wsch_trunc_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x888 && offset < 0x890) {
      offset -= 0x888;
      chan0_group_chnl_drop_trunc_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x890 && offset < 0x898) {
      offset -= 0x890;
      chan0_group_chnl_resubmit_discard_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x898 && offset < 0x8a0) {
      offset -= 0x898;
      chan0_group_chnl_parser_discard_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8a0 && offset < 0x8ac) {
      offset -= 0x8a0;
      chan0_group_chnl_parser_send_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8b0 && offset < 0x8bc) {
      offset -= 0x8b0;
      chan0_group_chnl_deparser_send_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8c0 && offset < 0x8cc) {
      offset -= 0x8c0;
      chan0_group_chnl_macs_received_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8d0 && offset < 0x8d8) {
      offset -= 0x8d0;
      chan0_group_chnl_resubmit_received_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    chan0_group_chnl_ctrl_.reset();
    chan0_group_chnl_meta_.reset();
    chan0_group_meta_fifo_ctrl_.reset();
    chan0_group_chnl_fifo_ctrl_.reset();
    chan0_group_chnl_acc_ctrl_.reset();
    chan0_group_chnl_acc_stat_.reset();
    chan0_group_chnl_pktnum0_cfg_.reset();
    chan0_group_chnl_pktnum1_cfg_.reset();
    chan0_group_chnl_metanum_cfg_.reset();
    chan0_group_chnl_stat_.reset();
    chan0_group_chnl_pktnum0_.reset();
    chan0_group_chnl_pktnum1_.reset();
    chan0_group_chnl_metanum_.reset();
    chan0_group_chnl_deparser_drop_pkt_.reset();
    chan0_group_chnl_wsch_discard_pkt_.reset();
    chan0_group_chnl_wsch_trunc_pkt_.reset();
    chan0_group_chnl_drop_trunc_pkt_.reset();
    chan0_group_chnl_resubmit_discard_pkt_.reset();
    chan0_group_chnl_parser_discard_pkt_.reset();
    chan0_group_chnl_parser_send_pkt_.reset();
    chan0_group_chnl_deparser_send_pkt_.reset();
    chan0_group_chnl_macs_received_pkt_.reset();
    chan0_group_chnl_resubmit_received_pkt_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x800 && offset < 0x808) {
      offset -= 0x800;
      r += chan0_group_chnl_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x810 && offset < 0x820) {
      offset -= 0x810;
      r += chan0_group_chnl_meta_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x820 && offset < 0x824) {
      offset -= 0x820;
      r += chan0_group_meta_fifo_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x830 && offset < 0x83c) {
      offset -= 0x830;
      r += chan0_group_chnl_fifo_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x840 && offset < 0x84c) {
      offset -= 0x840;
      r += chan0_group_chnl_acc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x84c && offset < 0x850) {
      offset -= 0x84c;
      r += chan0_group_chnl_acc_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x850 && offset < 0x854) {
      offset -= 0x850;
      r += chan0_group_chnl_pktnum0_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x854 && offset < 0x858) {
      offset -= 0x854;
      r += chan0_group_chnl_pktnum1_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x858 && offset < 0x85c) {
      offset -= 0x858;
      r += chan0_group_chnl_metanum_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x85c && offset < 0x860) {
      offset -= 0x85c;
      r += chan0_group_chnl_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x860 && offset < 0x864) {
      offset -= 0x860;
      r += chan0_group_chnl_pktnum0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x864 && offset < 0x868) {
      offset -= 0x864;
      r += chan0_group_chnl_pktnum1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x868 && offset < 0x86c) {
      offset -= 0x868;
      r += chan0_group_chnl_metanum_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x870 && offset < 0x878) {
      offset -= 0x870;
      r += chan0_group_chnl_deparser_drop_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x878 && offset < 0x880) {
      offset -= 0x878;
      r += chan0_group_chnl_wsch_discard_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x880 && offset < 0x888) {
      offset -= 0x880;
      r += chan0_group_chnl_wsch_trunc_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x888 && offset < 0x890) {
      offset -= 0x888;
      r += chan0_group_chnl_drop_trunc_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x890 && offset < 0x898) {
      offset -= 0x890;
      r += chan0_group_chnl_resubmit_discard_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x898 && offset < 0x8a0) {
      offset -= 0x898;
      r += chan0_group_chnl_parser_discard_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8a0 && offset < 0x8ac) {
      offset -= 0x8a0;
      r += chan0_group_chnl_parser_send_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8b0 && offset < 0x8bc) {
      offset -= 0x8b0;
      r += chan0_group_chnl_deparser_send_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8c0 && offset < 0x8cc) {
      offset -= 0x8c0;
      r += chan0_group_chnl_macs_received_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8d0 && offset < 0x8d8) {
      offset -= 0x8d0;
      r += chan0_group_chnl_resubmit_received_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += chan0_group_chnl_ctrl_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_meta_.to_string(print_zeros,indent_string) ;
    r += chan0_group_meta_fifo_ctrl_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_fifo_ctrl_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_acc_ctrl_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_acc_stat_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_pktnum0_cfg_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_pktnum1_cfg_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_metanum_cfg_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_stat_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_pktnum0_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_pktnum1_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_metanum_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_deparser_drop_pkt_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_wsch_discard_pkt_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_wsch_trunc_pkt_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_drop_trunc_pkt_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_resubmit_discard_pkt_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_parser_discard_pkt_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_parser_send_pkt_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_deparser_send_pkt_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_macs_received_pkt_.to_string(print_zeros,indent_string) ;
    r += chan0_group_chnl_resubmit_received_pkt_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  ChnlCtrl chan0_group_chnl_ctrl_;
  ChnlMeta chan0_group_chnl_meta_;
  MetaFifoCtrl chan0_group_meta_fifo_ctrl_;
  ChnlFifoCtrl chan0_group_chnl_fifo_ctrl_;
  ChnlAccCtrl chan0_group_chnl_acc_ctrl_;
  ChnlAccStat chan0_group_chnl_acc_stat_;
  ChnlPktnum0Cfg chan0_group_chnl_pktnum0_cfg_;
  ChnlPktnum1Cfg chan0_group_chnl_pktnum1_cfg_;
  ChnlMetanumCfg chan0_group_chnl_metanum_cfg_;
  ChnlStat chan0_group_chnl_stat_;
  ChnlPktnum0 chan0_group_chnl_pktnum0_;
  ChnlPktnum1 chan0_group_chnl_pktnum1_;
  ChnlMetanum chan0_group_chnl_metanum_;
  ChnlDeparserDropPkt chan0_group_chnl_deparser_drop_pkt_;
  ChnlWschDiscardPkt chan0_group_chnl_wsch_discard_pkt_;
  ChnlWschTruncPkt chan0_group_chnl_wsch_trunc_pkt_;
  ChnlDropTruncPkt chan0_group_chnl_drop_trunc_pkt_;
  ChnlResubmitDiscardPkt chan0_group_chnl_resubmit_discard_pkt_;
  ChnlParserDiscardPkt chan0_group_chnl_parser_discard_pkt_;
  ChnlParserSendPkt chan0_group_chnl_parser_send_pkt_;
  ChnlDeparserSendPkt chan0_group_chnl_deparser_send_pkt_;
  ChnlMacsReceivedPkt chan0_group_chnl_macs_received_pkt_;
  ChnlResubmitReceivedPkt chan0_group_chnl_resubmit_received_pkt_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ipb_prsr4_reg
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    assert(index_ipb_prsr4_reg < 9);
    offset += index_ipb_prsr4_reg * 0x2000; // ipb_prsr4_reg[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_IPB_RSPEC_CHAN0_GROUP_H__
