/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_IPB_RSPEC_CHAN3_GROUP_H__
#define __REGISTER_INCLUDES_IPB_RSPEC_CHAN3_GROUP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "chnl_acc_ctrl.h"
#include "chnl_acc_stat.h"
#include "chnl_ctrl.h"
#include "chnl_deparser_drop_pkt.h"
#include "chnl_deparser_send_pkt.h"
#include "chnl_drop_trunc_pkt.h"
#include "chnl_fifo_ctrl.h"
#include "chnl_macs_received_pkt.h"
#include "chnl_meta.h"
#include "chnl_metanum.h"
#include "chnl_metanum_cfg.h"
#include "chnl_parser_discard_pkt.h"
#include "chnl_parser_send_pkt.h"
#include "chnl_pktnum0.h"
#include "chnl_pktnum0_cfg.h"
#include "chnl_pktnum1.h"
#include "chnl_pktnum1_cfg.h"
#include "chnl_resubmit_discard_pkt.h"
#include "chnl_resubmit_received_pkt.h"
#include "chnl_stat.h"
#include "chnl_wsch_discard_pkt.h"
#include "chnl_wsch_trunc_pkt.h"
#include "meta_fifo_ctrl.h"

namespace jbayB0 {
  namespace register_classes {

class IpbRspecChan3Group : public model_core::RegisterBlock<RegisterCallback> {
public:
  IpbRspecChan3Group(
      int chipNumber, int index_pipe_addrmap, int index_ipb_prsr4_reg, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ipb_prsr4_reg), 216, false, write_callback, read_callback, std::string("IpbRspecChan3Group")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ipb_prsr4_reg))
    {
    }
  IpbRspecChan3Group(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "IpbRspecChan3Group")
    {
    }
public:





  ChnlCtrl &chan3_group_chnl_ctrl() { return chan3_group_chnl_ctrl_; }






  ChnlMeta &chan3_group_chnl_meta() { return chan3_group_chnl_meta_; }





  MetaFifoCtrl &chan3_group_meta_fifo_ctrl() { return chan3_group_meta_fifo_ctrl_; }





  ChnlFifoCtrl &chan3_group_chnl_fifo_ctrl() { return chan3_group_chnl_fifo_ctrl_; }





  ChnlAccCtrl &chan3_group_chnl_acc_ctrl() { return chan3_group_chnl_acc_ctrl_; }





  ChnlAccStat &chan3_group_chnl_acc_stat() { return chan3_group_chnl_acc_stat_; }







  ChnlPktnum0Cfg &chan3_group_chnl_pktnum0_cfg() { return chan3_group_chnl_pktnum0_cfg_; }







  ChnlPktnum1Cfg &chan3_group_chnl_pktnum1_cfg() { return chan3_group_chnl_pktnum1_cfg_; }







  ChnlMetanumCfg &chan3_group_chnl_metanum_cfg() { return chan3_group_chnl_metanum_cfg_; }






  ChnlStat &chan3_group_chnl_stat() { return chan3_group_chnl_stat_; }








  ChnlPktnum0 &chan3_group_chnl_pktnum0() { return chan3_group_chnl_pktnum0_; }






  ChnlPktnum1 &chan3_group_chnl_pktnum1() { return chan3_group_chnl_pktnum1_; }







  ChnlMetanum &chan3_group_chnl_metanum() { return chan3_group_chnl_metanum_; }





  ChnlDeparserDropPkt &chan3_group_chnl_deparser_drop_pkt() { return chan3_group_chnl_deparser_drop_pkt_; }









  ChnlWschDiscardPkt &chan3_group_chnl_wsch_discard_pkt() { return chan3_group_chnl_wsch_discard_pkt_; }





  ChnlWschTruncPkt &chan3_group_chnl_wsch_trunc_pkt() { return chan3_group_chnl_wsch_trunc_pkt_; }





  ChnlDropTruncPkt &chan3_group_chnl_drop_trunc_pkt() { return chan3_group_chnl_drop_trunc_pkt_; }





  ChnlResubmitDiscardPkt &chan3_group_chnl_resubmit_discard_pkt() { return chan3_group_chnl_resubmit_discard_pkt_; }





  ChnlParserDiscardPkt &chan3_group_chnl_parser_discard_pkt() { return chan3_group_chnl_parser_discard_pkt_; }








  ChnlParserSendPkt &chan3_group_chnl_parser_send_pkt() { return chan3_group_chnl_parser_send_pkt_; }








  ChnlDeparserSendPkt &chan3_group_chnl_deparser_send_pkt() { return chan3_group_chnl_deparser_send_pkt_; }





  ChnlMacsReceivedPkt &chan3_group_chnl_macs_received_pkt() { return chan3_group_chnl_macs_received_pkt_; }





  ChnlResubmitReceivedPkt &chan3_group_chnl_resubmit_received_pkt() { return chan3_group_chnl_resubmit_received_pkt_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0xb00 && offset < 0xb08) {
      offset -= 0xb00;
      if (read_callback_) read_callback_();
      chan3_group_chnl_ctrl_.read( offset, data );
    }
    else if (offset >= 0xb10 && offset < 0xb20) {
      offset -= 0xb10;
      if (read_callback_) read_callback_();
      chan3_group_chnl_meta_.read( offset, data );
    }
    else if (offset >= 0xb20 && offset < 0xb24) {
      offset -= 0xb20;
      if (read_callback_) read_callback_();
      chan3_group_meta_fifo_ctrl_.read( offset, data );
    }
    else if (offset >= 0xb30 && offset < 0xb3c) {
      offset -= 0xb30;
      if (read_callback_) read_callback_();
      chan3_group_chnl_fifo_ctrl_.read( offset, data );
    }
    else if (offset >= 0xb40 && offset < 0xb4c) {
      offset -= 0xb40;
      if (read_callback_) read_callback_();
      chan3_group_chnl_acc_ctrl_.read( offset, data );
    }
    else if (offset >= 0xb4c && offset < 0xb50) {
      offset -= 0xb4c;
      if (read_callback_) read_callback_();
      chan3_group_chnl_acc_stat_.read( offset, data );
    }
    else if (offset >= 0xb50 && offset < 0xb54) {
      offset -= 0xb50;
      if (read_callback_) read_callback_();
      chan3_group_chnl_pktnum0_cfg_.read( offset, data );
    }
    else if (offset >= 0xb54 && offset < 0xb58) {
      offset -= 0xb54;
      if (read_callback_) read_callback_();
      chan3_group_chnl_pktnum1_cfg_.read( offset, data );
    }
    else if (offset >= 0xb58 && offset < 0xb5c) {
      offset -= 0xb58;
      if (read_callback_) read_callback_();
      chan3_group_chnl_metanum_cfg_.read( offset, data );
    }
    else if (offset >= 0xb5c && offset < 0xb60) {
      offset -= 0xb5c;
      if (read_callback_) read_callback_();
      chan3_group_chnl_stat_.read( offset, data );
    }
    else if (offset >= 0xb60 && offset < 0xb64) {
      offset -= 0xb60;
      if (read_callback_) read_callback_();
      chan3_group_chnl_pktnum0_.read( offset, data );
    }
    else if (offset >= 0xb64 && offset < 0xb68) {
      offset -= 0xb64;
      if (read_callback_) read_callback_();
      chan3_group_chnl_pktnum1_.read( offset, data );
    }
    else if (offset >= 0xb68 && offset < 0xb6c) {
      offset -= 0xb68;
      if (read_callback_) read_callback_();
      chan3_group_chnl_metanum_.read( offset, data );
    }
    else if (offset >= 0xb70 && offset < 0xb78) {
      offset -= 0xb70;
      if (read_callback_) read_callback_();
      chan3_group_chnl_deparser_drop_pkt_.read( offset, data );
    }
    else if (offset >= 0xb78 && offset < 0xb80) {
      offset -= 0xb78;
      if (read_callback_) read_callback_();
      chan3_group_chnl_wsch_discard_pkt_.read( offset, data );
    }
    else if (offset >= 0xb80 && offset < 0xb88) {
      offset -= 0xb80;
      if (read_callback_) read_callback_();
      chan3_group_chnl_wsch_trunc_pkt_.read( offset, data );
    }
    else if (offset >= 0xb88 && offset < 0xb90) {
      offset -= 0xb88;
      if (read_callback_) read_callback_();
      chan3_group_chnl_drop_trunc_pkt_.read( offset, data );
    }
    else if (offset >= 0xb90 && offset < 0xb98) {
      offset -= 0xb90;
      if (read_callback_) read_callback_();
      chan3_group_chnl_resubmit_discard_pkt_.read( offset, data );
    }
    else if (offset >= 0xb98 && offset < 0xba0) {
      offset -= 0xb98;
      if (read_callback_) read_callback_();
      chan3_group_chnl_parser_discard_pkt_.read( offset, data );
    }
    else if (offset >= 0xba0 && offset < 0xbac) {
      offset -= 0xba0;
      if (read_callback_) read_callback_();
      chan3_group_chnl_parser_send_pkt_.read( offset, data );
    }
    else if (offset >= 0xbb0 && offset < 0xbbc) {
      offset -= 0xbb0;
      if (read_callback_) read_callback_();
      chan3_group_chnl_deparser_send_pkt_.read( offset, data );
    }
    else if (offset >= 0xbc0 && offset < 0xbcc) {
      offset -= 0xbc0;
      if (read_callback_) read_callback_();
      chan3_group_chnl_macs_received_pkt_.read( offset, data );
    }
    else if (offset >= 0xbd0 && offset < 0xbd8) {
      offset -= 0xbd0;
      if (read_callback_) read_callback_();
      chan3_group_chnl_resubmit_received_pkt_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0xb00 && offset < 0xb08) {
      offset -= 0xb00;
      chan3_group_chnl_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb10 && offset < 0xb20) {
      offset -= 0xb10;
      chan3_group_chnl_meta_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb20 && offset < 0xb24) {
      offset -= 0xb20;
      chan3_group_meta_fifo_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb30 && offset < 0xb3c) {
      offset -= 0xb30;
      chan3_group_chnl_fifo_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb40 && offset < 0xb4c) {
      offset -= 0xb40;
      chan3_group_chnl_acc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb4c && offset < 0xb50) {
      offset -= 0xb4c;
      chan3_group_chnl_acc_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb50 && offset < 0xb54) {
      offset -= 0xb50;
      chan3_group_chnl_pktnum0_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb54 && offset < 0xb58) {
      offset -= 0xb54;
      chan3_group_chnl_pktnum1_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb58 && offset < 0xb5c) {
      offset -= 0xb58;
      chan3_group_chnl_metanum_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb5c && offset < 0xb60) {
      offset -= 0xb5c;
      chan3_group_chnl_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb60 && offset < 0xb64) {
      offset -= 0xb60;
      chan3_group_chnl_pktnum0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb64 && offset < 0xb68) {
      offset -= 0xb64;
      chan3_group_chnl_pktnum1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb68 && offset < 0xb6c) {
      offset -= 0xb68;
      chan3_group_chnl_metanum_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb70 && offset < 0xb78) {
      offset -= 0xb70;
      chan3_group_chnl_deparser_drop_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb78 && offset < 0xb80) {
      offset -= 0xb78;
      chan3_group_chnl_wsch_discard_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb80 && offset < 0xb88) {
      offset -= 0xb80;
      chan3_group_chnl_wsch_trunc_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb88 && offset < 0xb90) {
      offset -= 0xb88;
      chan3_group_chnl_drop_trunc_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb90 && offset < 0xb98) {
      offset -= 0xb90;
      chan3_group_chnl_resubmit_discard_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb98 && offset < 0xba0) {
      offset -= 0xb98;
      chan3_group_chnl_parser_discard_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xba0 && offset < 0xbac) {
      offset -= 0xba0;
      chan3_group_chnl_parser_send_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xbb0 && offset < 0xbbc) {
      offset -= 0xbb0;
      chan3_group_chnl_deparser_send_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xbc0 && offset < 0xbcc) {
      offset -= 0xbc0;
      chan3_group_chnl_macs_received_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xbd0 && offset < 0xbd8) {
      offset -= 0xbd0;
      chan3_group_chnl_resubmit_received_pkt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    chan3_group_chnl_ctrl_.reset();
    chan3_group_chnl_meta_.reset();
    chan3_group_meta_fifo_ctrl_.reset();
    chan3_group_chnl_fifo_ctrl_.reset();
    chan3_group_chnl_acc_ctrl_.reset();
    chan3_group_chnl_acc_stat_.reset();
    chan3_group_chnl_pktnum0_cfg_.reset();
    chan3_group_chnl_pktnum1_cfg_.reset();
    chan3_group_chnl_metanum_cfg_.reset();
    chan3_group_chnl_stat_.reset();
    chan3_group_chnl_pktnum0_.reset();
    chan3_group_chnl_pktnum1_.reset();
    chan3_group_chnl_metanum_.reset();
    chan3_group_chnl_deparser_drop_pkt_.reset();
    chan3_group_chnl_wsch_discard_pkt_.reset();
    chan3_group_chnl_wsch_trunc_pkt_.reset();
    chan3_group_chnl_drop_trunc_pkt_.reset();
    chan3_group_chnl_resubmit_discard_pkt_.reset();
    chan3_group_chnl_parser_discard_pkt_.reset();
    chan3_group_chnl_parser_send_pkt_.reset();
    chan3_group_chnl_deparser_send_pkt_.reset();
    chan3_group_chnl_macs_received_pkt_.reset();
    chan3_group_chnl_resubmit_received_pkt_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0xb00 && offset < 0xb08) {
      offset -= 0xb00;
      r += chan3_group_chnl_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb10 && offset < 0xb20) {
      offset -= 0xb10;
      r += chan3_group_chnl_meta_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb20 && offset < 0xb24) {
      offset -= 0xb20;
      r += chan3_group_meta_fifo_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb30 && offset < 0xb3c) {
      offset -= 0xb30;
      r += chan3_group_chnl_fifo_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb40 && offset < 0xb4c) {
      offset -= 0xb40;
      r += chan3_group_chnl_acc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb4c && offset < 0xb50) {
      offset -= 0xb4c;
      r += chan3_group_chnl_acc_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb50 && offset < 0xb54) {
      offset -= 0xb50;
      r += chan3_group_chnl_pktnum0_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb54 && offset < 0xb58) {
      offset -= 0xb54;
      r += chan3_group_chnl_pktnum1_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb58 && offset < 0xb5c) {
      offset -= 0xb58;
      r += chan3_group_chnl_metanum_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb5c && offset < 0xb60) {
      offset -= 0xb5c;
      r += chan3_group_chnl_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb60 && offset < 0xb64) {
      offset -= 0xb60;
      r += chan3_group_chnl_pktnum0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb64 && offset < 0xb68) {
      offset -= 0xb64;
      r += chan3_group_chnl_pktnum1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb68 && offset < 0xb6c) {
      offset -= 0xb68;
      r += chan3_group_chnl_metanum_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb70 && offset < 0xb78) {
      offset -= 0xb70;
      r += chan3_group_chnl_deparser_drop_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb78 && offset < 0xb80) {
      offset -= 0xb78;
      r += chan3_group_chnl_wsch_discard_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb80 && offset < 0xb88) {
      offset -= 0xb80;
      r += chan3_group_chnl_wsch_trunc_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb88 && offset < 0xb90) {
      offset -= 0xb88;
      r += chan3_group_chnl_drop_trunc_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb90 && offset < 0xb98) {
      offset -= 0xb90;
      r += chan3_group_chnl_resubmit_discard_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb98 && offset < 0xba0) {
      offset -= 0xb98;
      r += chan3_group_chnl_parser_discard_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xba0 && offset < 0xbac) {
      offset -= 0xba0;
      r += chan3_group_chnl_parser_send_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xbb0 && offset < 0xbbc) {
      offset -= 0xbb0;
      r += chan3_group_chnl_deparser_send_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xbc0 && offset < 0xbcc) {
      offset -= 0xbc0;
      r += chan3_group_chnl_macs_received_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xbd0 && offset < 0xbd8) {
      offset -= 0xbd0;
      r += chan3_group_chnl_resubmit_received_pkt_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += chan3_group_chnl_ctrl_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_meta_.to_string(print_zeros,indent_string) ;
    r += chan3_group_meta_fifo_ctrl_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_fifo_ctrl_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_acc_ctrl_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_acc_stat_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_pktnum0_cfg_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_pktnum1_cfg_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_metanum_cfg_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_stat_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_pktnum0_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_pktnum1_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_metanum_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_deparser_drop_pkt_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_wsch_discard_pkt_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_wsch_trunc_pkt_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_drop_trunc_pkt_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_resubmit_discard_pkt_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_parser_discard_pkt_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_parser_send_pkt_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_deparser_send_pkt_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_macs_received_pkt_.to_string(print_zeros,indent_string) ;
    r += chan3_group_chnl_resubmit_received_pkt_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  ChnlCtrl chan3_group_chnl_ctrl_;
  ChnlMeta chan3_group_chnl_meta_;
  MetaFifoCtrl chan3_group_meta_fifo_ctrl_;
  ChnlFifoCtrl chan3_group_chnl_fifo_ctrl_;
  ChnlAccCtrl chan3_group_chnl_acc_ctrl_;
  ChnlAccStat chan3_group_chnl_acc_stat_;
  ChnlPktnum0Cfg chan3_group_chnl_pktnum0_cfg_;
  ChnlPktnum1Cfg chan3_group_chnl_pktnum1_cfg_;
  ChnlMetanumCfg chan3_group_chnl_metanum_cfg_;
  ChnlStat chan3_group_chnl_stat_;
  ChnlPktnum0 chan3_group_chnl_pktnum0_;
  ChnlPktnum1 chan3_group_chnl_pktnum1_;
  ChnlMetanum chan3_group_chnl_metanum_;
  ChnlDeparserDropPkt chan3_group_chnl_deparser_drop_pkt_;
  ChnlWschDiscardPkt chan3_group_chnl_wsch_discard_pkt_;
  ChnlWschTruncPkt chan3_group_chnl_wsch_trunc_pkt_;
  ChnlDropTruncPkt chan3_group_chnl_drop_trunc_pkt_;
  ChnlResubmitDiscardPkt chan3_group_chnl_resubmit_discard_pkt_;
  ChnlParserDiscardPkt chan3_group_chnl_parser_discard_pkt_;
  ChnlParserSendPkt chan3_group_chnl_parser_send_pkt_;
  ChnlDeparserSendPkt chan3_group_chnl_deparser_send_pkt_;
  ChnlMacsReceivedPkt chan3_group_chnl_macs_received_pkt_;
  ChnlResubmitReceivedPkt chan3_group_chnl_resubmit_received_pkt_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ipb_prsr4_reg
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    assert(index_ipb_prsr4_reg < 9);
    offset += index_ipb_prsr4_reg * 0x2000; // ipb_prsr4_reg[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_IPB_RSPEC_CHAN3_GROUP_H__
