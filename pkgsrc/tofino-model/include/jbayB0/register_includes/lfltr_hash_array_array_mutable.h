/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_LFLTR_HASH_ARRAY_ARRAY_MUTABLE_H__
#define __REGISTER_INCLUDES_LFLTR_HASH_ARRAY_ARRAY_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "lfltr_hash_array_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class LfltrHashArrayArrayMutable : public model_core::RegisterBlock<RegisterArrayCallback> {
public:
  LfltrHashArrayArrayMutable(
      int chipNumber, int index_lfltr_rspec, int index_lfltr_hash_rspec, RegisterArrayCallback& write_callback = 0, RegisterArrayCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_lfltr_rspec, index_lfltr_hash_rspec), 48 * ArraySize(index_lfltr_rspec, index_lfltr_hash_rspec, -1), true, write_callback, read_callback, std::string("LfltrHashArrayArrayMutable")+":"+boost::lexical_cast<std::string>(index_lfltr_rspec) + "," + boost::lexical_cast<std::string>(index_lfltr_hash_rspec)),
    array(RealArraySize(index_lfltr_rspec, index_lfltr_hash_rspec, -1)),
    size0_(ArraySize(index_lfltr_rspec, index_lfltr_hash_rspec, 0)),
    real_size0_(RealArraySize(index_lfltr_rspec, index_lfltr_hash_rspec, 0))
    {
    }
public:







  uint8_t sel(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].sel(j0);
  }
  void sel(uint32_t a0,int j0,const uint8_t &v) 
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    array[a0].sel(j0,v);
  }
  bool calculate_index(
      uint32_t* offset, uint32_t* a0
      ) const {
    int i = (*offset)/48;
    (*offset) -= (i*48);
    uint32_t t = i;
    *a0 = t;
    bool in_bounds = true;
    in_bounds &= CheckArrayBounds(*a0,real_size0_,size0_,*offset,0,true);
    return in_bounds;
  }


  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return true;
    if (read_callback_) read_callback_(a0);
    array[a0].read(offset,data);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return true;
    array[a0].write(offset,data);
    if (write_callback_) write_callback_(a0);
    return true;
  }

  void reset(
      
      ) {
    for (uint32_t i=0;i<array.size();++i) {
      array[i].reset();
      int t = i;
      int a0 = t;
      if (write_callback_) write_callback_(a0);
    }
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return "OUT_OF_BOUNDS";
    std::string r_s = array[a0].to_string(print_zeros,indent_string+"  ");
    if (! r_s.empty()) {
      r += indent_string + std::string("LfltrHashArrayArrayMutable") + "["+boost::lexical_cast<std::string>(a0)+"]"+ ":\n" + r_s ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<real_size0_;++a0) {
      std::string r_s = array[a0].to_string(print_zeros,indent_string+"  ");
      if (! r_s.empty()) {
        r += indent_string + std::string("LfltrHashArrayArrayMutable") + "["+boost::lexical_cast<std::string>(a0)+"]"+ ":\n" + r_s ;
      }
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::vector<LfltrHashArrayMutable> array;
  uint32_t size0_;
  uint32_t real_size0_;
private:
  static int StartOffset(
      int index_lfltr_rspec, int index_lfltr_hash_rspec
      ) {
    int offset=0;
    offset += 0x400000; // to get to lfltr
    assert(index_lfltr_rspec < 4);
    offset += index_lfltr_rspec * 0x80000; // lfltr_rspec[]
    assert(index_lfltr_hash_rspec < 4);
    offset += index_lfltr_hash_rspec * 0x8000; // lfltr_hash_rspec[]
    return offset;
  }

  static int ArraySize(
      int index_lfltr_rspec, int index_lfltr_hash_rspec, int dimension
      ) {
    switch (dimension) {
      case -1:
        return 16;
        break;
      case 0:
        return 16;
        break;
      default:
        assert(0);
        break;
    }
  }

  static int RealArraySize(
      int index_lfltr_rspec, int index_lfltr_hash_rspec, int dimension
      ) {
    switch (dimension) {
      case -1:
        return 16;
        break;
      case 0:
        return 16;
        break;
      default:
        assert(0);
        break;
    }
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_LFLTR_HASH_ARRAY_ARRAY_MUTABLE_H__
