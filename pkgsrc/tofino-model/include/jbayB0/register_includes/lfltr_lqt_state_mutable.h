/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_LFLTR_LQT_STATE_MUTABLE_H__
#define __REGISTER_INCLUDES_LFLTR_LQT_STATE_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class LfltrLqtStateMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  LfltrLqtStateMutable(
      int chipNumber, int index_lfltr_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_lfltr_rspec), 4, true, write_callback, read_callback, std::string("LfltrLqtStateMutable")+":"+boost::lexical_cast<std::string>(index_lfltr_rspec))
    {
    }
  LfltrLqtStateMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "LfltrLqtStateMutable")
    {
    }
public:










  uint8_t state0() { return state0_; }
  void state0(const uint8_t &v) { state0_=v; }










  uint8_t state1() { return state1_; }
  void state1(const uint8_t &v) { state1_=v; }





  uint8_t empty0() { return empty0_; }
  void empty0(const uint8_t &v) { empty0_=v; }





  uint8_t empty1() { return empty1_; }
  void empty1(const uint8_t &v) { empty1_=v; }





  uint8_t full0() { return full0_; }
  void full0(const uint8_t &v) { full0_=v; }





  uint8_t full1() { return full1_; }
  void full1(const uint8_t &v) { full1_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (state0_ & 0x7);
    *data |= ((state1_ & 0x7) << 4);
    *data |= ((empty0_ & 0x1) << 8);
    *data |= ((empty1_ & 0x1) << 9);
    *data |= ((full0_ & 0x1) << 10);
    *data |= ((full1_ & 0x1) << 11);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    state0_ = (data & 0x7);
    state1_ = ((data >> 4) & 0x7);
    empty0_ = ((data >> 8) & 0x1);
    empty1_ = ((data >> 9) & 0x1);
    full0_ = ((data >> 10) & 0x1);
    full1_ = ((data >> 11) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    state0_ = 0x0;
    state1_ = 0x0;
    empty0_ = 0x0;
    empty1_ = 0x0;
    full0_ = 0x0;
    full1_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("LfltrLqtStateMutable") + ":\n";
    r += indent_string + "  " + std::string("state0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state0_) ) + "\n";
    all_zeros &= (0 == state0_);
    r += indent_string + "  " + std::string("state1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state1_) ) + "\n";
    all_zeros &= (0 == state1_);
    r += indent_string + "  " + std::string("empty0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(empty0_) ) + "\n";
    all_zeros &= (0 == empty0_);
    r += indent_string + "  " + std::string("empty1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(empty1_) ) + "\n";
    all_zeros &= (0 == empty1_);
    r += indent_string + "  " + std::string("full0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(full0_) ) + "\n";
    all_zeros &= (0 == full0_);
    r += indent_string + "  " + std::string("full1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(full1_) ) + "\n";
    all_zeros &= (0 == full1_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("LfltrLqtStateMutable") + ":\n";
    r += indent_string + "  " + std::string("state0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state0_) ) + "\n";
    all_zeros &= (0 == state0_);
    r += indent_string + "  " + std::string("state1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state1_) ) + "\n";
    all_zeros &= (0 == state1_);
    r += indent_string + "  " + std::string("empty0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(empty0_) ) + "\n";
    all_zeros &= (0 == empty0_);
    r += indent_string + "  " + std::string("empty1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(empty1_) ) + "\n";
    all_zeros &= (0 == empty1_);
    r += indent_string + "  " + std::string("full0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(full0_) ) + "\n";
    all_zeros &= (0 == full0_);
    r += indent_string + "  " + std::string("full1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(full1_) ) + "\n";
    all_zeros &= (0 == full1_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t state0_;
  uint8_t state1_;
  uint8_t empty0_;
  uint8_t empty1_;
  uint8_t full0_;
  uint8_t full1_;
private:
  static int StartOffset(
      int index_lfltr_rspec
      ) {
    int offset=0;
    offset += 0x400000; // to get to lfltr
    assert(index_lfltr_rspec < 4);
    offset += index_lfltr_rspec * 0x80000; // lfltr_rspec[]
    offset += 0x20000; // to get to ctrl
    offset += 0x88; // to get to lqt_state
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_LFLTR_LQT_STATE_MUTABLE_H__
