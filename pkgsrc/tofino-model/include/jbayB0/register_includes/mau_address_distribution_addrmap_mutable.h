/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_ADDRESS_DISTRIBUTION_ADDRMAP_MUTABLE_H__
#define __REGISTER_INCLUDES_MAU_ADDRESS_DISTRIBUTION_ADDRMAP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "adr_dist_action_data_adr_icxbar_ctl_mutable.h"
#include "adr_dist_idletime_adr_oxbar_ctl_mutable.h"
#include "adr_dist_mem_slow_mode_mutable.h"
#include "adr_dist_meter_adr_icxbar_ctl_mutable.h"
#include "adr_dist_pipe_delay_mutable.h"
#include "adr_dist_stats_adr_icxbar_ctl_mutable.h"
#include "adr_dist_table_thread_mutable.h"
#include "atomic_mod_sram_go_pending_mutable.h"
#include "bubble_req_ctl_mutable.h"
#include "def_meter_sbe_errlog_mutable.h"
#include "deferred_eop_bus_delay_mutable.h"
#include "deferred_meter_parity_control_mutable.h"
#include "deferred_oflo_ctl_mutable.h"
#include "deferred_ram_ctl_mutable.h"
#include "deferred_stats_parity_control_mutable.h"
#include "deferred_stats_parity_errlog_mutable.h"
#include "dp_teop_meter_ctl_mutable.h"
#include "dp_teop_stats_ctl_mutable.h"
#include "idle_bubble_req_mutable.h"
#include "idletime_slip_errlog_mutable.h"
#include "idletime_slip_intr_ctl_mutable.h"
#include "idletime_slip_mutable.h"
#include "idletime_sweep_ctl_mutable.h"
#include "immediate_data_rng_enable_mutable.h"
#include "immediate_data_rng_logical_map_ctl_mutable.h"
#include "immediate_data_16b_ixbar_ctl_mutable.h"
#include "immediate_data_32b_ixbar_ctl_mutable.h"
#include "immediate_data_8b_enable_mutable.h"
#include "immediate_data_8b_ixbar_ctl_mutable.h"
#include "intr_enable0_mau_ad_mutable.h"
#include "intr_enable1_mau_ad_mutable.h"
#include "intr_freeze_enable_mau_ad_mutable.h"
#include "intr_inject_mau_ad_mutable.h"
#include "intr_status_mau_ad_mutable.h"
#include "mau_ad_meter_virt_lt_mutable.h"
#include "mau_ad_stats_virt_lt_mutable.h"
#include "mau_diag_adb_map_mutable.h"
#include "mau_diag_adr_dist_idletime_adr_oxbar_ctl_mutable.h"
#include "mau_diag_eop_vld_xport_mutable.h"
#include "mau_diag_meter_adr_sel_mutable.h"
#include "mau_diag_stats_adr_sel_mutable.h"
#include "mau_diag_32b_oxbar_ctl_mutable.h"
#include "mau_diag_32b_oxbar_premux_ctl_mutable.h"
#include "mau_diag_8b_oxbar_ctl_mutable.h"
#include "mau_meter_alu_vpn_range_mutable.h"
#include "mau_snapshot_meter_adr_mutable.h"
#include "mau_stateful_log_counter_logical_map_mutable.h"
#include "mau_stateful_log_counter_oxbar_map_mutable.h"
#include "mau_stateful_log_stage_vpn_offset_mutable.h"
#include "mau_stats_alu_vpn_range_mutable.h"
#include "meter_adr_shift_mutable.h"
#include "meter_alu_adr_range_check_icxbar_map_mutable.h"
#include "meter_bubble_req_mutable.h"
#include "meter_color_logical_to_phys_icxbar_ctl_mutable.h"
#include "meter_color_output_map_mutable.h"
#include "meter_enable_mutable.h"
#include "meter_sweep_cmd_ovr_ctl_mutable.h"
#include "meter_sweep_ctl_mutable.h"
#include "meter_sweep_errlog_mutable.h"
#include "meter_sweep_num_subwords_mutable.h"
#include "meter_to_teop_adr_oxbar_ctl_mutable.h"
#include "movereg_ad_direct_mutable.h"
#include "movereg_ad_meter_alu_to_logical_xbar_ctl_mutable.h"
#include "movereg_ad_stats_alu_to_logical_xbar_ctl_mutable.h"
#include "movereg_idle_ctl_mutable.h"
#include "movereg_idle_pop_ctl_mutable.h"
#include "movereg_meter_ctl_mutable.h"
#include "movereg_stats_ctl_mutable.h"
#include "oflo_adr_user_mutable.h"
#include "packet_action_at_headertime_mutable.h"
#include "stateful_instr_width_logical_mutable.h"
#include "stats_bubble_req_mutable.h"
#include "stats_lrt_fsm_sweep_offset_mutable.h"
#include "stats_lrt_fsm_sweep_size_mutable.h"
#include "stats_lrt_sweep_adr_mutable.h"
#include "stats_to_teop_adr_oxbar_ctl_mutable.h"
#include "teop_bus_ctl_mutable.h"
#include "teop_to_meter_adr_oxbar_ctl_mutable.h"
#include "teop_to_stats_adr_oxbar_ctl_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class MauAddressDistributionAddrmapMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauAddressDistributionAddrmapMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap), 2048, true, write_callback, read_callback, std::string("MauAddressDistributionAddrmapMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap))
    {
    }
  MauAddressDistributionAddrmapMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MauAddressDistributionAddrmapMutable")
    {
    }
public:













  MeterToTeopAdrOxbarCtlMutable &meter_to_teop_adr_oxbar_ctl(int j0) { return meter_to_teop_adr_oxbar_ctl_[j0]; }










  TeopBusCtlMutable &teop_bus_ctl(int j0) { return teop_bus_ctl_[j0]; }














  MauSnapshotMeterAdrMutable &mau_snapshot_meter_adr(int j0) { return mau_snapshot_meter_adr_[j0]; }












  ImmediateData_8bEnableMutable &immediate_data_8b_enable(int j0) { return immediate_data_8b_enable_[j0]; }









  DeferredEopBusDelayMutable &deferred_eop_bus_delay(int j0) { return deferred_eop_bus_delay_[j0]; }










  MoveregAdStatsAluToLogicalXbarCtlMutable &movereg_ad_stats_alu_to_logical_xbar_ctl(int j0) { return movereg_ad_stats_alu_to_logical_xbar_ctl_[j0]; }









  MoveregAdMeterAluToLogicalXbarCtlMutable &movereg_ad_meter_alu_to_logical_xbar_ctl(int j0) { return movereg_ad_meter_alu_to_logical_xbar_ctl_[j0]; }

























  MoveregIdlePopCtlMutable &movereg_idle_pop_ctl(int j0) { return movereg_idle_pop_ctl_[j0]; }











  StatsBubbleReqMutable &stats_bubble_req(int j0) { return stats_bubble_req_[j0]; }











  MeterBubbleReqMutable &meter_bubble_req(int j0) { return meter_bubble_req_[j0]; }








  IdleBubbleReqMutable &idle_bubble_req(int j0) { return idle_bubble_req_[j0]; }








  BubbleReqCtlMutable &bubble_req_ctl(int j0) { return bubble_req_ctl_[j0]; }







  OfloAdrUserMutable &oflo_adr_user(int j0) { return oflo_adr_user_[j0]; }













  AtomicModSramGoPendingMutable &atomic_mod_sram_go_pending(int j0) { return atomic_mod_sram_go_pending_[j0]; }






  MeterEnableMutable &meter_enable() { return meter_enable_; }







  MauDiagAdrDistIdletimeAdrOxbarCtlMutable &mau_diag_adr_dist_idletime_adr_oxbar_ctl() { return mau_diag_adr_dist_idletime_adr_oxbar_ctl_; }





  DeferredOfloCtlMutable &deferred_oflo_ctl() { return deferred_oflo_ctl_; }







  AdrDistMemSlowModeMutable &adr_dist_mem_slow_mode() { return adr_dist_mem_slow_mode_; }






  ImmediateDataRngEnableMutable &immediate_data_rng_enable() { return immediate_data_rng_enable_; }





  MauDiag_32bOxbarCtlMutable &mau_diag_32b_oxbar_ctl() { return mau_diag_32b_oxbar_ctl_; }






  MauDiag_32bOxbarPremuxCtlMutable &mau_diag_32b_oxbar_premux_ctl() { return mau_diag_32b_oxbar_premux_ctl_; }





  MauDiag_8bOxbarCtlMutable &mau_diag_8b_oxbar_ctl() { return mau_diag_8b_oxbar_ctl_; }





  MauDiagAdbMapMutable &mau_diag_adb_map() { return mau_diag_adb_map_; }










  MauDiagStatsAdrSelMutable &mau_diag_stats_adr_sel() { return mau_diag_stats_adr_sel_; }










  MauDiagMeterAdrSelMutable &mau_diag_meter_adr_sel() { return mau_diag_meter_adr_sel_; }





  MauDiagEopVldXportMutable &mau_diag_eop_vld_xport() { return mau_diag_eop_vld_xport_; }






  IntrStatusMauAdMutable &intr_status_mau_ad() { return intr_status_mau_ad_; }






  IntrEnable0MauAdMutable &intr_enable0_mau_ad() { return intr_enable0_mau_ad_; }





















  ImmediateData_8bIxbarCtlMutable &immediate_data_8b_ixbar_ctl(int j0) { return immediate_data_8b_ixbar_ctl_[j0]; }
























  ImmediateData_16bIxbarCtlMutable &immediate_data_16b_ixbar_ctl(int j0) { return immediate_data_16b_ixbar_ctl_[j0]; }















  ImmediateData_32bIxbarCtlMutable &immediate_data_32b_ixbar_ctl(int j0) { return immediate_data_32b_ixbar_ctl_[j0]; }













  MeterColorOutputMapMutable &meter_color_output_map(int j0) { return meter_color_output_map_[j0]; }








  MeterColorLogicalToPhysIcxbarCtlMutable &meter_color_logical_to_phys_icxbar_ctl(int j0) { return meter_color_logical_to_phys_icxbar_ctl_[j0]; }

















  AdrDistActionDataAdrIcxbarCtlMutable &adr_dist_action_data_adr_icxbar_ctl(int j0) { return adr_dist_action_data_adr_icxbar_ctl_[j0]; }














  AdrDistStatsAdrIcxbarCtlMutable &adr_dist_stats_adr_icxbar_ctl(int j0) { return adr_dist_stats_adr_icxbar_ctl_[j0]; }
















  AdrDistMeterAdrIcxbarCtlMutable &adr_dist_meter_adr_icxbar_ctl(int j0) { return adr_dist_meter_adr_icxbar_ctl_[j0]; }








  IdletimeSweepCtlMutable &idletime_sweep_ctl(int j0) { return idletime_sweep_ctl_[j0]; }









  IdletimeSlipMutable &idletime_slip(int j0) { return idletime_slip_[j0]; }








  IdletimeSlipIntrCtlMutable &idletime_slip_intr_ctl(int j0) { return idletime_slip_intr_ctl_[j0]; }








  MoveregIdleCtlMutable &movereg_idle_ctl(int j0) { return movereg_idle_ctl_[j0]; }












  MauStatefulLogCounterLogicalMapMutable &mau_stateful_log_counter_logical_map(int j0) { return mau_stateful_log_counter_logical_map_[j0]; }










  MauStatefulLogStageVpnOffsetMutable &mau_stateful_log_stage_vpn_offset(int j0) { return mau_stateful_log_stage_vpn_offset_[j0]; }
















  StatefulInstrWidthLogicalMutable &stateful_instr_width_logical(int j0) { return stateful_instr_width_logical_[j0]; }






  IntrEnable1MauAdMutable &intr_enable1_mau_ad() { return intr_enable1_mau_ad_; }







  IntrInjectMauAdMutable &intr_inject_mau_ad() { return intr_inject_mau_ad_; }





  IntrFreezeEnableMauAdMutable &intr_freeze_enable_mau_ad() { return intr_freeze_enable_mau_ad_; }





  IdletimeSlipErrlogMutable &idletime_slip_errlog() { return idletime_slip_errlog_; }


















  AdrDistIdletimeAdrOxbarCtlMutable &adr_dist_idletime_adr_oxbar_ctl(int j0) { return adr_dist_idletime_adr_oxbar_ctl_[j0]; }













  PacketActionAtHeadertimeMutable &packet_action_at_headertime(int j1,int j0) { return packet_action_at_headertime_[j1][j0]; }










  DeferredRamCtlMutable &deferred_ram_ctl(int j1,int j0) { return deferred_ram_ctl_[j1][j0]; }





  MeterSweepErrlogMutable &meter_sweep_errlog() { return meter_sweep_errlog_; }







  MeterAdrShiftMutable &meter_adr_shift() { return meter_adr_shift_; }








  MeterSweepCtlMutable &meter_sweep_ctl(int j0) { return meter_sweep_ctl_[j0]; }








  MeterSweepCmdOvrCtlMutable &meter_sweep_cmd_ovr_ctl(int j0) { return meter_sweep_cmd_ovr_ctl_[j0]; }













  MeterSweepNumSubwordsMutable &meter_sweep_num_subwords(int j0) { return meter_sweep_num_subwords_[j0]; }











  AdrDistPipeDelayMutable &adr_dist_pipe_delay(int j1,int j0) { return adr_dist_pipe_delay_[j1][j0]; }













  StatsLrtFsmSweepSizeMutable &stats_lrt_fsm_sweep_size(int j0) { return stats_lrt_fsm_sweep_size_[j0]; }








  StatsLrtFsmSweepOffsetMutable &stats_lrt_fsm_sweep_offset(int j0) { return stats_lrt_fsm_sweep_offset_[j0]; }









  StatsLrtSweepAdrMutable &stats_lrt_sweep_adr(int j0) { return stats_lrt_sweep_adr_[j0]; }















  ImmediateDataRngLogicalMapCtlMutable &immediate_data_rng_logical_map_ctl(int j0) { return immediate_data_rng_logical_map_ctl_[j0]; }









  MoveregAdDirectMutable &movereg_ad_direct(int j0) { return movereg_ad_direct_[j0]; }








  MoveregStatsCtlMutable &movereg_stats_ctl(int j0) { return movereg_stats_ctl_[j0]; }








  MoveregMeterCtlMutable &movereg_meter_ctl(int j0) { return movereg_meter_ctl_[j0]; }









  MauAdMeterVirtLtMutable &mau_ad_meter_virt_lt(int j0) { return mau_ad_meter_virt_lt_[j0]; }









  MauAdStatsVirtLtMutable &mau_ad_stats_virt_lt(int j0) { return mau_ad_stats_virt_lt_[j0]; }








  DeferredStatsParityControlMutable &deferred_stats_parity_control(int j0) { return deferred_stats_parity_control_[j0]; }








  DeferredStatsParityErrlogMutable &deferred_stats_parity_errlog(int j0) { return deferred_stats_parity_errlog_[j0]; }








  DeferredMeterParityControlMutable &deferred_meter_parity_control(int j0) { return deferred_meter_parity_control_[j0]; }








  DefMeterSbeErrlogMutable &def_meter_sbe_errlog(int j0) { return def_meter_sbe_errlog_[j0]; }













  AdrDistTableThreadMutable &adr_dist_table_thread(int j1,int j0) { return adr_dist_table_thread_[j1][j0]; }









  MauStatsAluVpnRangeMutable &mau_stats_alu_vpn_range(int j0) { return mau_stats_alu_vpn_range_[j0]; }










  MauMeterAluVpnRangeMutable &mau_meter_alu_vpn_range(int j0) { return mau_meter_alu_vpn_range_[j0]; }











  MauStatefulLogCounterOxbarMapMutable &mau_stateful_log_counter_oxbar_map(int j0) { return mau_stateful_log_counter_oxbar_map_[j0]; }












  MeterAluAdrRangeCheckIcxbarMapMutable &meter_alu_adr_range_check_icxbar_map(int j0) { return meter_alu_adr_range_check_icxbar_map_[j0]; }








  DpTeopStatsCtlMutable &dp_teop_stats_ctl(int j0) { return dp_teop_stats_ctl_[j0]; }








  DpTeopMeterCtlMutable &dp_teop_meter_ctl(int j0) { return dp_teop_meter_ctl_[j0]; }









  TeopToStatsAdrOxbarCtlMutable &teop_to_stats_adr_oxbar_ctl(int j0) { return teop_to_stats_adr_oxbar_ctl_[j0]; }









  TeopToMeterAdrOxbarCtlMutable &teop_to_meter_adr_oxbar_ctl(int j0) { return teop_to_meter_adr_oxbar_ctl_[j0]; }













  StatsToTeopAdrOxbarCtlMutable &stats_to_teop_adr_oxbar_ctl(int j0) { return stats_to_teop_adr_oxbar_ctl_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x10) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      meter_to_teop_adr_oxbar_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x20) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      teop_bus_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_snapshot_meter_adr_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x38) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      immediate_data_8b_enable_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x40) {
      offset -= 0x38;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      deferred_eop_bus_delay_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      movereg_ad_stats_alu_to_logical_xbar_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      movereg_ad_meter_alu_to_logical_xbar_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      movereg_idle_pop_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stats_bubble_req_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      meter_bubble_req_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      idle_bubble_req_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x78) {
      offset -= 0x70;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      bubble_req_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x78 && offset < 0x80) {
      offset -= 0x78;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      oflo_adr_user_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x108) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      atomic_mod_sram_go_pending_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      if (read_callback_) read_callback_();
      meter_enable_.read( offset, data );
    }
    else if (offset >= 0x10c && offset < 0x110) {
      offset -= 0x10c;
      if (read_callback_) read_callback_();
      mau_diag_adr_dist_idletime_adr_oxbar_ctl_.read( offset, data );
    }
    else if (offset >= 0x110 && offset < 0x114) {
      offset -= 0x110;
      if (read_callback_) read_callback_();
      deferred_oflo_ctl_.read( offset, data );
    }
    else if (offset >= 0x114 && offset < 0x118) {
      offset -= 0x114;
      if (read_callback_) read_callback_();
      adr_dist_mem_slow_mode_.read( offset, data );
    }
    else if (offset >= 0x118 && offset < 0x11c) {
      offset -= 0x118;
      if (read_callback_) read_callback_();
      immediate_data_rng_enable_.read( offset, data );
    }
    else if (offset >= 0x11c && offset < 0x120) {
      offset -= 0x11c;
      if (read_callback_) read_callback_();
      mau_diag_32b_oxbar_ctl_.read( offset, data );
    }
    else if (offset >= 0x120 && offset < 0x124) {
      offset -= 0x120;
      if (read_callback_) read_callback_();
      mau_diag_32b_oxbar_premux_ctl_.read( offset, data );
    }
    else if (offset >= 0x124 && offset < 0x128) {
      offset -= 0x124;
      if (read_callback_) read_callback_();
      mau_diag_8b_oxbar_ctl_.read( offset, data );
    }
    else if (offset >= 0x128 && offset < 0x12c) {
      offset -= 0x128;
      if (read_callback_) read_callback_();
      mau_diag_adb_map_.read( offset, data );
    }
    else if (offset >= 0x12c && offset < 0x130) {
      offset -= 0x12c;
      if (read_callback_) read_callback_();
      mau_diag_stats_adr_sel_.read( offset, data );
    }
    else if (offset >= 0x130 && offset < 0x134) {
      offset -= 0x130;
      if (read_callback_) read_callback_();
      mau_diag_meter_adr_sel_.read( offset, data );
    }
    else if (offset >= 0x134 && offset < 0x138) {
      offset -= 0x134;
      if (read_callback_) read_callback_();
      mau_diag_eop_vld_xport_.read( offset, data );
    }
    else if (offset >= 0x138 && offset < 0x13c) {
      offset -= 0x138;
      if (read_callback_) read_callback_();
      intr_status_mau_ad_.read( offset, data );
    }
    else if (offset >= 0x13c && offset < 0x140) {
      offset -= 0x13c;
      if (read_callback_) read_callback_();
      intr_enable0_mau_ad_.read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x200) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      immediate_data_8b_ixbar_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x280) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      immediate_data_16b_ixbar_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x280 && offset < 0x2c0) {
      offset -= 0x280;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      immediate_data_32b_ixbar_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x2c0 && offset < 0x300) {
      offset -= 0x2c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      meter_color_output_map_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x300 && offset < 0x340) {
      offset -= 0x300;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      meter_color_logical_to_phys_icxbar_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x340 && offset < 0x380) {
      offset -= 0x340;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      adr_dist_action_data_adr_icxbar_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x380 && offset < 0x3c0) {
      offset -= 0x380;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      adr_dist_stats_adr_icxbar_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3c0 && offset < 0x400) {
      offset -= 0x3c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      adr_dist_meter_adr_icxbar_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x400 && offset < 0x440) {
      offset -= 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      idletime_sweep_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x440 && offset < 0x480) {
      offset -= 0x440;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      idletime_slip_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x480 && offset < 0x4c0) {
      offset -= 0x480;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      idletime_slip_intr_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x4c0 && offset < 0x500) {
      offset -= 0x4c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      movereg_idle_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x500 && offset < 0x540) {
      offset -= 0x500;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stateful_log_counter_logical_map_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x540 && offset < 0x580) {
      offset -= 0x540;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stateful_log_stage_vpn_offset_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x580 && offset < 0x5c0) {
      offset -= 0x580;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stateful_instr_width_logical_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x5c0 && offset < 0x5c4) {
      offset -= 0x5c0;
      if (read_callback_) read_callback_();
      intr_enable1_mau_ad_.read( offset, data );
    }
    else if (offset >= 0x5c4 && offset < 0x5c8) {
      offset -= 0x5c4;
      if (read_callback_) read_callback_();
      intr_inject_mau_ad_.read( offset, data );
    }
    else if (offset >= 0x5c8 && offset < 0x5cc) {
      offset -= 0x5c8;
      if (read_callback_) read_callback_();
      intr_freeze_enable_mau_ad_.read( offset, data );
    }
    else if (offset >= 0x5cc && offset < 0x5d0) {
      offset -= 0x5cc;
      if (read_callback_) read_callback_();
      idletime_slip_errlog_.read( offset, data );
    }
    else if (offset >= 0x5e0 && offset < 0x5f4) {
      offset -= 0x5e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      adr_dist_idletime_adr_oxbar_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x600 && offset < 0x620) {
      offset -= 0x600;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      packet_action_at_headertime_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x620 && offset < 0x640) {
      offset -= 0x620;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      deferred_ram_ctl_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x640 && offset < 0x644) {
      offset -= 0x640;
      if (read_callback_) read_callback_();
      meter_sweep_errlog_.read( offset, data );
    }
    else if (offset >= 0x644 && offset < 0x648) {
      offset -= 0x644;
      if (read_callback_) read_callback_();
      meter_adr_shift_.read( offset, data );
    }
    else if (offset >= 0x650 && offset < 0x660) {
      offset -= 0x650;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      meter_sweep_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x660 && offset < 0x670) {
      offset -= 0x660;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      meter_sweep_cmd_ovr_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x670 && offset < 0x680) {
      offset -= 0x670;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      meter_sweep_num_subwords_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x680 && offset < 0x690) {
      offset -= 0x680;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      adr_dist_pipe_delay_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x690 && offset < 0x6a0) {
      offset -= 0x690;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stats_lrt_fsm_sweep_size_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x6a0 && offset < 0x6b0) {
      offset -= 0x6a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stats_lrt_fsm_sweep_offset_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x6b0 && offset < 0x6c0) {
      offset -= 0x6b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stats_lrt_sweep_adr_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x6c0 && offset < 0x6d0) {
      offset -= 0x6c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      immediate_data_rng_logical_map_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x6d0 && offset < 0x6dc) {
      offset -= 0x6d0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      movereg_ad_direct_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x6e0 && offset < 0x6f0) {
      offset -= 0x6e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      movereg_stats_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x6f0 && offset < 0x700) {
      offset -= 0x6f0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      movereg_meter_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x700 && offset < 0x710) {
      offset -= 0x700;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_ad_meter_virt_lt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x710 && offset < 0x720) {
      offset -= 0x710;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_ad_stats_virt_lt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x720 && offset < 0x730) {
      offset -= 0x720;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      deferred_stats_parity_control_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x730 && offset < 0x740) {
      offset -= 0x730;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      deferred_stats_parity_errlog_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x740 && offset < 0x750) {
      offset -= 0x740;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      deferred_meter_parity_control_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x750 && offset < 0x760) {
      offset -= 0x750;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      def_meter_sbe_errlog_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x760 && offset < 0x770) {
      offset -= 0x760;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      adr_dist_table_thread_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x770 && offset < 0x780) {
      offset -= 0x770;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stats_alu_vpn_range_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x780 && offset < 0x790) {
      offset -= 0x780;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_meter_alu_vpn_range_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x790 && offset < 0x7a0) {
      offset -= 0x790;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stateful_log_counter_oxbar_map_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x7a0 && offset < 0x7b0) {
      offset -= 0x7a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      meter_alu_adr_range_check_icxbar_map_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x7b0 && offset < 0x7c0) {
      offset -= 0x7b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      dp_teop_stats_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x7c0 && offset < 0x7d0) {
      offset -= 0x7c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      dp_teop_meter_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x7d0 && offset < 0x7e0) {
      offset -= 0x7d0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      teop_to_stats_adr_oxbar_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x7e0 && offset < 0x7f0) {
      offset -= 0x7e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      teop_to_meter_adr_oxbar_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x7f0 && offset < 0x800) {
      offset -= 0x7f0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stats_to_teop_adr_oxbar_ctl_[ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x10) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      meter_to_teop_adr_oxbar_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x20) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      teop_bus_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_snapshot_meter_adr_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x38) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      immediate_data_8b_enable_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x40) {
      offset -= 0x38;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      deferred_eop_bus_delay_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      movereg_ad_stats_alu_to_logical_xbar_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      movereg_ad_meter_alu_to_logical_xbar_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      movereg_idle_pop_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stats_bubble_req_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      meter_bubble_req_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      idle_bubble_req_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x78) {
      offset -= 0x70;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      bubble_req_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x78 && offset < 0x80) {
      offset -= 0x78;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      oflo_adr_user_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x108) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      atomic_mod_sram_go_pending_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      meter_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10c && offset < 0x110) {
      offset -= 0x10c;
      mau_diag_adr_dist_idletime_adr_oxbar_ctl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x110 && offset < 0x114) {
      offset -= 0x110;
      deferred_oflo_ctl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x114 && offset < 0x118) {
      offset -= 0x114;
      adr_dist_mem_slow_mode_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x118 && offset < 0x11c) {
      offset -= 0x118;
      immediate_data_rng_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x11c && offset < 0x120) {
      offset -= 0x11c;
      mau_diag_32b_oxbar_ctl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x120 && offset < 0x124) {
      offset -= 0x120;
      mau_diag_32b_oxbar_premux_ctl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x124 && offset < 0x128) {
      offset -= 0x124;
      mau_diag_8b_oxbar_ctl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x128 && offset < 0x12c) {
      offset -= 0x128;
      mau_diag_adb_map_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x12c && offset < 0x130) {
      offset -= 0x12c;
      mau_diag_stats_adr_sel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x130 && offset < 0x134) {
      offset -= 0x130;
      mau_diag_meter_adr_sel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x134 && offset < 0x138) {
      offset -= 0x134;
      mau_diag_eop_vld_xport_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x138 && offset < 0x13c) {
      offset -= 0x138;
      intr_status_mau_ad_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x13c && offset < 0x140) {
      offset -= 0x13c;
      intr_enable0_mau_ad_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x200) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      immediate_data_8b_ixbar_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x280) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      immediate_data_16b_ixbar_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x280 && offset < 0x2c0) {
      offset -= 0x280;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      immediate_data_32b_ixbar_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c0 && offset < 0x300) {
      offset -= 0x2c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      meter_color_output_map_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x300 && offset < 0x340) {
      offset -= 0x300;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      meter_color_logical_to_phys_icxbar_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x340 && offset < 0x380) {
      offset -= 0x340;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      adr_dist_action_data_adr_icxbar_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x380 && offset < 0x3c0) {
      offset -= 0x380;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      adr_dist_stats_adr_icxbar_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c0 && offset < 0x400) {
      offset -= 0x3c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      adr_dist_meter_adr_icxbar_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400 && offset < 0x440) {
      offset -= 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      idletime_sweep_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x440 && offset < 0x480) {
      offset -= 0x440;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      idletime_slip_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x480 && offset < 0x4c0) {
      offset -= 0x480;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      idletime_slip_intr_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c0 && offset < 0x500) {
      offset -= 0x4c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      movereg_idle_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x500 && offset < 0x540) {
      offset -= 0x500;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stateful_log_counter_logical_map_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x540 && offset < 0x580) {
      offset -= 0x540;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stateful_log_stage_vpn_offset_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x580 && offset < 0x5c0) {
      offset -= 0x580;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stateful_instr_width_logical_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c0 && offset < 0x5c4) {
      offset -= 0x5c0;
      intr_enable1_mau_ad_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c4 && offset < 0x5c8) {
      offset -= 0x5c4;
      intr_inject_mau_ad_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c8 && offset < 0x5cc) {
      offset -= 0x5c8;
      intr_freeze_enable_mau_ad_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5cc && offset < 0x5d0) {
      offset -= 0x5cc;
      idletime_slip_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5e0 && offset < 0x5f4) {
      offset -= 0x5e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      adr_dist_idletime_adr_oxbar_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x600 && offset < 0x620) {
      offset -= 0x600;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      packet_action_at_headertime_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x620 && offset < 0x640) {
      offset -= 0x620;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      deferred_ram_ctl_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x640 && offset < 0x644) {
      offset -= 0x640;
      meter_sweep_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x644 && offset < 0x648) {
      offset -= 0x644;
      meter_adr_shift_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x650 && offset < 0x660) {
      offset -= 0x650;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      meter_sweep_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x660 && offset < 0x670) {
      offset -= 0x660;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      meter_sweep_cmd_ovr_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x670 && offset < 0x680) {
      offset -= 0x670;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      meter_sweep_num_subwords_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x680 && offset < 0x690) {
      offset -= 0x680;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      adr_dist_pipe_delay_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x690 && offset < 0x6a0) {
      offset -= 0x690;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stats_lrt_fsm_sweep_size_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6a0 && offset < 0x6b0) {
      offset -= 0x6a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stats_lrt_fsm_sweep_offset_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6b0 && offset < 0x6c0) {
      offset -= 0x6b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stats_lrt_sweep_adr_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6c0 && offset < 0x6d0) {
      offset -= 0x6c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      immediate_data_rng_logical_map_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6d0 && offset < 0x6dc) {
      offset -= 0x6d0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      movereg_ad_direct_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6e0 && offset < 0x6f0) {
      offset -= 0x6e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      movereg_stats_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6f0 && offset < 0x700) {
      offset -= 0x6f0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      movereg_meter_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x700 && offset < 0x710) {
      offset -= 0x700;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_ad_meter_virt_lt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x710 && offset < 0x720) {
      offset -= 0x710;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_ad_stats_virt_lt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x720 && offset < 0x730) {
      offset -= 0x720;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      deferred_stats_parity_control_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x730 && offset < 0x740) {
      offset -= 0x730;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      deferred_stats_parity_errlog_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x740 && offset < 0x750) {
      offset -= 0x740;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      deferred_meter_parity_control_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x750 && offset < 0x760) {
      offset -= 0x750;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      def_meter_sbe_errlog_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x760 && offset < 0x770) {
      offset -= 0x760;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      adr_dist_table_thread_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x770 && offset < 0x780) {
      offset -= 0x770;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stats_alu_vpn_range_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x780 && offset < 0x790) {
      offset -= 0x780;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_meter_alu_vpn_range_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x790 && offset < 0x7a0) {
      offset -= 0x790;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stateful_log_counter_oxbar_map_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7a0 && offset < 0x7b0) {
      offset -= 0x7a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      meter_alu_adr_range_check_icxbar_map_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7b0 && offset < 0x7c0) {
      offset -= 0x7b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      dp_teop_stats_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7c0 && offset < 0x7d0) {
      offset -= 0x7c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      dp_teop_meter_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7d0 && offset < 0x7e0) {
      offset -= 0x7d0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      teop_to_stats_adr_oxbar_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7e0 && offset < 0x7f0) {
      offset -= 0x7e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      teop_to_meter_adr_oxbar_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7f0 && offset < 0x800) {
      offset -= 0x7f0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stats_to_teop_adr_oxbar_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : meter_to_teop_adr_oxbar_ctl_) {
      f0.reset();
    }
    for (auto &f0 : teop_bus_ctl_) {
      f0.reset();
    }
    for (auto &f0 : mau_snapshot_meter_adr_) {
      f0.reset();
    }
    for (auto &f0 : immediate_data_8b_enable_) {
      f0.reset();
    }
    for (auto &f0 : deferred_eop_bus_delay_) {
      f0.reset();
    }
    for (auto &f0 : movereg_ad_stats_alu_to_logical_xbar_ctl_) {
      f0.reset();
    }
    for (auto &f0 : movereg_ad_meter_alu_to_logical_xbar_ctl_) {
      f0.reset();
    }
    for (auto &f0 : movereg_idle_pop_ctl_) {
      f0.reset();
    }
    for (auto &f0 : stats_bubble_req_) {
      f0.reset();
    }
    for (auto &f0 : meter_bubble_req_) {
      f0.reset();
    }
    for (auto &f0 : idle_bubble_req_) {
      f0.reset();
    }
    for (auto &f0 : bubble_req_ctl_) {
      f0.reset();
    }
    for (auto &f0 : oflo_adr_user_) {
      f0.reset();
    }
    for (auto &f0 : atomic_mod_sram_go_pending_) {
      f0.reset();
    }
    meter_enable_.reset();
    mau_diag_adr_dist_idletime_adr_oxbar_ctl_.reset();
    deferred_oflo_ctl_.reset();
    adr_dist_mem_slow_mode_.reset();
    immediate_data_rng_enable_.reset();
    mau_diag_32b_oxbar_ctl_.reset();
    mau_diag_32b_oxbar_premux_ctl_.reset();
    mau_diag_8b_oxbar_ctl_.reset();
    mau_diag_adb_map_.reset();
    mau_diag_stats_adr_sel_.reset();
    mau_diag_meter_adr_sel_.reset();
    mau_diag_eop_vld_xport_.reset();
    intr_status_mau_ad_.reset();
    intr_enable0_mau_ad_.reset();
    for (auto &f0 : immediate_data_8b_ixbar_ctl_) {
      f0.reset();
    }
    for (auto &f0 : immediate_data_16b_ixbar_ctl_) {
      f0.reset();
    }
    for (auto &f0 : immediate_data_32b_ixbar_ctl_) {
      f0.reset();
    }
    for (auto &f0 : meter_color_output_map_) {
      f0.reset();
    }
    for (auto &f0 : meter_color_logical_to_phys_icxbar_ctl_) {
      f0.reset();
    }
    for (auto &f0 : adr_dist_action_data_adr_icxbar_ctl_) {
      f0.reset();
    }
    for (auto &f0 : adr_dist_stats_adr_icxbar_ctl_) {
      f0.reset();
    }
    for (auto &f0 : adr_dist_meter_adr_icxbar_ctl_) {
      f0.reset();
    }
    for (auto &f0 : idletime_sweep_ctl_) {
      f0.reset();
    }
    for (auto &f0 : idletime_slip_) {
      f0.reset();
    }
    for (auto &f0 : idletime_slip_intr_ctl_) {
      f0.reset();
    }
    for (auto &f0 : movereg_idle_ctl_) {
      f0.reset();
    }
    for (auto &f0 : mau_stateful_log_counter_logical_map_) {
      f0.reset();
    }
    for (auto &f0 : mau_stateful_log_stage_vpn_offset_) {
      f0.reset();
    }
    for (auto &f0 : stateful_instr_width_logical_) {
      f0.reset();
    }
    intr_enable1_mau_ad_.reset();
    intr_inject_mau_ad_.reset();
    intr_freeze_enable_mau_ad_.reset();
    idletime_slip_errlog_.reset();
    for (auto &f0 : adr_dist_idletime_adr_oxbar_ctl_) {
      f0.reset();
    }
    for (auto &f0 : packet_action_at_headertime_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : deferred_ram_ctl_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    meter_sweep_errlog_.reset();
    meter_adr_shift_.reset();
    for (auto &f0 : meter_sweep_ctl_) {
      f0.reset();
    }
    for (auto &f0 : meter_sweep_cmd_ovr_ctl_) {
      f0.reset();
    }
    for (auto &f0 : meter_sweep_num_subwords_) {
      f0.reset();
    }
    for (auto &f0 : adr_dist_pipe_delay_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : stats_lrt_fsm_sweep_size_) {
      f0.reset();
    }
    for (auto &f0 : stats_lrt_fsm_sweep_offset_) {
      f0.reset();
    }
    for (auto &f0 : stats_lrt_sweep_adr_) {
      f0.reset();
    }
    for (auto &f0 : immediate_data_rng_logical_map_ctl_) {
      f0.reset();
    }
    for (auto &f0 : movereg_ad_direct_) {
      f0.reset();
    }
    for (auto &f0 : movereg_stats_ctl_) {
      f0.reset();
    }
    for (auto &f0 : movereg_meter_ctl_) {
      f0.reset();
    }
    for (auto &f0 : mau_ad_meter_virt_lt_) {
      f0.reset();
    }
    for (auto &f0 : mau_ad_stats_virt_lt_) {
      f0.reset();
    }
    for (auto &f0 : deferred_stats_parity_control_) {
      f0.reset();
    }
    for (auto &f0 : deferred_stats_parity_errlog_) {
      f0.reset();
    }
    for (auto &f0 : deferred_meter_parity_control_) {
      f0.reset();
    }
    for (auto &f0 : def_meter_sbe_errlog_) {
      f0.reset();
    }
    for (auto &f0 : adr_dist_table_thread_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_stats_alu_vpn_range_) {
      f0.reset();
    }
    for (auto &f0 : mau_meter_alu_vpn_range_) {
      f0.reset();
    }
    for (auto &f0 : mau_stateful_log_counter_oxbar_map_) {
      f0.reset();
    }
    for (auto &f0 : meter_alu_adr_range_check_icxbar_map_) {
      f0.reset();
    }
    for (auto &f0 : dp_teop_stats_ctl_) {
      f0.reset();
    }
    for (auto &f0 : dp_teop_meter_ctl_) {
      f0.reset();
    }
    for (auto &f0 : teop_to_stats_adr_oxbar_ctl_) {
      f0.reset();
    }
    for (auto &f0 : teop_to_meter_adr_oxbar_ctl_) {
      f0.reset();
    }
    for (auto &f0 : stats_to_teop_adr_oxbar_ctl_) {
      f0.reset();
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x10) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += meter_to_teop_adr_oxbar_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x20) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += teop_bus_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_snapshot_meter_adr_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x38) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += immediate_data_8b_enable_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x40) {
      offset -= 0x38;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += deferred_eop_bus_delay_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += movereg_ad_stats_alu_to_logical_xbar_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += movereg_ad_meter_alu_to_logical_xbar_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += movereg_idle_pop_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stats_bubble_req_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += meter_bubble_req_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += idle_bubble_req_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x78) {
      offset -= 0x70;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += bubble_req_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x78 && offset < 0x80) {
      offset -= 0x78;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += oflo_adr_user_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x108) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += atomic_mod_sram_go_pending_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      r += meter_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10c && offset < 0x110) {
      offset -= 0x10c;
      r += mau_diag_adr_dist_idletime_adr_oxbar_ctl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x110 && offset < 0x114) {
      offset -= 0x110;
      r += deferred_oflo_ctl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x114 && offset < 0x118) {
      offset -= 0x114;
      r += adr_dist_mem_slow_mode_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x118 && offset < 0x11c) {
      offset -= 0x118;
      r += immediate_data_rng_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x11c && offset < 0x120) {
      offset -= 0x11c;
      r += mau_diag_32b_oxbar_ctl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x120 && offset < 0x124) {
      offset -= 0x120;
      r += mau_diag_32b_oxbar_premux_ctl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x124 && offset < 0x128) {
      offset -= 0x124;
      r += mau_diag_8b_oxbar_ctl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x128 && offset < 0x12c) {
      offset -= 0x128;
      r += mau_diag_adb_map_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x12c && offset < 0x130) {
      offset -= 0x12c;
      r += mau_diag_stats_adr_sel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x130 && offset < 0x134) {
      offset -= 0x130;
      r += mau_diag_meter_adr_sel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x134 && offset < 0x138) {
      offset -= 0x134;
      r += mau_diag_eop_vld_xport_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x138 && offset < 0x13c) {
      offset -= 0x138;
      r += intr_status_mau_ad_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x13c && offset < 0x140) {
      offset -= 0x13c;
      r += intr_enable0_mau_ad_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x200) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += immediate_data_8b_ixbar_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x280) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += immediate_data_16b_ixbar_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x280 && offset < 0x2c0) {
      offset -= 0x280;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += immediate_data_32b_ixbar_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c0 && offset < 0x300) {
      offset -= 0x2c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += meter_color_output_map_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x300 && offset < 0x340) {
      offset -= 0x300;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += meter_color_logical_to_phys_icxbar_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x340 && offset < 0x380) {
      offset -= 0x340;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += adr_dist_action_data_adr_icxbar_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x380 && offset < 0x3c0) {
      offset -= 0x380;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += adr_dist_stats_adr_icxbar_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c0 && offset < 0x400) {
      offset -= 0x3c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += adr_dist_meter_adr_icxbar_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400 && offset < 0x440) {
      offset -= 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += idletime_sweep_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x440 && offset < 0x480) {
      offset -= 0x440;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += idletime_slip_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x480 && offset < 0x4c0) {
      offset -= 0x480;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += idletime_slip_intr_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c0 && offset < 0x500) {
      offset -= 0x4c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += movereg_idle_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x500 && offset < 0x540) {
      offset -= 0x500;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stateful_log_counter_logical_map_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x540 && offset < 0x580) {
      offset -= 0x540;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stateful_log_stage_vpn_offset_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x580 && offset < 0x5c0) {
      offset -= 0x580;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stateful_instr_width_logical_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5c0 && offset < 0x5c4) {
      offset -= 0x5c0;
      r += intr_enable1_mau_ad_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5c4 && offset < 0x5c8) {
      offset -= 0x5c4;
      r += intr_inject_mau_ad_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5c8 && offset < 0x5cc) {
      offset -= 0x5c8;
      r += intr_freeze_enable_mau_ad_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5cc && offset < 0x5d0) {
      offset -= 0x5cc;
      r += idletime_slip_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5e0 && offset < 0x5f4) {
      offset -= 0x5e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += adr_dist_idletime_adr_oxbar_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x600 && offset < 0x620) {
      offset -= 0x600;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += packet_action_at_headertime_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x620 && offset < 0x640) {
      offset -= 0x620;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += deferred_ram_ctl_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x640 && offset < 0x644) {
      offset -= 0x640;
      r += meter_sweep_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x644 && offset < 0x648) {
      offset -= 0x644;
      r += meter_adr_shift_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x650 && offset < 0x660) {
      offset -= 0x650;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += meter_sweep_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x660 && offset < 0x670) {
      offset -= 0x660;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += meter_sweep_cmd_ovr_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x670 && offset < 0x680) {
      offset -= 0x670;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += meter_sweep_num_subwords_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x680 && offset < 0x690) {
      offset -= 0x680;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += adr_dist_pipe_delay_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x690 && offset < 0x6a0) {
      offset -= 0x690;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stats_lrt_fsm_sweep_size_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6a0 && offset < 0x6b0) {
      offset -= 0x6a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stats_lrt_fsm_sweep_offset_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6b0 && offset < 0x6c0) {
      offset -= 0x6b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stats_lrt_sweep_adr_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6c0 && offset < 0x6d0) {
      offset -= 0x6c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += immediate_data_rng_logical_map_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6d0 && offset < 0x6dc) {
      offset -= 0x6d0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += movereg_ad_direct_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6e0 && offset < 0x6f0) {
      offset -= 0x6e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += movereg_stats_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6f0 && offset < 0x700) {
      offset -= 0x6f0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += movereg_meter_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x700 && offset < 0x710) {
      offset -= 0x700;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_ad_meter_virt_lt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x710 && offset < 0x720) {
      offset -= 0x710;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_ad_stats_virt_lt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x720 && offset < 0x730) {
      offset -= 0x720;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += deferred_stats_parity_control_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x730 && offset < 0x740) {
      offset -= 0x730;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += deferred_stats_parity_errlog_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x740 && offset < 0x750) {
      offset -= 0x740;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += deferred_meter_parity_control_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x750 && offset < 0x760) {
      offset -= 0x750;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += def_meter_sbe_errlog_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x760 && offset < 0x770) {
      offset -= 0x760;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += adr_dist_table_thread_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x770 && offset < 0x780) {
      offset -= 0x770;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stats_alu_vpn_range_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x780 && offset < 0x790) {
      offset -= 0x780;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_meter_alu_vpn_range_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x790 && offset < 0x7a0) {
      offset -= 0x790;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stateful_log_counter_oxbar_map_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7a0 && offset < 0x7b0) {
      offset -= 0x7a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += meter_alu_adr_range_check_icxbar_map_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7b0 && offset < 0x7c0) {
      offset -= 0x7b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += dp_teop_stats_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7c0 && offset < 0x7d0) {
      offset -= 0x7c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += dp_teop_meter_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7d0 && offset < 0x7e0) {
      offset -= 0x7d0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += teop_to_stats_adr_oxbar_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7e0 && offset < 0x7f0) {
      offset -= 0x7e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += teop_to_meter_adr_oxbar_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7f0 && offset < 0x800) {
      offset -= 0x7f0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stats_to_teop_adr_oxbar_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<4;++a0) {
      r += meter_to_teop_adr_oxbar_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += teop_bus_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += mau_snapshot_meter_adr_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += immediate_data_8b_enable_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += deferred_eop_bus_delay_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += movereg_ad_stats_alu_to_logical_xbar_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += movereg_ad_meter_alu_to_logical_xbar_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += movereg_idle_pop_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += stats_bubble_req_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += meter_bubble_req_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += idle_bubble_req_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += bubble_req_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += oflo_adr_user_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += atomic_mod_sram_go_pending_[a0].to_string(print_zeros,indent_string) ;
    }
    r += meter_enable_.to_string(print_zeros,indent_string) ;
    r += mau_diag_adr_dist_idletime_adr_oxbar_ctl_.to_string(print_zeros,indent_string) ;
    r += deferred_oflo_ctl_.to_string(print_zeros,indent_string) ;
    r += adr_dist_mem_slow_mode_.to_string(print_zeros,indent_string) ;
    r += immediate_data_rng_enable_.to_string(print_zeros,indent_string) ;
    r += mau_diag_32b_oxbar_ctl_.to_string(print_zeros,indent_string) ;
    r += mau_diag_32b_oxbar_premux_ctl_.to_string(print_zeros,indent_string) ;
    r += mau_diag_8b_oxbar_ctl_.to_string(print_zeros,indent_string) ;
    r += mau_diag_adb_map_.to_string(print_zeros,indent_string) ;
    r += mau_diag_stats_adr_sel_.to_string(print_zeros,indent_string) ;
    r += mau_diag_meter_adr_sel_.to_string(print_zeros,indent_string) ;
    r += mau_diag_eop_vld_xport_.to_string(print_zeros,indent_string) ;
    r += intr_status_mau_ad_.to_string(print_zeros,indent_string) ;
    r += intr_enable0_mau_ad_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<32;++a0) {
      r += immediate_data_8b_ixbar_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<32;++a0) {
      r += immediate_data_16b_ixbar_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += immediate_data_32b_ixbar_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += meter_color_output_map_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += meter_color_logical_to_phys_icxbar_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += adr_dist_action_data_adr_icxbar_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += adr_dist_stats_adr_icxbar_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += adr_dist_meter_adr_icxbar_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += idletime_sweep_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += idletime_slip_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += idletime_slip_intr_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += movereg_idle_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mau_stateful_log_counter_logical_map_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mau_stateful_log_stage_vpn_offset_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += stateful_instr_width_logical_[a0].to_string(print_zeros,indent_string) ;
    }
    r += intr_enable1_mau_ad_.to_string(print_zeros,indent_string) ;
    r += intr_inject_mau_ad_.to_string(print_zeros,indent_string) ;
    r += intr_freeze_enable_mau_ad_.to_string(print_zeros,indent_string) ;
    r += idletime_slip_errlog_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<5;++a0) {
      r += adr_dist_idletime_adr_oxbar_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<4;++a0) {
        r += packet_action_at_headertime_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<4;++a0) {
        r += deferred_ram_ctl_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    r += meter_sweep_errlog_.to_string(print_zeros,indent_string) ;
    r += meter_adr_shift_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += meter_sweep_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += meter_sweep_cmd_ovr_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += meter_sweep_num_subwords_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += adr_dist_pipe_delay_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += stats_lrt_fsm_sweep_size_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += stats_lrt_fsm_sweep_offset_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += stats_lrt_sweep_adr_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += immediate_data_rng_logical_map_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<3;++a0) {
      r += movereg_ad_direct_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += movereg_stats_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += movereg_meter_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += mau_ad_meter_virt_lt_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += mau_ad_stats_virt_lt_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += deferred_stats_parity_control_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += deferred_stats_parity_errlog_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += deferred_meter_parity_control_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += def_meter_sbe_errlog_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += adr_dist_table_thread_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += mau_stats_alu_vpn_range_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += mau_meter_alu_vpn_range_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += mau_stateful_log_counter_oxbar_map_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += meter_alu_adr_range_check_icxbar_map_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += dp_teop_stats_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += dp_teop_meter_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += teop_to_stats_adr_oxbar_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += teop_to_meter_adr_oxbar_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += stats_to_teop_adr_oxbar_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< MeterToTeopAdrOxbarCtlMutable, 4 > meter_to_teop_adr_oxbar_ctl_;
  std::array< TeopBusCtlMutable, 4 > teop_bus_ctl_;
  std::array< MauSnapshotMeterAdrMutable, 4 > mau_snapshot_meter_adr_;
  std::array< ImmediateData_8bEnableMutable, 2 > immediate_data_8b_enable_;
  std::array< DeferredEopBusDelayMutable, 2 > deferred_eop_bus_delay_;
  std::array< MoveregAdStatsAluToLogicalXbarCtlMutable, 2 > movereg_ad_stats_alu_to_logical_xbar_ctl_;
  std::array< MoveregAdMeterAluToLogicalXbarCtlMutable, 2 > movereg_ad_meter_alu_to_logical_xbar_ctl_;
  std::array< MoveregIdlePopCtlMutable, 2 > movereg_idle_pop_ctl_;
  std::array< StatsBubbleReqMutable, 2 > stats_bubble_req_;
  std::array< MeterBubbleReqMutable, 2 > meter_bubble_req_;
  std::array< IdleBubbleReqMutable, 2 > idle_bubble_req_;
  std::array< BubbleReqCtlMutable, 2 > bubble_req_ctl_;
  std::array< OfloAdrUserMutable, 2 > oflo_adr_user_;
  std::array< AtomicModSramGoPendingMutable, 2 > atomic_mod_sram_go_pending_;
  MeterEnableMutable meter_enable_;
  MauDiagAdrDistIdletimeAdrOxbarCtlMutable mau_diag_adr_dist_idletime_adr_oxbar_ctl_;
  DeferredOfloCtlMutable deferred_oflo_ctl_;
  AdrDistMemSlowModeMutable adr_dist_mem_slow_mode_;
  ImmediateDataRngEnableMutable immediate_data_rng_enable_;
  MauDiag_32bOxbarCtlMutable mau_diag_32b_oxbar_ctl_;
  MauDiag_32bOxbarPremuxCtlMutable mau_diag_32b_oxbar_premux_ctl_;
  MauDiag_8bOxbarCtlMutable mau_diag_8b_oxbar_ctl_;
  MauDiagAdbMapMutable mau_diag_adb_map_;
  MauDiagStatsAdrSelMutable mau_diag_stats_adr_sel_;
  MauDiagMeterAdrSelMutable mau_diag_meter_adr_sel_;
  MauDiagEopVldXportMutable mau_diag_eop_vld_xport_;
  IntrStatusMauAdMutable intr_status_mau_ad_;
  IntrEnable0MauAdMutable intr_enable0_mau_ad_;
  std::array< ImmediateData_8bIxbarCtlMutable, 32 > immediate_data_8b_ixbar_ctl_;
  std::array< ImmediateData_16bIxbarCtlMutable, 32 > immediate_data_16b_ixbar_ctl_;
  std::array< ImmediateData_32bIxbarCtlMutable, 16 > immediate_data_32b_ixbar_ctl_;
  std::array< MeterColorOutputMapMutable, 16 > meter_color_output_map_;
  std::array< MeterColorLogicalToPhysIcxbarCtlMutable, 16 > meter_color_logical_to_phys_icxbar_ctl_;
  std::array< AdrDistActionDataAdrIcxbarCtlMutable, 16 > adr_dist_action_data_adr_icxbar_ctl_;
  std::array< AdrDistStatsAdrIcxbarCtlMutable, 16 > adr_dist_stats_adr_icxbar_ctl_;
  std::array< AdrDistMeterAdrIcxbarCtlMutable, 16 > adr_dist_meter_adr_icxbar_ctl_;
  std::array< IdletimeSweepCtlMutable, 16 > idletime_sweep_ctl_;
  std::array< IdletimeSlipMutable, 16 > idletime_slip_;
  std::array< IdletimeSlipIntrCtlMutable, 16 > idletime_slip_intr_ctl_;
  std::array< MoveregIdleCtlMutable, 16 > movereg_idle_ctl_;
  std::array< MauStatefulLogCounterLogicalMapMutable, 16 > mau_stateful_log_counter_logical_map_;
  std::array< MauStatefulLogStageVpnOffsetMutable, 16 > mau_stateful_log_stage_vpn_offset_;
  std::array< StatefulInstrWidthLogicalMutable, 16 > stateful_instr_width_logical_;
  IntrEnable1MauAdMutable intr_enable1_mau_ad_;
  IntrInjectMauAdMutable intr_inject_mau_ad_;
  IntrFreezeEnableMauAdMutable intr_freeze_enable_mau_ad_;
  IdletimeSlipErrlogMutable idletime_slip_errlog_;
  std::array< AdrDistIdletimeAdrOxbarCtlMutable, 5 > adr_dist_idletime_adr_oxbar_ctl_;
  std::array< std::array< PacketActionAtHeadertimeMutable, 4 >, 2 > packet_action_at_headertime_;
  std::array< std::array< DeferredRamCtlMutable, 4 >, 2 > deferred_ram_ctl_;
  MeterSweepErrlogMutable meter_sweep_errlog_;
  MeterAdrShiftMutable meter_adr_shift_;
  std::array< MeterSweepCtlMutable, 4 > meter_sweep_ctl_;
  std::array< MeterSweepCmdOvrCtlMutable, 4 > meter_sweep_cmd_ovr_ctl_;
  std::array< MeterSweepNumSubwordsMutable, 4 > meter_sweep_num_subwords_;
  std::array< std::array< AdrDistPipeDelayMutable, 2 >, 2 > adr_dist_pipe_delay_;
  std::array< StatsLrtFsmSweepSizeMutable, 4 > stats_lrt_fsm_sweep_size_;
  std::array< StatsLrtFsmSweepOffsetMutable, 4 > stats_lrt_fsm_sweep_offset_;
  std::array< StatsLrtSweepAdrMutable, 4 > stats_lrt_sweep_adr_;
  std::array< ImmediateDataRngLogicalMapCtlMutable, 4 > immediate_data_rng_logical_map_ctl_;
  std::array< MoveregAdDirectMutable, 3 > movereg_ad_direct_;
  std::array< MoveregStatsCtlMutable, 4 > movereg_stats_ctl_;
  std::array< MoveregMeterCtlMutable, 4 > movereg_meter_ctl_;
  std::array< MauAdMeterVirtLtMutable, 4 > mau_ad_meter_virt_lt_;
  std::array< MauAdStatsVirtLtMutable, 4 > mau_ad_stats_virt_lt_;
  std::array< DeferredStatsParityControlMutable, 4 > deferred_stats_parity_control_;
  std::array< DeferredStatsParityErrlogMutable, 4 > deferred_stats_parity_errlog_;
  std::array< DeferredMeterParityControlMutable, 4 > deferred_meter_parity_control_;
  std::array< DefMeterSbeErrlogMutable, 4 > def_meter_sbe_errlog_;
  std::array< std::array< AdrDistTableThreadMutable, 2 >, 2 > adr_dist_table_thread_;
  std::array< MauStatsAluVpnRangeMutable, 4 > mau_stats_alu_vpn_range_;
  std::array< MauMeterAluVpnRangeMutable, 4 > mau_meter_alu_vpn_range_;
  std::array< MauStatefulLogCounterOxbarMapMutable, 4 > mau_stateful_log_counter_oxbar_map_;
  std::array< MeterAluAdrRangeCheckIcxbarMapMutable, 4 > meter_alu_adr_range_check_icxbar_map_;
  std::array< DpTeopStatsCtlMutable, 4 > dp_teop_stats_ctl_;
  std::array< DpTeopMeterCtlMutable, 4 > dp_teop_meter_ctl_;
  std::array< TeopToStatsAdrOxbarCtlMutable, 4 > teop_to_stats_adr_oxbar_ctl_;
  std::array< TeopToMeterAdrOxbarCtlMutable, 4 > teop_to_meter_adr_oxbar_ctl_;
  std::array< StatsToTeopAdrOxbarCtlMutable, 4 > stats_to_teop_adr_oxbar_ctl_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to rams
    offset += 0x18000; // to get to match
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MAU_ADDRESS_DISTRIBUTION_ADDRMAP_MUTABLE_H__
