/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_DIAG_CFG_OXBAR_CTL_MUTABLE_H__
#define __REGISTER_INCLUDES_MAU_DIAG_CFG_OXBAR_CTL_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class MauDiagCfgOxbarCtlMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauDiagCfgOxbarCtlMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_diag_cfg_oxbar_ctl, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_diag_cfg_oxbar_ctl), 4, true, write_callback, read_callback, std::string("MauDiagCfgOxbarCtlMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_diag_cfg_oxbar_ctl))
    {
    }
  MauDiagCfgOxbarCtlMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MauDiagCfgOxbarCtlMutable")
    {
    }
public:


  uint8_t diag_oxbar_out0_sel() { return diag_oxbar_out0_sel_; }
  void diag_oxbar_out0_sel(const uint8_t &v) { diag_oxbar_out0_sel_=v; }


  uint8_t diag_oxbar_out0_enable() { return diag_oxbar_out0_enable_; }
  void diag_oxbar_out0_enable(const uint8_t &v) { diag_oxbar_out0_enable_=v; }


  uint8_t diag_oxbar_out1_sel() { return diag_oxbar_out1_sel_; }
  void diag_oxbar_out1_sel(const uint8_t &v) { diag_oxbar_out1_sel_=v; }


  uint8_t diag_oxbar_out1_enable() { return diag_oxbar_out1_enable_; }
  void diag_oxbar_out1_enable(const uint8_t &v) { diag_oxbar_out1_enable_=v; }


  uint8_t diag_oxbar_out2_sel() { return diag_oxbar_out2_sel_; }
  void diag_oxbar_out2_sel(const uint8_t &v) { diag_oxbar_out2_sel_=v; }


  uint8_t diag_oxbar_out2_enable() { return diag_oxbar_out2_enable_; }
  void diag_oxbar_out2_enable(const uint8_t &v) { diag_oxbar_out2_enable_=v; }


  uint8_t diag_oxbar_out3_sel() { return diag_oxbar_out3_sel_; }
  void diag_oxbar_out3_sel(const uint8_t &v) { diag_oxbar_out3_sel_=v; }


  uint8_t diag_oxbar_out3_enable() { return diag_oxbar_out3_enable_; }
  void diag_oxbar_out3_enable(const uint8_t &v) { diag_oxbar_out3_enable_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (diag_oxbar_out0_sel_ & 0x3f);
    *data |= ((diag_oxbar_out0_enable_ & 0x1) << 6);
    *data |= ((diag_oxbar_out1_sel_ & 0x3f) << 7);
    *data |= ((diag_oxbar_out1_enable_ & 0x1) << 13);
    *data |= ((diag_oxbar_out2_sel_ & 0x3f) << 14);
    *data |= ((diag_oxbar_out2_enable_ & 0x1) << 20);
    *data |= ((diag_oxbar_out3_sel_ & 0x3f) << 21);
    *data |= ((diag_oxbar_out3_enable_ & 0x1) << 27);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    diag_oxbar_out0_sel_ = (data & 0x3f);
    diag_oxbar_out0_enable_ = ((data >> 6) & 0x1);
    diag_oxbar_out1_sel_ = ((data >> 7) & 0x3f);
    diag_oxbar_out1_enable_ = ((data >> 13) & 0x1);
    diag_oxbar_out2_sel_ = ((data >> 14) & 0x3f);
    diag_oxbar_out2_enable_ = ((data >> 20) & 0x1);
    diag_oxbar_out3_sel_ = ((data >> 21) & 0x3f);
    diag_oxbar_out3_enable_ = ((data >> 27) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    diag_oxbar_out0_sel_ = 0x0;
    diag_oxbar_out0_enable_ = 0x0;
    diag_oxbar_out1_sel_ = 0x0;
    diag_oxbar_out1_enable_ = 0x0;
    diag_oxbar_out2_sel_ = 0x0;
    diag_oxbar_out2_enable_ = 0x0;
    diag_oxbar_out3_sel_ = 0x0;
    diag_oxbar_out3_enable_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MauDiagCfgOxbarCtlMutable") + ":\n";
    r += indent_string + "  " + std::string("diag_oxbar_out0_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oxbar_out0_sel_) ) + "\n";
    all_zeros &= (0 == diag_oxbar_out0_sel_);
    r += indent_string + "  " + std::string("diag_oxbar_out0_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oxbar_out0_enable_) ) + "\n";
    all_zeros &= (0 == diag_oxbar_out0_enable_);
    r += indent_string + "  " + std::string("diag_oxbar_out1_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oxbar_out1_sel_) ) + "\n";
    all_zeros &= (0 == diag_oxbar_out1_sel_);
    r += indent_string + "  " + std::string("diag_oxbar_out1_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oxbar_out1_enable_) ) + "\n";
    all_zeros &= (0 == diag_oxbar_out1_enable_);
    r += indent_string + "  " + std::string("diag_oxbar_out2_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oxbar_out2_sel_) ) + "\n";
    all_zeros &= (0 == diag_oxbar_out2_sel_);
    r += indent_string + "  " + std::string("diag_oxbar_out2_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oxbar_out2_enable_) ) + "\n";
    all_zeros &= (0 == diag_oxbar_out2_enable_);
    r += indent_string + "  " + std::string("diag_oxbar_out3_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oxbar_out3_sel_) ) + "\n";
    all_zeros &= (0 == diag_oxbar_out3_sel_);
    r += indent_string + "  " + std::string("diag_oxbar_out3_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oxbar_out3_enable_) ) + "\n";
    all_zeros &= (0 == diag_oxbar_out3_enable_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MauDiagCfgOxbarCtlMutable") + ":\n";
    r += indent_string + "  " + std::string("diag_oxbar_out0_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oxbar_out0_sel_) ) + "\n";
    all_zeros &= (0 == diag_oxbar_out0_sel_);
    r += indent_string + "  " + std::string("diag_oxbar_out0_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oxbar_out0_enable_) ) + "\n";
    all_zeros &= (0 == diag_oxbar_out0_enable_);
    r += indent_string + "  " + std::string("diag_oxbar_out1_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oxbar_out1_sel_) ) + "\n";
    all_zeros &= (0 == diag_oxbar_out1_sel_);
    r += indent_string + "  " + std::string("diag_oxbar_out1_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oxbar_out1_enable_) ) + "\n";
    all_zeros &= (0 == diag_oxbar_out1_enable_);
    r += indent_string + "  " + std::string("diag_oxbar_out2_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oxbar_out2_sel_) ) + "\n";
    all_zeros &= (0 == diag_oxbar_out2_sel_);
    r += indent_string + "  " + std::string("diag_oxbar_out2_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oxbar_out2_enable_) ) + "\n";
    all_zeros &= (0 == diag_oxbar_out2_enable_);
    r += indent_string + "  " + std::string("diag_oxbar_out3_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oxbar_out3_sel_) ) + "\n";
    all_zeros &= (0 == diag_oxbar_out3_sel_);
    r += indent_string + "  " + std::string("diag_oxbar_out3_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oxbar_out3_enable_) ) + "\n";
    all_zeros &= (0 == diag_oxbar_out3_enable_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t diag_oxbar_out0_sel_;
  uint8_t diag_oxbar_out0_enable_;
  uint8_t diag_oxbar_out1_sel_;
  uint8_t diag_oxbar_out1_enable_;
  uint8_t diag_oxbar_out2_sel_;
  uint8_t diag_oxbar_out2_enable_;
  uint8_t diag_oxbar_out3_sel_;
  uint8_t diag_oxbar_out3_enable_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_diag_cfg_oxbar_ctl
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x40000; // to get to cfg_regs
    offset += 0x160; // to get to mau_diag_cfg_oxbar_ctl
    assert(index_mau_diag_cfg_oxbar_ctl < 8);
    offset += index_mau_diag_cfg_oxbar_ctl * 0x4; // mau_diag_cfg_oxbar_ctl[]
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MAU_DIAG_CFG_OXBAR_CTL_MUTABLE_H__
