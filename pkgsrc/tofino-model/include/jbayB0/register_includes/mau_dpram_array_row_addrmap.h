/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_DPRAM_ARRAY_ROW_ADDRMAP_H__
#define __REGISTER_INCLUDES_MAU_DPRAM_ARRAY_ROW_ADDRMAP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "intr_enable0_mau_synth2port.h"
#include "intr_enable1_mau_synth2port.h"
#include "intr_inject_mau_synth2port.h"
#include "intr_status_mau_synth2port.h"
#include "mau_synth2port_errlog.h"
#include "mau_synth2port_error_ctl.h"
#include "synth2port_ctl.h"
#include "synth2port_fabric_ctl.h"
#include "synth2port_hbus_members.h"
#include "synth2port_vpn_ctl.h"

namespace jbayB0 {
  namespace register_classes {

class MauDpramArrayRowAddrmap : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauDpramArrayRowAddrmap(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_map_and_alu_row_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_map_and_alu_row_addrmap), 128, false, write_callback, read_callback, std::string("MauDpramArrayRowAddrmap")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_map_and_alu_row_addrmap))
    {
    }
  MauDpramArrayRowAddrmap(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MauDpramArrayRowAddrmap")
    {
    }
public:






  Synth2portVpnCtl &synth2port_vpn_ctl() { return synth2port_vpn_ctl_; }






  IntrStatusMauSynth2port &intr_status_mau_synth2port() { return intr_status_mau_synth2port_; }






  IntrEnable0MauSynth2port &intr_enable0_mau_synth2port() { return intr_enable0_mau_synth2port_; }






  IntrEnable1MauSynth2port &intr_enable1_mau_synth2port() { return intr_enable1_mau_synth2port_; }







  IntrInjectMauSynth2port &intr_inject_mau_synth2port() { return intr_inject_mau_synth2port_; }





  MauSynth2portErrlog &mau_synth2port_errlog() { return mau_synth2port_errlog_; }





  MauSynth2portErrorCtl &mau_synth2port_error_ctl() { return mau_synth2port_error_ctl_; }





  Synth2portCtl &synth2port_ctl() { return synth2port_ctl_; }










  Synth2portFabricCtl &synth2port_fabric_ctl(int j1,int j0) { return synth2port_fabric_ctl_[j1][j0]; }
















  Synth2portHbusMembers &synth2port_hbus_members(int j1,int j0) { return synth2port_hbus_members_[j1][j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      synth2port_vpn_ctl_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      intr_status_mau_synth2port_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      intr_enable0_mau_synth2port_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      intr_enable1_mau_synth2port_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      intr_inject_mau_synth2port_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      mau_synth2port_errlog_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      mau_synth2port_error_ctl_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      synth2port_ctl_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x58) {
      offset -= 0x40;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      synth2port_fabric_ctl_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x78) {
      offset -= 0x60;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      synth2port_hbus_members_[ i1 ][ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      synth2port_vpn_ctl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      intr_status_mau_synth2port_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      intr_enable0_mau_synth2port_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      intr_enable1_mau_synth2port_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      intr_inject_mau_synth2port_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      mau_synth2port_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      mau_synth2port_error_ctl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      synth2port_ctl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x58) {
      offset -= 0x40;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      synth2port_fabric_ctl_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x78) {
      offset -= 0x60;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      synth2port_hbus_members_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    synth2port_vpn_ctl_.reset();
    intr_status_mau_synth2port_.reset();
    intr_enable0_mau_synth2port_.reset();
    intr_enable1_mau_synth2port_.reset();
    intr_inject_mau_synth2port_.reset();
    mau_synth2port_errlog_.reset();
    mau_synth2port_error_ctl_.reset();
    synth2port_ctl_.reset();
    for (auto &f0 : synth2port_fabric_ctl_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : synth2port_hbus_members_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += synth2port_vpn_ctl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += intr_status_mau_synth2port_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += intr_enable0_mau_synth2port_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += intr_enable1_mau_synth2port_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += intr_inject_mau_synth2port_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += mau_synth2port_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += mau_synth2port_error_ctl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += synth2port_ctl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x58) {
      offset -= 0x40;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += synth2port_fabric_ctl_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x78) {
      offset -= 0x60;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += synth2port_hbus_members_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += synth2port_vpn_ctl_.to_string(print_zeros,indent_string) ;
    r += intr_status_mau_synth2port_.to_string(print_zeros,indent_string) ;
    r += intr_enable0_mau_synth2port_.to_string(print_zeros,indent_string) ;
    r += intr_enable1_mau_synth2port_.to_string(print_zeros,indent_string) ;
    r += intr_inject_mau_synth2port_.to_string(print_zeros,indent_string) ;
    r += mau_synth2port_errlog_.to_string(print_zeros,indent_string) ;
    r += mau_synth2port_error_ctl_.to_string(print_zeros,indent_string) ;
    r += synth2port_ctl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a1=0;a1<3;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += synth2port_fabric_ctl_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<3;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += synth2port_hbus_members_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  Synth2portVpnCtl synth2port_vpn_ctl_;
  IntrStatusMauSynth2port intr_status_mau_synth2port_;
  IntrEnable0MauSynth2port intr_enable0_mau_synth2port_;
  IntrEnable1MauSynth2port intr_enable1_mau_synth2port_;
  IntrInjectMauSynth2port intr_inject_mau_synth2port_;
  MauSynth2portErrlog mau_synth2port_errlog_;
  MauSynth2portErrorCtl mau_synth2port_error_ctl_;
  Synth2portCtl synth2port_ctl_;
  std::array< std::array< Synth2portFabricCtl, 2 >, 3 > synth2port_fabric_ctl_;
  std::array< std::array< Synth2portHbusMembers, 2 >, 3 > synth2port_hbus_members_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_map_and_alu_row_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to rams
    offset += 0x10000; // to get to map_alu
    assert(index_mau_map_and_alu_row_addrmap < 8);
    offset += index_mau_map_and_alu_row_addrmap * 0x400; // mau_map_and_alu_row_addrmap[]
    offset += 0x80; // to get to i2portctl
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MAU_DPRAM_ARRAY_ROW_ADDRMAP_H__
