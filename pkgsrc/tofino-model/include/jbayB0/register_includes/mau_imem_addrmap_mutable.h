/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_IMEM_ADDRMAP_MUTABLE_H__
#define __REGISTER_INCLUDES_MAU_IMEM_ADDRMAP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "imem_dark_subword16_mutable.h"
#include "imem_dark_subword32_mutable.h"
#include "imem_dark_subword8_mutable.h"
#include "imem_mocha_subword16_mutable.h"
#include "imem_mocha_subword32_mutable.h"
#include "imem_mocha_subword8_mutable.h"
#include "imem_subword16_mutable.h"
#include "imem_subword32_mutable.h"
#include "imem_subword8_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class MauImemAddrmapMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauImemAddrmapMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap), 65536, true, write_callback, read_callback, std::string("MauImemAddrmapMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap))
    {
    }
  MauImemAddrmapMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MauImemAddrmapMutable")
    {
    }
public:











  ImemMochaSubword16Mutable &imem_mocha_subword16(int j3,int j2,int j1,int j0) { return imem_mocha_subword16_[j3][j2][j1][j0]; }











  ImemDarkSubword16Mutable &imem_dark_subword16(int j3,int j2,int j1,int j0) { return imem_dark_subword16_[j3][j2][j1][j0]; }











  ImemMochaSubword32Mutable &imem_mocha_subword32(int j3,int j2,int j1,int j0) { return imem_mocha_subword32_[j3][j2][j1][j0]; }











  ImemMochaSubword8Mutable &imem_mocha_subword8(int j3,int j2,int j1,int j0) { return imem_mocha_subword8_[j3][j2][j1][j0]; }











  ImemDarkSubword32Mutable &imem_dark_subword32(int j3,int j2,int j1,int j0) { return imem_dark_subword32_[j3][j2][j1][j0]; }











  ImemDarkSubword8Mutable &imem_dark_subword8(int j3,int j2,int j1,int j0) { return imem_dark_subword8_[j3][j2][j1][j0]; }











  ImemSubword16Mutable &imem_subword16(int j3,int j2,int j1,int j0) { return imem_subword16_[j3][j2][j1][j0]; }











  ImemSubword32Mutable &imem_subword32(int j3,int j2,int j1,int j0) { return imem_subword32_[j3][j2][j1][j0]; }











  ImemSubword8Mutable &imem_subword8(int j3,int j2,int j1,int j0) { return imem_subword8_[j3][j2][j1][j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x1000) {
      offset -= 0x0;
      int i3 = offset / 0x800;
      offset  -= i3 * 0x800;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      imem_mocha_subword16_[ i3 ][ i2 ][ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x1000 && offset < 0x2000) {
      offset -= 0x1000;
      int i3 = offset / 0x800;
      offset  -= i3 * 0x800;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      imem_dark_subword16_[ i3 ][ i2 ][ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2000 && offset < 0x2800) {
      offset -= 0x2000;
      int i3 = offset / 0x400;
      offset  -= i3 * 0x400;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      imem_mocha_subword32_[ i3 ][ i2 ][ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2800 && offset < 0x3000) {
      offset -= 0x2800;
      int i3 = offset / 0x400;
      offset  -= i3 * 0x400;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      imem_mocha_subword8_[ i3 ][ i2 ][ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3000 && offset < 0x3800) {
      offset -= 0x3000;
      int i3 = offset / 0x400;
      offset  -= i3 * 0x400;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      imem_dark_subword32_[ i3 ][ i2 ][ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3800 && offset < 0x4000) {
      offset -= 0x3800;
      int i3 = offset / 0x400;
      offset  -= i3 * 0x400;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      imem_dark_subword8_[ i3 ][ i2 ][ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x8000 && offset < 0xc000) {
      offset -= 0x8000;
      int i3 = offset / 0x2000;
      offset  -= i3 * 0x2000;
      int i2 = offset / 0x800;
      offset  -= i2 * 0x800;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      imem_subword16_[ i3 ][ i2 ][ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0xc000 && offset < 0xe000) {
      offset -= 0xc000;
      int i3 = offset / 0x1000;
      offset  -= i3 * 0x1000;
      int i2 = offset / 0x800;
      offset  -= i2 * 0x800;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      imem_subword32_[ i3 ][ i2 ][ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0xe000 && offset < 0x10000) {
      offset -= 0xe000;
      int i3 = offset / 0x1000;
      offset  -= i3 * 0x1000;
      int i2 = offset / 0x800;
      offset  -= i2 * 0x800;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      imem_subword8_[ i3 ][ i2 ][ i1 ][ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x1000) {
      offset -= 0x0;
      int i3 = offset / 0x800;
      offset  -= i3 * 0x800;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      imem_mocha_subword16_[ i3 ][ i2 ][ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1000 && offset < 0x2000) {
      offset -= 0x1000;
      int i3 = offset / 0x800;
      offset  -= i3 * 0x800;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      imem_dark_subword16_[ i3 ][ i2 ][ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2000 && offset < 0x2800) {
      offset -= 0x2000;
      int i3 = offset / 0x400;
      offset  -= i3 * 0x400;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      imem_mocha_subword32_[ i3 ][ i2 ][ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2800 && offset < 0x3000) {
      offset -= 0x2800;
      int i3 = offset / 0x400;
      offset  -= i3 * 0x400;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      imem_mocha_subword8_[ i3 ][ i2 ][ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3000 && offset < 0x3800) {
      offset -= 0x3000;
      int i3 = offset / 0x400;
      offset  -= i3 * 0x400;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      imem_dark_subword32_[ i3 ][ i2 ][ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3800 && offset < 0x4000) {
      offset -= 0x3800;
      int i3 = offset / 0x400;
      offset  -= i3 * 0x400;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      imem_dark_subword8_[ i3 ][ i2 ][ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8000 && offset < 0xc000) {
      offset -= 0x8000;
      int i3 = offset / 0x2000;
      offset  -= i3 * 0x2000;
      int i2 = offset / 0x800;
      offset  -= i2 * 0x800;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      imem_subword16_[ i3 ][ i2 ][ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc000 && offset < 0xe000) {
      offset -= 0xc000;
      int i3 = offset / 0x1000;
      offset  -= i3 * 0x1000;
      int i2 = offset / 0x800;
      offset  -= i2 * 0x800;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      imem_subword32_[ i3 ][ i2 ][ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe000 && offset < 0x10000) {
      offset -= 0xe000;
      int i3 = offset / 0x1000;
      offset  -= i3 * 0x1000;
      int i2 = offset / 0x800;
      offset  -= i2 * 0x800;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      imem_subword8_[ i3 ][ i2 ][ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : imem_mocha_subword16_) {
      for (auto &f1 : f0) {
        for (auto &f2 : f1) {
          for (auto &f3 : f2) {
            f3.reset();
          }
        }
      }
    }
    for (auto &f0 : imem_dark_subword16_) {
      for (auto &f1 : f0) {
        for (auto &f2 : f1) {
          for (auto &f3 : f2) {
            f3.reset();
          }
        }
      }
    }
    for (auto &f0 : imem_mocha_subword32_) {
      for (auto &f1 : f0) {
        for (auto &f2 : f1) {
          for (auto &f3 : f2) {
            f3.reset();
          }
        }
      }
    }
    for (auto &f0 : imem_mocha_subword8_) {
      for (auto &f1 : f0) {
        for (auto &f2 : f1) {
          for (auto &f3 : f2) {
            f3.reset();
          }
        }
      }
    }
    for (auto &f0 : imem_dark_subword32_) {
      for (auto &f1 : f0) {
        for (auto &f2 : f1) {
          for (auto &f3 : f2) {
            f3.reset();
          }
        }
      }
    }
    for (auto &f0 : imem_dark_subword8_) {
      for (auto &f1 : f0) {
        for (auto &f2 : f1) {
          for (auto &f3 : f2) {
            f3.reset();
          }
        }
      }
    }
    for (auto &f0 : imem_subword16_) {
      for (auto &f1 : f0) {
        for (auto &f2 : f1) {
          for (auto &f3 : f2) {
            f3.reset();
          }
        }
      }
    }
    for (auto &f0 : imem_subword32_) {
      for (auto &f1 : f0) {
        for (auto &f2 : f1) {
          for (auto &f3 : f2) {
            f3.reset();
          }
        }
      }
    }
    for (auto &f0 : imem_subword8_) {
      for (auto &f1 : f0) {
        for (auto &f2 : f1) {
          for (auto &f3 : f2) {
            f3.reset();
          }
        }
      }
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x1000) {
      offset -= 0x0;
      int i3 = offset / 0x800;
      offset  -= i3 * 0x800;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += imem_mocha_subword16_[ i3 ][ i2 ][ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1000 && offset < 0x2000) {
      offset -= 0x1000;
      int i3 = offset / 0x800;
      offset  -= i3 * 0x800;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += imem_dark_subword16_[ i3 ][ i2 ][ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2000 && offset < 0x2800) {
      offset -= 0x2000;
      int i3 = offset / 0x400;
      offset  -= i3 * 0x400;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += imem_mocha_subword32_[ i3 ][ i2 ][ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2800 && offset < 0x3000) {
      offset -= 0x2800;
      int i3 = offset / 0x400;
      offset  -= i3 * 0x400;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += imem_mocha_subword8_[ i3 ][ i2 ][ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3000 && offset < 0x3800) {
      offset -= 0x3000;
      int i3 = offset / 0x400;
      offset  -= i3 * 0x400;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += imem_dark_subword32_[ i3 ][ i2 ][ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3800 && offset < 0x4000) {
      offset -= 0x3800;
      int i3 = offset / 0x400;
      offset  -= i3 * 0x400;
      int i2 = offset / 0x200;
      offset  -= i2 * 0x200;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += imem_dark_subword8_[ i3 ][ i2 ][ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8000 && offset < 0xc000) {
      offset -= 0x8000;
      int i3 = offset / 0x2000;
      offset  -= i3 * 0x2000;
      int i2 = offset / 0x800;
      offset  -= i2 * 0x800;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += imem_subword16_[ i3 ][ i2 ][ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc000 && offset < 0xe000) {
      offset -= 0xc000;
      int i3 = offset / 0x1000;
      offset  -= i3 * 0x1000;
      int i2 = offset / 0x800;
      offset  -= i2 * 0x800;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += imem_subword32_[ i3 ][ i2 ][ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe000 && offset < 0x10000) {
      offset -= 0xe000;
      int i3 = offset / 0x1000;
      offset  -= i3 * 0x1000;
      int i2 = offset / 0x800;
      offset  -= i2 * 0x800;
      int i1 = offset / 0x80;
      offset  -= i1 * 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += imem_subword8_[ i3 ][ i2 ][ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a3=0;a3<2;++a3) {
      for (uint32_t a2=0;a2<4;++a2) {
        for (uint32_t a1=0;a1<4;++a1) {
          for (uint32_t a0=0;a0<32;++a0) {
            r += imem_mocha_subword16_[a3][a2][a1][a0].to_string(print_zeros,indent_string) ;
          }
        }
      }
    }
    for (uint32_t a3=0;a3<2;++a3) {
      for (uint32_t a2=0;a2<4;++a2) {
        for (uint32_t a1=0;a1<4;++a1) {
          for (uint32_t a0=0;a0<32;++a0) {
            r += imem_dark_subword16_[a3][a2][a1][a0].to_string(print_zeros,indent_string) ;
          }
        }
      }
    }
    for (uint32_t a3=0;a3<2;++a3) {
      for (uint32_t a2=0;a2<2;++a2) {
        for (uint32_t a1=0;a1<4;++a1) {
          for (uint32_t a0=0;a0<32;++a0) {
            r += imem_mocha_subword32_[a3][a2][a1][a0].to_string(print_zeros,indent_string) ;
          }
        }
      }
    }
    for (uint32_t a3=0;a3<2;++a3) {
      for (uint32_t a2=0;a2<2;++a2) {
        for (uint32_t a1=0;a1<4;++a1) {
          for (uint32_t a0=0;a0<32;++a0) {
            r += imem_mocha_subword8_[a3][a2][a1][a0].to_string(print_zeros,indent_string) ;
          }
        }
      }
    }
    for (uint32_t a3=0;a3<2;++a3) {
      for (uint32_t a2=0;a2<2;++a2) {
        for (uint32_t a1=0;a1<4;++a1) {
          for (uint32_t a0=0;a0<32;++a0) {
            r += imem_dark_subword32_[a3][a2][a1][a0].to_string(print_zeros,indent_string) ;
          }
        }
      }
    }
    for (uint32_t a3=0;a3<2;++a3) {
      for (uint32_t a2=0;a2<2;++a2) {
        for (uint32_t a1=0;a1<4;++a1) {
          for (uint32_t a0=0;a0<32;++a0) {
            r += imem_dark_subword8_[a3][a2][a1][a0].to_string(print_zeros,indent_string) ;
          }
        }
      }
    }
    for (uint32_t a3=0;a3<2;++a3) {
      for (uint32_t a2=0;a2<4;++a2) {
        for (uint32_t a1=0;a1<16;++a1) {
          for (uint32_t a0=0;a0<32;++a0) {
            r += imem_subword16_[a3][a2][a1][a0].to_string(print_zeros,indent_string) ;
          }
        }
      }
    }
    for (uint32_t a3=0;a3<2;++a3) {
      for (uint32_t a2=0;a2<2;++a2) {
        for (uint32_t a1=0;a1<16;++a1) {
          for (uint32_t a0=0;a0<32;++a0) {
            r += imem_subword32_[a3][a2][a1][a0].to_string(print_zeros,indent_string) ;
          }
        }
      }
    }
    for (uint32_t a3=0;a3<2;++a3) {
      for (uint32_t a2=0;a2<2;++a2) {
        for (uint32_t a1=0;a1<16;++a1) {
          for (uint32_t a0=0;a0<32;++a0) {
            r += imem_subword8_[a3][a2][a1][a0].to_string(print_zeros,indent_string) ;
          }
        }
      }
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< std::array< std::array< std::array< ImemMochaSubword16Mutable, 32 >, 4 >, 3 >, 2 > imem_mocha_subword16_;
  std::array< std::array< std::array< std::array< ImemDarkSubword16Mutable, 32 >, 4 >, 3 >, 2 > imem_dark_subword16_;
  std::array< std::array< std::array< std::array< ImemMochaSubword32Mutable, 32 >, 4 >, 2 >, 2 > imem_mocha_subword32_;
  std::array< std::array< std::array< std::array< ImemMochaSubword8Mutable, 32 >, 4 >, 2 >, 2 > imem_mocha_subword8_;
  std::array< std::array< std::array< std::array< ImemDarkSubword32Mutable, 32 >, 4 >, 2 >, 2 > imem_dark_subword32_;
  std::array< std::array< std::array< std::array< ImemDarkSubword8Mutable, 32 >, 4 >, 2 >, 2 > imem_dark_subword8_;
  std::array< std::array< std::array< std::array< ImemSubword16Mutable, 32 >, 12 >, 3 >, 2 > imem_subword16_;
  std::array< std::array< std::array< std::array< ImemSubword32Mutable, 32 >, 12 >, 2 >, 2 > imem_subword32_;
  std::array< std::array< std::array< std::array< ImemSubword8Mutable, 32 >, 12 >, 2 >, 2 > imem_subword8_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    return offset;
  }

};













  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MAU_IMEM_ADDRMAP_MUTABLE_H__
