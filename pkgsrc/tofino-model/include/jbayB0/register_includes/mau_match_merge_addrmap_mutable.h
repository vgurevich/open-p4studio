/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_MATCH_MERGE_ADDRMAP_MUTABLE_H__
#define __REGISTER_INCLUDES_MAU_MATCH_MERGE_ADDRMAP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "action_adr_vpn_mod_enable_mutable.h"
#include "actiondata_error_ctl_mutable.h"
#include "emm_ecc_error_ctl_mutable.h"
#include "err_idata_ovr_ctl_mutable.h"
#include "err_idata_ovr_fifo_ctl_mutable.h"
#include "exact_match_delay_thread_mutable.h"
#include "exact_match_logical_result_delay_mutable.h"
#include "exact_match_logical_result_en_mutable.h"
#include "exact_match_phys_result_delay_mutable.h"
#include "exact_match_phys_result_en_mutable.h"
#include "exact_match_phys_result_thread_mutable.h"
#include "exit_gateway_ctl_mutable.h"
#include "gateway_en_mutable.h"
#include "gateway_inhibit_lut_mutable.h"
#include "gateway_next_table_lut_mutable.h"
#include "gateway_payload_data_mutable.h"
#include "gateway_payload_exact_disable_mutable.h"
#include "gateway_payload_exact_pbus_mutable.h"
#include "gateway_payload_exact_shift_ovr_mutable.h"
#include "gateway_payload_match_adr_mutable.h"
#include "gateway_payload_tind_disable_mutable.h"
#include "gateway_payload_tind_pbus_mutable.h"
#include "gateway_to_logicaltable_xbar_ctl_mutable.h"
#include "gateway_to_pbus_xbar_ctl_mutable.h"
#include "gfm_parity_error_ctl_mutable.h"
#include "imem_parity_error_ctl_mutable.h"
#include "logical_table_thread_mutable.h"
#include "match_to_logical_table_ixbar_outputmap_mutable.h"
#include "mau_action_instruction_adr_default_mutable.h"
#include "mau_action_instruction_adr_exact_shiftcount_mutable.h"
#include "mau_action_instruction_adr_map_data_mutable.h"
#include "mau_action_instruction_adr_map_en_mutable.h"
#include "mau_action_instruction_adr_mask_mutable.h"
#include "mau_action_instruction_adr_miss_value_mutable.h"
#include "mau_action_instruction_adr_mode_mutable.h"
#include "mau_action_instruction_adr_per_entry_en_mux_ctl_mutable.h"
#include "mau_action_instruction_adr_tcam_actionbit_map_en_mutable.h"
#include "mau_action_instruction_adr_tcam_shiftcount_mutable.h"
#include "mau_actiondata_adr_default_mutable.h"
#include "mau_actiondata_adr_exact_shiftcount_mutable.h"
#include "mau_actiondata_adr_mask_mutable.h"
#include "mau_actiondata_adr_miss_value_mutable.h"
#include "mau_actiondata_adr_per_entry_en_mux_ctl_mutable.h"
#include "mau_actiondata_adr_tcam_actionbit_map_data_mutable.h"
#include "mau_actiondata_adr_tcam_actionbit_map_en_mutable.h"
#include "mau_actiondata_adr_tcam_shiftcount_mutable.h"
#include "mau_actiondata_adr_vpn_shiftcount_mutable.h"
#include "mau_hash_group_config_mutable.h"
#include "mau_hash_group_expand_mutable.h"
#include "mau_hash_group_mask_mutable.h"
#include "mau_hash_group_shiftcount_mutable.h"
#include "mau_hash_group_xbar_ctl_mutable.h"
#include "mau_idletime_adr_default_mutable.h"
#include "mau_idletime_adr_exact_shiftcount_mutable.h"
#include "mau_idletime_adr_mask_mutable.h"
#include "mau_idletime_adr_miss_value_mutable.h"
#include "mau_idletime_adr_per_entry_en_mux_ctl_mutable.h"
#include "mau_idletime_adr_tcam_actionbit_map_data_mutable.h"
#include "mau_idletime_adr_tcam_actionbit_map_en_mutable.h"
#include "mau_idletime_adr_tcam_shiftcount_mutable.h"
#include "mau_immediate_data_default_mutable.h"
#include "mau_immediate_data_exact_shiftcount_mutable.h"
#include "mau_immediate_data_mask_mutable.h"
#include "mau_immediate_data_miss_value_mutable.h"
#include "mau_immediate_data_tcam_actionbit_map_data_mutable.h"
#include "mau_immediate_data_tcam_actionbit_map_en_mutable.h"
#include "mau_immediate_data_tcam_shiftcount_mutable.h"
#include "mau_logical_to_meter_alu_map_mutable.h"
#include "mau_mapram_color_map_to_logical_ctl_mutable.h"
#include "mau_match_central_mapram_read_color_oflo_ctl_mutable.h"
#include "mau_match_merge_col_addrmap_mutable.h"
#include "mau_meter_adr_default_mutable.h"
#include "mau_meter_adr_exact_shiftcount_mutable.h"
#include "mau_meter_adr_mask_mutable.h"
#include "mau_meter_adr_miss_value_mutable.h"
#include "mau_meter_adr_per_entry_en_mux_ctl_mutable.h"
#include "mau_meter_adr_tcam_actionbit_map_data_mutable.h"
#include "mau_meter_adr_tcam_actionbit_map_en_mutable.h"
#include "mau_meter_adr_tcam_shiftcount_mutable.h"
#include "mau_meter_adr_type_position_mutable.h"
#include "mau_meter_alu_to_logical_map_mutable.h"
#include "mau_meter_precolor_hash_map_to_logical_ctl_mutable.h"
#include "mau_meter_precolor_hash_sel_mutable.h"
#include "mau_payload_shifter_enable_mutable.h"
#include "mau_physical_to_meter_alu_icxbar_map_mutable.h"
#include "mau_selector_action_entry_size_mutable.h"
#include "mau_selector_hash_sps_enable_mutable.h"
#include "mau_selectorlength_default_mutable.h"
#include "mau_selectorlength_mask_mutable.h"
#include "mau_selectorlength_shiftcount_mutable.h"
#include "mau_snapshot_capture_datapath_error_mutable.h"
#include "mau_snapshot_gateway_table_inhibit_logical_mutable.h"
#include "mau_snapshot_global_exec_out_mutable.h"
#include "mau_snapshot_logical_table_hit_mutable.h"
#include "mau_snapshot_long_branch_out_mutable.h"
#include "mau_snapshot_mpr_global_exec_out_mutable.h"
#include "mau_snapshot_mpr_long_branch_out_mutable.h"
#include "mau_snapshot_mpr_next_table_out_mutable.h"
#include "mau_snapshot_next_table_out_mutable.h"
#include "mau_snapshot_physical_exact_match_hit_address_mutable.h"
#include "mau_snapshot_physical_tcam_hit_address_mutable.h"
#include "mau_snapshot_table_active_mutable.h"
#include "mau_stateful_log_counter_clear_mutable.h"
#include "mau_stateful_log_counter_ctl2_mutable.h"
#include "mau_stateful_log_counter_ctl3_mutable.h"
#include "mau_stateful_log_counter_ctl_mutable.h"
#include "mau_stateful_log_counter_mutable.h"
#include "mau_stateful_log_ctl_ixbar_map_mutable.h"
#include "mau_stateful_log_cur_watermark_mutable.h"
#include "mau_stateful_log_fifo_level_mutable.h"
#include "mau_stateful_log_watermark_threshold_mutable.h"
#include "mau_stats_adr_default_mutable.h"
#include "mau_stats_adr_exact_shiftcount_mutable.h"
#include "mau_stats_adr_hole_swizzle_mode_mutable.h"
#include "mau_stats_adr_mask_mutable.h"
#include "mau_stats_adr_miss_value_mutable.h"
#include "mau_stats_adr_per_entry_en_mux_ctl_mutable.h"
#include "mau_stats_adr_tcam_actionbit_map_data_mutable.h"
#include "mau_stats_adr_tcam_actionbit_map_en_mutable.h"
#include "mau_stats_adr_tcam_shiftcount_mutable.h"
#include "mau_table_counter_clear_mutable.h"
#include "mau_table_counter_ctl_mutable.h"
#include "mau_table_counter_mutable.h"
#include "meter_alu_thread_mutable.h"
#include "meter_group_table_vpn_max_mutable.h"
#include "meter_group_table_vpn_mod_enable_mutable.h"
#include "mpr_always_run_mutable.h"
#include "mpr_bus_dep_mutable.h"
#include "mpr_glob_exec_lut_mutable.h"
#include "mpr_glob_exec_thread_mutable.h"
#include "mpr_long_brch_lut_mutable.h"
#include "mpr_long_brch_thread_mutable.h"
#include "mpr_next_table_lut_mutable.h"
#include "mpr_stage_id_mutable.h"
#include "mpr_thread_delay_mutable.h"
#include "next_table_format_data_mutable.h"
#include "next_table_map_en_gateway_mutable.h"
#include "next_table_map_en_mutable.h"
#include "next_table_tcam_actionbit_map_en_mutable.h"
#include "o_error_fifo_ctl_mutable.h"
#include "pred_always_run_mutable.h"
#include "pred_ghost_thread_mutable.h"
#include "pred_glob_exec_thread_mutable.h"
#include "pred_is_a_brch_mutable.h"
#include "pred_long_brch_lt_src_mutable.h"
#include "pred_long_brch_terminate_mutable.h"
#include "pred_long_brch_thread_mutable.h"
#include "pred_map_glob_mutable.h"
#include "pred_map_loca_mutable.h"
#include "pred_miss_exec_mutable.h"
#include "pred_miss_long_brch_mutable.h"
#include "pred_stage_id_mutable.h"
#include "predication_ctl_mutable.h"
#include "prev_error_ctl_mutable.h"
#include "s2p_meter_error_ctl_mutable.h"
#include "s2p_stats_error_ctl_mutable.h"
#include "selector_action_adr_shift_mutable.h"
#include "stash_hitmap_output_map_mutable.h"
#include "stash_next_table_lut_mutable.h"
#include "stash_row_nxtable_bus_drive_mutable.h"
#include "tcam_hit_to_logical_table_ixbar_outputmap_mutable.h"
#include "tcam_match_adr_to_physical_oxbar_outputmap_mutable.h"
#include "tcam_match_error_ctl_mutable.h"
#include "tcam_table_prop_mutable.h"
#include "tind_bus_prop_mutable.h"
#include "tind_ecc_error_ctl_mutable.h"
#include "tind_ram_data_size_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class MauMatchMergeAddrmapMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauMatchMergeAddrmapMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap), 16384, true, write_callback, read_callback, std::string("MauMatchMergeAddrmapMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap))
    {
    }
  MauMatchMergeAddrmapMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MauMatchMergeAddrmapMutable")
    {
    }
public:





















  MauHashGroupXbarCtlMutable &mau_hash_group_xbar_ctl(int j1,int j0) { return mau_hash_group_xbar_ctl_[j1][j0]; }













  MprGlobExecLutMutable &mpr_glob_exec_lut(int j0) { return mpr_glob_exec_lut_[j0]; }






















  StashHitmapOutputMapMutable &stash_hitmap_output_map(int j1,int j0) { return stash_hitmap_output_map_[j1][j0]; }













  StashNextTableLutMutable &stash_next_table_lut(int j1,int j0) { return stash_next_table_lut_[j1][j0]; }













  StashRowNxtableBusDriveMutable &stash_row_nxtable_bus_drive(int j1,int j0) { return stash_row_nxtable_bus_drive_[j1][j0]; }

















  GatewayToLogicaltableXbarCtlMutable &gateway_to_logicaltable_xbar_ctl(int j0) { return gateway_to_logicaltable_xbar_ctl_[j0]; }













  GatewayInhibitLutMutable &gateway_inhibit_lut(int j0) { return gateway_inhibit_lut_[j0]; }














  GatewayToPbusXbarCtlMutable &gateway_to_pbus_xbar_ctl(int j0) { return gateway_to_pbus_xbar_ctl_[j0]; }













  ExitGatewayCtlMutable &exit_gateway_ctl(int j0) { return exit_gateway_ctl_[j0]; }








  TindBusPropMutable &tind_bus_prop(int j0) { return tind_bus_prop_[j0]; }







  MauSnapshotPhysicalTcamHitAddressMutable &mau_snapshot_physical_tcam_hit_address(int j0) { return mau_snapshot_physical_tcam_hit_address_[j0]; }







  MauSnapshotPhysicalExactMatchHitAddressMutable &mau_snapshot_physical_exact_match_hit_address(int j0) { return mau_snapshot_physical_exact_match_hit_address_[j0]; }








  MauTableCounterMutable &mau_table_counter(int j1,int j0) { return mau_table_counter_[j1][j0]; }







  MauTableCounterClearMutable &mau_table_counter_clear() { return mau_table_counter_clear_; }








  MauStatefulLogCounterClearMutable &mau_stateful_log_counter_clear() { return mau_stateful_log_counter_clear_; }






  ActiondataErrorCtlMutable &actiondata_error_ctl() { return actiondata_error_ctl_; }






  ImemParityErrorCtlMutable &imem_parity_error_ctl() { return imem_parity_error_ctl_; }












  TcamHitToLogicalTableIxbarOutputmapMutable &tcam_hit_to_logical_table_ixbar_outputmap(int j0) { return tcam_hit_to_logical_table_ixbar_outputmap_[j0]; }









  MauHashGroupMaskMutable &mau_hash_group_mask(int j0) { return mau_hash_group_mask_[j0]; }












  MprLongBrchLutMutable &mpr_long_brch_lut(int j0) { return mpr_long_brch_lut_[j0]; }





















  GatewayPayloadTindPbusMutable &gateway_payload_tind_pbus(int j0) { return gateway_payload_tind_pbus_[j0]; }





















  GatewayPayloadExactPbusMutable &gateway_payload_exact_pbus(int j0) { return gateway_payload_exact_pbus_[j0]; }












  GatewayPayloadExactDisableMutable &gateway_payload_exact_disable(int j0) { return gateway_payload_exact_disable_[j0]; }











  GatewayPayloadTindDisableMutable &gateway_payload_tind_disable(int j0) { return gateway_payload_tind_disable_[j0]; }








  TcamTablePropMutable &tcam_table_prop(int j0) { return tcam_table_prop_[j0]; }











  MauStatefulLogCounterMutable &mau_stateful_log_counter(int j1,int j0) { return mau_stateful_log_counter_[j1][j0]; }














  MauStatefulLogCtlIxbarMapMutable &mau_stateful_log_ctl_ixbar_map(int j2,int j1,int j0) { return mau_stateful_log_ctl_ixbar_map_[j2][j1][j0]; }










  ExactMatchDelayThreadMutable &exact_match_delay_thread(int j0) { return exact_match_delay_thread_[j0]; }










  LogicalTableThreadMutable &logical_table_thread(int j0) { return logical_table_thread_[j0]; }









  PredGlobExecThreadMutable &pred_glob_exec_thread(int j0) { return pred_glob_exec_thread_[j0]; }









  PredLongBrchThreadMutable &pred_long_brch_thread(int j0) { return pred_long_brch_thread_[j0]; }










  PredAlwaysRunMutable &pred_always_run(int j0) { return pred_always_run_[j0]; }


















  MauMapramColorMapToLogicalCtlMutable &mau_mapram_color_map_to_logical_ctl(int j0) { return mau_mapram_color_map_to_logical_ctl_[j0]; }














  MauPhysicalToMeterAluIcxbarMapMutable &mau_physical_to_meter_alu_icxbar_map(int j1,int j0) { return mau_physical_to_meter_alu_icxbar_map_[j1][j0]; }










  MauMeterPrecolorHashMapToLogicalCtlMutable &mau_meter_precolor_hash_map_to_logical_ctl(int j0) { return mau_meter_precolor_hash_map_to_logical_ctl_[j0]; }






















  MauSelectorActionEntrySizeMutable &mau_selector_action_entry_size(int j0) { return mau_selector_action_entry_size_[j0]; }













  SelectorActionAdrShiftMutable &selector_action_adr_shift(int j0) { return selector_action_adr_shift_[j0]; }


















  MprStageIdMutable &mpr_stage_id(int j0) { return mpr_stage_id_[j0]; }








  MauSnapshotNextTableOutMutable &mau_snapshot_next_table_out(int j0) { return mau_snapshot_next_table_out_[j0]; }








  MauSnapshotMprNextTableOutMutable &mau_snapshot_mpr_next_table_out(int j0) { return mau_snapshot_mpr_next_table_out_[j0]; }

























  MauStatefulLogCounterCtlMutable &mau_stateful_log_counter_ctl(int j1,int j0) { return mau_stateful_log_counter_ctl_[j1][j0]; }








  MauStatefulLogCounterCtl2Mutable &mau_stateful_log_counter_ctl2(int j0) { return mau_stateful_log_counter_ctl2_[j0]; }








  MauStatefulLogCounterCtl3Mutable &mau_stateful_log_counter_ctl3(int j0) { return mau_stateful_log_counter_ctl3_[j0]; }









  MauStatefulLogFifoLevelMutable &mau_stateful_log_fifo_level(int j0) { return mau_stateful_log_fifo_level_[j0]; }








  MauStatefulLogWatermarkThresholdMutable &mau_stateful_log_watermark_threshold(int j0) { return mau_stateful_log_watermark_threshold_[j0]; }










  MauStatefulLogCurWatermarkMutable &mau_stateful_log_cur_watermark(int j0) { return mau_stateful_log_cur_watermark_[j0]; }








  MeterAluThreadMutable &meter_alu_thread(int j0) { return meter_alu_thread_[j0]; }









  ExactMatchPhysResultDelayMutable &exact_match_phys_result_delay(int j0) { return exact_match_phys_result_delay_[j0]; }









  ExactMatchPhysResultEnMutable &exact_match_phys_result_en(int j0) { return exact_match_phys_result_en_[j0]; }









  ExactMatchPhysResultThreadMutable &exact_match_phys_result_thread(int j0) { return exact_match_phys_result_thread_[j0]; }














  MauActionInstructionAdrMapEnMutable &mau_action_instruction_adr_map_en(int j0) { return mau_action_instruction_adr_map_en_[j0]; }










  MauActionInstructionAdrModeMutable &mau_action_instruction_adr_mode(int j0) { return mau_action_instruction_adr_mode_[j0]; }









  MauHashGroupExpandMutable &mau_hash_group_expand(int j0) { return mau_hash_group_expand_[j0]; }









  MeterGroupTableVpnModEnableMutable &meter_group_table_vpn_mod_enable(int j0) { return meter_group_table_vpn_mod_enable_[j0]; }











  MauMeterAluToLogicalMapMutable &mau_meter_alu_to_logical_map(int j0) { return mau_meter_alu_to_logical_map_[j0]; }














  MauLogicalToMeterAluMapMutable &mau_logical_to_meter_alu_map(int j0) { return mau_logical_to_meter_alu_map_[j0]; }









  ActionAdrVpnModEnableMutable &action_adr_vpn_mod_enable(int j0) { return action_adr_vpn_mod_enable_[j0]; }














  PredicationCtlMutable &predication_ctl(int j0) { return predication_ctl_[j0]; }












  MprThreadDelayMutable &mpr_thread_delay(int j0) { return mpr_thread_delay_[j0]; }















  GatewayPayloadExactShiftOvrMutable &gateway_payload_exact_shift_ovr(int j0) { return gateway_payload_exact_shift_ovr_[j0]; }









  MauSnapshotTableActiveMutable &mau_snapshot_table_active(int j0) { return mau_snapshot_table_active_[j0]; }








  MauSnapshotCaptureDatapathErrorMutable &mau_snapshot_capture_datapath_error(int j0) { return mau_snapshot_capture_datapath_error_[j0]; }









  MauSnapshotGlobalExecOutMutable &mau_snapshot_global_exec_out(int j0) { return mau_snapshot_global_exec_out_[j0]; }









  MauSnapshotLongBranchOutMutable &mau_snapshot_long_branch_out(int j0) { return mau_snapshot_long_branch_out_[j0]; }









  MauSnapshotMprGlobalExecOutMutable &mau_snapshot_mpr_global_exec_out(int j0) { return mau_snapshot_mpr_global_exec_out_[j0]; }









  MauSnapshotMprLongBranchOutMutable &mau_snapshot_mpr_long_branch_out(int j0) { return mau_snapshot_mpr_long_branch_out_[j0]; }


















  MauTableCounterCtlMutable &mau_table_counter_ctl(int j0) { return mau_table_counter_ctl_[j0]; }








  TcamMatchErrorCtlMutable &tcam_match_error_ctl(int j0) { return tcam_match_error_ctl_[j0]; }








  TindEccErrorCtlMutable &tind_ecc_error_ctl(int j0) { return tind_ecc_error_ctl_[j0]; }








  GfmParityErrorCtlMutable &gfm_parity_error_ctl(int j0) { return gfm_parity_error_ctl_[j0]; }








  EmmEccErrorCtlMutable &emm_ecc_error_ctl(int j0) { return emm_ecc_error_ctl_[j0]; }








  PrevErrorCtlMutable &prev_error_ctl(int j0) { return prev_error_ctl_[j0]; }








  ErrIdataOvrFifoCtlMutable &err_idata_ovr_fifo_ctl(int j0) { return err_idata_ovr_fifo_ctl_[j0]; }








  ErrIdataOvrCtlMutable &err_idata_ovr_ctl(int j0) { return err_idata_ovr_ctl_[j0]; }








  OErrorFifoCtlMutable &o_error_fifo_ctl(int j0) { return o_error_fifo_ctl_[j0]; }








  S2pStatsErrorCtlMutable &s2p_stats_error_ctl(int j0) { return s2p_stats_error_ctl_[j0]; }








  S2pMeterErrorCtlMutable &s2p_meter_error_ctl(int j0) { return s2p_meter_error_ctl_[j0]; }








  ExactMatchLogicalResultDelayMutable &exact_match_logical_result_delay() { return exact_match_logical_result_delay_; }






  ExactMatchLogicalResultEnMutable &exact_match_logical_result_en() { return exact_match_logical_result_en_; }









  NextTableMapEnMutable &next_table_map_en() { return next_table_map_en_; }












  NextTableMapEnGatewayMutable &next_table_map_en_gateway() { return next_table_map_en_gateway_; }












  NextTableTcamActionbitMapEnMutable &next_table_tcam_actionbit_map_en() { return next_table_tcam_actionbit_map_en_; }







  PredLongBrchTerminateMutable &pred_long_brch_terminate() { return pred_long_brch_terminate_; }









  PredIsABrchMutable &pred_is_a_brch() { return pred_is_a_brch_; }







  PredGhostThreadMutable &pred_ghost_thread() { return pred_ghost_thread_; }





  PredStageIdMutable &pred_stage_id() { return pred_stage_id_; }









  MauImmediateDataTcamActionbitMapEnMutable &mau_immediate_data_tcam_actionbit_map_en() { return mau_immediate_data_tcam_actionbit_map_en_; }












  MauActionInstructionAdrTcamActionbitMapEnMutable &mau_action_instruction_adr_tcam_actionbit_map_en() { return mau_action_instruction_adr_tcam_actionbit_map_en_; }









  MauActiondataAdrTcamActionbitMapEnMutable &mau_actiondata_adr_tcam_actionbit_map_en() { return mau_actiondata_adr_tcam_actionbit_map_en_; }












  PredMapLocaMutable &pred_map_loca(int j1,int j0) { return pred_map_loca_[j1][j0]; }












  PredMapGlobMutable &pred_map_glob(int j1,int j0) { return pred_map_glob_[j1][j0]; }











  MauImmediateDataExactShiftcountMutable &mau_immediate_data_exact_shiftcount(int j1,int j0) { return mau_immediate_data_exact_shiftcount_[j1][j0]; }











  MauActionInstructionAdrExactShiftcountMutable &mau_action_instruction_adr_exact_shiftcount(int j1,int j0) { return mau_action_instruction_adr_exact_shiftcount_[j1][j0]; }












  MauActiondataAdrExactShiftcountMutable &mau_actiondata_adr_exact_shiftcount(int j1,int j0) { return mau_actiondata_adr_exact_shiftcount_[j1][j0]; }















  MauStatsAdrExactShiftcountMutable &mau_stats_adr_exact_shiftcount(int j1,int j0) { return mau_stats_adr_exact_shiftcount_[j1][j0]; }
















  MauMeterAdrExactShiftcountMutable &mau_meter_adr_exact_shiftcount(int j1,int j0) { return mau_meter_adr_exact_shiftcount_[j1][j0]; }















  MauIdletimeAdrExactShiftcountMutable &mau_idletime_adr_exact_shiftcount(int j1,int j0) { return mau_idletime_adr_exact_shiftcount_[j1][j0]; }













  GatewayNextTableLutMutable &gateway_next_table_lut(int j1,int j0) { return gateway_next_table_lut_[j1][j0]; }



























  MatchToLogicalTableIxbarOutputmapMutable &match_to_logical_table_ixbar_outputmap(int j1,int j0) { return match_to_logical_table_ixbar_outputmap_[j1][j0]; }



















  MauActionInstructionAdrMapDataMutable &mau_action_instruction_adr_map_data(int j2,int j1,int j0) { return mau_action_instruction_adr_map_data_[j2][j1][j0]; }












  MprNextTableLutMutable &mpr_next_table_lut(int j1,int j0) { return mpr_next_table_lut_[j1][j0]; }













  GatewayPayloadDataMutable &gateway_payload_data(int j3,int j2,int j1,int j0) { return gateway_payload_data_[j3][j2][j1][j0]; }









  MauStatsAdrTcamActionbitMapEnMutable &mau_stats_adr_tcam_actionbit_map_en() { return mau_stats_adr_tcam_actionbit_map_en_; }









  MauMeterAdrTcamActionbitMapEnMutable &mau_meter_adr_tcam_actionbit_map_en() { return mau_meter_adr_tcam_actionbit_map_en_; }





  MauMatchCentralMapramReadColorOfloCtlMutable &mau_match_central_mapram_read_color_oflo_ctl() { return mau_match_central_mapram_read_color_oflo_ctl_; }









  MauIdletimeAdrTcamActionbitMapEnMutable &mau_idletime_adr_tcam_actionbit_map_en() { return mau_idletime_adr_tcam_actionbit_map_en_; }






  MauSelectorHashSpsEnableMutable &mau_selector_hash_sps_enable() { return mau_selector_hash_sps_enable_; }






  MauHashGroupConfigMutable &mau_hash_group_config() { return mau_hash_group_config_; }










  MauHashGroupShiftcountMutable &mau_hash_group_shiftcount() { return mau_hash_group_shiftcount_; }







  MeterGroupTableVpnMaxMutable &meter_group_table_vpn_max() { return meter_group_table_vpn_max_; }












  MauMeterPrecolorHashSelMutable &mau_meter_precolor_hash_sel() { return mau_meter_precolor_hash_sel_; }







  MprBusDepMutable &mpr_bus_dep() { return mpr_bus_dep_; }






  MprGlobExecThreadMutable &mpr_glob_exec_thread() { return mpr_glob_exec_thread_; }






  MprLongBrchThreadMutable &mpr_long_brch_thread() { return mpr_long_brch_thread_; }







  MprAlwaysRunMutable &mpr_always_run() { return mpr_always_run_; }






  GatewayEnMutable &gateway_en() { return gateway_en_; }





  MauSnapshotLogicalTableHitMutable &mau_snapshot_logical_table_hit() { return mau_snapshot_logical_table_hit_; }





  MauSnapshotGatewayTableInhibitLogicalMutable &mau_snapshot_gateway_table_inhibit_logical() { return mau_snapshot_gateway_table_inhibit_logical_; }




























  MauPayloadShifterEnableMutable &mau_payload_shifter_enable(int j1,int j0) { return mau_payload_shifter_enable_[j1][j0]; }











  MauImmediateDataMaskMutable &mau_immediate_data_mask(int j1,int j0) { return mau_immediate_data_mask_[j1][j0]; }











  MauImmediateDataDefaultMutable &mau_immediate_data_default(int j1,int j0) { return mau_immediate_data_default_[j1][j0]; }









  MauImmediateDataTcamActionbitMapDataMutable &mau_immediate_data_tcam_actionbit_map_data(int j1,int j0) { return mau_immediate_data_tcam_actionbit_map_data_[j1][j0]; }












  MauActionInstructionAdrMaskMutable &mau_action_instruction_adr_mask(int j1,int j0) { return mau_action_instruction_adr_mask_[j1][j0]; }












  MauActionInstructionAdrDefaultMutable &mau_action_instruction_adr_default(int j1,int j0) { return mau_action_instruction_adr_default_[j1][j0]; }























  MauActionInstructionAdrPerEntryEnMuxCtlMutable &mau_action_instruction_adr_per_entry_en_mux_ctl(int j1,int j0) { return mau_action_instruction_adr_per_entry_en_mux_ctl_[j1][j0]; }












  MauActiondataAdrVpnShiftcountMutable &mau_actiondata_adr_vpn_shiftcount(int j1,int j0) { return mau_actiondata_adr_vpn_shiftcount_[j1][j0]; }











  MauActiondataAdrMaskMutable &mau_actiondata_adr_mask(int j1,int j0) { return mau_actiondata_adr_mask_[j1][j0]; }











  MauActiondataAdrDefaultMutable &mau_actiondata_adr_default(int j1,int j0) { return mau_actiondata_adr_default_[j1][j0]; }





















  MauActiondataAdrPerEntryEnMuxCtlMutable &mau_actiondata_adr_per_entry_en_mux_ctl(int j1,int j0) { return mau_actiondata_adr_per_entry_en_mux_ctl_[j1][j0]; }









  MauActiondataAdrTcamActionbitMapDataMutable &mau_actiondata_adr_tcam_actionbit_map_data(int j1,int j0) { return mau_actiondata_adr_tcam_actionbit_map_data_[j1][j0]; }











  MauStatsAdrMaskMutable &mau_stats_adr_mask(int j1,int j0) { return mau_stats_adr_mask_[j1][j0]; }











  MauStatsAdrDefaultMutable &mau_stats_adr_default(int j1,int j0) { return mau_stats_adr_default_[j1][j0]; }





















  MauStatsAdrPerEntryEnMuxCtlMutable &mau_stats_adr_per_entry_en_mux_ctl(int j1,int j0) { return mau_stats_adr_per_entry_en_mux_ctl_[j1][j0]; }





























  MauStatsAdrHoleSwizzleModeMutable &mau_stats_adr_hole_swizzle_mode(int j1,int j0) { return mau_stats_adr_hole_swizzle_mode_[j1][j0]; }









  MauStatsAdrTcamActionbitMapDataMutable &mau_stats_adr_tcam_actionbit_map_data(int j1,int j0) { return mau_stats_adr_tcam_actionbit_map_data_[j1][j0]; }











  MauMeterAdrMaskMutable &mau_meter_adr_mask(int j1,int j0) { return mau_meter_adr_mask_[j1][j0]; }











  MauMeterAdrDefaultMutable &mau_meter_adr_default(int j1,int j0) { return mau_meter_adr_default_[j1][j0]; }





















  MauMeterAdrPerEntryEnMuxCtlMutable &mau_meter_adr_per_entry_en_mux_ctl(int j1,int j0) { return mau_meter_adr_per_entry_en_mux_ctl_[j1][j0]; }









  MauMeterAdrTcamActionbitMapDataMutable &mau_meter_adr_tcam_actionbit_map_data(int j1,int j0) { return mau_meter_adr_tcam_actionbit_map_data_[j1][j0]; }











  MauIdletimeAdrMaskMutable &mau_idletime_adr_mask(int j1,int j0) { return mau_idletime_adr_mask_[j1][j0]; }











  MauIdletimeAdrDefaultMutable &mau_idletime_adr_default(int j1,int j0) { return mau_idletime_adr_default_[j1][j0]; }









  MauIdletimeAdrTcamActionbitMapDataMutable &mau_idletime_adr_tcam_actionbit_map_data(int j1,int j0) { return mau_idletime_adr_tcam_actionbit_map_data_[j1][j0]; }





















  MauIdletimeAdrPerEntryEnMuxCtlMutable &mau_idletime_adr_per_entry_en_mux_ctl(int j1,int j0) { return mau_idletime_adr_per_entry_en_mux_ctl_[j1][j0]; }


















  MauSelectorlengthShiftcountMutable &mau_selectorlength_shiftcount(int j1,int j0) { return mau_selectorlength_shiftcount_[j1][j0]; }











  MauSelectorlengthMaskMutable &mau_selectorlength_mask(int j1,int j0) { return mau_selectorlength_mask_[j1][j0]; }











  MauSelectorlengthDefaultMutable &mau_selectorlength_default(int j1,int j0) { return mau_selectorlength_default_[j1][j0]; }






















  MauMeterAdrTypePositionMutable &mau_meter_adr_type_position(int j1,int j0) { return mau_meter_adr_type_position_[j1][j0]; }












  GatewayPayloadMatchAdrMutable &gateway_payload_match_adr(int j2,int j1,int j0) { return gateway_payload_match_adr_[j2][j1][j0]; }













  TcamMatchAdrToPhysicalOxbarOutputmapMutable &tcam_match_adr_to_physical_oxbar_outputmap(int j0) { return tcam_match_adr_to_physical_oxbar_outputmap_[j0]; }



















  TindRamDataSizeMutable &tind_ram_data_size(int j0) { return tind_ram_data_size_[j0]; }











  NextTableFormatDataMutable &next_table_format_data(int j0) { return next_table_format_data_[j0]; }









  PredMissExecMutable &pred_miss_exec(int j0) { return pred_miss_exec_[j0]; }









  PredMissLongBrchMutable &pred_miss_long_brch(int j0) { return pred_miss_long_brch_[j0]; }











  PredLongBrchLtSrcMutable &pred_long_brch_lt_src(int j0) { return pred_long_brch_lt_src_[j0]; }










  MauImmediateDataTcamShiftcountMutable &mau_immediate_data_tcam_shiftcount(int j0) { return mau_immediate_data_tcam_shiftcount_[j0]; }








  MauImmediateDataMissValueMutable &mau_immediate_data_miss_value(int j0) { return mau_immediate_data_miss_value_[j0]; }










  MauActionInstructionAdrTcamShiftcountMutable &mau_action_instruction_adr_tcam_shiftcount(int j0) { return mau_action_instruction_adr_tcam_shiftcount_[j0]; }









  MauActionInstructionAdrMissValueMutable &mau_action_instruction_adr_miss_value(int j0) { return mau_action_instruction_adr_miss_value_[j0]; }











  MauActiondataAdrTcamShiftcountMutable &mau_actiondata_adr_tcam_shiftcount(int j0) { return mau_actiondata_adr_tcam_shiftcount_[j0]; }








  MauActiondataAdrMissValueMutable &mau_actiondata_adr_miss_value(int j0) { return mau_actiondata_adr_miss_value_[j0]; }














  MauStatsAdrTcamShiftcountMutable &mau_stats_adr_tcam_shiftcount(int j0) { return mau_stats_adr_tcam_shiftcount_[j0]; }








  MauStatsAdrMissValueMutable &mau_stats_adr_miss_value(int j0) { return mau_stats_adr_miss_value_[j0]; }















  MauMeterAdrTcamShiftcountMutable &mau_meter_adr_tcam_shiftcount(int j0) { return mau_meter_adr_tcam_shiftcount_[j0]; }








  MauMeterAdrMissValueMutable &mau_meter_adr_miss_value(int j0) { return mau_meter_adr_miss_value_[j0]; }














  MauIdletimeAdrTcamShiftcountMutable &mau_idletime_adr_tcam_shiftcount(int j0) { return mau_idletime_adr_tcam_shiftcount_[j0]; }








  MauIdletimeAdrMissValueMutable &mau_idletime_adr_miss_value(int j0) { return mau_idletime_adr_miss_value_[j0]; }







  MauMatchMergeColAddrmapMutable &col(int j0) { return col_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x30) {
      offset -= 0x0;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_hash_group_xbar_ctl_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x80) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mpr_glob_exec_lut_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xc0) {
      offset -= 0x80;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stash_hitmap_output_map_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0x100) {
      offset -= 0xc0;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stash_next_table_lut_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x140) {
      offset -= 0x100;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stash_row_nxtable_bus_drive_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x180) {
      offset -= 0x140;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      gateway_to_logicaltable_xbar_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x1c0) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      gateway_inhibit_lut_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1c0 && offset < 0x200) {
      offset -= 0x1c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      gateway_to_pbus_xbar_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x240) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      exit_gateway_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x240 && offset < 0x280) {
      offset -= 0x240;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tind_bus_prop_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x280 && offset < 0x2c0) {
      offset -= 0x280;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_snapshot_physical_tcam_hit_address_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x2c0 && offset < 0x300) {
      offset -= 0x2c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_snapshot_physical_exact_match_hit_address_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x300 && offset < 0x340) {
      offset -= 0x300;
      int i1 = offset / 0x4;
      offset  -= i1 * 0x4;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_table_counter_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x340 && offset < 0x344) {
      offset -= 0x340;
      if (read_callback_) read_callback_();
      mau_table_counter_clear_.read( offset, data );
    }
    else if (offset >= 0x344 && offset < 0x348) {
      offset -= 0x344;
      if (read_callback_) read_callback_();
      mau_stateful_log_counter_clear_.read( offset, data );
    }
    else if (offset >= 0x348 && offset < 0x34c) {
      offset -= 0x348;
      if (read_callback_) read_callback_();
      actiondata_error_ctl_.read( offset, data );
    }
    else if (offset >= 0x34c && offset < 0x350) {
      offset -= 0x34c;
      if (read_callback_) read_callback_();
      imem_parity_error_ctl_.read( offset, data );
    }
    else if (offset >= 0x360 && offset < 0x380) {
      offset -= 0x360;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tcam_hit_to_logical_table_ixbar_outputmap_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x380 && offset < 0x398) {
      offset -= 0x380;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_hash_group_mask_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3a0 && offset < 0x3c0) {
      offset -= 0x3a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mpr_long_brch_lut_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3c0 && offset < 0x3e0) {
      offset -= 0x3c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      gateway_payload_tind_pbus_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3e0 && offset < 0x400) {
      offset -= 0x3e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      gateway_payload_exact_pbus_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1000 && offset < 0x1020) {
      offset -= 0x1000;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      gateway_payload_exact_disable_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1020 && offset < 0x1040) {
      offset -= 0x1020;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      gateway_payload_tind_disable_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1040 && offset < 0x1060) {
      offset -= 0x1040;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tcam_table_prop_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1060 && offset < 0x1080) {
      offset -= 0x1060;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stateful_log_counter_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x1080 && offset < 0x10a0) {
      offset -= 0x1080;
      int i2 = offset / 0x10;
      offset  -= i2 * 0x10;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stateful_log_ctl_ixbar_map_[ i2 ][ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x10a0 && offset < 0x10ac) {
      offset -= 0x10a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      exact_match_delay_thread_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x10b0 && offset < 0x10bc) {
      offset -= 0x10b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      logical_table_thread_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x10c0 && offset < 0x10cc) {
      offset -= 0x10c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pred_glob_exec_thread_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x10d0 && offset < 0x10dc) {
      offset -= 0x10d0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pred_long_brch_thread_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x10e0 && offset < 0x10ec) {
      offset -= 0x10e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pred_always_run_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x10f0 && offset < 0x1100) {
      offset -= 0x10f0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_mapram_color_map_to_logical_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1100 && offset < 0x1110) {
      offset -= 0x1100;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_physical_to_meter_alu_icxbar_map_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x1110 && offset < 0x1120) {
      offset -= 0x1110;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_meter_precolor_hash_map_to_logical_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1120 && offset < 0x1130) {
      offset -= 0x1120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_selector_action_entry_size_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1130 && offset < 0x1140) {
      offset -= 0x1130;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      selector_action_adr_shift_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1140 && offset < 0x114c) {
      offset -= 0x1140;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mpr_stage_id_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1150 && offset < 0x115c) {
      offset -= 0x1150;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_snapshot_next_table_out_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1160 && offset < 0x116c) {
      offset -= 0x1160;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_snapshot_mpr_next_table_out_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1170 && offset < 0x1180) {
      offset -= 0x1170;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stateful_log_counter_ctl_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x1180 && offset < 0x1190) {
      offset -= 0x1180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stateful_log_counter_ctl2_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1190 && offset < 0x11a0) {
      offset -= 0x1190;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stateful_log_counter_ctl3_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x11a0 && offset < 0x11b0) {
      offset -= 0x11a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stateful_log_fifo_level_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x11b0 && offset < 0x11c0) {
      offset -= 0x11b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stateful_log_watermark_threshold_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x11c0 && offset < 0x11d0) {
      offset -= 0x11c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stateful_log_cur_watermark_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x11d8 && offset < 0x11e0) {
      offset -= 0x11d8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      meter_alu_thread_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x11e0 && offset < 0x11e8) {
      offset -= 0x11e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      exact_match_phys_result_delay_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x11e8 && offset < 0x11f0) {
      offset -= 0x11e8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      exact_match_phys_result_en_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x11f0 && offset < 0x11f8) {
      offset -= 0x11f0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      exact_match_phys_result_thread_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x11f8 && offset < 0x1200) {
      offset -= 0x11f8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_action_instruction_adr_map_en_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1400 && offset < 0x1408) {
      offset -= 0x1400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_action_instruction_adr_mode_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1408 && offset < 0x1410) {
      offset -= 0x1408;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_hash_group_expand_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1410 && offset < 0x1418) {
      offset -= 0x1410;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      meter_group_table_vpn_mod_enable_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1418 && offset < 0x1420) {
      offset -= 0x1418;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_meter_alu_to_logical_map_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1420 && offset < 0x1428) {
      offset -= 0x1420;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_logical_to_meter_alu_map_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1428 && offset < 0x1430) {
      offset -= 0x1428;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      action_adr_vpn_mod_enable_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1430 && offset < 0x1438) {
      offset -= 0x1430;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      predication_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1438 && offset < 0x1440) {
      offset -= 0x1438;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mpr_thread_delay_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1440 && offset < 0x1448) {
      offset -= 0x1440;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      gateway_payload_exact_shift_ovr_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1448 && offset < 0x1450) {
      offset -= 0x1448;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_snapshot_table_active_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1450 && offset < 0x1458) {
      offset -= 0x1450;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_snapshot_capture_datapath_error_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1458 && offset < 0x1460) {
      offset -= 0x1458;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_snapshot_global_exec_out_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1460 && offset < 0x1468) {
      offset -= 0x1460;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_snapshot_long_branch_out_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1468 && offset < 0x1470) {
      offset -= 0x1468;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_snapshot_mpr_global_exec_out_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1470 && offset < 0x1478) {
      offset -= 0x1470;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_snapshot_mpr_long_branch_out_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1478 && offset < 0x1480) {
      offset -= 0x1478;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_table_counter_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1480 && offset < 0x1488) {
      offset -= 0x1480;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tcam_match_error_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1488 && offset < 0x1490) {
      offset -= 0x1488;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tind_ecc_error_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1490 && offset < 0x1498) {
      offset -= 0x1490;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      gfm_parity_error_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1498 && offset < 0x14a0) {
      offset -= 0x1498;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      emm_ecc_error_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x14a0 && offset < 0x14a8) {
      offset -= 0x14a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      prev_error_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x14a8 && offset < 0x14b0) {
      offset -= 0x14a8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      err_idata_ovr_fifo_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x14b0 && offset < 0x14b8) {
      offset -= 0x14b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      err_idata_ovr_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x14b8 && offset < 0x14c0) {
      offset -= 0x14b8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      o_error_fifo_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x14c0 && offset < 0x14c8) {
      offset -= 0x14c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      s2p_stats_error_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x14c8 && offset < 0x14d0) {
      offset -= 0x14c8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      s2p_meter_error_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x14d0 && offset < 0x14d4) {
      offset -= 0x14d0;
      if (read_callback_) read_callback_();
      exact_match_logical_result_delay_.read( offset, data );
    }
    else if (offset >= 0x14d4 && offset < 0x14d8) {
      offset -= 0x14d4;
      if (read_callback_) read_callback_();
      exact_match_logical_result_en_.read( offset, data );
    }
    else if (offset >= 0x14d8 && offset < 0x14dc) {
      offset -= 0x14d8;
      if (read_callback_) read_callback_();
      next_table_map_en_.read( offset, data );
    }
    else if (offset >= 0x14dc && offset < 0x14e0) {
      offset -= 0x14dc;
      if (read_callback_) read_callback_();
      next_table_map_en_gateway_.read( offset, data );
    }
    else if (offset >= 0x14e0 && offset < 0x14e4) {
      offset -= 0x14e0;
      if (read_callback_) read_callback_();
      next_table_tcam_actionbit_map_en_.read( offset, data );
    }
    else if (offset >= 0x14e4 && offset < 0x14e8) {
      offset -= 0x14e4;
      if (read_callback_) read_callback_();
      pred_long_brch_terminate_.read( offset, data );
    }
    else if (offset >= 0x14e8 && offset < 0x14ec) {
      offset -= 0x14e8;
      if (read_callback_) read_callback_();
      pred_is_a_brch_.read( offset, data );
    }
    else if (offset >= 0x14ec && offset < 0x14f0) {
      offset -= 0x14ec;
      if (read_callback_) read_callback_();
      pred_ghost_thread_.read( offset, data );
    }
    else if (offset >= 0x14f0 && offset < 0x14f4) {
      offset -= 0x14f0;
      if (read_callback_) read_callback_();
      pred_stage_id_.read( offset, data );
    }
    else if (offset >= 0x14f4 && offset < 0x14f8) {
      offset -= 0x14f4;
      if (read_callback_) read_callback_();
      mau_immediate_data_tcam_actionbit_map_en_.read( offset, data );
    }
    else if (offset >= 0x14f8 && offset < 0x14fc) {
      offset -= 0x14f8;
      if (read_callback_) read_callback_();
      mau_action_instruction_adr_tcam_actionbit_map_en_.read( offset, data );
    }
    else if (offset >= 0x14fc && offset < 0x1500) {
      offset -= 0x14fc;
      if (read_callback_) read_callback_();
      mau_actiondata_adr_tcam_actionbit_map_en_.read( offset, data );
    }
    else if (offset >= 0x1600 && offset < 0x1800) {
      offset -= 0x1600;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pred_map_loca_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x1800 && offset < 0x1a00) {
      offset -= 0x1800;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pred_map_glob_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x1a00 && offset < 0x1c00) {
      offset -= 0x1a00;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_immediate_data_exact_shiftcount_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x1c00 && offset < 0x1e00) {
      offset -= 0x1c00;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_action_instruction_adr_exact_shiftcount_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x1e00 && offset < 0x2000) {
      offset -= 0x1e00;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_actiondata_adr_exact_shiftcount_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2000 && offset < 0x2200) {
      offset -= 0x2000;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stats_adr_exact_shiftcount_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2200 && offset < 0x2400) {
      offset -= 0x2200;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_meter_adr_exact_shiftcount_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2400 && offset < 0x2600) {
      offset -= 0x2400;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_idletime_adr_exact_shiftcount_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2600 && offset < 0x2800) {
      offset -= 0x2600;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      gateway_next_table_lut_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2800 && offset < 0x2900) {
      offset -= 0x2800;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      match_to_logical_table_ixbar_outputmap_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2900 && offset < 0x2a00) {
      offset -= 0x2900;
      int i2 = offset / 0x80;
      offset  -= i2 * 0x80;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_action_instruction_adr_map_data_[ i2 ][ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2a00 && offset < 0x2ac0) {
      offset -= 0x2a00;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mpr_next_table_lut_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2b00 && offset < 0x2c00) {
      offset -= 0x2b00;
      int i3 = offset / 0x20;
      offset  -= i3 * 0x20;
      int i2 = offset / 0x10;
      offset  -= i2 * 0x10;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      gateway_payload_data_[ i3 ][ i2 ][ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2c00 && offset < 0x2c04) {
      offset -= 0x2c00;
      if (read_callback_) read_callback_();
      mau_stats_adr_tcam_actionbit_map_en_.read( offset, data );
    }
    else if (offset >= 0x2c04 && offset < 0x2c08) {
      offset -= 0x2c04;
      if (read_callback_) read_callback_();
      mau_meter_adr_tcam_actionbit_map_en_.read( offset, data );
    }
    else if (offset >= 0x2c08 && offset < 0x2c0c) {
      offset -= 0x2c08;
      if (read_callback_) read_callback_();
      mau_match_central_mapram_read_color_oflo_ctl_.read( offset, data );
    }
    else if (offset >= 0x2c0c && offset < 0x2c10) {
      offset -= 0x2c0c;
      if (read_callback_) read_callback_();
      mau_idletime_adr_tcam_actionbit_map_en_.read( offset, data );
    }
    else if (offset >= 0x2c10 && offset < 0x2c14) {
      offset -= 0x2c10;
      if (read_callback_) read_callback_();
      mau_selector_hash_sps_enable_.read( offset, data );
    }
    else if (offset >= 0x2c14 && offset < 0x2c18) {
      offset -= 0x2c14;
      if (read_callback_) read_callback_();
      mau_hash_group_config_.read( offset, data );
    }
    else if (offset >= 0x2c18 && offset < 0x2c1c) {
      offset -= 0x2c18;
      if (read_callback_) read_callback_();
      mau_hash_group_shiftcount_.read( offset, data );
    }
    else if (offset >= 0x2c1c && offset < 0x2c20) {
      offset -= 0x2c1c;
      if (read_callback_) read_callback_();
      meter_group_table_vpn_max_.read( offset, data );
    }
    else if (offset >= 0x2c20 && offset < 0x2c24) {
      offset -= 0x2c20;
      if (read_callback_) read_callback_();
      mau_meter_precolor_hash_sel_.read( offset, data );
    }
    else if (offset >= 0x2c24 && offset < 0x2c28) {
      offset -= 0x2c24;
      if (read_callback_) read_callback_();
      mpr_bus_dep_.read( offset, data );
    }
    else if (offset >= 0x2c28 && offset < 0x2c2c) {
      offset -= 0x2c28;
      if (read_callback_) read_callback_();
      mpr_glob_exec_thread_.read( offset, data );
    }
    else if (offset >= 0x2c2c && offset < 0x2c30) {
      offset -= 0x2c2c;
      if (read_callback_) read_callback_();
      mpr_long_brch_thread_.read( offset, data );
    }
    else if (offset >= 0x2c30 && offset < 0x2c34) {
      offset -= 0x2c30;
      if (read_callback_) read_callback_();
      mpr_always_run_.read( offset, data );
    }
    else if (offset >= 0x2c34 && offset < 0x2c38) {
      offset -= 0x2c34;
      if (read_callback_) read_callback_();
      gateway_en_.read( offset, data );
    }
    else if (offset >= 0x2c38 && offset < 0x2c3c) {
      offset -= 0x2c38;
      if (read_callback_) read_callback_();
      mau_snapshot_logical_table_hit_.read( offset, data );
    }
    else if (offset >= 0x2c3c && offset < 0x2c40) {
      offset -= 0x2c3c;
      if (read_callback_) read_callback_();
      mau_snapshot_gateway_table_inhibit_logical_.read( offset, data );
    }
    else if (offset >= 0x2c80 && offset < 0x2d00) {
      offset -= 0x2c80;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_payload_shifter_enable_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2d00 && offset < 0x2d80) {
      offset -= 0x2d00;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_immediate_data_mask_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2d80 && offset < 0x2e00) {
      offset -= 0x2d80;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_immediate_data_default_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2e00 && offset < 0x2e80) {
      offset -= 0x2e00;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_immediate_data_tcam_actionbit_map_data_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2e80 && offset < 0x2f00) {
      offset -= 0x2e80;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_action_instruction_adr_mask_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2f00 && offset < 0x2f80) {
      offset -= 0x2f00;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_action_instruction_adr_default_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x2f80 && offset < 0x3000) {
      offset -= 0x2f80;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_action_instruction_adr_per_entry_en_mux_ctl_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3000 && offset < 0x3080) {
      offset -= 0x3000;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_actiondata_adr_vpn_shiftcount_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3080 && offset < 0x3100) {
      offset -= 0x3080;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_actiondata_adr_mask_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3100 && offset < 0x3180) {
      offset -= 0x3100;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_actiondata_adr_default_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3180 && offset < 0x3200) {
      offset -= 0x3180;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_actiondata_adr_per_entry_en_mux_ctl_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3200 && offset < 0x3280) {
      offset -= 0x3200;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_actiondata_adr_tcam_actionbit_map_data_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3280 && offset < 0x3300) {
      offset -= 0x3280;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stats_adr_mask_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3300 && offset < 0x3380) {
      offset -= 0x3300;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stats_adr_default_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3380 && offset < 0x3400) {
      offset -= 0x3380;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stats_adr_per_entry_en_mux_ctl_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3400 && offset < 0x3480) {
      offset -= 0x3400;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stats_adr_hole_swizzle_mode_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3480 && offset < 0x3500) {
      offset -= 0x3480;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stats_adr_tcam_actionbit_map_data_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3500 && offset < 0x3580) {
      offset -= 0x3500;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_meter_adr_mask_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3580 && offset < 0x3600) {
      offset -= 0x3580;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_meter_adr_default_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3600 && offset < 0x3680) {
      offset -= 0x3600;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_meter_adr_per_entry_en_mux_ctl_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3680 && offset < 0x3700) {
      offset -= 0x3680;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_meter_adr_tcam_actionbit_map_data_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3700 && offset < 0x3780) {
      offset -= 0x3700;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_idletime_adr_mask_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3780 && offset < 0x3800) {
      offset -= 0x3780;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_idletime_adr_default_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3800 && offset < 0x3880) {
      offset -= 0x3800;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_idletime_adr_tcam_actionbit_map_data_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3880 && offset < 0x3900) {
      offset -= 0x3880;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_idletime_adr_per_entry_en_mux_ctl_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3900 && offset < 0x3980) {
      offset -= 0x3900;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_selectorlength_shiftcount_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3980 && offset < 0x3a00) {
      offset -= 0x3980;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_selectorlength_mask_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3a00 && offset < 0x3a80) {
      offset -= 0x3a00;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_selectorlength_default_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3a80 && offset < 0x3b00) {
      offset -= 0x3a80;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_meter_adr_type_position_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3b00 && offset < 0x3b80) {
      offset -= 0x3b00;
      int i2 = offset / 0x10;
      offset  -= i2 * 0x10;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      gateway_payload_match_adr_[ i2 ][ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x3b80 && offset < 0x3bc0) {
      offset -= 0x3b80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tcam_match_adr_to_physical_oxbar_outputmap_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3bc0 && offset < 0x3c00) {
      offset -= 0x3bc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tind_ram_data_size_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3c00 && offset < 0x3c40) {
      offset -= 0x3c00;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      next_table_format_data_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3c40 && offset < 0x3c80) {
      offset -= 0x3c40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pred_miss_exec_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3c80 && offset < 0x3cc0) {
      offset -= 0x3c80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pred_miss_long_brch_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3cc0 && offset < 0x3d00) {
      offset -= 0x3cc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pred_long_brch_lt_src_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3d00 && offset < 0x3d40) {
      offset -= 0x3d00;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_immediate_data_tcam_shiftcount_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3d40 && offset < 0x3d80) {
      offset -= 0x3d40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_immediate_data_miss_value_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3d80 && offset < 0x3dc0) {
      offset -= 0x3d80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_action_instruction_adr_tcam_shiftcount_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3dc0 && offset < 0x3e00) {
      offset -= 0x3dc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_action_instruction_adr_miss_value_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3e00 && offset < 0x3e40) {
      offset -= 0x3e00;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_actiondata_adr_tcam_shiftcount_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3e40 && offset < 0x3e80) {
      offset -= 0x3e40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_actiondata_adr_miss_value_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3e80 && offset < 0x3ec0) {
      offset -= 0x3e80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stats_adr_tcam_shiftcount_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3ec0 && offset < 0x3f00) {
      offset -= 0x3ec0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_stats_adr_miss_value_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3f00 && offset < 0x3f40) {
      offset -= 0x3f00;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_meter_adr_tcam_shiftcount_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3f40 && offset < 0x3f80) {
      offset -= 0x3f40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_meter_adr_miss_value_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3f80 && offset < 0x3fc0) {
      offset -= 0x3f80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_idletime_adr_tcam_shiftcount_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3fc0 && offset < 0x4000) {
      offset -= 0x3fc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_idletime_adr_miss_value_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x800 && offset < 0xe00) {
      offset -= 0x800;
      int i0 = offset / 0x80;
      offset  -= i0 * 0x80;
      if (read_callback_) read_callback_();
      col_[ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x30) {
      offset -= 0x0;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_hash_group_xbar_ctl_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x80) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mpr_glob_exec_lut_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xc0) {
      offset -= 0x80;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stash_hitmap_output_map_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0x100) {
      offset -= 0xc0;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stash_next_table_lut_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x140) {
      offset -= 0x100;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stash_row_nxtable_bus_drive_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x180) {
      offset -= 0x140;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      gateway_to_logicaltable_xbar_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x1c0) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      gateway_inhibit_lut_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c0 && offset < 0x200) {
      offset -= 0x1c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      gateway_to_pbus_xbar_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x240) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      exit_gateway_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x240 && offset < 0x280) {
      offset -= 0x240;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tind_bus_prop_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x280 && offset < 0x2c0) {
      offset -= 0x280;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_snapshot_physical_tcam_hit_address_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c0 && offset < 0x300) {
      offset -= 0x2c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_snapshot_physical_exact_match_hit_address_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x300 && offset < 0x340) {
      offset -= 0x300;
      int i1 = offset / 0x4;
      offset  -= i1 * 0x4;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_table_counter_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x340 && offset < 0x344) {
      offset -= 0x340;
      mau_table_counter_clear_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x344 && offset < 0x348) {
      offset -= 0x344;
      mau_stateful_log_counter_clear_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x348 && offset < 0x34c) {
      offset -= 0x348;
      actiondata_error_ctl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34c && offset < 0x350) {
      offset -= 0x34c;
      imem_parity_error_ctl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x360 && offset < 0x380) {
      offset -= 0x360;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tcam_hit_to_logical_table_ixbar_outputmap_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x380 && offset < 0x398) {
      offset -= 0x380;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_hash_group_mask_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3a0 && offset < 0x3c0) {
      offset -= 0x3a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mpr_long_brch_lut_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c0 && offset < 0x3e0) {
      offset -= 0x3c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      gateway_payload_tind_pbus_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3e0 && offset < 0x400) {
      offset -= 0x3e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      gateway_payload_exact_pbus_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1000 && offset < 0x1020) {
      offset -= 0x1000;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      gateway_payload_exact_disable_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1020 && offset < 0x1040) {
      offset -= 0x1020;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      gateway_payload_tind_disable_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1040 && offset < 0x1060) {
      offset -= 0x1040;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tcam_table_prop_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1060 && offset < 0x1080) {
      offset -= 0x1060;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stateful_log_counter_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1080 && offset < 0x10a0) {
      offset -= 0x1080;
      int i2 = offset / 0x10;
      offset  -= i2 * 0x10;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stateful_log_ctl_ixbar_map_[ i2 ][ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10a0 && offset < 0x10ac) {
      offset -= 0x10a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      exact_match_delay_thread_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10b0 && offset < 0x10bc) {
      offset -= 0x10b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      logical_table_thread_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10c0 && offset < 0x10cc) {
      offset -= 0x10c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pred_glob_exec_thread_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10d0 && offset < 0x10dc) {
      offset -= 0x10d0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pred_long_brch_thread_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10e0 && offset < 0x10ec) {
      offset -= 0x10e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pred_always_run_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10f0 && offset < 0x1100) {
      offset -= 0x10f0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_mapram_color_map_to_logical_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1100 && offset < 0x1110) {
      offset -= 0x1100;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_physical_to_meter_alu_icxbar_map_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1110 && offset < 0x1120) {
      offset -= 0x1110;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_meter_precolor_hash_map_to_logical_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1120 && offset < 0x1130) {
      offset -= 0x1120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_selector_action_entry_size_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1130 && offset < 0x1140) {
      offset -= 0x1130;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      selector_action_adr_shift_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1140 && offset < 0x114c) {
      offset -= 0x1140;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mpr_stage_id_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1150 && offset < 0x115c) {
      offset -= 0x1150;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_snapshot_next_table_out_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1160 && offset < 0x116c) {
      offset -= 0x1160;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_snapshot_mpr_next_table_out_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1170 && offset < 0x1180) {
      offset -= 0x1170;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stateful_log_counter_ctl_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1180 && offset < 0x1190) {
      offset -= 0x1180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stateful_log_counter_ctl2_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1190 && offset < 0x11a0) {
      offset -= 0x1190;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stateful_log_counter_ctl3_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x11a0 && offset < 0x11b0) {
      offset -= 0x11a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stateful_log_fifo_level_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x11b0 && offset < 0x11c0) {
      offset -= 0x11b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stateful_log_watermark_threshold_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x11c0 && offset < 0x11d0) {
      offset -= 0x11c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stateful_log_cur_watermark_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x11d8 && offset < 0x11e0) {
      offset -= 0x11d8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      meter_alu_thread_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x11e0 && offset < 0x11e8) {
      offset -= 0x11e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      exact_match_phys_result_delay_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x11e8 && offset < 0x11f0) {
      offset -= 0x11e8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      exact_match_phys_result_en_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x11f0 && offset < 0x11f8) {
      offset -= 0x11f0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      exact_match_phys_result_thread_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x11f8 && offset < 0x1200) {
      offset -= 0x11f8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_action_instruction_adr_map_en_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1400 && offset < 0x1408) {
      offset -= 0x1400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_action_instruction_adr_mode_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1408 && offset < 0x1410) {
      offset -= 0x1408;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_hash_group_expand_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1410 && offset < 0x1418) {
      offset -= 0x1410;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      meter_group_table_vpn_mod_enable_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1418 && offset < 0x1420) {
      offset -= 0x1418;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_meter_alu_to_logical_map_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1420 && offset < 0x1428) {
      offset -= 0x1420;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_logical_to_meter_alu_map_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1428 && offset < 0x1430) {
      offset -= 0x1428;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      action_adr_vpn_mod_enable_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1430 && offset < 0x1438) {
      offset -= 0x1430;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      predication_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1438 && offset < 0x1440) {
      offset -= 0x1438;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mpr_thread_delay_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1440 && offset < 0x1448) {
      offset -= 0x1440;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      gateway_payload_exact_shift_ovr_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1448 && offset < 0x1450) {
      offset -= 0x1448;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_snapshot_table_active_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1450 && offset < 0x1458) {
      offset -= 0x1450;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_snapshot_capture_datapath_error_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1458 && offset < 0x1460) {
      offset -= 0x1458;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_snapshot_global_exec_out_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1460 && offset < 0x1468) {
      offset -= 0x1460;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_snapshot_long_branch_out_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1468 && offset < 0x1470) {
      offset -= 0x1468;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_snapshot_mpr_global_exec_out_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1470 && offset < 0x1478) {
      offset -= 0x1470;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_snapshot_mpr_long_branch_out_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1478 && offset < 0x1480) {
      offset -= 0x1478;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_table_counter_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1480 && offset < 0x1488) {
      offset -= 0x1480;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tcam_match_error_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1488 && offset < 0x1490) {
      offset -= 0x1488;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tind_ecc_error_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1490 && offset < 0x1498) {
      offset -= 0x1490;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      gfm_parity_error_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1498 && offset < 0x14a0) {
      offset -= 0x1498;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      emm_ecc_error_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14a0 && offset < 0x14a8) {
      offset -= 0x14a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      prev_error_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14a8 && offset < 0x14b0) {
      offset -= 0x14a8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      err_idata_ovr_fifo_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14b0 && offset < 0x14b8) {
      offset -= 0x14b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      err_idata_ovr_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14b8 && offset < 0x14c0) {
      offset -= 0x14b8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      o_error_fifo_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14c0 && offset < 0x14c8) {
      offset -= 0x14c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      s2p_stats_error_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14c8 && offset < 0x14d0) {
      offset -= 0x14c8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      s2p_meter_error_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14d0 && offset < 0x14d4) {
      offset -= 0x14d0;
      exact_match_logical_result_delay_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14d4 && offset < 0x14d8) {
      offset -= 0x14d4;
      exact_match_logical_result_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14d8 && offset < 0x14dc) {
      offset -= 0x14d8;
      next_table_map_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14dc && offset < 0x14e0) {
      offset -= 0x14dc;
      next_table_map_en_gateway_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14e0 && offset < 0x14e4) {
      offset -= 0x14e0;
      next_table_tcam_actionbit_map_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14e4 && offset < 0x14e8) {
      offset -= 0x14e4;
      pred_long_brch_terminate_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14e8 && offset < 0x14ec) {
      offset -= 0x14e8;
      pred_is_a_brch_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14ec && offset < 0x14f0) {
      offset -= 0x14ec;
      pred_ghost_thread_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14f0 && offset < 0x14f4) {
      offset -= 0x14f0;
      pred_stage_id_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14f4 && offset < 0x14f8) {
      offset -= 0x14f4;
      mau_immediate_data_tcam_actionbit_map_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14f8 && offset < 0x14fc) {
      offset -= 0x14f8;
      mau_action_instruction_adr_tcam_actionbit_map_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14fc && offset < 0x1500) {
      offset -= 0x14fc;
      mau_actiondata_adr_tcam_actionbit_map_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1600 && offset < 0x1800) {
      offset -= 0x1600;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pred_map_loca_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1800 && offset < 0x1a00) {
      offset -= 0x1800;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pred_map_glob_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1a00 && offset < 0x1c00) {
      offset -= 0x1a00;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_immediate_data_exact_shiftcount_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c00 && offset < 0x1e00) {
      offset -= 0x1c00;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_action_instruction_adr_exact_shiftcount_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e00 && offset < 0x2000) {
      offset -= 0x1e00;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_actiondata_adr_exact_shiftcount_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2000 && offset < 0x2200) {
      offset -= 0x2000;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stats_adr_exact_shiftcount_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2200 && offset < 0x2400) {
      offset -= 0x2200;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_meter_adr_exact_shiftcount_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2400 && offset < 0x2600) {
      offset -= 0x2400;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_idletime_adr_exact_shiftcount_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2600 && offset < 0x2800) {
      offset -= 0x2600;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      gateway_next_table_lut_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2800 && offset < 0x2900) {
      offset -= 0x2800;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      match_to_logical_table_ixbar_outputmap_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2900 && offset < 0x2a00) {
      offset -= 0x2900;
      int i2 = offset / 0x80;
      offset  -= i2 * 0x80;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_action_instruction_adr_map_data_[ i2 ][ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2a00 && offset < 0x2ac0) {
      offset -= 0x2a00;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mpr_next_table_lut_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2b00 && offset < 0x2c00) {
      offset -= 0x2b00;
      int i3 = offset / 0x20;
      offset  -= i3 * 0x20;
      int i2 = offset / 0x10;
      offset  -= i2 * 0x10;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      gateway_payload_data_[ i3 ][ i2 ][ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c00 && offset < 0x2c04) {
      offset -= 0x2c00;
      mau_stats_adr_tcam_actionbit_map_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c04 && offset < 0x2c08) {
      offset -= 0x2c04;
      mau_meter_adr_tcam_actionbit_map_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c08 && offset < 0x2c0c) {
      offset -= 0x2c08;
      mau_match_central_mapram_read_color_oflo_ctl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c0c && offset < 0x2c10) {
      offset -= 0x2c0c;
      mau_idletime_adr_tcam_actionbit_map_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c10 && offset < 0x2c14) {
      offset -= 0x2c10;
      mau_selector_hash_sps_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c14 && offset < 0x2c18) {
      offset -= 0x2c14;
      mau_hash_group_config_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c18 && offset < 0x2c1c) {
      offset -= 0x2c18;
      mau_hash_group_shiftcount_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c1c && offset < 0x2c20) {
      offset -= 0x2c1c;
      meter_group_table_vpn_max_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c20 && offset < 0x2c24) {
      offset -= 0x2c20;
      mau_meter_precolor_hash_sel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c24 && offset < 0x2c28) {
      offset -= 0x2c24;
      mpr_bus_dep_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c28 && offset < 0x2c2c) {
      offset -= 0x2c28;
      mpr_glob_exec_thread_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c2c && offset < 0x2c30) {
      offset -= 0x2c2c;
      mpr_long_brch_thread_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c30 && offset < 0x2c34) {
      offset -= 0x2c30;
      mpr_always_run_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c34 && offset < 0x2c38) {
      offset -= 0x2c34;
      gateway_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c38 && offset < 0x2c3c) {
      offset -= 0x2c38;
      mau_snapshot_logical_table_hit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c3c && offset < 0x2c40) {
      offset -= 0x2c3c;
      mau_snapshot_gateway_table_inhibit_logical_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c80 && offset < 0x2d00) {
      offset -= 0x2c80;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_payload_shifter_enable_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2d00 && offset < 0x2d80) {
      offset -= 0x2d00;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_immediate_data_mask_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2d80 && offset < 0x2e00) {
      offset -= 0x2d80;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_immediate_data_default_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2e00 && offset < 0x2e80) {
      offset -= 0x2e00;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_immediate_data_tcam_actionbit_map_data_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2e80 && offset < 0x2f00) {
      offset -= 0x2e80;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_action_instruction_adr_mask_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2f00 && offset < 0x2f80) {
      offset -= 0x2f00;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_action_instruction_adr_default_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2f80 && offset < 0x3000) {
      offset -= 0x2f80;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_action_instruction_adr_per_entry_en_mux_ctl_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3000 && offset < 0x3080) {
      offset -= 0x3000;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_actiondata_adr_vpn_shiftcount_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3080 && offset < 0x3100) {
      offset -= 0x3080;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_actiondata_adr_mask_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3100 && offset < 0x3180) {
      offset -= 0x3100;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_actiondata_adr_default_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3180 && offset < 0x3200) {
      offset -= 0x3180;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_actiondata_adr_per_entry_en_mux_ctl_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3200 && offset < 0x3280) {
      offset -= 0x3200;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_actiondata_adr_tcam_actionbit_map_data_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3280 && offset < 0x3300) {
      offset -= 0x3280;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stats_adr_mask_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3300 && offset < 0x3380) {
      offset -= 0x3300;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stats_adr_default_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3380 && offset < 0x3400) {
      offset -= 0x3380;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stats_adr_per_entry_en_mux_ctl_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3400 && offset < 0x3480) {
      offset -= 0x3400;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stats_adr_hole_swizzle_mode_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3480 && offset < 0x3500) {
      offset -= 0x3480;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stats_adr_tcam_actionbit_map_data_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3500 && offset < 0x3580) {
      offset -= 0x3500;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_meter_adr_mask_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3580 && offset < 0x3600) {
      offset -= 0x3580;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_meter_adr_default_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3600 && offset < 0x3680) {
      offset -= 0x3600;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_meter_adr_per_entry_en_mux_ctl_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3680 && offset < 0x3700) {
      offset -= 0x3680;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_meter_adr_tcam_actionbit_map_data_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3700 && offset < 0x3780) {
      offset -= 0x3700;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_idletime_adr_mask_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3780 && offset < 0x3800) {
      offset -= 0x3780;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_idletime_adr_default_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3800 && offset < 0x3880) {
      offset -= 0x3800;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_idletime_adr_tcam_actionbit_map_data_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3880 && offset < 0x3900) {
      offset -= 0x3880;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_idletime_adr_per_entry_en_mux_ctl_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3900 && offset < 0x3980) {
      offset -= 0x3900;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_selectorlength_shiftcount_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3980 && offset < 0x3a00) {
      offset -= 0x3980;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_selectorlength_mask_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3a00 && offset < 0x3a80) {
      offset -= 0x3a00;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_selectorlength_default_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3a80 && offset < 0x3b00) {
      offset -= 0x3a80;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_meter_adr_type_position_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3b00 && offset < 0x3b80) {
      offset -= 0x3b00;
      int i2 = offset / 0x10;
      offset  -= i2 * 0x10;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      gateway_payload_match_adr_[ i2 ][ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3b80 && offset < 0x3bc0) {
      offset -= 0x3b80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tcam_match_adr_to_physical_oxbar_outputmap_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3bc0 && offset < 0x3c00) {
      offset -= 0x3bc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tind_ram_data_size_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c00 && offset < 0x3c40) {
      offset -= 0x3c00;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      next_table_format_data_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c40 && offset < 0x3c80) {
      offset -= 0x3c40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pred_miss_exec_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c80 && offset < 0x3cc0) {
      offset -= 0x3c80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pred_miss_long_brch_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3cc0 && offset < 0x3d00) {
      offset -= 0x3cc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pred_long_brch_lt_src_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3d00 && offset < 0x3d40) {
      offset -= 0x3d00;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_immediate_data_tcam_shiftcount_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3d40 && offset < 0x3d80) {
      offset -= 0x3d40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_immediate_data_miss_value_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3d80 && offset < 0x3dc0) {
      offset -= 0x3d80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_action_instruction_adr_tcam_shiftcount_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3dc0 && offset < 0x3e00) {
      offset -= 0x3dc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_action_instruction_adr_miss_value_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3e00 && offset < 0x3e40) {
      offset -= 0x3e00;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_actiondata_adr_tcam_shiftcount_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3e40 && offset < 0x3e80) {
      offset -= 0x3e40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_actiondata_adr_miss_value_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3e80 && offset < 0x3ec0) {
      offset -= 0x3e80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stats_adr_tcam_shiftcount_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3ec0 && offset < 0x3f00) {
      offset -= 0x3ec0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_stats_adr_miss_value_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3f00 && offset < 0x3f40) {
      offset -= 0x3f00;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_meter_adr_tcam_shiftcount_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3f40 && offset < 0x3f80) {
      offset -= 0x3f40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_meter_adr_miss_value_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3f80 && offset < 0x3fc0) {
      offset -= 0x3f80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_idletime_adr_tcam_shiftcount_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3fc0 && offset < 0x4000) {
      offset -= 0x3fc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_idletime_adr_miss_value_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x800 && offset < 0xe00) {
      offset -= 0x800;
      int i0 = offset / 0x80;
      offset  -= i0 * 0x80;
      col_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : mau_hash_group_xbar_ctl_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mpr_glob_exec_lut_) {
      f0.reset();
    }
    for (auto &f0 : stash_hitmap_output_map_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : stash_next_table_lut_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : stash_row_nxtable_bus_drive_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : gateway_to_logicaltable_xbar_ctl_) {
      f0.reset();
    }
    for (auto &f0 : gateway_inhibit_lut_) {
      f0.reset();
    }
    for (auto &f0 : gateway_to_pbus_xbar_ctl_) {
      f0.reset();
    }
    for (auto &f0 : exit_gateway_ctl_) {
      f0.reset();
    }
    for (auto &f0 : tind_bus_prop_) {
      f0.reset();
    }
    for (auto &f0 : mau_snapshot_physical_tcam_hit_address_) {
      f0.reset();
    }
    for (auto &f0 : mau_snapshot_physical_exact_match_hit_address_) {
      f0.reset();
    }
    for (auto &f0 : mau_table_counter_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    mau_table_counter_clear_.reset();
    mau_stateful_log_counter_clear_.reset();
    actiondata_error_ctl_.reset();
    imem_parity_error_ctl_.reset();
    for (auto &f0 : tcam_hit_to_logical_table_ixbar_outputmap_) {
      f0.reset();
    }
    for (auto &f0 : mau_hash_group_mask_) {
      f0.reset();
    }
    for (auto &f0 : mpr_long_brch_lut_) {
      f0.reset();
    }
    for (auto &f0 : gateway_payload_tind_pbus_) {
      f0.reset();
    }
    for (auto &f0 : gateway_payload_exact_pbus_) {
      f0.reset();
    }
    for (auto &f0 : gateway_payload_exact_disable_) {
      f0.reset();
    }
    for (auto &f0 : gateway_payload_tind_disable_) {
      f0.reset();
    }
    for (auto &f0 : tcam_table_prop_) {
      f0.reset();
    }
    for (auto &f0 : mau_stateful_log_counter_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_stateful_log_ctl_ixbar_map_) {
      for (auto &f1 : f0) {
        for (auto &f2 : f1) {
          f2.reset();
        }
      }
    }
    for (auto &f0 : exact_match_delay_thread_) {
      f0.reset();
    }
    for (auto &f0 : logical_table_thread_) {
      f0.reset();
    }
    for (auto &f0 : pred_glob_exec_thread_) {
      f0.reset();
    }
    for (auto &f0 : pred_long_brch_thread_) {
      f0.reset();
    }
    for (auto &f0 : pred_always_run_) {
      f0.reset();
    }
    for (auto &f0 : mau_mapram_color_map_to_logical_ctl_) {
      f0.reset();
    }
    for (auto &f0 : mau_physical_to_meter_alu_icxbar_map_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_meter_precolor_hash_map_to_logical_ctl_) {
      f0.reset();
    }
    for (auto &f0 : mau_selector_action_entry_size_) {
      f0.reset();
    }
    for (auto &f0 : selector_action_adr_shift_) {
      f0.reset();
    }
    for (auto &f0 : mpr_stage_id_) {
      f0.reset();
    }
    for (auto &f0 : mau_snapshot_next_table_out_) {
      f0.reset();
    }
    for (auto &f0 : mau_snapshot_mpr_next_table_out_) {
      f0.reset();
    }
    for (auto &f0 : mau_stateful_log_counter_ctl_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_stateful_log_counter_ctl2_) {
      f0.reset();
    }
    for (auto &f0 : mau_stateful_log_counter_ctl3_) {
      f0.reset();
    }
    for (auto &f0 : mau_stateful_log_fifo_level_) {
      f0.reset();
    }
    for (auto &f0 : mau_stateful_log_watermark_threshold_) {
      f0.reset();
    }
    for (auto &f0 : mau_stateful_log_cur_watermark_) {
      f0.reset();
    }
    for (auto &f0 : meter_alu_thread_) {
      f0.reset();
    }
    for (auto &f0 : exact_match_phys_result_delay_) {
      f0.reset();
    }
    for (auto &f0 : exact_match_phys_result_en_) {
      f0.reset();
    }
    for (auto &f0 : exact_match_phys_result_thread_) {
      f0.reset();
    }
    for (auto &f0 : mau_action_instruction_adr_map_en_) {
      f0.reset();
    }
    for (auto &f0 : mau_action_instruction_adr_mode_) {
      f0.reset();
    }
    for (auto &f0 : mau_hash_group_expand_) {
      f0.reset();
    }
    for (auto &f0 : meter_group_table_vpn_mod_enable_) {
      f0.reset();
    }
    for (auto &f0 : mau_meter_alu_to_logical_map_) {
      f0.reset();
    }
    for (auto &f0 : mau_logical_to_meter_alu_map_) {
      f0.reset();
    }
    for (auto &f0 : action_adr_vpn_mod_enable_) {
      f0.reset();
    }
    for (auto &f0 : predication_ctl_) {
      f0.reset();
    }
    for (auto &f0 : mpr_thread_delay_) {
      f0.reset();
    }
    for (auto &f0 : gateway_payload_exact_shift_ovr_) {
      f0.reset();
    }
    for (auto &f0 : mau_snapshot_table_active_) {
      f0.reset();
    }
    for (auto &f0 : mau_snapshot_capture_datapath_error_) {
      f0.reset();
    }
    for (auto &f0 : mau_snapshot_global_exec_out_) {
      f0.reset();
    }
    for (auto &f0 : mau_snapshot_long_branch_out_) {
      f0.reset();
    }
    for (auto &f0 : mau_snapshot_mpr_global_exec_out_) {
      f0.reset();
    }
    for (auto &f0 : mau_snapshot_mpr_long_branch_out_) {
      f0.reset();
    }
    for (auto &f0 : mau_table_counter_ctl_) {
      f0.reset();
    }
    for (auto &f0 : tcam_match_error_ctl_) {
      f0.reset();
    }
    for (auto &f0 : tind_ecc_error_ctl_) {
      f0.reset();
    }
    for (auto &f0 : gfm_parity_error_ctl_) {
      f0.reset();
    }
    for (auto &f0 : emm_ecc_error_ctl_) {
      f0.reset();
    }
    for (auto &f0 : prev_error_ctl_) {
      f0.reset();
    }
    for (auto &f0 : err_idata_ovr_fifo_ctl_) {
      f0.reset();
    }
    for (auto &f0 : err_idata_ovr_ctl_) {
      f0.reset();
    }
    for (auto &f0 : o_error_fifo_ctl_) {
      f0.reset();
    }
    for (auto &f0 : s2p_stats_error_ctl_) {
      f0.reset();
    }
    for (auto &f0 : s2p_meter_error_ctl_) {
      f0.reset();
    }
    exact_match_logical_result_delay_.reset();
    exact_match_logical_result_en_.reset();
    next_table_map_en_.reset();
    next_table_map_en_gateway_.reset();
    next_table_tcam_actionbit_map_en_.reset();
    pred_long_brch_terminate_.reset();
    pred_is_a_brch_.reset();
    pred_ghost_thread_.reset();
    pred_stage_id_.reset();
    mau_immediate_data_tcam_actionbit_map_en_.reset();
    mau_action_instruction_adr_tcam_actionbit_map_en_.reset();
    mau_actiondata_adr_tcam_actionbit_map_en_.reset();
    for (auto &f0 : pred_map_loca_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : pred_map_glob_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_immediate_data_exact_shiftcount_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_action_instruction_adr_exact_shiftcount_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_actiondata_adr_exact_shiftcount_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_stats_adr_exact_shiftcount_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_meter_adr_exact_shiftcount_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_idletime_adr_exact_shiftcount_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : gateway_next_table_lut_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : match_to_logical_table_ixbar_outputmap_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_action_instruction_adr_map_data_) {
      for (auto &f1 : f0) {
        for (auto &f2 : f1) {
          f2.reset();
        }
      }
    }
    for (auto &f0 : mpr_next_table_lut_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : gateway_payload_data_) {
      for (auto &f1 : f0) {
        for (auto &f2 : f1) {
          for (auto &f3 : f2) {
            f3.reset();
          }
        }
      }
    }
    mau_stats_adr_tcam_actionbit_map_en_.reset();
    mau_meter_adr_tcam_actionbit_map_en_.reset();
    mau_match_central_mapram_read_color_oflo_ctl_.reset();
    mau_idletime_adr_tcam_actionbit_map_en_.reset();
    mau_selector_hash_sps_enable_.reset();
    mau_hash_group_config_.reset();
    mau_hash_group_shiftcount_.reset();
    meter_group_table_vpn_max_.reset();
    mau_meter_precolor_hash_sel_.reset();
    mpr_bus_dep_.reset();
    mpr_glob_exec_thread_.reset();
    mpr_long_brch_thread_.reset();
    mpr_always_run_.reset();
    gateway_en_.reset();
    mau_snapshot_logical_table_hit_.reset();
    mau_snapshot_gateway_table_inhibit_logical_.reset();
    for (auto &f0 : mau_payload_shifter_enable_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_immediate_data_mask_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_immediate_data_default_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_immediate_data_tcam_actionbit_map_data_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_action_instruction_adr_mask_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_action_instruction_adr_default_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_action_instruction_adr_per_entry_en_mux_ctl_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_actiondata_adr_vpn_shiftcount_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_actiondata_adr_mask_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_actiondata_adr_default_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_actiondata_adr_per_entry_en_mux_ctl_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_actiondata_adr_tcam_actionbit_map_data_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_stats_adr_mask_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_stats_adr_default_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_stats_adr_per_entry_en_mux_ctl_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_stats_adr_hole_swizzle_mode_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_stats_adr_tcam_actionbit_map_data_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_meter_adr_mask_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_meter_adr_default_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_meter_adr_per_entry_en_mux_ctl_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_meter_adr_tcam_actionbit_map_data_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_idletime_adr_mask_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_idletime_adr_default_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_idletime_adr_tcam_actionbit_map_data_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_idletime_adr_per_entry_en_mux_ctl_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_selectorlength_shiftcount_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_selectorlength_mask_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_selectorlength_default_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_meter_adr_type_position_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : gateway_payload_match_adr_) {
      for (auto &f1 : f0) {
        for (auto &f2 : f1) {
          f2.reset();
        }
      }
    }
    for (auto &f0 : tcam_match_adr_to_physical_oxbar_outputmap_) {
      f0.reset();
    }
    for (auto &f0 : tind_ram_data_size_) {
      f0.reset();
    }
    for (auto &f0 : next_table_format_data_) {
      f0.reset();
    }
    for (auto &f0 : pred_miss_exec_) {
      f0.reset();
    }
    for (auto &f0 : pred_miss_long_brch_) {
      f0.reset();
    }
    for (auto &f0 : pred_long_brch_lt_src_) {
      f0.reset();
    }
    for (auto &f0 : mau_immediate_data_tcam_shiftcount_) {
      f0.reset();
    }
    for (auto &f0 : mau_immediate_data_miss_value_) {
      f0.reset();
    }
    for (auto &f0 : mau_action_instruction_adr_tcam_shiftcount_) {
      f0.reset();
    }
    for (auto &f0 : mau_action_instruction_adr_miss_value_) {
      f0.reset();
    }
    for (auto &f0 : mau_actiondata_adr_tcam_shiftcount_) {
      f0.reset();
    }
    for (auto &f0 : mau_actiondata_adr_miss_value_) {
      f0.reset();
    }
    for (auto &f0 : mau_stats_adr_tcam_shiftcount_) {
      f0.reset();
    }
    for (auto &f0 : mau_stats_adr_miss_value_) {
      f0.reset();
    }
    for (auto &f0 : mau_meter_adr_tcam_shiftcount_) {
      f0.reset();
    }
    for (auto &f0 : mau_meter_adr_miss_value_) {
      f0.reset();
    }
    for (auto &f0 : mau_idletime_adr_tcam_shiftcount_) {
      f0.reset();
    }
    for (auto &f0 : mau_idletime_adr_miss_value_) {
      f0.reset();
    }
    for (auto &f0 : col_) {
      f0.reset();
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x30) {
      offset -= 0x0;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_hash_group_xbar_ctl_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x80) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mpr_glob_exec_lut_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xc0) {
      offset -= 0x80;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stash_hitmap_output_map_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0x100) {
      offset -= 0xc0;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stash_next_table_lut_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x140) {
      offset -= 0x100;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stash_row_nxtable_bus_drive_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x180) {
      offset -= 0x140;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += gateway_to_logicaltable_xbar_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x1c0) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += gateway_inhibit_lut_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c0 && offset < 0x200) {
      offset -= 0x1c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += gateway_to_pbus_xbar_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x240) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += exit_gateway_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x240 && offset < 0x280) {
      offset -= 0x240;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tind_bus_prop_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x280 && offset < 0x2c0) {
      offset -= 0x280;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_snapshot_physical_tcam_hit_address_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c0 && offset < 0x300) {
      offset -= 0x2c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_snapshot_physical_exact_match_hit_address_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x300 && offset < 0x340) {
      offset -= 0x300;
      int i1 = offset / 0x4;
      offset  -= i1 * 0x4;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_table_counter_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x340 && offset < 0x344) {
      offset -= 0x340;
      r += mau_table_counter_clear_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x344 && offset < 0x348) {
      offset -= 0x344;
      r += mau_stateful_log_counter_clear_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x348 && offset < 0x34c) {
      offset -= 0x348;
      r += actiondata_error_ctl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34c && offset < 0x350) {
      offset -= 0x34c;
      r += imem_parity_error_ctl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x360 && offset < 0x380) {
      offset -= 0x360;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tcam_hit_to_logical_table_ixbar_outputmap_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x380 && offset < 0x398) {
      offset -= 0x380;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_hash_group_mask_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3a0 && offset < 0x3c0) {
      offset -= 0x3a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mpr_long_brch_lut_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c0 && offset < 0x3e0) {
      offset -= 0x3c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += gateway_payload_tind_pbus_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3e0 && offset < 0x400) {
      offset -= 0x3e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += gateway_payload_exact_pbus_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1000 && offset < 0x1020) {
      offset -= 0x1000;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += gateway_payload_exact_disable_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1020 && offset < 0x1040) {
      offset -= 0x1020;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += gateway_payload_tind_disable_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1040 && offset < 0x1060) {
      offset -= 0x1040;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tcam_table_prop_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1060 && offset < 0x1080) {
      offset -= 0x1060;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stateful_log_counter_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1080 && offset < 0x10a0) {
      offset -= 0x1080;
      int i2 = offset / 0x10;
      offset  -= i2 * 0x10;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stateful_log_ctl_ixbar_map_[ i2 ][ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10a0 && offset < 0x10ac) {
      offset -= 0x10a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += exact_match_delay_thread_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10b0 && offset < 0x10bc) {
      offset -= 0x10b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += logical_table_thread_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10c0 && offset < 0x10cc) {
      offset -= 0x10c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pred_glob_exec_thread_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10d0 && offset < 0x10dc) {
      offset -= 0x10d0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pred_long_brch_thread_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10e0 && offset < 0x10ec) {
      offset -= 0x10e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pred_always_run_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10f0 && offset < 0x1100) {
      offset -= 0x10f0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_mapram_color_map_to_logical_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1100 && offset < 0x1110) {
      offset -= 0x1100;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_physical_to_meter_alu_icxbar_map_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1110 && offset < 0x1120) {
      offset -= 0x1110;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_meter_precolor_hash_map_to_logical_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1120 && offset < 0x1130) {
      offset -= 0x1120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_selector_action_entry_size_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1130 && offset < 0x1140) {
      offset -= 0x1130;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += selector_action_adr_shift_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1140 && offset < 0x114c) {
      offset -= 0x1140;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mpr_stage_id_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1150 && offset < 0x115c) {
      offset -= 0x1150;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_snapshot_next_table_out_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1160 && offset < 0x116c) {
      offset -= 0x1160;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_snapshot_mpr_next_table_out_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1170 && offset < 0x1180) {
      offset -= 0x1170;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stateful_log_counter_ctl_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1180 && offset < 0x1190) {
      offset -= 0x1180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stateful_log_counter_ctl2_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1190 && offset < 0x11a0) {
      offset -= 0x1190;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stateful_log_counter_ctl3_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x11a0 && offset < 0x11b0) {
      offset -= 0x11a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stateful_log_fifo_level_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x11b0 && offset < 0x11c0) {
      offset -= 0x11b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stateful_log_watermark_threshold_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x11c0 && offset < 0x11d0) {
      offset -= 0x11c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stateful_log_cur_watermark_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x11d8 && offset < 0x11e0) {
      offset -= 0x11d8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += meter_alu_thread_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x11e0 && offset < 0x11e8) {
      offset -= 0x11e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += exact_match_phys_result_delay_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x11e8 && offset < 0x11f0) {
      offset -= 0x11e8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += exact_match_phys_result_en_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x11f0 && offset < 0x11f8) {
      offset -= 0x11f0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += exact_match_phys_result_thread_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x11f8 && offset < 0x1200) {
      offset -= 0x11f8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_action_instruction_adr_map_en_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1400 && offset < 0x1408) {
      offset -= 0x1400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_action_instruction_adr_mode_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1408 && offset < 0x1410) {
      offset -= 0x1408;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_hash_group_expand_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1410 && offset < 0x1418) {
      offset -= 0x1410;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += meter_group_table_vpn_mod_enable_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1418 && offset < 0x1420) {
      offset -= 0x1418;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_meter_alu_to_logical_map_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1420 && offset < 0x1428) {
      offset -= 0x1420;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_logical_to_meter_alu_map_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1428 && offset < 0x1430) {
      offset -= 0x1428;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += action_adr_vpn_mod_enable_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1430 && offset < 0x1438) {
      offset -= 0x1430;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += predication_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1438 && offset < 0x1440) {
      offset -= 0x1438;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mpr_thread_delay_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1440 && offset < 0x1448) {
      offset -= 0x1440;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += gateway_payload_exact_shift_ovr_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1448 && offset < 0x1450) {
      offset -= 0x1448;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_snapshot_table_active_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1450 && offset < 0x1458) {
      offset -= 0x1450;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_snapshot_capture_datapath_error_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1458 && offset < 0x1460) {
      offset -= 0x1458;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_snapshot_global_exec_out_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1460 && offset < 0x1468) {
      offset -= 0x1460;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_snapshot_long_branch_out_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1468 && offset < 0x1470) {
      offset -= 0x1468;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_snapshot_mpr_global_exec_out_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1470 && offset < 0x1478) {
      offset -= 0x1470;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_snapshot_mpr_long_branch_out_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1478 && offset < 0x1480) {
      offset -= 0x1478;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_table_counter_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1480 && offset < 0x1488) {
      offset -= 0x1480;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tcam_match_error_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1488 && offset < 0x1490) {
      offset -= 0x1488;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tind_ecc_error_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1490 && offset < 0x1498) {
      offset -= 0x1490;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += gfm_parity_error_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1498 && offset < 0x14a0) {
      offset -= 0x1498;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += emm_ecc_error_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14a0 && offset < 0x14a8) {
      offset -= 0x14a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += prev_error_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14a8 && offset < 0x14b0) {
      offset -= 0x14a8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += err_idata_ovr_fifo_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14b0 && offset < 0x14b8) {
      offset -= 0x14b0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += err_idata_ovr_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14b8 && offset < 0x14c0) {
      offset -= 0x14b8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += o_error_fifo_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14c0 && offset < 0x14c8) {
      offset -= 0x14c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += s2p_stats_error_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14c8 && offset < 0x14d0) {
      offset -= 0x14c8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += s2p_meter_error_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14d0 && offset < 0x14d4) {
      offset -= 0x14d0;
      r += exact_match_logical_result_delay_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14d4 && offset < 0x14d8) {
      offset -= 0x14d4;
      r += exact_match_logical_result_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14d8 && offset < 0x14dc) {
      offset -= 0x14d8;
      r += next_table_map_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14dc && offset < 0x14e0) {
      offset -= 0x14dc;
      r += next_table_map_en_gateway_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14e0 && offset < 0x14e4) {
      offset -= 0x14e0;
      r += next_table_tcam_actionbit_map_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14e4 && offset < 0x14e8) {
      offset -= 0x14e4;
      r += pred_long_brch_terminate_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14e8 && offset < 0x14ec) {
      offset -= 0x14e8;
      r += pred_is_a_brch_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14ec && offset < 0x14f0) {
      offset -= 0x14ec;
      r += pred_ghost_thread_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14f0 && offset < 0x14f4) {
      offset -= 0x14f0;
      r += pred_stage_id_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14f4 && offset < 0x14f8) {
      offset -= 0x14f4;
      r += mau_immediate_data_tcam_actionbit_map_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14f8 && offset < 0x14fc) {
      offset -= 0x14f8;
      r += mau_action_instruction_adr_tcam_actionbit_map_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14fc && offset < 0x1500) {
      offset -= 0x14fc;
      r += mau_actiondata_adr_tcam_actionbit_map_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1600 && offset < 0x1800) {
      offset -= 0x1600;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pred_map_loca_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1800 && offset < 0x1a00) {
      offset -= 0x1800;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pred_map_glob_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1a00 && offset < 0x1c00) {
      offset -= 0x1a00;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_immediate_data_exact_shiftcount_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c00 && offset < 0x1e00) {
      offset -= 0x1c00;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_action_instruction_adr_exact_shiftcount_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e00 && offset < 0x2000) {
      offset -= 0x1e00;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_actiondata_adr_exact_shiftcount_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2000 && offset < 0x2200) {
      offset -= 0x2000;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stats_adr_exact_shiftcount_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2200 && offset < 0x2400) {
      offset -= 0x2200;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_meter_adr_exact_shiftcount_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2400 && offset < 0x2600) {
      offset -= 0x2400;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_idletime_adr_exact_shiftcount_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2600 && offset < 0x2800) {
      offset -= 0x2600;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += gateway_next_table_lut_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2800 && offset < 0x2900) {
      offset -= 0x2800;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += match_to_logical_table_ixbar_outputmap_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2900 && offset < 0x2a00) {
      offset -= 0x2900;
      int i2 = offset / 0x80;
      offset  -= i2 * 0x80;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_action_instruction_adr_map_data_[ i2 ][ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2a00 && offset < 0x2ac0) {
      offset -= 0x2a00;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mpr_next_table_lut_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2b00 && offset < 0x2c00) {
      offset -= 0x2b00;
      int i3 = offset / 0x20;
      offset  -= i3 * 0x20;
      int i2 = offset / 0x10;
      offset  -= i2 * 0x10;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += gateway_payload_data_[ i3 ][ i2 ][ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c00 && offset < 0x2c04) {
      offset -= 0x2c00;
      r += mau_stats_adr_tcam_actionbit_map_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c04 && offset < 0x2c08) {
      offset -= 0x2c04;
      r += mau_meter_adr_tcam_actionbit_map_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c08 && offset < 0x2c0c) {
      offset -= 0x2c08;
      r += mau_match_central_mapram_read_color_oflo_ctl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c0c && offset < 0x2c10) {
      offset -= 0x2c0c;
      r += mau_idletime_adr_tcam_actionbit_map_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c10 && offset < 0x2c14) {
      offset -= 0x2c10;
      r += mau_selector_hash_sps_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c14 && offset < 0x2c18) {
      offset -= 0x2c14;
      r += mau_hash_group_config_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c18 && offset < 0x2c1c) {
      offset -= 0x2c18;
      r += mau_hash_group_shiftcount_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c1c && offset < 0x2c20) {
      offset -= 0x2c1c;
      r += meter_group_table_vpn_max_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c20 && offset < 0x2c24) {
      offset -= 0x2c20;
      r += mau_meter_precolor_hash_sel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c24 && offset < 0x2c28) {
      offset -= 0x2c24;
      r += mpr_bus_dep_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c28 && offset < 0x2c2c) {
      offset -= 0x2c28;
      r += mpr_glob_exec_thread_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c2c && offset < 0x2c30) {
      offset -= 0x2c2c;
      r += mpr_long_brch_thread_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c30 && offset < 0x2c34) {
      offset -= 0x2c30;
      r += mpr_always_run_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c34 && offset < 0x2c38) {
      offset -= 0x2c34;
      r += gateway_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c38 && offset < 0x2c3c) {
      offset -= 0x2c38;
      r += mau_snapshot_logical_table_hit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c3c && offset < 0x2c40) {
      offset -= 0x2c3c;
      r += mau_snapshot_gateway_table_inhibit_logical_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c80 && offset < 0x2d00) {
      offset -= 0x2c80;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_payload_shifter_enable_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2d00 && offset < 0x2d80) {
      offset -= 0x2d00;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_immediate_data_mask_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2d80 && offset < 0x2e00) {
      offset -= 0x2d80;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_immediate_data_default_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2e00 && offset < 0x2e80) {
      offset -= 0x2e00;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_immediate_data_tcam_actionbit_map_data_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2e80 && offset < 0x2f00) {
      offset -= 0x2e80;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_action_instruction_adr_mask_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2f00 && offset < 0x2f80) {
      offset -= 0x2f00;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_action_instruction_adr_default_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2f80 && offset < 0x3000) {
      offset -= 0x2f80;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_action_instruction_adr_per_entry_en_mux_ctl_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3000 && offset < 0x3080) {
      offset -= 0x3000;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_actiondata_adr_vpn_shiftcount_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3080 && offset < 0x3100) {
      offset -= 0x3080;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_actiondata_adr_mask_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3100 && offset < 0x3180) {
      offset -= 0x3100;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_actiondata_adr_default_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3180 && offset < 0x3200) {
      offset -= 0x3180;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_actiondata_adr_per_entry_en_mux_ctl_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3200 && offset < 0x3280) {
      offset -= 0x3200;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_actiondata_adr_tcam_actionbit_map_data_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3280 && offset < 0x3300) {
      offset -= 0x3280;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stats_adr_mask_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3300 && offset < 0x3380) {
      offset -= 0x3300;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stats_adr_default_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3380 && offset < 0x3400) {
      offset -= 0x3380;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stats_adr_per_entry_en_mux_ctl_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3400 && offset < 0x3480) {
      offset -= 0x3400;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stats_adr_hole_swizzle_mode_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3480 && offset < 0x3500) {
      offset -= 0x3480;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stats_adr_tcam_actionbit_map_data_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3500 && offset < 0x3580) {
      offset -= 0x3500;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_meter_adr_mask_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3580 && offset < 0x3600) {
      offset -= 0x3580;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_meter_adr_default_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3600 && offset < 0x3680) {
      offset -= 0x3600;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_meter_adr_per_entry_en_mux_ctl_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3680 && offset < 0x3700) {
      offset -= 0x3680;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_meter_adr_tcam_actionbit_map_data_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3700 && offset < 0x3780) {
      offset -= 0x3700;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_idletime_adr_mask_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3780 && offset < 0x3800) {
      offset -= 0x3780;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_idletime_adr_default_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3800 && offset < 0x3880) {
      offset -= 0x3800;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_idletime_adr_tcam_actionbit_map_data_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3880 && offset < 0x3900) {
      offset -= 0x3880;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_idletime_adr_per_entry_en_mux_ctl_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3900 && offset < 0x3980) {
      offset -= 0x3900;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_selectorlength_shiftcount_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3980 && offset < 0x3a00) {
      offset -= 0x3980;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_selectorlength_mask_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3a00 && offset < 0x3a80) {
      offset -= 0x3a00;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_selectorlength_default_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3a80 && offset < 0x3b00) {
      offset -= 0x3a80;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_meter_adr_type_position_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3b00 && offset < 0x3b80) {
      offset -= 0x3b00;
      int i2 = offset / 0x10;
      offset  -= i2 * 0x10;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += gateway_payload_match_adr_[ i2 ][ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3b80 && offset < 0x3bc0) {
      offset -= 0x3b80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tcam_match_adr_to_physical_oxbar_outputmap_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3bc0 && offset < 0x3c00) {
      offset -= 0x3bc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tind_ram_data_size_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c00 && offset < 0x3c40) {
      offset -= 0x3c00;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += next_table_format_data_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c40 && offset < 0x3c80) {
      offset -= 0x3c40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pred_miss_exec_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c80 && offset < 0x3cc0) {
      offset -= 0x3c80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pred_miss_long_brch_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3cc0 && offset < 0x3d00) {
      offset -= 0x3cc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pred_long_brch_lt_src_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3d00 && offset < 0x3d40) {
      offset -= 0x3d00;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_immediate_data_tcam_shiftcount_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3d40 && offset < 0x3d80) {
      offset -= 0x3d40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_immediate_data_miss_value_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3d80 && offset < 0x3dc0) {
      offset -= 0x3d80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_action_instruction_adr_tcam_shiftcount_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3dc0 && offset < 0x3e00) {
      offset -= 0x3dc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_action_instruction_adr_miss_value_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3e00 && offset < 0x3e40) {
      offset -= 0x3e00;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_actiondata_adr_tcam_shiftcount_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3e40 && offset < 0x3e80) {
      offset -= 0x3e40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_actiondata_adr_miss_value_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3e80 && offset < 0x3ec0) {
      offset -= 0x3e80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stats_adr_tcam_shiftcount_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3ec0 && offset < 0x3f00) {
      offset -= 0x3ec0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_stats_adr_miss_value_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3f00 && offset < 0x3f40) {
      offset -= 0x3f00;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_meter_adr_tcam_shiftcount_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3f40 && offset < 0x3f80) {
      offset -= 0x3f40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_meter_adr_miss_value_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3f80 && offset < 0x3fc0) {
      offset -= 0x3f80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_idletime_adr_tcam_shiftcount_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3fc0 && offset < 0x4000) {
      offset -= 0x3fc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_idletime_adr_miss_value_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x800 && offset < 0xe00) {
      offset -= 0x800;
      int i0 = offset / 0x80;
      offset  -= i0 * 0x80;
      r += col_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a1=0;a1<6;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += mau_hash_group_xbar_ctl_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mpr_glob_exec_lut_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<8;++a0) {
        r += stash_hitmap_output_map_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<8;++a0) {
        r += stash_next_table_lut_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<8;++a0) {
        r += stash_row_nxtable_bus_drive_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += gateway_to_logicaltable_xbar_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += gateway_inhibit_lut_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += gateway_to_pbus_xbar_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += exit_gateway_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += tind_bus_prop_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mau_snapshot_physical_tcam_hit_address_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mau_snapshot_physical_exact_match_hit_address_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a1=0;a1<16;++a1) {
      for (uint32_t a0=0;a0<1;++a0) {
        r += mau_table_counter_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    r += mau_table_counter_clear_.to_string(print_zeros,indent_string) ;
    r += mau_stateful_log_counter_clear_.to_string(print_zeros,indent_string) ;
    r += actiondata_error_ctl_.to_string(print_zeros,indent_string) ;
    r += imem_parity_error_ctl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<8;++a0) {
      r += tcam_hit_to_logical_table_ixbar_outputmap_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<6;++a0) {
      r += mau_hash_group_mask_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += mpr_long_brch_lut_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += gateway_payload_tind_pbus_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += gateway_payload_exact_pbus_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += gateway_payload_exact_disable_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += gateway_payload_tind_disable_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += tcam_table_prop_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a1=0;a1<4;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += mau_stateful_log_counter_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a2=0;a2<2;++a2) {
      for (uint32_t a1=0;a1<2;++a1) {
        for (uint32_t a0=0;a0<2;++a0) {
          r += mau_stateful_log_ctl_ixbar_map_[a2][a1][a0].to_string(print_zeros,indent_string) ;
        }
      }
    }
    for (uint32_t a0=0;a0<3;++a0) {
      r += exact_match_delay_thread_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<3;++a0) {
      r += logical_table_thread_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<3;++a0) {
      r += pred_glob_exec_thread_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<3;++a0) {
      r += pred_long_brch_thread_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<3;++a0) {
      r += pred_always_run_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += mau_mapram_color_map_to_logical_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += mau_physical_to_meter_alu_icxbar_map_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += mau_meter_precolor_hash_map_to_logical_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += mau_selector_action_entry_size_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += selector_action_adr_shift_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<3;++a0) {
      r += mpr_stage_id_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<3;++a0) {
      r += mau_snapshot_next_table_out_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<3;++a0) {
      r += mau_snapshot_mpr_next_table_out_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += mau_stateful_log_counter_ctl_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += mau_stateful_log_counter_ctl2_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += mau_stateful_log_counter_ctl3_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += mau_stateful_log_fifo_level_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += mau_stateful_log_watermark_threshold_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += mau_stateful_log_cur_watermark_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += meter_alu_thread_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += exact_match_phys_result_delay_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += exact_match_phys_result_en_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += exact_match_phys_result_thread_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += mau_action_instruction_adr_map_en_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += mau_action_instruction_adr_mode_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += mau_hash_group_expand_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += meter_group_table_vpn_mod_enable_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += mau_meter_alu_to_logical_map_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += mau_logical_to_meter_alu_map_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += action_adr_vpn_mod_enable_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += predication_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += mpr_thread_delay_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += gateway_payload_exact_shift_ovr_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += mau_snapshot_table_active_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += mau_snapshot_capture_datapath_error_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += mau_snapshot_global_exec_out_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += mau_snapshot_long_branch_out_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += mau_snapshot_mpr_global_exec_out_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += mau_snapshot_mpr_long_branch_out_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += mau_table_counter_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += tcam_match_error_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += tind_ecc_error_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += gfm_parity_error_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += emm_ecc_error_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += prev_error_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += err_idata_ovr_fifo_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += err_idata_ovr_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += o_error_fifo_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += s2p_stats_error_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += s2p_meter_error_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    r += exact_match_logical_result_delay_.to_string(print_zeros,indent_string) ;
    r += exact_match_logical_result_en_.to_string(print_zeros,indent_string) ;
    r += next_table_map_en_.to_string(print_zeros,indent_string) ;
    r += next_table_map_en_gateway_.to_string(print_zeros,indent_string) ;
    r += next_table_tcam_actionbit_map_en_.to_string(print_zeros,indent_string) ;
    r += pred_long_brch_terminate_.to_string(print_zeros,indent_string) ;
    r += pred_is_a_brch_.to_string(print_zeros,indent_string) ;
    r += pred_ghost_thread_.to_string(print_zeros,indent_string) ;
    r += pred_stage_id_.to_string(print_zeros,indent_string) ;
    r += mau_immediate_data_tcam_actionbit_map_en_.to_string(print_zeros,indent_string) ;
    r += mau_action_instruction_adr_tcam_actionbit_map_en_.to_string(print_zeros,indent_string) ;
    r += mau_actiondata_adr_tcam_actionbit_map_en_.to_string(print_zeros,indent_string) ;
    for (uint32_t a1=0;a1<16;++a1) {
      for (uint32_t a0=0;a0<8;++a0) {
        r += pred_map_loca_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<16;++a1) {
      for (uint32_t a0=0;a0<8;++a0) {
        r += pred_map_glob_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<16;++a1) {
      for (uint32_t a0=0;a0<8;++a0) {
        r += mau_immediate_data_exact_shiftcount_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<16;++a1) {
      for (uint32_t a0=0;a0<8;++a0) {
        r += mau_action_instruction_adr_exact_shiftcount_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<16;++a1) {
      for (uint32_t a0=0;a0<8;++a0) {
        r += mau_actiondata_adr_exact_shiftcount_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<16;++a1) {
      for (uint32_t a0=0;a0<8;++a0) {
        r += mau_stats_adr_exact_shiftcount_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<16;++a1) {
      for (uint32_t a0=0;a0<8;++a0) {
        r += mau_meter_adr_exact_shiftcount_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<16;++a1) {
      for (uint32_t a0=0;a0<8;++a0) {
        r += mau_idletime_adr_exact_shiftcount_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<16;++a1) {
      for (uint32_t a0=0;a0<8;++a0) {
        r += gateway_next_table_lut_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<4;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += match_to_logical_table_ixbar_outputmap_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a2=0;a2<2;++a2) {
      for (uint32_t a1=0;a1<16;++a1) {
        for (uint32_t a0=0;a0<2;++a0) {
          r += mau_action_instruction_adr_map_data_[a2][a1][a0].to_string(print_zeros,indent_string) ;
        }
      }
    }
    for (uint32_t a1=0;a1<3;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mpr_next_table_lut_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a3=0;a3<8;++a3) {
      for (uint32_t a2=0;a2<2;++a2) {
        for (uint32_t a1=0;a1<2;++a1) {
          for (uint32_t a0=0;a0<2;++a0) {
            r += gateway_payload_data_[a3][a2][a1][a0].to_string(print_zeros,indent_string) ;
          }
        }
      }
    }
    r += mau_stats_adr_tcam_actionbit_map_en_.to_string(print_zeros,indent_string) ;
    r += mau_meter_adr_tcam_actionbit_map_en_.to_string(print_zeros,indent_string) ;
    r += mau_match_central_mapram_read_color_oflo_ctl_.to_string(print_zeros,indent_string) ;
    r += mau_idletime_adr_tcam_actionbit_map_en_.to_string(print_zeros,indent_string) ;
    r += mau_selector_hash_sps_enable_.to_string(print_zeros,indent_string) ;
    r += mau_hash_group_config_.to_string(print_zeros,indent_string) ;
    r += mau_hash_group_shiftcount_.to_string(print_zeros,indent_string) ;
    r += meter_group_table_vpn_max_.to_string(print_zeros,indent_string) ;
    r += mau_meter_precolor_hash_sel_.to_string(print_zeros,indent_string) ;
    r += mpr_bus_dep_.to_string(print_zeros,indent_string) ;
    r += mpr_glob_exec_thread_.to_string(print_zeros,indent_string) ;
    r += mpr_long_brch_thread_.to_string(print_zeros,indent_string) ;
    r += mpr_always_run_.to_string(print_zeros,indent_string) ;
    r += gateway_en_.to_string(print_zeros,indent_string) ;
    r += mau_snapshot_logical_table_hit_.to_string(print_zeros,indent_string) ;
    r += mau_snapshot_gateway_table_inhibit_logical_.to_string(print_zeros,indent_string) ;
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_payload_shifter_enable_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_immediate_data_mask_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_immediate_data_default_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<16;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += mau_immediate_data_tcam_actionbit_map_data_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_action_instruction_adr_mask_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_action_instruction_adr_default_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_action_instruction_adr_per_entry_en_mux_ctl_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_actiondata_adr_vpn_shiftcount_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_actiondata_adr_mask_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_actiondata_adr_default_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_actiondata_adr_per_entry_en_mux_ctl_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<16;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += mau_actiondata_adr_tcam_actionbit_map_data_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_stats_adr_mask_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_stats_adr_default_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_stats_adr_per_entry_en_mux_ctl_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_stats_adr_hole_swizzle_mode_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<16;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += mau_stats_adr_tcam_actionbit_map_data_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_meter_adr_mask_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_meter_adr_default_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_meter_adr_per_entry_en_mux_ctl_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<16;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += mau_meter_adr_tcam_actionbit_map_data_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_idletime_adr_mask_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_idletime_adr_default_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<16;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += mau_idletime_adr_tcam_actionbit_map_data_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_idletime_adr_per_entry_en_mux_ctl_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_selectorlength_shiftcount_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_selectorlength_mask_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_selectorlength_default_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += mau_meter_adr_type_position_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a2=0;a2<8;++a2) {
      for (uint32_t a1=0;a1<2;++a1) {
        for (uint32_t a0=0;a0<2;++a0) {
          r += gateway_payload_match_adr_[a2][a1][a0].to_string(print_zeros,indent_string) ;
        }
      }
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += tcam_match_adr_to_physical_oxbar_outputmap_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += tind_ram_data_size_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += next_table_format_data_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += pred_miss_exec_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += pred_miss_long_brch_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += pred_long_brch_lt_src_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mau_immediate_data_tcam_shiftcount_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mau_immediate_data_miss_value_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mau_action_instruction_adr_tcam_shiftcount_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mau_action_instruction_adr_miss_value_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mau_actiondata_adr_tcam_shiftcount_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mau_actiondata_adr_miss_value_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mau_stats_adr_tcam_shiftcount_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mau_stats_adr_miss_value_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mau_meter_adr_tcam_shiftcount_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mau_meter_adr_miss_value_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mau_idletime_adr_tcam_shiftcount_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += mau_idletime_adr_miss_value_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<12;++a0) {
      r += col_[a0].to_string(print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< std::array< MauHashGroupXbarCtlMutable, 2 >, 6 > mau_hash_group_xbar_ctl_;
  std::array< MprGlobExecLutMutable, 16 > mpr_glob_exec_lut_;
  std::array< std::array< StashHitmapOutputMapMutable, 8 >, 2 > stash_hitmap_output_map_;
  std::array< std::array< StashNextTableLutMutable, 8 >, 2 > stash_next_table_lut_;
  std::array< std::array< StashRowNxtableBusDriveMutable, 8 >, 2 > stash_row_nxtable_bus_drive_;
  std::array< GatewayToLogicaltableXbarCtlMutable, 16 > gateway_to_logicaltable_xbar_ctl_;
  std::array< GatewayInhibitLutMutable, 16 > gateway_inhibit_lut_;
  std::array< GatewayToPbusXbarCtlMutable, 16 > gateway_to_pbus_xbar_ctl_;
  std::array< ExitGatewayCtlMutable, 16 > exit_gateway_ctl_;
  std::array< TindBusPropMutable, 16 > tind_bus_prop_;
  std::array< MauSnapshotPhysicalTcamHitAddressMutable, 16 > mau_snapshot_physical_tcam_hit_address_;
  std::array< MauSnapshotPhysicalExactMatchHitAddressMutable, 16 > mau_snapshot_physical_exact_match_hit_address_;
  std::array< std::array< MauTableCounterMutable, 1 >, 16 > mau_table_counter_;
  MauTableCounterClearMutable mau_table_counter_clear_;
  MauStatefulLogCounterClearMutable mau_stateful_log_counter_clear_;
  ActiondataErrorCtlMutable actiondata_error_ctl_;
  ImemParityErrorCtlMutable imem_parity_error_ctl_;
  std::array< TcamHitToLogicalTableIxbarOutputmapMutable, 8 > tcam_hit_to_logical_table_ixbar_outputmap_;
  std::array< MauHashGroupMaskMutable, 6 > mau_hash_group_mask_;
  std::array< MprLongBrchLutMutable, 8 > mpr_long_brch_lut_;
  std::array< GatewayPayloadTindPbusMutable, 8 > gateway_payload_tind_pbus_;
  std::array< GatewayPayloadExactPbusMutable, 8 > gateway_payload_exact_pbus_;
  std::array< GatewayPayloadExactDisableMutable, 8 > gateway_payload_exact_disable_;
  std::array< GatewayPayloadTindDisableMutable, 8 > gateway_payload_tind_disable_;
  std::array< TcamTablePropMutable, 8 > tcam_table_prop_;
  std::array< std::array< MauStatefulLogCounterMutable, 2 >, 4 > mau_stateful_log_counter_;
  std::array< std::array< std::array< MauStatefulLogCtlIxbarMapMutable, 2 >, 2 >, 2 > mau_stateful_log_ctl_ixbar_map_;
  std::array< ExactMatchDelayThreadMutable, 3 > exact_match_delay_thread_;
  std::array< LogicalTableThreadMutable, 3 > logical_table_thread_;
  std::array< PredGlobExecThreadMutable, 3 > pred_glob_exec_thread_;
  std::array< PredLongBrchThreadMutable, 3 > pred_long_brch_thread_;
  std::array< PredAlwaysRunMutable, 3 > pred_always_run_;
  std::array< MauMapramColorMapToLogicalCtlMutable, 4 > mau_mapram_color_map_to_logical_ctl_;
  std::array< std::array< MauPhysicalToMeterAluIcxbarMapMutable, 2 >, 2 > mau_physical_to_meter_alu_icxbar_map_;
  std::array< MauMeterPrecolorHashMapToLogicalCtlMutable, 4 > mau_meter_precolor_hash_map_to_logical_ctl_;
  std::array< MauSelectorActionEntrySizeMutable, 4 > mau_selector_action_entry_size_;
  std::array< SelectorActionAdrShiftMutable, 4 > selector_action_adr_shift_;
  std::array< MprStageIdMutable, 3 > mpr_stage_id_;
  std::array< MauSnapshotNextTableOutMutable, 3 > mau_snapshot_next_table_out_;
  std::array< MauSnapshotMprNextTableOutMutable, 3 > mau_snapshot_mpr_next_table_out_;
  std::array< std::array< MauStatefulLogCounterCtlMutable, 2 >, 2 > mau_stateful_log_counter_ctl_;
  std::array< MauStatefulLogCounterCtl2Mutable, 4 > mau_stateful_log_counter_ctl2_;
  std::array< MauStatefulLogCounterCtl3Mutable, 4 > mau_stateful_log_counter_ctl3_;
  std::array< MauStatefulLogFifoLevelMutable, 4 > mau_stateful_log_fifo_level_;
  std::array< MauStatefulLogWatermarkThresholdMutable, 4 > mau_stateful_log_watermark_threshold_;
  std::array< MauStatefulLogCurWatermarkMutable, 4 > mau_stateful_log_cur_watermark_;
  std::array< MeterAluThreadMutable, 2 > meter_alu_thread_;
  std::array< ExactMatchPhysResultDelayMutable, 2 > exact_match_phys_result_delay_;
  std::array< ExactMatchPhysResultEnMutable, 2 > exact_match_phys_result_en_;
  std::array< ExactMatchPhysResultThreadMutable, 2 > exact_match_phys_result_thread_;
  std::array< MauActionInstructionAdrMapEnMutable, 2 > mau_action_instruction_adr_map_en_;
  std::array< MauActionInstructionAdrModeMutable, 2 > mau_action_instruction_adr_mode_;
  std::array< MauHashGroupExpandMutable, 2 > mau_hash_group_expand_;
  std::array< MeterGroupTableVpnModEnableMutable, 2 > meter_group_table_vpn_mod_enable_;
  std::array< MauMeterAluToLogicalMapMutable, 2 > mau_meter_alu_to_logical_map_;
  std::array< MauLogicalToMeterAluMapMutable, 2 > mau_logical_to_meter_alu_map_;
  std::array< ActionAdrVpnModEnableMutable, 2 > action_adr_vpn_mod_enable_;
  std::array< PredicationCtlMutable, 2 > predication_ctl_;
  std::array< MprThreadDelayMutable, 2 > mpr_thread_delay_;
  std::array< GatewayPayloadExactShiftOvrMutable, 2 > gateway_payload_exact_shift_ovr_;
  std::array< MauSnapshotTableActiveMutable, 2 > mau_snapshot_table_active_;
  std::array< MauSnapshotCaptureDatapathErrorMutable, 2 > mau_snapshot_capture_datapath_error_;
  std::array< MauSnapshotGlobalExecOutMutable, 2 > mau_snapshot_global_exec_out_;
  std::array< MauSnapshotLongBranchOutMutable, 2 > mau_snapshot_long_branch_out_;
  std::array< MauSnapshotMprGlobalExecOutMutable, 2 > mau_snapshot_mpr_global_exec_out_;
  std::array< MauSnapshotMprLongBranchOutMutable, 2 > mau_snapshot_mpr_long_branch_out_;
  std::array< MauTableCounterCtlMutable, 2 > mau_table_counter_ctl_;
  std::array< TcamMatchErrorCtlMutable, 2 > tcam_match_error_ctl_;
  std::array< TindEccErrorCtlMutable, 2 > tind_ecc_error_ctl_;
  std::array< GfmParityErrorCtlMutable, 2 > gfm_parity_error_ctl_;
  std::array< EmmEccErrorCtlMutable, 2 > emm_ecc_error_ctl_;
  std::array< PrevErrorCtlMutable, 2 > prev_error_ctl_;
  std::array< ErrIdataOvrFifoCtlMutable, 2 > err_idata_ovr_fifo_ctl_;
  std::array< ErrIdataOvrCtlMutable, 2 > err_idata_ovr_ctl_;
  std::array< OErrorFifoCtlMutable, 2 > o_error_fifo_ctl_;
  std::array< S2pStatsErrorCtlMutable, 2 > s2p_stats_error_ctl_;
  std::array< S2pMeterErrorCtlMutable, 2 > s2p_meter_error_ctl_;
  ExactMatchLogicalResultDelayMutable exact_match_logical_result_delay_;
  ExactMatchLogicalResultEnMutable exact_match_logical_result_en_;
  NextTableMapEnMutable next_table_map_en_;
  NextTableMapEnGatewayMutable next_table_map_en_gateway_;
  NextTableTcamActionbitMapEnMutable next_table_tcam_actionbit_map_en_;
  PredLongBrchTerminateMutable pred_long_brch_terminate_;
  PredIsABrchMutable pred_is_a_brch_;
  PredGhostThreadMutable pred_ghost_thread_;
  PredStageIdMutable pred_stage_id_;
  MauImmediateDataTcamActionbitMapEnMutable mau_immediate_data_tcam_actionbit_map_en_;
  MauActionInstructionAdrTcamActionbitMapEnMutable mau_action_instruction_adr_tcam_actionbit_map_en_;
  MauActiondataAdrTcamActionbitMapEnMutable mau_actiondata_adr_tcam_actionbit_map_en_;
  std::array< std::array< PredMapLocaMutable, 8 >, 16 > pred_map_loca_;
  std::array< std::array< PredMapGlobMutable, 8 >, 16 > pred_map_glob_;
  std::array< std::array< MauImmediateDataExactShiftcountMutable, 5 >, 16 > mau_immediate_data_exact_shiftcount_;
  std::array< std::array< MauActionInstructionAdrExactShiftcountMutable, 5 >, 16 > mau_action_instruction_adr_exact_shiftcount_;
  std::array< std::array< MauActiondataAdrExactShiftcountMutable, 5 >, 16 > mau_actiondata_adr_exact_shiftcount_;
  std::array< std::array< MauStatsAdrExactShiftcountMutable, 5 >, 16 > mau_stats_adr_exact_shiftcount_;
  std::array< std::array< MauMeterAdrExactShiftcountMutable, 5 >, 16 > mau_meter_adr_exact_shiftcount_;
  std::array< std::array< MauIdletimeAdrExactShiftcountMutable, 5 >, 16 > mau_idletime_adr_exact_shiftcount_;
  std::array< std::array< GatewayNextTableLutMutable, 5 >, 16 > gateway_next_table_lut_;
  std::array< std::array< MatchToLogicalTableIxbarOutputmapMutable, 16 >, 4 > match_to_logical_table_ixbar_outputmap_;
  std::array< std::array< std::array< MauActionInstructionAdrMapDataMutable, 2 >, 16 >, 2 > mau_action_instruction_adr_map_data_;
  std::array< std::array< MprNextTableLutMutable, 16 >, 3 > mpr_next_table_lut_;
  std::array< std::array< std::array< std::array< GatewayPayloadDataMutable, 2 >, 2 >, 2 >, 8 > gateway_payload_data_;
  MauStatsAdrTcamActionbitMapEnMutable mau_stats_adr_tcam_actionbit_map_en_;
  MauMeterAdrTcamActionbitMapEnMutable mau_meter_adr_tcam_actionbit_map_en_;
  MauMatchCentralMapramReadColorOfloCtlMutable mau_match_central_mapram_read_color_oflo_ctl_;
  MauIdletimeAdrTcamActionbitMapEnMutable mau_idletime_adr_tcam_actionbit_map_en_;
  MauSelectorHashSpsEnableMutable mau_selector_hash_sps_enable_;
  MauHashGroupConfigMutable mau_hash_group_config_;
  MauHashGroupShiftcountMutable mau_hash_group_shiftcount_;
  MeterGroupTableVpnMaxMutable meter_group_table_vpn_max_;
  MauMeterPrecolorHashSelMutable mau_meter_precolor_hash_sel_;
  MprBusDepMutable mpr_bus_dep_;
  MprGlobExecThreadMutable mpr_glob_exec_thread_;
  MprLongBrchThreadMutable mpr_long_brch_thread_;
  MprAlwaysRunMutable mpr_always_run_;
  GatewayEnMutable gateway_en_;
  MauSnapshotLogicalTableHitMutable mau_snapshot_logical_table_hit_;
  MauSnapshotGatewayTableInhibitLogicalMutable mau_snapshot_gateway_table_inhibit_logical_;
  std::array< std::array< MauPayloadShifterEnableMutable, 16 >, 2 > mau_payload_shifter_enable_;
  std::array< std::array< MauImmediateDataMaskMutable, 16 >, 2 > mau_immediate_data_mask_;
  std::array< std::array< MauImmediateDataDefaultMutable, 16 >, 2 > mau_immediate_data_default_;
  std::array< std::array< MauImmediateDataTcamActionbitMapDataMutable, 2 >, 16 > mau_immediate_data_tcam_actionbit_map_data_;
  std::array< std::array< MauActionInstructionAdrMaskMutable, 16 >, 2 > mau_action_instruction_adr_mask_;
  std::array< std::array< MauActionInstructionAdrDefaultMutable, 16 >, 2 > mau_action_instruction_adr_default_;
  std::array< std::array< MauActionInstructionAdrPerEntryEnMuxCtlMutable, 16 >, 2 > mau_action_instruction_adr_per_entry_en_mux_ctl_;
  std::array< std::array< MauActiondataAdrVpnShiftcountMutable, 16 >, 2 > mau_actiondata_adr_vpn_shiftcount_;
  std::array< std::array< MauActiondataAdrMaskMutable, 16 >, 2 > mau_actiondata_adr_mask_;
  std::array< std::array< MauActiondataAdrDefaultMutable, 16 >, 2 > mau_actiondata_adr_default_;
  std::array< std::array< MauActiondataAdrPerEntryEnMuxCtlMutable, 16 >, 2 > mau_actiondata_adr_per_entry_en_mux_ctl_;
  std::array< std::array< MauActiondataAdrTcamActionbitMapDataMutable, 2 >, 16 > mau_actiondata_adr_tcam_actionbit_map_data_;
  std::array< std::array< MauStatsAdrMaskMutable, 16 >, 2 > mau_stats_adr_mask_;
  std::array< std::array< MauStatsAdrDefaultMutable, 16 >, 2 > mau_stats_adr_default_;
  std::array< std::array< MauStatsAdrPerEntryEnMuxCtlMutable, 16 >, 2 > mau_stats_adr_per_entry_en_mux_ctl_;
  std::array< std::array< MauStatsAdrHoleSwizzleModeMutable, 16 >, 2 > mau_stats_adr_hole_swizzle_mode_;
  std::array< std::array< MauStatsAdrTcamActionbitMapDataMutable, 2 >, 16 > mau_stats_adr_tcam_actionbit_map_data_;
  std::array< std::array< MauMeterAdrMaskMutable, 16 >, 2 > mau_meter_adr_mask_;
  std::array< std::array< MauMeterAdrDefaultMutable, 16 >, 2 > mau_meter_adr_default_;
  std::array< std::array< MauMeterAdrPerEntryEnMuxCtlMutable, 16 >, 2 > mau_meter_adr_per_entry_en_mux_ctl_;
  std::array< std::array< MauMeterAdrTcamActionbitMapDataMutable, 2 >, 16 > mau_meter_adr_tcam_actionbit_map_data_;
  std::array< std::array< MauIdletimeAdrMaskMutable, 16 >, 2 > mau_idletime_adr_mask_;
  std::array< std::array< MauIdletimeAdrDefaultMutable, 16 >, 2 > mau_idletime_adr_default_;
  std::array< std::array< MauIdletimeAdrTcamActionbitMapDataMutable, 2 >, 16 > mau_idletime_adr_tcam_actionbit_map_data_;
  std::array< std::array< MauIdletimeAdrPerEntryEnMuxCtlMutable, 16 >, 2 > mau_idletime_adr_per_entry_en_mux_ctl_;
  std::array< std::array< MauSelectorlengthShiftcountMutable, 16 >, 2 > mau_selectorlength_shiftcount_;
  std::array< std::array< MauSelectorlengthMaskMutable, 16 >, 2 > mau_selectorlength_mask_;
  std::array< std::array< MauSelectorlengthDefaultMutable, 16 >, 2 > mau_selectorlength_default_;
  std::array< std::array< MauMeterAdrTypePositionMutable, 16 >, 2 > mau_meter_adr_type_position_;
  std::array< std::array< std::array< GatewayPayloadMatchAdrMutable, 2 >, 2 >, 8 > gateway_payload_match_adr_;
  std::array< TcamMatchAdrToPhysicalOxbarOutputmapMutable, 16 > tcam_match_adr_to_physical_oxbar_outputmap_;
  std::array< TindRamDataSizeMutable, 16 > tind_ram_data_size_;
  std::array< NextTableFormatDataMutable, 16 > next_table_format_data_;
  std::array< PredMissExecMutable, 16 > pred_miss_exec_;
  std::array< PredMissLongBrchMutable, 16 > pred_miss_long_brch_;
  std::array< PredLongBrchLtSrcMutable, 16 > pred_long_brch_lt_src_;
  std::array< MauImmediateDataTcamShiftcountMutable, 16 > mau_immediate_data_tcam_shiftcount_;
  std::array< MauImmediateDataMissValueMutable, 16 > mau_immediate_data_miss_value_;
  std::array< MauActionInstructionAdrTcamShiftcountMutable, 16 > mau_action_instruction_adr_tcam_shiftcount_;
  std::array< MauActionInstructionAdrMissValueMutable, 16 > mau_action_instruction_adr_miss_value_;
  std::array< MauActiondataAdrTcamShiftcountMutable, 16 > mau_actiondata_adr_tcam_shiftcount_;
  std::array< MauActiondataAdrMissValueMutable, 16 > mau_actiondata_adr_miss_value_;
  std::array< MauStatsAdrTcamShiftcountMutable, 16 > mau_stats_adr_tcam_shiftcount_;
  std::array< MauStatsAdrMissValueMutable, 16 > mau_stats_adr_miss_value_;
  std::array< MauMeterAdrTcamShiftcountMutable, 16 > mau_meter_adr_tcam_shiftcount_;
  std::array< MauMeterAdrMissValueMutable, 16 > mau_meter_adr_miss_value_;
  std::array< MauIdletimeAdrTcamShiftcountMutable, 16 > mau_idletime_adr_tcam_shiftcount_;
  std::array< MauIdletimeAdrMissValueMutable, 16 > mau_idletime_adr_miss_value_;
  std::array< MauMatchMergeColAddrmapMutable, 12 > col_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to rams
    offset += 0x18000; // to get to match
    offset += 0x4000; // to get to merge
    return offset;
  }

};















  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MAU_MATCH_MERGE_ADDRMAP_MUTABLE_H__
