/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_STATEFUL_ALU_ADDRMAP_MUTABLE_H__
#define __REGISTER_INCLUDES_MAU_STATEFUL_ALU_ADDRMAP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "mau_diag_meter_alu_group_mutable.h"
#include "salu_const_regfile_msbs_mutable.h"
#include "salu_const_regfile_mutable.h"
#include "salu_instr2_state_alu_mutable.h"
#include "salu_instr_cmp_alu_mutable.h"
#include "salu_instr_common_mutable.h"
#include "salu_instr_output_alu_mutable.h"
#include "salu_instr_state_alu_mutable.h"
#include "salu_instr_tmatch_alu_mutable.h"
#include "salu_mathtable_mutable.h"
#include "salu_mathunit_ctl_mutable.h"
#include "stateful_clear_action_output_mutable.h"
#include "stateful_ctl_mutable.h"
#include "stateful_pred_intr_mutable.h"
#include "tmatch_mask_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class MauStatefulAluAddrmapMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauStatefulAluAddrmapMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_meter_alu_group_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_meter_alu_group_addrmap), 512, true, write_callback, read_callback, std::string("MauStatefulAluAddrmapMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_meter_alu_group_addrmap))
    {
    }
  MauStatefulAluAddrmapMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MauStatefulAluAddrmapMutable")
    {
    }
public:






  MauDiagMeterAluGroupMutable &mau_diag_meter_alu_group() { return mau_diag_meter_alu_group_; }






  StatefulClearActionOutputMutable &stateful_clear_action_output() { return stateful_clear_action_output_; }











  SaluConstRegfileMutable &salu_const_regfile(int j0) { return salu_const_regfile_[j0]; }








  SaluConstRegfileMsbsMutable &salu_const_regfile_msbs(int j0) { return salu_const_regfile_msbs_[j0]; }










  SaluMathtableMutable &salu_mathtable(int j0) { return salu_mathtable_[j0]; }








  SaluInstrCommonMutable &salu_instr_common(int j0) { return salu_instr_common_[j0]; }











  TmatchMaskMutable &tmatch_mask(int j1,int j0) { return tmatch_mask_[j1][j0]; }













  SaluInstrStateAluMutable &salu_instr_state_alu(int j1,int j0) { return salu_instr_state_alu_[j1][j0]; }













  SaluInstr2StateAluMutable &salu_instr2_state_alu(int j1,int j0) { return salu_instr2_state_alu_[j1][j0]; }









  SaluInstrCmpAluMutable &salu_instr_cmp_alu(int j1,int j0) { return salu_instr_cmp_alu_[j1][j0]; }









  SaluInstrOutputAluMutable &salu_instr_output_alu(int j1,int j0) { return salu_instr_output_alu_[j1][j0]; }





  StatefulPredIntrMutable &stateful_pred_intr() { return stateful_pred_intr_; }





  SaluMathunitCtlMutable &salu_mathunit_ctl() { return salu_mathunit_ctl_; }





  StatefulCtlMutable &stateful_ctl() { return stateful_ctl_; }









  SaluInstrTmatchAluMutable &salu_instr_tmatch_alu(int j1,int j0) { return salu_instr_tmatch_alu_[j1][j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      mau_diag_meter_alu_group_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      stateful_clear_action_output_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x20) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      salu_const_regfile_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      salu_const_regfile_msbs_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      salu_mathtable_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x90) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      salu_instr_common_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tmatch_mask_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0x100) {
      offset -= 0xc0;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      salu_instr_state_alu_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x140) {
      offset -= 0x100;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      salu_instr2_state_alu_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x180) {
      offset -= 0x140;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      salu_instr_cmp_alu_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x1c0) {
      offset -= 0x180;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      salu_instr_output_alu_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      if (read_callback_) read_callback_();
      stateful_pred_intr_.read( offset, data );
    }
    else if (offset >= 0x1c8 && offset < 0x1cc) {
      offset -= 0x1c8;
      if (read_callback_) read_callback_();
      salu_mathunit_ctl_.read( offset, data );
    }
    else if (offset >= 0x1cc && offset < 0x1d0) {
      offset -= 0x1cc;
      if (read_callback_) read_callback_();
      stateful_ctl_.read( offset, data );
    }
    else if (offset >= 0x1e0 && offset < 0x200) {
      offset -= 0x1e0;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      salu_instr_tmatch_alu_[ i1 ][ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      mau_diag_meter_alu_group_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      stateful_clear_action_output_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x20) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      salu_const_regfile_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      salu_const_regfile_msbs_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      salu_mathtable_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x90) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      salu_instr_common_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tmatch_mask_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0x100) {
      offset -= 0xc0;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      salu_instr_state_alu_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x140) {
      offset -= 0x100;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      salu_instr2_state_alu_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x180) {
      offset -= 0x140;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      salu_instr_cmp_alu_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x1c0) {
      offset -= 0x180;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      salu_instr_output_alu_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      stateful_pred_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c8 && offset < 0x1cc) {
      offset -= 0x1c8;
      salu_mathunit_ctl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1cc && offset < 0x1d0) {
      offset -= 0x1cc;
      stateful_ctl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e0 && offset < 0x200) {
      offset -= 0x1e0;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      salu_instr_tmatch_alu_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    mau_diag_meter_alu_group_.reset();
    stateful_clear_action_output_.reset();
    for (auto &f0 : salu_const_regfile_) {
      f0.reset();
    }
    for (auto &f0 : salu_const_regfile_msbs_) {
      f0.reset();
    }
    for (auto &f0 : salu_mathtable_) {
      f0.reset();
    }
    for (auto &f0 : salu_instr_common_) {
      f0.reset();
    }
    for (auto &f0 : tmatch_mask_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : salu_instr_state_alu_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : salu_instr2_state_alu_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : salu_instr_cmp_alu_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : salu_instr_output_alu_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    stateful_pred_intr_.reset();
    salu_mathunit_ctl_.reset();
    stateful_ctl_.reset();
    for (auto &f0 : salu_instr_tmatch_alu_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += mau_diag_meter_alu_group_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += stateful_clear_action_output_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x20) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += salu_const_regfile_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += salu_const_regfile_msbs_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += salu_mathtable_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x90) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += salu_instr_common_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tmatch_mask_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0x100) {
      offset -= 0xc0;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += salu_instr_state_alu_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x140) {
      offset -= 0x100;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += salu_instr2_state_alu_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x180) {
      offset -= 0x140;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += salu_instr_cmp_alu_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x1c0) {
      offset -= 0x180;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += salu_instr_output_alu_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      r += stateful_pred_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c8 && offset < 0x1cc) {
      offset -= 0x1c8;
      r += salu_mathunit_ctl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1cc && offset < 0x1d0) {
      offset -= 0x1cc;
      r += stateful_ctl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e0 && offset < 0x200) {
      offset -= 0x1e0;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += salu_instr_tmatch_alu_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += mau_diag_meter_alu_group_.to_string(print_zeros,indent_string) ;
    r += stateful_clear_action_output_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += salu_const_regfile_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += salu_const_regfile_msbs_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += salu_mathtable_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += salu_instr_common_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += tmatch_mask_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<4;++a1) {
      for (uint32_t a0=0;a0<4;++a0) {
        r += salu_instr_state_alu_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<4;++a1) {
      for (uint32_t a0=0;a0<4;++a0) {
        r += salu_instr2_state_alu_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<4;++a1) {
      for (uint32_t a0=0;a0<4;++a0) {
        r += salu_instr_cmp_alu_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<4;++a1) {
      for (uint32_t a0=0;a0<4;++a0) {
        r += salu_instr_output_alu_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    r += stateful_pred_intr_.to_string(print_zeros,indent_string) ;
    r += salu_mathunit_ctl_.to_string(print_zeros,indent_string) ;
    r += stateful_ctl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a1=0;a1<4;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += salu_instr_tmatch_alu_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  MauDiagMeterAluGroupMutable mau_diag_meter_alu_group_;
  StatefulClearActionOutputMutable stateful_clear_action_output_;
  std::array< SaluConstRegfileMutable, 4 > salu_const_regfile_;
  std::array< SaluConstRegfileMsbsMutable, 4 > salu_const_regfile_msbs_;
  std::array< SaluMathtableMutable, 4 > salu_mathtable_;
  std::array< SaluInstrCommonMutable, 4 > salu_instr_common_;
  std::array< std::array< TmatchMaskMutable, 2 >, 2 > tmatch_mask_;
  std::array< std::array< SaluInstrStateAluMutable, 4 >, 4 > salu_instr_state_alu_;
  std::array< std::array< SaluInstr2StateAluMutable, 4 >, 4 > salu_instr2_state_alu_;
  std::array< std::array< SaluInstrCmpAluMutable, 4 >, 4 > salu_instr_cmp_alu_;
  std::array< std::array< SaluInstrOutputAluMutable, 4 >, 4 > salu_instr_output_alu_;
  StatefulPredIntrMutable stateful_pred_intr_;
  SaluMathunitCtlMutable salu_mathunit_ctl_;
  StatefulCtlMutable stateful_ctl_;
  std::array< std::array< SaluInstrTmatchAluMutable, 2 >, 4 > salu_instr_tmatch_alu_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_meter_alu_group_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to rams
    offset += 0x10000; // to get to map_alu
    offset += 0x3000; // to get to meter_group
    assert(index_mau_meter_alu_group_addrmap < 4);
    offset += index_mau_meter_alu_group_addrmap * 0x400; // mau_meter_alu_group_addrmap[]
    offset += 0x200; // to get to stateful
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MAU_STATEFUL_ALU_ADDRMAP_MUTABLE_H__
