/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_TCAM_ARRAY_ADDRMAP_MUTABLE_H__
#define __REGISTER_INCLUDES_MAU_TCAM_ARRAY_ADDRMAP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "atomic_mod_tcam_go_mutable.h"
#include "intr_enable0_mau_tcam_array_mutable.h"
#include "intr_enable1_mau_tcam_array_mutable.h"
#include "intr_freeze_enable_mau_tcam_array_mutable.h"
#include "intr_inject_mau_tcam_array_mutable.h"
#include "intr_status_mau_tcam_array_mutable.h"
#include "mau_diag_tcam_clk_en_mutable.h"
#include "mau_tcam_column_addrmap_mutable.h"
#include "mau_tcam_row_vh_xbar_array_addrmap_mutable.h"
#include "tcam_error_detect_enable_mutable.h"
#include "tcam_logical_channel_errlog_hi_mutable.h"
#include "tcam_logical_channel_errlog_lo_mutable.h"
#include "tcam_match_adr_shift_mutable.h"
#include "tcam_output_table_thread_mutable.h"
#include "tcam_parity_control_mutable.h"
#include "tcam_piped_mutable.h"
#include "tcam_sbe_errlog_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class MauTcamArrayAddrmapMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauTcamArrayAddrmapMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap), 2048, true, write_callback, read_callback, std::string("MauTcamArrayAddrmapMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap))
    {
    }
  MauTcamArrayAddrmapMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MauTcamArrayAddrmapMutable")
    {
    }
public:








  TcamSbeErrlogMutable &tcam_sbe_errlog(int j0) { return tcam_sbe_errlog_[j0]; }






  MauDiagTcamClkEnMutable &mau_diag_tcam_clk_en() { return mau_diag_tcam_clk_en_; }






  IntrStatusMauTcamArrayMutable &intr_status_mau_tcam_array() { return intr_status_mau_tcam_array_; }






  IntrEnable0MauTcamArrayMutable &intr_enable0_mau_tcam_array() { return intr_enable0_mau_tcam_array_; }






  IntrEnable1MauTcamArrayMutable &intr_enable1_mau_tcam_array() { return intr_enable1_mau_tcam_array_; }














  TcamMatchAdrShiftMutable &tcam_match_adr_shift(int j0) { return tcam_match_adr_shift_[j0]; }












  TcamOutputTableThreadMutable &tcam_output_table_thread(int j0) { return tcam_output_table_thread_[j0]; }







  IntrInjectMauTcamArrayMutable &intr_inject_mau_tcam_array() { return intr_inject_mau_tcam_array_; }





  IntrFreezeEnableMauTcamArrayMutable &intr_freeze_enable_mau_tcam_array() { return intr_freeze_enable_mau_tcam_array_; }








  TcamLogicalChannelErrlogLoMutable &tcam_logical_channel_errlog_lo(int j0) { return tcam_logical_channel_errlog_lo_[j0]; }








  TcamLogicalChannelErrlogHiMutable &tcam_logical_channel_errlog_hi(int j0) { return tcam_logical_channel_errlog_hi_[j0]; }









  AtomicModTcamGoMutable &atomic_mod_tcam_go() { return atomic_mod_tcam_go_; }










  TcamPipedMutable &tcam_piped() { return tcam_piped_; }
















  TcamErrorDetectEnableMutable &tcam_error_detect_enable() { return tcam_error_detect_enable_; }








  TcamParityControlMutable &tcam_parity_control(int j0) { return tcam_parity_control_[j0]; }





  MauTcamRowVhXbarArrayAddrmapMutable &vh_data_xbar() { return vh_data_xbar_; }







  MauTcamColumnAddrmapMutable &col(int j0) { return col_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x600 && offset < 0x630) {
      offset -= 0x600;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tcam_sbe_errlog_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x640 && offset < 0x644) {
      offset -= 0x640;
      if (read_callback_) read_callback_();
      mau_diag_tcam_clk_en_.read( offset, data );
    }
    else if (offset >= 0x644 && offset < 0x648) {
      offset -= 0x644;
      if (read_callback_) read_callback_();
      intr_status_mau_tcam_array_.read( offset, data );
    }
    else if (offset >= 0x648 && offset < 0x64c) {
      offset -= 0x648;
      if (read_callback_) read_callback_();
      intr_enable0_mau_tcam_array_.read( offset, data );
    }
    else if (offset >= 0x64c && offset < 0x650) {
      offset -= 0x64c;
      if (read_callback_) read_callback_();
      intr_enable1_mau_tcam_array_.read( offset, data );
    }
    else if (offset >= 0x660 && offset < 0x680) {
      offset -= 0x660;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tcam_match_adr_shift_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x700 && offset < 0x720) {
      offset -= 0x700;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tcam_output_table_thread_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x720 && offset < 0x724) {
      offset -= 0x720;
      if (read_callback_) read_callback_();
      intr_inject_mau_tcam_array_.read( offset, data );
    }
    else if (offset >= 0x724 && offset < 0x728) {
      offset -= 0x724;
      if (read_callback_) read_callback_();
      intr_freeze_enable_mau_tcam_array_.read( offset, data );
    }
    else if (offset >= 0x730 && offset < 0x740) {
      offset -= 0x730;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tcam_logical_channel_errlog_lo_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x780 && offset < 0x790) {
      offset -= 0x780;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tcam_logical_channel_errlog_hi_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x790 && offset < 0x794) {
      offset -= 0x790;
      if (read_callback_) read_callback_();
      atomic_mod_tcam_go_.read( offset, data );
    }
    else if (offset >= 0x798 && offset < 0x79c) {
      offset -= 0x798;
      if (read_callback_) read_callback_();
      tcam_piped_.read( offset, data );
    }
    else if (offset >= 0x79c && offset < 0x7a0) {
      offset -= 0x79c;
      if (read_callback_) read_callback_();
      tcam_error_detect_enable_.read( offset, data );
    }
    else if (offset >= 0x7c0 && offset < 0x7f0) {
      offset -= 0x7c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tcam_parity_control_[ i0 ].read( offset, data );
    }
    else if (offset < 0x400) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      vh_data_xbar_.read( offset, data );
    }
    else if (offset >= 0x400 && offset < 0x600) {
      offset -= 0x400;
      int i0 = offset / 0x100;
      offset  -= i0 * 0x100;
      if (read_callback_) read_callback_();
      col_[ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x600 && offset < 0x630) {
      offset -= 0x600;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tcam_sbe_errlog_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x640 && offset < 0x644) {
      offset -= 0x640;
      mau_diag_tcam_clk_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x644 && offset < 0x648) {
      offset -= 0x644;
      intr_status_mau_tcam_array_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x648 && offset < 0x64c) {
      offset -= 0x648;
      intr_enable0_mau_tcam_array_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x64c && offset < 0x650) {
      offset -= 0x64c;
      intr_enable1_mau_tcam_array_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x660 && offset < 0x680) {
      offset -= 0x660;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tcam_match_adr_shift_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x700 && offset < 0x720) {
      offset -= 0x700;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tcam_output_table_thread_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x720 && offset < 0x724) {
      offset -= 0x720;
      intr_inject_mau_tcam_array_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x724 && offset < 0x728) {
      offset -= 0x724;
      intr_freeze_enable_mau_tcam_array_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x730 && offset < 0x740) {
      offset -= 0x730;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tcam_logical_channel_errlog_lo_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x780 && offset < 0x790) {
      offset -= 0x780;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tcam_logical_channel_errlog_hi_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x790 && offset < 0x794) {
      offset -= 0x790;
      atomic_mod_tcam_go_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x798 && offset < 0x79c) {
      offset -= 0x798;
      tcam_piped_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x79c && offset < 0x7a0) {
      offset -= 0x79c;
      tcam_error_detect_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7c0 && offset < 0x7f0) {
      offset -= 0x7c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tcam_parity_control_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset < 0x400) {
      offset -= 0x0;
      vh_data_xbar_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400 && offset < 0x600) {
      offset -= 0x400;
      int i0 = offset / 0x100;
      offset  -= i0 * 0x100;
      col_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : tcam_sbe_errlog_) {
      f0.reset();
    }
    mau_diag_tcam_clk_en_.reset();
    intr_status_mau_tcam_array_.reset();
    intr_enable0_mau_tcam_array_.reset();
    intr_enable1_mau_tcam_array_.reset();
    for (auto &f0 : tcam_match_adr_shift_) {
      f0.reset();
    }
    for (auto &f0 : tcam_output_table_thread_) {
      f0.reset();
    }
    intr_inject_mau_tcam_array_.reset();
    intr_freeze_enable_mau_tcam_array_.reset();
    for (auto &f0 : tcam_logical_channel_errlog_lo_) {
      f0.reset();
    }
    for (auto &f0 : tcam_logical_channel_errlog_hi_) {
      f0.reset();
    }
    atomic_mod_tcam_go_.reset();
    tcam_piped_.reset();
    tcam_error_detect_enable_.reset();
    for (auto &f0 : tcam_parity_control_) {
      f0.reset();
    }
    vh_data_xbar_.reset();
    for (auto &f0 : col_) {
      f0.reset();
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x600 && offset < 0x630) {
      offset -= 0x600;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tcam_sbe_errlog_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x640 && offset < 0x644) {
      offset -= 0x640;
      r += mau_diag_tcam_clk_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x644 && offset < 0x648) {
      offset -= 0x644;
      r += intr_status_mau_tcam_array_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x648 && offset < 0x64c) {
      offset -= 0x648;
      r += intr_enable0_mau_tcam_array_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x64c && offset < 0x650) {
      offset -= 0x64c;
      r += intr_enable1_mau_tcam_array_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x660 && offset < 0x680) {
      offset -= 0x660;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tcam_match_adr_shift_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x700 && offset < 0x720) {
      offset -= 0x700;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tcam_output_table_thread_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x720 && offset < 0x724) {
      offset -= 0x720;
      r += intr_inject_mau_tcam_array_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x724 && offset < 0x728) {
      offset -= 0x724;
      r += intr_freeze_enable_mau_tcam_array_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x730 && offset < 0x740) {
      offset -= 0x730;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tcam_logical_channel_errlog_lo_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x780 && offset < 0x790) {
      offset -= 0x780;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tcam_logical_channel_errlog_hi_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x790 && offset < 0x794) {
      offset -= 0x790;
      r += atomic_mod_tcam_go_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x798 && offset < 0x79c) {
      offset -= 0x798;
      r += tcam_piped_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x79c && offset < 0x7a0) {
      offset -= 0x79c;
      r += tcam_error_detect_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7c0 && offset < 0x7f0) {
      offset -= 0x7c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tcam_parity_control_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset < 0x400) {
      offset -= 0x0;
      r += vh_data_xbar_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400 && offset < 0x600) {
      offset -= 0x400;
      int i0 = offset / 0x100;
      offset  -= i0 * 0x100;
      r += col_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<12;++a0) {
      r += tcam_sbe_errlog_[a0].to_string(print_zeros,indent_string) ;
    }
    r += mau_diag_tcam_clk_en_.to_string(print_zeros,indent_string) ;
    r += intr_status_mau_tcam_array_.to_string(print_zeros,indent_string) ;
    r += intr_enable0_mau_tcam_array_.to_string(print_zeros,indent_string) ;
    r += intr_enable1_mau_tcam_array_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<8;++a0) {
      r += tcam_match_adr_shift_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += tcam_output_table_thread_[a0].to_string(print_zeros,indent_string) ;
    }
    r += intr_inject_mau_tcam_array_.to_string(print_zeros,indent_string) ;
    r += intr_freeze_enable_mau_tcam_array_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += tcam_logical_channel_errlog_lo_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += tcam_logical_channel_errlog_hi_[a0].to_string(print_zeros,indent_string) ;
    }
    r += atomic_mod_tcam_go_.to_string(print_zeros,indent_string) ;
    r += tcam_piped_.to_string(print_zeros,indent_string) ;
    r += tcam_error_detect_enable_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<12;++a0) {
      r += tcam_parity_control_[a0].to_string(print_zeros,indent_string) ;
    }
    r += vh_data_xbar_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<2;++a0) {
      r += col_[a0].to_string(print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< TcamSbeErrlogMutable, 12 > tcam_sbe_errlog_;
  MauDiagTcamClkEnMutable mau_diag_tcam_clk_en_;
  IntrStatusMauTcamArrayMutable intr_status_mau_tcam_array_;
  IntrEnable0MauTcamArrayMutable intr_enable0_mau_tcam_array_;
  IntrEnable1MauTcamArrayMutable intr_enable1_mau_tcam_array_;
  std::array< TcamMatchAdrShiftMutable, 8 > tcam_match_adr_shift_;
  std::array< TcamOutputTableThreadMutable, 8 > tcam_output_table_thread_;
  IntrInjectMauTcamArrayMutable intr_inject_mau_tcam_array_;
  IntrFreezeEnableMauTcamArrayMutable intr_freeze_enable_mau_tcam_array_;
  std::array< TcamLogicalChannelErrlogLoMutable, 4 > tcam_logical_channel_errlog_lo_;
  std::array< TcamLogicalChannelErrlogHiMutable, 4 > tcam_logical_channel_errlog_hi_;
  AtomicModTcamGoMutable atomic_mod_tcam_go_;
  TcamPipedMutable tcam_piped_;
  TcamErrorDetectEnableMutable tcam_error_detect_enable_;
  std::array< TcamParityControlMutable, 12 > tcam_parity_control_;
  MauTcamRowVhXbarArrayAddrmapMutable vh_data_xbar_;
  std::array< MauTcamColumnAddrmapMutable, 2 > col_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x40800; // to get to tcams
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MAU_TCAM_ARRAY_ADDRMAP_MUTABLE_H__
