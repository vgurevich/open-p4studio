/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_METER_ALU_GROUP_ACTION_CTL_MUTABLE_H__
#define __REGISTER_INCLUDES_METER_ALU_GROUP_ACTION_CTL_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class MeterAluGroupActionCtlMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MeterAluGroupActionCtlMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_meter_alu_group_action_ctl, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_meter_alu_group_action_ctl), 4, true, write_callback, read_callback, std::string("MeterAluGroupActionCtlMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_meter_alu_group_action_ctl))
    {
    }
  MeterAluGroupActionCtlMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MeterAluGroupActionCtlMutable")
    {
    }
public:
  uint8_t right_alu_action_delay() { return right_alu_action_delay_; }
  void right_alu_action_delay(const uint8_t &v) { right_alu_action_delay_=v; }
  uint8_t right_alu_action_enable() { return right_alu_action_enable_; }
  void right_alu_action_enable(const uint8_t &v) { right_alu_action_enable_=v; }
  uint8_t left_alu_action_delay() { return left_alu_action_delay_; }
  void left_alu_action_delay(const uint8_t &v) { left_alu_action_delay_=v; }
  uint8_t left_alu_action_enable() { return left_alu_action_enable_; }
  void left_alu_action_enable(const uint8_t &v) { left_alu_action_enable_=v; }



  uint8_t right_action_override() { return right_action_override_; }
  void right_action_override(const uint8_t &v) { right_action_override_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (right_alu_action_delay_ & 0x7);
    *data |= ((right_alu_action_enable_ & 0x1) << 3);
    *data |= ((left_alu_action_delay_ & 0x7) << 4);
    *data |= ((left_alu_action_enable_ & 0x1) << 7);
    *data |= ((right_action_override_ & 0x1) << 8);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    right_alu_action_delay_ = (data & 0x7);
    right_alu_action_enable_ = ((data >> 3) & 0x1);
    left_alu_action_delay_ = ((data >> 4) & 0x7);
    left_alu_action_enable_ = ((data >> 7) & 0x1);
    right_action_override_ = ((data >> 8) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    right_alu_action_delay_ = 0x0;
    right_alu_action_enable_ = 0x0;
    left_alu_action_delay_ = 0x0;
    left_alu_action_enable_ = 0x0;
    right_action_override_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MeterAluGroupActionCtlMutable") + ":\n";
    r += indent_string + "  " + std::string("right_alu_action_delay") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(right_alu_action_delay_) ) + "\n";
    all_zeros &= (0 == right_alu_action_delay_);
    r += indent_string + "  " + std::string("right_alu_action_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(right_alu_action_enable_) ) + "\n";
    all_zeros &= (0 == right_alu_action_enable_);
    r += indent_string + "  " + std::string("left_alu_action_delay") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(left_alu_action_delay_) ) + "\n";
    all_zeros &= (0 == left_alu_action_delay_);
    r += indent_string + "  " + std::string("left_alu_action_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(left_alu_action_enable_) ) + "\n";
    all_zeros &= (0 == left_alu_action_enable_);
    r += indent_string + "  " + std::string("right_action_override") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(right_action_override_) ) + "\n";
    all_zeros &= (0 == right_action_override_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MeterAluGroupActionCtlMutable") + ":\n";
    r += indent_string + "  " + std::string("right_alu_action_delay") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(right_alu_action_delay_) ) + "\n";
    all_zeros &= (0 == right_alu_action_delay_);
    r += indent_string + "  " + std::string("right_alu_action_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(right_alu_action_enable_) ) + "\n";
    all_zeros &= (0 == right_alu_action_enable_);
    r += indent_string + "  " + std::string("left_alu_action_delay") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(left_alu_action_delay_) ) + "\n";
    all_zeros &= (0 == left_alu_action_delay_);
    r += indent_string + "  " + std::string("left_alu_action_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(left_alu_action_enable_) ) + "\n";
    all_zeros &= (0 == left_alu_action_enable_);
    r += indent_string + "  " + std::string("right_action_override") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(right_action_override_) ) + "\n";
    all_zeros &= (0 == right_action_override_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t right_alu_action_delay_;
  uint8_t right_alu_action_enable_;
  uint8_t left_alu_action_delay_;
  uint8_t left_alu_action_enable_;
  uint8_t right_action_override_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_meter_alu_group_action_ctl
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to rams
    offset += 0x10000; // to get to map_alu
    offset += 0x2480; // to get to meter_alu_group_action_ctl
    assert(index_meter_alu_group_action_ctl < 4);
    offset += index_meter_alu_group_action_ctl * 0x4; // meter_alu_group_action_ctl[]
    return offset;
  }

};



















  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_METER_ALU_GROUP_ACTION_CTL_MUTABLE_H__
