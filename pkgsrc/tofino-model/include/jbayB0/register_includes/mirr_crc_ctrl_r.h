/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MIRR_CRC_CTRL_R_H__
#define __REGISTER_INCLUDES_MIRR_CRC_CTRL_R_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class MirrCrcCtrlR : public model_core::RegisterBlock<RegisterCallback> {
public:
  MirrCrcCtrlR(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, false, write_callback, read_callback, std::string("MirrCrcCtrlR")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  MirrCrcCtrlR(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MirrCrcCtrlR")
    {
    }
public:





  uint8_t &crcerr_inj() { return crcerr_inj_; }





  uint8_t &crcgen_dis() { return crcgen_dis_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (crcerr_inj_ & 0x1);
    *data |= ((crcgen_dis_ & 0x1) << 1);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    crcerr_inj_ = (data & 0x1);
    crcgen_dis_ = ((data >> 1) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    crcerr_inj_ = 0x0;
    crcgen_dis_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirrCrcCtrlR") + ":\n";
    r += indent_string + "  " + std::string("crcerr_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcerr_inj_) ) + "\n";
    all_zeros &= (0 == crcerr_inj_);
    r += indent_string + "  " + std::string("crcgen_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcgen_dis_) ) + "\n";
    all_zeros &= (0 == crcgen_dis_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirrCrcCtrlR") + ":\n";
    r += indent_string + "  " + std::string("crcerr_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcerr_inj_) ) + "\n";
    all_zeros &= (0 == crcerr_inj_);
    r += indent_string + "  " + std::string("crcgen_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcgen_dis_) ) + "\n";
    all_zeros &= (0 == crcgen_dis_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t crcerr_inj_;
  uint8_t crcgen_dis_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x80000; // to get to mirreg
    offset += 0xa0; // to get to mirr_crc_ctrl
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MIRR_CRC_CTRL_R_H__
