/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MIRR_S2P_SESS_CFG_WORD0_R_H__
#define __REGISTER_INCLUDES_MIRR_S2P_SESS_CFG_WORD0_R_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class MirrS2pSessCfgWord0R : public model_core::RegisterBlock<RegisterCallback> {
public:
  MirrS2pSessCfgWord0R(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, false, write_callback, read_callback, std::string("MirrS2pSessCfgWord0R")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  MirrS2pSessCfgWord0R(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MirrS2pSessCfgWord0R")
    {
    }
public:







  uint8_t &hash_cfg_f() { return hash_cfg_f_; }





  uint8_t &icos_cfg_f() { return icos_cfg_f_; }





  uint8_t &dod_cfg_f() { return dod_cfg_f_; }







  uint8_t &c2c_cfg_f() { return c2c_cfg_f_; }







  uint8_t &mc_cfg_f() { return mc_cfg_f_; }







  uint8_t &epipe_cfg_f() { return epipe_cfg_f_; }





  uint16_t &yid_f() { return yid_f_; }





  uint16_t &xid_f() { return xid_f_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (hash_cfg_f_ & 0x3);
    *data |= ((icos_cfg_f_ & 0x1) << 2);
    *data |= ((dod_cfg_f_ & 0x1) << 3);
    *data |= ((c2c_cfg_f_ & 0x1) << 4);
    *data |= ((mc_cfg_f_ & 0x1) << 5);
    *data |= ((epipe_cfg_f_ & 0x1) << 6);
    *data |= ((yid_f_ & 0x1ff) << 7);
    *data |= (xid_f_ << 16);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    hash_cfg_f_ = (data & 0x3);
    icos_cfg_f_ = ((data >> 2) & 0x1);
    dod_cfg_f_ = ((data >> 3) & 0x1);
    c2c_cfg_f_ = ((data >> 4) & 0x1);
    mc_cfg_f_ = ((data >> 5) & 0x1);
    epipe_cfg_f_ = ((data >> 6) & 0x1);
    yid_f_ = ((data >> 7) & 0x1ff);
    xid_f_ = (data >> 16);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    hash_cfg_f_ = 0x0;
    icos_cfg_f_ = 0x0;
    dod_cfg_f_ = 0x0;
    c2c_cfg_f_ = 0x0;
    mc_cfg_f_ = 0x0;
    epipe_cfg_f_ = 0x0;
    yid_f_ = 0x0;
    xid_f_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirrS2pSessCfgWord0R") + ":\n";
    r += indent_string + "  " + std::string("hash_cfg_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(hash_cfg_f_) ) + "\n";
    all_zeros &= (0 == hash_cfg_f_);
    r += indent_string + "  " + std::string("icos_cfg_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(icos_cfg_f_) ) + "\n";
    all_zeros &= (0 == icos_cfg_f_);
    r += indent_string + "  " + std::string("dod_cfg_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dod_cfg_f_) ) + "\n";
    all_zeros &= (0 == dod_cfg_f_);
    r += indent_string + "  " + std::string("c2c_cfg_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(c2c_cfg_f_) ) + "\n";
    all_zeros &= (0 == c2c_cfg_f_);
    r += indent_string + "  " + std::string("mc_cfg_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mc_cfg_f_) ) + "\n";
    all_zeros &= (0 == mc_cfg_f_);
    r += indent_string + "  " + std::string("epipe_cfg_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(epipe_cfg_f_) ) + "\n";
    all_zeros &= (0 == epipe_cfg_f_);
    r += indent_string + "  " + std::string("yid_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(yid_f_) ) + "\n";
    all_zeros &= (0 == yid_f_);
    r += indent_string + "  " + std::string("xid_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(xid_f_) ) + "\n";
    all_zeros &= (0 == xid_f_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirrS2pSessCfgWord0R") + ":\n";
    r += indent_string + "  " + std::string("hash_cfg_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(hash_cfg_f_) ) + "\n";
    all_zeros &= (0 == hash_cfg_f_);
    r += indent_string + "  " + std::string("icos_cfg_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(icos_cfg_f_) ) + "\n";
    all_zeros &= (0 == icos_cfg_f_);
    r += indent_string + "  " + std::string("dod_cfg_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dod_cfg_f_) ) + "\n";
    all_zeros &= (0 == dod_cfg_f_);
    r += indent_string + "  " + std::string("c2c_cfg_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(c2c_cfg_f_) ) + "\n";
    all_zeros &= (0 == c2c_cfg_f_);
    r += indent_string + "  " + std::string("mc_cfg_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mc_cfg_f_) ) + "\n";
    all_zeros &= (0 == mc_cfg_f_);
    r += indent_string + "  " + std::string("epipe_cfg_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(epipe_cfg_f_) ) + "\n";
    all_zeros &= (0 == epipe_cfg_f_);
    r += indent_string + "  " + std::string("yid_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(yid_f_) ) + "\n";
    all_zeros &= (0 == yid_f_);
    r += indent_string + "  " + std::string("xid_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(xid_f_) ) + "\n";
    all_zeros &= (0 == xid_f_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t hash_cfg_f_;
  uint8_t icos_cfg_f_;
  uint8_t dod_cfg_f_;
  uint8_t c2c_cfg_f_;
  uint8_t mc_cfg_f_;
  uint8_t epipe_cfg_f_;
  uint16_t yid_f_;
  uint16_t xid_f_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x80000; // to get to mirreg
    offset += 0xc; // to get to sess_entry_word0
    return offset;
  }

};












  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MIRR_S2P_SESS_CFG_WORD0_R_H__
