/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MIRR_S2P_SESS_CFG_WORD3_R_H__
#define __REGISTER_INCLUDES_MIRR_S2P_SESS_CFG_WORD3_R_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class MirrS2pSessCfgWord3R : public model_core::RegisterBlock<RegisterCallback> {
public:
  MirrS2pSessCfgWord3R(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, false, write_callback, read_callback, std::string("MirrS2pSessCfgWord3R")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  MirrS2pSessCfgWord3R(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MirrS2pSessCfgWord3R")
    {
    }
public:





  uint16_t &hash1_f() { return hash1_f_; }





  uint16_t &hash2_f() { return hash2_f_; }







  uint8_t &pipe_vec_f() { return pipe_vec_f_; }






  uint8_t &egress_bypass_f() { return egress_bypass_f_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (hash1_f_ & 0x1fff);
    *data |= ((hash2_f_ & 0x1fff) << 13);
    *data |= ((pipe_vec_f_ & 0x1f) << 26);
    *data |= ((egress_bypass_f_ & 0x1) << 31);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    hash1_f_ = (data & 0x1fff);
    hash2_f_ = ((data >> 13) & 0x1fff);
    pipe_vec_f_ = ((data >> 26) & 0x1f);
    egress_bypass_f_ = ((data >> 31) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    hash1_f_ = 0x0;
    hash2_f_ = 0x0;
    pipe_vec_f_ = 0x0;
    egress_bypass_f_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirrS2pSessCfgWord3R") + ":\n";
    r += indent_string + "  " + std::string("hash1_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(hash1_f_) ) + "\n";
    all_zeros &= (0 == hash1_f_);
    r += indent_string + "  " + std::string("hash2_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(hash2_f_) ) + "\n";
    all_zeros &= (0 == hash2_f_);
    r += indent_string + "  " + std::string("pipe_vec_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pipe_vec_f_) ) + "\n";
    all_zeros &= (0 == pipe_vec_f_);
    r += indent_string + "  " + std::string("egress_bypass_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egress_bypass_f_) ) + "\n";
    all_zeros &= (0 == egress_bypass_f_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirrS2pSessCfgWord3R") + ":\n";
    r += indent_string + "  " + std::string("hash1_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(hash1_f_) ) + "\n";
    all_zeros &= (0 == hash1_f_);
    r += indent_string + "  " + std::string("hash2_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(hash2_f_) ) + "\n";
    all_zeros &= (0 == hash2_f_);
    r += indent_string + "  " + std::string("pipe_vec_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pipe_vec_f_) ) + "\n";
    all_zeros &= (0 == pipe_vec_f_);
    r += indent_string + "  " + std::string("egress_bypass_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egress_bypass_f_) ) + "\n";
    all_zeros &= (0 == egress_bypass_f_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint16_t hash1_f_;
  uint16_t hash2_f_;
  uint8_t pipe_vec_f_;
  uint8_t egress_bypass_f_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x80000; // to get to mirreg
    offset += 0x18; // to get to sess_entry_word3
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MIRR_S2P_SESS_CFG_WORD3_R_H__
