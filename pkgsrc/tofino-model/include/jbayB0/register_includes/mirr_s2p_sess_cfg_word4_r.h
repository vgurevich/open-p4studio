/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MIRR_S2P_SESS_CFG_WORD4_R_H__
#define __REGISTER_INCLUDES_MIRR_S2P_SESS_CFG_WORD4_R_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class MirrS2pSessCfgWord4R : public model_core::RegisterBlock<RegisterCallback> {
public:
  MirrS2pSessCfgWord4R(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, false, write_callback, read_callback, std::string("MirrS2pSessCfgWord4R")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  MirrS2pSessCfgWord4R(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MirrS2pSessCfgWord4R")
    {
    }
public:





  uint8_t &icos_f() { return icos_f_; }





  uint8_t &color_f() { return color_f_; }





  uint8_t &mcid1_vld_f() { return mcid1_vld_f_; }





  uint8_t &mcid2_vld_f() { return mcid2_vld_f_; }





  uint8_t &c2c_cos_f() { return c2c_cos_f_; }





  uint8_t &c2c_vld_f() { return c2c_vld_f_; }





  uint8_t &yid_tbl_sel_f() { return yid_tbl_sel_f_; }





  uint8_t &eport_qid_f() { return eport_qid_f_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (icos_f_ & 0x7);
    *data |= ((color_f_ & 0x3) << 3);
    *data |= ((mcid1_vld_f_ & 0x1) << 5);
    *data |= ((mcid2_vld_f_ & 0x1) << 6);
    *data |= ((c2c_cos_f_ & 0x7) << 7);
    *data |= ((c2c_vld_f_ & 0x1) << 10);
    *data |= ((yid_tbl_sel_f_ & 0x1) << 11);
    *data |= ((eport_qid_f_ & 0x7f) << 12);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    icos_f_ = (data & 0x7);
    color_f_ = ((data >> 3) & 0x3);
    mcid1_vld_f_ = ((data >> 5) & 0x1);
    mcid2_vld_f_ = ((data >> 6) & 0x1);
    c2c_cos_f_ = ((data >> 7) & 0x7);
    c2c_vld_f_ = ((data >> 10) & 0x1);
    yid_tbl_sel_f_ = ((data >> 11) & 0x1);
    eport_qid_f_ = ((data >> 12) & 0x7f);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    icos_f_ = 0x0;
    color_f_ = 0x0;
    mcid1_vld_f_ = 0x0;
    mcid2_vld_f_ = 0x0;
    c2c_cos_f_ = 0x0;
    c2c_vld_f_ = 0x0;
    yid_tbl_sel_f_ = 0x0;
    eport_qid_f_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirrS2pSessCfgWord4R") + ":\n";
    r += indent_string + "  " + std::string("icos_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(icos_f_) ) + "\n";
    all_zeros &= (0 == icos_f_);
    r += indent_string + "  " + std::string("color_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(color_f_) ) + "\n";
    all_zeros &= (0 == color_f_);
    r += indent_string + "  " + std::string("mcid1_vld_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mcid1_vld_f_) ) + "\n";
    all_zeros &= (0 == mcid1_vld_f_);
    r += indent_string + "  " + std::string("mcid2_vld_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mcid2_vld_f_) ) + "\n";
    all_zeros &= (0 == mcid2_vld_f_);
    r += indent_string + "  " + std::string("c2c_cos_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(c2c_cos_f_) ) + "\n";
    all_zeros &= (0 == c2c_cos_f_);
    r += indent_string + "  " + std::string("c2c_vld_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(c2c_vld_f_) ) + "\n";
    all_zeros &= (0 == c2c_vld_f_);
    r += indent_string + "  " + std::string("yid_tbl_sel_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(yid_tbl_sel_f_) ) + "\n";
    all_zeros &= (0 == yid_tbl_sel_f_);
    r += indent_string + "  " + std::string("eport_qid_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eport_qid_f_) ) + "\n";
    all_zeros &= (0 == eport_qid_f_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirrS2pSessCfgWord4R") + ":\n";
    r += indent_string + "  " + std::string("icos_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(icos_f_) ) + "\n";
    all_zeros &= (0 == icos_f_);
    r += indent_string + "  " + std::string("color_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(color_f_) ) + "\n";
    all_zeros &= (0 == color_f_);
    r += indent_string + "  " + std::string("mcid1_vld_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mcid1_vld_f_) ) + "\n";
    all_zeros &= (0 == mcid1_vld_f_);
    r += indent_string + "  " + std::string("mcid2_vld_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mcid2_vld_f_) ) + "\n";
    all_zeros &= (0 == mcid2_vld_f_);
    r += indent_string + "  " + std::string("c2c_cos_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(c2c_cos_f_) ) + "\n";
    all_zeros &= (0 == c2c_cos_f_);
    r += indent_string + "  " + std::string("c2c_vld_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(c2c_vld_f_) ) + "\n";
    all_zeros &= (0 == c2c_vld_f_);
    r += indent_string + "  " + std::string("yid_tbl_sel_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(yid_tbl_sel_f_) ) + "\n";
    all_zeros &= (0 == yid_tbl_sel_f_);
    r += indent_string + "  " + std::string("eport_qid_f") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eport_qid_f_) ) + "\n";
    all_zeros &= (0 == eport_qid_f_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t icos_f_;
  uint8_t color_f_;
  uint8_t mcid1_vld_f_;
  uint8_t mcid2_vld_f_;
  uint8_t c2c_cos_f_;
  uint8_t c2c_vld_f_;
  uint8_t yid_tbl_sel_f_;
  uint8_t eport_qid_f_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x80000; // to get to mirreg
    offset += 0x1c; // to get to sess_entry_word4
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MIRR_S2P_SESS_CFG_WORD4_R_H__
