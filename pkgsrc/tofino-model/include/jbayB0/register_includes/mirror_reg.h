/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MIRROR_REG_H__
#define __REGISTER_INCLUDES_MIRROR_REG_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "mirror_s2p_coal_map.h"
#include "mirror_s2p_regs.h"
#include "mirror_s2p_session_map.h"
#include "mirror_slice_mem.h"
#include "mirror_slice_regs.h"

namespace jbayB0 {
  namespace register_classes {

class MirrorReg : public model_core::RegisterBlock<RegisterCallback> {
public:
  MirrorReg(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 524288, false, write_callback, read_callback, std::string("MirrorReg")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  MirrorReg(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MirrorReg")
    {
    }
public:





  MirrorS2pRegs &s2p_regs() { return s2p_regs_; }





  MirrorS2pCoalMap &s2p_coal() { return s2p_coal_; }














  MirrorS2pSessionMap &s2p_sess() { return s2p_sess_; }



  MirrorSliceMem &slice_mem(int j0) { return slice_mem_[j0]; }



  MirrorSliceRegs &slice_regs(int j0) { return slice_regs_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x100) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      s2p_regs_.read( offset, data );
    }
    else if (offset >= 0x1000 && offset < 0x1100) {
      offset -= 0x1000;
      if (read_callback_) read_callback_();
      s2p_coal_.read( offset, data );
    }
    else if (offset >= 0x2000 && offset < 0x2800) {
      offset -= 0x2000;
      if (read_callback_) read_callback_();
      s2p_sess_.read( offset, data );
    }
    else if (offset >= 0x10000 && offset < 0x12000) {
      offset -= 0x10000;
      int i0 = offset / 0x800;
      offset  -= i0 * 0x800;
      if (read_callback_) read_callback_();
      slice_mem_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x20000 && offset < 0x24000) {
      offset -= 0x20000;
      int i0 = offset / 0x1000;
      offset  -= i0 * 0x1000;
      if (read_callback_) read_callback_();
      slice_regs_[ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x100) {
      offset -= 0x0;
      s2p_regs_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1000 && offset < 0x1100) {
      offset -= 0x1000;
      s2p_coal_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2000 && offset < 0x2800) {
      offset -= 0x2000;
      s2p_sess_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10000 && offset < 0x12000) {
      offset -= 0x10000;
      int i0 = offset / 0x800;
      offset  -= i0 * 0x800;
      slice_mem_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20000 && offset < 0x24000) {
      offset -= 0x20000;
      int i0 = offset / 0x1000;
      offset  -= i0 * 0x1000;
      slice_regs_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    s2p_regs_.reset();
    s2p_coal_.reset();
    s2p_sess_.reset();
    for (auto &f0 : slice_mem_) {
      f0.reset();
    }
    for (auto &f0 : slice_regs_) {
      f0.reset();
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x100) {
      offset -= 0x0;
      r += s2p_regs_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1000 && offset < 0x1100) {
      offset -= 0x1000;
      r += s2p_coal_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2000 && offset < 0x2800) {
      offset -= 0x2000;
      r += s2p_sess_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10000 && offset < 0x12000) {
      offset -= 0x10000;
      int i0 = offset / 0x800;
      offset  -= i0 * 0x800;
      r += slice_mem_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20000 && offset < 0x24000) {
      offset -= 0x20000;
      int i0 = offset / 0x1000;
      offset  -= i0 * 0x1000;
      r += slice_regs_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += s2p_regs_.to_string(print_zeros,indent_string) ;
    r += s2p_coal_.to_string(print_zeros,indent_string) ;
    r += s2p_sess_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += slice_mem_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += slice_regs_[a0].to_string(print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  MirrorS2pRegs s2p_regs_;
  MirrorS2pCoalMap s2p_coal_;
  MirrorS2pSessionMap s2p_sess_;
  std::array< MirrorSliceMem, 4 > slice_mem_;
  std::array< MirrorSliceRegs, 4 > slice_regs_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x80000; // to get to mirreg
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MIRROR_REG_H__
