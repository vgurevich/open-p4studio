/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MIRROR_SESS_ENTRY_R_MUTABLE_H__
#define __REGISTER_INCLUDES_MIRROR_SESS_ENTRY_R_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class MirrorSessEntryRMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MirrorSessEntryRMutable(
      int chipNumber, int index_pipe_addrmap, int index_mirror_slice_mem, int index_mirror_sess_entry_r, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mirror_slice_mem, index_mirror_sess_entry_r), 4, true, write_callback, read_callback, std::string("MirrorSessEntryRMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mirror_slice_mem) + "," + boost::lexical_cast<std::string>(index_mirror_sess_entry_r))
    {
    }
  MirrorSessEntryRMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MirrorSessEntryRMutable")
    {
    }
public:





  uint8_t sess_en() { return sess_en_; }
  void sess_en(const uint8_t &v) { sess_en_=v; }





  uint8_t egr_en() { return egr_en_; }
  void egr_en(const uint8_t &v) { egr_en_=v; }





  uint8_t ingr_en() { return ingr_en_; }
  void ingr_en(const uint8_t &v) { ingr_en_=v; }





  uint8_t coal_en() { return coal_en_; }
  void coal_en(const uint8_t &v) { coal_en_=v; }






  uint16_t pkt_len() { return pkt_len_; }
  void pkt_len(const uint16_t &v) { pkt_len_=v; }






  uint8_t coal_num() { return coal_num_; }
  void coal_num(const uint8_t &v) { coal_num_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (sess_en_ & 0x1);
    *data |= ((egr_en_ & 0x1) << 1);
    *data |= ((ingr_en_ & 0x1) << 2);
    *data |= ((coal_en_ & 0x1) << 3);
    *data |= ((pkt_len_ & 0x3fff) << 4);
    *data |= ((coal_num_ & 0xf) << 18);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    sess_en_ = (data & 0x1);
    egr_en_ = ((data >> 1) & 0x1);
    ingr_en_ = ((data >> 2) & 0x1);
    coal_en_ = ((data >> 3) & 0x1);
    pkt_len_ = ((data >> 4) & 0x3fff);
    coal_num_ = ((data >> 18) & 0xf);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    sess_en_ = 0;
    egr_en_ = 0;
    ingr_en_ = 0;
    coal_en_ = 0;
    pkt_len_ = 0;
    coal_num_ = 0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirrorSessEntryRMutable") + ":\n";
    r += indent_string + "  " + std::string("sess_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(sess_en_) ) + "\n";
    all_zeros &= (0 == sess_en_);
    r += indent_string + "  " + std::string("egr_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr_en_) ) + "\n";
    all_zeros &= (0 == egr_en_);
    r += indent_string + "  " + std::string("ingr_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ingr_en_) ) + "\n";
    all_zeros &= (0 == ingr_en_);
    r += indent_string + "  " + std::string("coal_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(coal_en_) ) + "\n";
    all_zeros &= (0 == coal_en_);
    r += indent_string + "  " + std::string("pkt_len") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkt_len_) ) + "\n";
    all_zeros &= (0 == pkt_len_);
    r += indent_string + "  " + std::string("coal_num") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(coal_num_) ) + "\n";
    all_zeros &= (0 == coal_num_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirrorSessEntryRMutable") + ":\n";
    r += indent_string + "  " + std::string("sess_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(sess_en_) ) + "\n";
    all_zeros &= (0 == sess_en_);
    r += indent_string + "  " + std::string("egr_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr_en_) ) + "\n";
    all_zeros &= (0 == egr_en_);
    r += indent_string + "  " + std::string("ingr_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ingr_en_) ) + "\n";
    all_zeros &= (0 == ingr_en_);
    r += indent_string + "  " + std::string("coal_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(coal_en_) ) + "\n";
    all_zeros &= (0 == coal_en_);
    r += indent_string + "  " + std::string("pkt_len") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkt_len_) ) + "\n";
    all_zeros &= (0 == pkt_len_);
    r += indent_string + "  " + std::string("coal_num") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(coal_num_) ) + "\n";
    all_zeros &= (0 == coal_num_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t sess_en_;
  uint8_t egr_en_;
  uint8_t ingr_en_;
  uint8_t coal_en_;
  uint16_t pkt_len_;
  uint8_t coal_num_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mirror_slice_mem, int index_mirror_sess_entry_r
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x80000; // to get to mirreg
    offset += 0x10000; // to get to slice_mem
    assert(index_mirror_slice_mem < 4);
    offset += index_mirror_slice_mem * 0x800; // mirror_slice_mem[]
    assert(index_mirror_sess_entry_r < 256);
    offset += index_mirror_sess_entry_r * 0x4; // mirror_sess_entry_r[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MIRROR_SESS_ENTRY_R_MUTABLE_H__
