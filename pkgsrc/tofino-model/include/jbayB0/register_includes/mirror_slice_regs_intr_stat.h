/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MIRROR_SLICE_REGS_INTR_STAT_H__
#define __REGISTER_INCLUDES_MIRROR_SLICE_REGS_INTR_STAT_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class MirrorSliceRegsIntrStat : public model_core::RegisterBlock<RegisterCallback> {
public:
  MirrorSliceRegsIntrStat(
      int chipNumber, int index_pipe_addrmap, int index_mirror_slice_regs, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mirror_slice_regs), 4, false, write_callback, read_callback, std::string("MirrorSliceRegsIntrStat")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mirror_slice_regs))
    {
    }
  MirrorSliceRegsIntrStat(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MirrorSliceRegsIntrStat")
    {
    }
public:




  uint8_t &idprs_input_sop_eop_mismatch() { return idprs_input_sop_eop_mismatch_; }




  uint8_t &edprs_input_sop_eop_mismatch() { return edprs_input_sop_eop_mismatch_; }




  uint8_t &session_mem_sbe() { return session_mem_sbe_; }




  uint8_t &session_mem_mbe() { return session_mem_mbe_; }




  uint8_t &data_mem_sbe() { return data_mem_sbe_; }




  uint8_t &data_mem_mbe() { return data_mem_mbe_; }




  uint8_t &meta_mem_sbe() { return meta_mem_sbe_; }




  uint8_t &meta_mem_mbe() { return meta_mem_mbe_; }




  uint8_t &dbuff_almost_full() { return dbuff_almost_full_; }




  uint8_t &dbuff_full() { return dbuff_full_; }




  uint8_t &idpr_bcnt_err() { return idpr_bcnt_err_; }




  uint8_t &buffer_alloc_error() { return buffer_alloc_error_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (idprs_input_sop_eop_mismatch_ & 0x1);
    *data |= ((edprs_input_sop_eop_mismatch_ & 0x1) << 1);
    *data |= ((session_mem_sbe_ & 0x1) << 2);
    *data |= ((session_mem_mbe_ & 0x1) << 3);
    *data |= ((data_mem_sbe_ & 0x1) << 4);
    *data |= ((data_mem_mbe_ & 0x1) << 5);
    *data |= ((meta_mem_sbe_ & 0x1) << 6);
    *data |= ((meta_mem_mbe_ & 0x1) << 7);
    *data |= ((dbuff_almost_full_ & 0x1) << 8);
    *data |= ((dbuff_full_ & 0x1) << 9);
    *data |= ((idpr_bcnt_err_ & 0x1) << 10);
    *data |= ((buffer_alloc_error_ & 0x1) << 11);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    idprs_input_sop_eop_mismatch_ &= ~(data & 0x1);
    edprs_input_sop_eop_mismatch_ &= ~((data >> 1) & 0x1);
    session_mem_sbe_ &= ~((data >> 2) & 0x1);
    session_mem_mbe_ &= ~((data >> 3) & 0x1);
    data_mem_sbe_ &= ~((data >> 4) & 0x1);
    data_mem_mbe_ &= ~((data >> 5) & 0x1);
    meta_mem_sbe_ &= ~((data >> 6) & 0x1);
    meta_mem_mbe_ &= ~((data >> 7) & 0x1);
    dbuff_almost_full_ &= ~((data >> 8) & 0x1);
    dbuff_full_ &= ~((data >> 9) & 0x1);
    idpr_bcnt_err_ &= ~((data >> 10) & 0x1);
    buffer_alloc_error_ &= ~((data >> 11) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    idprs_input_sop_eop_mismatch_ = 0x0;
    edprs_input_sop_eop_mismatch_ = 0x0;
    session_mem_sbe_ = 0x0;
    session_mem_mbe_ = 0x0;
    data_mem_sbe_ = 0x0;
    data_mem_mbe_ = 0x0;
    meta_mem_sbe_ = 0x0;
    meta_mem_mbe_ = 0x0;
    dbuff_almost_full_ = 0x0;
    dbuff_full_ = 0x0;
    idpr_bcnt_err_ = 0x0;
    buffer_alloc_error_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirrorSliceRegsIntrStat") + ":\n";
    r += indent_string + "  " + std::string("idprs_input_sop_eop_mismatch") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idprs_input_sop_eop_mismatch_) ) + "\n";
    all_zeros &= (0 == idprs_input_sop_eop_mismatch_);
    r += indent_string + "  " + std::string("edprs_input_sop_eop_mismatch") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(edprs_input_sop_eop_mismatch_) ) + "\n";
    all_zeros &= (0 == edprs_input_sop_eop_mismatch_);
    r += indent_string + "  " + std::string("session_mem_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(session_mem_sbe_) ) + "\n";
    all_zeros &= (0 == session_mem_sbe_);
    r += indent_string + "  " + std::string("session_mem_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(session_mem_mbe_) ) + "\n";
    all_zeros &= (0 == session_mem_mbe_);
    r += indent_string + "  " + std::string("data_mem_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(data_mem_sbe_) ) + "\n";
    all_zeros &= (0 == data_mem_sbe_);
    r += indent_string + "  " + std::string("data_mem_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(data_mem_mbe_) ) + "\n";
    all_zeros &= (0 == data_mem_mbe_);
    r += indent_string + "  " + std::string("meta_mem_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_mem_sbe_) ) + "\n";
    all_zeros &= (0 == meta_mem_sbe_);
    r += indent_string + "  " + std::string("meta_mem_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_mem_mbe_) ) + "\n";
    all_zeros &= (0 == meta_mem_mbe_);
    r += indent_string + "  " + std::string("dbuff_almost_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dbuff_almost_full_) ) + "\n";
    all_zeros &= (0 == dbuff_almost_full_);
    r += indent_string + "  " + std::string("dbuff_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dbuff_full_) ) + "\n";
    all_zeros &= (0 == dbuff_full_);
    r += indent_string + "  " + std::string("idpr_bcnt_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idpr_bcnt_err_) ) + "\n";
    all_zeros &= (0 == idpr_bcnt_err_);
    r += indent_string + "  " + std::string("buffer_alloc_error") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(buffer_alloc_error_) ) + "\n";
    all_zeros &= (0 == buffer_alloc_error_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirrorSliceRegsIntrStat") + ":\n";
    r += indent_string + "  " + std::string("idprs_input_sop_eop_mismatch") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idprs_input_sop_eop_mismatch_) ) + "\n";
    all_zeros &= (0 == idprs_input_sop_eop_mismatch_);
    r += indent_string + "  " + std::string("edprs_input_sop_eop_mismatch") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(edprs_input_sop_eop_mismatch_) ) + "\n";
    all_zeros &= (0 == edprs_input_sop_eop_mismatch_);
    r += indent_string + "  " + std::string("session_mem_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(session_mem_sbe_) ) + "\n";
    all_zeros &= (0 == session_mem_sbe_);
    r += indent_string + "  " + std::string("session_mem_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(session_mem_mbe_) ) + "\n";
    all_zeros &= (0 == session_mem_mbe_);
    r += indent_string + "  " + std::string("data_mem_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(data_mem_sbe_) ) + "\n";
    all_zeros &= (0 == data_mem_sbe_);
    r += indent_string + "  " + std::string("data_mem_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(data_mem_mbe_) ) + "\n";
    all_zeros &= (0 == data_mem_mbe_);
    r += indent_string + "  " + std::string("meta_mem_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_mem_sbe_) ) + "\n";
    all_zeros &= (0 == meta_mem_sbe_);
    r += indent_string + "  " + std::string("meta_mem_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_mem_mbe_) ) + "\n";
    all_zeros &= (0 == meta_mem_mbe_);
    r += indent_string + "  " + std::string("dbuff_almost_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dbuff_almost_full_) ) + "\n";
    all_zeros &= (0 == dbuff_almost_full_);
    r += indent_string + "  " + std::string("dbuff_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dbuff_full_) ) + "\n";
    all_zeros &= (0 == dbuff_full_);
    r += indent_string + "  " + std::string("idpr_bcnt_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idpr_bcnt_err_) ) + "\n";
    all_zeros &= (0 == idpr_bcnt_err_);
    r += indent_string + "  " + std::string("buffer_alloc_error") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(buffer_alloc_error_) ) + "\n";
    all_zeros &= (0 == buffer_alloc_error_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t idprs_input_sop_eop_mismatch_;
  uint8_t edprs_input_sop_eop_mismatch_;
  uint8_t session_mem_sbe_;
  uint8_t session_mem_mbe_;
  uint8_t data_mem_sbe_;
  uint8_t data_mem_mbe_;
  uint8_t meta_mem_sbe_;
  uint8_t meta_mem_mbe_;
  uint8_t dbuff_almost_full_;
  uint8_t dbuff_full_;
  uint8_t idpr_bcnt_err_;
  uint8_t buffer_alloc_error_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mirror_slice_regs
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x80000; // to get to mirreg
    offset += 0x20000; // to get to slice_regs
    assert(index_mirror_slice_regs < 4);
    offset += index_mirror_slice_regs * 0x1000; // mirror_slice_regs[]
    offset += 0x260; // to get to intr_stat
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MIRROR_SLICE_REGS_INTR_STAT_H__
