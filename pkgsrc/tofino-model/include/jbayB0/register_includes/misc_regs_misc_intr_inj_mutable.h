/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MISC_REGS_MISC_INTR_INJ_MUTABLE_H__
#define __REGISTER_INCLUDES_MISC_REGS_MISC_INTR_INJ_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class MiscRegsMiscIntrInjMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MiscRegsMiscIntrInjMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, true, write_callback, read_callback, std::string("MiscRegsMiscIntrInjMutable"))
    {
    }
  MiscRegsMiscIntrInjMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MiscRegsMiscIntrInjMutable")
    {
    }
public:
  uint8_t pciephy_sram_sbe() { return pciephy_sram_sbe_; }
  void pciephy_sram_sbe(const uint8_t &v) { pciephy_sram_sbe_=v; }
  uint8_t pciephy_sram_mbe() { return pciephy_sram_mbe_; }
  void pciephy_sram_mbe(const uint8_t &v) { pciephy_sram_mbe_=v; }
  uint8_t tv80_sram_sbe() { return tv80_sram_sbe_; }
  void tv80_sram_sbe(const uint8_t &v) { tv80_sram_sbe_=v; }
  uint8_t tv80_sram_mbe() { return tv80_sram_mbe_; }
  void tv80_sram_mbe(const uint8_t &v) { tv80_sram_mbe_=v; }
  uint8_t corepll_lol() { return corepll_lol_; }
  void corepll_lol(const uint8_t &v) { corepll_lol_=v; }
  uint8_t pps_pll_lol() { return pps_pll_lol_; }
  void pps_pll_lol(const uint8_t &v) { pps_pll_lol_=v; }
  uint8_t mac0pll_lol() { return mac0pll_lol_; }
  void mac0pll_lol(const uint8_t &v) { mac0pll_lol_=v; }
  uint8_t mac1pll_lol() { return mac1pll_lol_; }
  void mac1pll_lol(const uint8_t &v) { mac1pll_lol_=v; }
  uint8_t pciephy_reg_err() { return pciephy_reg_err_; }
  void pciephy_reg_err(const uint8_t &v) { pciephy_reg_err_=v; }
  uint8_t pcieall_rst() { return pcieall_rst_; }
  void pcieall_rst(const uint8_t &v) { pcieall_rst_=v; }
  uint8_t tv80_reg_err() { return tv80_reg_err_; }
  void tv80_reg_err(const uint8_t &v) { tv80_reg_err_=v; }
  uint8_t tv80_debug() { return tv80_debug_; }
  void tv80_debug(const uint8_t &v) { tv80_debug_=v; }
  uint8_t tv80_intr0() { return tv80_intr0_; }
  void tv80_intr0(const uint8_t &v) { tv80_intr0_=v; }
  uint8_t tv80_intr1() { return tv80_intr1_; }
  void tv80_intr1(const uint8_t &v) { tv80_intr1_=v; }
  uint8_t tv80_intr2() { return tv80_intr2_; }
  void tv80_intr2(const uint8_t &v) { tv80_intr2_=v; }
  uint8_t tv80_intr3() { return tv80_intr3_; }
  void tv80_intr3(const uint8_t &v) { tv80_intr3_=v; }
  uint8_t pvt_lothr_int() { return pvt_lothr_int_; }
  void pvt_lothr_int(const uint8_t &v) { pvt_lothr_int_=v; }
  uint8_t pvt_hithr_int() { return pvt_hithr_int_; }
  void pvt_hithr_int(const uint8_t &v) { pvt_hithr_int_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (pciephy_sram_sbe_ & 0x1);
    *data |= ((pciephy_sram_mbe_ & 0x1) << 1);
    *data |= ((tv80_sram_sbe_ & 0x1) << 2);
    *data |= ((tv80_sram_mbe_ & 0x1) << 3);
    *data |= ((corepll_lol_ & 0x1) << 4);
    *data |= ((pps_pll_lol_ & 0x1) << 5);
    *data |= ((mac0pll_lol_ & 0x1) << 6);
    *data |= ((mac1pll_lol_ & 0x1) << 7);
    *data |= ((pciephy_reg_err_ & 0x1) << 8);
    *data |= ((pcieall_rst_ & 0x1) << 9);
    *data |= ((tv80_reg_err_ & 0x1) << 10);
    *data |= ((tv80_debug_ & 0x1) << 11);
    *data |= ((tv80_intr0_ & 0x1) << 12);
    *data |= ((tv80_intr1_ & 0x1) << 13);
    *data |= ((tv80_intr2_ & 0x1) << 14);
    *data |= ((tv80_intr3_ & 0x1) << 15);
    *data |= ((pvt_lothr_int_ & 0x1) << 16);
    *data |= ((pvt_hithr_int_ & 0x1) << 17);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    pciephy_sram_sbe_ = (data & 0x1);
    pciephy_sram_mbe_ = ((data >> 1) & 0x1);
    tv80_sram_sbe_ = ((data >> 2) & 0x1);
    tv80_sram_mbe_ = ((data >> 3) & 0x1);
    corepll_lol_ = ((data >> 4) & 0x1);
    pps_pll_lol_ = ((data >> 5) & 0x1);
    mac0pll_lol_ = ((data >> 6) & 0x1);
    mac1pll_lol_ = ((data >> 7) & 0x1);
    pciephy_reg_err_ = ((data >> 8) & 0x1);
    pcieall_rst_ = ((data >> 9) & 0x1);
    tv80_reg_err_ = ((data >> 10) & 0x1);
    tv80_debug_ = ((data >> 11) & 0x1);
    tv80_intr0_ = ((data >> 12) & 0x1);
    tv80_intr1_ = ((data >> 13) & 0x1);
    tv80_intr2_ = ((data >> 14) & 0x1);
    tv80_intr3_ = ((data >> 15) & 0x1);
    pvt_lothr_int_ = ((data >> 16) & 0x1);
    pvt_hithr_int_ = ((data >> 17) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    pciephy_sram_sbe_ = 0x0;
    pciephy_sram_mbe_ = 0x0;
    tv80_sram_sbe_ = 0x0;
    tv80_sram_mbe_ = 0x0;
    corepll_lol_ = 0x0;
    pps_pll_lol_ = 0x0;
    mac0pll_lol_ = 0x0;
    mac1pll_lol_ = 0x0;
    pciephy_reg_err_ = 0x0;
    pcieall_rst_ = 0x0;
    tv80_reg_err_ = 0x0;
    tv80_debug_ = 0x0;
    tv80_intr0_ = 0x0;
    tv80_intr1_ = 0x0;
    tv80_intr2_ = 0x0;
    tv80_intr3_ = 0x0;
    pvt_lothr_int_ = 0x0;
    pvt_hithr_int_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MiscRegsMiscIntrInjMutable") + ":\n";
    r += indent_string + "  " + std::string("pciephy_sram_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_sram_sbe_) ) + "\n";
    all_zeros &= (0 == pciephy_sram_sbe_);
    r += indent_string + "  " + std::string("pciephy_sram_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_sram_mbe_) ) + "\n";
    all_zeros &= (0 == pciephy_sram_mbe_);
    r += indent_string + "  " + std::string("tv80_sram_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80_sram_sbe_) ) + "\n";
    all_zeros &= (0 == tv80_sram_sbe_);
    r += indent_string + "  " + std::string("tv80_sram_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80_sram_mbe_) ) + "\n";
    all_zeros &= (0 == tv80_sram_mbe_);
    r += indent_string + "  " + std::string("corepll_lol") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(corepll_lol_) ) + "\n";
    all_zeros &= (0 == corepll_lol_);
    r += indent_string + "  " + std::string("pps_pll_lol") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pps_pll_lol_) ) + "\n";
    all_zeros &= (0 == pps_pll_lol_);
    r += indent_string + "  " + std::string("mac0pll_lol") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac0pll_lol_) ) + "\n";
    all_zeros &= (0 == mac0pll_lol_);
    r += indent_string + "  " + std::string("mac1pll_lol") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac1pll_lol_) ) + "\n";
    all_zeros &= (0 == mac1pll_lol_);
    r += indent_string + "  " + std::string("pciephy_reg_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_reg_err_) ) + "\n";
    all_zeros &= (0 == pciephy_reg_err_);
    r += indent_string + "  " + std::string("pcieall_rst") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pcieall_rst_) ) + "\n";
    all_zeros &= (0 == pcieall_rst_);
    r += indent_string + "  " + std::string("tv80_reg_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80_reg_err_) ) + "\n";
    all_zeros &= (0 == tv80_reg_err_);
    r += indent_string + "  " + std::string("tv80_debug") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80_debug_) ) + "\n";
    all_zeros &= (0 == tv80_debug_);
    r += indent_string + "  " + std::string("tv80_intr0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80_intr0_) ) + "\n";
    all_zeros &= (0 == tv80_intr0_);
    r += indent_string + "  " + std::string("tv80_intr1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80_intr1_) ) + "\n";
    all_zeros &= (0 == tv80_intr1_);
    r += indent_string + "  " + std::string("tv80_intr2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80_intr2_) ) + "\n";
    all_zeros &= (0 == tv80_intr2_);
    r += indent_string + "  " + std::string("tv80_intr3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80_intr3_) ) + "\n";
    all_zeros &= (0 == tv80_intr3_);
    r += indent_string + "  " + std::string("pvt_lothr_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pvt_lothr_int_) ) + "\n";
    all_zeros &= (0 == pvt_lothr_int_);
    r += indent_string + "  " + std::string("pvt_hithr_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pvt_hithr_int_) ) + "\n";
    all_zeros &= (0 == pvt_hithr_int_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MiscRegsMiscIntrInjMutable") + ":\n";
    r += indent_string + "  " + std::string("pciephy_sram_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_sram_sbe_) ) + "\n";
    all_zeros &= (0 == pciephy_sram_sbe_);
    r += indent_string + "  " + std::string("pciephy_sram_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_sram_mbe_) ) + "\n";
    all_zeros &= (0 == pciephy_sram_mbe_);
    r += indent_string + "  " + std::string("tv80_sram_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80_sram_sbe_) ) + "\n";
    all_zeros &= (0 == tv80_sram_sbe_);
    r += indent_string + "  " + std::string("tv80_sram_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80_sram_mbe_) ) + "\n";
    all_zeros &= (0 == tv80_sram_mbe_);
    r += indent_string + "  " + std::string("corepll_lol") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(corepll_lol_) ) + "\n";
    all_zeros &= (0 == corepll_lol_);
    r += indent_string + "  " + std::string("pps_pll_lol") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pps_pll_lol_) ) + "\n";
    all_zeros &= (0 == pps_pll_lol_);
    r += indent_string + "  " + std::string("mac0pll_lol") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac0pll_lol_) ) + "\n";
    all_zeros &= (0 == mac0pll_lol_);
    r += indent_string + "  " + std::string("mac1pll_lol") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac1pll_lol_) ) + "\n";
    all_zeros &= (0 == mac1pll_lol_);
    r += indent_string + "  " + std::string("pciephy_reg_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_reg_err_) ) + "\n";
    all_zeros &= (0 == pciephy_reg_err_);
    r += indent_string + "  " + std::string("pcieall_rst") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pcieall_rst_) ) + "\n";
    all_zeros &= (0 == pcieall_rst_);
    r += indent_string + "  " + std::string("tv80_reg_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80_reg_err_) ) + "\n";
    all_zeros &= (0 == tv80_reg_err_);
    r += indent_string + "  " + std::string("tv80_debug") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80_debug_) ) + "\n";
    all_zeros &= (0 == tv80_debug_);
    r += indent_string + "  " + std::string("tv80_intr0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80_intr0_) ) + "\n";
    all_zeros &= (0 == tv80_intr0_);
    r += indent_string + "  " + std::string("tv80_intr1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80_intr1_) ) + "\n";
    all_zeros &= (0 == tv80_intr1_);
    r += indent_string + "  " + std::string("tv80_intr2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80_intr2_) ) + "\n";
    all_zeros &= (0 == tv80_intr2_);
    r += indent_string + "  " + std::string("tv80_intr3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tv80_intr3_) ) + "\n";
    all_zeros &= (0 == tv80_intr3_);
    r += indent_string + "  " + std::string("pvt_lothr_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pvt_lothr_int_) ) + "\n";
    all_zeros &= (0 == pvt_lothr_int_);
    r += indent_string + "  " + std::string("pvt_hithr_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pvt_hithr_int_) ) + "\n";
    all_zeros &= (0 == pvt_hithr_int_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t pciephy_sram_sbe_;
  uint8_t pciephy_sram_mbe_;
  uint8_t tv80_sram_sbe_;
  uint8_t tv80_sram_mbe_;
  uint8_t corepll_lol_;
  uint8_t pps_pll_lol_;
  uint8_t mac0pll_lol_;
  uint8_t mac1pll_lol_;
  uint8_t pciephy_reg_err_;
  uint8_t pcieall_rst_;
  uint8_t tv80_reg_err_;
  uint8_t tv80_debug_;
  uint8_t tv80_intr0_;
  uint8_t tv80_intr1_;
  uint8_t tv80_intr2_;
  uint8_t tv80_intr3_;
  uint8_t pvt_lothr_int_;
  uint8_t pvt_hithr_int_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x80000; // to get to misc_regs
    offset += 0x20c; // to get to misc_intr_inj
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MISC_REGS_MISC_INTR_INJ_MUTABLE_H__
