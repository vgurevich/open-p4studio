/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MISC_REGS_MUTABLE_H__
#define __REGISTER_INCLUDES_MISC_REGS_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "misc_regs_barealt_ctrl_mutable.h"
#include "misc_regs_baresync_ctrl_mutable.h"
#include "misc_regs_clkobs_ctrl_mutable.h"
#include "misc_regs_clkpad_ctrl_mutable.h"
#include "misc_regs_core_pll_ctrl0_mutable.h"
#include "misc_regs_core_pll_ctrl1_mutable.h"
#include "misc_regs_dbg_rst_mutable.h"
#include "misc_regs_func_fuse_mutable.h"
#include "misc_regs_fuse_ctrl_mutable.h"
#include "misc_regs_fuse_status_mutable.h"
#include "misc_regs_fuse_vid_override_mutable.h"
#include "misc_regs_gpio_ctrl_mutable.h"
#include "misc_regs_mac0_pll_ctrl0_mutable.h"
#include "misc_regs_mac0_pll_ctrl1_mutable.h"
#include "misc_regs_mac1_pll_ctrl0_mutable.h"
#include "misc_regs_mac1_pll_ctrl1_mutable.h"
#include "misc_regs_misc_intr_mutable.h"
#include "misc_regs_pcie_debug_ctrl_mutable.h"
#include "misc_regs_pcie_debug_head_ptr_mutable.h"
#include "misc_regs_pcie_debug_tail_ptr_mutable.h"
#include "misc_regs_pcie_phy_lane_ctrl0_mutable.h"
#include "misc_regs_pcie_phy_lane_ctrl1_mutable.h"
#include "misc_regs_pcie_phy_lane_status0_mutable.h"
#include "misc_regs_pcie_phy_lane_status1_mutable.h"
#include "misc_regs_pcie_phy_ovr_bs_ref_tx_dco_ctrl_mutable.h"
#include "misc_regs_pcie_phy_ovr_mode_mutable.h"
#include "misc_regs_pcie_phy_ovr_mplla_ctrl0_mutable.h"
#include "misc_regs_pcie_phy_ovr_mplla_ctrl1_mutable.h"
#include "misc_regs_pcie_phy_ovr_mplla_ctrl2_mutable.h"
#include "misc_regs_pcie_phy_ovr_mplla_ctrl3_mutable.h"
#include "misc_regs_pcie_phy_ovr_mplla_ctrl4_mutable.h"
#include "misc_regs_pcie_phy_ovr_mpllb_ctrl0_mutable.h"
#include "misc_regs_pcie_phy_ovr_mpllb_ctrl1_mutable.h"
#include "misc_regs_pcie_phy_ovr_mpllb_ctrl2_mutable.h"
#include "misc_regs_pcie_phy_ovr_mpllb_ctrl3_mutable.h"
#include "misc_regs_pcie_phy_ovr_mpllb_ctrl4_mutable.h"
#include "misc_regs_pcie_phy_ovr_rx_ctrl_mutable.h"
#include "misc_regs_pcie_phy_ovr_rxeq0_ctrl_g1_mutable.h"
#include "misc_regs_pcie_phy_ovr_rxeq0_ctrl_g2_mutable.h"
#include "misc_regs_pcie_phy_ovr_rxeq0_ctrl_g3_mutable.h"
#include "misc_regs_pcie_phy_ovr_rxeq1_ctrl_g1_mutable.h"
#include "misc_regs_pcie_phy_ovr_rxeq1_ctrl_g2_mutable.h"
#include "misc_regs_pcie_phy_ovr_rxeq1_ctrl_g3_mutable.h"
#include "misc_regs_pcie_phy_ovr_txeq_ctrl_g1_mutable.h"
#include "misc_regs_pcie_phy_ovr_txeq_ctrl_g2_mutable.h"
#include "misc_regs_pcie_phy_ovr_txeq_ctrl_g3_mutable.h"
#include "misc_regs_pcie_phy_pipe_config_mutable.h"
#include "misc_regs_pcie_phy_rtune_mutable.h"
#include "misc_regs_pcie_phy_sram_bypass_mutable.h"
#include "misc_regs_pcie_phy_sram_init_status_mutable.h"
#include "misc_regs_pcie_rxeq_ctrl_mutable.h"
#include "misc_regs_pciectl_gen3_default_mutable.h"
#include "misc_regs_pciectl_reset_ctrl_mutable.h"
#include "misc_regs_pciephy_sram_mbe_err_log_mutable.h"
#include "misc_regs_pciephy_sram_sbe_err_log_mutable.h"
#include "misc_regs_pps_pll_ctrl0_mutable.h"
#include "misc_regs_pps_pll_ctrl1_mutable.h"
#include "misc_regs_pvt_ctrl_mutable.h"
#include "misc_regs_pvt_int_mutable.h"
#include "misc_regs_pvt_status_mutable.h"
#include "misc_regs_reset_option_mutable.h"
#include "misc_regs_soft_reset_mutable.h"
#include "misc_regs_spi_command_mutable.h"
#include "misc_regs_spi_idcode_mutable.h"
#include "misc_regs_spi_indata_mutable.h"
#include "misc_regs_spi_outdata0_mutable.h"
#include "misc_regs_spi_outdata1_mutable.h"
#include "misc_regs_sram_ecc_mutable.h"
#include "misc_regs_tcu_control0_mutable.h"
#include "misc_regs_tcu_control1_mutable.h"
#include "misc_regs_tcu_control_wrack_mutable.h"
#include "misc_regs_tcu_status_mutable.h"
#include "misc_regs_tv80_addr_msb_mutable.h"
#include "misc_regs_tv80_debug_ctrl_mutable.h"
#include "misc_regs_tv80_debug_head_ptr_mutable.h"
#include "misc_regs_tv80_debug_tail_ptr_mutable.h"
#include "misc_regs_tv80_halted_status_mutable.h"
#include "misc_regs_tv80_intr_mutable.h"
#include "misc_regs_tv80_stall_on_error_mutable.h"
#include "misc_regs_tv80_watchdog_count_mutable.h"
#include "misc_regs_tv80_watchdog_ctrl_mutable.h"
#include "misc_regs_tv80mem_mbe_err_log_mutable.h"
#include "misc_regs_tv80mem_sbe_err_log_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class MiscRegsMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MiscRegsMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 768, true, write_callback, read_callback, std::string("MiscRegsMutable"))
    {
    }
  MiscRegsMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MiscRegsMutable")
    {
    }
public:






  MiscRegsSoftResetMutable &soft_reset() { return soft_reset_; }





  MiscRegsResetOptionMutable &reset_option() { return reset_option_; }





  MiscRegsPciectlResetCtrlMutable &pciectl_reset_ctrl() { return pciectl_reset_ctrl_; }





  MiscRegsDbgRstMutable &dbg_rst() { return dbg_rst_; }





  MiscRegsGpioCtrlMutable &gpio_ctrl() { return gpio_ctrl_; }





  MiscRegsClkobsCtrlMutable &clkobs_ctrl() { return clkobs_ctrl_; }











  MiscRegsPpsPllCtrl0Mutable &pps_pll_ctrl0() { return pps_pll_ctrl0_; }





  MiscRegsPpsPllCtrl1Mutable &pps_pll_ctrl1() { return pps_pll_ctrl1_; }











  MiscRegsCorePllCtrl0Mutable &core_pll_ctrl0() { return core_pll_ctrl0_; }





  MiscRegsCorePllCtrl1Mutable &core_pll_ctrl1() { return core_pll_ctrl1_; }











  MiscRegsMac0PllCtrl0Mutable &mac0_pll_ctrl0() { return mac0_pll_ctrl0_; }





  MiscRegsMac0PllCtrl1Mutable &mac0_pll_ctrl1() { return mac0_pll_ctrl1_; }











  MiscRegsMac1PllCtrl0Mutable &mac1_pll_ctrl0() { return mac1_pll_ctrl0_; }





  MiscRegsMac1PllCtrl1Mutable &mac1_pll_ctrl1() { return mac1_pll_ctrl1_; }





  MiscRegsPciePhyLaneCtrl0Mutable &pcie_phy_lane_ctrl0() { return pcie_phy_lane_ctrl0_; }





  MiscRegsPciePhyLaneCtrl1Mutable &pcie_phy_lane_ctrl1() { return pcie_phy_lane_ctrl1_; }





  MiscRegsPciePhyLaneStatus0Mutable &pcie_phy_lane_status0() { return pcie_phy_lane_status0_; }





  MiscRegsPciePhyLaneStatus1Mutable &pcie_phy_lane_status1() { return pcie_phy_lane_status1_; }






  MiscRegsPciePhySramBypassMutable &pcie_phy_sram_bypass() { return pcie_phy_sram_bypass_; }





  MiscRegsPciePhySramInitStatusMutable &pcie_phy_sram_init_status() { return pcie_phy_sram_init_status_; }





  MiscRegsPciePhyPipeConfigMutable &pcie_phy_pipe_config() { return pcie_phy_pipe_config_; }





  MiscRegsPciePhyRtuneMutable &pcie_phy_rtune() { return pcie_phy_rtune_; }





  MiscRegsPciePhyOvrModeMutable &pcie_phy_ovr_mode() { return pcie_phy_ovr_mode_; }






  MiscRegsPciePhyOvrBsRefTxDcoCtrlMutable &pcie_phy_ovr_bs_ref_tx_dco_ctrl() { return pcie_phy_ovr_bs_ref_tx_dco_ctrl_; }





  MiscRegsPciePhyOvrRxCtrlMutable &pcie_phy_ovr_rx_ctrl() { return pcie_phy_ovr_rx_ctrl_; }





  MiscRegsPciePhyOvrMpllaCtrl0Mutable &pcie_phy_ovr_mplla_ctrl0() { return pcie_phy_ovr_mplla_ctrl0_; }





  MiscRegsPciePhyOvrMpllaCtrl1Mutable &pcie_phy_ovr_mplla_ctrl1() { return pcie_phy_ovr_mplla_ctrl1_; }





  MiscRegsPciePhyOvrMpllaCtrl2Mutable &pcie_phy_ovr_mplla_ctrl2() { return pcie_phy_ovr_mplla_ctrl2_; }





  MiscRegsPciePhyOvrMpllaCtrl3Mutable &pcie_phy_ovr_mplla_ctrl3() { return pcie_phy_ovr_mplla_ctrl3_; }





  MiscRegsPciePhyOvrMpllaCtrl4Mutable &pcie_phy_ovr_mplla_ctrl4() { return pcie_phy_ovr_mplla_ctrl4_; }





  MiscRegsPciePhyOvrMpllbCtrl0Mutable &pcie_phy_ovr_mpllb_ctrl0() { return pcie_phy_ovr_mpllb_ctrl0_; }





  MiscRegsPciePhyOvrMpllbCtrl1Mutable &pcie_phy_ovr_mpllb_ctrl1() { return pcie_phy_ovr_mpllb_ctrl1_; }





  MiscRegsPciePhyOvrMpllbCtrl2Mutable &pcie_phy_ovr_mpllb_ctrl2() { return pcie_phy_ovr_mpllb_ctrl2_; }





  MiscRegsPciePhyOvrMpllbCtrl3Mutable &pcie_phy_ovr_mpllb_ctrl3() { return pcie_phy_ovr_mpllb_ctrl3_; }





  MiscRegsPciePhyOvrMpllbCtrl4Mutable &pcie_phy_ovr_mpllb_ctrl4() { return pcie_phy_ovr_mpllb_ctrl4_; }







  MiscRegsPciePhyOvrRxeq0CtrlG1Mutable &pcie_phy_ovr_rxeq0_ctrl_g1(int j0) { return pcie_phy_ovr_rxeq0_ctrl_g1_[j0]; }







  MiscRegsPciePhyOvrRxeq0CtrlG2Mutable &pcie_phy_ovr_rxeq0_ctrl_g2(int j0) { return pcie_phy_ovr_rxeq0_ctrl_g2_[j0]; }







  MiscRegsPciePhyOvrRxeq0CtrlG3Mutable &pcie_phy_ovr_rxeq0_ctrl_g3(int j0) { return pcie_phy_ovr_rxeq0_ctrl_g3_[j0]; }







  MiscRegsPciePhyOvrRxeq1CtrlG1Mutable &pcie_phy_ovr_rxeq1_ctrl_g1(int j0) { return pcie_phy_ovr_rxeq1_ctrl_g1_[j0]; }







  MiscRegsPciePhyOvrRxeq1CtrlG2Mutable &pcie_phy_ovr_rxeq1_ctrl_g2(int j0) { return pcie_phy_ovr_rxeq1_ctrl_g2_[j0]; }







  MiscRegsPciePhyOvrRxeq1CtrlG3Mutable &pcie_phy_ovr_rxeq1_ctrl_g3(int j0) { return pcie_phy_ovr_rxeq1_ctrl_g3_[j0]; }







  MiscRegsPciePhyOvrTxeqCtrlG1Mutable &pcie_phy_ovr_txeq_ctrl_g1(int j0) { return pcie_phy_ovr_txeq_ctrl_g1_[j0]; }







  MiscRegsPciePhyOvrTxeqCtrlG2Mutable &pcie_phy_ovr_txeq_ctrl_g2(int j0) { return pcie_phy_ovr_txeq_ctrl_g2_[j0]; }







  MiscRegsPciePhyOvrTxeqCtrlG3Mutable &pcie_phy_ovr_txeq_ctrl_g3(int j0) { return pcie_phy_ovr_txeq_ctrl_g3_[j0]; }





  MiscRegsSpiOutdata0Mutable &spi_outdata0() { return spi_outdata0_; }





  MiscRegsSpiOutdata1Mutable &spi_outdata1() { return spi_outdata1_; }






  MiscRegsSpiCommandMutable &spi_command() { return spi_command_; }





  MiscRegsSpiIndataMutable &spi_indata() { return spi_indata_; }





  MiscRegsSpiIdcodeMutable &spi_idcode() { return spi_idcode_; }





  MiscRegsPciectlGen3DefaultMutable &pciectl_gen3_default() { return pciectl_gen3_default_; }





  MiscRegsPcieRxeqCtrlMutable &pcie_rxeq_ctrl() { return pcie_rxeq_ctrl_; }





  MiscRegsBaresyncCtrlMutable &baresync_ctrl() { return baresync_ctrl_; }





  MiscRegsFuseCtrlMutable &fuse_ctrl() { return fuse_ctrl_; }







  MiscRegsFuncFuseMutable &func_fuse(int j0) { return func_fuse_[j0]; }





  MiscRegsFuseStatusMutable &fuse_status() { return fuse_status_; }





  MiscRegsTcuControl0Mutable &tcu_control0() { return tcu_control0_; }





  MiscRegsTcuControl1Mutable &tcu_control1() { return tcu_control1_; }





  MiscRegsTcuControlWrackMutable &tcu_wrack() { return tcu_wrack_; }





  MiscRegsTcuStatusMutable &tcu_status() { return tcu_status_; }










  MiscRegsTv80DebugCtrlMutable &tv80_debug_ctrl() { return tv80_debug_ctrl_; }






  MiscRegsTv80DebugHeadPtrMutable &tv80_debug_head_ptr() { return tv80_debug_head_ptr_; }






  MiscRegsTv80DebugTailPtrMutable &tv80_debug_tail_ptr() { return tv80_debug_tail_ptr_; }








  MiscRegsTv80StallOnErrorMutable &tv80_stall_on_error() { return tv80_stall_on_error_; }





  MiscRegsTv80HaltedStatusMutable &tv80_halted_status() { return tv80_halted_status_; }





  MiscRegsTv80WatchdogCtrlMutable &tv80_watchdog_ctrl() { return tv80_watchdog_ctrl_; }






  MiscRegsTv80WatchdogCountMutable &tv80_watchdog_count() { return tv80_watchdog_count_; }





  MiscRegsTv80AddrMsbMutable &tv80_addr_msb() { return tv80_addr_msb_; }





  MiscRegsPvtCtrlMutable &pvt_ctrl() { return pvt_ctrl_; }





  MiscRegsPvtIntMutable &pvt_int() { return pvt_int_; }





  MiscRegsPvtStatusMutable &pvt_status() { return pvt_status_; }








  MiscRegsSramEccMutable &sram_ecc() { return sram_ecc_; }





  MiscRegsPciephySramSbeErrLogMutable &pciephy_sram_sbe_err_log() { return pciephy_sram_sbe_err_log_; }





  MiscRegsPciephySramMbeErrLogMutable &pciephy_sram_mbe_err_log() { return pciephy_sram_mbe_err_log_; }





  MiscRegsTv80memSbeErrLogMutable &tv80mem_sbe_err_log() { return tv80mem_sbe_err_log_; }





  MiscRegsTv80memMbeErrLogMutable &tv80mem_mbe_err_log() { return tv80mem_mbe_err_log_; }










  MiscRegsPcieDebugCtrlMutable &pcie_debug_ctrl() { return pcie_debug_ctrl_; }






  MiscRegsPcieDebugTailPtrMutable &pcie_debug_tail_ptr() { return pcie_debug_tail_ptr_; }






  MiscRegsPcieDebugHeadPtrMutable &pcie_debug_head_ptr() { return pcie_debug_head_ptr_; }





  MiscRegsFuseVidOverrideMutable &fuse_vid_override() { return fuse_vid_override_; }





  MiscRegsClkpadCtrlMutable &clkpad_ctrl() { return clkpad_ctrl_; }





  MiscRegsBarealtCtrlMutable &barealt_ctrl() { return barealt_ctrl_; }
  MiscRegsMiscIntrMutable &misc_intr() { return misc_intr_; }
  MiscRegsTv80IntrMutable &tv80_intr() { return tv80_intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      soft_reset_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      reset_option_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      pciectl_reset_ctrl_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      dbg_rst_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      gpio_ctrl_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      clkobs_ctrl_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      pps_pll_ctrl0_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      pps_pll_ctrl1_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      core_pll_ctrl0_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      core_pll_ctrl1_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      mac0_pll_ctrl0_.read( offset, data );
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      if (read_callback_) read_callback_();
      mac0_pll_ctrl1_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      mac1_pll_ctrl0_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      mac1_pll_ctrl1_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      pcie_phy_lane_ctrl0_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      pcie_phy_lane_ctrl1_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      pcie_phy_lane_status0_.read( offset, data );
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      if (read_callback_) read_callback_();
      pcie_phy_lane_status1_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      pcie_phy_sram_bypass_.read( offset, data );
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      if (read_callback_) read_callback_();
      pcie_phy_sram_init_status_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      pcie_phy_pipe_config_.read( offset, data );
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      if (read_callback_) read_callback_();
      pcie_phy_rtune_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_mode_.read( offset, data );
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_bs_ref_tx_dco_ctrl_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_rx_ctrl_.read( offset, data );
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_mplla_ctrl0_.read( offset, data );
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_mplla_ctrl1_.read( offset, data );
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_mplla_ctrl2_.read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_mplla_ctrl3_.read( offset, data );
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_mplla_ctrl4_.read( offset, data );
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_mpllb_ctrl0_.read( offset, data );
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_mpllb_ctrl1_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_mpllb_ctrl2_.read( offset, data );
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_mpllb_ctrl3_.read( offset, data );
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_mpllb_ctrl4_.read( offset, data );
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_rxeq0_ctrl_g1_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_rxeq0_ctrl_g2_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_rxeq0_ctrl_g3_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xd0) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_rxeq1_ctrl_g1_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xd0 && offset < 0xe0) {
      offset -= 0xd0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_rxeq1_ctrl_g2_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0xf0) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_rxeq1_ctrl_g3_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xf0 && offset < 0x100) {
      offset -= 0xf0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_txeq_ctrl_g1_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x110) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_txeq_ctrl_g2_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x110 && offset < 0x120) {
      offset -= 0x110;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pcie_phy_ovr_txeq_ctrl_g3_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x120 && offset < 0x124) {
      offset -= 0x120;
      if (read_callback_) read_callback_();
      spi_outdata0_.read( offset, data );
    }
    else if (offset >= 0x124 && offset < 0x128) {
      offset -= 0x124;
      if (read_callback_) read_callback_();
      spi_outdata1_.read( offset, data );
    }
    else if (offset >= 0x128 && offset < 0x12c) {
      offset -= 0x128;
      if (read_callback_) read_callback_();
      spi_command_.read( offset, data );
    }
    else if (offset >= 0x12c && offset < 0x130) {
      offset -= 0x12c;
      if (read_callback_) read_callback_();
      spi_indata_.read( offset, data );
    }
    else if (offset >= 0x130 && offset < 0x134) {
      offset -= 0x130;
      if (read_callback_) read_callback_();
      spi_idcode_.read( offset, data );
    }
    else if (offset >= 0x134 && offset < 0x138) {
      offset -= 0x134;
      if (read_callback_) read_callback_();
      pciectl_gen3_default_.read( offset, data );
    }
    else if (offset >= 0x138 && offset < 0x13c) {
      offset -= 0x138;
      if (read_callback_) read_callback_();
      pcie_rxeq_ctrl_.read( offset, data );
    }
    else if (offset >= 0x13c && offset < 0x140) {
      offset -= 0x13c;
      if (read_callback_) read_callback_();
      baresync_ctrl_.read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      if (read_callback_) read_callback_();
      fuse_ctrl_.read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x1c0) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      func_fuse_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      if (read_callback_) read_callback_();
      fuse_status_.read( offset, data );
    }
    else if (offset >= 0x1c4 && offset < 0x1c8) {
      offset -= 0x1c4;
      if (read_callback_) read_callback_();
      tcu_control0_.read( offset, data );
    }
    else if (offset >= 0x1c8 && offset < 0x1cc) {
      offset -= 0x1c8;
      if (read_callback_) read_callback_();
      tcu_control1_.read( offset, data );
    }
    else if (offset >= 0x1cc && offset < 0x1d0) {
      offset -= 0x1cc;
      if (read_callback_) read_callback_();
      tcu_wrack_.read( offset, data );
    }
    else if (offset >= 0x1d0 && offset < 0x1d4) {
      offset -= 0x1d0;
      if (read_callback_) read_callback_();
      tcu_status_.read( offset, data );
    }
    else if (offset >= 0x1d4 && offset < 0x1d8) {
      offset -= 0x1d4;
      if (read_callback_) read_callback_();
      tv80_debug_ctrl_.read( offset, data );
    }
    else if (offset >= 0x1d8 && offset < 0x1dc) {
      offset -= 0x1d8;
      if (read_callback_) read_callback_();
      tv80_debug_head_ptr_.read( offset, data );
    }
    else if (offset >= 0x1dc && offset < 0x1e0) {
      offset -= 0x1dc;
      if (read_callback_) read_callback_();
      tv80_debug_tail_ptr_.read( offset, data );
    }
    else if (offset >= 0x1e0 && offset < 0x1e4) {
      offset -= 0x1e0;
      if (read_callback_) read_callback_();
      tv80_stall_on_error_.read( offset, data );
    }
    else if (offset >= 0x1e4 && offset < 0x1e8) {
      offset -= 0x1e4;
      if (read_callback_) read_callback_();
      tv80_halted_status_.read( offset, data );
    }
    else if (offset >= 0x1e8 && offset < 0x1ec) {
      offset -= 0x1e8;
      if (read_callback_) read_callback_();
      tv80_watchdog_ctrl_.read( offset, data );
    }
    else if (offset >= 0x1ec && offset < 0x1f0) {
      offset -= 0x1ec;
      if (read_callback_) read_callback_();
      tv80_watchdog_count_.read( offset, data );
    }
    else if (offset >= 0x1f0 && offset < 0x1f4) {
      offset -= 0x1f0;
      if (read_callback_) read_callback_();
      tv80_addr_msb_.read( offset, data );
    }
    else if (offset >= 0x1f4 && offset < 0x1f8) {
      offset -= 0x1f4;
      if (read_callback_) read_callback_();
      pvt_ctrl_.read( offset, data );
    }
    else if (offset >= 0x1f8 && offset < 0x1fc) {
      offset -= 0x1f8;
      if (read_callback_) read_callback_();
      pvt_int_.read( offset, data );
    }
    else if (offset >= 0x1fc && offset < 0x200) {
      offset -= 0x1fc;
      if (read_callback_) read_callback_();
      pvt_status_.read( offset, data );
    }
    else if (offset >= 0x214 && offset < 0x218) {
      offset -= 0x214;
      if (read_callback_) read_callback_();
      sram_ecc_.read( offset, data );
    }
    else if (offset >= 0x218 && offset < 0x21c) {
      offset -= 0x218;
      if (read_callback_) read_callback_();
      pciephy_sram_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x21c && offset < 0x220) {
      offset -= 0x21c;
      if (read_callback_) read_callback_();
      pciephy_sram_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x220 && offset < 0x224) {
      offset -= 0x220;
      if (read_callback_) read_callback_();
      tv80mem_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x224 && offset < 0x228) {
      offset -= 0x224;
      if (read_callback_) read_callback_();
      tv80mem_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x254 && offset < 0x258) {
      offset -= 0x254;
      if (read_callback_) read_callback_();
      pcie_debug_ctrl_.read( offset, data );
    }
    else if (offset >= 0x258 && offset < 0x25c) {
      offset -= 0x258;
      if (read_callback_) read_callback_();
      pcie_debug_tail_ptr_.read( offset, data );
    }
    else if (offset >= 0x25c && offset < 0x260) {
      offset -= 0x25c;
      if (read_callback_) read_callback_();
      pcie_debug_head_ptr_.read( offset, data );
    }
    else if (offset >= 0x260 && offset < 0x264) {
      offset -= 0x260;
      if (read_callback_) read_callback_();
      fuse_vid_override_.read( offset, data );
    }
    else if (offset >= 0x264 && offset < 0x268) {
      offset -= 0x264;
      if (read_callback_) read_callback_();
      clkpad_ctrl_.read( offset, data );
    }
    else if (offset >= 0x268 && offset < 0x26c) {
      offset -= 0x268;
      if (read_callback_) read_callback_();
      barealt_ctrl_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x214) {
      offset -= 0x200;
      if (read_callback_) read_callback_();
      misc_intr_.read( offset, data );
    }
    else if (offset >= 0x240 && offset < 0x254) {
      offset -= 0x240;
      if (read_callback_) read_callback_();
      tv80_intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      soft_reset_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      reset_option_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      pciectl_reset_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      dbg_rst_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      gpio_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      clkobs_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      pps_pll_ctrl0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      pps_pll_ctrl1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      core_pll_ctrl0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      core_pll_ctrl1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      mac0_pll_ctrl0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      mac0_pll_ctrl1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      mac1_pll_ctrl0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      mac1_pll_ctrl1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      pcie_phy_lane_ctrl0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      pcie_phy_lane_ctrl1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      pcie_phy_lane_status0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      pcie_phy_lane_status1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      pcie_phy_sram_bypass_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      pcie_phy_sram_init_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      pcie_phy_pipe_config_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      pcie_phy_rtune_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      pcie_phy_ovr_mode_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      pcie_phy_ovr_bs_ref_tx_dco_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      pcie_phy_ovr_rx_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      pcie_phy_ovr_mplla_ctrl0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      pcie_phy_ovr_mplla_ctrl1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      pcie_phy_ovr_mplla_ctrl2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      pcie_phy_ovr_mplla_ctrl3_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      pcie_phy_ovr_mplla_ctrl4_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      pcie_phy_ovr_mpllb_ctrl0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      pcie_phy_ovr_mpllb_ctrl1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      pcie_phy_ovr_mpllb_ctrl2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      pcie_phy_ovr_mpllb_ctrl3_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      pcie_phy_ovr_mpllb_ctrl4_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pcie_phy_ovr_rxeq0_ctrl_g1_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pcie_phy_ovr_rxeq0_ctrl_g2_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pcie_phy_ovr_rxeq0_ctrl_g3_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xd0) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pcie_phy_ovr_rxeq1_ctrl_g1_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd0 && offset < 0xe0) {
      offset -= 0xd0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pcie_phy_ovr_rxeq1_ctrl_g2_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0xf0) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pcie_phy_ovr_rxeq1_ctrl_g3_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf0 && offset < 0x100) {
      offset -= 0xf0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pcie_phy_ovr_txeq_ctrl_g1_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x110) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pcie_phy_ovr_txeq_ctrl_g2_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x110 && offset < 0x120) {
      offset -= 0x110;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pcie_phy_ovr_txeq_ctrl_g3_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x120 && offset < 0x124) {
      offset -= 0x120;
      spi_outdata0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x124 && offset < 0x128) {
      offset -= 0x124;
      spi_outdata1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x128 && offset < 0x12c) {
      offset -= 0x128;
      spi_command_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x12c && offset < 0x130) {
      offset -= 0x12c;
      spi_indata_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x130 && offset < 0x134) {
      offset -= 0x130;
      spi_idcode_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x134 && offset < 0x138) {
      offset -= 0x134;
      pciectl_gen3_default_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x138 && offset < 0x13c) {
      offset -= 0x138;
      pcie_rxeq_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x13c && offset < 0x140) {
      offset -= 0x13c;
      baresync_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      fuse_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x1c0) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      func_fuse_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      fuse_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c4 && offset < 0x1c8) {
      offset -= 0x1c4;
      tcu_control0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c8 && offset < 0x1cc) {
      offset -= 0x1c8;
      tcu_control1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1cc && offset < 0x1d0) {
      offset -= 0x1cc;
      tcu_wrack_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1d0 && offset < 0x1d4) {
      offset -= 0x1d0;
      tcu_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1d4 && offset < 0x1d8) {
      offset -= 0x1d4;
      tv80_debug_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1d8 && offset < 0x1dc) {
      offset -= 0x1d8;
      tv80_debug_head_ptr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1dc && offset < 0x1e0) {
      offset -= 0x1dc;
      tv80_debug_tail_ptr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e0 && offset < 0x1e4) {
      offset -= 0x1e0;
      tv80_stall_on_error_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e4 && offset < 0x1e8) {
      offset -= 0x1e4;
      tv80_halted_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e8 && offset < 0x1ec) {
      offset -= 0x1e8;
      tv80_watchdog_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1ec && offset < 0x1f0) {
      offset -= 0x1ec;
      tv80_watchdog_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1f0 && offset < 0x1f4) {
      offset -= 0x1f0;
      tv80_addr_msb_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1f4 && offset < 0x1f8) {
      offset -= 0x1f4;
      pvt_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1f8 && offset < 0x1fc) {
      offset -= 0x1f8;
      pvt_int_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1fc && offset < 0x200) {
      offset -= 0x1fc;
      pvt_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x214 && offset < 0x218) {
      offset -= 0x214;
      sram_ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x218 && offset < 0x21c) {
      offset -= 0x218;
      pciephy_sram_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x21c && offset < 0x220) {
      offset -= 0x21c;
      pciephy_sram_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x220 && offset < 0x224) {
      offset -= 0x220;
      tv80mem_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x224 && offset < 0x228) {
      offset -= 0x224;
      tv80mem_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x254 && offset < 0x258) {
      offset -= 0x254;
      pcie_debug_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x258 && offset < 0x25c) {
      offset -= 0x258;
      pcie_debug_tail_ptr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x25c && offset < 0x260) {
      offset -= 0x25c;
      pcie_debug_head_ptr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x260 && offset < 0x264) {
      offset -= 0x260;
      fuse_vid_override_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x264 && offset < 0x268) {
      offset -= 0x264;
      clkpad_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x268 && offset < 0x26c) {
      offset -= 0x268;
      barealt_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x214) {
      offset -= 0x200;
      misc_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x240 && offset < 0x254) {
      offset -= 0x240;
      tv80_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    soft_reset_.reset();
    reset_option_.reset();
    pciectl_reset_ctrl_.reset();
    dbg_rst_.reset();
    gpio_ctrl_.reset();
    clkobs_ctrl_.reset();
    pps_pll_ctrl0_.reset();
    pps_pll_ctrl1_.reset();
    core_pll_ctrl0_.reset();
    core_pll_ctrl1_.reset();
    mac0_pll_ctrl0_.reset();
    mac0_pll_ctrl1_.reset();
    mac1_pll_ctrl0_.reset();
    mac1_pll_ctrl1_.reset();
    pcie_phy_lane_ctrl0_.reset();
    pcie_phy_lane_ctrl1_.reset();
    pcie_phy_lane_status0_.reset();
    pcie_phy_lane_status1_.reset();
    pcie_phy_sram_bypass_.reset();
    pcie_phy_sram_init_status_.reset();
    pcie_phy_pipe_config_.reset();
    pcie_phy_rtune_.reset();
    pcie_phy_ovr_mode_.reset();
    pcie_phy_ovr_bs_ref_tx_dco_ctrl_.reset();
    pcie_phy_ovr_rx_ctrl_.reset();
    pcie_phy_ovr_mplla_ctrl0_.reset();
    pcie_phy_ovr_mplla_ctrl1_.reset();
    pcie_phy_ovr_mplla_ctrl2_.reset();
    pcie_phy_ovr_mplla_ctrl3_.reset();
    pcie_phy_ovr_mplla_ctrl4_.reset();
    pcie_phy_ovr_mpllb_ctrl0_.reset();
    pcie_phy_ovr_mpllb_ctrl1_.reset();
    pcie_phy_ovr_mpllb_ctrl2_.reset();
    pcie_phy_ovr_mpllb_ctrl3_.reset();
    pcie_phy_ovr_mpllb_ctrl4_.reset();
    for (auto &f0 : pcie_phy_ovr_rxeq0_ctrl_g1_) {
      f0.reset();
    }
    for (auto &f0 : pcie_phy_ovr_rxeq0_ctrl_g2_) {
      f0.reset();
    }
    for (auto &f0 : pcie_phy_ovr_rxeq0_ctrl_g3_) {
      f0.reset();
    }
    for (auto &f0 : pcie_phy_ovr_rxeq1_ctrl_g1_) {
      f0.reset();
    }
    for (auto &f0 : pcie_phy_ovr_rxeq1_ctrl_g2_) {
      f0.reset();
    }
    for (auto &f0 : pcie_phy_ovr_rxeq1_ctrl_g3_) {
      f0.reset();
    }
    for (auto &f0 : pcie_phy_ovr_txeq_ctrl_g1_) {
      f0.reset();
    }
    for (auto &f0 : pcie_phy_ovr_txeq_ctrl_g2_) {
      f0.reset();
    }
    for (auto &f0 : pcie_phy_ovr_txeq_ctrl_g3_) {
      f0.reset();
    }
    spi_outdata0_.reset();
    spi_outdata1_.reset();
    spi_command_.reset();
    spi_indata_.reset();
    spi_idcode_.reset();
    pciectl_gen3_default_.reset();
    pcie_rxeq_ctrl_.reset();
    baresync_ctrl_.reset();
    fuse_ctrl_.reset();
    for (auto &f0 : func_fuse_) {
      f0.reset();
    }
    fuse_status_.reset();
    tcu_control0_.reset();
    tcu_control1_.reset();
    tcu_wrack_.reset();
    tcu_status_.reset();
    tv80_debug_ctrl_.reset();
    tv80_debug_head_ptr_.reset();
    tv80_debug_tail_ptr_.reset();
    tv80_stall_on_error_.reset();
    tv80_halted_status_.reset();
    tv80_watchdog_ctrl_.reset();
    tv80_watchdog_count_.reset();
    tv80_addr_msb_.reset();
    pvt_ctrl_.reset();
    pvt_int_.reset();
    pvt_status_.reset();
    sram_ecc_.reset();
    pciephy_sram_sbe_err_log_.reset();
    pciephy_sram_mbe_err_log_.reset();
    tv80mem_sbe_err_log_.reset();
    tv80mem_mbe_err_log_.reset();
    pcie_debug_ctrl_.reset();
    pcie_debug_tail_ptr_.reset();
    pcie_debug_head_ptr_.reset();
    fuse_vid_override_.reset();
    clkpad_ctrl_.reset();
    barealt_ctrl_.reset();
    misc_intr_.reset();
    tv80_intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += soft_reset_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += reset_option_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += pciectl_reset_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += dbg_rst_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += gpio_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += clkobs_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += pps_pll_ctrl0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += pps_pll_ctrl1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += core_pll_ctrl0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += core_pll_ctrl1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += mac0_pll_ctrl0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      r += mac0_pll_ctrl1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += mac1_pll_ctrl0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += mac1_pll_ctrl1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += pcie_phy_lane_ctrl0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += pcie_phy_lane_ctrl1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      r += pcie_phy_lane_status0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      r += pcie_phy_lane_status1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      r += pcie_phy_sram_bypass_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      r += pcie_phy_sram_init_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      r += pcie_phy_pipe_config_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      r += pcie_phy_rtune_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      r += pcie_phy_ovr_mode_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      r += pcie_phy_ovr_bs_ref_tx_dco_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      r += pcie_phy_ovr_rx_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      r += pcie_phy_ovr_mplla_ctrl0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      r += pcie_phy_ovr_mplla_ctrl1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      r += pcie_phy_ovr_mplla_ctrl2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      r += pcie_phy_ovr_mplla_ctrl3_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      r += pcie_phy_ovr_mplla_ctrl4_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      r += pcie_phy_ovr_mpllb_ctrl0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      r += pcie_phy_ovr_mpllb_ctrl1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      r += pcie_phy_ovr_mpllb_ctrl2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      r += pcie_phy_ovr_mpllb_ctrl3_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      r += pcie_phy_ovr_mpllb_ctrl4_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pcie_phy_ovr_rxeq0_ctrl_g1_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pcie_phy_ovr_rxeq0_ctrl_g2_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pcie_phy_ovr_rxeq0_ctrl_g3_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xd0) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pcie_phy_ovr_rxeq1_ctrl_g1_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd0 && offset < 0xe0) {
      offset -= 0xd0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pcie_phy_ovr_rxeq1_ctrl_g2_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0xf0) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pcie_phy_ovr_rxeq1_ctrl_g3_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf0 && offset < 0x100) {
      offset -= 0xf0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pcie_phy_ovr_txeq_ctrl_g1_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x110) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pcie_phy_ovr_txeq_ctrl_g2_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x110 && offset < 0x120) {
      offset -= 0x110;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pcie_phy_ovr_txeq_ctrl_g3_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x120 && offset < 0x124) {
      offset -= 0x120;
      r += spi_outdata0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x124 && offset < 0x128) {
      offset -= 0x124;
      r += spi_outdata1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x128 && offset < 0x12c) {
      offset -= 0x128;
      r += spi_command_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x12c && offset < 0x130) {
      offset -= 0x12c;
      r += spi_indata_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x130 && offset < 0x134) {
      offset -= 0x130;
      r += spi_idcode_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x134 && offset < 0x138) {
      offset -= 0x134;
      r += pciectl_gen3_default_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x138 && offset < 0x13c) {
      offset -= 0x138;
      r += pcie_rxeq_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x13c && offset < 0x140) {
      offset -= 0x13c;
      r += baresync_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      r += fuse_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x1c0) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += func_fuse_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      r += fuse_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c4 && offset < 0x1c8) {
      offset -= 0x1c4;
      r += tcu_control0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c8 && offset < 0x1cc) {
      offset -= 0x1c8;
      r += tcu_control1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1cc && offset < 0x1d0) {
      offset -= 0x1cc;
      r += tcu_wrack_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1d0 && offset < 0x1d4) {
      offset -= 0x1d0;
      r += tcu_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1d4 && offset < 0x1d8) {
      offset -= 0x1d4;
      r += tv80_debug_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1d8 && offset < 0x1dc) {
      offset -= 0x1d8;
      r += tv80_debug_head_ptr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1dc && offset < 0x1e0) {
      offset -= 0x1dc;
      r += tv80_debug_tail_ptr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e0 && offset < 0x1e4) {
      offset -= 0x1e0;
      r += tv80_stall_on_error_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e4 && offset < 0x1e8) {
      offset -= 0x1e4;
      r += tv80_halted_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e8 && offset < 0x1ec) {
      offset -= 0x1e8;
      r += tv80_watchdog_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1ec && offset < 0x1f0) {
      offset -= 0x1ec;
      r += tv80_watchdog_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1f0 && offset < 0x1f4) {
      offset -= 0x1f0;
      r += tv80_addr_msb_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1f4 && offset < 0x1f8) {
      offset -= 0x1f4;
      r += pvt_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1f8 && offset < 0x1fc) {
      offset -= 0x1f8;
      r += pvt_int_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1fc && offset < 0x200) {
      offset -= 0x1fc;
      r += pvt_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x214 && offset < 0x218) {
      offset -= 0x214;
      r += sram_ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x218 && offset < 0x21c) {
      offset -= 0x218;
      r += pciephy_sram_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x21c && offset < 0x220) {
      offset -= 0x21c;
      r += pciephy_sram_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x220 && offset < 0x224) {
      offset -= 0x220;
      r += tv80mem_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x224 && offset < 0x228) {
      offset -= 0x224;
      r += tv80mem_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x254 && offset < 0x258) {
      offset -= 0x254;
      r += pcie_debug_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x258 && offset < 0x25c) {
      offset -= 0x258;
      r += pcie_debug_tail_ptr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x25c && offset < 0x260) {
      offset -= 0x25c;
      r += pcie_debug_head_ptr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x260 && offset < 0x264) {
      offset -= 0x260;
      r += fuse_vid_override_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x264 && offset < 0x268) {
      offset -= 0x264;
      r += clkpad_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x268 && offset < 0x26c) {
      offset -= 0x268;
      r += barealt_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x214) {
      offset -= 0x200;
      r += misc_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x240 && offset < 0x254) {
      offset -= 0x240;
      r += tv80_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += soft_reset_.to_string(print_zeros,indent_string) ;
    r += reset_option_.to_string(print_zeros,indent_string) ;
    r += pciectl_reset_ctrl_.to_string(print_zeros,indent_string) ;
    r += dbg_rst_.to_string(print_zeros,indent_string) ;
    r += gpio_ctrl_.to_string(print_zeros,indent_string) ;
    r += clkobs_ctrl_.to_string(print_zeros,indent_string) ;
    r += pps_pll_ctrl0_.to_string(print_zeros,indent_string) ;
    r += pps_pll_ctrl1_.to_string(print_zeros,indent_string) ;
    r += core_pll_ctrl0_.to_string(print_zeros,indent_string) ;
    r += core_pll_ctrl1_.to_string(print_zeros,indent_string) ;
    r += mac0_pll_ctrl0_.to_string(print_zeros,indent_string) ;
    r += mac0_pll_ctrl1_.to_string(print_zeros,indent_string) ;
    r += mac1_pll_ctrl0_.to_string(print_zeros,indent_string) ;
    r += mac1_pll_ctrl1_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_lane_ctrl0_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_lane_ctrl1_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_lane_status0_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_lane_status1_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_sram_bypass_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_sram_init_status_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_pipe_config_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_rtune_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_ovr_mode_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_ovr_bs_ref_tx_dco_ctrl_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_ovr_rx_ctrl_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_ovr_mplla_ctrl0_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_ovr_mplla_ctrl1_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_ovr_mplla_ctrl2_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_ovr_mplla_ctrl3_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_ovr_mplla_ctrl4_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_ovr_mpllb_ctrl0_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_ovr_mpllb_ctrl1_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_ovr_mpllb_ctrl2_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_ovr_mpllb_ctrl3_.to_string(print_zeros,indent_string) ;
    r += pcie_phy_ovr_mpllb_ctrl4_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += pcie_phy_ovr_rxeq0_ctrl_g1_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += pcie_phy_ovr_rxeq0_ctrl_g2_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += pcie_phy_ovr_rxeq0_ctrl_g3_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += pcie_phy_ovr_rxeq1_ctrl_g1_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += pcie_phy_ovr_rxeq1_ctrl_g2_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += pcie_phy_ovr_rxeq1_ctrl_g3_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += pcie_phy_ovr_txeq_ctrl_g1_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += pcie_phy_ovr_txeq_ctrl_g2_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += pcie_phy_ovr_txeq_ctrl_g3_[a0].to_string(print_zeros,indent_string) ;
    }
    r += spi_outdata0_.to_string(print_zeros,indent_string) ;
    r += spi_outdata1_.to_string(print_zeros,indent_string) ;
    r += spi_command_.to_string(print_zeros,indent_string) ;
    r += spi_indata_.to_string(print_zeros,indent_string) ;
    r += spi_idcode_.to_string(print_zeros,indent_string) ;
    r += pciectl_gen3_default_.to_string(print_zeros,indent_string) ;
    r += pcie_rxeq_ctrl_.to_string(print_zeros,indent_string) ;
    r += baresync_ctrl_.to_string(print_zeros,indent_string) ;
    r += fuse_ctrl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<16;++a0) {
      r += func_fuse_[a0].to_string(print_zeros,indent_string) ;
    }
    r += fuse_status_.to_string(print_zeros,indent_string) ;
    r += tcu_control0_.to_string(print_zeros,indent_string) ;
    r += tcu_control1_.to_string(print_zeros,indent_string) ;
    r += tcu_wrack_.to_string(print_zeros,indent_string) ;
    r += tcu_status_.to_string(print_zeros,indent_string) ;
    r += tv80_debug_ctrl_.to_string(print_zeros,indent_string) ;
    r += tv80_debug_head_ptr_.to_string(print_zeros,indent_string) ;
    r += tv80_debug_tail_ptr_.to_string(print_zeros,indent_string) ;
    r += tv80_stall_on_error_.to_string(print_zeros,indent_string) ;
    r += tv80_halted_status_.to_string(print_zeros,indent_string) ;
    r += tv80_watchdog_ctrl_.to_string(print_zeros,indent_string) ;
    r += tv80_watchdog_count_.to_string(print_zeros,indent_string) ;
    r += tv80_addr_msb_.to_string(print_zeros,indent_string) ;
    r += pvt_ctrl_.to_string(print_zeros,indent_string) ;
    r += pvt_int_.to_string(print_zeros,indent_string) ;
    r += pvt_status_.to_string(print_zeros,indent_string) ;
    r += sram_ecc_.to_string(print_zeros,indent_string) ;
    r += pciephy_sram_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += pciephy_sram_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += tv80mem_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += tv80mem_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += pcie_debug_ctrl_.to_string(print_zeros,indent_string) ;
    r += pcie_debug_tail_ptr_.to_string(print_zeros,indent_string) ;
    r += pcie_debug_head_ptr_.to_string(print_zeros,indent_string) ;
    r += fuse_vid_override_.to_string(print_zeros,indent_string) ;
    r += clkpad_ctrl_.to_string(print_zeros,indent_string) ;
    r += barealt_ctrl_.to_string(print_zeros,indent_string) ;
    r += misc_intr_.to_string(print_zeros,indent_string) ;
    r += tv80_intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  MiscRegsSoftResetMutable soft_reset_;
  MiscRegsResetOptionMutable reset_option_;
  MiscRegsPciectlResetCtrlMutable pciectl_reset_ctrl_;
  MiscRegsDbgRstMutable dbg_rst_;
  MiscRegsGpioCtrlMutable gpio_ctrl_;
  MiscRegsClkobsCtrlMutable clkobs_ctrl_;
  MiscRegsPpsPllCtrl0Mutable pps_pll_ctrl0_;
  MiscRegsPpsPllCtrl1Mutable pps_pll_ctrl1_;
  MiscRegsCorePllCtrl0Mutable core_pll_ctrl0_;
  MiscRegsCorePllCtrl1Mutable core_pll_ctrl1_;
  MiscRegsMac0PllCtrl0Mutable mac0_pll_ctrl0_;
  MiscRegsMac0PllCtrl1Mutable mac0_pll_ctrl1_;
  MiscRegsMac1PllCtrl0Mutable mac1_pll_ctrl0_;
  MiscRegsMac1PllCtrl1Mutable mac1_pll_ctrl1_;
  MiscRegsPciePhyLaneCtrl0Mutable pcie_phy_lane_ctrl0_;
  MiscRegsPciePhyLaneCtrl1Mutable pcie_phy_lane_ctrl1_;
  MiscRegsPciePhyLaneStatus0Mutable pcie_phy_lane_status0_;
  MiscRegsPciePhyLaneStatus1Mutable pcie_phy_lane_status1_;
  MiscRegsPciePhySramBypassMutable pcie_phy_sram_bypass_;
  MiscRegsPciePhySramInitStatusMutable pcie_phy_sram_init_status_;
  MiscRegsPciePhyPipeConfigMutable pcie_phy_pipe_config_;
  MiscRegsPciePhyRtuneMutable pcie_phy_rtune_;
  MiscRegsPciePhyOvrModeMutable pcie_phy_ovr_mode_;
  MiscRegsPciePhyOvrBsRefTxDcoCtrlMutable pcie_phy_ovr_bs_ref_tx_dco_ctrl_;
  MiscRegsPciePhyOvrRxCtrlMutable pcie_phy_ovr_rx_ctrl_;
  MiscRegsPciePhyOvrMpllaCtrl0Mutable pcie_phy_ovr_mplla_ctrl0_;
  MiscRegsPciePhyOvrMpllaCtrl1Mutable pcie_phy_ovr_mplla_ctrl1_;
  MiscRegsPciePhyOvrMpllaCtrl2Mutable pcie_phy_ovr_mplla_ctrl2_;
  MiscRegsPciePhyOvrMpllaCtrl3Mutable pcie_phy_ovr_mplla_ctrl3_;
  MiscRegsPciePhyOvrMpllaCtrl4Mutable pcie_phy_ovr_mplla_ctrl4_;
  MiscRegsPciePhyOvrMpllbCtrl0Mutable pcie_phy_ovr_mpllb_ctrl0_;
  MiscRegsPciePhyOvrMpllbCtrl1Mutable pcie_phy_ovr_mpllb_ctrl1_;
  MiscRegsPciePhyOvrMpllbCtrl2Mutable pcie_phy_ovr_mpllb_ctrl2_;
  MiscRegsPciePhyOvrMpllbCtrl3Mutable pcie_phy_ovr_mpllb_ctrl3_;
  MiscRegsPciePhyOvrMpllbCtrl4Mutable pcie_phy_ovr_mpllb_ctrl4_;
  std::array< MiscRegsPciePhyOvrRxeq0CtrlG1Mutable, 4 > pcie_phy_ovr_rxeq0_ctrl_g1_;
  std::array< MiscRegsPciePhyOvrRxeq0CtrlG2Mutable, 4 > pcie_phy_ovr_rxeq0_ctrl_g2_;
  std::array< MiscRegsPciePhyOvrRxeq0CtrlG3Mutable, 4 > pcie_phy_ovr_rxeq0_ctrl_g3_;
  std::array< MiscRegsPciePhyOvrRxeq1CtrlG1Mutable, 4 > pcie_phy_ovr_rxeq1_ctrl_g1_;
  std::array< MiscRegsPciePhyOvrRxeq1CtrlG2Mutable, 4 > pcie_phy_ovr_rxeq1_ctrl_g2_;
  std::array< MiscRegsPciePhyOvrRxeq1CtrlG3Mutable, 4 > pcie_phy_ovr_rxeq1_ctrl_g3_;
  std::array< MiscRegsPciePhyOvrTxeqCtrlG1Mutable, 4 > pcie_phy_ovr_txeq_ctrl_g1_;
  std::array< MiscRegsPciePhyOvrTxeqCtrlG2Mutable, 4 > pcie_phy_ovr_txeq_ctrl_g2_;
  std::array< MiscRegsPciePhyOvrTxeqCtrlG3Mutable, 4 > pcie_phy_ovr_txeq_ctrl_g3_;
  MiscRegsSpiOutdata0Mutable spi_outdata0_;
  MiscRegsSpiOutdata1Mutable spi_outdata1_;
  MiscRegsSpiCommandMutable spi_command_;
  MiscRegsSpiIndataMutable spi_indata_;
  MiscRegsSpiIdcodeMutable spi_idcode_;
  MiscRegsPciectlGen3DefaultMutable pciectl_gen3_default_;
  MiscRegsPcieRxeqCtrlMutable pcie_rxeq_ctrl_;
  MiscRegsBaresyncCtrlMutable baresync_ctrl_;
  MiscRegsFuseCtrlMutable fuse_ctrl_;
  std::array< MiscRegsFuncFuseMutable, 16 > func_fuse_;
  MiscRegsFuseStatusMutable fuse_status_;
  MiscRegsTcuControl0Mutable tcu_control0_;
  MiscRegsTcuControl1Mutable tcu_control1_;
  MiscRegsTcuControlWrackMutable tcu_wrack_;
  MiscRegsTcuStatusMutable tcu_status_;
  MiscRegsTv80DebugCtrlMutable tv80_debug_ctrl_;
  MiscRegsTv80DebugHeadPtrMutable tv80_debug_head_ptr_;
  MiscRegsTv80DebugTailPtrMutable tv80_debug_tail_ptr_;
  MiscRegsTv80StallOnErrorMutable tv80_stall_on_error_;
  MiscRegsTv80HaltedStatusMutable tv80_halted_status_;
  MiscRegsTv80WatchdogCtrlMutable tv80_watchdog_ctrl_;
  MiscRegsTv80WatchdogCountMutable tv80_watchdog_count_;
  MiscRegsTv80AddrMsbMutable tv80_addr_msb_;
  MiscRegsPvtCtrlMutable pvt_ctrl_;
  MiscRegsPvtIntMutable pvt_int_;
  MiscRegsPvtStatusMutable pvt_status_;
  MiscRegsSramEccMutable sram_ecc_;
  MiscRegsPciephySramSbeErrLogMutable pciephy_sram_sbe_err_log_;
  MiscRegsPciephySramMbeErrLogMutable pciephy_sram_mbe_err_log_;
  MiscRegsTv80memSbeErrLogMutable tv80mem_sbe_err_log_;
  MiscRegsTv80memMbeErrLogMutable tv80mem_mbe_err_log_;
  MiscRegsPcieDebugCtrlMutable pcie_debug_ctrl_;
  MiscRegsPcieDebugTailPtrMutable pcie_debug_tail_ptr_;
  MiscRegsPcieDebugHeadPtrMutable pcie_debug_head_ptr_;
  MiscRegsFuseVidOverrideMutable fuse_vid_override_;
  MiscRegsClkpadCtrlMutable clkpad_ctrl_;
  MiscRegsBarealtCtrlMutable barealt_ctrl_;
  MiscRegsMiscIntrMutable misc_intr_;
  MiscRegsTv80IntrMutable tv80_intr_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x80000; // to get to misc_regs
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MISC_REGS_MUTABLE_H__
