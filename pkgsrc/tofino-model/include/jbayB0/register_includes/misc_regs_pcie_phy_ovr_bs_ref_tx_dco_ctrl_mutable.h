/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MISC_REGS_PCIE_PHY_OVR_BS_REF_TX_DCO_CTRL_MUTABLE_H__
#define __REGISTER_INCLUDES_MISC_REGS_PCIE_PHY_OVR_BS_REF_TX_DCO_CTRL_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class MiscRegsPciePhyOvrBsRefTxDcoCtrlMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MiscRegsPciePhyOvrBsRefTxDcoCtrlMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, true, write_callback, read_callback, std::string("MiscRegsPciePhyOvrBsRefTxDcoCtrlMutable"))
    {
    }
  MiscRegsPciePhyOvrBsRefTxDcoCtrlMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MiscRegsPciePhyOvrBsRefTxDcoCtrlMutable")
    {
    }
public:








  uint8_t bs_ctrl() { return bs_ctrl_; }
  void bs_ctrl(const uint8_t &v) { bs_ctrl_=v; }






  uint8_t ref_ctrl() { return ref_ctrl_; }
  void ref_ctrl(const uint8_t &v) { ref_ctrl_=v; }






  uint8_t tx_ctrl() { return tx_ctrl_; }
  void tx_ctrl(const uint8_t &v) { tx_ctrl_=v; }






  uint8_t dco_ctrl() { return dco_ctrl_; }
  void dco_ctrl(const uint8_t &v) { dco_ctrl_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (bs_ctrl_ & 0x7f);
    *data |= ((ref_ctrl_ & 0x1f) << 8);
    *data |= ((tx_ctrl_ & 0x3f) << 16);
    *data |= (dco_ctrl_ << 24);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    bs_ctrl_ = (data & 0x7f);
    ref_ctrl_ = ((data >> 8) & 0x1f);
    tx_ctrl_ = ((data >> 16) & 0x3f);
    dco_ctrl_ = (data >> 24);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    bs_ctrl_ = 0x17;
    ref_ctrl_ = 0x3;
    tx_ctrl_ = 0x1a;
    dco_ctrl_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MiscRegsPciePhyOvrBsRefTxDcoCtrlMutable") + ":\n";
    r += indent_string + "  " + std::string("bs_ctrl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bs_ctrl_) ) + "\n";
    all_zeros &= (0 == bs_ctrl_);
    r += indent_string + "  " + std::string("ref_ctrl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ref_ctrl_) ) + "\n";
    all_zeros &= (0 == ref_ctrl_);
    r += indent_string + "  " + std::string("tx_ctrl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_ctrl_) ) + "\n";
    all_zeros &= (0 == tx_ctrl_);
    r += indent_string + "  " + std::string("dco_ctrl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dco_ctrl_) ) + "\n";
    all_zeros &= (0 == dco_ctrl_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MiscRegsPciePhyOvrBsRefTxDcoCtrlMutable") + ":\n";
    r += indent_string + "  " + std::string("bs_ctrl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bs_ctrl_) ) + "\n";
    all_zeros &= (0 == bs_ctrl_);
    r += indent_string + "  " + std::string("ref_ctrl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ref_ctrl_) ) + "\n";
    all_zeros &= (0 == ref_ctrl_);
    r += indent_string + "  " + std::string("tx_ctrl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_ctrl_) ) + "\n";
    all_zeros &= (0 == tx_ctrl_);
    r += indent_string + "  " + std::string("dco_ctrl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dco_ctrl_) ) + "\n";
    all_zeros &= (0 == dco_ctrl_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t bs_ctrl_;
  uint8_t ref_ctrl_;
  uint8_t tx_ctrl_;
  uint8_t dco_ctrl_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x80000; // to get to misc_regs
    offset += 0x5c; // to get to pcie_phy_ovr_bs_ref_tx_dco_ctrl
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MISC_REGS_PCIE_PHY_OVR_BS_REF_TX_DCO_CTRL_MUTABLE_H__
