/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MISC_REGS_SPI_OUTDATA0_MUTABLE_H__
#define __REGISTER_INCLUDES_MISC_REGS_SPI_OUTDATA0_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class MiscRegsSpiOutdata0Mutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MiscRegsSpiOutdata0Mutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, true, write_callback, read_callback, std::string("MiscRegsSpiOutdata0Mutable"))
    {
    }
  MiscRegsSpiOutdata0Mutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MiscRegsSpiOutdata0Mutable")
    {
    }
public:





  uint8_t spi_opcode() { return spi_opcode_; }
  void spi_opcode(const uint8_t &v) { spi_opcode_=v; }





  uint8_t spi_data1() { return spi_data1_; }
  void spi_data1(const uint8_t &v) { spi_data1_=v; }





  uint8_t spi_data2() { return spi_data2_; }
  void spi_data2(const uint8_t &v) { spi_data2_=v; }





  uint8_t spi_data3() { return spi_data3_; }
  void spi_data3(const uint8_t &v) { spi_data3_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = spi_opcode_;
    *data |= (spi_data1_ << 8);
    *data |= (spi_data2_ << 16);
    *data |= (spi_data3_ << 24);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    spi_opcode_ = data;
    spi_data1_ = (data >> 8);
    spi_data2_ = (data >> 16);
    spi_data3_ = (data >> 24);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    spi_opcode_ = 0x3;
    spi_data1_ = 0x0;
    spi_data2_ = 0x0;
    spi_data3_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MiscRegsSpiOutdata0Mutable") + ":\n";
    r += indent_string + "  " + std::string("spi_opcode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(spi_opcode_) ) + "\n";
    all_zeros &= (0 == spi_opcode_);
    r += indent_string + "  " + std::string("spi_data1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(spi_data1_) ) + "\n";
    all_zeros &= (0 == spi_data1_);
    r += indent_string + "  " + std::string("spi_data2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(spi_data2_) ) + "\n";
    all_zeros &= (0 == spi_data2_);
    r += indent_string + "  " + std::string("spi_data3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(spi_data3_) ) + "\n";
    all_zeros &= (0 == spi_data3_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MiscRegsSpiOutdata0Mutable") + ":\n";
    r += indent_string + "  " + std::string("spi_opcode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(spi_opcode_) ) + "\n";
    all_zeros &= (0 == spi_opcode_);
    r += indent_string + "  " + std::string("spi_data1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(spi_data1_) ) + "\n";
    all_zeros &= (0 == spi_data1_);
    r += indent_string + "  " + std::string("spi_data2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(spi_data2_) ) + "\n";
    all_zeros &= (0 == spi_data2_);
    r += indent_string + "  " + std::string("spi_data3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(spi_data3_) ) + "\n";
    all_zeros &= (0 == spi_data3_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t spi_opcode_;
  uint8_t spi_data1_;
  uint8_t spi_data2_;
  uint8_t spi_data3_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x80000; // to get to misc_regs
    offset += 0x120; // to get to spi_outdata0
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MISC_REGS_SPI_OUTDATA0_MUTABLE_H__
