/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MISC_REGS_TV80_DEBUG_CTRL_H__
#define __REGISTER_INCLUDES_MISC_REGS_TV80_DEBUG_CTRL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class MiscRegsTv80DebugCtrl : public model_core::RegisterBlock<RegisterCallback> {
public:
  MiscRegsTv80DebugCtrl(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, false, write_callback, read_callback, std::string("MiscRegsTv80DebugCtrl"))
    {
    }
  MiscRegsTv80DebugCtrl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MiscRegsTv80DebugCtrl")
    {
    }
public:





  uint16_t &base_addr() { return base_addr_; }





  uint16_t &limit_addr() { return limit_addr_; }










  uint8_t &log_reg() { return log_reg_; }











  uint8_t &log_inst() { return log_inst_; }






  uint8_t &fifomode() { return fifomode_; }






  uint8_t &full_int() { return full_int_; }





  uint8_t &enable() { return enable_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (base_addr_ & 0xfff);
    *data |= ((limit_addr_ & 0xfff) << 12);
    *data |= ((log_reg_ & 0x1) << 25);
    *data |= ((log_inst_ & 0x1) << 26);
    *data |= ((fifomode_ & 0x1) << 29);
    *data |= ((full_int_ & 0x1) << 30);
    *data |= ((enable_ & 0x1) << 31);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    base_addr_ = (data & 0xfff);
    limit_addr_ = ((data >> 12) & 0xfff);
    log_reg_ = ((data >> 25) & 0x1);
    log_inst_ = ((data >> 26) & 0x1);
    fifomode_ = ((data >> 29) & 0x1);
    full_int_ = ((data >> 30) & 0x1);
    enable_ = ((data >> 31) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    base_addr_ = 0x0;
    limit_addr_ = 0x0;
    log_reg_ = 0x0;
    log_inst_ = 0x0;
    fifomode_ = 0x0;
    full_int_ = 0x0;
    enable_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MiscRegsTv80DebugCtrl") + ":\n";
    r += indent_string + "  " + std::string("base_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(base_addr_) ) + "\n";
    all_zeros &= (0 == base_addr_);
    r += indent_string + "  " + std::string("limit_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(limit_addr_) ) + "\n";
    all_zeros &= (0 == limit_addr_);
    r += indent_string + "  " + std::string("log_reg") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(log_reg_) ) + "\n";
    all_zeros &= (0 == log_reg_);
    r += indent_string + "  " + std::string("log_inst") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(log_inst_) ) + "\n";
    all_zeros &= (0 == log_inst_);
    r += indent_string + "  " + std::string("fifomode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifomode_) ) + "\n";
    all_zeros &= (0 == fifomode_);
    r += indent_string + "  " + std::string("full_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(full_int_) ) + "\n";
    all_zeros &= (0 == full_int_);
    r += indent_string + "  " + std::string("enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enable_) ) + "\n";
    all_zeros &= (0 == enable_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MiscRegsTv80DebugCtrl") + ":\n";
    r += indent_string + "  " + std::string("base_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(base_addr_) ) + "\n";
    all_zeros &= (0 == base_addr_);
    r += indent_string + "  " + std::string("limit_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(limit_addr_) ) + "\n";
    all_zeros &= (0 == limit_addr_);
    r += indent_string + "  " + std::string("log_reg") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(log_reg_) ) + "\n";
    all_zeros &= (0 == log_reg_);
    r += indent_string + "  " + std::string("log_inst") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(log_inst_) ) + "\n";
    all_zeros &= (0 == log_inst_);
    r += indent_string + "  " + std::string("fifomode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifomode_) ) + "\n";
    all_zeros &= (0 == fifomode_);
    r += indent_string + "  " + std::string("full_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(full_int_) ) + "\n";
    all_zeros &= (0 == full_int_);
    r += indent_string + "  " + std::string("enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enable_) ) + "\n";
    all_zeros &= (0 == enable_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint16_t base_addr_;
  uint16_t limit_addr_;
  uint8_t log_reg_;
  uint8_t log_inst_;
  uint8_t fifomode_;
  uint8_t full_int_;
  uint8_t enable_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x80000; // to get to misc_regs
    offset += 0x1d4; // to get to tv80_debug_ctrl
    return offset;
  }

};














  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MISC_REGS_TV80_DEBUG_CTRL_H__
