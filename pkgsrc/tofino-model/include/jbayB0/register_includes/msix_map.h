/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MSIX_MAP_H__
#define __REGISTER_INCLUDES_MSIX_MAP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class MsixMap : public model_core::RegisterBlock<RegisterCallback> {
public:
  MsixMap(
      int chipNumber, int index_msix_map, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_msix_map), 4, false, write_callback, read_callback, std::string("MsixMap")+":"+boost::lexical_cast<std::string>(index_msix_map))
    {
    }
  MsixMap(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MsixMap")
    {
    }
public:





  uint8_t &int_4np0() { return int_4np0_; }





  uint8_t &int_4np1() { return int_4np1_; }





  uint8_t &int_4np2() { return int_4np2_; }





  uint8_t &int_4np3() { return int_4np3_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (int_4np0_ & 0x1f);
    *data |= ((int_4np1_ & 0x1f) << 8);
    *data |= ((int_4np2_ & 0x1f) << 16);
    *data |= ((int_4np3_ & 0x1f) << 24);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    int_4np0_ = (data & 0x1f);
    int_4np1_ = ((data >> 8) & 0x1f);
    int_4np2_ = ((data >> 16) & 0x1f);
    int_4np3_ = ((data >> 24) & 0x1f);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    int_4np0_ = 0x0;
    int_4np1_ = 0x0;
    int_4np2_ = 0x0;
    int_4np3_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MsixMap") + ":\n";
    r += indent_string + "  " + std::string("int_4np0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_4np0_) ) + "\n";
    all_zeros &= (0 == int_4np0_);
    r += indent_string + "  " + std::string("int_4np1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_4np1_) ) + "\n";
    all_zeros &= (0 == int_4np1_);
    r += indent_string + "  " + std::string("int_4np2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_4np2_) ) + "\n";
    all_zeros &= (0 == int_4np2_);
    r += indent_string + "  " + std::string("int_4np3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_4np3_) ) + "\n";
    all_zeros &= (0 == int_4np3_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MsixMap") + ":\n";
    r += indent_string + "  " + std::string("int_4np0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_4np0_) ) + "\n";
    all_zeros &= (0 == int_4np0_);
    r += indent_string + "  " + std::string("int_4np1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_4np1_) ) + "\n";
    all_zeros &= (0 == int_4np1_);
    r += indent_string + "  " + std::string("int_4np2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_4np2_) ) + "\n";
    all_zeros &= (0 == int_4np2_);
    r += indent_string + "  " + std::string("int_4np3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(int_4np3_) ) + "\n";
    all_zeros &= (0 == int_4np3_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t int_4np0_;
  uint8_t int_4np1_;
  uint8_t int_4np2_;
  uint8_t int_4np3_;
private:
  static int StartOffset(
      int index_msix_map
      ) {
    int offset=0;
    offset += 0x200; // to get to msix_map
    assert(index_msix_map < 128);
    offset += index_msix_map * 0x4; // msix_map[]
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_MSIX_MAP_H__
