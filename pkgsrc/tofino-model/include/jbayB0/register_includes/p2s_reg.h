/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_P2S_REG_H__
#define __REGISTER_INCLUDES_P2S_REG_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "p2s_reg_byte_ctr.h"
#include "p2s_reg_ctr_sample.h"
#include "p2s_reg_ctr_time.h"
#include "p2s_reg_ecc.h"
#include "p2s_reg_epb_cred_oflow_err_log.h"
#include "p2s_reg_epb_cred_rd.h"
#include "p2s_reg_epb_cred_uflow_err_log.h"
#include "p2s_reg_epb_cred_wr.h"
#include "p2s_reg_intr.h"
#include "p2s_reg_pipe_map.h"
#include "p2s_reg_pkt_ctr.h"
#include "p2s_reg_port_rate_cfg.h"
#include "p2s_reg_sb_oflow_err_log.h"
#include "p2s_reg_sb_uflow_err_log.h"
#include "p2s_reg_sb_0_mbe_err_log.h"
#include "p2s_reg_sb_0_sbe_err_log.h"
#include "p2s_reg_sb_1_mbe_err_log.h"
#include "p2s_reg_sb_1_sbe_err_log.h"
#include "p2s_reg_sb_2_mbe_err_log.h"
#include "p2s_reg_sb_2_sbe_err_log.h"
#include "p2s_reg_sb_3_mbe_err_log.h"
#include "p2s_reg_sb_3_sbe_err_log.h"
#include "p2s_reg_sb_4_mbe_err_log.h"
#include "p2s_reg_sb_4_sbe_err_log.h"
#include "p2s_reg_tm_cred.h"
#include "p2s_reg_tm_mbe_err_log.h"
#include "p2s_reg_tm_sbe_err_log.h"

namespace jbayB0 {
  namespace register_classes {

class P2sReg : public model_core::RegisterBlock<RegisterCallback> {
public:
  P2sReg(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 3016, false, write_callback, read_callback, std::string("P2sReg")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  P2sReg(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "P2sReg")
    {
    }
public:









  P2sRegPortRateCfg &port_rate_cfg(int j0) { return port_rate_cfg_[j0]; }







  P2sRegEpbCredWr &epb_cred_wr(int j0) { return epb_cred_wr_[j0]; }







  P2sRegEpbCredRd &epb_cred_rd(int j0) { return epb_cred_rd_[j0]; }






  P2sRegPktCtr &pkt_ctr(int j0) { return pkt_ctr_[j0]; }






  P2sRegByteCtr &byte_ctr(int j0) { return byte_ctr_[j0]; }




  P2sRegCtrTime &ctr_time() { return ctr_time_; }




  P2sRegCtrSample &ctr_sample() { return ctr_sample_; }








  P2sRegEcc &ecc() { return ecc_; }





  P2sRegTmSbeErrLog &tm_sbe_err_log() { return tm_sbe_err_log_; }





  P2sRegTmMbeErrLog &tm_mbe_err_log() { return tm_mbe_err_log_; }





  P2sRegSb_0SbeErrLog &sb_0_sbe_err_log() { return sb_0_sbe_err_log_; }





  P2sRegSb_0MbeErrLog &sb_0_mbe_err_log() { return sb_0_mbe_err_log_; }





  P2sRegSb_1SbeErrLog &sb_1_sbe_err_log() { return sb_1_sbe_err_log_; }





  P2sRegSb_1MbeErrLog &sb_1_mbe_err_log() { return sb_1_mbe_err_log_; }





  P2sRegSb_2SbeErrLog &sb_2_sbe_err_log() { return sb_2_sbe_err_log_; }





  P2sRegSb_2MbeErrLog &sb_2_mbe_err_log() { return sb_2_mbe_err_log_; }





  P2sRegSb_3SbeErrLog &sb_3_sbe_err_log() { return sb_3_sbe_err_log_; }





  P2sRegSb_3MbeErrLog &sb_3_mbe_err_log() { return sb_3_mbe_err_log_; }





  P2sRegSb_4SbeErrLog &sb_4_sbe_err_log() { return sb_4_sbe_err_log_; }





  P2sRegSb_4MbeErrLog &sb_4_mbe_err_log() { return sb_4_mbe_err_log_; }





  P2sRegSbOflowErrLog &sb_oflow_err_log() { return sb_oflow_err_log_; }





  P2sRegSbUflowErrLog &sb_uflow_err_log() { return sb_uflow_err_log_; }





  P2sRegEpbCredOflowErrLog &epb_cred_oflow_err_log() { return epb_cred_oflow_err_log_; }





  P2sRegEpbCredUflowErrLog &epb_cred_uflow_err_log() { return epb_cred_uflow_err_log_; }





  P2sRegPipeMap &pipe_map() { return pipe_map_; }








  P2sRegTmCred &tm_cred(int j0) { return tm_cred_[j0]; }
  P2sRegIntr &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x40 && offset < 0x64) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      port_rate_cfg_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      epb_cred_wr_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x148) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      epb_cred_rd_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x400 && offset < 0x640) {
      offset -= 0x400;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      pkt_ctr_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x800 && offset < 0xa40) {
      offset -= 0x800;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      byte_ctr_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xa40 && offset < 0xa48) {
      offset -= 0xa40;
      if (read_callback_) read_callback_();
      ctr_time_.read( offset, data );
    }
    else if (offset >= 0xa48 && offset < 0xa4c) {
      offset -= 0xa48;
      if (read_callback_) read_callback_();
      ctr_sample_.read( offset, data );
    }
    else if (offset >= 0xa80 && offset < 0xafc) {
      offset -= 0xa80;
      if (read_callback_) read_callback_();
      ecc_.read( offset, data );
    }
    else if (offset >= 0xb14 && offset < 0xb18) {
      offset -= 0xb14;
      if (read_callback_) read_callback_();
      tm_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb18 && offset < 0xb1c) {
      offset -= 0xb18;
      if (read_callback_) read_callback_();
      tm_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb1c && offset < 0xb20) {
      offset -= 0xb1c;
      if (read_callback_) read_callback_();
      sb_0_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb20 && offset < 0xb24) {
      offset -= 0xb20;
      if (read_callback_) read_callback_();
      sb_0_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb24 && offset < 0xb28) {
      offset -= 0xb24;
      if (read_callback_) read_callback_();
      sb_1_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb28 && offset < 0xb2c) {
      offset -= 0xb28;
      if (read_callback_) read_callback_();
      sb_1_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb2c && offset < 0xb30) {
      offset -= 0xb2c;
      if (read_callback_) read_callback_();
      sb_2_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb30 && offset < 0xb34) {
      offset -= 0xb30;
      if (read_callback_) read_callback_();
      sb_2_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb34 && offset < 0xb38) {
      offset -= 0xb34;
      if (read_callback_) read_callback_();
      sb_3_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb38 && offset < 0xb3c) {
      offset -= 0xb38;
      if (read_callback_) read_callback_();
      sb_3_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb3c && offset < 0xb40) {
      offset -= 0xb3c;
      if (read_callback_) read_callback_();
      sb_4_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb40 && offset < 0xb44) {
      offset -= 0xb40;
      if (read_callback_) read_callback_();
      sb_4_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0xb44 && offset < 0xb48) {
      offset -= 0xb44;
      if (read_callback_) read_callback_();
      sb_oflow_err_log_.read( offset, data );
    }
    else if (offset >= 0xb48 && offset < 0xb4c) {
      offset -= 0xb48;
      if (read_callback_) read_callback_();
      sb_uflow_err_log_.read( offset, data );
    }
    else if (offset >= 0xb4c && offset < 0xb50) {
      offset -= 0xb4c;
      if (read_callback_) read_callback_();
      epb_cred_oflow_err_log_.read( offset, data );
    }
    else if (offset >= 0xb50 && offset < 0xb54) {
      offset -= 0xb50;
      if (read_callback_) read_callback_();
      epb_cred_uflow_err_log_.read( offset, data );
    }
    else if (offset >= 0xb54 && offset < 0xb58) {
      offset -= 0xb54;
      if (read_callback_) read_callback_();
      pipe_map_.read( offset, data );
    }
    else if (offset >= 0xb80 && offset < 0xbc8) {
      offset -= 0xb80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tm_cred_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xb00 && offset < 0xb14) {
      offset -= 0xb00;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x40 && offset < 0x64) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      port_rate_cfg_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      epb_cred_wr_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x148) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      epb_cred_rd_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400 && offset < 0x640) {
      offset -= 0x400;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      pkt_ctr_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x800 && offset < 0xa40) {
      offset -= 0x800;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      byte_ctr_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa40 && offset < 0xa48) {
      offset -= 0xa40;
      ctr_time_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa48 && offset < 0xa4c) {
      offset -= 0xa48;
      ctr_sample_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa80 && offset < 0xafc) {
      offset -= 0xa80;
      ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb14 && offset < 0xb18) {
      offset -= 0xb14;
      tm_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb18 && offset < 0xb1c) {
      offset -= 0xb18;
      tm_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb1c && offset < 0xb20) {
      offset -= 0xb1c;
      sb_0_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb20 && offset < 0xb24) {
      offset -= 0xb20;
      sb_0_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb24 && offset < 0xb28) {
      offset -= 0xb24;
      sb_1_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb28 && offset < 0xb2c) {
      offset -= 0xb28;
      sb_1_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb2c && offset < 0xb30) {
      offset -= 0xb2c;
      sb_2_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb30 && offset < 0xb34) {
      offset -= 0xb30;
      sb_2_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb34 && offset < 0xb38) {
      offset -= 0xb34;
      sb_3_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb38 && offset < 0xb3c) {
      offset -= 0xb38;
      sb_3_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb3c && offset < 0xb40) {
      offset -= 0xb3c;
      sb_4_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb40 && offset < 0xb44) {
      offset -= 0xb40;
      sb_4_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb44 && offset < 0xb48) {
      offset -= 0xb44;
      sb_oflow_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb48 && offset < 0xb4c) {
      offset -= 0xb48;
      sb_uflow_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb4c && offset < 0xb50) {
      offset -= 0xb4c;
      epb_cred_oflow_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb50 && offset < 0xb54) {
      offset -= 0xb50;
      epb_cred_uflow_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb54 && offset < 0xb58) {
      offset -= 0xb54;
      pipe_map_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb80 && offset < 0xbc8) {
      offset -= 0xb80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tm_cred_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb00 && offset < 0xb14) {
      offset -= 0xb00;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : port_rate_cfg_) {
      f0.reset();
    }
    for (auto &f0 : epb_cred_wr_) {
      f0.reset();
    }
    for (auto &f0 : epb_cred_rd_) {
      f0.reset();
    }
    for (auto &f0 : pkt_ctr_) {
      f0.reset();
    }
    for (auto &f0 : byte_ctr_) {
      f0.reset();
    }
    ctr_time_.reset();
    ctr_sample_.reset();
    ecc_.reset();
    tm_sbe_err_log_.reset();
    tm_mbe_err_log_.reset();
    sb_0_sbe_err_log_.reset();
    sb_0_mbe_err_log_.reset();
    sb_1_sbe_err_log_.reset();
    sb_1_mbe_err_log_.reset();
    sb_2_sbe_err_log_.reset();
    sb_2_mbe_err_log_.reset();
    sb_3_sbe_err_log_.reset();
    sb_3_mbe_err_log_.reset();
    sb_4_sbe_err_log_.reset();
    sb_4_mbe_err_log_.reset();
    sb_oflow_err_log_.reset();
    sb_uflow_err_log_.reset();
    epb_cred_oflow_err_log_.reset();
    epb_cred_uflow_err_log_.reset();
    pipe_map_.reset();
    for (auto &f0 : tm_cred_) {
      f0.reset();
    }
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x40 && offset < 0x64) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += port_rate_cfg_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += epb_cred_wr_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x148) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += epb_cred_rd_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400 && offset < 0x640) {
      offset -= 0x400;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += pkt_ctr_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x800 && offset < 0xa40) {
      offset -= 0x800;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += byte_ctr_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa40 && offset < 0xa48) {
      offset -= 0xa40;
      r += ctr_time_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa48 && offset < 0xa4c) {
      offset -= 0xa48;
      r += ctr_sample_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa80 && offset < 0xafc) {
      offset -= 0xa80;
      r += ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb14 && offset < 0xb18) {
      offset -= 0xb14;
      r += tm_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb18 && offset < 0xb1c) {
      offset -= 0xb18;
      r += tm_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb1c && offset < 0xb20) {
      offset -= 0xb1c;
      r += sb_0_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb20 && offset < 0xb24) {
      offset -= 0xb20;
      r += sb_0_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb24 && offset < 0xb28) {
      offset -= 0xb24;
      r += sb_1_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb28 && offset < 0xb2c) {
      offset -= 0xb28;
      r += sb_1_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb2c && offset < 0xb30) {
      offset -= 0xb2c;
      r += sb_2_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb30 && offset < 0xb34) {
      offset -= 0xb30;
      r += sb_2_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb34 && offset < 0xb38) {
      offset -= 0xb34;
      r += sb_3_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb38 && offset < 0xb3c) {
      offset -= 0xb38;
      r += sb_3_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb3c && offset < 0xb40) {
      offset -= 0xb3c;
      r += sb_4_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb40 && offset < 0xb44) {
      offset -= 0xb40;
      r += sb_4_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb44 && offset < 0xb48) {
      offset -= 0xb44;
      r += sb_oflow_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb48 && offset < 0xb4c) {
      offset -= 0xb48;
      r += sb_uflow_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb4c && offset < 0xb50) {
      offset -= 0xb4c;
      r += epb_cred_oflow_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb50 && offset < 0xb54) {
      offset -= 0xb50;
      r += epb_cred_uflow_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb54 && offset < 0xb58) {
      offset -= 0xb54;
      r += pipe_map_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb80 && offset < 0xbc8) {
      offset -= 0xb80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tm_cred_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb00 && offset < 0xb14) {
      offset -= 0xb00;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<9;++a0) {
      r += port_rate_cfg_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<18;++a0) {
      r += epb_cred_wr_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<18;++a0) {
      r += epb_cred_rd_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<72;++a0) {
      r += pkt_ctr_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<72;++a0) {
      r += byte_ctr_[a0].to_string(print_zeros,indent_string) ;
    }
    r += ctr_time_.to_string(print_zeros,indent_string) ;
    r += ctr_sample_.to_string(print_zeros,indent_string) ;
    r += ecc_.to_string(print_zeros,indent_string) ;
    r += tm_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += tm_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_0_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_0_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_1_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_1_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_2_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_2_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_3_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_3_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_4_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_4_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_oflow_err_log_.to_string(print_zeros,indent_string) ;
    r += sb_uflow_err_log_.to_string(print_zeros,indent_string) ;
    r += epb_cred_oflow_err_log_.to_string(print_zeros,indent_string) ;
    r += epb_cred_uflow_err_log_.to_string(print_zeros,indent_string) ;
    r += pipe_map_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<18;++a0) {
      r += tm_cred_[a0].to_string(print_zeros,indent_string) ;
    }
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< P2sRegPortRateCfg, 9 > port_rate_cfg_;
  std::array< P2sRegEpbCredWr, 18 > epb_cred_wr_;
  std::array< P2sRegEpbCredRd, 18 > epb_cred_rd_;
  std::array< P2sRegPktCtr, 72 > pkt_ctr_;
  std::array< P2sRegByteCtr, 72 > byte_ctr_;
  P2sRegCtrTime ctr_time_;
  P2sRegCtrSample ctr_sample_;
  P2sRegEcc ecc_;
  P2sRegTmSbeErrLog tm_sbe_err_log_;
  P2sRegTmMbeErrLog tm_mbe_err_log_;
  P2sRegSb_0SbeErrLog sb_0_sbe_err_log_;
  P2sRegSb_0MbeErrLog sb_0_mbe_err_log_;
  P2sRegSb_1SbeErrLog sb_1_sbe_err_log_;
  P2sRegSb_1MbeErrLog sb_1_mbe_err_log_;
  P2sRegSb_2SbeErrLog sb_2_sbe_err_log_;
  P2sRegSb_2MbeErrLog sb_2_mbe_err_log_;
  P2sRegSb_3SbeErrLog sb_3_sbe_err_log_;
  P2sRegSb_3MbeErrLog sb_3_mbe_err_log_;
  P2sRegSb_4SbeErrLog sb_4_sbe_err_log_;
  P2sRegSb_4MbeErrLog sb_4_mbe_err_log_;
  P2sRegSbOflowErrLog sb_oflow_err_log_;
  P2sRegSbUflowErrLog sb_uflow_err_log_;
  P2sRegEpbCredOflowErrLog epb_cred_oflow_err_log_;
  P2sRegEpbCredUflowErrLog epb_cred_uflow_err_log_;
  P2sRegPipeMap pipe_map_;
  std::array< P2sRegTmCred, 18 > tm_cred_;
  P2sRegIntr intr_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x1c000; // to get to p2sreg
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_P2S_REG_H__
