/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PARB_RIGHT_REG_INTR_EN0_H__
#define __REGISTER_INCLUDES_PARB_RIGHT_REG_INTR_EN0_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class ParbRightRegIntrEn0 : public model_core::RegisterBlock<RegisterCallback> {
public:
  ParbRightRegIntrEn0(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, false, write_callback, read_callback, std::string("ParbRightRegIntrEn0")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  ParbRightRegIntrEn0(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "ParbRightRegIntrEn0")
    {
    }
public:
  uint8_t &e_avail_oflow() { return e_avail_oflow_; }
  uint8_t &e_bcnt_oflow() { return e_bcnt_oflow_; }
  uint8_t &tm_stat_oflow() { return tm_stat_oflow_; }
  uint8_t &e_afifo_oflow() { return e_afifo_oflow_; }
  uint8_t &e_arb_cred_uflow() { return e_arb_cred_uflow_; }
  uint8_t &e_arb_cred_oflow() { return e_arb_cred_oflow_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (e_avail_oflow_ & 0x1);
    *data |= ((e_bcnt_oflow_ & 0x1) << 1);
    *data |= ((tm_stat_oflow_ & 0x1) << 2);
    *data |= ((e_afifo_oflow_ & 0x1) << 3);
    *data |= ((e_arb_cred_uflow_ & 0x1) << 4);
    *data |= ((e_arb_cred_oflow_ & 0x1) << 5);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    e_avail_oflow_ = (data & 0x1);
    e_bcnt_oflow_ = ((data >> 1) & 0x1);
    tm_stat_oflow_ = ((data >> 2) & 0x1);
    e_afifo_oflow_ = ((data >> 3) & 0x1);
    e_arb_cred_uflow_ = ((data >> 4) & 0x1);
    e_arb_cred_oflow_ = ((data >> 5) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    e_avail_oflow_ = 0x0;
    e_bcnt_oflow_ = 0x0;
    tm_stat_oflow_ = 0x0;
    e_afifo_oflow_ = 0x0;
    e_arb_cred_uflow_ = 0x0;
    e_arb_cred_oflow_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("ParbRightRegIntrEn0") + ":\n";
    r += indent_string + "  " + std::string("e_avail_oflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_avail_oflow_) ) + "\n";
    all_zeros &= (0 == e_avail_oflow_);
    r += indent_string + "  " + std::string("e_bcnt_oflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_bcnt_oflow_) ) + "\n";
    all_zeros &= (0 == e_bcnt_oflow_);
    r += indent_string + "  " + std::string("tm_stat_oflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tm_stat_oflow_) ) + "\n";
    all_zeros &= (0 == tm_stat_oflow_);
    r += indent_string + "  " + std::string("e_afifo_oflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_afifo_oflow_) ) + "\n";
    all_zeros &= (0 == e_afifo_oflow_);
    r += indent_string + "  " + std::string("e_arb_cred_uflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_arb_cred_uflow_) ) + "\n";
    all_zeros &= (0 == e_arb_cred_uflow_);
    r += indent_string + "  " + std::string("e_arb_cred_oflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_arb_cred_oflow_) ) + "\n";
    all_zeros &= (0 == e_arb_cred_oflow_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("ParbRightRegIntrEn0") + ":\n";
    r += indent_string + "  " + std::string("e_avail_oflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_avail_oflow_) ) + "\n";
    all_zeros &= (0 == e_avail_oflow_);
    r += indent_string + "  " + std::string("e_bcnt_oflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_bcnt_oflow_) ) + "\n";
    all_zeros &= (0 == e_bcnt_oflow_);
    r += indent_string + "  " + std::string("tm_stat_oflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tm_stat_oflow_) ) + "\n";
    all_zeros &= (0 == tm_stat_oflow_);
    r += indent_string + "  " + std::string("e_afifo_oflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_afifo_oflow_) ) + "\n";
    all_zeros &= (0 == e_afifo_oflow_);
    r += indent_string + "  " + std::string("e_arb_cred_uflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_arb_cred_uflow_) ) + "\n";
    all_zeros &= (0 == e_arb_cred_uflow_);
    r += indent_string + "  " + std::string("e_arb_cred_oflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_arb_cred_oflow_) ) + "\n";
    all_zeros &= (0 == e_arb_cred_oflow_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t e_avail_oflow_;
  uint8_t e_bcnt_oflow_;
  uint8_t tm_stat_oflow_;
  uint8_t e_afifo_oflow_;
  uint8_t e_arb_cred_uflow_;
  uint8_t e_arb_cred_oflow_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x14000; // to get to parbreg
    offset += 0x800; // to get to right
    offset += 0x744; // to get to intr_en0
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PARB_RIGHT_REG_INTR_EN0_H__
