/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PBC_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_PBC_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "dru_rspec_mutable.h"
#include "pbus_rspec_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class PbcRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PbcRspecMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 2676, true, write_callback, read_callback, std::string("PbcRspecMutable"))
    {
    }
  PbcRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PbcRspecMutable")
    {
    }
public:





  PbusRspecMutable &pbc_pbus() { return pbc_pbus_; }







  DruRspecMutable &pbc_il_tx_dr(int j0) { return pbc_il_tx_dr_[j0]; }







  DruRspecMutable &pbc_il_cpl_dr(int j0) { return pbc_il_cpl_dr_[j0]; }





  DruRspecMutable &pbc_wb_tx_dr() { return pbc_wb_tx_dr_; }





  DruRspecMutable &pbc_wb_cpl_dr() { return pbc_wb_cpl_dr_; }





  DruRspecMutable &pbc_rb_tx_dr() { return pbc_rb_tx_dr_; }





  DruRspecMutable &pbc_rb_cpl_dr() { return pbc_rb_cpl_dr_; }





  DruRspecMutable &pbc_stat_fm_dr() { return pbc_stat_fm_dr_; }





  DruRspecMutable &pbc_stat_rx_dr() { return pbc_stat_rx_dr_; }





  DruRspecMutable &pbc_idle_fm_dr() { return pbc_idle_fm_dr_; }





  DruRspecMutable &pbc_idle_rx_dr() { return pbc_idle_rx_dr_; }





  DruRspecMutable &pbc_diag_fm_dr() { return pbc_diag_fm_dr_; }





  DruRspecMutable &pbc_diag_rx_dr() { return pbc_diag_rx_dr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x520) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      pbc_pbus_.read( offset, data );
    }
    else if (offset >= 0x600 && offset < 0x6d0) {
      offset -= 0x600;
      int i0 = offset / 0x34;
      offset  -= i0 * 0x34;
      if (read_callback_) read_callback_();
      pbc_il_tx_dr_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x700 && offset < 0x7d0) {
      offset -= 0x700;
      int i0 = offset / 0x34;
      offset  -= i0 * 0x34;
      if (read_callback_) read_callback_();
      pbc_il_cpl_dr_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x800 && offset < 0x834) {
      offset -= 0x800;
      if (read_callback_) read_callback_();
      pbc_wb_tx_dr_.read( offset, data );
    }
    else if (offset >= 0x840 && offset < 0x874) {
      offset -= 0x840;
      if (read_callback_) read_callback_();
      pbc_wb_cpl_dr_.read( offset, data );
    }
    else if (offset >= 0x880 && offset < 0x8b4) {
      offset -= 0x880;
      if (read_callback_) read_callback_();
      pbc_rb_tx_dr_.read( offset, data );
    }
    else if (offset >= 0x8c0 && offset < 0x8f4) {
      offset -= 0x8c0;
      if (read_callback_) read_callback_();
      pbc_rb_cpl_dr_.read( offset, data );
    }
    else if (offset >= 0x900 && offset < 0x934) {
      offset -= 0x900;
      if (read_callback_) read_callback_();
      pbc_stat_fm_dr_.read( offset, data );
    }
    else if (offset >= 0x940 && offset < 0x974) {
      offset -= 0x940;
      if (read_callback_) read_callback_();
      pbc_stat_rx_dr_.read( offset, data );
    }
    else if (offset >= 0x980 && offset < 0x9b4) {
      offset -= 0x980;
      if (read_callback_) read_callback_();
      pbc_idle_fm_dr_.read( offset, data );
    }
    else if (offset >= 0x9c0 && offset < 0x9f4) {
      offset -= 0x9c0;
      if (read_callback_) read_callback_();
      pbc_idle_rx_dr_.read( offset, data );
    }
    else if (offset >= 0xa00 && offset < 0xa34) {
      offset -= 0xa00;
      if (read_callback_) read_callback_();
      pbc_diag_fm_dr_.read( offset, data );
    }
    else if (offset >= 0xa40 && offset < 0xa74) {
      offset -= 0xa40;
      if (read_callback_) read_callback_();
      pbc_diag_rx_dr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x520) {
      offset -= 0x0;
      pbc_pbus_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x600 && offset < 0x6d0) {
      offset -= 0x600;
      int i0 = offset / 0x34;
      offset  -= i0 * 0x34;
      pbc_il_tx_dr_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x700 && offset < 0x7d0) {
      offset -= 0x700;
      int i0 = offset / 0x34;
      offset  -= i0 * 0x34;
      pbc_il_cpl_dr_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x800 && offset < 0x834) {
      offset -= 0x800;
      pbc_wb_tx_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x840 && offset < 0x874) {
      offset -= 0x840;
      pbc_wb_cpl_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x880 && offset < 0x8b4) {
      offset -= 0x880;
      pbc_rb_tx_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8c0 && offset < 0x8f4) {
      offset -= 0x8c0;
      pbc_rb_cpl_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x900 && offset < 0x934) {
      offset -= 0x900;
      pbc_stat_fm_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x940 && offset < 0x974) {
      offset -= 0x940;
      pbc_stat_rx_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x980 && offset < 0x9b4) {
      offset -= 0x980;
      pbc_idle_fm_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x9c0 && offset < 0x9f4) {
      offset -= 0x9c0;
      pbc_idle_rx_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa00 && offset < 0xa34) {
      offset -= 0xa00;
      pbc_diag_fm_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa40 && offset < 0xa74) {
      offset -= 0xa40;
      pbc_diag_rx_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    pbc_pbus_.reset();
    for (auto &f0 : pbc_il_tx_dr_) {
      f0.reset();
    }
    for (auto &f0 : pbc_il_cpl_dr_) {
      f0.reset();
    }
    pbc_wb_tx_dr_.reset();
    pbc_wb_cpl_dr_.reset();
    pbc_rb_tx_dr_.reset();
    pbc_rb_cpl_dr_.reset();
    pbc_stat_fm_dr_.reset();
    pbc_stat_rx_dr_.reset();
    pbc_idle_fm_dr_.reset();
    pbc_idle_rx_dr_.reset();
    pbc_diag_fm_dr_.reset();
    pbc_diag_rx_dr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x520) {
      offset -= 0x0;
      r += pbc_pbus_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x600 && offset < 0x6d0) {
      offset -= 0x600;
      int i0 = offset / 0x34;
      offset  -= i0 * 0x34;
      r += pbc_il_tx_dr_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x700 && offset < 0x7d0) {
      offset -= 0x700;
      int i0 = offset / 0x34;
      offset  -= i0 * 0x34;
      r += pbc_il_cpl_dr_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x800 && offset < 0x834) {
      offset -= 0x800;
      r += pbc_wb_tx_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x840 && offset < 0x874) {
      offset -= 0x840;
      r += pbc_wb_cpl_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x880 && offset < 0x8b4) {
      offset -= 0x880;
      r += pbc_rb_tx_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8c0 && offset < 0x8f4) {
      offset -= 0x8c0;
      r += pbc_rb_cpl_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x900 && offset < 0x934) {
      offset -= 0x900;
      r += pbc_stat_fm_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x940 && offset < 0x974) {
      offset -= 0x940;
      r += pbc_stat_rx_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x980 && offset < 0x9b4) {
      offset -= 0x980;
      r += pbc_idle_fm_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x9c0 && offset < 0x9f4) {
      offset -= 0x9c0;
      r += pbc_idle_rx_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa00 && offset < 0xa34) {
      offset -= 0xa00;
      r += pbc_diag_fm_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa40 && offset < 0xa74) {
      offset -= 0xa40;
      r += pbc_diag_rx_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += pbc_pbus_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += pbc_il_tx_dr_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += pbc_il_cpl_dr_[a0].to_string(print_zeros,indent_string) ;
    }
    r += pbc_wb_tx_dr_.to_string(print_zeros,indent_string) ;
    r += pbc_wb_cpl_dr_.to_string(print_zeros,indent_string) ;
    r += pbc_rb_tx_dr_.to_string(print_zeros,indent_string) ;
    r += pbc_rb_cpl_dr_.to_string(print_zeros,indent_string) ;
    r += pbc_stat_fm_dr_.to_string(print_zeros,indent_string) ;
    r += pbc_stat_rx_dr_.to_string(print_zeros,indent_string) ;
    r += pbc_idle_fm_dr_.to_string(print_zeros,indent_string) ;
    r += pbc_idle_rx_dr_.to_string(print_zeros,indent_string) ;
    r += pbc_diag_fm_dr_.to_string(print_zeros,indent_string) ;
    r += pbc_diag_rx_dr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  PbusRspecMutable pbc_pbus_;
  std::array< DruRspecMutable, 4 > pbc_il_tx_dr_;
  std::array< DruRspecMutable, 4 > pbc_il_cpl_dr_;
  DruRspecMutable pbc_wb_tx_dr_;
  DruRspecMutable pbc_wb_cpl_dr_;
  DruRspecMutable pbc_rb_tx_dr_;
  DruRspecMutable pbc_rb_cpl_dr_;
  DruRspecMutable pbc_stat_fm_dr_;
  DruRspecMutable pbc_stat_rx_dr_;
  DruRspecMutable pbc_idle_fm_dr_;
  DruRspecMutable pbc_idle_rx_dr_;
  DruRspecMutable pbc_diag_fm_dr_;
  DruRspecMutable pbc_diag_rx_dr_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x200000; // to get to pbc
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PBC_RSPEC_MUTABLE_H__
