/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PBUS_INT_INJ_H__
#define __REGISTER_INCLUDES_PBUS_INT_INJ_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class PbusIntInj : public model_core::RegisterBlock<RegisterCallback> {
public:
  PbusIntInj(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, false, write_callback, read_callback, std::string("PbusIntInj"))
    {
    }
  PbusIntInj(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PbusIntInj")
    {
    }
public:





  uint8_t &il_iqueue_0_mbe_inj() { return il_iqueue_0_mbe_inj_; }





  uint8_t &il_iqueue_1_mbe_inj() { return il_iqueue_1_mbe_inj_; }





  uint8_t &il_iqueue_2_mbe_inj() { return il_iqueue_2_mbe_inj_; }





  uint8_t &il_iqueue_3_mbe_inj() { return il_iqueue_3_mbe_inj_; }





  uint8_t &il_oqueue_0_mbe_inj() { return il_oqueue_0_mbe_inj_; }





  uint8_t &il_oqueue_1_mbe_inj() { return il_oqueue_1_mbe_inj_; }





  uint8_t &il_oqueue_2_mbe_inj() { return il_oqueue_2_mbe_inj_; }





  uint8_t &il_oqueue_3_mbe_inj() { return il_oqueue_3_mbe_inj_; }





  uint8_t &wb_iqueue_mbe_inj() { return wb_iqueue_mbe_inj_; }





  uint8_t &rb_oqueue_mbe_inj() { return rb_oqueue_mbe_inj_; }





  uint8_t &stat_oqueue_mbe_inj() { return stat_oqueue_mbe_inj_; }





  uint8_t &idle_oqueue_mbe_inj() { return idle_oqueue_mbe_inj_; }





  uint8_t &diag_oqueue_mbe_inj() { return diag_oqueue_mbe_inj_; }





  uint8_t &il_iqueue_0_sbe_inj() { return il_iqueue_0_sbe_inj_; }





  uint8_t &il_iqueue_1_sbe_inj() { return il_iqueue_1_sbe_inj_; }





  uint8_t &il_iqueue_2_sbe_inj() { return il_iqueue_2_sbe_inj_; }





  uint8_t &il_iqueue_3_sbe_inj() { return il_iqueue_3_sbe_inj_; }





  uint8_t &il_oqueue_0_sbe_inj() { return il_oqueue_0_sbe_inj_; }





  uint8_t &il_oqueue_1_sbe_inj() { return il_oqueue_1_sbe_inj_; }





  uint8_t &il_oqueue_2_sbe_inj() { return il_oqueue_2_sbe_inj_; }





  uint8_t &il_oqueue_3_sbe_inj() { return il_oqueue_3_sbe_inj_; }





  uint8_t &wb_iqueue_sbe_inj() { return wb_iqueue_sbe_inj_; }





  uint8_t &rb_oqueue_sbe_inj() { return rb_oqueue_sbe_inj_; }





  uint8_t &stat_oqueue_sbe_inj() { return stat_oqueue_sbe_inj_; }





  uint8_t &idle_oqueue_sbe_inj() { return idle_oqueue_sbe_inj_; }





  uint8_t &diag_oqueue_sbe_inj() { return diag_oqueue_sbe_inj_; }







  uint8_t &pbus_parity_inj(int j0) { return pbus_parity_inj_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (il_iqueue_0_mbe_inj_ & 0x1);
    *data |= ((il_iqueue_1_mbe_inj_ & 0x1) << 1);
    *data |= ((il_iqueue_2_mbe_inj_ & 0x1) << 2);
    *data |= ((il_iqueue_3_mbe_inj_ & 0x1) << 3);
    *data |= ((il_oqueue_0_mbe_inj_ & 0x1) << 4);
    *data |= ((il_oqueue_1_mbe_inj_ & 0x1) << 5);
    *data |= ((il_oqueue_2_mbe_inj_ & 0x1) << 6);
    *data |= ((il_oqueue_3_mbe_inj_ & 0x1) << 7);
    *data |= ((wb_iqueue_mbe_inj_ & 0x1) << 8);
    *data |= ((rb_oqueue_mbe_inj_ & 0x1) << 9);
    *data |= ((stat_oqueue_mbe_inj_ & 0x1) << 10);
    *data |= ((idle_oqueue_mbe_inj_ & 0x1) << 11);
    *data |= ((diag_oqueue_mbe_inj_ & 0x1) << 12);
    *data |= ((il_iqueue_0_sbe_inj_ & 0x1) << 13);
    *data |= ((il_iqueue_1_sbe_inj_ & 0x1) << 14);
    *data |= ((il_iqueue_2_sbe_inj_ & 0x1) << 15);
    *data |= ((il_iqueue_3_sbe_inj_ & 0x1) << 16);
    *data |= ((il_oqueue_0_sbe_inj_ & 0x1) << 17);
    *data |= ((il_oqueue_1_sbe_inj_ & 0x1) << 18);
    *data |= ((il_oqueue_2_sbe_inj_ & 0x1) << 19);
    *data |= ((il_oqueue_3_sbe_inj_ & 0x1) << 20);
    *data |= ((wb_iqueue_sbe_inj_ & 0x1) << 21);
    *data |= ((rb_oqueue_sbe_inj_ & 0x1) << 22);
    *data |= ((stat_oqueue_sbe_inj_ & 0x1) << 23);
    *data |= ((idle_oqueue_sbe_inj_ & 0x1) << 24);
    *data |= ((diag_oqueue_sbe_inj_ & 0x1) << 25);
    *data |= ((pbus_parity_inj_[0] & 0x1) << 26);
    *data |= ((pbus_parity_inj_[1] & 0x1) << 27);
    *data |= ((pbus_parity_inj_[2] & 0x1) << 28);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    il_iqueue_0_mbe_inj_ = (data & 0x1);
    il_iqueue_1_mbe_inj_ = ((data >> 1) & 0x1);
    il_iqueue_2_mbe_inj_ = ((data >> 2) & 0x1);
    il_iqueue_3_mbe_inj_ = ((data >> 3) & 0x1);
    il_oqueue_0_mbe_inj_ = ((data >> 4) & 0x1);
    il_oqueue_1_mbe_inj_ = ((data >> 5) & 0x1);
    il_oqueue_2_mbe_inj_ = ((data >> 6) & 0x1);
    il_oqueue_3_mbe_inj_ = ((data >> 7) & 0x1);
    wb_iqueue_mbe_inj_ = ((data >> 8) & 0x1);
    rb_oqueue_mbe_inj_ = ((data >> 9) & 0x1);
    stat_oqueue_mbe_inj_ = ((data >> 10) & 0x1);
    idle_oqueue_mbe_inj_ = ((data >> 11) & 0x1);
    diag_oqueue_mbe_inj_ = ((data >> 12) & 0x1);
    il_iqueue_0_sbe_inj_ = ((data >> 13) & 0x1);
    il_iqueue_1_sbe_inj_ = ((data >> 14) & 0x1);
    il_iqueue_2_sbe_inj_ = ((data >> 15) & 0x1);
    il_iqueue_3_sbe_inj_ = ((data >> 16) & 0x1);
    il_oqueue_0_sbe_inj_ = ((data >> 17) & 0x1);
    il_oqueue_1_sbe_inj_ = ((data >> 18) & 0x1);
    il_oqueue_2_sbe_inj_ = ((data >> 19) & 0x1);
    il_oqueue_3_sbe_inj_ = ((data >> 20) & 0x1);
    wb_iqueue_sbe_inj_ = ((data >> 21) & 0x1);
    rb_oqueue_sbe_inj_ = ((data >> 22) & 0x1);
    stat_oqueue_sbe_inj_ = ((data >> 23) & 0x1);
    idle_oqueue_sbe_inj_ = ((data >> 24) & 0x1);
    diag_oqueue_sbe_inj_ = ((data >> 25) & 0x1);
    pbus_parity_inj_[0] = ((data >> 26) & 0x1);
    pbus_parity_inj_[1] = ((data >> 27) & 0x1);
    pbus_parity_inj_[2] = ((data >> 28) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    il_iqueue_0_mbe_inj_ = 0x0;
    il_iqueue_1_mbe_inj_ = 0x0;
    il_iqueue_2_mbe_inj_ = 0x0;
    il_iqueue_3_mbe_inj_ = 0x0;
    il_oqueue_0_mbe_inj_ = 0x0;
    il_oqueue_1_mbe_inj_ = 0x0;
    il_oqueue_2_mbe_inj_ = 0x0;
    il_oqueue_3_mbe_inj_ = 0x0;
    wb_iqueue_mbe_inj_ = 0x0;
    rb_oqueue_mbe_inj_ = 0x0;
    stat_oqueue_mbe_inj_ = 0x0;
    idle_oqueue_mbe_inj_ = 0x0;
    diag_oqueue_mbe_inj_ = 0x0;
    il_iqueue_0_sbe_inj_ = 0x0;
    il_iqueue_1_sbe_inj_ = 0x0;
    il_iqueue_2_sbe_inj_ = 0x0;
    il_iqueue_3_sbe_inj_ = 0x0;
    il_oqueue_0_sbe_inj_ = 0x0;
    il_oqueue_1_sbe_inj_ = 0x0;
    il_oqueue_2_sbe_inj_ = 0x0;
    il_oqueue_3_sbe_inj_ = 0x0;
    wb_iqueue_sbe_inj_ = 0x0;
    rb_oqueue_sbe_inj_ = 0x0;
    stat_oqueue_sbe_inj_ = 0x0;
    idle_oqueue_sbe_inj_ = 0x0;
    diag_oqueue_sbe_inj_ = 0x0;
    pbus_parity_inj_[0] = 0x0;
    pbus_parity_inj_[1] = 0x0;
    pbus_parity_inj_[2] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PbusIntInj") + ":\n";
    r += indent_string + "  " + std::string("il_iqueue_0_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_0_mbe_inj_) ) + "\n";
    all_zeros &= (0 == il_iqueue_0_mbe_inj_);
    r += indent_string + "  " + std::string("il_iqueue_1_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_1_mbe_inj_) ) + "\n";
    all_zeros &= (0 == il_iqueue_1_mbe_inj_);
    r += indent_string + "  " + std::string("il_iqueue_2_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_2_mbe_inj_) ) + "\n";
    all_zeros &= (0 == il_iqueue_2_mbe_inj_);
    r += indent_string + "  " + std::string("il_iqueue_3_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_3_mbe_inj_) ) + "\n";
    all_zeros &= (0 == il_iqueue_3_mbe_inj_);
    r += indent_string + "  " + std::string("il_oqueue_0_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_0_mbe_inj_) ) + "\n";
    all_zeros &= (0 == il_oqueue_0_mbe_inj_);
    r += indent_string + "  " + std::string("il_oqueue_1_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_1_mbe_inj_) ) + "\n";
    all_zeros &= (0 == il_oqueue_1_mbe_inj_);
    r += indent_string + "  " + std::string("il_oqueue_2_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_2_mbe_inj_) ) + "\n";
    all_zeros &= (0 == il_oqueue_2_mbe_inj_);
    r += indent_string + "  " + std::string("il_oqueue_3_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_3_mbe_inj_) ) + "\n";
    all_zeros &= (0 == il_oqueue_3_mbe_inj_);
    r += indent_string + "  " + std::string("wb_iqueue_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wb_iqueue_mbe_inj_) ) + "\n";
    all_zeros &= (0 == wb_iqueue_mbe_inj_);
    r += indent_string + "  " + std::string("rb_oqueue_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_oqueue_mbe_inj_) ) + "\n";
    all_zeros &= (0 == rb_oqueue_mbe_inj_);
    r += indent_string + "  " + std::string("stat_oqueue_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stat_oqueue_mbe_inj_) ) + "\n";
    all_zeros &= (0 == stat_oqueue_mbe_inj_);
    r += indent_string + "  " + std::string("idle_oqueue_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idle_oqueue_mbe_inj_) ) + "\n";
    all_zeros &= (0 == idle_oqueue_mbe_inj_);
    r += indent_string + "  " + std::string("diag_oqueue_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oqueue_mbe_inj_) ) + "\n";
    all_zeros &= (0 == diag_oqueue_mbe_inj_);
    r += indent_string + "  " + std::string("il_iqueue_0_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_0_sbe_inj_) ) + "\n";
    all_zeros &= (0 == il_iqueue_0_sbe_inj_);
    r += indent_string + "  " + std::string("il_iqueue_1_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_1_sbe_inj_) ) + "\n";
    all_zeros &= (0 == il_iqueue_1_sbe_inj_);
    r += indent_string + "  " + std::string("il_iqueue_2_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_2_sbe_inj_) ) + "\n";
    all_zeros &= (0 == il_iqueue_2_sbe_inj_);
    r += indent_string + "  " + std::string("il_iqueue_3_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_3_sbe_inj_) ) + "\n";
    all_zeros &= (0 == il_iqueue_3_sbe_inj_);
    r += indent_string + "  " + std::string("il_oqueue_0_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_0_sbe_inj_) ) + "\n";
    all_zeros &= (0 == il_oqueue_0_sbe_inj_);
    r += indent_string + "  " + std::string("il_oqueue_1_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_1_sbe_inj_) ) + "\n";
    all_zeros &= (0 == il_oqueue_1_sbe_inj_);
    r += indent_string + "  " + std::string("il_oqueue_2_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_2_sbe_inj_) ) + "\n";
    all_zeros &= (0 == il_oqueue_2_sbe_inj_);
    r += indent_string + "  " + std::string("il_oqueue_3_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_3_sbe_inj_) ) + "\n";
    all_zeros &= (0 == il_oqueue_3_sbe_inj_);
    r += indent_string + "  " + std::string("wb_iqueue_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wb_iqueue_sbe_inj_) ) + "\n";
    all_zeros &= (0 == wb_iqueue_sbe_inj_);
    r += indent_string + "  " + std::string("rb_oqueue_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_oqueue_sbe_inj_) ) + "\n";
    all_zeros &= (0 == rb_oqueue_sbe_inj_);
    r += indent_string + "  " + std::string("stat_oqueue_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stat_oqueue_sbe_inj_) ) + "\n";
    all_zeros &= (0 == stat_oqueue_sbe_inj_);
    r += indent_string + "  " + std::string("idle_oqueue_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idle_oqueue_sbe_inj_) ) + "\n";
    all_zeros &= (0 == idle_oqueue_sbe_inj_);
    r += indent_string + "  " + std::string("diag_oqueue_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oqueue_sbe_inj_) ) + "\n";
    all_zeros &= (0 == diag_oqueue_sbe_inj_);
    for (uint32_t f=0;f<3;++f) {
      r += indent_string + "  " + std::string("pbus_parity_inj") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbus_parity_inj_[f]) ) + "\n";
      all_zeros &= (0 == pbus_parity_inj_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PbusIntInj") + ":\n";
    r += indent_string + "  " + std::string("il_iqueue_0_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_0_mbe_inj_) ) + "\n";
    all_zeros &= (0 == il_iqueue_0_mbe_inj_);
    r += indent_string + "  " + std::string("il_iqueue_1_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_1_mbe_inj_) ) + "\n";
    all_zeros &= (0 == il_iqueue_1_mbe_inj_);
    r += indent_string + "  " + std::string("il_iqueue_2_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_2_mbe_inj_) ) + "\n";
    all_zeros &= (0 == il_iqueue_2_mbe_inj_);
    r += indent_string + "  " + std::string("il_iqueue_3_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_3_mbe_inj_) ) + "\n";
    all_zeros &= (0 == il_iqueue_3_mbe_inj_);
    r += indent_string + "  " + std::string("il_oqueue_0_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_0_mbe_inj_) ) + "\n";
    all_zeros &= (0 == il_oqueue_0_mbe_inj_);
    r += indent_string + "  " + std::string("il_oqueue_1_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_1_mbe_inj_) ) + "\n";
    all_zeros &= (0 == il_oqueue_1_mbe_inj_);
    r += indent_string + "  " + std::string("il_oqueue_2_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_2_mbe_inj_) ) + "\n";
    all_zeros &= (0 == il_oqueue_2_mbe_inj_);
    r += indent_string + "  " + std::string("il_oqueue_3_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_3_mbe_inj_) ) + "\n";
    all_zeros &= (0 == il_oqueue_3_mbe_inj_);
    r += indent_string + "  " + std::string("wb_iqueue_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wb_iqueue_mbe_inj_) ) + "\n";
    all_zeros &= (0 == wb_iqueue_mbe_inj_);
    r += indent_string + "  " + std::string("rb_oqueue_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_oqueue_mbe_inj_) ) + "\n";
    all_zeros &= (0 == rb_oqueue_mbe_inj_);
    r += indent_string + "  " + std::string("stat_oqueue_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stat_oqueue_mbe_inj_) ) + "\n";
    all_zeros &= (0 == stat_oqueue_mbe_inj_);
    r += indent_string + "  " + std::string("idle_oqueue_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idle_oqueue_mbe_inj_) ) + "\n";
    all_zeros &= (0 == idle_oqueue_mbe_inj_);
    r += indent_string + "  " + std::string("diag_oqueue_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oqueue_mbe_inj_) ) + "\n";
    all_zeros &= (0 == diag_oqueue_mbe_inj_);
    r += indent_string + "  " + std::string("il_iqueue_0_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_0_sbe_inj_) ) + "\n";
    all_zeros &= (0 == il_iqueue_0_sbe_inj_);
    r += indent_string + "  " + std::string("il_iqueue_1_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_1_sbe_inj_) ) + "\n";
    all_zeros &= (0 == il_iqueue_1_sbe_inj_);
    r += indent_string + "  " + std::string("il_iqueue_2_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_2_sbe_inj_) ) + "\n";
    all_zeros &= (0 == il_iqueue_2_sbe_inj_);
    r += indent_string + "  " + std::string("il_iqueue_3_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_iqueue_3_sbe_inj_) ) + "\n";
    all_zeros &= (0 == il_iqueue_3_sbe_inj_);
    r += indent_string + "  " + std::string("il_oqueue_0_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_0_sbe_inj_) ) + "\n";
    all_zeros &= (0 == il_oqueue_0_sbe_inj_);
    r += indent_string + "  " + std::string("il_oqueue_1_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_1_sbe_inj_) ) + "\n";
    all_zeros &= (0 == il_oqueue_1_sbe_inj_);
    r += indent_string + "  " + std::string("il_oqueue_2_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_2_sbe_inj_) ) + "\n";
    all_zeros &= (0 == il_oqueue_2_sbe_inj_);
    r += indent_string + "  " + std::string("il_oqueue_3_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_oqueue_3_sbe_inj_) ) + "\n";
    all_zeros &= (0 == il_oqueue_3_sbe_inj_);
    r += indent_string + "  " + std::string("wb_iqueue_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wb_iqueue_sbe_inj_) ) + "\n";
    all_zeros &= (0 == wb_iqueue_sbe_inj_);
    r += indent_string + "  " + std::string("rb_oqueue_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_oqueue_sbe_inj_) ) + "\n";
    all_zeros &= (0 == rb_oqueue_sbe_inj_);
    r += indent_string + "  " + std::string("stat_oqueue_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stat_oqueue_sbe_inj_) ) + "\n";
    all_zeros &= (0 == stat_oqueue_sbe_inj_);
    r += indent_string + "  " + std::string("idle_oqueue_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idle_oqueue_sbe_inj_) ) + "\n";
    all_zeros &= (0 == idle_oqueue_sbe_inj_);
    r += indent_string + "  " + std::string("diag_oqueue_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_oqueue_sbe_inj_) ) + "\n";
    all_zeros &= (0 == diag_oqueue_sbe_inj_);
    for (uint32_t f=0;f<3;++f) {
      r += indent_string + "  " + std::string("pbus_parity_inj") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbus_parity_inj_[f]) ) + "\n";
      all_zeros &= (0 == pbus_parity_inj_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t il_iqueue_0_mbe_inj_;
  uint8_t il_iqueue_1_mbe_inj_;
  uint8_t il_iqueue_2_mbe_inj_;
  uint8_t il_iqueue_3_mbe_inj_;
  uint8_t il_oqueue_0_mbe_inj_;
  uint8_t il_oqueue_1_mbe_inj_;
  uint8_t il_oqueue_2_mbe_inj_;
  uint8_t il_oqueue_3_mbe_inj_;
  uint8_t wb_iqueue_mbe_inj_;
  uint8_t rb_oqueue_mbe_inj_;
  uint8_t stat_oqueue_mbe_inj_;
  uint8_t idle_oqueue_mbe_inj_;
  uint8_t diag_oqueue_mbe_inj_;
  uint8_t il_iqueue_0_sbe_inj_;
  uint8_t il_iqueue_1_sbe_inj_;
  uint8_t il_iqueue_2_sbe_inj_;
  uint8_t il_iqueue_3_sbe_inj_;
  uint8_t il_oqueue_0_sbe_inj_;
  uint8_t il_oqueue_1_sbe_inj_;
  uint8_t il_oqueue_2_sbe_inj_;
  uint8_t il_oqueue_3_sbe_inj_;
  uint8_t wb_iqueue_sbe_inj_;
  uint8_t rb_oqueue_sbe_inj_;
  uint8_t stat_oqueue_sbe_inj_;
  uint8_t idle_oqueue_sbe_inj_;
  uint8_t diag_oqueue_sbe_inj_;
  std::array< uint8_t, 3 > pbus_parity_inj_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x200000; // to get to pbc
    offset += 0xf0; // to get to intr_inj
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PBUS_INT_INJ_H__
