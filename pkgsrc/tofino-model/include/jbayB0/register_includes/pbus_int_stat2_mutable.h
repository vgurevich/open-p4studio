/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PBUS_INT_STAT2_MUTABLE_H__
#define __REGISTER_INCLUDES_PBUS_INT_STAT2_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class PbusIntStat2Mutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PbusIntStat2Mutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, true, write_callback, read_callback, std::string("PbusIntStat2Mutable"))
    {
    }
  PbusIntStat2Mutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PbusIntStat2Mutable")
    {
    }
public:





  uint8_t il_tx_dr_0_rd_err() { return il_tx_dr_0_rd_err_; }
  void il_tx_dr_0_rd_err(const uint8_t &v) { il_tx_dr_0_rd_err_=v; }





  uint8_t il_tx_dr_1_rd_err() { return il_tx_dr_1_rd_err_; }
  void il_tx_dr_1_rd_err(const uint8_t &v) { il_tx_dr_1_rd_err_=v; }





  uint8_t il_tx_dr_2_rd_err() { return il_tx_dr_2_rd_err_; }
  void il_tx_dr_2_rd_err(const uint8_t &v) { il_tx_dr_2_rd_err_=v; }





  uint8_t il_tx_dr_3_rd_err() { return il_tx_dr_3_rd_err_; }
  void il_tx_dr_3_rd_err(const uint8_t &v) { il_tx_dr_3_rd_err_=v; }





  uint8_t wb_tx_dr_rd_err() { return wb_tx_dr_rd_err_; }
  void wb_tx_dr_rd_err(const uint8_t &v) { wb_tx_dr_rd_err_=v; }





  uint8_t rb_tx_dr_rd_err() { return rb_tx_dr_rd_err_; }
  void rb_tx_dr_rd_err(const uint8_t &v) { rb_tx_dr_rd_err_=v; }





  uint8_t stat_fm_dr_rd_err() { return stat_fm_dr_rd_err_; }
  void stat_fm_dr_rd_err(const uint8_t &v) { stat_fm_dr_rd_err_=v; }





  uint8_t idle_fm_dr_rd_err() { return idle_fm_dr_rd_err_; }
  void idle_fm_dr_rd_err(const uint8_t &v) { idle_fm_dr_rd_err_=v; }





  uint8_t diag_fm_dr_rd_err() { return diag_fm_dr_rd_err_; }
  void diag_fm_dr_rd_err(const uint8_t &v) { diag_fm_dr_rd_err_=v; }





  uint8_t pbus_flush_done() { return pbus_flush_done_; }
  void pbus_flush_done(const uint8_t &v) { pbus_flush_done_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (il_tx_dr_0_rd_err_ & 0x1);
    *data |= ((il_tx_dr_1_rd_err_ & 0x1) << 1);
    *data |= ((il_tx_dr_2_rd_err_ & 0x1) << 2);
    *data |= ((il_tx_dr_3_rd_err_ & 0x1) << 3);
    *data |= ((wb_tx_dr_rd_err_ & 0x1) << 4);
    *data |= ((rb_tx_dr_rd_err_ & 0x1) << 5);
    *data |= ((stat_fm_dr_rd_err_ & 0x1) << 6);
    *data |= ((idle_fm_dr_rd_err_ & 0x1) << 7);
    *data |= ((diag_fm_dr_rd_err_ & 0x1) << 8);
    *data |= ((pbus_flush_done_ & 0x1) << 9);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    il_tx_dr_0_rd_err_ &= ~(data & 0x1);
    il_tx_dr_1_rd_err_ &= ~((data >> 1) & 0x1);
    il_tx_dr_2_rd_err_ &= ~((data >> 2) & 0x1);
    il_tx_dr_3_rd_err_ &= ~((data >> 3) & 0x1);
    wb_tx_dr_rd_err_ &= ~((data >> 4) & 0x1);
    rb_tx_dr_rd_err_ &= ~((data >> 5) & 0x1);
    stat_fm_dr_rd_err_ &= ~((data >> 6) & 0x1);
    idle_fm_dr_rd_err_ &= ~((data >> 7) & 0x1);
    diag_fm_dr_rd_err_ &= ~((data >> 8) & 0x1);
    pbus_flush_done_ &= ~((data >> 9) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    il_tx_dr_0_rd_err_ = 0x0;
    il_tx_dr_1_rd_err_ = 0x0;
    il_tx_dr_2_rd_err_ = 0x0;
    il_tx_dr_3_rd_err_ = 0x0;
    wb_tx_dr_rd_err_ = 0x0;
    rb_tx_dr_rd_err_ = 0x0;
    stat_fm_dr_rd_err_ = 0x0;
    idle_fm_dr_rd_err_ = 0x0;
    diag_fm_dr_rd_err_ = 0x0;
    pbus_flush_done_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PbusIntStat2Mutable") + ":\n";
    r += indent_string + "  " + std::string("il_tx_dr_0_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_tx_dr_0_rd_err_) ) + "\n";
    all_zeros &= (0 == il_tx_dr_0_rd_err_);
    r += indent_string + "  " + std::string("il_tx_dr_1_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_tx_dr_1_rd_err_) ) + "\n";
    all_zeros &= (0 == il_tx_dr_1_rd_err_);
    r += indent_string + "  " + std::string("il_tx_dr_2_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_tx_dr_2_rd_err_) ) + "\n";
    all_zeros &= (0 == il_tx_dr_2_rd_err_);
    r += indent_string + "  " + std::string("il_tx_dr_3_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_tx_dr_3_rd_err_) ) + "\n";
    all_zeros &= (0 == il_tx_dr_3_rd_err_);
    r += indent_string + "  " + std::string("wb_tx_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wb_tx_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == wb_tx_dr_rd_err_);
    r += indent_string + "  " + std::string("rb_tx_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_tx_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == rb_tx_dr_rd_err_);
    r += indent_string + "  " + std::string("stat_fm_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stat_fm_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == stat_fm_dr_rd_err_);
    r += indent_string + "  " + std::string("idle_fm_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idle_fm_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == idle_fm_dr_rd_err_);
    r += indent_string + "  " + std::string("diag_fm_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_fm_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == diag_fm_dr_rd_err_);
    r += indent_string + "  " + std::string("pbus_flush_done") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbus_flush_done_) ) + "\n";
    all_zeros &= (0 == pbus_flush_done_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PbusIntStat2Mutable") + ":\n";
    r += indent_string + "  " + std::string("il_tx_dr_0_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_tx_dr_0_rd_err_) ) + "\n";
    all_zeros &= (0 == il_tx_dr_0_rd_err_);
    r += indent_string + "  " + std::string("il_tx_dr_1_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_tx_dr_1_rd_err_) ) + "\n";
    all_zeros &= (0 == il_tx_dr_1_rd_err_);
    r += indent_string + "  " + std::string("il_tx_dr_2_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_tx_dr_2_rd_err_) ) + "\n";
    all_zeros &= (0 == il_tx_dr_2_rd_err_);
    r += indent_string + "  " + std::string("il_tx_dr_3_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_tx_dr_3_rd_err_) ) + "\n";
    all_zeros &= (0 == il_tx_dr_3_rd_err_);
    r += indent_string + "  " + std::string("wb_tx_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wb_tx_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == wb_tx_dr_rd_err_);
    r += indent_string + "  " + std::string("rb_tx_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_tx_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == rb_tx_dr_rd_err_);
    r += indent_string + "  " + std::string("stat_fm_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stat_fm_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == stat_fm_dr_rd_err_);
    r += indent_string + "  " + std::string("idle_fm_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(idle_fm_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == idle_fm_dr_rd_err_);
    r += indent_string + "  " + std::string("diag_fm_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_fm_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == diag_fm_dr_rd_err_);
    r += indent_string + "  " + std::string("pbus_flush_done") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbus_flush_done_) ) + "\n";
    all_zeros &= (0 == pbus_flush_done_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t il_tx_dr_0_rd_err_;
  uint8_t il_tx_dr_1_rd_err_;
  uint8_t il_tx_dr_2_rd_err_;
  uint8_t il_tx_dr_3_rd_err_;
  uint8_t wb_tx_dr_rd_err_;
  uint8_t rb_tx_dr_rd_err_;
  uint8_t stat_fm_dr_rd_err_;
  uint8_t idle_fm_dr_rd_err_;
  uint8_t diag_fm_dr_rd_err_;
  uint8_t pbus_flush_done_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x200000; // to get to pbc
    offset += 0x58; // to get to intr_stat2
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PBUS_INT_STAT2_MUTABLE_H__
