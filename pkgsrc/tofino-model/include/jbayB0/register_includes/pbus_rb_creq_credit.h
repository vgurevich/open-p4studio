/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PBUS_RB_CREQ_CREDIT_H__
#define __REGISTER_INCLUDES_PBUS_RB_CREQ_CREDIT_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class PbusRbCreqCredit : public model_core::RegisterBlock<RegisterCallback> {
public:
  PbusRbCreqCredit(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 96, false, write_callback, read_callback, std::string("PbusRbCreqCredit"))
    {
    }
  PbusRbCreqCredit(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PbusRbCreqCredit")
    {
    }
public:







  uint8_t &credit(int j0) { return credit_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (credit_[0] & 0x3f);
      *data |= ((credit_[1] & 0x3f) << 6);
      *data |= ((credit_[2] & 0x3f) << 12);
      *data |= ((credit_[3] & 0x3f) << 18);
      *data |= ((credit_[4] & 0x3f) << 24);
      *data |= ((credit_[5] & 0x3) << 30);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = ((credit_[5] & 0x3c) >> 2);
      *data |= ((credit_[6] & 0x3f) << 4);
      *data |= ((credit_[7] & 0x3f) << 10);
      *data |= ((credit_[8] & 0x3f) << 16);
      *data |= ((credit_[9] & 0x3f) << 22);
      *data |= ((credit_[10] & 0xf) << 28);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = ((credit_[10] & 0x30) >> 4);
      *data |= ((credit_[11] & 0x3f) << 2);
      *data |= ((credit_[12] & 0x3f) << 8);
      *data |= ((credit_[13] & 0x3f) << 14);
      *data |= ((credit_[14] & 0x3f) << 20);
      *data |= ((credit_[15] & 0x3f) << 26);
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = (credit_[16] & 0x3f);
      *data |= ((credit_[17] & 0x3f) << 6);
      *data |= ((credit_[18] & 0x3f) << 12);
      *data |= ((credit_[19] & 0x3f) << 18);
      *data |= ((credit_[20] & 0x3f) << 24);
      *data |= ((credit_[21] & 0x3) << 30);
    }
    else if (offset >= 0x10 && offset < 0x14) {
      if (read_callback_) read_callback_();
      *data = ((credit_[21] & 0x3c) >> 2);
      *data |= ((credit_[22] & 0x3f) << 4);
      *data |= ((credit_[23] & 0x3f) << 10);
      *data |= ((credit_[24] & 0x3f) << 16);
      *data |= ((credit_[25] & 0x3f) << 22);
      *data |= ((credit_[26] & 0xf) << 28);
    }
    else if (offset >= 0x14 && offset < 0x18) {
      if (read_callback_) read_callback_();
      *data = ((credit_[26] & 0x30) >> 4);
      *data |= ((credit_[27] & 0x3f) << 2);
      *data |= ((credit_[28] & 0x3f) << 8);
      *data |= ((credit_[29] & 0x3f) << 14);
      *data |= ((credit_[30] & 0x3f) << 20);
      *data |= ((credit_[31] & 0x3f) << 26);
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      if (read_callback_) read_callback_();
      *data = (credit_[32] & 0x3f);
      *data |= ((credit_[33] & 0x3f) << 6);
      *data |= ((credit_[34] & 0x3f) << 12);
      *data |= ((credit_[35] & 0x3f) << 18);
      *data |= ((credit_[36] & 0x3f) << 24);
      *data |= ((credit_[37] & 0x3) << 30);
    }
    else if (offset >= 0x1c && offset < 0x20) {
      if (read_callback_) read_callback_();
      *data = ((credit_[37] & 0x3c) >> 2);
      *data |= ((credit_[38] & 0x3f) << 4);
      *data |= ((credit_[39] & 0x3f) << 10);
      *data |= ((credit_[40] & 0x3f) << 16);
      *data |= ((credit_[41] & 0x3f) << 22);
      *data |= ((credit_[42] & 0xf) << 28);
    }
    else if (offset >= 0x20 && offset < 0x24) {
      if (read_callback_) read_callback_();
      *data = ((credit_[42] & 0x30) >> 4);
      *data |= ((credit_[43] & 0x3f) << 2);
      *data |= ((credit_[44] & 0x3f) << 8);
      *data |= ((credit_[45] & 0x3f) << 14);
      *data |= ((credit_[46] & 0x3f) << 20);
      *data |= ((credit_[47] & 0x3f) << 26);
    }
    else if (offset >= 0x24 && offset < 0x28) {
      if (read_callback_) read_callback_();
      *data = (credit_[48] & 0x3f);
      *data |= ((credit_[49] & 0x3f) << 6);
      *data |= ((credit_[50] & 0x3f) << 12);
      *data |= ((credit_[51] & 0x3f) << 18);
      *data |= ((credit_[52] & 0x3f) << 24);
      *data |= ((credit_[53] & 0x3) << 30);
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      if (read_callback_) read_callback_();
      *data = ((credit_[53] & 0x3c) >> 2);
      *data |= ((credit_[54] & 0x3f) << 4);
      *data |= ((credit_[55] & 0x3f) << 10);
      *data |= ((credit_[56] & 0x3f) << 16);
      *data |= ((credit_[57] & 0x3f) << 22);
      *data |= ((credit_[58] & 0xf) << 28);
    }
    else if (offset >= 0x2c && offset < 0x30) {
      if (read_callback_) read_callback_();
      *data = ((credit_[58] & 0x30) >> 4);
      *data |= ((credit_[59] & 0x3f) << 2);
      *data |= ((credit_[60] & 0x3f) << 8);
      *data |= ((credit_[61] & 0x3f) << 14);
      *data |= ((credit_[62] & 0x3f) << 20);
      *data |= ((credit_[63] & 0x3f) << 26);
    }
    else if (offset >= 0x30 && offset < 0x34) {
      if (read_callback_) read_callback_();
      *data = (credit_[64] & 0x3f);
      *data |= ((credit_[65] & 0x3f) << 6);
      *data |= ((credit_[66] & 0x3f) << 12);
      *data |= ((credit_[67] & 0x3f) << 18);
      *data |= ((credit_[68] & 0x3f) << 24);
      *data |= ((credit_[69] & 0x3) << 30);
    }
    else if (offset >= 0x34 && offset < 0x38) {
      if (read_callback_) read_callback_();
      *data = ((credit_[69] & 0x3c) >> 2);
      *data |= ((credit_[70] & 0x3f) << 4);
      *data |= ((credit_[71] & 0x3f) << 10);
      *data |= ((credit_[72] & 0x3f) << 16);
      *data |= ((credit_[73] & 0x3f) << 22);
      *data |= ((credit_[74] & 0xf) << 28);
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      if (read_callback_) read_callback_();
      *data = ((credit_[74] & 0x30) >> 4);
      *data |= ((credit_[75] & 0x3f) << 2);
      *data |= ((credit_[76] & 0x3f) << 8);
      *data |= ((credit_[77] & 0x3f) << 14);
      *data |= ((credit_[78] & 0x3f) << 20);
      *data |= ((credit_[79] & 0x3f) << 26);
    }
    else if (offset >= 0x3c && offset < 0x40) {
      if (read_callback_) read_callback_();
      *data = (credit_[80] & 0x3f);
      *data |= ((credit_[81] & 0x3f) << 6);
      *data |= ((credit_[82] & 0x3f) << 12);
      *data |= ((credit_[83] & 0x3f) << 18);
      *data |= ((credit_[84] & 0x3f) << 24);
      *data |= ((credit_[85] & 0x3) << 30);
    }
    else if (offset >= 0x40 && offset < 0x44) {
      if (read_callback_) read_callback_();
      *data = ((credit_[85] & 0x3c) >> 2);
      *data |= ((credit_[86] & 0x3f) << 4);
      *data |= ((credit_[87] & 0x3f) << 10);
      *data |= ((credit_[88] & 0x3f) << 16);
      *data |= ((credit_[89] & 0x3f) << 22);
      *data |= ((credit_[90] & 0xf) << 28);
    }
    else if (offset >= 0x44 && offset < 0x48) {
      if (read_callback_) read_callback_();
      *data = ((credit_[90] & 0x30) >> 4);
      *data |= ((credit_[91] & 0x3f) << 2);
      *data |= ((credit_[92] & 0x3f) << 8);
      *data |= ((credit_[93] & 0x3f) << 14);
      *data |= ((credit_[94] & 0x3f) << 20);
      *data |= ((credit_[95] & 0x3f) << 26);
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      if (read_callback_) read_callback_();
      *data = (credit_[96] & 0x3f);
      *data |= ((credit_[97] & 0x3f) << 6);
      *data |= ((credit_[98] & 0x3f) << 12);
      *data |= ((credit_[99] & 0x3f) << 18);
      *data |= ((credit_[100] & 0x3f) << 24);
      *data |= ((credit_[101] & 0x3) << 30);
    }
    else if (offset >= 0x4c && offset < 0x50) {
      if (read_callback_) read_callback_();
      *data = ((credit_[101] & 0x3c) >> 2);
      *data |= ((credit_[102] & 0x3f) << 4);
      *data |= ((credit_[103] & 0x3f) << 10);
      *data |= ((credit_[104] & 0x3f) << 16);
      *data |= ((credit_[105] & 0x3f) << 22);
      *data |= ((credit_[106] & 0xf) << 28);
    }
    else if (offset >= 0x50 && offset < 0x54) {
      if (read_callback_) read_callback_();
      *data = ((credit_[106] & 0x30) >> 4);
      *data |= ((credit_[107] & 0x3f) << 2);
      *data |= ((credit_[108] & 0x3f) << 8);
      *data |= ((credit_[109] & 0x3f) << 14);
      *data |= ((credit_[110] & 0x3f) << 20);
      *data |= ((credit_[111] & 0x3f) << 26);
    }
    else if (offset >= 0x54 && offset < 0x58) {
      if (read_callback_) read_callback_();
      *data = (credit_[112] & 0x3f);
      *data |= ((credit_[113] & 0x3f) << 6);
      *data |= ((credit_[114] & 0x3f) << 12);
      *data |= ((credit_[115] & 0x3f) << 18);
      *data |= ((credit_[116] & 0x3f) << 24);
      *data |= ((credit_[117] & 0x3) << 30);
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      if (read_callback_) read_callback_();
      *data = ((credit_[117] & 0x3c) >> 2);
      *data |= ((credit_[118] & 0x3f) << 4);
      *data |= ((credit_[119] & 0x3f) << 10);
      *data |= ((credit_[120] & 0x3f) << 16);
      *data |= ((credit_[121] & 0x3f) << 22);
      *data |= ((credit_[122] & 0xf) << 28);
    }
    else if (offset >= 0x5c && offset < 0x60) {
      if (read_callback_) read_callback_();
      *data = ((credit_[122] & 0x30) >> 4);
      *data |= ((credit_[123] & 0x3f) << 2);
      *data |= ((credit_[124] & 0x3f) << 8);
      *data |= ((credit_[125] & 0x3f) << 14);
      *data |= ((credit_[126] & 0x3f) << 20);
      *data |= ((credit_[127] & 0x3f) << 26);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      credit_[0] = (data & 0x3f);
      credit_[1] = ((data >> 6) & 0x3f);
      credit_[2] = ((data >> 12) & 0x3f);
      credit_[3] = ((data >> 18) & 0x3f);
      credit_[4] = ((data >> 24) & 0x3f);
      credit_[5] = (((data >> 30) & 0x3) | (credit_[5] & 0x3c));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      credit_[5] = (((data << 2) & 0x3c) | (credit_[5] & 0x3));
      credit_[6] = ((data >> 4) & 0x3f);
      credit_[7] = ((data >> 10) & 0x3f);
      credit_[8] = ((data >> 16) & 0x3f);
      credit_[9] = ((data >> 22) & 0x3f);
      credit_[10] = (((data >> 28) & 0xf) | (credit_[10] & 0x30));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      credit_[10] = (((data << 4) & 0x30) | (credit_[10] & 0xf));
      credit_[11] = ((data >> 2) & 0x3f);
      credit_[12] = ((data >> 8) & 0x3f);
      credit_[13] = ((data >> 14) & 0x3f);
      credit_[14] = ((data >> 20) & 0x3f);
      credit_[15] = ((data >> 26) & 0x3f);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      credit_[16] = (data & 0x3f);
      credit_[17] = ((data >> 6) & 0x3f);
      credit_[18] = ((data >> 12) & 0x3f);
      credit_[19] = ((data >> 18) & 0x3f);
      credit_[20] = ((data >> 24) & 0x3f);
      credit_[21] = (((data >> 30) & 0x3) | (credit_[21] & 0x3c));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      credit_[21] = (((data << 2) & 0x3c) | (credit_[21] & 0x3));
      credit_[22] = ((data >> 4) & 0x3f);
      credit_[23] = ((data >> 10) & 0x3f);
      credit_[24] = ((data >> 16) & 0x3f);
      credit_[25] = ((data >> 22) & 0x3f);
      credit_[26] = (((data >> 28) & 0xf) | (credit_[26] & 0x30));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      credit_[26] = (((data << 4) & 0x30) | (credit_[26] & 0xf));
      credit_[27] = ((data >> 2) & 0x3f);
      credit_[28] = ((data >> 8) & 0x3f);
      credit_[29] = ((data >> 14) & 0x3f);
      credit_[30] = ((data >> 20) & 0x3f);
      credit_[31] = ((data >> 26) & 0x3f);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      credit_[32] = (data & 0x3f);
      credit_[33] = ((data >> 6) & 0x3f);
      credit_[34] = ((data >> 12) & 0x3f);
      credit_[35] = ((data >> 18) & 0x3f);
      credit_[36] = ((data >> 24) & 0x3f);
      credit_[37] = (((data >> 30) & 0x3) | (credit_[37] & 0x3c));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      credit_[37] = (((data << 2) & 0x3c) | (credit_[37] & 0x3));
      credit_[38] = ((data >> 4) & 0x3f);
      credit_[39] = ((data >> 10) & 0x3f);
      credit_[40] = ((data >> 16) & 0x3f);
      credit_[41] = ((data >> 22) & 0x3f);
      credit_[42] = (((data >> 28) & 0xf) | (credit_[42] & 0x30));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      credit_[42] = (((data << 4) & 0x30) | (credit_[42] & 0xf));
      credit_[43] = ((data >> 2) & 0x3f);
      credit_[44] = ((data >> 8) & 0x3f);
      credit_[45] = ((data >> 14) & 0x3f);
      credit_[46] = ((data >> 20) & 0x3f);
      credit_[47] = ((data >> 26) & 0x3f);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      credit_[48] = (data & 0x3f);
      credit_[49] = ((data >> 6) & 0x3f);
      credit_[50] = ((data >> 12) & 0x3f);
      credit_[51] = ((data >> 18) & 0x3f);
      credit_[52] = ((data >> 24) & 0x3f);
      credit_[53] = (((data >> 30) & 0x3) | (credit_[53] & 0x3c));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      credit_[53] = (((data << 2) & 0x3c) | (credit_[53] & 0x3));
      credit_[54] = ((data >> 4) & 0x3f);
      credit_[55] = ((data >> 10) & 0x3f);
      credit_[56] = ((data >> 16) & 0x3f);
      credit_[57] = ((data >> 22) & 0x3f);
      credit_[58] = (((data >> 28) & 0xf) | (credit_[58] & 0x30));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      credit_[58] = (((data << 4) & 0x30) | (credit_[58] & 0xf));
      credit_[59] = ((data >> 2) & 0x3f);
      credit_[60] = ((data >> 8) & 0x3f);
      credit_[61] = ((data >> 14) & 0x3f);
      credit_[62] = ((data >> 20) & 0x3f);
      credit_[63] = ((data >> 26) & 0x3f);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      credit_[64] = (data & 0x3f);
      credit_[65] = ((data >> 6) & 0x3f);
      credit_[66] = ((data >> 12) & 0x3f);
      credit_[67] = ((data >> 18) & 0x3f);
      credit_[68] = ((data >> 24) & 0x3f);
      credit_[69] = (((data >> 30) & 0x3) | (credit_[69] & 0x3c));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      credit_[69] = (((data << 2) & 0x3c) | (credit_[69] & 0x3));
      credit_[70] = ((data >> 4) & 0x3f);
      credit_[71] = ((data >> 10) & 0x3f);
      credit_[72] = ((data >> 16) & 0x3f);
      credit_[73] = ((data >> 22) & 0x3f);
      credit_[74] = (((data >> 28) & 0xf) | (credit_[74] & 0x30));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      credit_[74] = (((data << 4) & 0x30) | (credit_[74] & 0xf));
      credit_[75] = ((data >> 2) & 0x3f);
      credit_[76] = ((data >> 8) & 0x3f);
      credit_[77] = ((data >> 14) & 0x3f);
      credit_[78] = ((data >> 20) & 0x3f);
      credit_[79] = ((data >> 26) & 0x3f);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      credit_[80] = (data & 0x3f);
      credit_[81] = ((data >> 6) & 0x3f);
      credit_[82] = ((data >> 12) & 0x3f);
      credit_[83] = ((data >> 18) & 0x3f);
      credit_[84] = ((data >> 24) & 0x3f);
      credit_[85] = (((data >> 30) & 0x3) | (credit_[85] & 0x3c));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      credit_[85] = (((data << 2) & 0x3c) | (credit_[85] & 0x3));
      credit_[86] = ((data >> 4) & 0x3f);
      credit_[87] = ((data >> 10) & 0x3f);
      credit_[88] = ((data >> 16) & 0x3f);
      credit_[89] = ((data >> 22) & 0x3f);
      credit_[90] = (((data >> 28) & 0xf) | (credit_[90] & 0x30));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x44 && offset < 0x48) {
      credit_[90] = (((data << 4) & 0x30) | (credit_[90] & 0xf));
      credit_[91] = ((data >> 2) & 0x3f);
      credit_[92] = ((data >> 8) & 0x3f);
      credit_[93] = ((data >> 14) & 0x3f);
      credit_[94] = ((data >> 20) & 0x3f);
      credit_[95] = ((data >> 26) & 0x3f);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      credit_[96] = (data & 0x3f);
      credit_[97] = ((data >> 6) & 0x3f);
      credit_[98] = ((data >> 12) & 0x3f);
      credit_[99] = ((data >> 18) & 0x3f);
      credit_[100] = ((data >> 24) & 0x3f);
      credit_[101] = (((data >> 30) & 0x3) | (credit_[101] & 0x3c));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c && offset < 0x50) {
      credit_[101] = (((data << 2) & 0x3c) | (credit_[101] & 0x3));
      credit_[102] = ((data >> 4) & 0x3f);
      credit_[103] = ((data >> 10) & 0x3f);
      credit_[104] = ((data >> 16) & 0x3f);
      credit_[105] = ((data >> 22) & 0x3f);
      credit_[106] = (((data >> 28) & 0xf) | (credit_[106] & 0x30));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x54) {
      credit_[106] = (((data << 4) & 0x30) | (credit_[106] & 0xf));
      credit_[107] = ((data >> 2) & 0x3f);
      credit_[108] = ((data >> 8) & 0x3f);
      credit_[109] = ((data >> 14) & 0x3f);
      credit_[110] = ((data >> 20) & 0x3f);
      credit_[111] = ((data >> 26) & 0x3f);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x54 && offset < 0x58) {
      credit_[112] = (data & 0x3f);
      credit_[113] = ((data >> 6) & 0x3f);
      credit_[114] = ((data >> 12) & 0x3f);
      credit_[115] = ((data >> 18) & 0x3f);
      credit_[116] = ((data >> 24) & 0x3f);
      credit_[117] = (((data >> 30) & 0x3) | (credit_[117] & 0x3c));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      credit_[117] = (((data << 2) & 0x3c) | (credit_[117] & 0x3));
      credit_[118] = ((data >> 4) & 0x3f);
      credit_[119] = ((data >> 10) & 0x3f);
      credit_[120] = ((data >> 16) & 0x3f);
      credit_[121] = ((data >> 22) & 0x3f);
      credit_[122] = (((data >> 28) & 0xf) | (credit_[122] & 0x30));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c && offset < 0x60) {
      credit_[122] = (((data << 4) & 0x30) | (credit_[122] & 0xf));
      credit_[123] = ((data >> 2) & 0x3f);
      credit_[124] = ((data >> 8) & 0x3f);
      credit_[125] = ((data >> 14) & 0x3f);
      credit_[126] = ((data >> 20) & 0x3f);
      credit_[127] = ((data >> 26) & 0x3f);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    credit_[0] = 0x0;
    credit_[1] = 0x0;
    credit_[2] = 0x0;
    credit_[3] = 0x0;
    credit_[4] = 0x0;
    credit_[5] = 0x0;
    credit_[6] = 0x0;
    credit_[7] = 0x0;
    credit_[8] = 0x0;
    credit_[9] = 0x0;
    credit_[10] = 0x0;
    credit_[11] = 0x0;
    credit_[12] = 0x0;
    credit_[13] = 0x0;
    credit_[14] = 0x0;
    credit_[15] = 0x0;
    credit_[16] = 0x0;
    credit_[17] = 0x0;
    credit_[18] = 0x0;
    credit_[19] = 0x0;
    credit_[20] = 0x0;
    credit_[21] = 0x0;
    credit_[22] = 0x0;
    credit_[23] = 0x0;
    credit_[24] = 0x0;
    credit_[25] = 0x0;
    credit_[26] = 0x0;
    credit_[27] = 0x0;
    credit_[28] = 0x0;
    credit_[29] = 0x0;
    credit_[30] = 0x0;
    credit_[31] = 0x0;
    credit_[32] = 0x0;
    credit_[33] = 0x0;
    credit_[34] = 0x0;
    credit_[35] = 0x0;
    credit_[36] = 0x0;
    credit_[37] = 0x0;
    credit_[38] = 0x0;
    credit_[39] = 0x0;
    credit_[40] = 0x0;
    credit_[41] = 0x0;
    credit_[42] = 0x0;
    credit_[43] = 0x0;
    credit_[44] = 0x0;
    credit_[45] = 0x0;
    credit_[46] = 0x0;
    credit_[47] = 0x0;
    credit_[48] = 0x0;
    credit_[49] = 0x0;
    credit_[50] = 0x0;
    credit_[51] = 0x0;
    credit_[52] = 0x0;
    credit_[53] = 0x0;
    credit_[54] = 0x0;
    credit_[55] = 0x0;
    credit_[56] = 0x0;
    credit_[57] = 0x0;
    credit_[58] = 0x0;
    credit_[59] = 0x0;
    credit_[60] = 0x0;
    credit_[61] = 0x0;
    credit_[62] = 0x0;
    credit_[63] = 0x0;
    credit_[64] = 0x0;
    credit_[65] = 0x0;
    credit_[66] = 0x0;
    credit_[67] = 0x0;
    credit_[68] = 0x0;
    credit_[69] = 0x0;
    credit_[70] = 0x0;
    credit_[71] = 0x0;
    credit_[72] = 0x0;
    credit_[73] = 0x0;
    credit_[74] = 0x0;
    credit_[75] = 0x0;
    credit_[76] = 0x0;
    credit_[77] = 0x0;
    credit_[78] = 0x0;
    credit_[79] = 0x0;
    credit_[80] = 0x0;
    credit_[81] = 0x0;
    credit_[82] = 0x0;
    credit_[83] = 0x0;
    credit_[84] = 0x0;
    credit_[85] = 0x0;
    credit_[86] = 0x0;
    credit_[87] = 0x0;
    credit_[88] = 0x0;
    credit_[89] = 0x0;
    credit_[90] = 0x0;
    credit_[91] = 0x0;
    credit_[92] = 0x0;
    credit_[93] = 0x0;
    credit_[94] = 0x0;
    credit_[95] = 0x0;
    credit_[96] = 0x0;
    credit_[97] = 0x0;
    credit_[98] = 0x0;
    credit_[99] = 0x0;
    credit_[100] = 0x0;
    credit_[101] = 0x0;
    credit_[102] = 0x0;
    credit_[103] = 0x0;
    credit_[104] = 0x0;
    credit_[105] = 0x0;
    credit_[106] = 0x0;
    credit_[107] = 0x0;
    credit_[108] = 0x0;
    credit_[109] = 0x0;
    credit_[110] = 0x0;
    credit_[111] = 0x0;
    credit_[112] = 0x0;
    credit_[113] = 0x0;
    credit_[114] = 0x0;
    credit_[115] = 0x0;
    credit_[116] = 0x0;
    credit_[117] = 0x0;
    credit_[118] = 0x0;
    credit_[119] = 0x0;
    credit_[120] = 0x0;
    credit_[121] = 0x0;
    credit_[122] = 0x0;
    credit_[123] = 0x0;
    credit_[124] = 0x0;
    credit_[125] = 0x0;
    credit_[126] = 0x0;
    credit_[127] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PbusRbCreqCredit") + ":\n";
    for (uint32_t f=0;f<128;++f) {
      r += indent_string + "  " + std::string("credit") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(credit_[f]) ) + "\n";
      all_zeros &= (0 == credit_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PbusRbCreqCredit") + ":\n";
    for (uint32_t f=0;f<128;++f) {
      r += indent_string + "  " + std::string("credit") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(credit_[f]) ) + "\n";
      all_zeros &= (0 == credit_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 128 > credit_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x200000; // to get to pbc
    offset += 0x480; // to get to rb_creq_credit
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PBUS_RB_CREQ_CREDIT_H__
