/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PCIE_BW_CHANGE_H__
#define __REGISTER_INCLUDES_PCIE_BW_CHANGE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class PcieBwChange : public model_core::RegisterBlock<RegisterCallback> {
public:
  PcieBwChange(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, false, write_callback, read_callback, std::string("PcieBwChange"))
    {
    }
  PcieBwChange(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PcieBwChange")
    {
    }
public:





  uint8_t &lkwdx2allowed() { return lkwdx2allowed_; }





  uint8_t &lkwdx4allowed() { return lkwdx4allowed_; }






  uint8_t &lkwdx8allowed() { return lkwdx8allowed_; }






  uint8_t &lkwdx16allowed() { return lkwdx16allowed_; }





  uint8_t &lkwdchgreq() { return lkwdchgreq_; }










  uint8_t &maxlkspeed() { return maxlkspeed_; }







  uint8_t &lkspchgreq() { return lkspchgreq_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (lkwdx2allowed_ & 0x1);
    *data |= ((lkwdx4allowed_ & 0x1) << 1);
    *data |= ((lkwdx8allowed_ & 0x1) << 2);
    *data |= ((lkwdx16allowed_ & 0x1) << 3);
    *data |= ((lkwdchgreq_ & 0x1) << 4);
    *data |= ((maxlkspeed_ & 0x3) << 5);
    *data |= ((lkspchgreq_ & 0x1) << 7);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    lkwdx2allowed_ = (data & 0x1);
    lkwdx4allowed_ = ((data >> 1) & 0x1);
    lkwdx8allowed_ = ((data >> 2) & 0x1);
    lkwdx16allowed_ = ((data >> 3) & 0x1);
    lkwdchgreq_ = ((data >> 4) & 0x1);
    maxlkspeed_ = ((data >> 5) & 0x3);
    lkspchgreq_ = ((data >> 7) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    lkwdx2allowed_ = 0x0;
    lkwdx4allowed_ = 0x0;
    lkwdx8allowed_ = 0x0;
    lkwdx16allowed_ = 0x0;
    lkwdchgreq_ = 0x0;
    maxlkspeed_ = 0x0;
    lkspchgreq_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PcieBwChange") + ":\n";
    r += indent_string + "  " + std::string("lkwdx2allowed") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lkwdx2allowed_) ) + "\n";
    all_zeros &= (0 == lkwdx2allowed_);
    r += indent_string + "  " + std::string("lkwdx4allowed") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lkwdx4allowed_) ) + "\n";
    all_zeros &= (0 == lkwdx4allowed_);
    r += indent_string + "  " + std::string("lkwdx8allowed") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lkwdx8allowed_) ) + "\n";
    all_zeros &= (0 == lkwdx8allowed_);
    r += indent_string + "  " + std::string("lkwdx16allowed") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lkwdx16allowed_) ) + "\n";
    all_zeros &= (0 == lkwdx16allowed_);
    r += indent_string + "  " + std::string("lkwdchgreq") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lkwdchgreq_) ) + "\n";
    all_zeros &= (0 == lkwdchgreq_);
    r += indent_string + "  " + std::string("maxlkspeed") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(maxlkspeed_) ) + "\n";
    all_zeros &= (0 == maxlkspeed_);
    r += indent_string + "  " + std::string("lkspchgreq") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lkspchgreq_) ) + "\n";
    all_zeros &= (0 == lkspchgreq_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PcieBwChange") + ":\n";
    r += indent_string + "  " + std::string("lkwdx2allowed") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lkwdx2allowed_) ) + "\n";
    all_zeros &= (0 == lkwdx2allowed_);
    r += indent_string + "  " + std::string("lkwdx4allowed") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lkwdx4allowed_) ) + "\n";
    all_zeros &= (0 == lkwdx4allowed_);
    r += indent_string + "  " + std::string("lkwdx8allowed") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lkwdx8allowed_) ) + "\n";
    all_zeros &= (0 == lkwdx8allowed_);
    r += indent_string + "  " + std::string("lkwdx16allowed") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lkwdx16allowed_) ) + "\n";
    all_zeros &= (0 == lkwdx16allowed_);
    r += indent_string + "  " + std::string("lkwdchgreq") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lkwdchgreq_) ) + "\n";
    all_zeros &= (0 == lkwdchgreq_);
    r += indent_string + "  " + std::string("maxlkspeed") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(maxlkspeed_) ) + "\n";
    all_zeros &= (0 == maxlkspeed_);
    r += indent_string + "  " + std::string("lkspchgreq") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lkspchgreq_) ) + "\n";
    all_zeros &= (0 == lkspchgreq_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t lkwdx2allowed_;
  uint8_t lkwdx4allowed_;
  uint8_t lkwdx8allowed_;
  uint8_t lkwdx16allowed_;
  uint8_t lkwdchgreq_;
  uint8_t maxlkspeed_;
  uint8_t lkspchgreq_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x1b0; // to get to pcie_bw_change
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PCIE_BW_CHANGE_H__
