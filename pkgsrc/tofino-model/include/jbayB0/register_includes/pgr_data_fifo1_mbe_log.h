/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PGR_DATA_FIFO1_MBE_LOG_H__
#define __REGISTER_INCLUDES_PGR_DATA_FIFO1_MBE_LOG_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class PgrDataFifo1MbeLog : public model_core::RegisterBlock<RegisterCallback> {
public:
  PgrDataFifo1MbeLog(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 8, false, write_callback, read_callback, std::string("PgrDataFifo1MbeLog")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PgrDataFifo1MbeLog(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PgrDataFifo1MbeLog")
    {
    }
public:





  uint8_t &eth_cpu_fifo1_mem0_addr() { return eth_cpu_fifo1_mem0_addr_; }





  uint8_t &eth_cpu_fifo1_mem1_addr() { return eth_cpu_fifo1_mem1_addr_; }





  uint8_t &tbc_fifo1_mem0_addr() { return tbc_fifo1_mem0_addr_; }





  uint8_t &tbc_fifo1_mem1_addr() { return tbc_fifo1_mem1_addr_; }





  uint8_t &ebuf_p0_fifo1_mem0_addr() { return ebuf_p0_fifo1_mem0_addr_; }





  uint8_t &ebuf_p0_fifo1_mem1_addr() { return ebuf_p0_fifo1_mem1_addr_; }





  uint8_t &ebuf_p1_fifo1_mem0_addr() { return ebuf_p1_fifo1_mem0_addr_; }





  uint8_t &ebuf_p1_fifo1_mem1_addr() { return ebuf_p1_fifo1_mem1_addr_; }





  uint8_t &ebuf_p2_fifo1_mem0_addr() { return ebuf_p2_fifo1_mem0_addr_; }





  uint8_t &ebuf_p2_fifo1_mem1_addr() { return ebuf_p2_fifo1_mem1_addr_; }





  uint8_t &ebuf_p3_fifo1_mem0_addr() { return ebuf_p3_fifo1_mem0_addr_; }





  uint8_t &ebuf_p3_fifo1_mem1_addr() { return ebuf_p3_fifo1_mem1_addr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (eth_cpu_fifo1_mem0_addr_ & 0x1f);
      *data |= ((eth_cpu_fifo1_mem1_addr_ & 0x1f) << 5);
      *data |= ((tbc_fifo1_mem0_addr_ & 0x1f) << 10);
      *data |= ((tbc_fifo1_mem1_addr_ & 0x1f) << 15);
      *data |= ((ebuf_p0_fifo1_mem0_addr_ & 0x1f) << 20);
      *data |= ((ebuf_p0_fifo1_mem1_addr_ & 0x1f) << 25);
      *data |= ((ebuf_p1_fifo1_mem0_addr_ & 0x3) << 30);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = ((ebuf_p1_fifo1_mem0_addr_ & 0x1c) >> 2);
      *data |= ((ebuf_p1_fifo1_mem1_addr_ & 0x1f) << 3);
      *data |= ((ebuf_p2_fifo1_mem0_addr_ & 0x1f) << 8);
      *data |= ((ebuf_p2_fifo1_mem1_addr_ & 0x1f) << 13);
      *data |= ((ebuf_p3_fifo1_mem0_addr_ & 0x1f) << 18);
      *data |= ((ebuf_p3_fifo1_mem1_addr_ & 0x1f) << 23);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      eth_cpu_fifo1_mem0_addr_ = (data & 0x1f);
      eth_cpu_fifo1_mem1_addr_ = ((data >> 5) & 0x1f);
      tbc_fifo1_mem0_addr_ = ((data >> 10) & 0x1f);
      tbc_fifo1_mem1_addr_ = ((data >> 15) & 0x1f);
      ebuf_p0_fifo1_mem0_addr_ = ((data >> 20) & 0x1f);
      ebuf_p0_fifo1_mem1_addr_ = ((data >> 25) & 0x1f);
      ebuf_p1_fifo1_mem0_addr_ = (((data >> 30) & 0x3) | (ebuf_p1_fifo1_mem0_addr_ & 0x1c));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      ebuf_p1_fifo1_mem0_addr_ = (((data << 2) & 0x1c) | (ebuf_p1_fifo1_mem0_addr_ & 0x3));
      ebuf_p1_fifo1_mem1_addr_ = ((data >> 3) & 0x1f);
      ebuf_p2_fifo1_mem0_addr_ = ((data >> 8) & 0x1f);
      ebuf_p2_fifo1_mem1_addr_ = ((data >> 13) & 0x1f);
      ebuf_p3_fifo1_mem0_addr_ = ((data >> 18) & 0x1f);
      ebuf_p3_fifo1_mem1_addr_ = ((data >> 23) & 0x1f);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    eth_cpu_fifo1_mem0_addr_ = 0x0;
    eth_cpu_fifo1_mem1_addr_ = 0x0;
    tbc_fifo1_mem0_addr_ = 0x0;
    tbc_fifo1_mem1_addr_ = 0x0;
    ebuf_p0_fifo1_mem0_addr_ = 0x0;
    ebuf_p0_fifo1_mem1_addr_ = 0x0;
    ebuf_p1_fifo1_mem0_addr_ = 0x0;
    ebuf_p1_fifo1_mem1_addr_ = 0x0;
    ebuf_p2_fifo1_mem0_addr_ = 0x0;
    ebuf_p2_fifo1_mem1_addr_ = 0x0;
    ebuf_p3_fifo1_mem0_addr_ = 0x0;
    ebuf_p3_fifo1_mem1_addr_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PgrDataFifo1MbeLog") + ":\n";
    r += indent_string + "  " + std::string("eth_cpu_fifo1_mem0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eth_cpu_fifo1_mem0_addr_) ) + "\n";
    all_zeros &= (0 == eth_cpu_fifo1_mem0_addr_);
    r += indent_string + "  " + std::string("eth_cpu_fifo1_mem1_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eth_cpu_fifo1_mem1_addr_) ) + "\n";
    all_zeros &= (0 == eth_cpu_fifo1_mem1_addr_);
    r += indent_string + "  " + std::string("tbc_fifo1_mem0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tbc_fifo1_mem0_addr_) ) + "\n";
    all_zeros &= (0 == tbc_fifo1_mem0_addr_);
    r += indent_string + "  " + std::string("tbc_fifo1_mem1_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tbc_fifo1_mem1_addr_) ) + "\n";
    all_zeros &= (0 == tbc_fifo1_mem1_addr_);
    r += indent_string + "  " + std::string("ebuf_p0_fifo1_mem0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_p0_fifo1_mem0_addr_) ) + "\n";
    all_zeros &= (0 == ebuf_p0_fifo1_mem0_addr_);
    r += indent_string + "  " + std::string("ebuf_p0_fifo1_mem1_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_p0_fifo1_mem1_addr_) ) + "\n";
    all_zeros &= (0 == ebuf_p0_fifo1_mem1_addr_);
    r += indent_string + "  " + std::string("ebuf_p1_fifo1_mem0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_p1_fifo1_mem0_addr_) ) + "\n";
    all_zeros &= (0 == ebuf_p1_fifo1_mem0_addr_);
    r += indent_string + "  " + std::string("ebuf_p1_fifo1_mem1_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_p1_fifo1_mem1_addr_) ) + "\n";
    all_zeros &= (0 == ebuf_p1_fifo1_mem1_addr_);
    r += indent_string + "  " + std::string("ebuf_p2_fifo1_mem0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_p2_fifo1_mem0_addr_) ) + "\n";
    all_zeros &= (0 == ebuf_p2_fifo1_mem0_addr_);
    r += indent_string + "  " + std::string("ebuf_p2_fifo1_mem1_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_p2_fifo1_mem1_addr_) ) + "\n";
    all_zeros &= (0 == ebuf_p2_fifo1_mem1_addr_);
    r += indent_string + "  " + std::string("ebuf_p3_fifo1_mem0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_p3_fifo1_mem0_addr_) ) + "\n";
    all_zeros &= (0 == ebuf_p3_fifo1_mem0_addr_);
    r += indent_string + "  " + std::string("ebuf_p3_fifo1_mem1_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_p3_fifo1_mem1_addr_) ) + "\n";
    all_zeros &= (0 == ebuf_p3_fifo1_mem1_addr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PgrDataFifo1MbeLog") + ":\n";
    r += indent_string + "  " + std::string("eth_cpu_fifo1_mem0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eth_cpu_fifo1_mem0_addr_) ) + "\n";
    all_zeros &= (0 == eth_cpu_fifo1_mem0_addr_);
    r += indent_string + "  " + std::string("eth_cpu_fifo1_mem1_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eth_cpu_fifo1_mem1_addr_) ) + "\n";
    all_zeros &= (0 == eth_cpu_fifo1_mem1_addr_);
    r += indent_string + "  " + std::string("tbc_fifo1_mem0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tbc_fifo1_mem0_addr_) ) + "\n";
    all_zeros &= (0 == tbc_fifo1_mem0_addr_);
    r += indent_string + "  " + std::string("tbc_fifo1_mem1_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tbc_fifo1_mem1_addr_) ) + "\n";
    all_zeros &= (0 == tbc_fifo1_mem1_addr_);
    r += indent_string + "  " + std::string("ebuf_p0_fifo1_mem0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_p0_fifo1_mem0_addr_) ) + "\n";
    all_zeros &= (0 == ebuf_p0_fifo1_mem0_addr_);
    r += indent_string + "  " + std::string("ebuf_p0_fifo1_mem1_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_p0_fifo1_mem1_addr_) ) + "\n";
    all_zeros &= (0 == ebuf_p0_fifo1_mem1_addr_);
    r += indent_string + "  " + std::string("ebuf_p1_fifo1_mem0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_p1_fifo1_mem0_addr_) ) + "\n";
    all_zeros &= (0 == ebuf_p1_fifo1_mem0_addr_);
    r += indent_string + "  " + std::string("ebuf_p1_fifo1_mem1_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_p1_fifo1_mem1_addr_) ) + "\n";
    all_zeros &= (0 == ebuf_p1_fifo1_mem1_addr_);
    r += indent_string + "  " + std::string("ebuf_p2_fifo1_mem0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_p2_fifo1_mem0_addr_) ) + "\n";
    all_zeros &= (0 == ebuf_p2_fifo1_mem0_addr_);
    r += indent_string + "  " + std::string("ebuf_p2_fifo1_mem1_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_p2_fifo1_mem1_addr_) ) + "\n";
    all_zeros &= (0 == ebuf_p2_fifo1_mem1_addr_);
    r += indent_string + "  " + std::string("ebuf_p3_fifo1_mem0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_p3_fifo1_mem0_addr_) ) + "\n";
    all_zeros &= (0 == ebuf_p3_fifo1_mem0_addr_);
    r += indent_string + "  " + std::string("ebuf_p3_fifo1_mem1_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_p3_fifo1_mem1_addr_) ) + "\n";
    all_zeros &= (0 == ebuf_p3_fifo1_mem1_addr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t eth_cpu_fifo1_mem0_addr_;
  uint8_t eth_cpu_fifo1_mem1_addr_;
  uint8_t tbc_fifo1_mem0_addr_;
  uint8_t tbc_fifo1_mem1_addr_;
  uint8_t ebuf_p0_fifo1_mem0_addr_;
  uint8_t ebuf_p0_fifo1_mem1_addr_;
  uint8_t ebuf_p1_fifo1_mem0_addr_;
  uint8_t ebuf_p1_fifo1_mem1_addr_;
  uint8_t ebuf_p2_fifo1_mem0_addr_;
  uint8_t ebuf_p2_fifo1_mem1_addr_;
  uint8_t ebuf_p3_fifo1_mem0_addr_;
  uint8_t ebuf_p3_fifo1_mem1_addr_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x34000; // to get to pgrreg
    offset += 0x2000; // to get to pgr_common
    offset += 0x258; // to get to pgr_data_fifo1_mbe_log
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PGR_DATA_FIFO1_MBE_LOG_H__
