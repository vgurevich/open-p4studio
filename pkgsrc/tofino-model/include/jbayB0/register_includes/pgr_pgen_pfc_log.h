/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PGR_PGEN_PFC_LOG_H__
#define __REGISTER_INCLUDES_PGR_PGEN_PFC_LOG_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class PgrPgenPfcLog : public model_core::RegisterBlock<RegisterCallback> {
public:
  PgrPgenPfcLog(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 8, false, write_callback, read_callback, std::string("PgrPgenPfcLog")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PgrPgenPfcLog(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PgrPgenPfcLog")
    {
    }
public:





  uint8_t &pfc_statemachine_write() { return pfc_statemachine_write_; }





  uint8_t &pfc_statemachine_read() { return pfc_statemachine_read_; }





  uint16_t &pfc_mem_cur_wraddr() { return pfc_mem_cur_wraddr_; }







  uint16_t &pfc_mem_rd_num_words(int j0) { return pfc_mem_rd_num_words_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (pfc_statemachine_write_ & 0x7);
      *data |= ((pfc_statemachine_read_ & 0x3) << 3);
      *data |= ((pfc_mem_cur_wraddr_ & 0x3ff) << 5);
      *data |= ((pfc_mem_rd_num_words_[0] & 0x3ff) << 15);
      *data |= ((pfc_mem_rd_num_words_[1] & 0x7f) << 25);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = ((pfc_mem_rd_num_words_[1] & 0x380) >> 7);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      pfc_statemachine_write_ = (data & 0x7);
      pfc_statemachine_read_ = ((data >> 3) & 0x3);
      pfc_mem_cur_wraddr_ = ((data >> 5) & 0x3ff);
      pfc_mem_rd_num_words_[0] = ((data >> 15) & 0x3ff);
      pfc_mem_rd_num_words_[1] = (((data >> 25) & 0x7f) | (pfc_mem_rd_num_words_[1] & 0x380));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      pfc_mem_rd_num_words_[1] = (((data << 7) & 0x380) | (pfc_mem_rd_num_words_[1] & 0x7f));
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    pfc_statemachine_write_ = 0x0;
    pfc_statemachine_read_ = 0x0;
    pfc_mem_cur_wraddr_ = 0x0;
    pfc_mem_rd_num_words_[0] = 0x0;
    pfc_mem_rd_num_words_[1] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PgrPgenPfcLog") + ":\n";
    r += indent_string + "  " + std::string("pfc_statemachine_write") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_statemachine_write_) ) + "\n";
    all_zeros &= (0 == pfc_statemachine_write_);
    r += indent_string + "  " + std::string("pfc_statemachine_read") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_statemachine_read_) ) + "\n";
    all_zeros &= (0 == pfc_statemachine_read_);
    r += indent_string + "  " + std::string("pfc_mem_cur_wraddr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_mem_cur_wraddr_) ) + "\n";
    all_zeros &= (0 == pfc_mem_cur_wraddr_);
    for (uint32_t f=0;f<2;++f) {
      r += indent_string + "  " + std::string("pfc_mem_rd_num_words") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_mem_rd_num_words_[f]) ) + "\n";
      all_zeros &= (0 == pfc_mem_rd_num_words_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PgrPgenPfcLog") + ":\n";
    r += indent_string + "  " + std::string("pfc_statemachine_write") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_statemachine_write_) ) + "\n";
    all_zeros &= (0 == pfc_statemachine_write_);
    r += indent_string + "  " + std::string("pfc_statemachine_read") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_statemachine_read_) ) + "\n";
    all_zeros &= (0 == pfc_statemachine_read_);
    r += indent_string + "  " + std::string("pfc_mem_cur_wraddr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_mem_cur_wraddr_) ) + "\n";
    all_zeros &= (0 == pfc_mem_cur_wraddr_);
    for (uint32_t f=0;f<2;++f) {
      r += indent_string + "  " + std::string("pfc_mem_rd_num_words") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_mem_rd_num_words_[f]) ) + "\n";
      all_zeros &= (0 == pfc_mem_rd_num_words_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t pfc_statemachine_write_;
  uint8_t pfc_statemachine_read_;
  uint16_t pfc_mem_cur_wraddr_;
  std::array< uint16_t, 2 > pfc_mem_rd_num_words_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x34000; // to get to pgrreg
    offset += 0x2000; // to get to pgr_common
    offset += 0x110; // to get to pgen_pfc_log
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PGR_PGEN_PFC_LOG_H__
