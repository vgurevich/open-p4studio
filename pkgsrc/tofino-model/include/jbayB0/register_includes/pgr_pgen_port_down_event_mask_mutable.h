/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PGR_PGEN_PORT_DOWN_EVENT_MASK_MUTABLE_H__
#define __REGISTER_INCLUDES_PGR_PGEN_PORT_DOWN_EVENT_MASK_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class PgrPgenPortDownEventMaskMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PgrPgenPortDownEventMaskMutable(
      int chipNumber, int index_pipe_addrmap, int index_pgr_pgen_port_down_event_mask, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_pgr_pgen_port_down_event_mask), 12, true, write_callback, read_callback, std::string("PgrPgenPortDownEventMaskMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_pgr_pgen_port_down_event_mask))
    {
    }
  PgrPgenPortDownEventMaskMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PgrPgenPortDownEventMaskMutable")
    {
    }
public:








  uint8_t mask(int j0) { return mask_[j0]; }
  void mask(int j0,const uint8_t &v) { mask_[j0]=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (mask_[0] & 0x1);
      *data |= ((mask_[1] & 0x1) << 1);
      *data |= ((mask_[2] & 0x1) << 2);
      *data |= ((mask_[3] & 0x1) << 3);
      *data |= ((mask_[4] & 0x1) << 4);
      *data |= ((mask_[5] & 0x1) << 5);
      *data |= ((mask_[6] & 0x1) << 6);
      *data |= ((mask_[7] & 0x1) << 7);
      *data |= ((mask_[8] & 0x1) << 8);
      *data |= ((mask_[9] & 0x1) << 9);
      *data |= ((mask_[10] & 0x1) << 10);
      *data |= ((mask_[11] & 0x1) << 11);
      *data |= ((mask_[12] & 0x1) << 12);
      *data |= ((mask_[13] & 0x1) << 13);
      *data |= ((mask_[14] & 0x1) << 14);
      *data |= ((mask_[15] & 0x1) << 15);
      *data |= ((mask_[16] & 0x1) << 16);
      *data |= ((mask_[17] & 0x1) << 17);
      *data |= ((mask_[18] & 0x1) << 18);
      *data |= ((mask_[19] & 0x1) << 19);
      *data |= ((mask_[20] & 0x1) << 20);
      *data |= ((mask_[21] & 0x1) << 21);
      *data |= ((mask_[22] & 0x1) << 22);
      *data |= ((mask_[23] & 0x1) << 23);
      *data |= ((mask_[24] & 0x1) << 24);
      *data |= ((mask_[25] & 0x1) << 25);
      *data |= ((mask_[26] & 0x1) << 26);
      *data |= ((mask_[27] & 0x1) << 27);
      *data |= ((mask_[28] & 0x1) << 28);
      *data |= ((mask_[29] & 0x1) << 29);
      *data |= ((mask_[30] & 0x1) << 30);
      *data |= ((mask_[31] & 0x1) << 31);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (mask_[32] & 0x1);
      *data |= ((mask_[33] & 0x1) << 1);
      *data |= ((mask_[34] & 0x1) << 2);
      *data |= ((mask_[35] & 0x1) << 3);
      *data |= ((mask_[36] & 0x1) << 4);
      *data |= ((mask_[37] & 0x1) << 5);
      *data |= ((mask_[38] & 0x1) << 6);
      *data |= ((mask_[39] & 0x1) << 7);
      *data |= ((mask_[40] & 0x1) << 8);
      *data |= ((mask_[41] & 0x1) << 9);
      *data |= ((mask_[42] & 0x1) << 10);
      *data |= ((mask_[43] & 0x1) << 11);
      *data |= ((mask_[44] & 0x1) << 12);
      *data |= ((mask_[45] & 0x1) << 13);
      *data |= ((mask_[46] & 0x1) << 14);
      *data |= ((mask_[47] & 0x1) << 15);
      *data |= ((mask_[48] & 0x1) << 16);
      *data |= ((mask_[49] & 0x1) << 17);
      *data |= ((mask_[50] & 0x1) << 18);
      *data |= ((mask_[51] & 0x1) << 19);
      *data |= ((mask_[52] & 0x1) << 20);
      *data |= ((mask_[53] & 0x1) << 21);
      *data |= ((mask_[54] & 0x1) << 22);
      *data |= ((mask_[55] & 0x1) << 23);
      *data |= ((mask_[56] & 0x1) << 24);
      *data |= ((mask_[57] & 0x1) << 25);
      *data |= ((mask_[58] & 0x1) << 26);
      *data |= ((mask_[59] & 0x1) << 27);
      *data |= ((mask_[60] & 0x1) << 28);
      *data |= ((mask_[61] & 0x1) << 29);
      *data |= ((mask_[62] & 0x1) << 30);
      *data |= ((mask_[63] & 0x1) << 31);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = (mask_[64] & 0x1);
      *data |= ((mask_[65] & 0x1) << 1);
      *data |= ((mask_[66] & 0x1) << 2);
      *data |= ((mask_[67] & 0x1) << 3);
      *data |= ((mask_[68] & 0x1) << 4);
      *data |= ((mask_[69] & 0x1) << 5);
      *data |= ((mask_[70] & 0x1) << 6);
      *data |= ((mask_[71] & 0x1) << 7);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      mask_[0] = (data & 0x1);
      mask_[1] = ((data >> 1) & 0x1);
      mask_[2] = ((data >> 2) & 0x1);
      mask_[3] = ((data >> 3) & 0x1);
      mask_[4] = ((data >> 4) & 0x1);
      mask_[5] = ((data >> 5) & 0x1);
      mask_[6] = ((data >> 6) & 0x1);
      mask_[7] = ((data >> 7) & 0x1);
      mask_[8] = ((data >> 8) & 0x1);
      mask_[9] = ((data >> 9) & 0x1);
      mask_[10] = ((data >> 10) & 0x1);
      mask_[11] = ((data >> 11) & 0x1);
      mask_[12] = ((data >> 12) & 0x1);
      mask_[13] = ((data >> 13) & 0x1);
      mask_[14] = ((data >> 14) & 0x1);
      mask_[15] = ((data >> 15) & 0x1);
      mask_[16] = ((data >> 16) & 0x1);
      mask_[17] = ((data >> 17) & 0x1);
      mask_[18] = ((data >> 18) & 0x1);
      mask_[19] = ((data >> 19) & 0x1);
      mask_[20] = ((data >> 20) & 0x1);
      mask_[21] = ((data >> 21) & 0x1);
      mask_[22] = ((data >> 22) & 0x1);
      mask_[23] = ((data >> 23) & 0x1);
      mask_[24] = ((data >> 24) & 0x1);
      mask_[25] = ((data >> 25) & 0x1);
      mask_[26] = ((data >> 26) & 0x1);
      mask_[27] = ((data >> 27) & 0x1);
      mask_[28] = ((data >> 28) & 0x1);
      mask_[29] = ((data >> 29) & 0x1);
      mask_[30] = ((data >> 30) & 0x1);
      mask_[31] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      mask_[32] = (data & 0x1);
      mask_[33] = ((data >> 1) & 0x1);
      mask_[34] = ((data >> 2) & 0x1);
      mask_[35] = ((data >> 3) & 0x1);
      mask_[36] = ((data >> 4) & 0x1);
      mask_[37] = ((data >> 5) & 0x1);
      mask_[38] = ((data >> 6) & 0x1);
      mask_[39] = ((data >> 7) & 0x1);
      mask_[40] = ((data >> 8) & 0x1);
      mask_[41] = ((data >> 9) & 0x1);
      mask_[42] = ((data >> 10) & 0x1);
      mask_[43] = ((data >> 11) & 0x1);
      mask_[44] = ((data >> 12) & 0x1);
      mask_[45] = ((data >> 13) & 0x1);
      mask_[46] = ((data >> 14) & 0x1);
      mask_[47] = ((data >> 15) & 0x1);
      mask_[48] = ((data >> 16) & 0x1);
      mask_[49] = ((data >> 17) & 0x1);
      mask_[50] = ((data >> 18) & 0x1);
      mask_[51] = ((data >> 19) & 0x1);
      mask_[52] = ((data >> 20) & 0x1);
      mask_[53] = ((data >> 21) & 0x1);
      mask_[54] = ((data >> 22) & 0x1);
      mask_[55] = ((data >> 23) & 0x1);
      mask_[56] = ((data >> 24) & 0x1);
      mask_[57] = ((data >> 25) & 0x1);
      mask_[58] = ((data >> 26) & 0x1);
      mask_[59] = ((data >> 27) & 0x1);
      mask_[60] = ((data >> 28) & 0x1);
      mask_[61] = ((data >> 29) & 0x1);
      mask_[62] = ((data >> 30) & 0x1);
      mask_[63] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      mask_[64] = (data & 0x1);
      mask_[65] = ((data >> 1) & 0x1);
      mask_[66] = ((data >> 2) & 0x1);
      mask_[67] = ((data >> 3) & 0x1);
      mask_[68] = ((data >> 4) & 0x1);
      mask_[69] = ((data >> 5) & 0x1);
      mask_[70] = ((data >> 6) & 0x1);
      mask_[71] = ((data >> 7) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    mask_[0] = 0x1;
    mask_[1] = 0x1;
    mask_[2] = 0x1;
    mask_[3] = 0x1;
    mask_[4] = 0x1;
    mask_[5] = 0x1;
    mask_[6] = 0x1;
    mask_[7] = 0x1;
    mask_[8] = 0x1;
    mask_[9] = 0x1;
    mask_[10] = 0x1;
    mask_[11] = 0x1;
    mask_[12] = 0x1;
    mask_[13] = 0x1;
    mask_[14] = 0x1;
    mask_[15] = 0x1;
    mask_[16] = 0x1;
    mask_[17] = 0x1;
    mask_[18] = 0x1;
    mask_[19] = 0x1;
    mask_[20] = 0x1;
    mask_[21] = 0x1;
    mask_[22] = 0x1;
    mask_[23] = 0x1;
    mask_[24] = 0x1;
    mask_[25] = 0x1;
    mask_[26] = 0x1;
    mask_[27] = 0x1;
    mask_[28] = 0x1;
    mask_[29] = 0x1;
    mask_[30] = 0x1;
    mask_[31] = 0x1;
    mask_[32] = 0x1;
    mask_[33] = 0x1;
    mask_[34] = 0x1;
    mask_[35] = 0x1;
    mask_[36] = 0x1;
    mask_[37] = 0x1;
    mask_[38] = 0x1;
    mask_[39] = 0x1;
    mask_[40] = 0x1;
    mask_[41] = 0x1;
    mask_[42] = 0x1;
    mask_[43] = 0x1;
    mask_[44] = 0x1;
    mask_[45] = 0x1;
    mask_[46] = 0x1;
    mask_[47] = 0x1;
    mask_[48] = 0x1;
    mask_[49] = 0x1;
    mask_[50] = 0x1;
    mask_[51] = 0x1;
    mask_[52] = 0x1;
    mask_[53] = 0x1;
    mask_[54] = 0x1;
    mask_[55] = 0x1;
    mask_[56] = 0x1;
    mask_[57] = 0x1;
    mask_[58] = 0x1;
    mask_[59] = 0x1;
    mask_[60] = 0x1;
    mask_[61] = 0x1;
    mask_[62] = 0x1;
    mask_[63] = 0x1;
    mask_[64] = 0x1;
    mask_[65] = 0x1;
    mask_[66] = 0x1;
    mask_[67] = 0x1;
    mask_[68] = 0x1;
    mask_[69] = 0x1;
    mask_[70] = 0x1;
    mask_[71] = 0x1;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PgrPgenPortDownEventMaskMutable") + ":\n";
    for (uint32_t f=0;f<72;++f) {
      r += indent_string + "  " + std::string("mask") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mask_[f]) ) + "\n";
      all_zeros &= (0 == mask_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PgrPgenPortDownEventMaskMutable") + ":\n";
    for (uint32_t f=0;f<72;++f) {
      r += indent_string + "  " + std::string("mask") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mask_[f]) ) + "\n";
      all_zeros &= (0 == mask_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 72 > mask_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_pgr_pgen_port_down_event_mask
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x34000; // to get to pgrreg
    offset += 0x2000; // to get to pgr_common
    offset += 0x60; // to get to pgen_port_down_mask
    assert(index_pgr_pgen_port_down_event_mask < 2);
    offset += index_pgr_pgen_port_down_event_mask * 0xc; // pgr_pgen_port_down_event_mask[]
    return offset;
  }

};













  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PGR_PGEN_PORT_DOWN_EVENT_MASK_MUTABLE_H__
