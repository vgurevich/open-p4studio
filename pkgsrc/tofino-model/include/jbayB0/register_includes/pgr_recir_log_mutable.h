/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PGR_RECIR_LOG_MUTABLE_H__
#define __REGISTER_INCLUDES_PGR_RECIR_LOG_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class PgrRecirLogMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PgrRecirLogMutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 16, true, write_callback, read_callback, std::string("PgrRecirLogMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PgrRecirLogMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PgrRecirLogMutable")
    {
    }
public:





  uint8_t tbc_fifo_occ() { return tbc_fifo_occ_; }
  void tbc_fifo_occ(const uint8_t &v) { tbc_fifo_occ_=v; }







  uint8_t eth_cpu_chnl_fifo_occ(int j0) { return eth_cpu_chnl_fifo_occ_[j0]; }
  void eth_cpu_chnl_fifo_occ(int j0,const uint8_t &v) { eth_cpu_chnl_fifo_occ_[j0]=v; }







  uint8_t ebuf_port0_chnl_fifo_occ(int j0) { return ebuf_port0_chnl_fifo_occ_[j0]; }
  void ebuf_port0_chnl_fifo_occ(int j0,const uint8_t &v) { ebuf_port0_chnl_fifo_occ_[j0]=v; }







  uint8_t ebuf_port1_chnl_fifo_occ(int j0) { return ebuf_port1_chnl_fifo_occ_[j0]; }
  void ebuf_port1_chnl_fifo_occ(int j0,const uint8_t &v) { ebuf_port1_chnl_fifo_occ_[j0]=v; }







  uint8_t ebuf_port2_chnl_fifo_occ(int j0) { return ebuf_port2_chnl_fifo_occ_[j0]; }
  void ebuf_port2_chnl_fifo_occ(int j0,const uint8_t &v) { ebuf_port2_chnl_fifo_occ_[j0]=v; }







  uint8_t ebuf_port3_chnl_fifo_occ(int j0) { return ebuf_port3_chnl_fifo_occ_[j0]; }
  void ebuf_port3_chnl_fifo_occ(int j0,const uint8_t &v) { ebuf_port3_chnl_fifo_occ_[j0]=v; }







  uint8_t ipb_xoff_ind_ch(int j0) { return ipb_xoff_ind_ch_[j0]; }
  void ipb_xoff_ind_ch(int j0,const uint8_t &v) { ipb_xoff_ind_ch_[j0]=v; }








  uint8_t recir_packet_pending_ch(int j0) { return recir_packet_pending_ch_[j0]; }
  void recir_packet_pending_ch(int j0,const uint8_t &v) { recir_packet_pending_ch_[j0]=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (tbc_fifo_occ_ & 0x7f);
      *data |= ((eth_cpu_chnl_fifo_occ_[0] & 0x7f) << 7);
      *data |= ((eth_cpu_chnl_fifo_occ_[1] & 0x7f) << 14);
      *data |= ((eth_cpu_chnl_fifo_occ_[2] & 0x7f) << 21);
      *data |= ((eth_cpu_chnl_fifo_occ_[3] & 0xf) << 28);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = ((eth_cpu_chnl_fifo_occ_[3] & 0x70) >> 4);
      *data |= ((ebuf_port0_chnl_fifo_occ_[0] & 0x7f) << 3);
      *data |= ((ebuf_port0_chnl_fifo_occ_[1] & 0x7f) << 10);
      *data |= ((ebuf_port1_chnl_fifo_occ_[0] & 0x7f) << 17);
      *data |= ((ebuf_port1_chnl_fifo_occ_[1] & 0x7f) << 24);
      *data |= ((ebuf_port2_chnl_fifo_occ_[0] & 0x1) << 31);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = ((ebuf_port2_chnl_fifo_occ_[0] & 0x7e) >> 1);
      *data |= ((ebuf_port2_chnl_fifo_occ_[1] & 0x7f) << 6);
      *data |= ((ebuf_port3_chnl_fifo_occ_[0] & 0x7f) << 13);
      *data |= ((ebuf_port3_chnl_fifo_occ_[1] & 0x7f) << 20);
      *data |= ((ipb_xoff_ind_ch_[0] & 0x1) << 27);
      *data |= ((ipb_xoff_ind_ch_[1] & 0x1) << 28);
      *data |= ((ipb_xoff_ind_ch_[2] & 0x1) << 29);
      *data |= ((ipb_xoff_ind_ch_[3] & 0x1) << 30);
      *data |= ((ipb_xoff_ind_ch_[4] & 0x1) << 31);
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = (ipb_xoff_ind_ch_[5] & 0x1);
      *data |= ((ipb_xoff_ind_ch_[6] & 0x1) << 1);
      *data |= ((ipb_xoff_ind_ch_[7] & 0x1) << 2);
      *data |= ((recir_packet_pending_ch_[0] & 0x1) << 3);
      *data |= ((recir_packet_pending_ch_[1] & 0x1) << 4);
      *data |= ((recir_packet_pending_ch_[2] & 0x1) << 5);
      *data |= ((recir_packet_pending_ch_[3] & 0x1) << 6);
      *data |= ((recir_packet_pending_ch_[4] & 0x1) << 7);
      *data |= ((recir_packet_pending_ch_[5] & 0x1) << 8);
      *data |= ((recir_packet_pending_ch_[6] & 0x1) << 9);
      *data |= ((recir_packet_pending_ch_[7] & 0x1) << 10);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      tbc_fifo_occ_ = (data & 0x7f);
      eth_cpu_chnl_fifo_occ_[0] = ((data >> 7) & 0x7f);
      eth_cpu_chnl_fifo_occ_[1] = ((data >> 14) & 0x7f);
      eth_cpu_chnl_fifo_occ_[2] = ((data >> 21) & 0x7f);
      eth_cpu_chnl_fifo_occ_[3] = (((data >> 28) & 0xf) | (eth_cpu_chnl_fifo_occ_[3] & 0x70));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      eth_cpu_chnl_fifo_occ_[3] = (((data << 4) & 0x70) | (eth_cpu_chnl_fifo_occ_[3] & 0xf));
      ebuf_port0_chnl_fifo_occ_[0] = ((data >> 3) & 0x7f);
      ebuf_port0_chnl_fifo_occ_[1] = ((data >> 10) & 0x7f);
      ebuf_port1_chnl_fifo_occ_[0] = ((data >> 17) & 0x7f);
      ebuf_port1_chnl_fifo_occ_[1] = ((data >> 24) & 0x7f);
      ebuf_port2_chnl_fifo_occ_[0] = (((data >> 31) & 0x1) | (ebuf_port2_chnl_fifo_occ_[0] & 0x7e));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      ebuf_port2_chnl_fifo_occ_[0] = (((data << 1) & 0x7e) | (ebuf_port2_chnl_fifo_occ_[0] & 0x1));
      ebuf_port2_chnl_fifo_occ_[1] = ((data >> 6) & 0x7f);
      ebuf_port3_chnl_fifo_occ_[0] = ((data >> 13) & 0x7f);
      ebuf_port3_chnl_fifo_occ_[1] = ((data >> 20) & 0x7f);
      ipb_xoff_ind_ch_[0] = ((data >> 27) & 0x1);
      ipb_xoff_ind_ch_[1] = ((data >> 28) & 0x1);
      ipb_xoff_ind_ch_[2] = ((data >> 29) & 0x1);
      ipb_xoff_ind_ch_[3] = ((data >> 30) & 0x1);
      ipb_xoff_ind_ch_[4] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      ipb_xoff_ind_ch_[5] = (data & 0x1);
      ipb_xoff_ind_ch_[6] = ((data >> 1) & 0x1);
      ipb_xoff_ind_ch_[7] = ((data >> 2) & 0x1);
      recir_packet_pending_ch_[0] = ((data >> 3) & 0x1);
      recir_packet_pending_ch_[1] = ((data >> 4) & 0x1);
      recir_packet_pending_ch_[2] = ((data >> 5) & 0x1);
      recir_packet_pending_ch_[3] = ((data >> 6) & 0x1);
      recir_packet_pending_ch_[4] = ((data >> 7) & 0x1);
      recir_packet_pending_ch_[5] = ((data >> 8) & 0x1);
      recir_packet_pending_ch_[6] = ((data >> 9) & 0x1);
      recir_packet_pending_ch_[7] = ((data >> 10) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    tbc_fifo_occ_ = 0x0;
    eth_cpu_chnl_fifo_occ_[0] = 0x0;
    eth_cpu_chnl_fifo_occ_[1] = 0x0;
    eth_cpu_chnl_fifo_occ_[2] = 0x0;
    eth_cpu_chnl_fifo_occ_[3] = 0x0;
    ebuf_port0_chnl_fifo_occ_[0] = 0x0;
    ebuf_port0_chnl_fifo_occ_[1] = 0x0;
    ebuf_port1_chnl_fifo_occ_[0] = 0x0;
    ebuf_port1_chnl_fifo_occ_[1] = 0x0;
    ebuf_port2_chnl_fifo_occ_[0] = 0x0;
    ebuf_port2_chnl_fifo_occ_[1] = 0x0;
    ebuf_port3_chnl_fifo_occ_[0] = 0x0;
    ebuf_port3_chnl_fifo_occ_[1] = 0x0;
    ipb_xoff_ind_ch_[0] = 0x0;
    ipb_xoff_ind_ch_[1] = 0x0;
    ipb_xoff_ind_ch_[2] = 0x0;
    ipb_xoff_ind_ch_[3] = 0x0;
    ipb_xoff_ind_ch_[4] = 0x0;
    ipb_xoff_ind_ch_[5] = 0x0;
    ipb_xoff_ind_ch_[6] = 0x0;
    ipb_xoff_ind_ch_[7] = 0x0;
    recir_packet_pending_ch_[0] = 0x0;
    recir_packet_pending_ch_[1] = 0x0;
    recir_packet_pending_ch_[2] = 0x0;
    recir_packet_pending_ch_[3] = 0x0;
    recir_packet_pending_ch_[4] = 0x0;
    recir_packet_pending_ch_[5] = 0x0;
    recir_packet_pending_ch_[6] = 0x0;
    recir_packet_pending_ch_[7] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PgrRecirLogMutable") + ":\n";
    r += indent_string + "  " + std::string("tbc_fifo_occ") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tbc_fifo_occ_) ) + "\n";
    all_zeros &= (0 == tbc_fifo_occ_);
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("eth_cpu_chnl_fifo_occ") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eth_cpu_chnl_fifo_occ_[f]) ) + "\n";
      all_zeros &= (0 == eth_cpu_chnl_fifo_occ_[f]);
    }
    for (uint32_t f=0;f<2;++f) {
      r += indent_string + "  " + std::string("ebuf_port0_chnl_fifo_occ") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_port0_chnl_fifo_occ_[f]) ) + "\n";
      all_zeros &= (0 == ebuf_port0_chnl_fifo_occ_[f]);
    }
    for (uint32_t f=0;f<2;++f) {
      r += indent_string + "  " + std::string("ebuf_port1_chnl_fifo_occ") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_port1_chnl_fifo_occ_[f]) ) + "\n";
      all_zeros &= (0 == ebuf_port1_chnl_fifo_occ_[f]);
    }
    for (uint32_t f=0;f<2;++f) {
      r += indent_string + "  " + std::string("ebuf_port2_chnl_fifo_occ") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_port2_chnl_fifo_occ_[f]) ) + "\n";
      all_zeros &= (0 == ebuf_port2_chnl_fifo_occ_[f]);
    }
    for (uint32_t f=0;f<2;++f) {
      r += indent_string + "  " + std::string("ebuf_port3_chnl_fifo_occ") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_port3_chnl_fifo_occ_[f]) ) + "\n";
      all_zeros &= (0 == ebuf_port3_chnl_fifo_occ_[f]);
    }
    for (uint32_t f=0;f<8;++f) {
      r += indent_string + "  " + std::string("ipb_xoff_ind_ch") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipb_xoff_ind_ch_[f]) ) + "\n";
      all_zeros &= (0 == ipb_xoff_ind_ch_[f]);
    }
    for (uint32_t f=0;f<8;++f) {
      r += indent_string + "  " + std::string("recir_packet_pending_ch") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(recir_packet_pending_ch_[f]) ) + "\n";
      all_zeros &= (0 == recir_packet_pending_ch_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PgrRecirLogMutable") + ":\n";
    r += indent_string + "  " + std::string("tbc_fifo_occ") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tbc_fifo_occ_) ) + "\n";
    all_zeros &= (0 == tbc_fifo_occ_);
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("eth_cpu_chnl_fifo_occ") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eth_cpu_chnl_fifo_occ_[f]) ) + "\n";
      all_zeros &= (0 == eth_cpu_chnl_fifo_occ_[f]);
    }
    for (uint32_t f=0;f<2;++f) {
      r += indent_string + "  " + std::string("ebuf_port0_chnl_fifo_occ") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_port0_chnl_fifo_occ_[f]) ) + "\n";
      all_zeros &= (0 == ebuf_port0_chnl_fifo_occ_[f]);
    }
    for (uint32_t f=0;f<2;++f) {
      r += indent_string + "  " + std::string("ebuf_port1_chnl_fifo_occ") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_port1_chnl_fifo_occ_[f]) ) + "\n";
      all_zeros &= (0 == ebuf_port1_chnl_fifo_occ_[f]);
    }
    for (uint32_t f=0;f<2;++f) {
      r += indent_string + "  " + std::string("ebuf_port2_chnl_fifo_occ") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_port2_chnl_fifo_occ_[f]) ) + "\n";
      all_zeros &= (0 == ebuf_port2_chnl_fifo_occ_[f]);
    }
    for (uint32_t f=0;f<2;++f) {
      r += indent_string + "  " + std::string("ebuf_port3_chnl_fifo_occ") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebuf_port3_chnl_fifo_occ_[f]) ) + "\n";
      all_zeros &= (0 == ebuf_port3_chnl_fifo_occ_[f]);
    }
    for (uint32_t f=0;f<8;++f) {
      r += indent_string + "  " + std::string("ipb_xoff_ind_ch") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipb_xoff_ind_ch_[f]) ) + "\n";
      all_zeros &= (0 == ipb_xoff_ind_ch_[f]);
    }
    for (uint32_t f=0;f<8;++f) {
      r += indent_string + "  " + std::string("recir_packet_pending_ch") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(recir_packet_pending_ch_[f]) ) + "\n";
      all_zeros &= (0 == recir_packet_pending_ch_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t tbc_fifo_occ_;
  std::array< uint8_t, 4 > eth_cpu_chnl_fifo_occ_;
  std::array< uint8_t, 2 > ebuf_port0_chnl_fifo_occ_;
  std::array< uint8_t, 2 > ebuf_port1_chnl_fifo_occ_;
  std::array< uint8_t, 2 > ebuf_port2_chnl_fifo_occ_;
  std::array< uint8_t, 2 > ebuf_port3_chnl_fifo_occ_;
  std::array< uint8_t, 8 > ipb_xoff_ind_ch_;
  std::array< uint8_t, 8 > recir_packet_pending_ch_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x34000; // to get to pgrreg
    offset += 0x2000; // to get to pgr_common
    offset += 0x140; // to get to recir_log
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PGR_RECIR_LOG_MUTABLE_H__
