/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PGR_SBE_LOG_H__
#define __REGISTER_INCLUDES_PGR_SBE_LOG_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class PgrSbeLog : public model_core::RegisterBlock<RegisterCallback> {
public:
  PgrSbeLog(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 8, false, write_callback, read_callback, std::string("PgrSbeLog")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PgrSbeLog(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PgrSbeLog")
    {
    }
public:





  uint8_t &buffer0_addr() { return buffer0_addr_; }





  uint8_t &buffer1_addr() { return buffer1_addr_; }





  uint8_t &buffer2_addr() { return buffer2_addr_; }





  uint8_t &buffer3_addr() { return buffer3_addr_; }





  uint8_t &phase0_addr() { return phase0_addr_; }





  uint16_t &pfc0_addr() { return pfc0_addr_; }





  uint16_t &pfc1_addr() { return pfc1_addr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = buffer0_addr_;
      *data |= (buffer1_addr_ << 8);
      *data |= (buffer2_addr_ << 16);
      *data |= (buffer3_addr_ << 24);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (phase0_addr_ & 0x7f);
      *data |= ((pfc0_addr_ & 0x1ff) << 7);
      *data |= ((pfc1_addr_ & 0x1ff) << 16);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      buffer0_addr_ = data;
      buffer1_addr_ = (data >> 8);
      buffer2_addr_ = (data >> 16);
      buffer3_addr_ = (data >> 24);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      phase0_addr_ = (data & 0x7f);
      pfc0_addr_ = ((data >> 7) & 0x1ff);
      pfc1_addr_ = ((data >> 16) & 0x1ff);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    buffer0_addr_ = 0x0;
    buffer1_addr_ = 0x0;
    buffer2_addr_ = 0x0;
    buffer3_addr_ = 0x0;
    phase0_addr_ = 0x0;
    pfc0_addr_ = 0x0;
    pfc1_addr_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PgrSbeLog") + ":\n";
    r += indent_string + "  " + std::string("buffer0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(buffer0_addr_) ) + "\n";
    all_zeros &= (0 == buffer0_addr_);
    r += indent_string + "  " + std::string("buffer1_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(buffer1_addr_) ) + "\n";
    all_zeros &= (0 == buffer1_addr_);
    r += indent_string + "  " + std::string("buffer2_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(buffer2_addr_) ) + "\n";
    all_zeros &= (0 == buffer2_addr_);
    r += indent_string + "  " + std::string("buffer3_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(buffer3_addr_) ) + "\n";
    all_zeros &= (0 == buffer3_addr_);
    r += indent_string + "  " + std::string("phase0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phase0_addr_) ) + "\n";
    all_zeros &= (0 == phase0_addr_);
    r += indent_string + "  " + std::string("pfc0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc0_addr_) ) + "\n";
    all_zeros &= (0 == pfc0_addr_);
    r += indent_string + "  " + std::string("pfc1_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc1_addr_) ) + "\n";
    all_zeros &= (0 == pfc1_addr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PgrSbeLog") + ":\n";
    r += indent_string + "  " + std::string("buffer0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(buffer0_addr_) ) + "\n";
    all_zeros &= (0 == buffer0_addr_);
    r += indent_string + "  " + std::string("buffer1_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(buffer1_addr_) ) + "\n";
    all_zeros &= (0 == buffer1_addr_);
    r += indent_string + "  " + std::string("buffer2_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(buffer2_addr_) ) + "\n";
    all_zeros &= (0 == buffer2_addr_);
    r += indent_string + "  " + std::string("buffer3_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(buffer3_addr_) ) + "\n";
    all_zeros &= (0 == buffer3_addr_);
    r += indent_string + "  " + std::string("phase0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phase0_addr_) ) + "\n";
    all_zeros &= (0 == phase0_addr_);
    r += indent_string + "  " + std::string("pfc0_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc0_addr_) ) + "\n";
    all_zeros &= (0 == pfc0_addr_);
    r += indent_string + "  " + std::string("pfc1_addr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc1_addr_) ) + "\n";
    all_zeros &= (0 == pfc1_addr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t buffer0_addr_;
  uint8_t buffer1_addr_;
  uint8_t buffer2_addr_;
  uint8_t buffer3_addr_;
  uint8_t phase0_addr_;
  uint16_t pfc0_addr_;
  uint16_t pfc1_addr_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x34000; // to get to pgrreg
    offset += 0x2000; // to get to pgr_common
    offset += 0xf0; // to get to sbe_log
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PGR_SBE_LOG_H__
