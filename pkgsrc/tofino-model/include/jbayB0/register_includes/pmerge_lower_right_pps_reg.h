/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PMERGE_LOWER_RIGHT_PPS_REG_H__
#define __REGISTER_INCLUDES_PMERGE_LOWER_RIGHT_PPS_REG_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "pmerge_lower_right_pps_reg_e_ctr_sample.h"
#include "pmerge_lower_right_pps_reg_e_ctr_time.h"
#include "pmerge_lower_right_pps_reg_e_pkt_ctr.h"
#include "pmerge_lower_right_pps_reg_e_start_table.h"
#include "pmerge_lower_right_pps_reg_g_start_table.h"
#include "pmerge_lower_right_pps_reg_intr.h"
#include "pmerge_lower_right_pps_reg_pipe_map.h"
#include "pmerge_lower_right_pps_reg_tm_status_phv.h"

namespace jbayB0 {
  namespace register_classes {

class PmergeLowerRightPpsReg : public model_core::RegisterBlock<RegisterCallback> {
public:
  PmergeLowerRightPpsReg(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 2048, false, write_callback, read_callback, std::string("PmergeLowerRightPpsReg")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PmergeLowerRightPpsReg(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PmergeLowerRightPpsReg")
    {
    }
public:





  PmergeLowerRightPpsRegTmStatusPhv &tm_status_phv() { return tm_status_phv_; }







  PmergeLowerRightPpsRegEStartTable &e_start_table(int j0) { return e_start_table_[j0]; }





  PmergeLowerRightPpsRegGStartTable &g_start_table() { return g_start_table_; }





  PmergeLowerRightPpsRegPipeMap &pipe_map() { return pipe_map_; }






  PmergeLowerRightPpsRegEPktCtr &e_pkt_ctr(int j0) { return e_pkt_ctr_[j0]; }




  PmergeLowerRightPpsRegECtrTime &e_ctr_time() { return e_ctr_time_; }




  PmergeLowerRightPpsRegECtrSample &e_ctr_sample() { return e_ctr_sample_; }
  PmergeLowerRightPpsRegIntr &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      tm_status_phv_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x320) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      e_start_table_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x320 && offset < 0x324) {
      offset -= 0x320;
      if (read_callback_) read_callback_();
      g_start_table_.read( offset, data );
    }
    else if (offset >= 0x354 && offset < 0x358) {
      offset -= 0x354;
      if (read_callback_) read_callback_();
      pipe_map_.read( offset, data );
    }
    else if (offset >= 0x400 && offset < 0x640) {
      offset -= 0x400;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      e_pkt_ctr_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x640 && offset < 0x648) {
      offset -= 0x640;
      if (read_callback_) read_callback_();
      e_ctr_time_.read( offset, data );
    }
    else if (offset >= 0x648 && offset < 0x64c) {
      offset -= 0x648;
      if (read_callback_) read_callback_();
      e_ctr_sample_.read( offset, data );
    }
    else if (offset >= 0x340 && offset < 0x354) {
      offset -= 0x340;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      tm_status_phv_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x320) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      e_start_table_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x320 && offset < 0x324) {
      offset -= 0x320;
      g_start_table_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x354 && offset < 0x358) {
      offset -= 0x354;
      pipe_map_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400 && offset < 0x640) {
      offset -= 0x400;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      e_pkt_ctr_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x640 && offset < 0x648) {
      offset -= 0x640;
      e_ctr_time_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x648 && offset < 0x64c) {
      offset -= 0x648;
      e_ctr_sample_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x340 && offset < 0x354) {
      offset -= 0x340;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    tm_status_phv_.reset();
    for (auto &f0 : e_start_table_) {
      f0.reset();
    }
    g_start_table_.reset();
    pipe_map_.reset();
    for (auto &f0 : e_pkt_ctr_) {
      f0.reset();
    }
    e_ctr_time_.reset();
    e_ctr_sample_.reset();
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += tm_status_phv_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x320) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += e_start_table_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x320 && offset < 0x324) {
      offset -= 0x320;
      r += g_start_table_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x354 && offset < 0x358) {
      offset -= 0x354;
      r += pipe_map_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400 && offset < 0x640) {
      offset -= 0x400;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += e_pkt_ctr_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x640 && offset < 0x648) {
      offset -= 0x640;
      r += e_ctr_time_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x648 && offset < 0x64c) {
      offset -= 0x648;
      r += e_ctr_sample_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x340 && offset < 0x354) {
      offset -= 0x340;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += tm_status_phv_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<72;++a0) {
      r += e_start_table_[a0].to_string(print_zeros,indent_string) ;
    }
    r += g_start_table_.to_string(print_zeros,indent_string) ;
    r += pipe_map_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<72;++a0) {
      r += e_pkt_ctr_[a0].to_string(print_zeros,indent_string) ;
    }
    r += e_ctr_time_.to_string(print_zeros,indent_string) ;
    r += e_ctr_sample_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  PmergeLowerRightPpsRegTmStatusPhv tm_status_phv_;
  std::array< PmergeLowerRightPpsRegEStartTable, 72 > e_start_table_;
  PmergeLowerRightPpsRegGStartTable g_start_table_;
  PmergeLowerRightPpsRegPipeMap pipe_map_;
  std::array< PmergeLowerRightPpsRegEPktCtr, 72 > e_pkt_ctr_;
  PmergeLowerRightPpsRegECtrTime e_ctr_time_;
  PmergeLowerRightPpsRegECtrSample e_ctr_sample_;
  PmergeLowerRightPpsRegIntr intr_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x12000; // to get to pmergereg
    offset += 0x1800; // to get to lr1
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PMERGE_LOWER_RIGHT_PPS_REG_H__
