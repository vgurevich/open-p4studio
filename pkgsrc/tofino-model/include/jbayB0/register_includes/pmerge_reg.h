/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PMERGE_REG_H__
#define __REGISTER_INCLUDES_PMERGE_REG_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "pmerge_lower_left_pps_reg.h"
#include "pmerge_lower_left_reg.h"
#include "pmerge_lower_right_pps_reg.h"
#include "pmerge_lower_right_reg.h"
#include "pmerge_upper_left_reg.h"
#include "pmerge_upper_right_reg.h"

namespace jbayB0 {
  namespace register_classes {

class PmergeReg : public model_core::RegisterBlock<RegisterCallback> {
public:
  PmergeReg(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 8192, false, write_callback, read_callback, std::string("PmergeReg")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PmergeReg(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PmergeReg")
    {
    }
public:





  PmergeLowerLeftReg &ll0() { return ll0_; }





  PmergeUpperLeftReg &ul() { return ul_; }





  PmergeLowerLeftPpsReg &ll1() { return ll1_; }





  PmergeLowerRightReg &lr0() { return lr0_; }





  PmergeUpperRightReg &ur() { return ur_; }





  PmergeLowerRightPpsReg &lr1() { return lr1_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x200) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      ll0_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x400) {
      offset -= 0x200;
      if (read_callback_) read_callback_();
      ul_.read( offset, data );
    }
    else if (offset >= 0x800 && offset < 0x1000) {
      offset -= 0x800;
      if (read_callback_) read_callback_();
      ll1_.read( offset, data );
    }
    else if (offset >= 0x1000 && offset < 0x1200) {
      offset -= 0x1000;
      if (read_callback_) read_callback_();
      lr0_.read( offset, data );
    }
    else if (offset >= 0x1200 && offset < 0x1400) {
      offset -= 0x1200;
      if (read_callback_) read_callback_();
      ur_.read( offset, data );
    }
    else if (offset >= 0x1800 && offset < 0x2000) {
      offset -= 0x1800;
      if (read_callback_) read_callback_();
      lr1_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x200) {
      offset -= 0x0;
      ll0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x400) {
      offset -= 0x200;
      ul_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x800 && offset < 0x1000) {
      offset -= 0x800;
      ll1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1000 && offset < 0x1200) {
      offset -= 0x1000;
      lr0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1200 && offset < 0x1400) {
      offset -= 0x1200;
      ur_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1800 && offset < 0x2000) {
      offset -= 0x1800;
      lr1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    ll0_.reset();
    ul_.reset();
    ll1_.reset();
    lr0_.reset();
    ur_.reset();
    lr1_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x200) {
      offset -= 0x0;
      r += ll0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x400) {
      offset -= 0x200;
      r += ul_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x800 && offset < 0x1000) {
      offset -= 0x800;
      r += ll1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1000 && offset < 0x1200) {
      offset -= 0x1000;
      r += lr0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1200 && offset < 0x1400) {
      offset -= 0x1200;
      r += ur_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1800 && offset < 0x2000) {
      offset -= 0x1800;
      r += lr1_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += ll0_.to_string(print_zeros,indent_string) ;
    r += ul_.to_string(print_zeros,indent_string) ;
    r += ll1_.to_string(print_zeros,indent_string) ;
    r += lr0_.to_string(print_zeros,indent_string) ;
    r += ur_.to_string(print_zeros,indent_string) ;
    r += lr1_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  PmergeLowerLeftReg ll0_;
  PmergeUpperLeftReg ul_;
  PmergeLowerLeftPpsReg ll1_;
  PmergeLowerRightReg lr0_;
  PmergeUpperRightReg ur_;
  PmergeLowerRightPpsReg lr1_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x12000; // to get to pmergereg
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PMERGE_REG_H__
