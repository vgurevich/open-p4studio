/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PMERGE_UPPER_RIGHT_REG_PHV_OWNER_255_128_MUTABLE_H__
#define __REGISTER_INCLUDES_PMERGE_UPPER_RIGHT_REG_PHV_OWNER_255_128_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class PmergeUpperRightRegPhvOwner_255_128Mutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PmergeUpperRightRegPhvOwner_255_128Mutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 16, true, write_callback, read_callback, std::string("PmergeUpperRightRegPhvOwner_255_128Mutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PmergeUpperRightRegPhvOwner_255_128Mutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PmergeUpperRightRegPhvOwner_255_128Mutable")
    {
    }
public:



  uint8_t owner(int j0) { return owner_[j0]; }
  void owner(int j0,const uint8_t &v) { owner_[j0]=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (owner_[0] & 0x1);
      *data |= ((owner_[1] & 0x1) << 1);
      *data |= ((owner_[2] & 0x1) << 2);
      *data |= ((owner_[3] & 0x1) << 3);
      *data |= ((owner_[4] & 0x1) << 4);
      *data |= ((owner_[5] & 0x1) << 5);
      *data |= ((owner_[6] & 0x1) << 6);
      *data |= ((owner_[7] & 0x1) << 7);
      *data |= ((owner_[8] & 0x1) << 8);
      *data |= ((owner_[9] & 0x1) << 9);
      *data |= ((owner_[10] & 0x1) << 10);
      *data |= ((owner_[11] & 0x1) << 11);
      *data |= ((owner_[12] & 0x1) << 12);
      *data |= ((owner_[13] & 0x1) << 13);
      *data |= ((owner_[14] & 0x1) << 14);
      *data |= ((owner_[15] & 0x1) << 15);
      *data |= ((owner_[16] & 0x1) << 16);
      *data |= ((owner_[17] & 0x1) << 17);
      *data |= ((owner_[18] & 0x1) << 18);
      *data |= ((owner_[19] & 0x1) << 19);
      *data |= ((owner_[20] & 0x1) << 20);
      *data |= ((owner_[21] & 0x1) << 21);
      *data |= ((owner_[22] & 0x1) << 22);
      *data |= ((owner_[23] & 0x1) << 23);
      *data |= ((owner_[24] & 0x1) << 24);
      *data |= ((owner_[25] & 0x1) << 25);
      *data |= ((owner_[26] & 0x1) << 26);
      *data |= ((owner_[27] & 0x1) << 27);
      *data |= ((owner_[28] & 0x1) << 28);
      *data |= ((owner_[29] & 0x1) << 29);
      *data |= ((owner_[30] & 0x1) << 30);
      *data |= ((owner_[31] & 0x1) << 31);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (owner_[32] & 0x1);
      *data |= ((owner_[33] & 0x1) << 1);
      *data |= ((owner_[34] & 0x1) << 2);
      *data |= ((owner_[35] & 0x1) << 3);
      *data |= ((owner_[36] & 0x1) << 4);
      *data |= ((owner_[37] & 0x1) << 5);
      *data |= ((owner_[38] & 0x1) << 6);
      *data |= ((owner_[39] & 0x1) << 7);
      *data |= ((owner_[40] & 0x1) << 8);
      *data |= ((owner_[41] & 0x1) << 9);
      *data |= ((owner_[42] & 0x1) << 10);
      *data |= ((owner_[43] & 0x1) << 11);
      *data |= ((owner_[44] & 0x1) << 12);
      *data |= ((owner_[45] & 0x1) << 13);
      *data |= ((owner_[46] & 0x1) << 14);
      *data |= ((owner_[47] & 0x1) << 15);
      *data |= ((owner_[48] & 0x1) << 16);
      *data |= ((owner_[49] & 0x1) << 17);
      *data |= ((owner_[50] & 0x1) << 18);
      *data |= ((owner_[51] & 0x1) << 19);
      *data |= ((owner_[52] & 0x1) << 20);
      *data |= ((owner_[53] & 0x1) << 21);
      *data |= ((owner_[54] & 0x1) << 22);
      *data |= ((owner_[55] & 0x1) << 23);
      *data |= ((owner_[56] & 0x1) << 24);
      *data |= ((owner_[57] & 0x1) << 25);
      *data |= ((owner_[58] & 0x1) << 26);
      *data |= ((owner_[59] & 0x1) << 27);
      *data |= ((owner_[60] & 0x1) << 28);
      *data |= ((owner_[61] & 0x1) << 29);
      *data |= ((owner_[62] & 0x1) << 30);
      *data |= ((owner_[63] & 0x1) << 31);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = (owner_[64] & 0x1);
      *data |= ((owner_[65] & 0x1) << 1);
      *data |= ((owner_[66] & 0x1) << 2);
      *data |= ((owner_[67] & 0x1) << 3);
      *data |= ((owner_[68] & 0x1) << 4);
      *data |= ((owner_[69] & 0x1) << 5);
      *data |= ((owner_[70] & 0x1) << 6);
      *data |= ((owner_[71] & 0x1) << 7);
      *data |= ((owner_[72] & 0x1) << 8);
      *data |= ((owner_[73] & 0x1) << 9);
      *data |= ((owner_[74] & 0x1) << 10);
      *data |= ((owner_[75] & 0x1) << 11);
      *data |= ((owner_[76] & 0x1) << 12);
      *data |= ((owner_[77] & 0x1) << 13);
      *data |= ((owner_[78] & 0x1) << 14);
      *data |= ((owner_[79] & 0x1) << 15);
      *data |= ((owner_[80] & 0x1) << 16);
      *data |= ((owner_[81] & 0x1) << 17);
      *data |= ((owner_[82] & 0x1) << 18);
      *data |= ((owner_[83] & 0x1) << 19);
      *data |= ((owner_[84] & 0x1) << 20);
      *data |= ((owner_[85] & 0x1) << 21);
      *data |= ((owner_[86] & 0x1) << 22);
      *data |= ((owner_[87] & 0x1) << 23);
      *data |= ((owner_[88] & 0x1) << 24);
      *data |= ((owner_[89] & 0x1) << 25);
      *data |= ((owner_[90] & 0x1) << 26);
      *data |= ((owner_[91] & 0x1) << 27);
      *data |= ((owner_[92] & 0x1) << 28);
      *data |= ((owner_[93] & 0x1) << 29);
      *data |= ((owner_[94] & 0x1) << 30);
      *data |= ((owner_[95] & 0x1) << 31);
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = (owner_[96] & 0x1);
      *data |= ((owner_[97] & 0x1) << 1);
      *data |= ((owner_[98] & 0x1) << 2);
      *data |= ((owner_[99] & 0x1) << 3);
      *data |= ((owner_[100] & 0x1) << 4);
      *data |= ((owner_[101] & 0x1) << 5);
      *data |= ((owner_[102] & 0x1) << 6);
      *data |= ((owner_[103] & 0x1) << 7);
      *data |= ((owner_[104] & 0x1) << 8);
      *data |= ((owner_[105] & 0x1) << 9);
      *data |= ((owner_[106] & 0x1) << 10);
      *data |= ((owner_[107] & 0x1) << 11);
      *data |= ((owner_[108] & 0x1) << 12);
      *data |= ((owner_[109] & 0x1) << 13);
      *data |= ((owner_[110] & 0x1) << 14);
      *data |= ((owner_[111] & 0x1) << 15);
      *data |= ((owner_[112] & 0x1) << 16);
      *data |= ((owner_[113] & 0x1) << 17);
      *data |= ((owner_[114] & 0x1) << 18);
      *data |= ((owner_[115] & 0x1) << 19);
      *data |= ((owner_[116] & 0x1) << 20);
      *data |= ((owner_[117] & 0x1) << 21);
      *data |= ((owner_[118] & 0x1) << 22);
      *data |= ((owner_[119] & 0x1) << 23);
      *data |= ((owner_[120] & 0x1) << 24);
      *data |= ((owner_[121] & 0x1) << 25);
      *data |= ((owner_[122] & 0x1) << 26);
      *data |= ((owner_[123] & 0x1) << 27);
      *data |= ((owner_[124] & 0x1) << 28);
      *data |= ((owner_[125] & 0x1) << 29);
      *data |= ((owner_[126] & 0x1) << 30);
      *data |= ((owner_[127] & 0x1) << 31);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      owner_[0] = (data & 0x1);
      owner_[1] = ((data >> 1) & 0x1);
      owner_[2] = ((data >> 2) & 0x1);
      owner_[3] = ((data >> 3) & 0x1);
      owner_[4] = ((data >> 4) & 0x1);
      owner_[5] = ((data >> 5) & 0x1);
      owner_[6] = ((data >> 6) & 0x1);
      owner_[7] = ((data >> 7) & 0x1);
      owner_[8] = ((data >> 8) & 0x1);
      owner_[9] = ((data >> 9) & 0x1);
      owner_[10] = ((data >> 10) & 0x1);
      owner_[11] = ((data >> 11) & 0x1);
      owner_[12] = ((data >> 12) & 0x1);
      owner_[13] = ((data >> 13) & 0x1);
      owner_[14] = ((data >> 14) & 0x1);
      owner_[15] = ((data >> 15) & 0x1);
      owner_[16] = ((data >> 16) & 0x1);
      owner_[17] = ((data >> 17) & 0x1);
      owner_[18] = ((data >> 18) & 0x1);
      owner_[19] = ((data >> 19) & 0x1);
      owner_[20] = ((data >> 20) & 0x1);
      owner_[21] = ((data >> 21) & 0x1);
      owner_[22] = ((data >> 22) & 0x1);
      owner_[23] = ((data >> 23) & 0x1);
      owner_[24] = ((data >> 24) & 0x1);
      owner_[25] = ((data >> 25) & 0x1);
      owner_[26] = ((data >> 26) & 0x1);
      owner_[27] = ((data >> 27) & 0x1);
      owner_[28] = ((data >> 28) & 0x1);
      owner_[29] = ((data >> 29) & 0x1);
      owner_[30] = ((data >> 30) & 0x1);
      owner_[31] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      owner_[32] = (data & 0x1);
      owner_[33] = ((data >> 1) & 0x1);
      owner_[34] = ((data >> 2) & 0x1);
      owner_[35] = ((data >> 3) & 0x1);
      owner_[36] = ((data >> 4) & 0x1);
      owner_[37] = ((data >> 5) & 0x1);
      owner_[38] = ((data >> 6) & 0x1);
      owner_[39] = ((data >> 7) & 0x1);
      owner_[40] = ((data >> 8) & 0x1);
      owner_[41] = ((data >> 9) & 0x1);
      owner_[42] = ((data >> 10) & 0x1);
      owner_[43] = ((data >> 11) & 0x1);
      owner_[44] = ((data >> 12) & 0x1);
      owner_[45] = ((data >> 13) & 0x1);
      owner_[46] = ((data >> 14) & 0x1);
      owner_[47] = ((data >> 15) & 0x1);
      owner_[48] = ((data >> 16) & 0x1);
      owner_[49] = ((data >> 17) & 0x1);
      owner_[50] = ((data >> 18) & 0x1);
      owner_[51] = ((data >> 19) & 0x1);
      owner_[52] = ((data >> 20) & 0x1);
      owner_[53] = ((data >> 21) & 0x1);
      owner_[54] = ((data >> 22) & 0x1);
      owner_[55] = ((data >> 23) & 0x1);
      owner_[56] = ((data >> 24) & 0x1);
      owner_[57] = ((data >> 25) & 0x1);
      owner_[58] = ((data >> 26) & 0x1);
      owner_[59] = ((data >> 27) & 0x1);
      owner_[60] = ((data >> 28) & 0x1);
      owner_[61] = ((data >> 29) & 0x1);
      owner_[62] = ((data >> 30) & 0x1);
      owner_[63] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      owner_[64] = (data & 0x1);
      owner_[65] = ((data >> 1) & 0x1);
      owner_[66] = ((data >> 2) & 0x1);
      owner_[67] = ((data >> 3) & 0x1);
      owner_[68] = ((data >> 4) & 0x1);
      owner_[69] = ((data >> 5) & 0x1);
      owner_[70] = ((data >> 6) & 0x1);
      owner_[71] = ((data >> 7) & 0x1);
      owner_[72] = ((data >> 8) & 0x1);
      owner_[73] = ((data >> 9) & 0x1);
      owner_[74] = ((data >> 10) & 0x1);
      owner_[75] = ((data >> 11) & 0x1);
      owner_[76] = ((data >> 12) & 0x1);
      owner_[77] = ((data >> 13) & 0x1);
      owner_[78] = ((data >> 14) & 0x1);
      owner_[79] = ((data >> 15) & 0x1);
      owner_[80] = ((data >> 16) & 0x1);
      owner_[81] = ((data >> 17) & 0x1);
      owner_[82] = ((data >> 18) & 0x1);
      owner_[83] = ((data >> 19) & 0x1);
      owner_[84] = ((data >> 20) & 0x1);
      owner_[85] = ((data >> 21) & 0x1);
      owner_[86] = ((data >> 22) & 0x1);
      owner_[87] = ((data >> 23) & 0x1);
      owner_[88] = ((data >> 24) & 0x1);
      owner_[89] = ((data >> 25) & 0x1);
      owner_[90] = ((data >> 26) & 0x1);
      owner_[91] = ((data >> 27) & 0x1);
      owner_[92] = ((data >> 28) & 0x1);
      owner_[93] = ((data >> 29) & 0x1);
      owner_[94] = ((data >> 30) & 0x1);
      owner_[95] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      owner_[96] = (data & 0x1);
      owner_[97] = ((data >> 1) & 0x1);
      owner_[98] = ((data >> 2) & 0x1);
      owner_[99] = ((data >> 3) & 0x1);
      owner_[100] = ((data >> 4) & 0x1);
      owner_[101] = ((data >> 5) & 0x1);
      owner_[102] = ((data >> 6) & 0x1);
      owner_[103] = ((data >> 7) & 0x1);
      owner_[104] = ((data >> 8) & 0x1);
      owner_[105] = ((data >> 9) & 0x1);
      owner_[106] = ((data >> 10) & 0x1);
      owner_[107] = ((data >> 11) & 0x1);
      owner_[108] = ((data >> 12) & 0x1);
      owner_[109] = ((data >> 13) & 0x1);
      owner_[110] = ((data >> 14) & 0x1);
      owner_[111] = ((data >> 15) & 0x1);
      owner_[112] = ((data >> 16) & 0x1);
      owner_[113] = ((data >> 17) & 0x1);
      owner_[114] = ((data >> 18) & 0x1);
      owner_[115] = ((data >> 19) & 0x1);
      owner_[116] = ((data >> 20) & 0x1);
      owner_[117] = ((data >> 21) & 0x1);
      owner_[118] = ((data >> 22) & 0x1);
      owner_[119] = ((data >> 23) & 0x1);
      owner_[120] = ((data >> 24) & 0x1);
      owner_[121] = ((data >> 25) & 0x1);
      owner_[122] = ((data >> 26) & 0x1);
      owner_[123] = ((data >> 27) & 0x1);
      owner_[124] = ((data >> 28) & 0x1);
      owner_[125] = ((data >> 29) & 0x1);
      owner_[126] = ((data >> 30) & 0x1);
      owner_[127] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    owner_[0] = 0x0;
    owner_[1] = 0x0;
    owner_[2] = 0x0;
    owner_[3] = 0x0;
    owner_[4] = 0x0;
    owner_[5] = 0x0;
    owner_[6] = 0x0;
    owner_[7] = 0x0;
    owner_[8] = 0x0;
    owner_[9] = 0x0;
    owner_[10] = 0x0;
    owner_[11] = 0x0;
    owner_[12] = 0x0;
    owner_[13] = 0x0;
    owner_[14] = 0x0;
    owner_[15] = 0x0;
    owner_[16] = 0x0;
    owner_[17] = 0x0;
    owner_[18] = 0x0;
    owner_[19] = 0x0;
    owner_[20] = 0x0;
    owner_[21] = 0x0;
    owner_[22] = 0x0;
    owner_[23] = 0x0;
    owner_[24] = 0x0;
    owner_[25] = 0x0;
    owner_[26] = 0x0;
    owner_[27] = 0x0;
    owner_[28] = 0x0;
    owner_[29] = 0x0;
    owner_[30] = 0x0;
    owner_[31] = 0x0;
    owner_[32] = 0x0;
    owner_[33] = 0x0;
    owner_[34] = 0x0;
    owner_[35] = 0x0;
    owner_[36] = 0x0;
    owner_[37] = 0x0;
    owner_[38] = 0x0;
    owner_[39] = 0x0;
    owner_[40] = 0x0;
    owner_[41] = 0x0;
    owner_[42] = 0x0;
    owner_[43] = 0x0;
    owner_[44] = 0x0;
    owner_[45] = 0x0;
    owner_[46] = 0x0;
    owner_[47] = 0x0;
    owner_[48] = 0x0;
    owner_[49] = 0x0;
    owner_[50] = 0x0;
    owner_[51] = 0x0;
    owner_[52] = 0x0;
    owner_[53] = 0x0;
    owner_[54] = 0x0;
    owner_[55] = 0x0;
    owner_[56] = 0x0;
    owner_[57] = 0x0;
    owner_[58] = 0x0;
    owner_[59] = 0x0;
    owner_[60] = 0x0;
    owner_[61] = 0x0;
    owner_[62] = 0x0;
    owner_[63] = 0x0;
    owner_[64] = 0x0;
    owner_[65] = 0x0;
    owner_[66] = 0x0;
    owner_[67] = 0x0;
    owner_[68] = 0x0;
    owner_[69] = 0x0;
    owner_[70] = 0x0;
    owner_[71] = 0x0;
    owner_[72] = 0x0;
    owner_[73] = 0x0;
    owner_[74] = 0x0;
    owner_[75] = 0x0;
    owner_[76] = 0x0;
    owner_[77] = 0x0;
    owner_[78] = 0x0;
    owner_[79] = 0x0;
    owner_[80] = 0x0;
    owner_[81] = 0x0;
    owner_[82] = 0x0;
    owner_[83] = 0x0;
    owner_[84] = 0x0;
    owner_[85] = 0x0;
    owner_[86] = 0x0;
    owner_[87] = 0x0;
    owner_[88] = 0x0;
    owner_[89] = 0x0;
    owner_[90] = 0x0;
    owner_[91] = 0x0;
    owner_[92] = 0x0;
    owner_[93] = 0x0;
    owner_[94] = 0x0;
    owner_[95] = 0x0;
    owner_[96] = 0x0;
    owner_[97] = 0x0;
    owner_[98] = 0x0;
    owner_[99] = 0x0;
    owner_[100] = 0x0;
    owner_[101] = 0x0;
    owner_[102] = 0x0;
    owner_[103] = 0x0;
    owner_[104] = 0x0;
    owner_[105] = 0x0;
    owner_[106] = 0x0;
    owner_[107] = 0x0;
    owner_[108] = 0x0;
    owner_[109] = 0x0;
    owner_[110] = 0x0;
    owner_[111] = 0x0;
    owner_[112] = 0x0;
    owner_[113] = 0x0;
    owner_[114] = 0x0;
    owner_[115] = 0x0;
    owner_[116] = 0x0;
    owner_[117] = 0x0;
    owner_[118] = 0x0;
    owner_[119] = 0x0;
    owner_[120] = 0x0;
    owner_[121] = 0x0;
    owner_[122] = 0x0;
    owner_[123] = 0x0;
    owner_[124] = 0x0;
    owner_[125] = 0x0;
    owner_[126] = 0x0;
    owner_[127] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PmergeUpperRightRegPhvOwner_255_128Mutable") + ":\n";
    for (uint32_t f=0;f<128;++f) {
      r += indent_string + "  " + std::string("owner") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(owner_[f]) ) + "\n";
      all_zeros &= (0 == owner_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PmergeUpperRightRegPhvOwner_255_128Mutable") + ":\n";
    for (uint32_t f=0;f<128;++f) {
      r += indent_string + "  " + std::string("owner") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(owner_[f]) ) + "\n";
      all_zeros &= (0 == owner_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 128 > owner_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    offset += 0x12000; // to get to pmergereg
    offset += 0x1200; // to get to ur
    offset += 0x20; // to get to phv_owner_255_128
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PMERGE_UPPER_RIGHT_REG_PHV_OWNER_255_128_MUTABLE_H__
