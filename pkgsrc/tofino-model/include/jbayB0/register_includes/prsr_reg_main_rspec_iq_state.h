/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_IQ_STATE_H__
#define __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_IQ_STATE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class PrsrRegMainRspecIqState : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum PardeGlueStnRegEnum {
    kEpbprsr4reg,
    kIpbprsr4reg
  };
public:
  PrsrRegMainRspecIqState(
      int chipNumber, int index_pipe_addrmap, PardeGlueStnRegEnum selector_parde_glue_stn_reg, int index_epb_prsr4_reg, int index_prsr_reg_main_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, selector_parde_glue_stn_reg, index_epb_prsr4_reg, index_prsr_reg_main_rspec), 4, false, write_callback, read_callback, std::string("PrsrRegMainRspecIqState")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(selector_parde_glue_stn_reg) + "," + boost::lexical_cast<std::string>(index_epb_prsr4_reg) + "," + boost::lexical_cast<std::string>(index_prsr_reg_main_rspec))
    {
    }
  PrsrRegMainRspecIqState(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PrsrRegMainRspecIqState")
    {
    }
public:






  uint8_t &pkt_occ(int j0) { return pkt_occ_[j0]; }






  uint8_t &data_occ(int j0) { return data_occ_[j0]; }






  uint8_t &empty(int j0) { return empty_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (pkt_occ_[0] & 0xf);
    *data |= ((pkt_occ_[1] & 0xf) << 4);
    *data |= ((data_occ_[0] & 0xf) << 8);
    *data |= ((data_occ_[1] & 0xf) << 12);
    *data |= ((empty_[0] & 0x1) << 16);
    *data |= ((empty_[1] & 0x1) << 17);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    pkt_occ_[0] = (data & 0xf);
    pkt_occ_[1] = ((data >> 4) & 0xf);
    data_occ_[0] = ((data >> 8) & 0xf);
    data_occ_[1] = ((data >> 12) & 0xf);
    empty_[0] = ((data >> 16) & 0x1);
    empty_[1] = ((data >> 17) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    pkt_occ_[0] = 0;
    pkt_occ_[1] = 0;
    data_occ_[0] = 0;
    data_occ_[1] = 0;
    empty_[0] = 0;
    empty_[1] = 0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PrsrRegMainRspecIqState") + ":\n";
    for (uint32_t f=0;f<2;++f) {
      r += indent_string + "  " + std::string("pkt_occ") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkt_occ_[f]) ) + "\n";
      all_zeros &= (0 == pkt_occ_[f]);
    }
    for (uint32_t f=0;f<2;++f) {
      r += indent_string + "  " + std::string("data_occ") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(data_occ_[f]) ) + "\n";
      all_zeros &= (0 == data_occ_[f]);
    }
    for (uint32_t f=0;f<2;++f) {
      r += indent_string + "  " + std::string("empty") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(empty_[f]) ) + "\n";
      all_zeros &= (0 == empty_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PrsrRegMainRspecIqState") + ":\n";
    for (uint32_t f=0;f<2;++f) {
      r += indent_string + "  " + std::string("pkt_occ") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pkt_occ_[f]) ) + "\n";
      all_zeros &= (0 == pkt_occ_[f]);
    }
    for (uint32_t f=0;f<2;++f) {
      r += indent_string + "  " + std::string("data_occ") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(data_occ_[f]) ) + "\n";
      all_zeros &= (0 == data_occ_[f]);
    }
    for (uint32_t f=0;f<2;++f) {
      r += indent_string + "  " + std::string("empty") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(empty_[f]) ) + "\n";
      all_zeros &= (0 == empty_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 2 > pkt_occ_;
  std::array< uint8_t, 2 > data_occ_;
  std::array< uint8_t, 2 > empty_;
private:
  static int StartOffset(
      int index_pipe_addrmap, PardeGlueStnRegEnum selector_parde_glue_stn_reg, int index_epb_prsr4_reg, int index_prsr_reg_main_rspec
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    switch (selector_parde_glue_stn_reg) {
      case kEpbprsr4reg:
        offset += 0x20000; // to get to epbprsr4reg
        assert(index_epb_prsr4_reg < 9);
        offset += index_epb_prsr4_reg * 0x2000; // epb_prsr4_reg[]
        offset += 0x1000; // to get to prsr
        assert(index_prsr_reg_main_rspec < 4);
        offset += index_prsr_reg_main_rspec * 0x400; // prsr_reg_main_rspec[]
        offset += 0x1f4; // to get to iq_state
        break;
      case kIpbprsr4reg:
        assert(index_epb_prsr4_reg < 9);
        offset += index_epb_prsr4_reg * 0x2000; // ipb_prsr4_reg[]
        offset += 0x1000; // to get to prsr
        assert(index_prsr_reg_main_rspec < 4);
        offset += index_prsr_reg_main_rspec * 0x400; // prsr_reg_main_rspec[]
        offset += 0x1f4; // to get to iq_state
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_IQ_STATE_H__
