/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_PHV_CLR_ON_WR_H__
#define __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_PHV_CLR_ON_WR_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class PrsrRegMainRspecPhvClrOnWr : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum PardeGlueStnRegEnum {
    kEpbprsr4reg,
    kIpbprsr4reg
  };
public:
  PrsrRegMainRspecPhvClrOnWr(
      int chipNumber, int index_pipe_addrmap, PardeGlueStnRegEnum selector_parde_glue_stn_reg, int index_epb_prsr4_reg, int index_prsr_reg_main_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, selector_parde_glue_stn_reg, index_epb_prsr4_reg, index_prsr_reg_main_rspec), 32, false, write_callback, read_callback, std::string("PrsrRegMainRspecPhvClrOnWr")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(selector_parde_glue_stn_reg) + "," + boost::lexical_cast<std::string>(index_epb_prsr4_reg) + "," + boost::lexical_cast<std::string>(index_prsr_reg_main_rspec))
    {
    }
  PrsrRegMainRspecPhvClrOnWr(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PrsrRegMainRspecPhvClrOnWr")
    {
    }
public:



  uint8_t &clr(int j0) { return clr_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (clr_[0] & 0x1);
      *data |= ((clr_[1] & 0x1) << 1);
      *data |= ((clr_[2] & 0x1) << 2);
      *data |= ((clr_[3] & 0x1) << 3);
      *data |= ((clr_[4] & 0x1) << 4);
      *data |= ((clr_[5] & 0x1) << 5);
      *data |= ((clr_[6] & 0x1) << 6);
      *data |= ((clr_[7] & 0x1) << 7);
      *data |= ((clr_[8] & 0x1) << 8);
      *data |= ((clr_[9] & 0x1) << 9);
      *data |= ((clr_[10] & 0x1) << 10);
      *data |= ((clr_[11] & 0x1) << 11);
      *data |= ((clr_[12] & 0x1) << 12);
      *data |= ((clr_[13] & 0x1) << 13);
      *data |= ((clr_[14] & 0x1) << 14);
      *data |= ((clr_[15] & 0x1) << 15);
      *data |= ((clr_[16] & 0x1) << 16);
      *data |= ((clr_[17] & 0x1) << 17);
      *data |= ((clr_[18] & 0x1) << 18);
      *data |= ((clr_[19] & 0x1) << 19);
      *data |= ((clr_[20] & 0x1) << 20);
      *data |= ((clr_[21] & 0x1) << 21);
      *data |= ((clr_[22] & 0x1) << 22);
      *data |= ((clr_[23] & 0x1) << 23);
      *data |= ((clr_[24] & 0x1) << 24);
      *data |= ((clr_[25] & 0x1) << 25);
      *data |= ((clr_[26] & 0x1) << 26);
      *data |= ((clr_[27] & 0x1) << 27);
      *data |= ((clr_[28] & 0x1) << 28);
      *data |= ((clr_[29] & 0x1) << 29);
      *data |= ((clr_[30] & 0x1) << 30);
      *data |= ((clr_[31] & 0x1) << 31);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (clr_[32] & 0x1);
      *data |= ((clr_[33] & 0x1) << 1);
      *data |= ((clr_[34] & 0x1) << 2);
      *data |= ((clr_[35] & 0x1) << 3);
      *data |= ((clr_[36] & 0x1) << 4);
      *data |= ((clr_[37] & 0x1) << 5);
      *data |= ((clr_[38] & 0x1) << 6);
      *data |= ((clr_[39] & 0x1) << 7);
      *data |= ((clr_[40] & 0x1) << 8);
      *data |= ((clr_[41] & 0x1) << 9);
      *data |= ((clr_[42] & 0x1) << 10);
      *data |= ((clr_[43] & 0x1) << 11);
      *data |= ((clr_[44] & 0x1) << 12);
      *data |= ((clr_[45] & 0x1) << 13);
      *data |= ((clr_[46] & 0x1) << 14);
      *data |= ((clr_[47] & 0x1) << 15);
      *data |= ((clr_[48] & 0x1) << 16);
      *data |= ((clr_[49] & 0x1) << 17);
      *data |= ((clr_[50] & 0x1) << 18);
      *data |= ((clr_[51] & 0x1) << 19);
      *data |= ((clr_[52] & 0x1) << 20);
      *data |= ((clr_[53] & 0x1) << 21);
      *data |= ((clr_[54] & 0x1) << 22);
      *data |= ((clr_[55] & 0x1) << 23);
      *data |= ((clr_[56] & 0x1) << 24);
      *data |= ((clr_[57] & 0x1) << 25);
      *data |= ((clr_[58] & 0x1) << 26);
      *data |= ((clr_[59] & 0x1) << 27);
      *data |= ((clr_[60] & 0x1) << 28);
      *data |= ((clr_[61] & 0x1) << 29);
      *data |= ((clr_[62] & 0x1) << 30);
      *data |= ((clr_[63] & 0x1) << 31);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = (clr_[64] & 0x1);
      *data |= ((clr_[65] & 0x1) << 1);
      *data |= ((clr_[66] & 0x1) << 2);
      *data |= ((clr_[67] & 0x1) << 3);
      *data |= ((clr_[68] & 0x1) << 4);
      *data |= ((clr_[69] & 0x1) << 5);
      *data |= ((clr_[70] & 0x1) << 6);
      *data |= ((clr_[71] & 0x1) << 7);
      *data |= ((clr_[72] & 0x1) << 8);
      *data |= ((clr_[73] & 0x1) << 9);
      *data |= ((clr_[74] & 0x1) << 10);
      *data |= ((clr_[75] & 0x1) << 11);
      *data |= ((clr_[76] & 0x1) << 12);
      *data |= ((clr_[77] & 0x1) << 13);
      *data |= ((clr_[78] & 0x1) << 14);
      *data |= ((clr_[79] & 0x1) << 15);
      *data |= ((clr_[80] & 0x1) << 16);
      *data |= ((clr_[81] & 0x1) << 17);
      *data |= ((clr_[82] & 0x1) << 18);
      *data |= ((clr_[83] & 0x1) << 19);
      *data |= ((clr_[84] & 0x1) << 20);
      *data |= ((clr_[85] & 0x1) << 21);
      *data |= ((clr_[86] & 0x1) << 22);
      *data |= ((clr_[87] & 0x1) << 23);
      *data |= ((clr_[88] & 0x1) << 24);
      *data |= ((clr_[89] & 0x1) << 25);
      *data |= ((clr_[90] & 0x1) << 26);
      *data |= ((clr_[91] & 0x1) << 27);
      *data |= ((clr_[92] & 0x1) << 28);
      *data |= ((clr_[93] & 0x1) << 29);
      *data |= ((clr_[94] & 0x1) << 30);
      *data |= ((clr_[95] & 0x1) << 31);
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = (clr_[96] & 0x1);
      *data |= ((clr_[97] & 0x1) << 1);
      *data |= ((clr_[98] & 0x1) << 2);
      *data |= ((clr_[99] & 0x1) << 3);
      *data |= ((clr_[100] & 0x1) << 4);
      *data |= ((clr_[101] & 0x1) << 5);
      *data |= ((clr_[102] & 0x1) << 6);
      *data |= ((clr_[103] & 0x1) << 7);
      *data |= ((clr_[104] & 0x1) << 8);
      *data |= ((clr_[105] & 0x1) << 9);
      *data |= ((clr_[106] & 0x1) << 10);
      *data |= ((clr_[107] & 0x1) << 11);
      *data |= ((clr_[108] & 0x1) << 12);
      *data |= ((clr_[109] & 0x1) << 13);
      *data |= ((clr_[110] & 0x1) << 14);
      *data |= ((clr_[111] & 0x1) << 15);
      *data |= ((clr_[112] & 0x1) << 16);
      *data |= ((clr_[113] & 0x1) << 17);
      *data |= ((clr_[114] & 0x1) << 18);
      *data |= ((clr_[115] & 0x1) << 19);
      *data |= ((clr_[116] & 0x1) << 20);
      *data |= ((clr_[117] & 0x1) << 21);
      *data |= ((clr_[118] & 0x1) << 22);
      *data |= ((clr_[119] & 0x1) << 23);
      *data |= ((clr_[120] & 0x1) << 24);
      *data |= ((clr_[121] & 0x1) << 25);
      *data |= ((clr_[122] & 0x1) << 26);
      *data |= ((clr_[123] & 0x1) << 27);
      *data |= ((clr_[124] & 0x1) << 28);
      *data |= ((clr_[125] & 0x1) << 29);
      *data |= ((clr_[126] & 0x1) << 30);
      *data |= ((clr_[127] & 0x1) << 31);
    }
    else if (offset >= 0x10 && offset < 0x14) {
      if (read_callback_) read_callback_();
      *data = (clr_[128] & 0x1);
      *data |= ((clr_[129] & 0x1) << 1);
      *data |= ((clr_[130] & 0x1) << 2);
      *data |= ((clr_[131] & 0x1) << 3);
      *data |= ((clr_[132] & 0x1) << 4);
      *data |= ((clr_[133] & 0x1) << 5);
      *data |= ((clr_[134] & 0x1) << 6);
      *data |= ((clr_[135] & 0x1) << 7);
      *data |= ((clr_[136] & 0x1) << 8);
      *data |= ((clr_[137] & 0x1) << 9);
      *data |= ((clr_[138] & 0x1) << 10);
      *data |= ((clr_[139] & 0x1) << 11);
      *data |= ((clr_[140] & 0x1) << 12);
      *data |= ((clr_[141] & 0x1) << 13);
      *data |= ((clr_[142] & 0x1) << 14);
      *data |= ((clr_[143] & 0x1) << 15);
      *data |= ((clr_[144] & 0x1) << 16);
      *data |= ((clr_[145] & 0x1) << 17);
      *data |= ((clr_[146] & 0x1) << 18);
      *data |= ((clr_[147] & 0x1) << 19);
      *data |= ((clr_[148] & 0x1) << 20);
      *data |= ((clr_[149] & 0x1) << 21);
      *data |= ((clr_[150] & 0x1) << 22);
      *data |= ((clr_[151] & 0x1) << 23);
      *data |= ((clr_[152] & 0x1) << 24);
      *data |= ((clr_[153] & 0x1) << 25);
      *data |= ((clr_[154] & 0x1) << 26);
      *data |= ((clr_[155] & 0x1) << 27);
      *data |= ((clr_[156] & 0x1) << 28);
      *data |= ((clr_[157] & 0x1) << 29);
      *data |= ((clr_[158] & 0x1) << 30);
      *data |= ((clr_[159] & 0x1) << 31);
    }
    else if (offset >= 0x14 && offset < 0x18) {
      if (read_callback_) read_callback_();
      *data = (clr_[160] & 0x1);
      *data |= ((clr_[161] & 0x1) << 1);
      *data |= ((clr_[162] & 0x1) << 2);
      *data |= ((clr_[163] & 0x1) << 3);
      *data |= ((clr_[164] & 0x1) << 4);
      *data |= ((clr_[165] & 0x1) << 5);
      *data |= ((clr_[166] & 0x1) << 6);
      *data |= ((clr_[167] & 0x1) << 7);
      *data |= ((clr_[168] & 0x1) << 8);
      *data |= ((clr_[169] & 0x1) << 9);
      *data |= ((clr_[170] & 0x1) << 10);
      *data |= ((clr_[171] & 0x1) << 11);
      *data |= ((clr_[172] & 0x1) << 12);
      *data |= ((clr_[173] & 0x1) << 13);
      *data |= ((clr_[174] & 0x1) << 14);
      *data |= ((clr_[175] & 0x1) << 15);
      *data |= ((clr_[176] & 0x1) << 16);
      *data |= ((clr_[177] & 0x1) << 17);
      *data |= ((clr_[178] & 0x1) << 18);
      *data |= ((clr_[179] & 0x1) << 19);
      *data |= ((clr_[180] & 0x1) << 20);
      *data |= ((clr_[181] & 0x1) << 21);
      *data |= ((clr_[182] & 0x1) << 22);
      *data |= ((clr_[183] & 0x1) << 23);
      *data |= ((clr_[184] & 0x1) << 24);
      *data |= ((clr_[185] & 0x1) << 25);
      *data |= ((clr_[186] & 0x1) << 26);
      *data |= ((clr_[187] & 0x1) << 27);
      *data |= ((clr_[188] & 0x1) << 28);
      *data |= ((clr_[189] & 0x1) << 29);
      *data |= ((clr_[190] & 0x1) << 30);
      *data |= ((clr_[191] & 0x1) << 31);
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      if (read_callback_) read_callback_();
      *data = (clr_[192] & 0x1);
      *data |= ((clr_[193] & 0x1) << 1);
      *data |= ((clr_[194] & 0x1) << 2);
      *data |= ((clr_[195] & 0x1) << 3);
      *data |= ((clr_[196] & 0x1) << 4);
      *data |= ((clr_[197] & 0x1) << 5);
      *data |= ((clr_[198] & 0x1) << 6);
      *data |= ((clr_[199] & 0x1) << 7);
      *data |= ((clr_[200] & 0x1) << 8);
      *data |= ((clr_[201] & 0x1) << 9);
      *data |= ((clr_[202] & 0x1) << 10);
      *data |= ((clr_[203] & 0x1) << 11);
      *data |= ((clr_[204] & 0x1) << 12);
      *data |= ((clr_[205] & 0x1) << 13);
      *data |= ((clr_[206] & 0x1) << 14);
      *data |= ((clr_[207] & 0x1) << 15);
      *data |= ((clr_[208] & 0x1) << 16);
      *data |= ((clr_[209] & 0x1) << 17);
      *data |= ((clr_[210] & 0x1) << 18);
      *data |= ((clr_[211] & 0x1) << 19);
      *data |= ((clr_[212] & 0x1) << 20);
      *data |= ((clr_[213] & 0x1) << 21);
      *data |= ((clr_[214] & 0x1) << 22);
      *data |= ((clr_[215] & 0x1) << 23);
      *data |= ((clr_[216] & 0x1) << 24);
      *data |= ((clr_[217] & 0x1) << 25);
      *data |= ((clr_[218] & 0x1) << 26);
      *data |= ((clr_[219] & 0x1) << 27);
      *data |= ((clr_[220] & 0x1) << 28);
      *data |= ((clr_[221] & 0x1) << 29);
      *data |= ((clr_[222] & 0x1) << 30);
      *data |= ((clr_[223] & 0x1) << 31);
    }
    else if (offset >= 0x1c && offset < 0x20) {
      if (read_callback_) read_callback_();
      *data = (clr_[224] & 0x1);
      *data |= ((clr_[225] & 0x1) << 1);
      *data |= ((clr_[226] & 0x1) << 2);
      *data |= ((clr_[227] & 0x1) << 3);
      *data |= ((clr_[228] & 0x1) << 4);
      *data |= ((clr_[229] & 0x1) << 5);
      *data |= ((clr_[230] & 0x1) << 6);
      *data |= ((clr_[231] & 0x1) << 7);
      *data |= ((clr_[232] & 0x1) << 8);
      *data |= ((clr_[233] & 0x1) << 9);
      *data |= ((clr_[234] & 0x1) << 10);
      *data |= ((clr_[235] & 0x1) << 11);
      *data |= ((clr_[236] & 0x1) << 12);
      *data |= ((clr_[237] & 0x1) << 13);
      *data |= ((clr_[238] & 0x1) << 14);
      *data |= ((clr_[239] & 0x1) << 15);
      *data |= ((clr_[240] & 0x1) << 16);
      *data |= ((clr_[241] & 0x1) << 17);
      *data |= ((clr_[242] & 0x1) << 18);
      *data |= ((clr_[243] & 0x1) << 19);
      *data |= ((clr_[244] & 0x1) << 20);
      *data |= ((clr_[245] & 0x1) << 21);
      *data |= ((clr_[246] & 0x1) << 22);
      *data |= ((clr_[247] & 0x1) << 23);
      *data |= ((clr_[248] & 0x1) << 24);
      *data |= ((clr_[249] & 0x1) << 25);
      *data |= ((clr_[250] & 0x1) << 26);
      *data |= ((clr_[251] & 0x1) << 27);
      *data |= ((clr_[252] & 0x1) << 28);
      *data |= ((clr_[253] & 0x1) << 29);
      *data |= ((clr_[254] & 0x1) << 30);
      *data |= ((clr_[255] & 0x1) << 31);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      clr_[0] = (data & 0x1);
      clr_[1] = ((data >> 1) & 0x1);
      clr_[2] = ((data >> 2) & 0x1);
      clr_[3] = ((data >> 3) & 0x1);
      clr_[4] = ((data >> 4) & 0x1);
      clr_[5] = ((data >> 5) & 0x1);
      clr_[6] = ((data >> 6) & 0x1);
      clr_[7] = ((data >> 7) & 0x1);
      clr_[8] = ((data >> 8) & 0x1);
      clr_[9] = ((data >> 9) & 0x1);
      clr_[10] = ((data >> 10) & 0x1);
      clr_[11] = ((data >> 11) & 0x1);
      clr_[12] = ((data >> 12) & 0x1);
      clr_[13] = ((data >> 13) & 0x1);
      clr_[14] = ((data >> 14) & 0x1);
      clr_[15] = ((data >> 15) & 0x1);
      clr_[16] = ((data >> 16) & 0x1);
      clr_[17] = ((data >> 17) & 0x1);
      clr_[18] = ((data >> 18) & 0x1);
      clr_[19] = ((data >> 19) & 0x1);
      clr_[20] = ((data >> 20) & 0x1);
      clr_[21] = ((data >> 21) & 0x1);
      clr_[22] = ((data >> 22) & 0x1);
      clr_[23] = ((data >> 23) & 0x1);
      clr_[24] = ((data >> 24) & 0x1);
      clr_[25] = ((data >> 25) & 0x1);
      clr_[26] = ((data >> 26) & 0x1);
      clr_[27] = ((data >> 27) & 0x1);
      clr_[28] = ((data >> 28) & 0x1);
      clr_[29] = ((data >> 29) & 0x1);
      clr_[30] = ((data >> 30) & 0x1);
      clr_[31] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      clr_[32] = (data & 0x1);
      clr_[33] = ((data >> 1) & 0x1);
      clr_[34] = ((data >> 2) & 0x1);
      clr_[35] = ((data >> 3) & 0x1);
      clr_[36] = ((data >> 4) & 0x1);
      clr_[37] = ((data >> 5) & 0x1);
      clr_[38] = ((data >> 6) & 0x1);
      clr_[39] = ((data >> 7) & 0x1);
      clr_[40] = ((data >> 8) & 0x1);
      clr_[41] = ((data >> 9) & 0x1);
      clr_[42] = ((data >> 10) & 0x1);
      clr_[43] = ((data >> 11) & 0x1);
      clr_[44] = ((data >> 12) & 0x1);
      clr_[45] = ((data >> 13) & 0x1);
      clr_[46] = ((data >> 14) & 0x1);
      clr_[47] = ((data >> 15) & 0x1);
      clr_[48] = ((data >> 16) & 0x1);
      clr_[49] = ((data >> 17) & 0x1);
      clr_[50] = ((data >> 18) & 0x1);
      clr_[51] = ((data >> 19) & 0x1);
      clr_[52] = ((data >> 20) & 0x1);
      clr_[53] = ((data >> 21) & 0x1);
      clr_[54] = ((data >> 22) & 0x1);
      clr_[55] = ((data >> 23) & 0x1);
      clr_[56] = ((data >> 24) & 0x1);
      clr_[57] = ((data >> 25) & 0x1);
      clr_[58] = ((data >> 26) & 0x1);
      clr_[59] = ((data >> 27) & 0x1);
      clr_[60] = ((data >> 28) & 0x1);
      clr_[61] = ((data >> 29) & 0x1);
      clr_[62] = ((data >> 30) & 0x1);
      clr_[63] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      clr_[64] = (data & 0x1);
      clr_[65] = ((data >> 1) & 0x1);
      clr_[66] = ((data >> 2) & 0x1);
      clr_[67] = ((data >> 3) & 0x1);
      clr_[68] = ((data >> 4) & 0x1);
      clr_[69] = ((data >> 5) & 0x1);
      clr_[70] = ((data >> 6) & 0x1);
      clr_[71] = ((data >> 7) & 0x1);
      clr_[72] = ((data >> 8) & 0x1);
      clr_[73] = ((data >> 9) & 0x1);
      clr_[74] = ((data >> 10) & 0x1);
      clr_[75] = ((data >> 11) & 0x1);
      clr_[76] = ((data >> 12) & 0x1);
      clr_[77] = ((data >> 13) & 0x1);
      clr_[78] = ((data >> 14) & 0x1);
      clr_[79] = ((data >> 15) & 0x1);
      clr_[80] = ((data >> 16) & 0x1);
      clr_[81] = ((data >> 17) & 0x1);
      clr_[82] = ((data >> 18) & 0x1);
      clr_[83] = ((data >> 19) & 0x1);
      clr_[84] = ((data >> 20) & 0x1);
      clr_[85] = ((data >> 21) & 0x1);
      clr_[86] = ((data >> 22) & 0x1);
      clr_[87] = ((data >> 23) & 0x1);
      clr_[88] = ((data >> 24) & 0x1);
      clr_[89] = ((data >> 25) & 0x1);
      clr_[90] = ((data >> 26) & 0x1);
      clr_[91] = ((data >> 27) & 0x1);
      clr_[92] = ((data >> 28) & 0x1);
      clr_[93] = ((data >> 29) & 0x1);
      clr_[94] = ((data >> 30) & 0x1);
      clr_[95] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      clr_[96] = (data & 0x1);
      clr_[97] = ((data >> 1) & 0x1);
      clr_[98] = ((data >> 2) & 0x1);
      clr_[99] = ((data >> 3) & 0x1);
      clr_[100] = ((data >> 4) & 0x1);
      clr_[101] = ((data >> 5) & 0x1);
      clr_[102] = ((data >> 6) & 0x1);
      clr_[103] = ((data >> 7) & 0x1);
      clr_[104] = ((data >> 8) & 0x1);
      clr_[105] = ((data >> 9) & 0x1);
      clr_[106] = ((data >> 10) & 0x1);
      clr_[107] = ((data >> 11) & 0x1);
      clr_[108] = ((data >> 12) & 0x1);
      clr_[109] = ((data >> 13) & 0x1);
      clr_[110] = ((data >> 14) & 0x1);
      clr_[111] = ((data >> 15) & 0x1);
      clr_[112] = ((data >> 16) & 0x1);
      clr_[113] = ((data >> 17) & 0x1);
      clr_[114] = ((data >> 18) & 0x1);
      clr_[115] = ((data >> 19) & 0x1);
      clr_[116] = ((data >> 20) & 0x1);
      clr_[117] = ((data >> 21) & 0x1);
      clr_[118] = ((data >> 22) & 0x1);
      clr_[119] = ((data >> 23) & 0x1);
      clr_[120] = ((data >> 24) & 0x1);
      clr_[121] = ((data >> 25) & 0x1);
      clr_[122] = ((data >> 26) & 0x1);
      clr_[123] = ((data >> 27) & 0x1);
      clr_[124] = ((data >> 28) & 0x1);
      clr_[125] = ((data >> 29) & 0x1);
      clr_[126] = ((data >> 30) & 0x1);
      clr_[127] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      clr_[128] = (data & 0x1);
      clr_[129] = ((data >> 1) & 0x1);
      clr_[130] = ((data >> 2) & 0x1);
      clr_[131] = ((data >> 3) & 0x1);
      clr_[132] = ((data >> 4) & 0x1);
      clr_[133] = ((data >> 5) & 0x1);
      clr_[134] = ((data >> 6) & 0x1);
      clr_[135] = ((data >> 7) & 0x1);
      clr_[136] = ((data >> 8) & 0x1);
      clr_[137] = ((data >> 9) & 0x1);
      clr_[138] = ((data >> 10) & 0x1);
      clr_[139] = ((data >> 11) & 0x1);
      clr_[140] = ((data >> 12) & 0x1);
      clr_[141] = ((data >> 13) & 0x1);
      clr_[142] = ((data >> 14) & 0x1);
      clr_[143] = ((data >> 15) & 0x1);
      clr_[144] = ((data >> 16) & 0x1);
      clr_[145] = ((data >> 17) & 0x1);
      clr_[146] = ((data >> 18) & 0x1);
      clr_[147] = ((data >> 19) & 0x1);
      clr_[148] = ((data >> 20) & 0x1);
      clr_[149] = ((data >> 21) & 0x1);
      clr_[150] = ((data >> 22) & 0x1);
      clr_[151] = ((data >> 23) & 0x1);
      clr_[152] = ((data >> 24) & 0x1);
      clr_[153] = ((data >> 25) & 0x1);
      clr_[154] = ((data >> 26) & 0x1);
      clr_[155] = ((data >> 27) & 0x1);
      clr_[156] = ((data >> 28) & 0x1);
      clr_[157] = ((data >> 29) & 0x1);
      clr_[158] = ((data >> 30) & 0x1);
      clr_[159] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      clr_[160] = (data & 0x1);
      clr_[161] = ((data >> 1) & 0x1);
      clr_[162] = ((data >> 2) & 0x1);
      clr_[163] = ((data >> 3) & 0x1);
      clr_[164] = ((data >> 4) & 0x1);
      clr_[165] = ((data >> 5) & 0x1);
      clr_[166] = ((data >> 6) & 0x1);
      clr_[167] = ((data >> 7) & 0x1);
      clr_[168] = ((data >> 8) & 0x1);
      clr_[169] = ((data >> 9) & 0x1);
      clr_[170] = ((data >> 10) & 0x1);
      clr_[171] = ((data >> 11) & 0x1);
      clr_[172] = ((data >> 12) & 0x1);
      clr_[173] = ((data >> 13) & 0x1);
      clr_[174] = ((data >> 14) & 0x1);
      clr_[175] = ((data >> 15) & 0x1);
      clr_[176] = ((data >> 16) & 0x1);
      clr_[177] = ((data >> 17) & 0x1);
      clr_[178] = ((data >> 18) & 0x1);
      clr_[179] = ((data >> 19) & 0x1);
      clr_[180] = ((data >> 20) & 0x1);
      clr_[181] = ((data >> 21) & 0x1);
      clr_[182] = ((data >> 22) & 0x1);
      clr_[183] = ((data >> 23) & 0x1);
      clr_[184] = ((data >> 24) & 0x1);
      clr_[185] = ((data >> 25) & 0x1);
      clr_[186] = ((data >> 26) & 0x1);
      clr_[187] = ((data >> 27) & 0x1);
      clr_[188] = ((data >> 28) & 0x1);
      clr_[189] = ((data >> 29) & 0x1);
      clr_[190] = ((data >> 30) & 0x1);
      clr_[191] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      clr_[192] = (data & 0x1);
      clr_[193] = ((data >> 1) & 0x1);
      clr_[194] = ((data >> 2) & 0x1);
      clr_[195] = ((data >> 3) & 0x1);
      clr_[196] = ((data >> 4) & 0x1);
      clr_[197] = ((data >> 5) & 0x1);
      clr_[198] = ((data >> 6) & 0x1);
      clr_[199] = ((data >> 7) & 0x1);
      clr_[200] = ((data >> 8) & 0x1);
      clr_[201] = ((data >> 9) & 0x1);
      clr_[202] = ((data >> 10) & 0x1);
      clr_[203] = ((data >> 11) & 0x1);
      clr_[204] = ((data >> 12) & 0x1);
      clr_[205] = ((data >> 13) & 0x1);
      clr_[206] = ((data >> 14) & 0x1);
      clr_[207] = ((data >> 15) & 0x1);
      clr_[208] = ((data >> 16) & 0x1);
      clr_[209] = ((data >> 17) & 0x1);
      clr_[210] = ((data >> 18) & 0x1);
      clr_[211] = ((data >> 19) & 0x1);
      clr_[212] = ((data >> 20) & 0x1);
      clr_[213] = ((data >> 21) & 0x1);
      clr_[214] = ((data >> 22) & 0x1);
      clr_[215] = ((data >> 23) & 0x1);
      clr_[216] = ((data >> 24) & 0x1);
      clr_[217] = ((data >> 25) & 0x1);
      clr_[218] = ((data >> 26) & 0x1);
      clr_[219] = ((data >> 27) & 0x1);
      clr_[220] = ((data >> 28) & 0x1);
      clr_[221] = ((data >> 29) & 0x1);
      clr_[222] = ((data >> 30) & 0x1);
      clr_[223] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      clr_[224] = (data & 0x1);
      clr_[225] = ((data >> 1) & 0x1);
      clr_[226] = ((data >> 2) & 0x1);
      clr_[227] = ((data >> 3) & 0x1);
      clr_[228] = ((data >> 4) & 0x1);
      clr_[229] = ((data >> 5) & 0x1);
      clr_[230] = ((data >> 6) & 0x1);
      clr_[231] = ((data >> 7) & 0x1);
      clr_[232] = ((data >> 8) & 0x1);
      clr_[233] = ((data >> 9) & 0x1);
      clr_[234] = ((data >> 10) & 0x1);
      clr_[235] = ((data >> 11) & 0x1);
      clr_[236] = ((data >> 12) & 0x1);
      clr_[237] = ((data >> 13) & 0x1);
      clr_[238] = ((data >> 14) & 0x1);
      clr_[239] = ((data >> 15) & 0x1);
      clr_[240] = ((data >> 16) & 0x1);
      clr_[241] = ((data >> 17) & 0x1);
      clr_[242] = ((data >> 18) & 0x1);
      clr_[243] = ((data >> 19) & 0x1);
      clr_[244] = ((data >> 20) & 0x1);
      clr_[245] = ((data >> 21) & 0x1);
      clr_[246] = ((data >> 22) & 0x1);
      clr_[247] = ((data >> 23) & 0x1);
      clr_[248] = ((data >> 24) & 0x1);
      clr_[249] = ((data >> 25) & 0x1);
      clr_[250] = ((data >> 26) & 0x1);
      clr_[251] = ((data >> 27) & 0x1);
      clr_[252] = ((data >> 28) & 0x1);
      clr_[253] = ((data >> 29) & 0x1);
      clr_[254] = ((data >> 30) & 0x1);
      clr_[255] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    clr_[0] = 0x0;
    clr_[1] = 0x0;
    clr_[2] = 0x0;
    clr_[3] = 0x0;
    clr_[4] = 0x0;
    clr_[5] = 0x0;
    clr_[6] = 0x0;
    clr_[7] = 0x0;
    clr_[8] = 0x0;
    clr_[9] = 0x0;
    clr_[10] = 0x0;
    clr_[11] = 0x0;
    clr_[12] = 0x0;
    clr_[13] = 0x0;
    clr_[14] = 0x0;
    clr_[15] = 0x0;
    clr_[16] = 0x0;
    clr_[17] = 0x0;
    clr_[18] = 0x0;
    clr_[19] = 0x0;
    clr_[20] = 0x0;
    clr_[21] = 0x0;
    clr_[22] = 0x0;
    clr_[23] = 0x0;
    clr_[24] = 0x0;
    clr_[25] = 0x0;
    clr_[26] = 0x0;
    clr_[27] = 0x0;
    clr_[28] = 0x0;
    clr_[29] = 0x0;
    clr_[30] = 0x0;
    clr_[31] = 0x0;
    clr_[32] = 0x0;
    clr_[33] = 0x0;
    clr_[34] = 0x0;
    clr_[35] = 0x0;
    clr_[36] = 0x0;
    clr_[37] = 0x0;
    clr_[38] = 0x0;
    clr_[39] = 0x0;
    clr_[40] = 0x0;
    clr_[41] = 0x0;
    clr_[42] = 0x0;
    clr_[43] = 0x0;
    clr_[44] = 0x0;
    clr_[45] = 0x0;
    clr_[46] = 0x0;
    clr_[47] = 0x0;
    clr_[48] = 0x0;
    clr_[49] = 0x0;
    clr_[50] = 0x0;
    clr_[51] = 0x0;
    clr_[52] = 0x0;
    clr_[53] = 0x0;
    clr_[54] = 0x0;
    clr_[55] = 0x0;
    clr_[56] = 0x0;
    clr_[57] = 0x0;
    clr_[58] = 0x0;
    clr_[59] = 0x0;
    clr_[60] = 0x0;
    clr_[61] = 0x0;
    clr_[62] = 0x0;
    clr_[63] = 0x0;
    clr_[64] = 0x0;
    clr_[65] = 0x0;
    clr_[66] = 0x0;
    clr_[67] = 0x0;
    clr_[68] = 0x0;
    clr_[69] = 0x0;
    clr_[70] = 0x0;
    clr_[71] = 0x0;
    clr_[72] = 0x0;
    clr_[73] = 0x0;
    clr_[74] = 0x0;
    clr_[75] = 0x0;
    clr_[76] = 0x0;
    clr_[77] = 0x0;
    clr_[78] = 0x0;
    clr_[79] = 0x0;
    clr_[80] = 0x0;
    clr_[81] = 0x0;
    clr_[82] = 0x0;
    clr_[83] = 0x0;
    clr_[84] = 0x0;
    clr_[85] = 0x0;
    clr_[86] = 0x0;
    clr_[87] = 0x0;
    clr_[88] = 0x0;
    clr_[89] = 0x0;
    clr_[90] = 0x0;
    clr_[91] = 0x0;
    clr_[92] = 0x0;
    clr_[93] = 0x0;
    clr_[94] = 0x0;
    clr_[95] = 0x0;
    clr_[96] = 0x0;
    clr_[97] = 0x0;
    clr_[98] = 0x0;
    clr_[99] = 0x0;
    clr_[100] = 0x0;
    clr_[101] = 0x0;
    clr_[102] = 0x0;
    clr_[103] = 0x0;
    clr_[104] = 0x0;
    clr_[105] = 0x0;
    clr_[106] = 0x0;
    clr_[107] = 0x0;
    clr_[108] = 0x0;
    clr_[109] = 0x0;
    clr_[110] = 0x0;
    clr_[111] = 0x0;
    clr_[112] = 0x0;
    clr_[113] = 0x0;
    clr_[114] = 0x0;
    clr_[115] = 0x0;
    clr_[116] = 0x0;
    clr_[117] = 0x0;
    clr_[118] = 0x0;
    clr_[119] = 0x0;
    clr_[120] = 0x0;
    clr_[121] = 0x0;
    clr_[122] = 0x0;
    clr_[123] = 0x0;
    clr_[124] = 0x0;
    clr_[125] = 0x0;
    clr_[126] = 0x0;
    clr_[127] = 0x0;
    clr_[128] = 0x0;
    clr_[129] = 0x0;
    clr_[130] = 0x0;
    clr_[131] = 0x0;
    clr_[132] = 0x0;
    clr_[133] = 0x0;
    clr_[134] = 0x0;
    clr_[135] = 0x0;
    clr_[136] = 0x0;
    clr_[137] = 0x0;
    clr_[138] = 0x0;
    clr_[139] = 0x0;
    clr_[140] = 0x0;
    clr_[141] = 0x0;
    clr_[142] = 0x0;
    clr_[143] = 0x0;
    clr_[144] = 0x0;
    clr_[145] = 0x0;
    clr_[146] = 0x0;
    clr_[147] = 0x0;
    clr_[148] = 0x0;
    clr_[149] = 0x0;
    clr_[150] = 0x0;
    clr_[151] = 0x0;
    clr_[152] = 0x0;
    clr_[153] = 0x0;
    clr_[154] = 0x0;
    clr_[155] = 0x0;
    clr_[156] = 0x0;
    clr_[157] = 0x0;
    clr_[158] = 0x0;
    clr_[159] = 0x0;
    clr_[160] = 0x0;
    clr_[161] = 0x0;
    clr_[162] = 0x0;
    clr_[163] = 0x0;
    clr_[164] = 0x0;
    clr_[165] = 0x0;
    clr_[166] = 0x0;
    clr_[167] = 0x0;
    clr_[168] = 0x0;
    clr_[169] = 0x0;
    clr_[170] = 0x0;
    clr_[171] = 0x0;
    clr_[172] = 0x0;
    clr_[173] = 0x0;
    clr_[174] = 0x0;
    clr_[175] = 0x0;
    clr_[176] = 0x0;
    clr_[177] = 0x0;
    clr_[178] = 0x0;
    clr_[179] = 0x0;
    clr_[180] = 0x0;
    clr_[181] = 0x0;
    clr_[182] = 0x0;
    clr_[183] = 0x0;
    clr_[184] = 0x0;
    clr_[185] = 0x0;
    clr_[186] = 0x0;
    clr_[187] = 0x0;
    clr_[188] = 0x0;
    clr_[189] = 0x0;
    clr_[190] = 0x0;
    clr_[191] = 0x0;
    clr_[192] = 0x0;
    clr_[193] = 0x0;
    clr_[194] = 0x0;
    clr_[195] = 0x0;
    clr_[196] = 0x0;
    clr_[197] = 0x0;
    clr_[198] = 0x0;
    clr_[199] = 0x0;
    clr_[200] = 0x0;
    clr_[201] = 0x0;
    clr_[202] = 0x0;
    clr_[203] = 0x0;
    clr_[204] = 0x0;
    clr_[205] = 0x0;
    clr_[206] = 0x0;
    clr_[207] = 0x0;
    clr_[208] = 0x0;
    clr_[209] = 0x0;
    clr_[210] = 0x0;
    clr_[211] = 0x0;
    clr_[212] = 0x0;
    clr_[213] = 0x0;
    clr_[214] = 0x0;
    clr_[215] = 0x0;
    clr_[216] = 0x0;
    clr_[217] = 0x0;
    clr_[218] = 0x0;
    clr_[219] = 0x0;
    clr_[220] = 0x0;
    clr_[221] = 0x0;
    clr_[222] = 0x0;
    clr_[223] = 0x0;
    clr_[224] = 0x0;
    clr_[225] = 0x0;
    clr_[226] = 0x0;
    clr_[227] = 0x0;
    clr_[228] = 0x0;
    clr_[229] = 0x0;
    clr_[230] = 0x0;
    clr_[231] = 0x0;
    clr_[232] = 0x0;
    clr_[233] = 0x0;
    clr_[234] = 0x0;
    clr_[235] = 0x0;
    clr_[236] = 0x0;
    clr_[237] = 0x0;
    clr_[238] = 0x0;
    clr_[239] = 0x0;
    clr_[240] = 0x0;
    clr_[241] = 0x0;
    clr_[242] = 0x0;
    clr_[243] = 0x0;
    clr_[244] = 0x0;
    clr_[245] = 0x0;
    clr_[246] = 0x0;
    clr_[247] = 0x0;
    clr_[248] = 0x0;
    clr_[249] = 0x0;
    clr_[250] = 0x0;
    clr_[251] = 0x0;
    clr_[252] = 0x0;
    clr_[253] = 0x0;
    clr_[254] = 0x0;
    clr_[255] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PrsrRegMainRspecPhvClrOnWr") + ":\n";
    for (uint32_t f=0;f<256;++f) {
      r += indent_string + "  " + std::string("clr") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(clr_[f]) ) + "\n";
      all_zeros &= (0 == clr_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PrsrRegMainRspecPhvClrOnWr") + ":\n";
    for (uint32_t f=0;f<256;++f) {
      r += indent_string + "  " + std::string("clr") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(clr_[f]) ) + "\n";
      all_zeros &= (0 == clr_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 256 > clr_;
private:
  static int StartOffset(
      int index_pipe_addrmap, PardeGlueStnRegEnum selector_parde_glue_stn_reg, int index_epb_prsr4_reg, int index_prsr_reg_main_rspec
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    offset += 0xc00000; // to get to pardereg
    switch (selector_parde_glue_stn_reg) {
      case kEpbprsr4reg:
        offset += 0x20000; // to get to epbprsr4reg
        assert(index_epb_prsr4_reg < 9);
        offset += index_epb_prsr4_reg * 0x2000; // epb_prsr4_reg[]
        offset += 0x1000; // to get to prsr
        assert(index_prsr_reg_main_rspec < 4);
        offset += index_prsr_reg_main_rspec * 0x400; // prsr_reg_main_rspec[]
        offset += 0x200; // to get to phv_clr_on_wr
        break;
      case kIpbprsr4reg:
        assert(index_epb_prsr4_reg < 9);
        offset += index_epb_prsr4_reg * 0x2000; // ipb_prsr4_reg[]
        offset += 0x1000; // to get to prsr
        assert(index_prsr_reg_main_rspec < 4);
        offset += index_prsr_reg_main_rspec * 0x400; // prsr_reg_main_rspec[]
        offset += 0x200; // to get to phv_clr_on_wr
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_PHV_CLR_ON_WR_H__
