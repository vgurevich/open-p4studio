/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PSC_EPIPE_PKT_DROPCNT_R_H__
#define __REGISTER_INCLUDES_PSC_EPIPE_PKT_DROPCNT_R_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class PscEpipePktDropcntR : public model_core::RegisterBlock<RegisterCallback> {
public:
  PscEpipePktDropcntR(
      int chipNumber, int index_psc_epipe_g, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_psc_epipe_g), 8, false, write_callback, read_callback, std::string("PscEpipePktDropcntR")+":"+boost::lexical_cast<std::string>(index_psc_epipe_g))
    {
    }
  PscEpipePktDropcntR(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PscEpipePktDropcntR")
    {
    }
public:
  uint64_t &value() { return value_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (value_ & 0xffffffff);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = ((value_ & UINT64_C(0xff00000000)) >> 32);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      value_ = ((static_cast<uint64_t>(data) & 0xffffffff) | (value_ & UINT64_C(0xff00000000)));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      value_ = (((static_cast<uint64_t>(data) << 32) & UINT64_C(0xff00000000)) | (value_ & 0xffffffff));
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    value_ = UINT64_C(0x0);
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PscEpipePktDropcntR") + ":\n";
    r += indent_string + "  " + std::string("value") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(value_) ) + "\n";
    all_zeros &= (0 == value_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PscEpipePktDropcntR") + ":\n";
    r += indent_string + "  " + std::string("value") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(value_) ) + "\n";
    all_zeros &= (0 == value_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint64_t value_;
private:
  static int StartOffset(
      int index_psc_epipe_g
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    offset += 0x500000; // to get to tm_psc_top
    offset += 0x20000; // to get to psc_common
    assert(index_psc_epipe_g < 4);
    offset += index_psc_epipe_g * 0x18; // psc_epipe_g[]
    offset += 0x810; // to get to epipe_pkt_dropcnt
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_PSC_EPIPE_PKT_DROPCNT_R_H__
