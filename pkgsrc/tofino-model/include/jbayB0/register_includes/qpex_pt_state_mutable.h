/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_QPEX_PT_STATE_MUTABLE_H__
#define __REGISTER_INCLUDES_QPEX_PT_STATE_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class QpexPtStateMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  QpexPtStateMutable(
      int chipNumber, int index_tm_pex_pipe_rspec, int index_qpex_pt_state, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_pex_pipe_rspec, index_qpex_pt_state), 4, true, write_callback, read_callback, std::string("QpexPtStateMutable")+":"+boost::lexical_cast<std::string>(index_tm_pex_pipe_rspec) + "," + boost::lexical_cast<std::string>(index_qpex_pt_state))
    {
    }
  QpexPtStateMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "QpexPtStateMutable")
    {
    }
public:





  uint8_t state0() { return state0_; }
  void state0(const uint8_t &v) { state0_=v; }





  uint8_t state1() { return state1_; }
  void state1(const uint8_t &v) { state1_=v; }





  uint8_t state2() { return state2_; }
  void state2(const uint8_t &v) { state2_=v; }





  uint8_t state3() { return state3_; }
  void state3(const uint8_t &v) { state3_=v; }





  uint8_t state4() { return state4_; }
  void state4(const uint8_t &v) { state4_=v; }





  uint8_t state5() { return state5_; }
  void state5(const uint8_t &v) { state5_=v; }





  uint8_t state6() { return state6_; }
  void state6(const uint8_t &v) { state6_=v; }





  uint8_t state7() { return state7_; }
  void state7(const uint8_t &v) { state7_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (state0_ & 0xf);
    *data |= ((state1_ & 0xf) << 4);
    *data |= ((state2_ & 0xf) << 8);
    *data |= ((state3_ & 0xf) << 12);
    *data |= ((state4_ & 0xf) << 16);
    *data |= ((state5_ & 0xf) << 20);
    *data |= ((state6_ & 0xf) << 24);
    *data |= ((state7_ & 0xf) << 28);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    state0_ = (data & 0xf);
    state1_ = ((data >> 4) & 0xf);
    state2_ = ((data >> 8) & 0xf);
    state3_ = ((data >> 12) & 0xf);
    state4_ = ((data >> 16) & 0xf);
    state5_ = ((data >> 20) & 0xf);
    state6_ = ((data >> 24) & 0xf);
    state7_ = ((data >> 28) & 0xf);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    state0_ = 0x0;
    state1_ = 0x0;
    state2_ = 0x0;
    state3_ = 0x0;
    state4_ = 0x0;
    state5_ = 0x0;
    state6_ = 0x0;
    state7_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("QpexPtStateMutable") + ":\n";
    r += indent_string + "  " + std::string("state0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state0_) ) + "\n";
    all_zeros &= (0 == state0_);
    r += indent_string + "  " + std::string("state1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state1_) ) + "\n";
    all_zeros &= (0 == state1_);
    r += indent_string + "  " + std::string("state2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state2_) ) + "\n";
    all_zeros &= (0 == state2_);
    r += indent_string + "  " + std::string("state3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state3_) ) + "\n";
    all_zeros &= (0 == state3_);
    r += indent_string + "  " + std::string("state4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state4_) ) + "\n";
    all_zeros &= (0 == state4_);
    r += indent_string + "  " + std::string("state5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state5_) ) + "\n";
    all_zeros &= (0 == state5_);
    r += indent_string + "  " + std::string("state6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state6_) ) + "\n";
    all_zeros &= (0 == state6_);
    r += indent_string + "  " + std::string("state7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state7_) ) + "\n";
    all_zeros &= (0 == state7_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("QpexPtStateMutable") + ":\n";
    r += indent_string + "  " + std::string("state0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state0_) ) + "\n";
    all_zeros &= (0 == state0_);
    r += indent_string + "  " + std::string("state1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state1_) ) + "\n";
    all_zeros &= (0 == state1_);
    r += indent_string + "  " + std::string("state2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state2_) ) + "\n";
    all_zeros &= (0 == state2_);
    r += indent_string + "  " + std::string("state3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state3_) ) + "\n";
    all_zeros &= (0 == state3_);
    r += indent_string + "  " + std::string("state4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state4_) ) + "\n";
    all_zeros &= (0 == state4_);
    r += indent_string + "  " + std::string("state5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state5_) ) + "\n";
    all_zeros &= (0 == state5_);
    r += indent_string + "  " + std::string("state6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state6_) ) + "\n";
    all_zeros &= (0 == state6_);
    r += indent_string + "  " + std::string("state7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(state7_) ) + "\n";
    all_zeros &= (0 == state7_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t state0_;
  uint8_t state1_;
  uint8_t state2_;
  uint8_t state3_;
  uint8_t state4_;
  uint8_t state5_;
  uint8_t state6_;
  uint8_t state7_;
private:
  static int StartOffset(
      int index_tm_pex_pipe_rspec, int index_qpex_pt_state
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    offset += 0x300000; // to get to tm_pex_top
    assert(index_tm_pex_pipe_rspec < 4);
    offset += index_tm_pex_pipe_rspec * 0x4000; // tm_pex_pipe_rspec[]
    offset += 0x80; // to get to pt_state
    assert(index_qpex_pt_state < 11);
    offset += index_qpex_pt_state * 0x4; // qpex_pt_state[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_QPEX_PT_STATE_MUTABLE_H__
