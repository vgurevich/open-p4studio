/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_SCH_ADVFC_CONFIG_R_MUTABLE_H__
#define __REGISTER_INCLUDES_SCH_ADVFC_CONFIG_R_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class SchAdvfcConfigRMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum TmSchPipeRspecEnum {
    kEadvfcConfig,
    kIadvfcConfig
  };
  enum TmTopRspecEnum {
    kTmSchaTop,
    kTmSchbTop
  };
public:
  SchAdvfcConfigRMutable(
      int chipNumber, TmTopRspecEnum selector_tm_top_rspec, int index_tm_sch_pipe_rspec, TmSchPipeRspecEnum selector_tm_sch_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_tm_top_rspec, index_tm_sch_pipe_rspec, selector_tm_sch_pipe_rspec), 4, true, write_callback, read_callback, std::string("SchAdvfcConfigRMutable")+":"+boost::lexical_cast<std::string>(selector_tm_top_rspec) + "," + boost::lexical_cast<std::string>(index_tm_sch_pipe_rspec) + "," + boost::lexical_cast<std::string>(selector_tm_sch_pipe_rspec))
    {
    }
  SchAdvfcConfigRMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "SchAdvfcConfigRMutable")
    {
    }
public:


  uint8_t advfc_port() { return advfc_port_; }
  void advfc_port(const uint8_t &v) { advfc_port_=v; }




  uint8_t advfc_port_filter_en() { return advfc_port_filter_en_; }
  void advfc_port_filter_en(const uint8_t &v) { advfc_port_filter_en_=v; }


  uint8_t advfc_status_clear() { return advfc_status_clear_; }
  void advfc_status_clear(const uint8_t &v) { advfc_status_clear_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (advfc_port_ & 0x7f);
    *data |= ((advfc_port_filter_en_ & 0x1) << 7);
    *data |= ((advfc_status_clear_ & 0x1) << 8);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    advfc_port_ = (data & 0x7f);
    advfc_port_filter_en_ = ((data >> 7) & 0x1);
    advfc_status_clear_ = ((data >> 8) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    advfc_port_ = 0x0;
    advfc_port_filter_en_ = 0x0;
    advfc_status_clear_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("SchAdvfcConfigRMutable") + ":\n";
    r += indent_string + "  " + std::string("advfc_port") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(advfc_port_) ) + "\n";
    all_zeros &= (0 == advfc_port_);
    r += indent_string + "  " + std::string("advfc_port_filter_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(advfc_port_filter_en_) ) + "\n";
    all_zeros &= (0 == advfc_port_filter_en_);
    r += indent_string + "  " + std::string("advfc_status_clear") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(advfc_status_clear_) ) + "\n";
    all_zeros &= (0 == advfc_status_clear_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("SchAdvfcConfigRMutable") + ":\n";
    r += indent_string + "  " + std::string("advfc_port") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(advfc_port_) ) + "\n";
    all_zeros &= (0 == advfc_port_);
    r += indent_string + "  " + std::string("advfc_port_filter_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(advfc_port_filter_en_) ) + "\n";
    all_zeros &= (0 == advfc_port_filter_en_);
    r += indent_string + "  " + std::string("advfc_status_clear") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(advfc_status_clear_) ) + "\n";
    all_zeros &= (0 == advfc_status_clear_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t advfc_port_;
  uint8_t advfc_port_filter_en_;
  uint8_t advfc_status_clear_;
private:
  static int StartOffset(
      TmTopRspecEnum selector_tm_top_rspec, int index_tm_sch_pipe_rspec, TmSchPipeRspecEnum selector_tm_sch_pipe_rspec
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    switch (selector_tm_top_rspec) {
      case kTmSchaTop:
        offset += 0x180000; // to get to tm_scha_top
        assert(index_tm_sch_pipe_rspec < 2);
        offset += index_tm_sch_pipe_rspec * 0x8000; // tm_sch_pipe_rspec[]
        switch (selector_tm_sch_pipe_rspec) {
          case kEadvfcConfig:
            offset += 0x7214; // to get to eadvfc_config
            break;
          case kIadvfcConfig:
            offset += 0x7208; // to get to iadvfc_config
            break;
          default:
            assert(0);
            break;
        }
        break;
      case kTmSchbTop:
        offset += 0x200000; // to get to tm_schb_top
        assert(index_tm_sch_pipe_rspec < 2);
        offset += index_tm_sch_pipe_rspec * 0x8000; // tm_sch_pipe_rspec[]
        switch (selector_tm_sch_pipe_rspec) {
          case kEadvfcConfig:
            offset += 0x7214; // to get to eadvfc_config
            break;
          case kIadvfcConfig:
            offset += 0x7208; // to get to iadvfc_config
            break;
          default:
            assert(0);
            break;
        }
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_SCH_ADVFC_CONFIG_R_MUTABLE_H__
