/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_SELECTOR_ALU_CTL_H__
#define __REGISTER_INCLUDES_SELECTOR_ALU_CTL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class SelectorAluCtl : public model_core::RegisterBlock<RegisterCallback> {
public:
  SelectorAluCtl(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_meter_alu_group_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_meter_alu_group_addrmap), 4, false, write_callback, read_callback, std::string("SelectorAluCtl")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_meter_alu_group_addrmap))
    {
    }
  SelectorAluCtl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "SelectorAluCtl")
    {
    }
public:


  uint8_t &sps_nonlinear_hash_enable() { return sps_nonlinear_hash_enable_; }



  uint8_t &resilient_hash_enable() { return resilient_hash_enable_; }




  uint8_t &resilient_hash_mode() { return resilient_hash_mode_; }






  uint8_t &selector_fair_hash_select() { return selector_fair_hash_select_; }


  uint8_t &selector_enable() { return selector_enable_; }



  uint8_t &selector_thread() { return selector_thread_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (sps_nonlinear_hash_enable_ & 0x1);
    *data |= ((resilient_hash_enable_ & 0x7) << 1);
    *data |= ((resilient_hash_mode_ & 0x1) << 4);
    *data |= ((selector_fair_hash_select_ & 0x3) << 5);
    *data |= ((selector_enable_ & 0x1) << 7);
    *data |= ((selector_thread_ & 0x1) << 8);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    sps_nonlinear_hash_enable_ = (data & 0x1);
    resilient_hash_enable_ = ((data >> 1) & 0x7);
    resilient_hash_mode_ = ((data >> 4) & 0x1);
    selector_fair_hash_select_ = ((data >> 5) & 0x3);
    selector_enable_ = ((data >> 7) & 0x1);
    selector_thread_ = ((data >> 8) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    sps_nonlinear_hash_enable_ = 0x0;
    resilient_hash_enable_ = 0x0;
    resilient_hash_mode_ = 0x0;
    selector_fair_hash_select_ = 0x0;
    selector_enable_ = 0x0;
    selector_thread_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("SelectorAluCtl") + ":\n";
    r += indent_string + "  " + std::string("sps_nonlinear_hash_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(sps_nonlinear_hash_enable_) ) + "\n";
    all_zeros &= (0 == sps_nonlinear_hash_enable_);
    r += indent_string + "  " + std::string("resilient_hash_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(resilient_hash_enable_) ) + "\n";
    all_zeros &= (0 == resilient_hash_enable_);
    r += indent_string + "  " + std::string("resilient_hash_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(resilient_hash_mode_) ) + "\n";
    all_zeros &= (0 == resilient_hash_mode_);
    r += indent_string + "  " + std::string("selector_fair_hash_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(selector_fair_hash_select_) ) + "\n";
    all_zeros &= (0 == selector_fair_hash_select_);
    r += indent_string + "  " + std::string("selector_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(selector_enable_) ) + "\n";
    all_zeros &= (0 == selector_enable_);
    r += indent_string + "  " + std::string("selector_thread") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(selector_thread_) ) + "\n";
    all_zeros &= (0 == selector_thread_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("SelectorAluCtl") + ":\n";
    r += indent_string + "  " + std::string("sps_nonlinear_hash_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(sps_nonlinear_hash_enable_) ) + "\n";
    all_zeros &= (0 == sps_nonlinear_hash_enable_);
    r += indent_string + "  " + std::string("resilient_hash_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(resilient_hash_enable_) ) + "\n";
    all_zeros &= (0 == resilient_hash_enable_);
    r += indent_string + "  " + std::string("resilient_hash_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(resilient_hash_mode_) ) + "\n";
    all_zeros &= (0 == resilient_hash_mode_);
    r += indent_string + "  " + std::string("selector_fair_hash_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(selector_fair_hash_select_) ) + "\n";
    all_zeros &= (0 == selector_fair_hash_select_);
    r += indent_string + "  " + std::string("selector_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(selector_enable_) ) + "\n";
    all_zeros &= (0 == selector_enable_);
    r += indent_string + "  " + std::string("selector_thread") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(selector_thread_) ) + "\n";
    all_zeros &= (0 == selector_thread_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t sps_nonlinear_hash_enable_;
  uint8_t resilient_hash_enable_;
  uint8_t resilient_hash_mode_;
  uint8_t selector_fair_hash_select_;
  uint8_t selector_enable_;
  uint8_t selector_thread_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_meter_alu_group_addrmap
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to rams
    offset += 0x10000; // to get to map_alu
    offset += 0x3000; // to get to meter_group
    assert(index_mau_meter_alu_group_addrmap < 4);
    offset += index_mau_meter_alu_group_addrmap * 0x400; // mau_meter_alu_group_addrmap[]
    offset += 0x20; // to get to selector
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_SELECTOR_ALU_CTL_H__
