/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TBUS_DMA_LOG_H__
#define __REGISTER_INCLUDES_TBUS_DMA_LOG_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class TbusDmaLog : public model_core::RegisterBlock<RegisterCallback> {
public:
  TbusDmaLog(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, false, write_callback, read_callback, std::string("TbusDmaLog"))
    {
    }
  TbusDmaLog(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "TbusDmaLog")
    {
    }
public:





  uint8_t &tx_read_statemachine() { return tx_read_statemachine_; }





  uint8_t &tx_write_statemachine() { return tx_write_statemachine_; }





  uint16_t &tx_data_credit() { return tx_data_credit_; }





  uint8_t &rx_write_statemachine() { return rx_write_statemachine_; }





  uint8_t &rx_write_data_count() { return rx_write_data_count_; }





  uint8_t &rx_req_mem_credit() { return rx_req_mem_credit_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (tx_read_statemachine_ & 0x1);
    *data |= ((tx_write_statemachine_ & 0xf) << 1);
    *data |= ((tx_data_credit_ & 0x1ff) << 5);
    *data |= ((rx_write_statemachine_ & 0x7) << 14);
    *data |= ((rx_write_data_count_ & 0x7f) << 17);
    *data |= ((rx_req_mem_credit_ & 0x7) << 24);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    tx_read_statemachine_ = (data & 0x1);
    tx_write_statemachine_ = ((data >> 1) & 0xf);
    tx_data_credit_ = ((data >> 5) & 0x1ff);
    rx_write_statemachine_ = ((data >> 14) & 0x7);
    rx_write_data_count_ = ((data >> 17) & 0x7f);
    rx_req_mem_credit_ = ((data >> 24) & 0x7);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    tx_read_statemachine_ = 0x0;
    tx_write_statemachine_ = 0x0;
    tx_data_credit_ = 0x0;
    rx_write_statemachine_ = 0x0;
    rx_write_data_count_ = 0x0;
    rx_req_mem_credit_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TbusDmaLog") + ":\n";
    r += indent_string + "  " + std::string("tx_read_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_read_statemachine_) ) + "\n";
    all_zeros &= (0 == tx_read_statemachine_);
    r += indent_string + "  " + std::string("tx_write_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_write_statemachine_) ) + "\n";
    all_zeros &= (0 == tx_write_statemachine_);
    r += indent_string + "  " + std::string("tx_data_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_data_credit_) ) + "\n";
    all_zeros &= (0 == tx_data_credit_);
    r += indent_string + "  " + std::string("rx_write_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx_write_statemachine_) ) + "\n";
    all_zeros &= (0 == rx_write_statemachine_);
    r += indent_string + "  " + std::string("rx_write_data_count") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx_write_data_count_) ) + "\n";
    all_zeros &= (0 == rx_write_data_count_);
    r += indent_string + "  " + std::string("rx_req_mem_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx_req_mem_credit_) ) + "\n";
    all_zeros &= (0 == rx_req_mem_credit_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TbusDmaLog") + ":\n";
    r += indent_string + "  " + std::string("tx_read_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_read_statemachine_) ) + "\n";
    all_zeros &= (0 == tx_read_statemachine_);
    r += indent_string + "  " + std::string("tx_write_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_write_statemachine_) ) + "\n";
    all_zeros &= (0 == tx_write_statemachine_);
    r += indent_string + "  " + std::string("tx_data_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_data_credit_) ) + "\n";
    all_zeros &= (0 == tx_data_credit_);
    r += indent_string + "  " + std::string("rx_write_statemachine") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx_write_statemachine_) ) + "\n";
    all_zeros &= (0 == rx_write_statemachine_);
    r += indent_string + "  " + std::string("rx_write_data_count") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx_write_data_count_) ) + "\n";
    all_zeros &= (0 == rx_write_data_count_);
    r += indent_string + "  " + std::string("rx_req_mem_credit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx_req_mem_credit_) ) + "\n";
    all_zeros &= (0 == rx_req_mem_credit_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t tx_read_statemachine_;
  uint8_t tx_write_statemachine_;
  uint16_t tx_data_credit_;
  uint8_t rx_write_statemachine_;
  uint8_t rx_write_data_count_;
  uint8_t rx_req_mem_credit_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x300000; // to get to tbc
    offset += 0xac; // to get to dma_log
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_TBUS_DMA_LOG_H__
