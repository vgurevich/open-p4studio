/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TBUS_FM_DR_RD_ERR_LOG_H__
#define __REGISTER_INCLUDES_TBUS_FM_DR_RD_ERR_LOG_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class TbusFmDrRdErrLog : public model_core::RegisterBlock<RegisterCallback> {
public:
  TbusFmDrRdErrLog(
      int chipNumber, int index_tbus_fm_dr_rd_err_log, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tbus_fm_dr_rd_err_log), 4, false, write_callback, read_callback, std::string("TbusFmDrRdErrLog")+":"+boost::lexical_cast<std::string>(index_tbus_fm_dr_rd_err_log))
    {
    }
  TbusFmDrRdErrLog(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "TbusFmDrRdErrLog")
    {
    }
public:










  uint8_t &fm_dr_rd_err_status() { return fm_dr_rd_err_status_; }





  uint32_t &fm_dr_rd_err_head_ptr() { return fm_dr_rd_err_head_ptr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (fm_dr_rd_err_status_ & 0x7);
    *data |= ((fm_dr_rd_err_head_ptr_ & 0x3ffff) << 3);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    fm_dr_rd_err_status_ = (data & 0x7);
    fm_dr_rd_err_head_ptr_ = ((data >> 3) & 0x3ffff);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    fm_dr_rd_err_status_ = 0x0;
    fm_dr_rd_err_head_ptr_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TbusFmDrRdErrLog") + ":\n";
    r += indent_string + "  " + std::string("fm_dr_rd_err_status") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_rd_err_status_) ) + "\n";
    all_zeros &= (0 == fm_dr_rd_err_status_);
    r += indent_string + "  " + std::string("fm_dr_rd_err_head_ptr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_rd_err_head_ptr_) ) + "\n";
    all_zeros &= (0 == fm_dr_rd_err_head_ptr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TbusFmDrRdErrLog") + ":\n";
    r += indent_string + "  " + std::string("fm_dr_rd_err_status") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_rd_err_status_) ) + "\n";
    all_zeros &= (0 == fm_dr_rd_err_status_);
    r += indent_string + "  " + std::string("fm_dr_rd_err_head_ptr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fm_dr_rd_err_head_ptr_) ) + "\n";
    all_zeros &= (0 == fm_dr_rd_err_head_ptr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t fm_dr_rd_err_status_;
  uint32_t fm_dr_rd_err_head_ptr_;
private:
  static int StartOffset(
      int index_tbus_fm_dr_rd_err_log
      ) {
    int offset=0;
    offset += 0x300000; // to get to tbc
    offset += 0x80; // to get to fm_dr_rd_err_log
    assert(index_tbus_fm_dr_rd_err_log < 8);
    offset += index_tbus_fm_dr_rd_err_log * 0x4; // tbus_fm_dr_rd_err_log[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_TBUS_FM_DR_RD_ERR_LOG_H__
