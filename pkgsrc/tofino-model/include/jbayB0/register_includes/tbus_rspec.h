/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TBUS_RSPEC_H__
#define __REGISTER_INCLUDES_TBUS_RSPEC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "tbus_controller_mbe_log.h"
#include "tbus_controller_sbe_log.h"
#include "tbus_credit_ctrl.h"
#include "tbus_ctrl.h"
#include "tbus_dma_log.h"
#include "tbus_flush.h"
#include "tbus_fm_dr_rd_err_log.h"
#include "tbus_freeze_en0.h"
#include "tbus_freeze_en1.h"
#include "tbus_freeze_en2.h"
#include "tbus_host_slv_credit.h"
#include "tbus_int_en0_0.h"
#include "tbus_int_en0_1.h"
#include "tbus_int_en1_0.h"
#include "tbus_int_en1_1.h"
#include "tbus_int_en2_0.h"
#include "tbus_int_en2_1.h"
#include "tbus_int_inj.h"
#include "tbus_int_stat0.h"
#include "tbus_int_stat1.h"
#include "tbus_int_stat2.h"
#include "tbus_link_down.h"
#include "tbus_mst_ctrl_log.h"
#include "tbus_ts.h"
#include "tbus_tx_dr_rd_err_log.h"

namespace jbayB0 {
  namespace register_classes {

class TbusRspec : public model_core::RegisterBlock<RegisterCallback> {
public:
  TbusRspec(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 184, false, write_callback, read_callback, std::string("TbusRspec"))
    {
    }
  TbusRspec(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "TbusRspec")
    {
    }
public:





  TbusCtrl &ctrl() { return ctrl_; }





  TbusFlush &flush() { return flush_; }





  TbusLinkDown &link_down() { return link_down_; }





  TbusTs &ts() { return ts_; }





  TbusIntStat0 &intr_stat0() { return intr_stat0_; }





  TbusIntStat1 &intr_stat1() { return intr_stat1_; }





  TbusIntStat2 &intr_stat2() { return intr_stat2_; }





  TbusIntEn0_0 &intr_en0_0() { return intr_en0_0_; }





  TbusIntEn0_1 &intr_en0_1() { return intr_en0_1_; }





  TbusIntEn1_0 &intr_en1_0() { return intr_en1_0_; }





  TbusIntEn1_1 &intr_en1_1() { return intr_en1_1_; }





  TbusIntEn2_0 &intr_en2_0() { return intr_en2_0_; }





  TbusIntEn2_1 &intr_en2_1() { return intr_en2_1_; }





  TbusFreezeEn0 &freeze_en0() { return freeze_en0_; }





  TbusFreezeEn1 &freeze_en1() { return freeze_en1_; }





  TbusFreezeEn2 &freeze_en2() { return freeze_en2_; }





  TbusIntInj &intr_inj() { return intr_inj_; }







  TbusTxDrRdErrLog &tx_dr_rd_err_log(int j0) { return tx_dr_rd_err_log_[j0]; }







  TbusFmDrRdErrLog &fm_dr_rd_err_log(int j0) { return fm_dr_rd_err_log_[j0]; }





  TbusControllerMbeLog &controller_mbe_log() { return controller_mbe_log_; }





  TbusControllerSbeLog &controller_sbe_log() { return controller_sbe_log_; }





  TbusHostSlvCredit &host_slave_credit() { return host_slave_credit_; }





  TbusDmaLog &dma_log() { return dma_log_; }





  TbusMstCtrlLog &mst_ctrl_log() { return mst_ctrl_log_; }





  TbusCreditCtrl &credit_ctrl() { return credit_ctrl_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      ctrl_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      flush_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      link_down_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      ts_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      intr_stat0_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      intr_stat1_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      intr_stat2_.read( offset, data );
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      if (read_callback_) read_callback_();
      intr_en0_0_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      intr_en0_1_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      intr_en1_0_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      intr_en1_1_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      intr_en2_0_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      intr_en2_1_.read( offset, data );
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      if (read_callback_) read_callback_();
      freeze_en0_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      freeze_en1_.read( offset, data );
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      if (read_callback_) read_callback_();
      freeze_en2_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      intr_inj_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x70) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tx_dr_rd_err_log_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xa0) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      fm_dr_rd_err_log_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      if (read_callback_) read_callback_();
      controller_mbe_log_.read( offset, data );
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      if (read_callback_) read_callback_();
      controller_sbe_log_.read( offset, data );
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      if (read_callback_) read_callback_();
      host_slave_credit_.read( offset, data );
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      if (read_callback_) read_callback_();
      dma_log_.read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      if (read_callback_) read_callback_();
      mst_ctrl_log_.read( offset, data );
    }
    else if (offset >= 0xb4 && offset < 0xb8) {
      offset -= 0xb4;
      if (read_callback_) read_callback_();
      credit_ctrl_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      flush_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      link_down_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      ts_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      intr_stat0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      intr_stat1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      intr_stat2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      intr_en0_0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      intr_en0_1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      intr_en1_0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      intr_en1_1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      intr_en2_0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      intr_en2_1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      freeze_en0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      freeze_en1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      freeze_en2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      intr_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x70) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tx_dr_rd_err_log_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xa0) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      fm_dr_rd_err_log_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      controller_mbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      controller_sbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      host_slave_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      dma_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      mst_ctrl_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb4 && offset < 0xb8) {
      offset -= 0xb4;
      credit_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    ctrl_.reset();
    flush_.reset();
    link_down_.reset();
    ts_.reset();
    intr_stat0_.reset();
    intr_stat1_.reset();
    intr_stat2_.reset();
    intr_en0_0_.reset();
    intr_en0_1_.reset();
    intr_en1_0_.reset();
    intr_en1_1_.reset();
    intr_en2_0_.reset();
    intr_en2_1_.reset();
    freeze_en0_.reset();
    freeze_en1_.reset();
    freeze_en2_.reset();
    intr_inj_.reset();
    for (auto &f0 : tx_dr_rd_err_log_) {
      f0.reset();
    }
    for (auto &f0 : fm_dr_rd_err_log_) {
      f0.reset();
    }
    controller_mbe_log_.reset();
    controller_sbe_log_.reset();
    host_slave_credit_.reset();
    dma_log_.reset();
    mst_ctrl_log_.reset();
    credit_ctrl_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += flush_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += link_down_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += ts_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += intr_stat0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += intr_stat1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += intr_stat2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      r += intr_en0_0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += intr_en0_1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += intr_en1_0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += intr_en1_1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += intr_en2_0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      r += intr_en2_1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      r += freeze_en0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      r += freeze_en1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      r += freeze_en2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      r += intr_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x70) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tx_dr_rd_err_log_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xa0) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += fm_dr_rd_err_log_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      r += controller_mbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      r += controller_sbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      r += host_slave_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      r += dma_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      r += mst_ctrl_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb4 && offset < 0xb8) {
      offset -= 0xb4;
      r += credit_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += ctrl_.to_string(print_zeros,indent_string) ;
    r += flush_.to_string(print_zeros,indent_string) ;
    r += link_down_.to_string(print_zeros,indent_string) ;
    r += ts_.to_string(print_zeros,indent_string) ;
    r += intr_stat0_.to_string(print_zeros,indent_string) ;
    r += intr_stat1_.to_string(print_zeros,indent_string) ;
    r += intr_stat2_.to_string(print_zeros,indent_string) ;
    r += intr_en0_0_.to_string(print_zeros,indent_string) ;
    r += intr_en0_1_.to_string(print_zeros,indent_string) ;
    r += intr_en1_0_.to_string(print_zeros,indent_string) ;
    r += intr_en1_1_.to_string(print_zeros,indent_string) ;
    r += intr_en2_0_.to_string(print_zeros,indent_string) ;
    r += intr_en2_1_.to_string(print_zeros,indent_string) ;
    r += freeze_en0_.to_string(print_zeros,indent_string) ;
    r += freeze_en1_.to_string(print_zeros,indent_string) ;
    r += freeze_en2_.to_string(print_zeros,indent_string) ;
    r += intr_inj_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += tx_dr_rd_err_log_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += fm_dr_rd_err_log_[a0].to_string(print_zeros,indent_string) ;
    }
    r += controller_mbe_log_.to_string(print_zeros,indent_string) ;
    r += controller_sbe_log_.to_string(print_zeros,indent_string) ;
    r += host_slave_credit_.to_string(print_zeros,indent_string) ;
    r += dma_log_.to_string(print_zeros,indent_string) ;
    r += mst_ctrl_log_.to_string(print_zeros,indent_string) ;
    r += credit_ctrl_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  TbusCtrl ctrl_;
  TbusFlush flush_;
  TbusLinkDown link_down_;
  TbusTs ts_;
  TbusIntStat0 intr_stat0_;
  TbusIntStat1 intr_stat1_;
  TbusIntStat2 intr_stat2_;
  TbusIntEn0_0 intr_en0_0_;
  TbusIntEn0_1 intr_en0_1_;
  TbusIntEn1_0 intr_en1_0_;
  TbusIntEn1_1 intr_en1_1_;
  TbusIntEn2_0 intr_en2_0_;
  TbusIntEn2_1 intr_en2_1_;
  TbusFreezeEn0 freeze_en0_;
  TbusFreezeEn1 freeze_en1_;
  TbusFreezeEn2 freeze_en2_;
  TbusIntInj intr_inj_;
  std::array< TbusTxDrRdErrLog, 4 > tx_dr_rd_err_log_;
  std::array< TbusFmDrRdErrLog, 8 > fm_dr_rd_err_log_;
  TbusControllerMbeLog controller_mbe_log_;
  TbusControllerSbeLog controller_sbe_log_;
  TbusHostSlvCredit host_slave_credit_;
  TbusDmaLog dma_log_;
  TbusMstCtrlLog mst_ctrl_log_;
  TbusCreditCtrl credit_ctrl_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x300000; // to get to tbc
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_TBUS_RSPEC_H__
