/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TCAM_MODE_H__
#define __REGISTER_INCLUDES_TCAM_MODE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class TcamMode : public model_core::RegisterBlock<RegisterCallback> {
public:
  TcamMode(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_tcam_column_addrmap, int index_tcam_mode, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_tcam_column_addrmap, index_tcam_mode), 4, false, write_callback, read_callback, std::string("TcamMode")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_tcam_column_addrmap) + "," + boost::lexical_cast<std::string>(index_tcam_mode))
    {
    }
  TcamMode(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "TcamMode")
    {
    }
public:
  uint16_t &tcam_data_dirtcam_mode() { return tcam_data_dirtcam_mode_; }



  uint8_t &tcam_vbit_dirtcam_mode() { return tcam_vbit_dirtcam_mode_; }



  uint8_t &tcam_data1_select() { return tcam_data1_select_; }




  uint8_t &tcam_chain_out_enable() { return tcam_chain_out_enable_; }
  uint8_t &tcam_ingress() { return tcam_ingress_; }
  uint8_t &tcam_egress() { return tcam_egress_; }




  uint8_t &tcam_match_output_enable() { return tcam_match_output_enable_; }





  uint8_t &tcam_vpn() { return tcam_vpn_; }






  uint8_t &tcam_logical_table() { return tcam_logical_table_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (tcam_data_dirtcam_mode_ & 0x3ff);
    *data |= ((tcam_vbit_dirtcam_mode_ & 0x3) << 10);
    *data |= ((tcam_data1_select_ & 0x1) << 12);
    *data |= ((tcam_chain_out_enable_ & 0x1) << 13);
    *data |= ((tcam_ingress_ & 0x1) << 14);
    *data |= ((tcam_egress_ & 0x1) << 15);
    *data |= ((tcam_match_output_enable_ & 0x1) << 16);
    *data |= ((tcam_vpn_ & 0x3f) << 17);
    *data |= ((tcam_logical_table_ & 0xf) << 23);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    tcam_data_dirtcam_mode_ = (data & 0x3ff);
    tcam_vbit_dirtcam_mode_ = ((data >> 10) & 0x3);
    tcam_data1_select_ = ((data >> 12) & 0x1);
    tcam_chain_out_enable_ = ((data >> 13) & 0x1);
    tcam_ingress_ = ((data >> 14) & 0x1);
    tcam_egress_ = ((data >> 15) & 0x1);
    tcam_match_output_enable_ = ((data >> 16) & 0x1);
    tcam_vpn_ = ((data >> 17) & 0x3f);
    tcam_logical_table_ = ((data >> 23) & 0xf);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    tcam_data_dirtcam_mode_ = 0x0;
    tcam_vbit_dirtcam_mode_ = 0x0;
    tcam_data1_select_ = 0x0;
    tcam_chain_out_enable_ = 0x0;
    tcam_ingress_ = 0x0;
    tcam_egress_ = 0x0;
    tcam_match_output_enable_ = 0x0;
    tcam_vpn_ = 0x0;
    tcam_logical_table_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TcamMode") + ":\n";
    r += indent_string + "  " + std::string("tcam_data_dirtcam_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_data_dirtcam_mode_) ) + "\n";
    all_zeros &= (0 == tcam_data_dirtcam_mode_);
    r += indent_string + "  " + std::string("tcam_vbit_dirtcam_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_vbit_dirtcam_mode_) ) + "\n";
    all_zeros &= (0 == tcam_vbit_dirtcam_mode_);
    r += indent_string + "  " + std::string("tcam_data1_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_data1_select_) ) + "\n";
    all_zeros &= (0 == tcam_data1_select_);
    r += indent_string + "  " + std::string("tcam_chain_out_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_chain_out_enable_) ) + "\n";
    all_zeros &= (0 == tcam_chain_out_enable_);
    r += indent_string + "  " + std::string("tcam_ingress") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_ingress_) ) + "\n";
    all_zeros &= (0 == tcam_ingress_);
    r += indent_string + "  " + std::string("tcam_egress") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_egress_) ) + "\n";
    all_zeros &= (0 == tcam_egress_);
    r += indent_string + "  " + std::string("tcam_match_output_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_match_output_enable_) ) + "\n";
    all_zeros &= (0 == tcam_match_output_enable_);
    r += indent_string + "  " + std::string("tcam_vpn") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_vpn_) ) + "\n";
    all_zeros &= (0 == tcam_vpn_);
    r += indent_string + "  " + std::string("tcam_logical_table") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_logical_table_) ) + "\n";
    all_zeros &= (0 == tcam_logical_table_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TcamMode") + ":\n";
    r += indent_string + "  " + std::string("tcam_data_dirtcam_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_data_dirtcam_mode_) ) + "\n";
    all_zeros &= (0 == tcam_data_dirtcam_mode_);
    r += indent_string + "  " + std::string("tcam_vbit_dirtcam_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_vbit_dirtcam_mode_) ) + "\n";
    all_zeros &= (0 == tcam_vbit_dirtcam_mode_);
    r += indent_string + "  " + std::string("tcam_data1_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_data1_select_) ) + "\n";
    all_zeros &= (0 == tcam_data1_select_);
    r += indent_string + "  " + std::string("tcam_chain_out_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_chain_out_enable_) ) + "\n";
    all_zeros &= (0 == tcam_chain_out_enable_);
    r += indent_string + "  " + std::string("tcam_ingress") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_ingress_) ) + "\n";
    all_zeros &= (0 == tcam_ingress_);
    r += indent_string + "  " + std::string("tcam_egress") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_egress_) ) + "\n";
    all_zeros &= (0 == tcam_egress_);
    r += indent_string + "  " + std::string("tcam_match_output_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_match_output_enable_) ) + "\n";
    all_zeros &= (0 == tcam_match_output_enable_);
    r += indent_string + "  " + std::string("tcam_vpn") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_vpn_) ) + "\n";
    all_zeros &= (0 == tcam_vpn_);
    r += indent_string + "  " + std::string("tcam_logical_table") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tcam_logical_table_) ) + "\n";
    all_zeros &= (0 == tcam_logical_table_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint16_t tcam_data_dirtcam_mode_;
  uint8_t tcam_vbit_dirtcam_mode_;
  uint8_t tcam_data1_select_;
  uint8_t tcam_chain_out_enable_;
  uint8_t tcam_ingress_;
  uint8_t tcam_egress_;
  uint8_t tcam_match_output_enable_;
  uint8_t tcam_vpn_;
  uint8_t tcam_logical_table_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_tcam_column_addrmap, int index_tcam_mode
      ) {
    int offset=0;
    offset += 0x4000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x1000000; // pipe_addrmap[]
    assert(index_mau_addrmap < 20);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x40800; // to get to tcams
    offset += 0x400; // to get to col
    assert(index_mau_tcam_column_addrmap < 2);
    offset += index_mau_tcam_column_addrmap * 0x100; // mau_tcam_column_addrmap[]
    offset += 0xc0; // to get to tcam_mode
    assert(index_tcam_mode < 16);
    offset += index_tcam_mode * 0x4; // tcam_mode[]
    return offset;
  }

};
















  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_TCAM_MODE_H__
