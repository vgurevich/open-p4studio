/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_PEX_PIPE_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_TM_PEX_PIPE_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "cfg_ct_timer_mutable.h"
#include "pex_cnt_mutable.h"
#include "pex_debug_register_mutable.h"
#include "pex_epb_credit_probe_mutable.h"
#include "pex_eport_tx_cnt_mutable.h"
#include "pex_pfc_map_table_mutable.h"
#include "pex_tx_cnt_timer_mutable.h"
#include "qpex_epb_cred_cnt_mutable.h"
#include "qpex_pipe_ctrl_mutable.h"
#include "qpex_port_tdm_enb_map_mutable.h"
#include "qpex_pt_gap_wm_mutable.h"
#include "qpex_pt_state_mutable.h"
#include "qpex_q_empty_mutable.h"
#include "tm_pex_pipe_rspec_debug_bus_ctrl_mutable.h"
#include "tm_pex_pipe_rspec_discard_ph_fifo0_mbe_err_log_mutable.h"
#include "tm_pex_pipe_rspec_discard_ph_fifo0_sbe_err_log_mutable.h"
#include "tm_pex_pipe_rspec_discard_ph_fifo1_mbe_err_log_mutable.h"
#include "tm_pex_pipe_rspec_discard_ph_fifo1_sbe_err_log_mutable.h"
#include "tm_pex_pipe_rspec_dq_meta_fifo_mbe_err_log_mutable.h"
#include "tm_pex_pipe_rspec_dq_meta_fifo_sbe_err_log_mutable.h"
#include "tm_pex_pipe_rspec_dq_ph_fifo_mbe_err_log_mutable.h"
#include "tm_pex_pipe_rspec_dq_ph_fifo_sbe_err_log_mutable.h"
#include "tm_pex_pipe_rspec_ecc_mutable.h"
#include "tm_pex_pipe_rspec_intr_mutable.h"
#include "tm_pex_pipe_rspec_linkmem_mbe_err_log_mutable.h"
#include "tm_pex_pipe_rspec_linkmem_sbe_err_log_mutable.h"
#include "tm_pex_pipe_rspec_ph_afifo_mbe_err_log_mutable.h"
#include "tm_pex_pipe_rspec_ph_afifo_sbe_err_log_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class TmPexPipeRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmPexPipeRspecMutable(
      int chipNumber, int index_tm_pex_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_pex_pipe_rspec), 16384, true, write_callback, read_callback, std::string("TmPexPipeRspecMutable")+":"+boost::lexical_cast<std::string>(index_tm_pex_pipe_rspec))
    {
    }
  TmPexPipeRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "TmPexPipeRspecMutable")
    {
    }
public:





  QpexPipeCtrlMutable &pipe_ctrl() { return pipe_ctrl_; }








  TmPexPipeRspecEccMutable &ecc() { return ecc_; }





  TmPexPipeRspecLinkmemMbeErrLogMutable &linkmem_mbe_err_log() { return linkmem_mbe_err_log_; }





  TmPexPipeRspecLinkmemSbeErrLogMutable &linkmem_sbe_err_log() { return linkmem_sbe_err_log_; }





  TmPexPipeRspecDqPhFifoSbeErrLogMutable &dq_ph_fifo_sbe_err_log() { return dq_ph_fifo_sbe_err_log_; }





  TmPexPipeRspecDqPhFifoMbeErrLogMutable &dq_ph_fifo_mbe_err_log() { return dq_ph_fifo_mbe_err_log_; }





  TmPexPipeRspecDqMetaFifoSbeErrLogMutable &dq_meta_fifo_sbe_err_log() { return dq_meta_fifo_sbe_err_log_; }





  TmPexPipeRspecDqMetaFifoMbeErrLogMutable &dq_meta_fifo_mbe_err_log() { return dq_meta_fifo_mbe_err_log_; }





  TmPexPipeRspecPhAfifoSbeErrLogMutable &ph_afifo_sbe_err_log() { return ph_afifo_sbe_err_log_; }





  TmPexPipeRspecPhAfifoMbeErrLogMutable &ph_afifo_mbe_err_log() { return ph_afifo_mbe_err_log_; }





  TmPexPipeRspecDiscardPhFifo0SbeErrLogMutable &discard_ph_fifo0_sbe_err_log() { return discard_ph_fifo0_sbe_err_log_; }





  TmPexPipeRspecDiscardPhFifo0MbeErrLogMutable &discard_ph_fifo0_mbe_err_log() { return discard_ph_fifo0_mbe_err_log_; }





  TmPexPipeRspecDiscardPhFifo1SbeErrLogMutable &discard_ph_fifo1_sbe_err_log() { return discard_ph_fifo1_sbe_err_log_; }





  TmPexPipeRspecDiscardPhFifo1MbeErrLogMutable &discard_ph_fifo1_mbe_err_log() { return discard_ph_fifo1_mbe_err_log_; }






  QpexPortTdmEnbMapMutable &port_tdm_enb_map() { return port_tdm_enb_map_; }







  QpexPtStateMutable &pt_state(int j0) { return pt_state_[j0]; }







  QpexEpbCredCntMutable &pt_epb_cred(int j0) { return pt_epb_cred_[j0]; }







  QpexQEmptyMutable &q_empty(int j0) { return q_empty_[j0]; }







  QpexPtGapWmMutable &pt_gap_wm(int j0) { return pt_gap_wm_[j0]; }





  CfgCtTimerMutable &cfg_ct_timer() { return cfg_ct_timer_; }








  PexPfcMapTableMutable &pex_pfc_map_table(int j0) { return pex_pfc_map_table_[j0]; }








  PexEportTxCntMutable &pex_eport_tx_cnt(int j0) { return pex_eport_tx_cnt_[j0]; }





  PexDebugRegisterMutable &pex_debug_register() { return pex_debug_register_; }






  PexTxCntTimerMutable &pex_tx_cnt_timer() { return pex_tx_cnt_timer_; }






  PexEpbCreditProbeMutable &pex_epb_credit_probe() { return pex_epb_credit_probe_; }





  PexCntMutable &tot_byte_cnt() { return tot_byte_cnt_; }





  PexCntMutable &tot_pkt_cnt() { return tot_pkt_cnt_; }





  PexCntMutable &dis_cell_cnt() { return dis_cell_cnt_; }





  TmPexPipeRspecDebugBusCtrlMutable &debug_bus_ctrl() { return debug_bus_ctrl_; }
  TmPexPipeRspecIntrMutable &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      pipe_ctrl_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      ecc_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      linkmem_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      linkmem_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      dq_ph_fifo_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      dq_ph_fifo_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      if (read_callback_) read_callback_();
      dq_meta_fifo_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      dq_meta_fifo_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      if (read_callback_) read_callback_();
      ph_afifo_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      ph_afifo_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      if (read_callback_) read_callback_();
      discard_ph_fifo0_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      discard_ph_fifo0_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      if (read_callback_) read_callback_();
      discard_ph_fifo1_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      discard_ph_fifo1_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x7c) {
      offset -= 0x70;
      if (read_callback_) read_callback_();
      port_tdm_enb_map_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xac) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pt_state_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x148) {
      offset -= 0x100;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      pt_epb_cred_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x1e0) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      q_empty_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x320) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pt_gap_wm_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x320 && offset < 0x324) {
      offset -= 0x320;
      if (read_callback_) read_callback_();
      cfg_ct_timer_.read( offset, data );
    }
    else if (offset >= 0x1000 && offset < 0x1900) {
      offset -= 0x1000;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pex_pfc_map_table_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1c00 && offset < 0x1e40) {
      offset -= 0x1c00;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      pex_eport_tx_cnt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1e40 && offset < 0x1e44) {
      offset -= 0x1e40;
      if (read_callback_) read_callback_();
      pex_debug_register_.read( offset, data );
    }
    else if (offset >= 0x1e48 && offset < 0x1e50) {
      offset -= 0x1e48;
      if (read_callback_) read_callback_();
      pex_tx_cnt_timer_.read( offset, data );
    }
    else if (offset >= 0x1e50 && offset < 0x1e54) {
      offset -= 0x1e50;
      if (read_callback_) read_callback_();
      pex_epb_credit_probe_.read( offset, data );
    }
    else if (offset >= 0x1e58 && offset < 0x1e60) {
      offset -= 0x1e58;
      if (read_callback_) read_callback_();
      tot_byte_cnt_.read( offset, data );
    }
    else if (offset >= 0x1e60 && offset < 0x1e68) {
      offset -= 0x1e60;
      if (read_callback_) read_callback_();
      tot_pkt_cnt_.read( offset, data );
    }
    else if (offset >= 0x1e68 && offset < 0x1e70) {
      offset -= 0x1e68;
      if (read_callback_) read_callback_();
      dis_cell_cnt_.read( offset, data );
    }
    else if (offset >= 0x1e74 && offset < 0x1e78) {
      offset -= 0x1e74;
      if (read_callback_) read_callback_();
      debug_bus_ctrl_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      pipe_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      linkmem_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      linkmem_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      dq_ph_fifo_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      dq_ph_fifo_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      dq_meta_fifo_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      dq_meta_fifo_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      ph_afifo_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      ph_afifo_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      discard_ph_fifo0_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      discard_ph_fifo0_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      discard_ph_fifo1_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      discard_ph_fifo1_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x7c) {
      offset -= 0x70;
      port_tdm_enb_map_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xac) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pt_state_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x148) {
      offset -= 0x100;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      pt_epb_cred_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x1e0) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      q_empty_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x320) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pt_gap_wm_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x320 && offset < 0x324) {
      offset -= 0x320;
      cfg_ct_timer_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1000 && offset < 0x1900) {
      offset -= 0x1000;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pex_pfc_map_table_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c00 && offset < 0x1e40) {
      offset -= 0x1c00;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      pex_eport_tx_cnt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e40 && offset < 0x1e44) {
      offset -= 0x1e40;
      pex_debug_register_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e48 && offset < 0x1e50) {
      offset -= 0x1e48;
      pex_tx_cnt_timer_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e50 && offset < 0x1e54) {
      offset -= 0x1e50;
      pex_epb_credit_probe_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e58 && offset < 0x1e60) {
      offset -= 0x1e58;
      tot_byte_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e60 && offset < 0x1e68) {
      offset -= 0x1e60;
      tot_pkt_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e68 && offset < 0x1e70) {
      offset -= 0x1e68;
      dis_cell_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e74 && offset < 0x1e78) {
      offset -= 0x1e74;
      debug_bus_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    pipe_ctrl_.reset();
    ecc_.reset();
    linkmem_mbe_err_log_.reset();
    linkmem_sbe_err_log_.reset();
    dq_ph_fifo_sbe_err_log_.reset();
    dq_ph_fifo_mbe_err_log_.reset();
    dq_meta_fifo_sbe_err_log_.reset();
    dq_meta_fifo_mbe_err_log_.reset();
    ph_afifo_sbe_err_log_.reset();
    ph_afifo_mbe_err_log_.reset();
    discard_ph_fifo0_sbe_err_log_.reset();
    discard_ph_fifo0_mbe_err_log_.reset();
    discard_ph_fifo1_sbe_err_log_.reset();
    discard_ph_fifo1_mbe_err_log_.reset();
    port_tdm_enb_map_.reset();
    for (auto &f0 : pt_state_) {
      f0.reset();
    }
    for (auto &f0 : pt_epb_cred_) {
      f0.reset();
    }
    for (auto &f0 : q_empty_) {
      f0.reset();
    }
    for (auto &f0 : pt_gap_wm_) {
      f0.reset();
    }
    cfg_ct_timer_.reset();
    for (auto &f0 : pex_pfc_map_table_) {
      f0.reset();
    }
    for (auto &f0 : pex_eport_tx_cnt_) {
      f0.reset();
    }
    pex_debug_register_.reset();
    pex_tx_cnt_timer_.reset();
    pex_epb_credit_probe_.reset();
    tot_byte_cnt_.reset();
    tot_pkt_cnt_.reset();
    dis_cell_cnt_.reset();
    debug_bus_ctrl_.reset();
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += pipe_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += linkmem_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += linkmem_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += dq_ph_fifo_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      r += dq_ph_fifo_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      r += dq_meta_fifo_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      r += dq_meta_fifo_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      r += ph_afifo_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      r += ph_afifo_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      r += discard_ph_fifo0_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      r += discard_ph_fifo0_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      r += discard_ph_fifo1_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      r += discard_ph_fifo1_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x7c) {
      offset -= 0x70;
      r += port_tdm_enb_map_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xac) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pt_state_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x148) {
      offset -= 0x100;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += pt_epb_cred_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x1e0) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += q_empty_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x320) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pt_gap_wm_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x320 && offset < 0x324) {
      offset -= 0x320;
      r += cfg_ct_timer_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1000 && offset < 0x1900) {
      offset -= 0x1000;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pex_pfc_map_table_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c00 && offset < 0x1e40) {
      offset -= 0x1c00;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += pex_eport_tx_cnt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e40 && offset < 0x1e44) {
      offset -= 0x1e40;
      r += pex_debug_register_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e48 && offset < 0x1e50) {
      offset -= 0x1e48;
      r += pex_tx_cnt_timer_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e50 && offset < 0x1e54) {
      offset -= 0x1e50;
      r += pex_epb_credit_probe_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e58 && offset < 0x1e60) {
      offset -= 0x1e58;
      r += tot_byte_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e60 && offset < 0x1e68) {
      offset -= 0x1e60;
      r += tot_pkt_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e68 && offset < 0x1e70) {
      offset -= 0x1e68;
      r += dis_cell_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e74 && offset < 0x1e78) {
      offset -= 0x1e74;
      r += debug_bus_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += pipe_ctrl_.to_string(print_zeros,indent_string) ;
    r += ecc_.to_string(print_zeros,indent_string) ;
    r += linkmem_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += linkmem_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += dq_ph_fifo_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += dq_ph_fifo_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += dq_meta_fifo_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += dq_meta_fifo_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += ph_afifo_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += ph_afifo_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += discard_ph_fifo0_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += discard_ph_fifo0_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += discard_ph_fifo1_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += discard_ph_fifo1_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += port_tdm_enb_map_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<11;++a0) {
      r += pt_state_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<9;++a0) {
      r += pt_epb_cred_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<24;++a0) {
      r += q_empty_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<72;++a0) {
      r += pt_gap_wm_[a0].to_string(print_zeros,indent_string) ;
    }
    r += cfg_ct_timer_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<576;++a0) {
      r += pex_pfc_map_table_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<72;++a0) {
      r += pex_eport_tx_cnt_[a0].to_string(print_zeros,indent_string) ;
    }
    r += pex_debug_register_.to_string(print_zeros,indent_string) ;
    r += pex_tx_cnt_timer_.to_string(print_zeros,indent_string) ;
    r += pex_epb_credit_probe_.to_string(print_zeros,indent_string) ;
    r += tot_byte_cnt_.to_string(print_zeros,indent_string) ;
    r += tot_pkt_cnt_.to_string(print_zeros,indent_string) ;
    r += dis_cell_cnt_.to_string(print_zeros,indent_string) ;
    r += debug_bus_ctrl_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  QpexPipeCtrlMutable pipe_ctrl_;
  TmPexPipeRspecEccMutable ecc_;
  TmPexPipeRspecLinkmemMbeErrLogMutable linkmem_mbe_err_log_;
  TmPexPipeRspecLinkmemSbeErrLogMutable linkmem_sbe_err_log_;
  TmPexPipeRspecDqPhFifoSbeErrLogMutable dq_ph_fifo_sbe_err_log_;
  TmPexPipeRspecDqPhFifoMbeErrLogMutable dq_ph_fifo_mbe_err_log_;
  TmPexPipeRspecDqMetaFifoSbeErrLogMutable dq_meta_fifo_sbe_err_log_;
  TmPexPipeRspecDqMetaFifoMbeErrLogMutable dq_meta_fifo_mbe_err_log_;
  TmPexPipeRspecPhAfifoSbeErrLogMutable ph_afifo_sbe_err_log_;
  TmPexPipeRspecPhAfifoMbeErrLogMutable ph_afifo_mbe_err_log_;
  TmPexPipeRspecDiscardPhFifo0SbeErrLogMutable discard_ph_fifo0_sbe_err_log_;
  TmPexPipeRspecDiscardPhFifo0MbeErrLogMutable discard_ph_fifo0_mbe_err_log_;
  TmPexPipeRspecDiscardPhFifo1SbeErrLogMutable discard_ph_fifo1_sbe_err_log_;
  TmPexPipeRspecDiscardPhFifo1MbeErrLogMutable discard_ph_fifo1_mbe_err_log_;
  QpexPortTdmEnbMapMutable port_tdm_enb_map_;
  std::array< QpexPtStateMutable, 11 > pt_state_;
  std::array< QpexEpbCredCntMutable, 9 > pt_epb_cred_;
  std::array< QpexQEmptyMutable, 24 > q_empty_;
  std::array< QpexPtGapWmMutable, 72 > pt_gap_wm_;
  CfgCtTimerMutable cfg_ct_timer_;
  std::array< PexPfcMapTableMutable, 576 > pex_pfc_map_table_;
  std::array< PexEportTxCntMutable, 72 > pex_eport_tx_cnt_;
  PexDebugRegisterMutable pex_debug_register_;
  PexTxCntTimerMutable pex_tx_cnt_timer_;
  PexEpbCreditProbeMutable pex_epb_credit_probe_;
  PexCntMutable tot_byte_cnt_;
  PexCntMutable tot_pkt_cnt_;
  PexCntMutable dis_cell_cnt_;
  TmPexPipeRspecDebugBusCtrlMutable debug_bus_ctrl_;
  TmPexPipeRspecIntrMutable intr_;
private:
  static int StartOffset(
      int index_tm_pex_pipe_rspec
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    offset += 0x300000; // to get to tm_pex_top
    assert(index_tm_pex_pipe_rspec < 4);
    offset += index_tm_pex_pipe_rspec * 0x4000; // tm_pex_pipe_rspec[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_TM_PEX_PIPE_RSPEC_MUTABLE_H__
