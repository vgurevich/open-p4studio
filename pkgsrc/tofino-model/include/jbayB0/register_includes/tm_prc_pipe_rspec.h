/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_PRC_PIPE_RSPEC_H__
#define __REGISTER_INCLUDES_TM_PRC_PIPE_RSPEC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "prc_cache_wm.h"
#include "prc_pex_cnt.h"
#include "prc_pex_zero_cnt.h"
#include "prc_pipe_control.h"
#include "prc_qac_cnt.h"
#include "prc_qac_zero_cnt.h"
#include "tm_prc_pipe_rspec_cache_mbe_err_log.h"
#include "tm_prc_pipe_rspec_cache_sbe_err_log.h"
#include "tm_prc_pipe_rspec_debug_bus_ctrl.h"
#include "tm_prc_pipe_rspec_ecc.h"
#include "tm_prc_pipe_rspec_intr.h"

namespace jbayB0 {
  namespace register_classes {

class TmPrcPipeRspec : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmPrcPipeRspec(
      int chipNumber, int index_tm_prc_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_prc_pipe_rspec), 32768, false, write_callback, read_callback, std::string("TmPrcPipeRspec")+":"+boost::lexical_cast<std::string>(index_tm_prc_pipe_rspec))
    {
    }
  TmPrcPipeRspec(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "TmPrcPipeRspec")
    {
    }
public:





  PrcPipeControl &control() { return control_; }








  TmPrcPipeRspecEcc &ecc() { return ecc_; }






  TmPrcPipeRspecCacheMbeErrLog &cache_mbe_err_log() { return cache_mbe_err_log_; }





  TmPrcPipeRspecCacheSbeErrLog &cache_sbe_err_log() { return cache_sbe_err_log_; }





  PrcQacCnt &qac_cnt() { return qac_cnt_; }





  PrcQacZeroCnt &qac_zero_cnt() { return qac_zero_cnt_; }





  PrcPexCnt &pex_cnt() { return pex_cnt_; }





  PrcPexZeroCnt &pex_zero_cnt() { return pex_zero_cnt_; }





  PrcCacheWm &cache_wm() { return cache_wm_; }





  TmPrcPipeRspecDebugBusCtrl &debug_bus_ctrl() { return debug_bus_ctrl_; }
  TmPrcPipeRspecIntr &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      control_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      ecc_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x40) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      cache_mbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      cache_sbe_err_log_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      qac_cnt_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      qac_zero_cnt_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      pex_cnt_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      pex_zero_cnt_.read( offset, data );
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      if (read_callback_) read_callback_();
      cache_wm_.read( offset, data );
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      if (read_callback_) read_callback_();
      debug_bus_ctrl_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      control_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x40) {
      offset -= 0x38;
      cache_mbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      cache_sbe_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      qac_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      qac_zero_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      pex_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      pex_zero_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      cache_wm_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      debug_bus_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    control_.reset();
    ecc_.reset();
    cache_mbe_err_log_.reset();
    cache_sbe_err_log_.reset();
    qac_cnt_.reset();
    qac_zero_cnt_.reset();
    pex_cnt_.reset();
    pex_zero_cnt_.reset();
    cache_wm_.reset();
    debug_bus_ctrl_.reset();
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += control_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x40) {
      offset -= 0x38;
      r += cache_mbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      r += cache_sbe_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      r += qac_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      r += qac_zero_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      r += pex_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      r += pex_zero_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      r += cache_wm_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      r += debug_bus_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += control_.to_string(print_zeros,indent_string) ;
    r += ecc_.to_string(print_zeros,indent_string) ;
    r += cache_mbe_err_log_.to_string(print_zeros,indent_string) ;
    r += cache_sbe_err_log_.to_string(print_zeros,indent_string) ;
    r += qac_cnt_.to_string(print_zeros,indent_string) ;
    r += qac_zero_cnt_.to_string(print_zeros,indent_string) ;
    r += pex_cnt_.to_string(print_zeros,indent_string) ;
    r += pex_zero_cnt_.to_string(print_zeros,indent_string) ;
    r += cache_wm_.to_string(print_zeros,indent_string) ;
    r += debug_bus_ctrl_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  PrcPipeControl control_;
  TmPrcPipeRspecEcc ecc_;
  TmPrcPipeRspecCacheMbeErrLog cache_mbe_err_log_;
  TmPrcPipeRspecCacheSbeErrLog cache_sbe_err_log_;
  PrcQacCnt qac_cnt_;
  PrcQacZeroCnt qac_zero_cnt_;
  PrcPexCnt pex_cnt_;
  PrcPexZeroCnt pex_zero_cnt_;
  PrcCacheWm cache_wm_;
  TmPrcPipeRspecDebugBusCtrl debug_bus_ctrl_;
  TmPrcPipeRspecIntr intr_;
private:
  static int StartOffset(
      int index_tm_prc_pipe_rspec
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    offset += 0x400000; // to get to tm_prc_top
    assert(index_tm_prc_pipe_rspec < 4);
    offset += index_tm_prc_pipe_rspec * 0x8000; // tm_prc_pipe_rspec[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_TM_PRC_PIPE_RSPEC_H__
