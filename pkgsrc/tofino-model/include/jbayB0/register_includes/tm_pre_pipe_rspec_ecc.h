/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_PRE_PIPE_RSPEC_ECC_H__
#define __REGISTER_INCLUDES_TM_PRE_PIPE_RSPEC_ECC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class TmPrePipeRspecEcc : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmPrePipeRspecEcc(
      int chipNumber, int index_tm_pre_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_pre_pipe_rspec), 8, false, write_callback, read_callback, std::string("TmPrePipeRspecEcc")+":"+boost::lexical_cast<std::string>(index_tm_pre_pipe_rspec))
    {
    }
  TmPrePipeRspecEcc(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "TmPrePipeRspecEcc")
    {
    }
public:




  uint8_t &fifo_disable_check() { return fifo_disable_check_; }




  uint8_t &fifo_inject_sbe() { return fifo_inject_sbe_; }




  uint8_t &fifo_inject_mbe() { return fifo_inject_mbe_; }




  uint8_t &mit_disable_check() { return mit_disable_check_; }




  uint8_t &mit_inject_sbe() { return mit_inject_sbe_; }




  uint8_t &mit_inject_mbe() { return mit_inject_mbe_; }




  uint8_t &lit0_bm_disable_check() { return lit0_bm_disable_check_; }




  uint8_t &lit0_bm_inject_sbe() { return lit0_bm_inject_sbe_; }




  uint8_t &lit0_bm_inject_mbe() { return lit0_bm_inject_mbe_; }




  uint8_t &lit1_bm_disable_check() { return lit1_bm_disable_check_; }




  uint8_t &lit1_bm_inject_sbe() { return lit1_bm_inject_sbe_; }




  uint8_t &lit1_bm_inject_mbe() { return lit1_bm_inject_mbe_; }




  uint8_t &lit0_np_disable_check() { return lit0_np_disable_check_; }




  uint8_t &lit0_np_inject_sbe() { return lit0_np_inject_sbe_; }




  uint8_t &lit0_np_inject_mbe() { return lit0_np_inject_mbe_; }




  uint8_t &lit1_np_disable_check() { return lit1_np_disable_check_; }




  uint8_t &lit1_np_inject_sbe() { return lit1_np_inject_sbe_; }




  uint8_t &lit1_np_inject_mbe() { return lit1_np_inject_mbe_; }




  uint8_t &pmt0_disable_check() { return pmt0_disable_check_; }




  uint8_t &pmt0_inject_sbe() { return pmt0_inject_sbe_; }




  uint8_t &pmt0_inject_mbe() { return pmt0_inject_mbe_; }




  uint8_t &pmt1_disable_check() { return pmt1_disable_check_; }




  uint8_t &pmt1_inject_sbe() { return pmt1_inject_sbe_; }




  uint8_t &pmt1_inject_mbe() { return pmt1_inject_mbe_; }




  uint8_t &rdm_disable_check() { return rdm_disable_check_; }




  uint8_t &rdm_inject_sbe() { return rdm_inject_sbe_; }




  uint8_t &rdm_inject_mbe() { return rdm_inject_mbe_; }




  uint8_t &fifo_mem_bankid_disable_check() { return fifo_mem_bankid_disable_check_; }




  uint8_t &fifo_mem_bankid_inject_sbe() { return fifo_mem_bankid_inject_sbe_; }




  uint8_t &fifo_mem_bankid_inject_mbe() { return fifo_mem_bankid_inject_mbe_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (fifo_disable_check_ & 0x1);
      *data |= ((fifo_inject_sbe_ & 0x1) << 1);
      *data |= ((fifo_inject_mbe_ & 0x1) << 2);
      *data |= ((mit_disable_check_ & 0x1) << 4);
      *data |= ((mit_inject_sbe_ & 0x1) << 5);
      *data |= ((mit_inject_mbe_ & 0x1) << 6);
      *data |= ((lit0_bm_disable_check_ & 0x1) << 8);
      *data |= ((lit0_bm_inject_sbe_ & 0x1) << 9);
      *data |= ((lit0_bm_inject_mbe_ & 0x1) << 10);
      *data |= ((lit1_bm_disable_check_ & 0x1) << 12);
      *data |= ((lit1_bm_inject_sbe_ & 0x1) << 13);
      *data |= ((lit1_bm_inject_mbe_ & 0x1) << 14);
      *data |= ((lit0_np_disable_check_ & 0x1) << 16);
      *data |= ((lit0_np_inject_sbe_ & 0x1) << 17);
      *data |= ((lit0_np_inject_mbe_ & 0x1) << 18);
      *data |= ((lit1_np_disable_check_ & 0x1) << 20);
      *data |= ((lit1_np_inject_sbe_ & 0x1) << 21);
      *data |= ((lit1_np_inject_mbe_ & 0x1) << 22);
      *data |= ((pmt0_disable_check_ & 0x1) << 24);
      *data |= ((pmt0_inject_sbe_ & 0x1) << 25);
      *data |= ((pmt0_inject_mbe_ & 0x1) << 26);
      *data |= ((pmt1_disable_check_ & 0x1) << 28);
      *data |= ((pmt1_inject_sbe_ & 0x1) << 29);
      *data |= ((pmt1_inject_mbe_ & 0x1) << 30);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (rdm_disable_check_ & 0x1);
      *data |= ((rdm_inject_sbe_ & 0x1) << 1);
      *data |= ((rdm_inject_mbe_ & 0x1) << 2);
      *data |= ((fifo_mem_bankid_disable_check_ & 0x1) << 4);
      *data |= ((fifo_mem_bankid_inject_sbe_ & 0x1) << 5);
      *data |= ((fifo_mem_bankid_inject_mbe_ & 0x1) << 6);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      fifo_disable_check_ = (data & 0x1);
      fifo_inject_sbe_ = ((data >> 1) & 0x1);
      fifo_inject_mbe_ = ((data >> 2) & 0x1);
      mit_disable_check_ = ((data >> 4) & 0x1);
      mit_inject_sbe_ = ((data >> 5) & 0x1);
      mit_inject_mbe_ = ((data >> 6) & 0x1);
      lit0_bm_disable_check_ = ((data >> 8) & 0x1);
      lit0_bm_inject_sbe_ = ((data >> 9) & 0x1);
      lit0_bm_inject_mbe_ = ((data >> 10) & 0x1);
      lit1_bm_disable_check_ = ((data >> 12) & 0x1);
      lit1_bm_inject_sbe_ = ((data >> 13) & 0x1);
      lit1_bm_inject_mbe_ = ((data >> 14) & 0x1);
      lit0_np_disable_check_ = ((data >> 16) & 0x1);
      lit0_np_inject_sbe_ = ((data >> 17) & 0x1);
      lit0_np_inject_mbe_ = ((data >> 18) & 0x1);
      lit1_np_disable_check_ = ((data >> 20) & 0x1);
      lit1_np_inject_sbe_ = ((data >> 21) & 0x1);
      lit1_np_inject_mbe_ = ((data >> 22) & 0x1);
      pmt0_disable_check_ = ((data >> 24) & 0x1);
      pmt0_inject_sbe_ = ((data >> 25) & 0x1);
      pmt0_inject_mbe_ = ((data >> 26) & 0x1);
      pmt1_disable_check_ = ((data >> 28) & 0x1);
      pmt1_inject_sbe_ = ((data >> 29) & 0x1);
      pmt1_inject_mbe_ = ((data >> 30) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      rdm_disable_check_ = (data & 0x1);
      rdm_inject_sbe_ = ((data >> 1) & 0x1);
      rdm_inject_mbe_ = ((data >> 2) & 0x1);
      fifo_mem_bankid_disable_check_ = ((data >> 4) & 0x1);
      fifo_mem_bankid_inject_sbe_ = ((data >> 5) & 0x1);
      fifo_mem_bankid_inject_mbe_ = ((data >> 6) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    fifo_disable_check_ = 0x0;
    fifo_inject_sbe_ = 0x0;
    fifo_inject_mbe_ = 0x0;
    mit_disable_check_ = 0x0;
    mit_inject_sbe_ = 0x0;
    mit_inject_mbe_ = 0x0;
    lit0_bm_disable_check_ = 0x0;
    lit0_bm_inject_sbe_ = 0x0;
    lit0_bm_inject_mbe_ = 0x0;
    lit1_bm_disable_check_ = 0x0;
    lit1_bm_inject_sbe_ = 0x0;
    lit1_bm_inject_mbe_ = 0x0;
    lit0_np_disable_check_ = 0x0;
    lit0_np_inject_sbe_ = 0x0;
    lit0_np_inject_mbe_ = 0x0;
    lit1_np_disable_check_ = 0x0;
    lit1_np_inject_sbe_ = 0x0;
    lit1_np_inject_mbe_ = 0x0;
    pmt0_disable_check_ = 0x0;
    pmt0_inject_sbe_ = 0x0;
    pmt0_inject_mbe_ = 0x0;
    pmt1_disable_check_ = 0x0;
    pmt1_inject_sbe_ = 0x0;
    pmt1_inject_mbe_ = 0x0;
    rdm_disable_check_ = 0x0;
    rdm_inject_sbe_ = 0x0;
    rdm_inject_mbe_ = 0x0;
    fifo_mem_bankid_disable_check_ = 0x0;
    fifo_mem_bankid_inject_sbe_ = 0x0;
    fifo_mem_bankid_inject_mbe_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TmPrePipeRspecEcc") + ":\n";
    r += indent_string + "  " + std::string("fifo_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_disable_check_) ) + "\n";
    all_zeros &= (0 == fifo_disable_check_);
    r += indent_string + "  " + std::string("fifo_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_inject_sbe_) ) + "\n";
    all_zeros &= (0 == fifo_inject_sbe_);
    r += indent_string + "  " + std::string("fifo_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_inject_mbe_) ) + "\n";
    all_zeros &= (0 == fifo_inject_mbe_);
    r += indent_string + "  " + std::string("mit_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mit_disable_check_) ) + "\n";
    all_zeros &= (0 == mit_disable_check_);
    r += indent_string + "  " + std::string("mit_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mit_inject_sbe_) ) + "\n";
    all_zeros &= (0 == mit_inject_sbe_);
    r += indent_string + "  " + std::string("mit_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mit_inject_mbe_) ) + "\n";
    all_zeros &= (0 == mit_inject_mbe_);
    r += indent_string + "  " + std::string("lit0_bm_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_bm_disable_check_) ) + "\n";
    all_zeros &= (0 == lit0_bm_disable_check_);
    r += indent_string + "  " + std::string("lit0_bm_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_bm_inject_sbe_) ) + "\n";
    all_zeros &= (0 == lit0_bm_inject_sbe_);
    r += indent_string + "  " + std::string("lit0_bm_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_bm_inject_mbe_) ) + "\n";
    all_zeros &= (0 == lit0_bm_inject_mbe_);
    r += indent_string + "  " + std::string("lit1_bm_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_bm_disable_check_) ) + "\n";
    all_zeros &= (0 == lit1_bm_disable_check_);
    r += indent_string + "  " + std::string("lit1_bm_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_bm_inject_sbe_) ) + "\n";
    all_zeros &= (0 == lit1_bm_inject_sbe_);
    r += indent_string + "  " + std::string("lit1_bm_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_bm_inject_mbe_) ) + "\n";
    all_zeros &= (0 == lit1_bm_inject_mbe_);
    r += indent_string + "  " + std::string("lit0_np_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_np_disable_check_) ) + "\n";
    all_zeros &= (0 == lit0_np_disable_check_);
    r += indent_string + "  " + std::string("lit0_np_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_np_inject_sbe_) ) + "\n";
    all_zeros &= (0 == lit0_np_inject_sbe_);
    r += indent_string + "  " + std::string("lit0_np_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_np_inject_mbe_) ) + "\n";
    all_zeros &= (0 == lit0_np_inject_mbe_);
    r += indent_string + "  " + std::string("lit1_np_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_np_disable_check_) ) + "\n";
    all_zeros &= (0 == lit1_np_disable_check_);
    r += indent_string + "  " + std::string("lit1_np_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_np_inject_sbe_) ) + "\n";
    all_zeros &= (0 == lit1_np_inject_sbe_);
    r += indent_string + "  " + std::string("lit1_np_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_np_inject_mbe_) ) + "\n";
    all_zeros &= (0 == lit1_np_inject_mbe_);
    r += indent_string + "  " + std::string("pmt0_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt0_disable_check_) ) + "\n";
    all_zeros &= (0 == pmt0_disable_check_);
    r += indent_string + "  " + std::string("pmt0_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt0_inject_sbe_) ) + "\n";
    all_zeros &= (0 == pmt0_inject_sbe_);
    r += indent_string + "  " + std::string("pmt0_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt0_inject_mbe_) ) + "\n";
    all_zeros &= (0 == pmt0_inject_mbe_);
    r += indent_string + "  " + std::string("pmt1_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt1_disable_check_) ) + "\n";
    all_zeros &= (0 == pmt1_disable_check_);
    r += indent_string + "  " + std::string("pmt1_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt1_inject_sbe_) ) + "\n";
    all_zeros &= (0 == pmt1_inject_sbe_);
    r += indent_string + "  " + std::string("pmt1_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt1_inject_mbe_) ) + "\n";
    all_zeros &= (0 == pmt1_inject_mbe_);
    r += indent_string + "  " + std::string("rdm_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rdm_disable_check_) ) + "\n";
    all_zeros &= (0 == rdm_disable_check_);
    r += indent_string + "  " + std::string("rdm_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rdm_inject_sbe_) ) + "\n";
    all_zeros &= (0 == rdm_inject_sbe_);
    r += indent_string + "  " + std::string("rdm_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rdm_inject_mbe_) ) + "\n";
    all_zeros &= (0 == rdm_inject_mbe_);
    r += indent_string + "  " + std::string("fifo_mem_bankid_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_mem_bankid_disable_check_) ) + "\n";
    all_zeros &= (0 == fifo_mem_bankid_disable_check_);
    r += indent_string + "  " + std::string("fifo_mem_bankid_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_mem_bankid_inject_sbe_) ) + "\n";
    all_zeros &= (0 == fifo_mem_bankid_inject_sbe_);
    r += indent_string + "  " + std::string("fifo_mem_bankid_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_mem_bankid_inject_mbe_) ) + "\n";
    all_zeros &= (0 == fifo_mem_bankid_inject_mbe_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TmPrePipeRspecEcc") + ":\n";
    r += indent_string + "  " + std::string("fifo_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_disable_check_) ) + "\n";
    all_zeros &= (0 == fifo_disable_check_);
    r += indent_string + "  " + std::string("fifo_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_inject_sbe_) ) + "\n";
    all_zeros &= (0 == fifo_inject_sbe_);
    r += indent_string + "  " + std::string("fifo_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_inject_mbe_) ) + "\n";
    all_zeros &= (0 == fifo_inject_mbe_);
    r += indent_string + "  " + std::string("mit_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mit_disable_check_) ) + "\n";
    all_zeros &= (0 == mit_disable_check_);
    r += indent_string + "  " + std::string("mit_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mit_inject_sbe_) ) + "\n";
    all_zeros &= (0 == mit_inject_sbe_);
    r += indent_string + "  " + std::string("mit_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mit_inject_mbe_) ) + "\n";
    all_zeros &= (0 == mit_inject_mbe_);
    r += indent_string + "  " + std::string("lit0_bm_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_bm_disable_check_) ) + "\n";
    all_zeros &= (0 == lit0_bm_disable_check_);
    r += indent_string + "  " + std::string("lit0_bm_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_bm_inject_sbe_) ) + "\n";
    all_zeros &= (0 == lit0_bm_inject_sbe_);
    r += indent_string + "  " + std::string("lit0_bm_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_bm_inject_mbe_) ) + "\n";
    all_zeros &= (0 == lit0_bm_inject_mbe_);
    r += indent_string + "  " + std::string("lit1_bm_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_bm_disable_check_) ) + "\n";
    all_zeros &= (0 == lit1_bm_disable_check_);
    r += indent_string + "  " + std::string("lit1_bm_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_bm_inject_sbe_) ) + "\n";
    all_zeros &= (0 == lit1_bm_inject_sbe_);
    r += indent_string + "  " + std::string("lit1_bm_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_bm_inject_mbe_) ) + "\n";
    all_zeros &= (0 == lit1_bm_inject_mbe_);
    r += indent_string + "  " + std::string("lit0_np_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_np_disable_check_) ) + "\n";
    all_zeros &= (0 == lit0_np_disable_check_);
    r += indent_string + "  " + std::string("lit0_np_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_np_inject_sbe_) ) + "\n";
    all_zeros &= (0 == lit0_np_inject_sbe_);
    r += indent_string + "  " + std::string("lit0_np_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_np_inject_mbe_) ) + "\n";
    all_zeros &= (0 == lit0_np_inject_mbe_);
    r += indent_string + "  " + std::string("lit1_np_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_np_disable_check_) ) + "\n";
    all_zeros &= (0 == lit1_np_disable_check_);
    r += indent_string + "  " + std::string("lit1_np_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_np_inject_sbe_) ) + "\n";
    all_zeros &= (0 == lit1_np_inject_sbe_);
    r += indent_string + "  " + std::string("lit1_np_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_np_inject_mbe_) ) + "\n";
    all_zeros &= (0 == lit1_np_inject_mbe_);
    r += indent_string + "  " + std::string("pmt0_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt0_disable_check_) ) + "\n";
    all_zeros &= (0 == pmt0_disable_check_);
    r += indent_string + "  " + std::string("pmt0_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt0_inject_sbe_) ) + "\n";
    all_zeros &= (0 == pmt0_inject_sbe_);
    r += indent_string + "  " + std::string("pmt0_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt0_inject_mbe_) ) + "\n";
    all_zeros &= (0 == pmt0_inject_mbe_);
    r += indent_string + "  " + std::string("pmt1_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt1_disable_check_) ) + "\n";
    all_zeros &= (0 == pmt1_disable_check_);
    r += indent_string + "  " + std::string("pmt1_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt1_inject_sbe_) ) + "\n";
    all_zeros &= (0 == pmt1_inject_sbe_);
    r += indent_string + "  " + std::string("pmt1_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt1_inject_mbe_) ) + "\n";
    all_zeros &= (0 == pmt1_inject_mbe_);
    r += indent_string + "  " + std::string("rdm_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rdm_disable_check_) ) + "\n";
    all_zeros &= (0 == rdm_disable_check_);
    r += indent_string + "  " + std::string("rdm_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rdm_inject_sbe_) ) + "\n";
    all_zeros &= (0 == rdm_inject_sbe_);
    r += indent_string + "  " + std::string("rdm_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rdm_inject_mbe_) ) + "\n";
    all_zeros &= (0 == rdm_inject_mbe_);
    r += indent_string + "  " + std::string("fifo_mem_bankid_disable_check") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_mem_bankid_disable_check_) ) + "\n";
    all_zeros &= (0 == fifo_mem_bankid_disable_check_);
    r += indent_string + "  " + std::string("fifo_mem_bankid_inject_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_mem_bankid_inject_sbe_) ) + "\n";
    all_zeros &= (0 == fifo_mem_bankid_inject_sbe_);
    r += indent_string + "  " + std::string("fifo_mem_bankid_inject_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_mem_bankid_inject_mbe_) ) + "\n";
    all_zeros &= (0 == fifo_mem_bankid_inject_mbe_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t fifo_disable_check_;
  uint8_t fifo_inject_sbe_;
  uint8_t fifo_inject_mbe_;
  uint8_t mit_disable_check_;
  uint8_t mit_inject_sbe_;
  uint8_t mit_inject_mbe_;
  uint8_t lit0_bm_disable_check_;
  uint8_t lit0_bm_inject_sbe_;
  uint8_t lit0_bm_inject_mbe_;
  uint8_t lit1_bm_disable_check_;
  uint8_t lit1_bm_inject_sbe_;
  uint8_t lit1_bm_inject_mbe_;
  uint8_t lit0_np_disable_check_;
  uint8_t lit0_np_inject_sbe_;
  uint8_t lit0_np_inject_mbe_;
  uint8_t lit1_np_disable_check_;
  uint8_t lit1_np_inject_sbe_;
  uint8_t lit1_np_inject_mbe_;
  uint8_t pmt0_disable_check_;
  uint8_t pmt0_inject_sbe_;
  uint8_t pmt0_inject_mbe_;
  uint8_t pmt1_disable_check_;
  uint8_t pmt1_inject_sbe_;
  uint8_t pmt1_inject_mbe_;
  uint8_t rdm_disable_check_;
  uint8_t rdm_inject_sbe_;
  uint8_t rdm_inject_mbe_;
  uint8_t fifo_mem_bankid_disable_check_;
  uint8_t fifo_mem_bankid_inject_sbe_;
  uint8_t fifo_mem_bankid_inject_mbe_;
private:
  static int StartOffset(
      int index_tm_pre_pipe_rspec
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    offset += 0x480000; // to get to tm_pre_top
    assert(index_tm_pre_pipe_rspec < 4);
    offset += index_tm_pre_pipe_rspec * 0x8000; // tm_pre_pipe_rspec[]
    offset += 0x50; // to get to ecc
    return offset;
  }

};












  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_TM_PRE_PIPE_RSPEC_ECC_H__
