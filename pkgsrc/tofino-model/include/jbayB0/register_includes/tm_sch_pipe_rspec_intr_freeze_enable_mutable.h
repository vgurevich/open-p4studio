/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_SCH_PIPE_RSPEC_INTR_FREEZE_ENABLE_MUTABLE_H__
#define __REGISTER_INCLUDES_TM_SCH_PIPE_RSPEC_INTR_FREEZE_ENABLE_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>










namespace jbayB0 {
  namespace register_classes {

class TmSchPipeRspecIntrFreezeEnableMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum TmTopRspecEnum {
    kTmSchaTop,
    kTmSchbTop
  };
public:
  TmSchPipeRspecIntrFreezeEnableMutable(
      int chipNumber, TmTopRspecEnum selector_tm_top_rspec, int index_tm_sch_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_tm_top_rspec, index_tm_sch_pipe_rspec), 4, true, write_callback, read_callback, std::string("TmSchPipeRspecIntrFreezeEnableMutable")+":"+boost::lexical_cast<std::string>(selector_tm_top_rspec) + "," + boost::lexical_cast<std::string>(index_tm_sch_pipe_rspec))
    {
    }
  TmSchPipeRspecIntrFreezeEnableMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "TmSchPipeRspecIntrFreezeEnableMutable")
    {
    }
public:
  uint8_t tdm_table_sbe() { return tdm_table_sbe_; }
  void tdm_table_sbe(const uint8_t &v) { tdm_table_sbe_=v; }
  uint8_t tdm_table_mbe() { return tdm_table_mbe_; }
  void tdm_table_mbe(const uint8_t &v) { tdm_table_mbe_=v; }
  uint8_t upd_wac_sbe() { return upd_wac_sbe_; }
  void upd_wac_sbe(const uint8_t &v) { upd_wac_sbe_=v; }
  uint8_t upd_wac_mbe() { return upd_wac_mbe_; }
  void upd_wac_mbe(const uint8_t &v) { upd_wac_mbe_=v; }
  uint8_t upd_edprsr_advfc_sbe() { return upd_edprsr_advfc_sbe_; }
  void upd_edprsr_advfc_sbe(const uint8_t &v) { upd_edprsr_advfc_sbe_=v; }
  uint8_t upd_edprsr_advfc_mbe() { return upd_edprsr_advfc_mbe_; }
  void upd_edprsr_advfc_mbe(const uint8_t &v) { upd_edprsr_advfc_mbe_=v; }
  uint8_t q_minrate_sbe() { return q_minrate_sbe_; }
  void q_minrate_sbe(const uint8_t &v) { q_minrate_sbe_=v; }
  uint8_t q_minrate_mbe() { return q_minrate_mbe_; }
  void q_minrate_mbe(const uint8_t &v) { q_minrate_mbe_=v; }
  uint8_t q_excrate_sbe() { return q_excrate_sbe_; }
  void q_excrate_sbe(const uint8_t &v) { q_excrate_sbe_=v; }
  uint8_t q_excrate_mbe() { return q_excrate_mbe_; }
  void q_excrate_mbe(const uint8_t &v) { q_excrate_mbe_=v; }
  uint8_t q_maxrate_sbe() { return q_maxrate_sbe_; }
  void q_maxrate_sbe(const uint8_t &v) { q_maxrate_sbe_=v; }
  uint8_t q_maxrate_mbe() { return q_maxrate_mbe_; }
  void q_maxrate_mbe(const uint8_t &v) { q_maxrate_mbe_=v; }
  uint8_t l1_minrate_sbe() { return l1_minrate_sbe_; }
  void l1_minrate_sbe(const uint8_t &v) { l1_minrate_sbe_=v; }
  uint8_t l1_minrate_mbe() { return l1_minrate_mbe_; }
  void l1_minrate_mbe(const uint8_t &v) { l1_minrate_mbe_=v; }
  uint8_t l1_excrate_sbe() { return l1_excrate_sbe_; }
  void l1_excrate_sbe(const uint8_t &v) { l1_excrate_sbe_=v; }
  uint8_t l1_excrate_mbe() { return l1_excrate_mbe_; }
  void l1_excrate_mbe(const uint8_t &v) { l1_excrate_mbe_=v; }
  uint8_t l1_maxrate_sbe() { return l1_maxrate_sbe_; }
  void l1_maxrate_sbe(const uint8_t &v) { l1_maxrate_sbe_=v; }
  uint8_t l1_maxrate_mbe() { return l1_maxrate_mbe_; }
  void l1_maxrate_mbe(const uint8_t &v) { l1_maxrate_mbe_=v; }
  uint8_t p_maxrate_sbe() { return p_maxrate_sbe_; }
  void p_maxrate_sbe(const uint8_t &v) { p_maxrate_sbe_=v; }
  uint8_t p_maxrate_mbe() { return p_maxrate_mbe_; }
  void p_maxrate_mbe(const uint8_t &v) { p_maxrate_mbe_=v; }
  uint8_t upd_pex0_sbe() { return upd_pex0_sbe_; }
  void upd_pex0_sbe(const uint8_t &v) { upd_pex0_sbe_=v; }
  uint8_t upd_pex0_mbe() { return upd_pex0_mbe_; }
  void upd_pex0_mbe(const uint8_t &v) { upd_pex0_mbe_=v; }
  uint8_t upd_pex1_sbe() { return upd_pex1_sbe_; }
  void upd_pex1_sbe(const uint8_t &v) { upd_pex1_sbe_=v; }
  uint8_t upd_pex1_mbe() { return upd_pex1_mbe_; }
  void upd_pex1_mbe(const uint8_t &v) { upd_pex1_mbe_=v; }
  uint8_t upd_edprsr_sbe() { return upd_edprsr_sbe_; }
  void upd_edprsr_sbe(const uint8_t &v) { upd_edprsr_sbe_=v; }
  uint8_t upd_edprsr_mbe() { return upd_edprsr_mbe_; }
  void upd_edprsr_mbe(const uint8_t &v) { upd_edprsr_mbe_=v; }
  uint8_t pex_credit_err() { return pex_credit_err_; }
  void pex_credit_err(const uint8_t &v) { pex_credit_err_=v; }
  uint8_t pex_mac_credit_err() { return pex_mac_credit_err_; }
  void pex_mac_credit_err(const uint8_t &v) { pex_mac_credit_err_=v; }
  uint8_t q_watchdog_sbe() { return q_watchdog_sbe_; }
  void q_watchdog_sbe(const uint8_t &v) { q_watchdog_sbe_=v; }
  uint8_t q_watchdog_mbe() { return q_watchdog_mbe_; }
  void q_watchdog_mbe(const uint8_t &v) { q_watchdog_mbe_=v; }
  uint8_t q_watchdog() { return q_watchdog_; }
  void q_watchdog(const uint8_t &v) { q_watchdog_=v; }
  uint8_t q_flush_done() { return q_flush_done_; }
  void q_flush_done(const uint8_t &v) { q_flush_done_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (tdm_table_sbe_ & 0x1);
    *data |= ((tdm_table_mbe_ & 0x1) << 1);
    *data |= ((upd_wac_sbe_ & 0x1) << 2);
    *data |= ((upd_wac_mbe_ & 0x1) << 3);
    *data |= ((upd_edprsr_advfc_sbe_ & 0x1) << 4);
    *data |= ((upd_edprsr_advfc_mbe_ & 0x1) << 5);
    *data |= ((q_minrate_sbe_ & 0x1) << 6);
    *data |= ((q_minrate_mbe_ & 0x1) << 7);
    *data |= ((q_excrate_sbe_ & 0x1) << 8);
    *data |= ((q_excrate_mbe_ & 0x1) << 9);
    *data |= ((q_maxrate_sbe_ & 0x1) << 10);
    *data |= ((q_maxrate_mbe_ & 0x1) << 11);
    *data |= ((l1_minrate_sbe_ & 0x1) << 12);
    *data |= ((l1_minrate_mbe_ & 0x1) << 13);
    *data |= ((l1_excrate_sbe_ & 0x1) << 14);
    *data |= ((l1_excrate_mbe_ & 0x1) << 15);
    *data |= ((l1_maxrate_sbe_ & 0x1) << 16);
    *data |= ((l1_maxrate_mbe_ & 0x1) << 17);
    *data |= ((p_maxrate_sbe_ & 0x1) << 18);
    *data |= ((p_maxrate_mbe_ & 0x1) << 19);
    *data |= ((upd_pex0_sbe_ & 0x1) << 20);
    *data |= ((upd_pex0_mbe_ & 0x1) << 21);
    *data |= ((upd_pex1_sbe_ & 0x1) << 22);
    *data |= ((upd_pex1_mbe_ & 0x1) << 23);
    *data |= ((upd_edprsr_sbe_ & 0x1) << 24);
    *data |= ((upd_edprsr_mbe_ & 0x1) << 25);
    *data |= ((pex_credit_err_ & 0x1) << 26);
    *data |= ((pex_mac_credit_err_ & 0x1) << 27);
    *data |= ((q_watchdog_sbe_ & 0x1) << 28);
    *data |= ((q_watchdog_mbe_ & 0x1) << 29);
    *data |= ((q_watchdog_ & 0x1) << 30);
    *data |= ((q_flush_done_ & 0x1) << 31);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    tdm_table_sbe_ = (data & 0x1);
    tdm_table_mbe_ = ((data >> 1) & 0x1);
    upd_wac_sbe_ = ((data >> 2) & 0x1);
    upd_wac_mbe_ = ((data >> 3) & 0x1);
    upd_edprsr_advfc_sbe_ = ((data >> 4) & 0x1);
    upd_edprsr_advfc_mbe_ = ((data >> 5) & 0x1);
    q_minrate_sbe_ = ((data >> 6) & 0x1);
    q_minrate_mbe_ = ((data >> 7) & 0x1);
    q_excrate_sbe_ = ((data >> 8) & 0x1);
    q_excrate_mbe_ = ((data >> 9) & 0x1);
    q_maxrate_sbe_ = ((data >> 10) & 0x1);
    q_maxrate_mbe_ = ((data >> 11) & 0x1);
    l1_minrate_sbe_ = ((data >> 12) & 0x1);
    l1_minrate_mbe_ = ((data >> 13) & 0x1);
    l1_excrate_sbe_ = ((data >> 14) & 0x1);
    l1_excrate_mbe_ = ((data >> 15) & 0x1);
    l1_maxrate_sbe_ = ((data >> 16) & 0x1);
    l1_maxrate_mbe_ = ((data >> 17) & 0x1);
    p_maxrate_sbe_ = ((data >> 18) & 0x1);
    p_maxrate_mbe_ = ((data >> 19) & 0x1);
    upd_pex0_sbe_ = ((data >> 20) & 0x1);
    upd_pex0_mbe_ = ((data >> 21) & 0x1);
    upd_pex1_sbe_ = ((data >> 22) & 0x1);
    upd_pex1_mbe_ = ((data >> 23) & 0x1);
    upd_edprsr_sbe_ = ((data >> 24) & 0x1);
    upd_edprsr_mbe_ = ((data >> 25) & 0x1);
    pex_credit_err_ = ((data >> 26) & 0x1);
    pex_mac_credit_err_ = ((data >> 27) & 0x1);
    q_watchdog_sbe_ = ((data >> 28) & 0x1);
    q_watchdog_mbe_ = ((data >> 29) & 0x1);
    q_watchdog_ = ((data >> 30) & 0x1);
    q_flush_done_ = ((data >> 31) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    tdm_table_sbe_ = 0x0;
    tdm_table_mbe_ = 0x0;
    upd_wac_sbe_ = 0x0;
    upd_wac_mbe_ = 0x0;
    upd_edprsr_advfc_sbe_ = 0x0;
    upd_edprsr_advfc_mbe_ = 0x0;
    q_minrate_sbe_ = 0x0;
    q_minrate_mbe_ = 0x0;
    q_excrate_sbe_ = 0x0;
    q_excrate_mbe_ = 0x0;
    q_maxrate_sbe_ = 0x0;
    q_maxrate_mbe_ = 0x0;
    l1_minrate_sbe_ = 0x0;
    l1_minrate_mbe_ = 0x0;
    l1_excrate_sbe_ = 0x0;
    l1_excrate_mbe_ = 0x0;
    l1_maxrate_sbe_ = 0x0;
    l1_maxrate_mbe_ = 0x0;
    p_maxrate_sbe_ = 0x0;
    p_maxrate_mbe_ = 0x0;
    upd_pex0_sbe_ = 0x0;
    upd_pex0_mbe_ = 0x0;
    upd_pex1_sbe_ = 0x0;
    upd_pex1_mbe_ = 0x0;
    upd_edprsr_sbe_ = 0x0;
    upd_edprsr_mbe_ = 0x0;
    pex_credit_err_ = 0x0;
    pex_mac_credit_err_ = 0x0;
    q_watchdog_sbe_ = 0x0;
    q_watchdog_mbe_ = 0x0;
    q_watchdog_ = 0x0;
    q_flush_done_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TmSchPipeRspecIntrFreezeEnableMutable") + ":\n";
    r += indent_string + "  " + std::string("tdm_table_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tdm_table_sbe_) ) + "\n";
    all_zeros &= (0 == tdm_table_sbe_);
    r += indent_string + "  " + std::string("tdm_table_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tdm_table_mbe_) ) + "\n";
    all_zeros &= (0 == tdm_table_mbe_);
    r += indent_string + "  " + std::string("upd_wac_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_wac_sbe_) ) + "\n";
    all_zeros &= (0 == upd_wac_sbe_);
    r += indent_string + "  " + std::string("upd_wac_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_wac_mbe_) ) + "\n";
    all_zeros &= (0 == upd_wac_mbe_);
    r += indent_string + "  " + std::string("upd_edprsr_advfc_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_edprsr_advfc_sbe_) ) + "\n";
    all_zeros &= (0 == upd_edprsr_advfc_sbe_);
    r += indent_string + "  " + std::string("upd_edprsr_advfc_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_edprsr_advfc_mbe_) ) + "\n";
    all_zeros &= (0 == upd_edprsr_advfc_mbe_);
    r += indent_string + "  " + std::string("q_minrate_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_minrate_sbe_) ) + "\n";
    all_zeros &= (0 == q_minrate_sbe_);
    r += indent_string + "  " + std::string("q_minrate_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_minrate_mbe_) ) + "\n";
    all_zeros &= (0 == q_minrate_mbe_);
    r += indent_string + "  " + std::string("q_excrate_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_excrate_sbe_) ) + "\n";
    all_zeros &= (0 == q_excrate_sbe_);
    r += indent_string + "  " + std::string("q_excrate_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_excrate_mbe_) ) + "\n";
    all_zeros &= (0 == q_excrate_mbe_);
    r += indent_string + "  " + std::string("q_maxrate_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_maxrate_sbe_) ) + "\n";
    all_zeros &= (0 == q_maxrate_sbe_);
    r += indent_string + "  " + std::string("q_maxrate_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_maxrate_mbe_) ) + "\n";
    all_zeros &= (0 == q_maxrate_mbe_);
    r += indent_string + "  " + std::string("l1_minrate_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_minrate_sbe_) ) + "\n";
    all_zeros &= (0 == l1_minrate_sbe_);
    r += indent_string + "  " + std::string("l1_minrate_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_minrate_mbe_) ) + "\n";
    all_zeros &= (0 == l1_minrate_mbe_);
    r += indent_string + "  " + std::string("l1_excrate_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_excrate_sbe_) ) + "\n";
    all_zeros &= (0 == l1_excrate_sbe_);
    r += indent_string + "  " + std::string("l1_excrate_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_excrate_mbe_) ) + "\n";
    all_zeros &= (0 == l1_excrate_mbe_);
    r += indent_string + "  " + std::string("l1_maxrate_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_maxrate_sbe_) ) + "\n";
    all_zeros &= (0 == l1_maxrate_sbe_);
    r += indent_string + "  " + std::string("l1_maxrate_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_maxrate_mbe_) ) + "\n";
    all_zeros &= (0 == l1_maxrate_mbe_);
    r += indent_string + "  " + std::string("p_maxrate_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(p_maxrate_sbe_) ) + "\n";
    all_zeros &= (0 == p_maxrate_sbe_);
    r += indent_string + "  " + std::string("p_maxrate_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(p_maxrate_mbe_) ) + "\n";
    all_zeros &= (0 == p_maxrate_mbe_);
    r += indent_string + "  " + std::string("upd_pex0_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_pex0_sbe_) ) + "\n";
    all_zeros &= (0 == upd_pex0_sbe_);
    r += indent_string + "  " + std::string("upd_pex0_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_pex0_mbe_) ) + "\n";
    all_zeros &= (0 == upd_pex0_mbe_);
    r += indent_string + "  " + std::string("upd_pex1_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_pex1_sbe_) ) + "\n";
    all_zeros &= (0 == upd_pex1_sbe_);
    r += indent_string + "  " + std::string("upd_pex1_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_pex1_mbe_) ) + "\n";
    all_zeros &= (0 == upd_pex1_mbe_);
    r += indent_string + "  " + std::string("upd_edprsr_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_edprsr_sbe_) ) + "\n";
    all_zeros &= (0 == upd_edprsr_sbe_);
    r += indent_string + "  " + std::string("upd_edprsr_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_edprsr_mbe_) ) + "\n";
    all_zeros &= (0 == upd_edprsr_mbe_);
    r += indent_string + "  " + std::string("pex_credit_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pex_credit_err_) ) + "\n";
    all_zeros &= (0 == pex_credit_err_);
    r += indent_string + "  " + std::string("pex_mac_credit_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pex_mac_credit_err_) ) + "\n";
    all_zeros &= (0 == pex_mac_credit_err_);
    r += indent_string + "  " + std::string("q_watchdog_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_watchdog_sbe_) ) + "\n";
    all_zeros &= (0 == q_watchdog_sbe_);
    r += indent_string + "  " + std::string("q_watchdog_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_watchdog_mbe_) ) + "\n";
    all_zeros &= (0 == q_watchdog_mbe_);
    r += indent_string + "  " + std::string("q_watchdog") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_watchdog_) ) + "\n";
    all_zeros &= (0 == q_watchdog_);
    r += indent_string + "  " + std::string("q_flush_done") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_flush_done_) ) + "\n";
    all_zeros &= (0 == q_flush_done_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TmSchPipeRspecIntrFreezeEnableMutable") + ":\n";
    r += indent_string + "  " + std::string("tdm_table_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tdm_table_sbe_) ) + "\n";
    all_zeros &= (0 == tdm_table_sbe_);
    r += indent_string + "  " + std::string("tdm_table_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tdm_table_mbe_) ) + "\n";
    all_zeros &= (0 == tdm_table_mbe_);
    r += indent_string + "  " + std::string("upd_wac_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_wac_sbe_) ) + "\n";
    all_zeros &= (0 == upd_wac_sbe_);
    r += indent_string + "  " + std::string("upd_wac_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_wac_mbe_) ) + "\n";
    all_zeros &= (0 == upd_wac_mbe_);
    r += indent_string + "  " + std::string("upd_edprsr_advfc_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_edprsr_advfc_sbe_) ) + "\n";
    all_zeros &= (0 == upd_edprsr_advfc_sbe_);
    r += indent_string + "  " + std::string("upd_edprsr_advfc_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_edprsr_advfc_mbe_) ) + "\n";
    all_zeros &= (0 == upd_edprsr_advfc_mbe_);
    r += indent_string + "  " + std::string("q_minrate_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_minrate_sbe_) ) + "\n";
    all_zeros &= (0 == q_minrate_sbe_);
    r += indent_string + "  " + std::string("q_minrate_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_minrate_mbe_) ) + "\n";
    all_zeros &= (0 == q_minrate_mbe_);
    r += indent_string + "  " + std::string("q_excrate_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_excrate_sbe_) ) + "\n";
    all_zeros &= (0 == q_excrate_sbe_);
    r += indent_string + "  " + std::string("q_excrate_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_excrate_mbe_) ) + "\n";
    all_zeros &= (0 == q_excrate_mbe_);
    r += indent_string + "  " + std::string("q_maxrate_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_maxrate_sbe_) ) + "\n";
    all_zeros &= (0 == q_maxrate_sbe_);
    r += indent_string + "  " + std::string("q_maxrate_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_maxrate_mbe_) ) + "\n";
    all_zeros &= (0 == q_maxrate_mbe_);
    r += indent_string + "  " + std::string("l1_minrate_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_minrate_sbe_) ) + "\n";
    all_zeros &= (0 == l1_minrate_sbe_);
    r += indent_string + "  " + std::string("l1_minrate_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_minrate_mbe_) ) + "\n";
    all_zeros &= (0 == l1_minrate_mbe_);
    r += indent_string + "  " + std::string("l1_excrate_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_excrate_sbe_) ) + "\n";
    all_zeros &= (0 == l1_excrate_sbe_);
    r += indent_string + "  " + std::string("l1_excrate_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_excrate_mbe_) ) + "\n";
    all_zeros &= (0 == l1_excrate_mbe_);
    r += indent_string + "  " + std::string("l1_maxrate_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_maxrate_sbe_) ) + "\n";
    all_zeros &= (0 == l1_maxrate_sbe_);
    r += indent_string + "  " + std::string("l1_maxrate_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(l1_maxrate_mbe_) ) + "\n";
    all_zeros &= (0 == l1_maxrate_mbe_);
    r += indent_string + "  " + std::string("p_maxrate_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(p_maxrate_sbe_) ) + "\n";
    all_zeros &= (0 == p_maxrate_sbe_);
    r += indent_string + "  " + std::string("p_maxrate_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(p_maxrate_mbe_) ) + "\n";
    all_zeros &= (0 == p_maxrate_mbe_);
    r += indent_string + "  " + std::string("upd_pex0_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_pex0_sbe_) ) + "\n";
    all_zeros &= (0 == upd_pex0_sbe_);
    r += indent_string + "  " + std::string("upd_pex0_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_pex0_mbe_) ) + "\n";
    all_zeros &= (0 == upd_pex0_mbe_);
    r += indent_string + "  " + std::string("upd_pex1_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_pex1_sbe_) ) + "\n";
    all_zeros &= (0 == upd_pex1_sbe_);
    r += indent_string + "  " + std::string("upd_pex1_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_pex1_mbe_) ) + "\n";
    all_zeros &= (0 == upd_pex1_mbe_);
    r += indent_string + "  " + std::string("upd_edprsr_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_edprsr_sbe_) ) + "\n";
    all_zeros &= (0 == upd_edprsr_sbe_);
    r += indent_string + "  " + std::string("upd_edprsr_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(upd_edprsr_mbe_) ) + "\n";
    all_zeros &= (0 == upd_edprsr_mbe_);
    r += indent_string + "  " + std::string("pex_credit_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pex_credit_err_) ) + "\n";
    all_zeros &= (0 == pex_credit_err_);
    r += indent_string + "  " + std::string("pex_mac_credit_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pex_mac_credit_err_) ) + "\n";
    all_zeros &= (0 == pex_mac_credit_err_);
    r += indent_string + "  " + std::string("q_watchdog_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_watchdog_sbe_) ) + "\n";
    all_zeros &= (0 == q_watchdog_sbe_);
    r += indent_string + "  " + std::string("q_watchdog_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_watchdog_mbe_) ) + "\n";
    all_zeros &= (0 == q_watchdog_mbe_);
    r += indent_string + "  " + std::string("q_watchdog") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_watchdog_) ) + "\n";
    all_zeros &= (0 == q_watchdog_);
    r += indent_string + "  " + std::string("q_flush_done") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_flush_done_) ) + "\n";
    all_zeros &= (0 == q_flush_done_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t tdm_table_sbe_;
  uint8_t tdm_table_mbe_;
  uint8_t upd_wac_sbe_;
  uint8_t upd_wac_mbe_;
  uint8_t upd_edprsr_advfc_sbe_;
  uint8_t upd_edprsr_advfc_mbe_;
  uint8_t q_minrate_sbe_;
  uint8_t q_minrate_mbe_;
  uint8_t q_excrate_sbe_;
  uint8_t q_excrate_mbe_;
  uint8_t q_maxrate_sbe_;
  uint8_t q_maxrate_mbe_;
  uint8_t l1_minrate_sbe_;
  uint8_t l1_minrate_mbe_;
  uint8_t l1_excrate_sbe_;
  uint8_t l1_excrate_mbe_;
  uint8_t l1_maxrate_sbe_;
  uint8_t l1_maxrate_mbe_;
  uint8_t p_maxrate_sbe_;
  uint8_t p_maxrate_mbe_;
  uint8_t upd_pex0_sbe_;
  uint8_t upd_pex0_mbe_;
  uint8_t upd_pex1_sbe_;
  uint8_t upd_pex1_mbe_;
  uint8_t upd_edprsr_sbe_;
  uint8_t upd_edprsr_mbe_;
  uint8_t pex_credit_err_;
  uint8_t pex_mac_credit_err_;
  uint8_t q_watchdog_sbe_;
  uint8_t q_watchdog_mbe_;
  uint8_t q_watchdog_;
  uint8_t q_flush_done_;
private:
  static int StartOffset(
      TmTopRspecEnum selector_tm_top_rspec, int index_tm_sch_pipe_rspec
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    switch (selector_tm_top_rspec) {
      case kTmSchaTop:
        offset += 0x180000; // to get to tm_scha_top
        assert(index_tm_sch_pipe_rspec < 2);
        offset += index_tm_sch_pipe_rspec * 0x8000; // tm_sch_pipe_rspec[]
        offset += 0x50; // to get to intr_freeze_enable
        break;
      case kTmSchbTop:
        offset += 0x200000; // to get to tm_schb_top
        assert(index_tm_sch_pipe_rspec < 2);
        offset += index_tm_sch_pipe_rspec * 0x8000; // tm_sch_pipe_rspec[]
        offset += 0x50; // to get to intr_freeze_enable
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};












  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_TM_SCH_PIPE_RSPEC_INTR_FREEZE_ENABLE_MUTABLE_H__
