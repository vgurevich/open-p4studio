/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_TOP_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_TM_TOP_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>









#include "tm_caa_top_rspec_mutable.h"
#include "tm_clc_top_rspec_mutable.h"
#include "tm_pex_top_rspec_mutable.h"
#include "tm_prc_top_rspec_mutable.h"
#include "tm_pre_top_rspec_mutable.h"
#include "tm_psc_top_rspec_mutable.h"
#include "tm_qac_top_rspec_mutable.h"
#include "tm_qlc_top_rspec_mutable.h"
#include "tm_sch_top_rspec_mutable.h"
#include "tm_wac_top_rspec_mutable.h"

namespace jbayB0 {
  namespace register_classes {

class TmTopRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmTopRspecMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 5767168, true, write_callback, read_callback, std::string("TmTopRspecMutable"))
    {
    }
  TmTopRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "TmTopRspecMutable")
    {
    }
public:





  TmWacTopRspecMutable &tm_wac_top() { return tm_wac_top_; }





  TmCaaTopRspecMutable &tm_caa_top() { return tm_caa_top_; }





  TmQacTopRspecMutable &tm_qac_top() { return tm_qac_top_; }





  TmSchTopRspecMutable &tm_scha_top() { return tm_scha_top_; }





  TmSchTopRspecMutable &tm_schb_top() { return tm_schb_top_; }





  TmClcTopRspecMutable &tm_clc_top() { return tm_clc_top_; }





  TmPexTopRspecMutable &tm_pex_top() { return tm_pex_top_; }





  TmQlcTopRspecMutable &tm_qlc_top() { return tm_qlc_top_; }





  TmPrcTopRspecMutable &tm_prc_top() { return tm_prc_top_; }





  TmPreTopRspecMutable &tm_pre_top() { return tm_pre_top_; }





  TmPscTopRspecMutable &tm_psc_top() { return tm_psc_top_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x80000) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      tm_wac_top_.read( offset, data );
    }
    else if (offset >= 0x80000 && offset < 0x100000) {
      offset -= 0x80000;
      if (read_callback_) read_callback_();
      tm_caa_top_.read( offset, data );
    }
    else if (offset >= 0x100000 && offset < 0x180000) {
      offset -= 0x100000;
      if (read_callback_) read_callback_();
      tm_qac_top_.read( offset, data );
    }
    else if (offset >= 0x180000 && offset < 0x200000) {
      offset -= 0x180000;
      if (read_callback_) read_callback_();
      tm_scha_top_.read( offset, data );
    }
    else if (offset >= 0x200000 && offset < 0x280000) {
      offset -= 0x200000;
      if (read_callback_) read_callback_();
      tm_schb_top_.read( offset, data );
    }
    else if (offset >= 0x280000 && offset < 0x300000) {
      offset -= 0x280000;
      if (read_callback_) read_callback_();
      tm_clc_top_.read( offset, data );
    }
    else if (offset >= 0x300000 && offset < 0x380000) {
      offset -= 0x300000;
      if (read_callback_) read_callback_();
      tm_pex_top_.read( offset, data );
    }
    else if (offset >= 0x380000 && offset < 0x400000) {
      offset -= 0x380000;
      if (read_callback_) read_callback_();
      tm_qlc_top_.read( offset, data );
    }
    else if (offset >= 0x400000 && offset < 0x480000) {
      offset -= 0x400000;
      if (read_callback_) read_callback_();
      tm_prc_top_.read( offset, data );
    }
    else if (offset >= 0x480000 && offset < 0x500000) {
      offset -= 0x480000;
      if (read_callback_) read_callback_();
      tm_pre_top_.read( offset, data );
    }
    else if (offset >= 0x500000 && offset < 0x580000) {
      offset -= 0x500000;
      if (read_callback_) read_callback_();
      tm_psc_top_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x80000) {
      offset -= 0x0;
      tm_wac_top_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80000 && offset < 0x100000) {
      offset -= 0x80000;
      tm_caa_top_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100000 && offset < 0x180000) {
      offset -= 0x100000;
      tm_qac_top_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180000 && offset < 0x200000) {
      offset -= 0x180000;
      tm_scha_top_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200000 && offset < 0x280000) {
      offset -= 0x200000;
      tm_schb_top_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x280000 && offset < 0x300000) {
      offset -= 0x280000;
      tm_clc_top_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x300000 && offset < 0x380000) {
      offset -= 0x300000;
      tm_pex_top_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x380000 && offset < 0x400000) {
      offset -= 0x380000;
      tm_qlc_top_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400000 && offset < 0x480000) {
      offset -= 0x400000;
      tm_prc_top_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x480000 && offset < 0x500000) {
      offset -= 0x480000;
      tm_pre_top_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x500000 && offset < 0x580000) {
      offset -= 0x500000;
      tm_psc_top_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    tm_wac_top_.reset();
    tm_caa_top_.reset();
    tm_qac_top_.reset();
    tm_scha_top_.reset();
    tm_schb_top_.reset();
    tm_clc_top_.reset();
    tm_pex_top_.reset();
    tm_qlc_top_.reset();
    tm_prc_top_.reset();
    tm_pre_top_.reset();
    tm_psc_top_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x80000) {
      offset -= 0x0;
      r += tm_wac_top_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80000 && offset < 0x100000) {
      offset -= 0x80000;
      r += tm_caa_top_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100000 && offset < 0x180000) {
      offset -= 0x100000;
      r += tm_qac_top_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180000 && offset < 0x200000) {
      offset -= 0x180000;
      r += tm_scha_top_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200000 && offset < 0x280000) {
      offset -= 0x200000;
      r += tm_schb_top_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x280000 && offset < 0x300000) {
      offset -= 0x280000;
      r += tm_clc_top_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x300000 && offset < 0x380000) {
      offset -= 0x300000;
      r += tm_pex_top_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x380000 && offset < 0x400000) {
      offset -= 0x380000;
      r += tm_qlc_top_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400000 && offset < 0x480000) {
      offset -= 0x400000;
      r += tm_prc_top_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x480000 && offset < 0x500000) {
      offset -= 0x480000;
      r += tm_pre_top_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x500000 && offset < 0x580000) {
      offset -= 0x500000;
      r += tm_psc_top_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += tm_wac_top_.to_string(print_zeros,indent_string) ;
    r += tm_caa_top_.to_string(print_zeros,indent_string) ;
    r += tm_qac_top_.to_string(print_zeros,indent_string) ;
    r += tm_scha_top_.to_string(print_zeros,indent_string) ;
    r += tm_schb_top_.to_string(print_zeros,indent_string) ;
    r += tm_clc_top_.to_string(print_zeros,indent_string) ;
    r += tm_pex_top_.to_string(print_zeros,indent_string) ;
    r += tm_qlc_top_.to_string(print_zeros,indent_string) ;
    r += tm_prc_top_.to_string(print_zeros,indent_string) ;
    r += tm_pre_top_.to_string(print_zeros,indent_string) ;
    r += tm_psc_top_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  TmWacTopRspecMutable tm_wac_top_;
  TmCaaTopRspecMutable tm_caa_top_;
  TmQacTopRspecMutable tm_qac_top_;
  TmSchTopRspecMutable tm_scha_top_;
  TmSchTopRspecMutable tm_schb_top_;
  TmClcTopRspecMutable tm_clc_top_;
  TmPexTopRspecMutable tm_pex_top_;
  TmQlcTopRspecMutable tm_qlc_top_;
  TmPrcTopRspecMutable tm_prc_top_;
  TmPreTopRspecMutable tm_pre_top_;
  TmPscTopRspecMutable tm_psc_top_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x800000; // to get to tm_top
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace jbayB0

#endif // __REGISTER_INCLUDES_TM_TOP_RSPEC_MUTABLE_H__
