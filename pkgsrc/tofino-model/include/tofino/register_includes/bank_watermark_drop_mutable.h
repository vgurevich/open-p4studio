/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_BANK_WATERMARK_DROP_MUTABLE_H__
#define __REGISTER_INCLUDES_BANK_WATERMARK_DROP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class BankWatermarkDropMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  BankWatermarkDropMutable(
      int chipNumber, int index_pipe_addrmap, int index_ibp_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ibp_rspec), 4, true, write_callback, read_callback, std::string("BankWatermarkDropMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ibp_rspec))
    {
    }
  BankWatermarkDropMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "BankWatermarkDropMutable")
    {
    }
public:






  uint16_t thr_bk_hi_drop() { return thr_bk_hi_drop_; }
  void thr_bk_hi_drop(const uint16_t &v) { thr_bk_hi_drop_=v; }





  uint16_t thr_bk_lo_drop() { return thr_bk_lo_drop_; }
  void thr_bk_lo_drop(const uint16_t &v) { thr_bk_lo_drop_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (thr_bk_hi_drop_ & 0x3ff);
    *data |= ((thr_bk_lo_drop_ & 0x3ff) << 16);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    thr_bk_hi_drop_ = (data & 0x3ff);
    thr_bk_lo_drop_ = ((data >> 16) & 0x3ff);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    thr_bk_hi_drop_ = 0x4;
    thr_bk_lo_drop_ = 0x10;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("BankWatermarkDropMutable") + ":\n";
    r += indent_string + "  " + std::string("thr_bk_hi_drop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(thr_bk_hi_drop_) ) + "\n";
    all_zeros &= (0 == thr_bk_hi_drop_);
    r += indent_string + "  " + std::string("thr_bk_lo_drop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(thr_bk_lo_drop_) ) + "\n";
    all_zeros &= (0 == thr_bk_lo_drop_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("BankWatermarkDropMutable") + ":\n";
    r += indent_string + "  " + std::string("thr_bk_hi_drop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(thr_bk_hi_drop_) ) + "\n";
    all_zeros &= (0 == thr_bk_hi_drop_);
    r += indent_string + "  " + std::string("thr_bk_lo_drop") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(thr_bk_lo_drop_) ) + "\n";
    all_zeros &= (0 == thr_bk_lo_drop_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint16_t thr_bk_hi_drop_;
  uint16_t thr_bk_lo_drop_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ibp_rspec
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    assert(index_ibp_rspec < 18);
    offset += index_ibp_rspec * 0x2000; // ibp_rspec[]
    offset += 0x1800; // to get to ing_buf_regs
    offset += 0x14; // to get to glb_group_bank_watermark_drop
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_BANK_WATERMARK_DROP_MUTABLE_H__
