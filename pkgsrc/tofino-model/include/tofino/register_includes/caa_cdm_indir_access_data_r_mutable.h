/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_CAA_CDM_INDIR_ACCESS_DATA_R_MUTABLE_H__
#define __REGISTER_INCLUDES_CAA_CDM_INDIR_ACCESS_DATA_R_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class CaaCdmIndirAccessDataRMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  CaaCdmIndirAccessDataRMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 80, true, write_callback, read_callback, std::string("CaaCdmIndirAccessDataRMutable"))
    {
    }
  CaaCdmIndirAccessDataRMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "CaaCdmIndirAccessDataRMutable")
    {
    }
public:






  uint32_t value(int j0) { return value_[j0]; }
  void value(int j0,const uint32_t &v) { value_[j0]=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = value_[0];
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = value_[1];
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = value_[2];
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = value_[3];
    }
    else if (offset >= 0x10 && offset < 0x14) {
      if (read_callback_) read_callback_();
      *data = value_[4];
    }
    else if (offset >= 0x14 && offset < 0x18) {
      if (read_callback_) read_callback_();
      *data = value_[5];
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      if (read_callback_) read_callback_();
      *data = value_[6];
    }
    else if (offset >= 0x1c && offset < 0x20) {
      if (read_callback_) read_callback_();
      *data = value_[7];
    }
    else if (offset >= 0x20 && offset < 0x24) {
      if (read_callback_) read_callback_();
      *data = value_[8];
    }
    else if (offset >= 0x24 && offset < 0x28) {
      if (read_callback_) read_callback_();
      *data = value_[9];
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      if (read_callback_) read_callback_();
      *data = value_[10];
    }
    else if (offset >= 0x2c && offset < 0x30) {
      if (read_callback_) read_callback_();
      *data = value_[11];
    }
    else if (offset >= 0x30 && offset < 0x34) {
      if (read_callback_) read_callback_();
      *data = value_[12];
    }
    else if (offset >= 0x34 && offset < 0x38) {
      if (read_callback_) read_callback_();
      *data = value_[13];
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      if (read_callback_) read_callback_();
      *data = value_[14];
    }
    else if (offset >= 0x3c && offset < 0x40) {
      if (read_callback_) read_callback_();
      *data = value_[15];
    }
    else if (offset >= 0x40 && offset < 0x44) {
      if (read_callback_) read_callback_();
      *data = value_[16];
    }
    else if (offset >= 0x44 && offset < 0x48) {
      if (read_callback_) read_callback_();
      *data = value_[17];
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      if (read_callback_) read_callback_();
      *data = value_[18];
    }
    else if (offset >= 0x4c && offset < 0x50) {
      if (read_callback_) read_callback_();
      *data = value_[19];
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      value_[0] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      value_[1] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      value_[2] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      value_[3] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      value_[4] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      value_[5] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      value_[6] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      value_[7] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      value_[8] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      value_[9] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      value_[10] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      value_[11] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      value_[12] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      value_[13] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      value_[14] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      value_[15] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      value_[16] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x44 && offset < 0x48) {
      value_[17] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      value_[18] = data;
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c && offset < 0x50) {
      value_[19] = data;
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    value_[0] = 0x0;
    value_[1] = 0x0;
    value_[2] = 0x0;
    value_[3] = 0x0;
    value_[4] = 0x0;
    value_[5] = 0x0;
    value_[6] = 0x0;
    value_[7] = 0x0;
    value_[8] = 0x0;
    value_[9] = 0x0;
    value_[10] = 0x0;
    value_[11] = 0x0;
    value_[12] = 0x0;
    value_[13] = 0x0;
    value_[14] = 0x0;
    value_[15] = 0x0;
    value_[16] = 0x0;
    value_[17] = 0x0;
    value_[18] = 0x0;
    value_[19] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("CaaCdmIndirAccessDataRMutable") + ":\n";
    for (uint32_t f=0;f<20;++f) {
      r += indent_string + "  " + std::string("value") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(value_[f]) ) + "\n";
      all_zeros &= (0 == value_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("CaaCdmIndirAccessDataRMutable") + ":\n";
    for (uint32_t f=0;f<20;++f) {
      r += indent_string + "  " + std::string("value") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(value_[f]) ) + "\n";
      all_zeros &= (0 == value_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint32_t, 20 > value_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x40000; // to get to tm_caa
    offset += 0x20000; // to get to cdm
    offset += 0x80; // to get to cdm_indir_access_data
    return offset;
  }

};












  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_CAA_CDM_INDIR_ACCESS_DATA_R_MUTABLE_H__
