/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_CBC_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_CBC_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "cbus_rspec_mutable.h"
#include "dru_rspec_mutable.h"

namespace tofino {
  namespace register_classes {

class CbcRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  CbcRspecMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 492, true, write_callback, read_callback, std::string("CbcRspecMutable"))
    {
    }
  CbcRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "CbcRspecMutable")
    {
    }
public:





  CbusRspecMutable &cbc_cbus() { return cbc_cbus_; }





  DruRspecMutable &cbc_wl_tx_dr() { return cbc_wl_tx_dr_; }





  DruRspecMutable &cbc_wl_cpl_dr() { return cbc_wl_cpl_dr_; }





  DruRspecMutable &cbc_lq_fm_dr() { return cbc_lq_fm_dr_; }





  DruRspecMutable &cbc_lq_rx_dr() { return cbc_lq_rx_dr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0xa8) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      cbc_cbus_.read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x12c) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      cbc_wl_tx_dr_.read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x16c) {
      offset -= 0x140;
      if (read_callback_) read_callback_();
      cbc_wl_cpl_dr_.read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x1ac) {
      offset -= 0x180;
      if (read_callback_) read_callback_();
      cbc_lq_fm_dr_.read( offset, data );
    }
    else if (offset >= 0x1c0 && offset < 0x1ec) {
      offset -= 0x1c0;
      if (read_callback_) read_callback_();
      cbc_lq_rx_dr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0xa8) {
      offset -= 0x0;
      cbc_cbus_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x12c) {
      offset -= 0x100;
      cbc_wl_tx_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x16c) {
      offset -= 0x140;
      cbc_wl_cpl_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x1ac) {
      offset -= 0x180;
      cbc_lq_fm_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c0 && offset < 0x1ec) {
      offset -= 0x1c0;
      cbc_lq_rx_dr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    cbc_cbus_.reset();
    cbc_wl_tx_dr_.reset();
    cbc_wl_cpl_dr_.reset();
    cbc_lq_fm_dr_.reset();
    cbc_lq_rx_dr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0xa8) {
      offset -= 0x0;
      r += cbc_cbus_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x12c) {
      offset -= 0x100;
      r += cbc_wl_tx_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x16c) {
      offset -= 0x140;
      r += cbc_wl_cpl_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x1ac) {
      offset -= 0x180;
      r += cbc_lq_fm_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c0 && offset < 0x1ec) {
      offset -= 0x1c0;
      r += cbc_lq_rx_dr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += cbc_cbus_.to_string(print_zeros,indent_string) ;
    r += cbc_wl_tx_dr_.to_string(print_zeros,indent_string) ;
    r += cbc_wl_cpl_dr_.to_string(print_zeros,indent_string) ;
    r += cbc_lq_fm_dr_.to_string(print_zeros,indent_string) ;
    r += cbc_lq_rx_dr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  CbusRspecMutable cbc_cbus_;
  DruRspecMutable cbc_wl_tx_dr_;
  DruRspecMutable cbc_wl_cpl_dr_;
  DruRspecMutable cbc_lq_fm_dr_;
  DruRspecMutable cbc_lq_rx_dr_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x140000; // to get to cbc
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_CBC_RSPEC_MUTABLE_H__
