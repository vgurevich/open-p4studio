/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_CHIP_H__
#define __REGISTER_INCLUDES_CHIP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "dvsl_addrmap.h"
#include "gpio_regs.h"
#include "mac_addrmap.h"
#include "pipe_addrmap.h"
#include "serdes_addrmap.h"

namespace tofino {
  namespace register_classes {

class Chip : public model_core::RegisterBlock<RegisterCallback> {
public:
  Chip(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 67108864, false, write_callback, read_callback, std::string("Chip"))
    {
    }
  Chip(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "Chip")
    {
    }
public:





  DvslAddrmap &device_select() { return device_select_; }






  SerdesAddrmap &serdes(int j0) { return serdes_[j0]; }







  MacAddrmap &macs(int j0) { return macs_[j0]; }





  GpioRegs &ethgpiobr() { return ethgpiobr_; }





  GpioRegs &ethgpiotl() { return ethgpiotl_; }







  PipeAddrmap &pipes(int j0) { return pipes_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x668000) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      device_select_.read( offset, data );
    }
    else if (offset >= 0x800000 && offset < 0x800008) {
      offset -= 0x800000;
      int i0 = offset / 0x400000;
      offset  -= i0 * 0x400000;
      if (read_callback_) read_callback_();
      serdes_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1000000 && offset < 0x1816fc8) {
      offset -= 0x1000000;
      int i0 = offset / 0x20000;
      offset  -= i0 * 0x20000;
      if (read_callback_) read_callback_();
      macs_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1820000 && offset < 0x182037c) {
      offset -= 0x1820000;
      if (read_callback_) read_callback_();
      ethgpiobr_.read( offset, data );
    }
    else if (offset >= 0x1840000 && offset < 0x184037c) {
      offset -= 0x1840000;
      if (read_callback_) read_callback_();
      ethgpiotl_.read( offset, data );
    }
    else if (offset >= 0x2000000 && offset < 0x4000000) {
      offset -= 0x2000000;
      int i0 = offset / 0x800000;
      offset  -= i0 * 0x800000;
      if (read_callback_) read_callback_();
      pipes_[ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x668000) {
      offset -= 0x0;
      device_select_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x800000 && offset < 0x800008) {
      offset -= 0x800000;
      int i0 = offset / 0x400000;
      offset  -= i0 * 0x400000;
      serdes_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1000000 && offset < 0x1816fc8) {
      offset -= 0x1000000;
      int i0 = offset / 0x20000;
      offset  -= i0 * 0x20000;
      macs_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1820000 && offset < 0x182037c) {
      offset -= 0x1820000;
      ethgpiobr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1840000 && offset < 0x184037c) {
      offset -= 0x1840000;
      ethgpiotl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2000000 && offset < 0x4000000) {
      offset -= 0x2000000;
      int i0 = offset / 0x800000;
      offset  -= i0 * 0x800000;
      pipes_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    device_select_.reset();
    for (auto &f0 : serdes_) {
      f0.reset();
    }
    for (auto &f0 : macs_) {
      f0.reset();
    }
    ethgpiobr_.reset();
    ethgpiotl_.reset();
    for (auto &f0 : pipes_) {
      f0.reset();
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x668000) {
      offset -= 0x0;
      r += device_select_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x800000 && offset < 0x800008) {
      offset -= 0x800000;
      int i0 = offset / 0x400000;
      offset  -= i0 * 0x400000;
      r += serdes_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1000000 && offset < 0x1816fc8) {
      offset -= 0x1000000;
      int i0 = offset / 0x20000;
      offset  -= i0 * 0x20000;
      r += macs_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1820000 && offset < 0x182037c) {
      offset -= 0x1820000;
      r += ethgpiobr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1840000 && offset < 0x184037c) {
      offset -= 0x1840000;
      r += ethgpiotl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2000000 && offset < 0x4000000) {
      offset -= 0x2000000;
      int i0 = offset / 0x800000;
      offset  -= i0 * 0x800000;
      r += pipes_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += device_select_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<2;++a0) {
      r += serdes_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<65;++a0) {
      r += macs_[a0].to_string(print_zeros,indent_string) ;
    }
    r += ethgpiobr_.to_string(print_zeros,indent_string) ;
    r += ethgpiotl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += pipes_[a0].to_string(print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DvslAddrmap device_select_;
  std::array< SerdesAddrmap, 2 > serdes_;
  std::array< MacAddrmap, 65 > macs_;
  GpioRegs ethgpiobr_;
  GpioRegs ethgpiotl_;
  std::array< PipeAddrmap, 4 > pipes_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_CHIP_H__
