/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_CPU_GLB_CTRL_H__
#define __REGISTER_INCLUDES_CPU_GLB_CTRL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class CpuGlbCtrl : public model_core::RegisterBlock<RegisterCallback> {
public:
  CpuGlbCtrl(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, false, write_callback, read_callback, std::string("CpuGlbCtrl"))
    {
    }
  CpuGlbCtrl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "CpuGlbCtrl")
    {
    }
public:









  uint16_t &cpu_max_dw() { return cpu_max_dw_; }







  uint8_t &cpu_non_dw() { return cpu_non_dw_; }







  uint8_t &cpu_wr_inv_order() { return cpu_wr_inv_order_; }







  uint8_t &cpu_rd_inv_order() { return cpu_rd_inv_order_; }







  uint8_t &cpu_disable_mot() { return cpu_disable_mot_; }







  uint8_t &ena_reord() { return ena_reord_; }







  uint8_t &ena_pois() { return ena_pois_; }







  uint8_t &data_pois() { return data_pois_; }





  uint16_t &cpu_rsvd() { return cpu_rsvd_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (cpu_max_dw_ & 0x3ff);
    *data |= ((cpu_non_dw_ & 0x1) << 12);
    *data |= ((cpu_wr_inv_order_ & 0x1) << 13);
    *data |= ((cpu_rd_inv_order_ & 0x1) << 14);
    *data |= ((cpu_disable_mot_ & 0x1) << 15);
    *data |= ((ena_reord_ & 0x1) << 16);
    *data |= ((ena_pois_ & 0x1) << 17);
    *data |= ((data_pois_ & 0x1) << 18);
    *data |= ((cpu_rsvd_ & 0x1fff) << 19);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    cpu_max_dw_ = (data & 0x3ff);
    cpu_non_dw_ = ((data >> 12) & 0x1);
    cpu_wr_inv_order_ = ((data >> 13) & 0x1);
    cpu_rd_inv_order_ = ((data >> 14) & 0x1);
    cpu_disable_mot_ = ((data >> 15) & 0x1);
    ena_reord_ = ((data >> 16) & 0x1);
    ena_pois_ = ((data >> 17) & 0x1);
    data_pois_ = ((data >> 18) & 0x1);
    cpu_rsvd_ = ((data >> 19) & 0x1fff);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    cpu_max_dw_ = 0x2;
    cpu_non_dw_ = 0x0;
    cpu_wr_inv_order_ = 0x0;
    cpu_rd_inv_order_ = 0x0;
    cpu_disable_mot_ = 0x0;
    ena_reord_ = 0x1;
    ena_pois_ = 0x1;
    data_pois_ = 0x1;
    cpu_rsvd_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("CpuGlbCtrl") + ":\n";
    r += indent_string + "  " + std::string("cpu_max_dw") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_max_dw_) ) + "\n";
    all_zeros &= (0 == cpu_max_dw_);
    r += indent_string + "  " + std::string("cpu_non_dw") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_non_dw_) ) + "\n";
    all_zeros &= (0 == cpu_non_dw_);
    r += indent_string + "  " + std::string("cpu_wr_inv_order") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_wr_inv_order_) ) + "\n";
    all_zeros &= (0 == cpu_wr_inv_order_);
    r += indent_string + "  " + std::string("cpu_rd_inv_order") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_rd_inv_order_) ) + "\n";
    all_zeros &= (0 == cpu_rd_inv_order_);
    r += indent_string + "  " + std::string("cpu_disable_mot") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_disable_mot_) ) + "\n";
    all_zeros &= (0 == cpu_disable_mot_);
    r += indent_string + "  " + std::string("ena_reord") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ena_reord_) ) + "\n";
    all_zeros &= (0 == ena_reord_);
    r += indent_string + "  " + std::string("ena_pois") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ena_pois_) ) + "\n";
    all_zeros &= (0 == ena_pois_);
    r += indent_string + "  " + std::string("data_pois") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(data_pois_) ) + "\n";
    all_zeros &= (0 == data_pois_);
    r += indent_string + "  " + std::string("cpu_rsvd") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_rsvd_) ) + "\n";
    all_zeros &= (0 == cpu_rsvd_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("CpuGlbCtrl") + ":\n";
    r += indent_string + "  " + std::string("cpu_max_dw") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_max_dw_) ) + "\n";
    all_zeros &= (0 == cpu_max_dw_);
    r += indent_string + "  " + std::string("cpu_non_dw") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_non_dw_) ) + "\n";
    all_zeros &= (0 == cpu_non_dw_);
    r += indent_string + "  " + std::string("cpu_wr_inv_order") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_wr_inv_order_) ) + "\n";
    all_zeros &= (0 == cpu_wr_inv_order_);
    r += indent_string + "  " + std::string("cpu_rd_inv_order") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_rd_inv_order_) ) + "\n";
    all_zeros &= (0 == cpu_rd_inv_order_);
    r += indent_string + "  " + std::string("cpu_disable_mot") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_disable_mot_) ) + "\n";
    all_zeros &= (0 == cpu_disable_mot_);
    r += indent_string + "  " + std::string("ena_reord") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ena_reord_) ) + "\n";
    all_zeros &= (0 == ena_reord_);
    r += indent_string + "  " + std::string("ena_pois") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ena_pois_) ) + "\n";
    all_zeros &= (0 == ena_pois_);
    r += indent_string + "  " + std::string("data_pois") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(data_pois_) ) + "\n";
    all_zeros &= (0 == data_pois_);
    r += indent_string + "  " + std::string("cpu_rsvd") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_rsvd_) ) + "\n";
    all_zeros &= (0 == cpu_rsvd_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint16_t cpu_max_dw_;
  uint8_t cpu_non_dw_;
  uint8_t cpu_wr_inv_order_;
  uint8_t cpu_rd_inv_order_;
  uint8_t cpu_disable_mot_;
  uint8_t ena_reord_;
  uint8_t ena_pois_;
  uint8_t data_pois_;
  uint16_t cpu_rsvd_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x30; // to get to pcie_regs_cpu_glb_ctrl
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_CPU_GLB_CTRL_H__
