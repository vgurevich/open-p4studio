/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_HEADER_INGRESS_ONLY_G_H__
#define __REGISTER_INCLUDES_DPRSR_HEADER_INGRESS_ONLY_G_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "dprsr_bypass_egr_mode_r.h"
#include "dprsr_copy_to_c_p_u_p_v_r.h"
#include "dprsr_copy_to_cpu_cos_r.h"
#include "dprsr_ct_disable_mode_r.h"
#include "dprsr_ct_mcast_mode_r.h"
#include "dprsr_deflect_on_drop_r.h"
#include "dprsr_ecc_ctrl_r.h"
#include "dprsr_edf_thresh_r.h"
#include "dprsr_egress_multicast_group_r.h"
#include "dprsr_hash_l_a_g_e_c_m_p_mcast_r.h"
#include "dprsr_header_ingress_only_g_intr.h"
#include "dprsr_header_ingress_only_g_intr_enable0.h"
#include "dprsr_header_ingress_only_g_intr_enable1.h"
#include "dprsr_header_ingress_only_g_intr_freeze_enable.h"
#include "dprsr_header_ingress_only_g_intr_inject.h"
#include "dprsr_header_ingress_only_g_intr_status.h"
#include "dprsr_header_ingress_only_g_pv_tbl0_mbe_errlog.h"
#include "dprsr_header_ingress_only_g_pv_tbl0_sbe_errlog.h"
#include "dprsr_header_ingress_only_g_pv_tbl1_mbe_errlog.h"
#include "dprsr_header_ingress_only_g_pv_tbl1_sbe_errlog.h"
#include "dprsr_header_ingress_only_g_pv_tbl_mbe_err.h"
#include "dprsr_header_ingress_only_g_pv_tbl_sbe_err.h"
#include "dprsr_icos_r.h"
#include "dprsr_meter_color_r.h"
#include "dprsr_physical_ingress_port_r.h"
#include "dprsr_qid_r.h"
#include "dprsr_rid_r.h"
#include "dprsr_use_yid_tbl_r.h"
#include "dprsr_xid_r.h"
#include "dprsr_yid_r.h"

namespace tofino {
  namespace register_classes {

class DprsrHeaderIngressOnlyG : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrHeaderIngressOnlyG(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 176, false, write_callback, read_callback, std::string("DprsrHeaderIngressOnlyG")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrHeaderIngressOnlyG(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DprsrHeaderIngressOnlyG")
    {
    }
public:





  DprsrPhysicalIngressPortR &ingr_ingress_port() { return ingr_ingress_port_; }







  DprsrEgressMulticastGroupR &ingr_egress_multicast_group(int j0) { return ingr_egress_multicast_group_[j0]; }







  DprsrHashLAGECMPMcastR &ingr_hash_lag_ecmp_mcast(int j0) { return ingr_hash_lag_ecmp_mcast_[j0]; }





  DprsrCopyToCpuCosR &ingr_copy_to_cpu_cos() { return ingr_copy_to_cpu_cos_; }





  DprsrCopyToCPUPVR &ingr_copy_to_cpu_pv() { return ingr_copy_to_cpu_pv_; }





  DprsrDeflectOnDropR &ingr_deflect_on_drop() { return ingr_deflect_on_drop_; }





  DprsrMeterColorR &ingr_meter_color() { return ingr_meter_color_; }





  DprsrIcosR &ingr_icos() { return ingr_icos_; }





  DprsrQidR &ingr_qid() { return ingr_qid_; }





  DprsrXidR &ingr_xid() { return ingr_xid_; }





  DprsrYidR &ingr_yid() { return ingr_yid_; }





  DprsrRidR &ingr_rid() { return ingr_rid_; }





  DprsrUseYidTblR &ingr_yid_tbl() { return ingr_yid_tbl_; }





  DprsrBypassEgrModeR &ingr_bypss_egr() { return ingr_bypss_egr_; }





  DprsrCtDisableModeR &ingr_ct_disable() { return ingr_ct_disable_; }





  DprsrCtMcastModeR &ingr_ct_mcast() { return ingr_ct_mcast_; }





  DprsrEccCtrlR &ingr_pvt_ecc_ctrl() { return ingr_pvt_ecc_ctrl_; }





  DprsrHeaderIngressOnlyGPvTbl0SbeErrlog &ingr_pv_tbl0_sbe_errlog() { return ingr_pv_tbl0_sbe_errlog_; }





  DprsrHeaderIngressOnlyGPvTbl0MbeErrlog &ingr_pv_tbl0_mbe_errlog() { return ingr_pv_tbl0_mbe_errlog_; }





  DprsrHeaderIngressOnlyGPvTbl1SbeErrlog &ingr_pv_tbl1_sbe_errlog() { return ingr_pv_tbl1_sbe_errlog_; }





  DprsrHeaderIngressOnlyGPvTbl1MbeErrlog &ingr_pv_tbl1_mbe_errlog() { return ingr_pv_tbl1_mbe_errlog_; }





  DprsrHeaderIngressOnlyGPvTblSbeErr &ingr_pv_tbl_sbe_err() { return ingr_pv_tbl_sbe_err_; }





  DprsrHeaderIngressOnlyGPvTblMbeErr &ingr_pv_tbl_mbe_err() { return ingr_pv_tbl_mbe_err_; }







  DprsrEdfThreshR &ingr_edf_thresh() { return ingr_edf_thresh_; }
  DprsrHeaderIngressOnlyGIntr &ingr_intr() { return ingr_intr_; }






  DprsrHeaderIngressOnlyGIntrStatus &ingr_intr_status() { return ingr_intr_status_; }







  DprsrHeaderIngressOnlyGIntrEnable0 &ingr_intr_enable0() { return ingr_intr_enable0_; }







  DprsrHeaderIngressOnlyGIntrEnable1 &ingr_intr_enable1() { return ingr_intr_enable1_; }








  DprsrHeaderIngressOnlyGIntrInject &ingr_intr_inject() { return ingr_intr_inject_; }





  DprsrHeaderIngressOnlyGIntrFreezeEnable &ingr_intr_freeze_enable() { return ingr_intr_freeze_enable_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x400 && offset < 0x404) {
      offset -= 0x400;
      if (read_callback_) read_callback_();
      ingr_ingress_port_.read( offset, data );
    }
    else if (offset >= 0x408 && offset < 0x410) {
      offset -= 0x408;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      ingr_egress_multicast_group_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x410 && offset < 0x418) {
      offset -= 0x410;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      ingr_hash_lag_ecmp_mcast_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x418 && offset < 0x41c) {
      offset -= 0x418;
      if (read_callback_) read_callback_();
      ingr_copy_to_cpu_cos_.read( offset, data );
    }
    else if (offset >= 0x41c && offset < 0x420) {
      offset -= 0x41c;
      if (read_callback_) read_callback_();
      ingr_copy_to_cpu_pv_.read( offset, data );
    }
    else if (offset >= 0x420 && offset < 0x424) {
      offset -= 0x420;
      if (read_callback_) read_callback_();
      ingr_deflect_on_drop_.read( offset, data );
    }
    else if (offset >= 0x424 && offset < 0x428) {
      offset -= 0x424;
      if (read_callback_) read_callback_();
      ingr_meter_color_.read( offset, data );
    }
    else if (offset >= 0x428 && offset < 0x42c) {
      offset -= 0x428;
      if (read_callback_) read_callback_();
      ingr_icos_.read( offset, data );
    }
    else if (offset >= 0x42c && offset < 0x430) {
      offset -= 0x42c;
      if (read_callback_) read_callback_();
      ingr_qid_.read( offset, data );
    }
    else if (offset >= 0x430 && offset < 0x434) {
      offset -= 0x430;
      if (read_callback_) read_callback_();
      ingr_xid_.read( offset, data );
    }
    else if (offset >= 0x434 && offset < 0x438) {
      offset -= 0x434;
      if (read_callback_) read_callback_();
      ingr_yid_.read( offset, data );
    }
    else if (offset >= 0x438 && offset < 0x43c) {
      offset -= 0x438;
      if (read_callback_) read_callback_();
      ingr_rid_.read( offset, data );
    }
    else if (offset >= 0x43c && offset < 0x440) {
      offset -= 0x43c;
      if (read_callback_) read_callback_();
      ingr_yid_tbl_.read( offset, data );
    }
    else if (offset >= 0x440 && offset < 0x444) {
      offset -= 0x440;
      if (read_callback_) read_callback_();
      ingr_bypss_egr_.read( offset, data );
    }
    else if (offset >= 0x444 && offset < 0x448) {
      offset -= 0x444;
      if (read_callback_) read_callback_();
      ingr_ct_disable_.read( offset, data );
    }
    else if (offset >= 0x448 && offset < 0x44c) {
      offset -= 0x448;
      if (read_callback_) read_callback_();
      ingr_ct_mcast_.read( offset, data );
    }
    else if (offset >= 0x44c && offset < 0x450) {
      offset -= 0x44c;
      if (read_callback_) read_callback_();
      ingr_pvt_ecc_ctrl_.read( offset, data );
    }
    else if (offset >= 0x494 && offset < 0x498) {
      offset -= 0x494;
      if (read_callback_) read_callback_();
      ingr_pv_tbl0_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x498 && offset < 0x49c) {
      offset -= 0x498;
      if (read_callback_) read_callback_();
      ingr_pv_tbl0_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x49c && offset < 0x4a0) {
      offset -= 0x49c;
      if (read_callback_) read_callback_();
      ingr_pv_tbl1_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x4a0 && offset < 0x4a4) {
      offset -= 0x4a0;
      if (read_callback_) read_callback_();
      ingr_pv_tbl1_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x4a4 && offset < 0x4a8) {
      offset -= 0x4a4;
      if (read_callback_) read_callback_();
      ingr_pv_tbl_sbe_err_.read( offset, data );
    }
    else if (offset >= 0x4a8 && offset < 0x4ac) {
      offset -= 0x4a8;
      if (read_callback_) read_callback_();
      ingr_pv_tbl_mbe_err_.read( offset, data );
    }
    else if (offset >= 0x4ac && offset < 0x4b0) {
      offset -= 0x4ac;
      if (read_callback_) read_callback_();
      ingr_edf_thresh_.read( offset, data );
    }
    else if (offset >= 0x480 && offset < 0x494) {
      offset -= 0x480;
      if (read_callback_) read_callback_();
      ingr_intr_.read( offset, data );
    }
    else if (offset >= 0x480 && offset < 0x484) {
      offset -= 0x480;
      if (read_callback_) read_callback_();
      ingr_intr_status_.read( offset, data );
    }
    else if (offset >= 0x484 && offset < 0x488) {
      offset -= 0x484;
      if (read_callback_) read_callback_();
      ingr_intr_enable0_.read( offset, data );
    }
    else if (offset >= 0x488 && offset < 0x48c) {
      offset -= 0x488;
      if (read_callback_) read_callback_();
      ingr_intr_enable1_.read( offset, data );
    }
    else if (offset >= 0x48c && offset < 0x490) {
      offset -= 0x48c;
      if (read_callback_) read_callback_();
      ingr_intr_inject_.read( offset, data );
    }
    else if (offset >= 0x490 && offset < 0x494) {
      offset -= 0x490;
      if (read_callback_) read_callback_();
      ingr_intr_freeze_enable_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x400 && offset < 0x404) {
      offset -= 0x400;
      ingr_ingress_port_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x408 && offset < 0x410) {
      offset -= 0x408;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      ingr_egress_multicast_group_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x410 && offset < 0x418) {
      offset -= 0x410;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      ingr_hash_lag_ecmp_mcast_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x418 && offset < 0x41c) {
      offset -= 0x418;
      ingr_copy_to_cpu_cos_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x41c && offset < 0x420) {
      offset -= 0x41c;
      ingr_copy_to_cpu_pv_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x420 && offset < 0x424) {
      offset -= 0x420;
      ingr_deflect_on_drop_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x424 && offset < 0x428) {
      offset -= 0x424;
      ingr_meter_color_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x428 && offset < 0x42c) {
      offset -= 0x428;
      ingr_icos_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x42c && offset < 0x430) {
      offset -= 0x42c;
      ingr_qid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x430 && offset < 0x434) {
      offset -= 0x430;
      ingr_xid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x434 && offset < 0x438) {
      offset -= 0x434;
      ingr_yid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x438 && offset < 0x43c) {
      offset -= 0x438;
      ingr_rid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x43c && offset < 0x440) {
      offset -= 0x43c;
      ingr_yid_tbl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x440 && offset < 0x444) {
      offset -= 0x440;
      ingr_bypss_egr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x444 && offset < 0x448) {
      offset -= 0x444;
      ingr_ct_disable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x448 && offset < 0x44c) {
      offset -= 0x448;
      ingr_ct_mcast_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x44c && offset < 0x450) {
      offset -= 0x44c;
      ingr_pvt_ecc_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x494 && offset < 0x498) {
      offset -= 0x494;
      ingr_pv_tbl0_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x498 && offset < 0x49c) {
      offset -= 0x498;
      ingr_pv_tbl0_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x49c && offset < 0x4a0) {
      offset -= 0x49c;
      ingr_pv_tbl1_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4a0 && offset < 0x4a4) {
      offset -= 0x4a0;
      ingr_pv_tbl1_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4a4 && offset < 0x4a8) {
      offset -= 0x4a4;
      ingr_pv_tbl_sbe_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4a8 && offset < 0x4ac) {
      offset -= 0x4a8;
      ingr_pv_tbl_mbe_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4ac && offset < 0x4b0) {
      offset -= 0x4ac;
      ingr_edf_thresh_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x480 && offset < 0x494) {
      offset -= 0x480;
      ingr_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x480 && offset < 0x484) {
      offset -= 0x480;
      ingr_intr_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x484 && offset < 0x488) {
      offset -= 0x484;
      ingr_intr_enable0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x488 && offset < 0x48c) {
      offset -= 0x488;
      ingr_intr_enable1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48c && offset < 0x490) {
      offset -= 0x48c;
      ingr_intr_inject_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x490 && offset < 0x494) {
      offset -= 0x490;
      ingr_intr_freeze_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    ingr_ingress_port_.reset();
    for (auto &f0 : ingr_egress_multicast_group_) {
      f0.reset();
    }
    for (auto &f0 : ingr_hash_lag_ecmp_mcast_) {
      f0.reset();
    }
    ingr_copy_to_cpu_cos_.reset();
    ingr_copy_to_cpu_pv_.reset();
    ingr_deflect_on_drop_.reset();
    ingr_meter_color_.reset();
    ingr_icos_.reset();
    ingr_qid_.reset();
    ingr_xid_.reset();
    ingr_yid_.reset();
    ingr_rid_.reset();
    ingr_yid_tbl_.reset();
    ingr_bypss_egr_.reset();
    ingr_ct_disable_.reset();
    ingr_ct_mcast_.reset();
    ingr_pvt_ecc_ctrl_.reset();
    ingr_pv_tbl0_sbe_errlog_.reset();
    ingr_pv_tbl0_mbe_errlog_.reset();
    ingr_pv_tbl1_sbe_errlog_.reset();
    ingr_pv_tbl1_mbe_errlog_.reset();
    ingr_pv_tbl_sbe_err_.reset();
    ingr_pv_tbl_mbe_err_.reset();
    ingr_edf_thresh_.reset();
    ingr_intr_.reset();
    ingr_intr_status_.reset();
    ingr_intr_enable0_.reset();
    ingr_intr_enable1_.reset();
    ingr_intr_inject_.reset();
    ingr_intr_freeze_enable_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x400 && offset < 0x404) {
      offset -= 0x400;
      r += ingr_ingress_port_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x408 && offset < 0x410) {
      offset -= 0x408;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += ingr_egress_multicast_group_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x410 && offset < 0x418) {
      offset -= 0x410;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += ingr_hash_lag_ecmp_mcast_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x418 && offset < 0x41c) {
      offset -= 0x418;
      r += ingr_copy_to_cpu_cos_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x41c && offset < 0x420) {
      offset -= 0x41c;
      r += ingr_copy_to_cpu_pv_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x420 && offset < 0x424) {
      offset -= 0x420;
      r += ingr_deflect_on_drop_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x424 && offset < 0x428) {
      offset -= 0x424;
      r += ingr_meter_color_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x428 && offset < 0x42c) {
      offset -= 0x428;
      r += ingr_icos_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x42c && offset < 0x430) {
      offset -= 0x42c;
      r += ingr_qid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x430 && offset < 0x434) {
      offset -= 0x430;
      r += ingr_xid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x434 && offset < 0x438) {
      offset -= 0x434;
      r += ingr_yid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x438 && offset < 0x43c) {
      offset -= 0x438;
      r += ingr_rid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x43c && offset < 0x440) {
      offset -= 0x43c;
      r += ingr_yid_tbl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x440 && offset < 0x444) {
      offset -= 0x440;
      r += ingr_bypss_egr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x444 && offset < 0x448) {
      offset -= 0x444;
      r += ingr_ct_disable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x448 && offset < 0x44c) {
      offset -= 0x448;
      r += ingr_ct_mcast_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x44c && offset < 0x450) {
      offset -= 0x44c;
      r += ingr_pvt_ecc_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x494 && offset < 0x498) {
      offset -= 0x494;
      r += ingr_pv_tbl0_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x498 && offset < 0x49c) {
      offset -= 0x498;
      r += ingr_pv_tbl0_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x49c && offset < 0x4a0) {
      offset -= 0x49c;
      r += ingr_pv_tbl1_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4a0 && offset < 0x4a4) {
      offset -= 0x4a0;
      r += ingr_pv_tbl1_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4a4 && offset < 0x4a8) {
      offset -= 0x4a4;
      r += ingr_pv_tbl_sbe_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4a8 && offset < 0x4ac) {
      offset -= 0x4a8;
      r += ingr_pv_tbl_mbe_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4ac && offset < 0x4b0) {
      offset -= 0x4ac;
      r += ingr_edf_thresh_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x480 && offset < 0x494) {
      offset -= 0x480;
      r += ingr_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x480 && offset < 0x484) {
      offset -= 0x480;
      r += ingr_intr_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x484 && offset < 0x488) {
      offset -= 0x484;
      r += ingr_intr_enable0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x488 && offset < 0x48c) {
      offset -= 0x488;
      r += ingr_intr_enable1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48c && offset < 0x490) {
      offset -= 0x48c;
      r += ingr_intr_inject_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x490 && offset < 0x494) {
      offset -= 0x490;
      r += ingr_intr_freeze_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += ingr_ingress_port_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<2;++a0) {
      r += ingr_egress_multicast_group_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += ingr_hash_lag_ecmp_mcast_[a0].to_string(print_zeros,indent_string) ;
    }
    r += ingr_copy_to_cpu_cos_.to_string(print_zeros,indent_string) ;
    r += ingr_copy_to_cpu_pv_.to_string(print_zeros,indent_string) ;
    r += ingr_deflect_on_drop_.to_string(print_zeros,indent_string) ;
    r += ingr_meter_color_.to_string(print_zeros,indent_string) ;
    r += ingr_icos_.to_string(print_zeros,indent_string) ;
    r += ingr_qid_.to_string(print_zeros,indent_string) ;
    r += ingr_xid_.to_string(print_zeros,indent_string) ;
    r += ingr_yid_.to_string(print_zeros,indent_string) ;
    r += ingr_rid_.to_string(print_zeros,indent_string) ;
    r += ingr_yid_tbl_.to_string(print_zeros,indent_string) ;
    r += ingr_bypss_egr_.to_string(print_zeros,indent_string) ;
    r += ingr_ct_disable_.to_string(print_zeros,indent_string) ;
    r += ingr_ct_mcast_.to_string(print_zeros,indent_string) ;
    r += ingr_pvt_ecc_ctrl_.to_string(print_zeros,indent_string) ;
    r += ingr_pv_tbl0_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += ingr_pv_tbl0_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += ingr_pv_tbl1_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += ingr_pv_tbl1_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += ingr_pv_tbl_sbe_err_.to_string(print_zeros,indent_string) ;
    r += ingr_pv_tbl_mbe_err_.to_string(print_zeros,indent_string) ;
    r += ingr_edf_thresh_.to_string(print_zeros,indent_string) ;
    r += ingr_intr_.to_string(print_zeros,indent_string) ;
    r += ingr_intr_status_.to_string(print_zeros,indent_string) ;
    r += ingr_intr_enable0_.to_string(print_zeros,indent_string) ;
    r += ingr_intr_enable1_.to_string(print_zeros,indent_string) ;
    r += ingr_intr_inject_.to_string(print_zeros,indent_string) ;
    r += ingr_intr_freeze_enable_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrPhysicalIngressPortR ingr_ingress_port_;
  std::array< DprsrEgressMulticastGroupR, 2 > ingr_egress_multicast_group_;
  std::array< DprsrHashLAGECMPMcastR, 2 > ingr_hash_lag_ecmp_mcast_;
  DprsrCopyToCpuCosR ingr_copy_to_cpu_cos_;
  DprsrCopyToCPUPVR ingr_copy_to_cpu_pv_;
  DprsrDeflectOnDropR ingr_deflect_on_drop_;
  DprsrMeterColorR ingr_meter_color_;
  DprsrIcosR ingr_icos_;
  DprsrQidR ingr_qid_;
  DprsrXidR ingr_xid_;
  DprsrYidR ingr_yid_;
  DprsrRidR ingr_rid_;
  DprsrUseYidTblR ingr_yid_tbl_;
  DprsrBypassEgrModeR ingr_bypss_egr_;
  DprsrCtDisableModeR ingr_ct_disable_;
  DprsrCtMcastModeR ingr_ct_mcast_;
  DprsrEccCtrlR ingr_pvt_ecc_ctrl_;
  DprsrHeaderIngressOnlyGPvTbl0SbeErrlog ingr_pv_tbl0_sbe_errlog_;
  DprsrHeaderIngressOnlyGPvTbl0MbeErrlog ingr_pv_tbl0_mbe_errlog_;
  DprsrHeaderIngressOnlyGPvTbl1SbeErrlog ingr_pv_tbl1_sbe_errlog_;
  DprsrHeaderIngressOnlyGPvTbl1MbeErrlog ingr_pv_tbl1_mbe_errlog_;
  DprsrHeaderIngressOnlyGPvTblSbeErr ingr_pv_tbl_sbe_err_;
  DprsrHeaderIngressOnlyGPvTblMbeErr ingr_pv_tbl_mbe_err_;
  DprsrEdfThreshR ingr_edf_thresh_;
  DprsrHeaderIngressOnlyGIntr ingr_intr_;
  DprsrHeaderIngressOnlyGIntrStatus ingr_intr_status_;
  DprsrHeaderIngressOnlyGIntrEnable0 ingr_intr_enable0_;
  DprsrHeaderIngressOnlyGIntrEnable1 ingr_intr_enable1_;
  DprsrHeaderIngressOnlyGIntrInject ingr_intr_inject_;
  DprsrHeaderIngressOnlyGIntrFreezeEnable ingr_intr_freeze_enable_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x780000; // to get to deparser
    offset += 0x40000; // to get to hdr
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_DPRSR_HEADER_INGRESS_ONLY_G_H__
