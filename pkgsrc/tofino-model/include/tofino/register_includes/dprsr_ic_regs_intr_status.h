/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_IC_REGS_INTR_STATUS_H__
#define __REGISTER_INCLUDES_DPRSR_IC_REGS_INTR_STATUS_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class DprsrIcRegsIntrStatus : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrIcRegsIntrStatus(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, false, write_callback, read_callback, std::string("DprsrIcRegsIntrStatus")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrIcRegsIntrStatus(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DprsrIcRegsIntrStatus")
    {
    }
public:





  uint8_t &ig_hdr_too_long() { return ig_hdr_too_long_; }





  uint8_t &eg_hdr_too_long() { return eg_hdr_too_long_; }





  uint8_t &i_tphv_mbe() { return i_tphv_mbe_; }





  uint8_t &i_tphv_sbe() { return i_tphv_sbe_; }





  uint8_t &e_tphv_mbe() { return e_tphv_mbe_; }





  uint8_t &e_tphv_sbe() { return e_tphv_sbe_; }





  uint8_t &phv8_mbe() { return phv8_mbe_; }





  uint8_t &phv8_sbe() { return phv8_sbe_; }





  uint8_t &phv16_mbe() { return phv16_mbe_; }





  uint8_t &phv16_sbe() { return phv16_sbe_; }





  uint8_t &phv32_mbe() { return phv32_mbe_; }





  uint8_t &phv32_sbe() { return phv32_sbe_; }





  uint8_t &e_meta_mbe() { return e_meta_mbe_; }





  uint8_t &e_meta_sbe() { return e_meta_sbe_; }





  uint8_t &i_meta_mbe() { return i_meta_mbe_; }





  uint8_t &i_meta_sbe() { return i_meta_sbe_; }





  uint8_t &i_fl_full() { return i_fl_full_; }





  uint8_t &i_dly_full() { return i_dly_full_; }





  uint8_t &i_dly_empt() { return i_dly_empt_; }





  uint8_t &e_fl_full() { return e_fl_full_; }





  uint8_t &e_dly_full() { return e_dly_full_; }





  uint8_t &e_dly_empt() { return e_dly_empt_; }





  uint8_t &ipbmeta_fifo_full() { return ipbmeta_fifo_full_; }





  uint8_t &ipbmeta_fifo_empt() { return ipbmeta_fifo_empt_; }





  uint8_t &epbmeta_fifo_full() { return epbmeta_fifo_full_; }





  uint8_t &epbmeta_fifo_empt() { return epbmeta_fifo_empt_; }





  uint8_t &i_chan_mismatch() { return i_chan_mismatch_; }





  uint8_t &e_chan_mismatch() { return e_chan_mismatch_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (ig_hdr_too_long_ & 0x1);
    *data |= ((eg_hdr_too_long_ & 0x1) << 1);
    *data |= ((i_tphv_mbe_ & 0x1) << 2);
    *data |= ((i_tphv_sbe_ & 0x1) << 3);
    *data |= ((e_tphv_mbe_ & 0x1) << 4);
    *data |= ((e_tphv_sbe_ & 0x1) << 5);
    *data |= ((phv8_mbe_ & 0x1) << 6);
    *data |= ((phv8_sbe_ & 0x1) << 7);
    *data |= ((phv16_mbe_ & 0x1) << 8);
    *data |= ((phv16_sbe_ & 0x1) << 9);
    *data |= ((phv32_mbe_ & 0x1) << 10);
    *data |= ((phv32_sbe_ & 0x1) << 11);
    *data |= ((e_meta_mbe_ & 0x1) << 12);
    *data |= ((e_meta_sbe_ & 0x1) << 13);
    *data |= ((i_meta_mbe_ & 0x1) << 14);
    *data |= ((i_meta_sbe_ & 0x1) << 15);
    *data |= ((i_fl_full_ & 0x1) << 16);
    *data |= ((i_dly_full_ & 0x1) << 17);
    *data |= ((i_dly_empt_ & 0x1) << 18);
    *data |= ((e_fl_full_ & 0x1) << 19);
    *data |= ((e_dly_full_ & 0x1) << 20);
    *data |= ((e_dly_empt_ & 0x1) << 21);
    *data |= ((ipbmeta_fifo_full_ & 0x1) << 22);
    *data |= ((ipbmeta_fifo_empt_ & 0x1) << 23);
    *data |= ((epbmeta_fifo_full_ & 0x1) << 24);
    *data |= ((epbmeta_fifo_empt_ & 0x1) << 25);
    *data |= ((i_chan_mismatch_ & 0x1) << 26);
    *data |= ((e_chan_mismatch_ & 0x1) << 27);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    ig_hdr_too_long_ &= ~(data & 0x1);
    eg_hdr_too_long_ &= ~((data >> 1) & 0x1);
    i_tphv_mbe_ &= ~((data >> 2) & 0x1);
    i_tphv_sbe_ &= ~((data >> 3) & 0x1);
    e_tphv_mbe_ &= ~((data >> 4) & 0x1);
    e_tphv_sbe_ &= ~((data >> 5) & 0x1);
    phv8_mbe_ &= ~((data >> 6) & 0x1);
    phv8_sbe_ &= ~((data >> 7) & 0x1);
    phv16_mbe_ &= ~((data >> 8) & 0x1);
    phv16_sbe_ &= ~((data >> 9) & 0x1);
    phv32_mbe_ &= ~((data >> 10) & 0x1);
    phv32_sbe_ &= ~((data >> 11) & 0x1);
    e_meta_mbe_ &= ~((data >> 12) & 0x1);
    e_meta_sbe_ &= ~((data >> 13) & 0x1);
    i_meta_mbe_ &= ~((data >> 14) & 0x1);
    i_meta_sbe_ &= ~((data >> 15) & 0x1);
    i_fl_full_ &= ~((data >> 16) & 0x1);
    i_dly_full_ &= ~((data >> 17) & 0x1);
    i_dly_empt_ &= ~((data >> 18) & 0x1);
    e_fl_full_ &= ~((data >> 19) & 0x1);
    e_dly_full_ &= ~((data >> 20) & 0x1);
    e_dly_empt_ &= ~((data >> 21) & 0x1);
    ipbmeta_fifo_full_ &= ~((data >> 22) & 0x1);
    ipbmeta_fifo_empt_ &= ~((data >> 23) & 0x1);
    epbmeta_fifo_full_ &= ~((data >> 24) & 0x1);
    epbmeta_fifo_empt_ &= ~((data >> 25) & 0x1);
    i_chan_mismatch_ &= ~((data >> 26) & 0x1);
    e_chan_mismatch_ &= ~((data >> 27) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    ig_hdr_too_long_ = 0x0;
    eg_hdr_too_long_ = 0x0;
    i_tphv_mbe_ = 0x0;
    i_tphv_sbe_ = 0x0;
    e_tphv_mbe_ = 0x0;
    e_tphv_sbe_ = 0x0;
    phv8_mbe_ = 0x0;
    phv8_sbe_ = 0x0;
    phv16_mbe_ = 0x0;
    phv16_sbe_ = 0x0;
    phv32_mbe_ = 0x0;
    phv32_sbe_ = 0x0;
    e_meta_mbe_ = 0x0;
    e_meta_sbe_ = 0x0;
    i_meta_mbe_ = 0x0;
    i_meta_sbe_ = 0x0;
    i_fl_full_ = 0x0;
    i_dly_full_ = 0x0;
    i_dly_empt_ = 0x0;
    e_fl_full_ = 0x0;
    e_dly_full_ = 0x0;
    e_dly_empt_ = 0x0;
    ipbmeta_fifo_full_ = 0x0;
    ipbmeta_fifo_empt_ = 0x0;
    epbmeta_fifo_full_ = 0x0;
    epbmeta_fifo_empt_ = 0x0;
    i_chan_mismatch_ = 0x0;
    e_chan_mismatch_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrIcRegsIntrStatus") + ":\n";
    r += indent_string + "  " + std::string("ig_hdr_too_long") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ig_hdr_too_long_) ) + "\n";
    all_zeros &= (0 == ig_hdr_too_long_);
    r += indent_string + "  " + std::string("eg_hdr_too_long") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eg_hdr_too_long_) ) + "\n";
    all_zeros &= (0 == eg_hdr_too_long_);
    r += indent_string + "  " + std::string("i_tphv_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_tphv_mbe_) ) + "\n";
    all_zeros &= (0 == i_tphv_mbe_);
    r += indent_string + "  " + std::string("i_tphv_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_tphv_sbe_) ) + "\n";
    all_zeros &= (0 == i_tphv_sbe_);
    r += indent_string + "  " + std::string("e_tphv_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_tphv_mbe_) ) + "\n";
    all_zeros &= (0 == e_tphv_mbe_);
    r += indent_string + "  " + std::string("e_tphv_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_tphv_sbe_) ) + "\n";
    all_zeros &= (0 == e_tphv_sbe_);
    r += indent_string + "  " + std::string("phv8_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv8_mbe_) ) + "\n";
    all_zeros &= (0 == phv8_mbe_);
    r += indent_string + "  " + std::string("phv8_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv8_sbe_) ) + "\n";
    all_zeros &= (0 == phv8_sbe_);
    r += indent_string + "  " + std::string("phv16_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv16_mbe_) ) + "\n";
    all_zeros &= (0 == phv16_mbe_);
    r += indent_string + "  " + std::string("phv16_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv16_sbe_) ) + "\n";
    all_zeros &= (0 == phv16_sbe_);
    r += indent_string + "  " + std::string("phv32_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv32_mbe_) ) + "\n";
    all_zeros &= (0 == phv32_mbe_);
    r += indent_string + "  " + std::string("phv32_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv32_sbe_) ) + "\n";
    all_zeros &= (0 == phv32_sbe_);
    r += indent_string + "  " + std::string("e_meta_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_meta_mbe_) ) + "\n";
    all_zeros &= (0 == e_meta_mbe_);
    r += indent_string + "  " + std::string("e_meta_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_meta_sbe_) ) + "\n";
    all_zeros &= (0 == e_meta_sbe_);
    r += indent_string + "  " + std::string("i_meta_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_meta_mbe_) ) + "\n";
    all_zeros &= (0 == i_meta_mbe_);
    r += indent_string + "  " + std::string("i_meta_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_meta_sbe_) ) + "\n";
    all_zeros &= (0 == i_meta_sbe_);
    r += indent_string + "  " + std::string("i_fl_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_fl_full_) ) + "\n";
    all_zeros &= (0 == i_fl_full_);
    r += indent_string + "  " + std::string("i_dly_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_dly_full_) ) + "\n";
    all_zeros &= (0 == i_dly_full_);
    r += indent_string + "  " + std::string("i_dly_empt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_dly_empt_) ) + "\n";
    all_zeros &= (0 == i_dly_empt_);
    r += indent_string + "  " + std::string("e_fl_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_fl_full_) ) + "\n";
    all_zeros &= (0 == e_fl_full_);
    r += indent_string + "  " + std::string("e_dly_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_dly_full_) ) + "\n";
    all_zeros &= (0 == e_dly_full_);
    r += indent_string + "  " + std::string("e_dly_empt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_dly_empt_) ) + "\n";
    all_zeros &= (0 == e_dly_empt_);
    r += indent_string + "  " + std::string("ipbmeta_fifo_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipbmeta_fifo_full_) ) + "\n";
    all_zeros &= (0 == ipbmeta_fifo_full_);
    r += indent_string + "  " + std::string("ipbmeta_fifo_empt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipbmeta_fifo_empt_) ) + "\n";
    all_zeros &= (0 == ipbmeta_fifo_empt_);
    r += indent_string + "  " + std::string("epbmeta_fifo_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(epbmeta_fifo_full_) ) + "\n";
    all_zeros &= (0 == epbmeta_fifo_full_);
    r += indent_string + "  " + std::string("epbmeta_fifo_empt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(epbmeta_fifo_empt_) ) + "\n";
    all_zeros &= (0 == epbmeta_fifo_empt_);
    r += indent_string + "  " + std::string("i_chan_mismatch") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_chan_mismatch_) ) + "\n";
    all_zeros &= (0 == i_chan_mismatch_);
    r += indent_string + "  " + std::string("e_chan_mismatch") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_chan_mismatch_) ) + "\n";
    all_zeros &= (0 == e_chan_mismatch_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrIcRegsIntrStatus") + ":\n";
    r += indent_string + "  " + std::string("ig_hdr_too_long") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ig_hdr_too_long_) ) + "\n";
    all_zeros &= (0 == ig_hdr_too_long_);
    r += indent_string + "  " + std::string("eg_hdr_too_long") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eg_hdr_too_long_) ) + "\n";
    all_zeros &= (0 == eg_hdr_too_long_);
    r += indent_string + "  " + std::string("i_tphv_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_tphv_mbe_) ) + "\n";
    all_zeros &= (0 == i_tphv_mbe_);
    r += indent_string + "  " + std::string("i_tphv_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_tphv_sbe_) ) + "\n";
    all_zeros &= (0 == i_tphv_sbe_);
    r += indent_string + "  " + std::string("e_tphv_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_tphv_mbe_) ) + "\n";
    all_zeros &= (0 == e_tphv_mbe_);
    r += indent_string + "  " + std::string("e_tphv_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_tphv_sbe_) ) + "\n";
    all_zeros &= (0 == e_tphv_sbe_);
    r += indent_string + "  " + std::string("phv8_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv8_mbe_) ) + "\n";
    all_zeros &= (0 == phv8_mbe_);
    r += indent_string + "  " + std::string("phv8_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv8_sbe_) ) + "\n";
    all_zeros &= (0 == phv8_sbe_);
    r += indent_string + "  " + std::string("phv16_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv16_mbe_) ) + "\n";
    all_zeros &= (0 == phv16_mbe_);
    r += indent_string + "  " + std::string("phv16_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv16_sbe_) ) + "\n";
    all_zeros &= (0 == phv16_sbe_);
    r += indent_string + "  " + std::string("phv32_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv32_mbe_) ) + "\n";
    all_zeros &= (0 == phv32_mbe_);
    r += indent_string + "  " + std::string("phv32_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(phv32_sbe_) ) + "\n";
    all_zeros &= (0 == phv32_sbe_);
    r += indent_string + "  " + std::string("e_meta_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_meta_mbe_) ) + "\n";
    all_zeros &= (0 == e_meta_mbe_);
    r += indent_string + "  " + std::string("e_meta_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_meta_sbe_) ) + "\n";
    all_zeros &= (0 == e_meta_sbe_);
    r += indent_string + "  " + std::string("i_meta_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_meta_mbe_) ) + "\n";
    all_zeros &= (0 == i_meta_mbe_);
    r += indent_string + "  " + std::string("i_meta_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_meta_sbe_) ) + "\n";
    all_zeros &= (0 == i_meta_sbe_);
    r += indent_string + "  " + std::string("i_fl_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_fl_full_) ) + "\n";
    all_zeros &= (0 == i_fl_full_);
    r += indent_string + "  " + std::string("i_dly_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_dly_full_) ) + "\n";
    all_zeros &= (0 == i_dly_full_);
    r += indent_string + "  " + std::string("i_dly_empt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_dly_empt_) ) + "\n";
    all_zeros &= (0 == i_dly_empt_);
    r += indent_string + "  " + std::string("e_fl_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_fl_full_) ) + "\n";
    all_zeros &= (0 == e_fl_full_);
    r += indent_string + "  " + std::string("e_dly_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_dly_full_) ) + "\n";
    all_zeros &= (0 == e_dly_full_);
    r += indent_string + "  " + std::string("e_dly_empt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_dly_empt_) ) + "\n";
    all_zeros &= (0 == e_dly_empt_);
    r += indent_string + "  " + std::string("ipbmeta_fifo_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipbmeta_fifo_full_) ) + "\n";
    all_zeros &= (0 == ipbmeta_fifo_full_);
    r += indent_string + "  " + std::string("ipbmeta_fifo_empt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ipbmeta_fifo_empt_) ) + "\n";
    all_zeros &= (0 == ipbmeta_fifo_empt_);
    r += indent_string + "  " + std::string("epbmeta_fifo_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(epbmeta_fifo_full_) ) + "\n";
    all_zeros &= (0 == epbmeta_fifo_full_);
    r += indent_string + "  " + std::string("epbmeta_fifo_empt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(epbmeta_fifo_empt_) ) + "\n";
    all_zeros &= (0 == epbmeta_fifo_empt_);
    r += indent_string + "  " + std::string("i_chan_mismatch") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_chan_mismatch_) ) + "\n";
    all_zeros &= (0 == i_chan_mismatch_);
    r += indent_string + "  " + std::string("e_chan_mismatch") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(e_chan_mismatch_) ) + "\n";
    all_zeros &= (0 == e_chan_mismatch_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t ig_hdr_too_long_;
  uint8_t eg_hdr_too_long_;
  uint8_t i_tphv_mbe_;
  uint8_t i_tphv_sbe_;
  uint8_t e_tphv_mbe_;
  uint8_t e_tphv_sbe_;
  uint8_t phv8_mbe_;
  uint8_t phv8_sbe_;
  uint8_t phv16_mbe_;
  uint8_t phv16_sbe_;
  uint8_t phv32_mbe_;
  uint8_t phv32_sbe_;
  uint8_t e_meta_mbe_;
  uint8_t e_meta_sbe_;
  uint8_t i_meta_mbe_;
  uint8_t i_meta_sbe_;
  uint8_t i_fl_full_;
  uint8_t i_dly_full_;
  uint8_t i_dly_empt_;
  uint8_t e_fl_full_;
  uint8_t e_dly_full_;
  uint8_t e_dly_empt_;
  uint8_t ipbmeta_fifo_full_;
  uint8_t ipbmeta_fifo_empt_;
  uint8_t epbmeta_fifo_full_;
  uint8_t epbmeta_fifo_empt_;
  uint8_t i_chan_mismatch_;
  uint8_t e_chan_mismatch_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x780000; // to get to deparser
    offset += 0x9800; // to get to icr
    offset += 0xc0; // to get to intr_status
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_DPRSR_IC_REGS_INTR_STATUS_H__
