/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_IC_REGS_TPHV_BUFF_ECC_SBE_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_IC_REGS_TPHV_BUFF_ECC_SBE_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class DprsrIcRegsTphvBuffEccSbeMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrIcRegsTphvBuffEccSbeMutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, true, write_callback, read_callback, std::string("DprsrIcRegsTphvBuffEccSbeMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrIcRegsTphvBuffEccSbeMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrIcRegsTphvBuffEccSbeMutable")
    {
    }
public:






  uint8_t inj(int j0) { return inj_[j0]; }
  void inj(int j0,const uint8_t &v) { inj_[j0]=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (inj_[0] & 0x1);
    *data |= ((inj_[1] & 0x1) << 1);
    *data |= ((inj_[2] & 0x1) << 2);
    *data |= ((inj_[3] & 0x1) << 3);
    *data |= ((inj_[4] & 0x1) << 4);
    *data |= ((inj_[5] & 0x1) << 5);
    *data |= ((inj_[6] & 0x1) << 6);
    *data |= ((inj_[7] & 0x1) << 7);
    *data |= ((inj_[8] & 0x1) << 8);
    *data |= ((inj_[9] & 0x1) << 9);
    *data |= ((inj_[10] & 0x1) << 10);
    *data |= ((inj_[11] & 0x1) << 11);
    *data |= ((inj_[12] & 0x1) << 12);
    *data |= ((inj_[13] & 0x1) << 13);
    *data |= ((inj_[14] & 0x1) << 14);
    *data |= ((inj_[15] & 0x1) << 15);
    *data |= ((inj_[16] & 0x1) << 16);
    *data |= ((inj_[17] & 0x1) << 17);
    *data |= ((inj_[18] & 0x1) << 18);
    *data |= ((inj_[19] & 0x1) << 19);
    *data |= ((inj_[20] & 0x1) << 20);
    *data |= ((inj_[21] & 0x1) << 21);
    *data |= ((inj_[22] & 0x1) << 22);
    *data |= ((inj_[23] & 0x1) << 23);
    *data |= ((inj_[24] & 0x1) << 24);
    *data |= ((inj_[25] & 0x1) << 25);
    *data |= ((inj_[26] & 0x1) << 26);
    *data |= ((inj_[27] & 0x1) << 27);
    *data |= ((inj_[28] & 0x1) << 28);
    *data |= ((inj_[29] & 0x1) << 29);
    *data |= ((inj_[30] & 0x1) << 30);
    *data |= ((inj_[31] & 0x1) << 31);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    inj_[0] = (data & 0x1);
    inj_[1] = ((data >> 1) & 0x1);
    inj_[2] = ((data >> 2) & 0x1);
    inj_[3] = ((data >> 3) & 0x1);
    inj_[4] = ((data >> 4) & 0x1);
    inj_[5] = ((data >> 5) & 0x1);
    inj_[6] = ((data >> 6) & 0x1);
    inj_[7] = ((data >> 7) & 0x1);
    inj_[8] = ((data >> 8) & 0x1);
    inj_[9] = ((data >> 9) & 0x1);
    inj_[10] = ((data >> 10) & 0x1);
    inj_[11] = ((data >> 11) & 0x1);
    inj_[12] = ((data >> 12) & 0x1);
    inj_[13] = ((data >> 13) & 0x1);
    inj_[14] = ((data >> 14) & 0x1);
    inj_[15] = ((data >> 15) & 0x1);
    inj_[16] = ((data >> 16) & 0x1);
    inj_[17] = ((data >> 17) & 0x1);
    inj_[18] = ((data >> 18) & 0x1);
    inj_[19] = ((data >> 19) & 0x1);
    inj_[20] = ((data >> 20) & 0x1);
    inj_[21] = ((data >> 21) & 0x1);
    inj_[22] = ((data >> 22) & 0x1);
    inj_[23] = ((data >> 23) & 0x1);
    inj_[24] = ((data >> 24) & 0x1);
    inj_[25] = ((data >> 25) & 0x1);
    inj_[26] = ((data >> 26) & 0x1);
    inj_[27] = ((data >> 27) & 0x1);
    inj_[28] = ((data >> 28) & 0x1);
    inj_[29] = ((data >> 29) & 0x1);
    inj_[30] = ((data >> 30) & 0x1);
    inj_[31] = ((data >> 31) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    inj_[0] = 0x0;
    inj_[1] = 0x0;
    inj_[2] = 0x0;
    inj_[3] = 0x0;
    inj_[4] = 0x0;
    inj_[5] = 0x0;
    inj_[6] = 0x0;
    inj_[7] = 0x0;
    inj_[8] = 0x0;
    inj_[9] = 0x0;
    inj_[10] = 0x0;
    inj_[11] = 0x0;
    inj_[12] = 0x0;
    inj_[13] = 0x0;
    inj_[14] = 0x0;
    inj_[15] = 0x0;
    inj_[16] = 0x0;
    inj_[17] = 0x0;
    inj_[18] = 0x0;
    inj_[19] = 0x0;
    inj_[20] = 0x0;
    inj_[21] = 0x0;
    inj_[22] = 0x0;
    inj_[23] = 0x0;
    inj_[24] = 0x0;
    inj_[25] = 0x0;
    inj_[26] = 0x0;
    inj_[27] = 0x0;
    inj_[28] = 0x0;
    inj_[29] = 0x0;
    inj_[30] = 0x0;
    inj_[31] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrIcRegsTphvBuffEccSbeMutable") + ":\n";
    for (uint32_t f=0;f<32;++f) {
      r += indent_string + "  " + std::string("inj") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(inj_[f]) ) + "\n";
      all_zeros &= (0 == inj_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrIcRegsTphvBuffEccSbeMutable") + ":\n";
    for (uint32_t f=0;f<32;++f) {
      r += indent_string + "  " + std::string("inj") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(inj_[f]) ) + "\n";
      all_zeros &= (0 == inj_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 32 > inj_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x780000; // to get to deparser
    offset += 0x9800; // to get to icr
    offset += 0x84; // to get to tphv_buff_ecc_sbe
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_DPRSR_IC_REGS_TPHV_BUFF_ECC_SBE_MUTABLE_H__
