/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_II_REGS_H__
#define __REGISTER_INCLUDES_DPRSR_II_REGS_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "dprsr_cnt_i_mau_err_r.h"
#include "dprsr_ii_regs_hdr_too_long_i.h"
#include "dprsr_input_ing_and_egr_ecc_g.h"
#include "dprsr_input_ing_and_egr_g.h"
#include "dprsr_input_ingress_only_g.h"

namespace tofino {
  namespace register_classes {

class DprsrIiRegs : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrIiRegs(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 2036, false, write_callback, read_callback, std::string("DprsrIiRegs")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrIiRegs(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DprsrIiRegs")
    {
    }
public:





  DprsrCntIMauErrR &mau_err_i() { return mau_err_i_; }





  DprsrIiRegsHdrTooLongI &hdr_too_long_i() { return hdr_too_long_i_; }






  DprsrInputIngAndEgrG &main_i() { return main_i_; }





  DprsrInputIngressOnlyG &ingr() { return ingr_; }






  DprsrInputIngAndEgrEccG &ecc_i() { return ecc_i_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x7ec && offset < 0x7f0) {
      offset -= 0x7ec;
      if (read_callback_) read_callback_();
      mau_err_i_.read( offset, data );
    }
    else if (offset >= 0x7f0 && offset < 0x7f4) {
      offset -= 0x7f0;
      if (read_callback_) read_callback_();
      hdr_too_long_i_.read( offset, data );
    }
    else if (offset < 0x3c) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      main_i_.read( offset, data );
    }
    else if (offset >= 0x400 && offset < 0x7d8) {
      offset -= 0x400;
      if (read_callback_) read_callback_();
      ingr_.read( offset, data );
    }
    else if (offset >= 0x7e0 && offset < 0x7ec) {
      offset -= 0x7e0;
      if (read_callback_) read_callback_();
      ecc_i_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x7ec && offset < 0x7f0) {
      offset -= 0x7ec;
      mau_err_i_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7f0 && offset < 0x7f4) {
      offset -= 0x7f0;
      hdr_too_long_i_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset < 0x3c) {
      offset -= 0x0;
      main_i_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400 && offset < 0x7d8) {
      offset -= 0x400;
      ingr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7e0 && offset < 0x7ec) {
      offset -= 0x7e0;
      ecc_i_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    mau_err_i_.reset();
    hdr_too_long_i_.reset();
    main_i_.reset();
    ingr_.reset();
    ecc_i_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x7ec && offset < 0x7f0) {
      offset -= 0x7ec;
      r += mau_err_i_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7f0 && offset < 0x7f4) {
      offset -= 0x7f0;
      r += hdr_too_long_i_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset < 0x3c) {
      offset -= 0x0;
      r += main_i_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400 && offset < 0x7d8) {
      offset -= 0x400;
      r += ingr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7e0 && offset < 0x7ec) {
      offset -= 0x7e0;
      r += ecc_i_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += mau_err_i_.to_string(print_zeros,indent_string) ;
    r += hdr_too_long_i_.to_string(print_zeros,indent_string) ;
    r += main_i_.to_string(print_zeros,indent_string) ;
    r += ingr_.to_string(print_zeros,indent_string) ;
    r += ecc_i_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrCntIMauErrR mau_err_i_;
  DprsrIiRegsHdrTooLongI hdr_too_long_i_;
  DprsrInputIngAndEgrG main_i_;
  DprsrInputIngressOnlyG ingr_;
  DprsrInputIngAndEgrEccG ecc_i_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x780000; // to get to deparser
    offset += 0x8000; // to get to iir
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_DPRSR_II_REGS_H__
