/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_INPUT_INGRESS_ONLY_G_H__
#define __REGISTER_INCLUDES_DPRSR_INPUT_INGRESS_ONLY_G_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "dprsr_cnt_i_dec_discard.h"
#include "dprsr_cnt_i_dec_learn.h"
#include "dprsr_cnt_i_dec_read.h"
#include "dprsr_cnt_i_dec_resubmit.h"
#include "dprsr_copy_to_c_p_u_r.h"
#include "dprsr_input_ingress_only_g_phv16_grp.h"
#include "dprsr_input_ingress_only_g_phv16_split.h"
#include "dprsr_input_ingress_only_g_phv32_grp.h"
#include "dprsr_input_ingress_only_g_phv32_split.h"
#include "dprsr_input_ingress_only_g_phv8_grp.h"
#include "dprsr_input_ingress_only_g_phv8_split.h"
#include "dprsr_learn_cfg_r.h"
#include "dprsr_learn_table_entry_r.h"
#include "dprsr_resubmit_cfg_r.h"
#include "dprsr_resubmit_table_entry_r.h"

namespace tofino {
  namespace register_classes {

class DprsrInputIngressOnlyG : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrInputIngressOnlyG(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 984, false, write_callback, read_callback, std::string("DprsrInputIngressOnlyG")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrInputIngressOnlyG(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DprsrInputIngressOnlyG")
    {
    }
public:





  DprsrCopyToCPUR &ingr_copy_to_cpu() { return ingr_copy_to_cpu_; }





  DprsrResubmitCfgR &ingr_resub_cfg() { return ingr_resub_cfg_; }







  DprsrResubmitTableEntryR &ingr_resub_tbl(int j0) { return ingr_resub_tbl_[j0]; }





  DprsrLearnCfgR &ingr_learn_cfg() { return ingr_learn_cfg_; }







  DprsrLearnTableEntryR &ingr_learn_tbl(int j0) { return ingr_learn_tbl_[j0]; }






  DprsrInputIngressOnlyGPhv8Grp &ingr_phv8_grp() { return ingr_phv8_grp_; }






  DprsrInputIngressOnlyGPhv8Split &ingr_phv8_split() { return ingr_phv8_split_; }






  DprsrInputIngressOnlyGPhv16Grp &ingr_phv16_grp() { return ingr_phv16_grp_; }






  DprsrInputIngressOnlyGPhv16Split &ingr_phv16_split() { return ingr_phv16_split_; }






  DprsrInputIngressOnlyGPhv32Grp &ingr_phv32_grp() { return ingr_phv32_grp_; }






  DprsrInputIngressOnlyGPhv32Split &ingr_phv32_split() { return ingr_phv32_split_; }





  DprsrCntIDecRead &ingr_cnt_i_read() { return ingr_cnt_i_read_; }





  DprsrCntIDecDiscard &ingr_cnt_i_discard() { return ingr_cnt_i_discard_; }





  DprsrCntIDecResubmit &ingr_cnt_i_resubmit() { return ingr_cnt_i_resubmit_; }





  DprsrCntIDecLearn &ingr_cnt_i_learn() { return ingr_cnt_i_learn_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x400 && offset < 0x404) {
      offset -= 0x400;
      if (read_callback_) read_callback_();
      ingr_copy_to_cpu_.read( offset, data );
    }
    else if (offset >= 0x404 && offset < 0x408) {
      offset -= 0x404;
      if (read_callback_) read_callback_();
      ingr_resub_cfg_.read( offset, data );
    }
    else if (offset >= 0x480 && offset < 0x4e0) {
      offset -= 0x480;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      if (read_callback_) read_callback_();
      ingr_resub_tbl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x4e0 && offset < 0x4e4) {
      offset -= 0x4e0;
      if (read_callback_) read_callback_();
      ingr_learn_cfg_.read( offset, data );
    }
    else if (offset >= 0x600 && offset < 0x7a0) {
      offset -= 0x600;
      int i0 = offset / 0x34;
      offset  -= i0 * 0x34;
      if (read_callback_) read_callback_();
      ingr_learn_tbl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x7a0 && offset < 0x7a4) {
      offset -= 0x7a0;
      if (read_callback_) read_callback_();
      ingr_phv8_grp_.read( offset, data );
    }
    else if (offset >= 0x7a4 && offset < 0x7a8) {
      offset -= 0x7a4;
      if (read_callback_) read_callback_();
      ingr_phv8_split_.read( offset, data );
    }
    else if (offset >= 0x7a8 && offset < 0x7ac) {
      offset -= 0x7a8;
      if (read_callback_) read_callback_();
      ingr_phv16_grp_.read( offset, data );
    }
    else if (offset >= 0x7ac && offset < 0x7b0) {
      offset -= 0x7ac;
      if (read_callback_) read_callback_();
      ingr_phv16_split_.read( offset, data );
    }
    else if (offset >= 0x7b0 && offset < 0x7b4) {
      offset -= 0x7b0;
      if (read_callback_) read_callback_();
      ingr_phv32_grp_.read( offset, data );
    }
    else if (offset >= 0x7b4 && offset < 0x7b8) {
      offset -= 0x7b4;
      if (read_callback_) read_callback_();
      ingr_phv32_split_.read( offset, data );
    }
    else if (offset >= 0x7b8 && offset < 0x7c0) {
      offset -= 0x7b8;
      if (read_callback_) read_callback_();
      ingr_cnt_i_read_.read( offset, data );
    }
    else if (offset >= 0x7c0 && offset < 0x7c8) {
      offset -= 0x7c0;
      if (read_callback_) read_callback_();
      ingr_cnt_i_discard_.read( offset, data );
    }
    else if (offset >= 0x7c8 && offset < 0x7d0) {
      offset -= 0x7c8;
      if (read_callback_) read_callback_();
      ingr_cnt_i_resubmit_.read( offset, data );
    }
    else if (offset >= 0x7d0 && offset < 0x7d8) {
      offset -= 0x7d0;
      if (read_callback_) read_callback_();
      ingr_cnt_i_learn_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x400 && offset < 0x404) {
      offset -= 0x400;
      ingr_copy_to_cpu_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x404 && offset < 0x408) {
      offset -= 0x404;
      ingr_resub_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x480 && offset < 0x4e0) {
      offset -= 0x480;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      ingr_resub_tbl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4e0 && offset < 0x4e4) {
      offset -= 0x4e0;
      ingr_learn_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x600 && offset < 0x7a0) {
      offset -= 0x600;
      int i0 = offset / 0x34;
      offset  -= i0 * 0x34;
      ingr_learn_tbl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7a0 && offset < 0x7a4) {
      offset -= 0x7a0;
      ingr_phv8_grp_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7a4 && offset < 0x7a8) {
      offset -= 0x7a4;
      ingr_phv8_split_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7a8 && offset < 0x7ac) {
      offset -= 0x7a8;
      ingr_phv16_grp_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7ac && offset < 0x7b0) {
      offset -= 0x7ac;
      ingr_phv16_split_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7b0 && offset < 0x7b4) {
      offset -= 0x7b0;
      ingr_phv32_grp_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7b4 && offset < 0x7b8) {
      offset -= 0x7b4;
      ingr_phv32_split_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7b8 && offset < 0x7c0) {
      offset -= 0x7b8;
      ingr_cnt_i_read_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7c0 && offset < 0x7c8) {
      offset -= 0x7c0;
      ingr_cnt_i_discard_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7c8 && offset < 0x7d0) {
      offset -= 0x7c8;
      ingr_cnt_i_resubmit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7d0 && offset < 0x7d8) {
      offset -= 0x7d0;
      ingr_cnt_i_learn_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    ingr_copy_to_cpu_.reset();
    ingr_resub_cfg_.reset();
    for (auto &f0 : ingr_resub_tbl_) {
      f0.reset();
    }
    ingr_learn_cfg_.reset();
    for (auto &f0 : ingr_learn_tbl_) {
      f0.reset();
    }
    ingr_phv8_grp_.reset();
    ingr_phv8_split_.reset();
    ingr_phv16_grp_.reset();
    ingr_phv16_split_.reset();
    ingr_phv32_grp_.reset();
    ingr_phv32_split_.reset();
    ingr_cnt_i_read_.reset();
    ingr_cnt_i_discard_.reset();
    ingr_cnt_i_resubmit_.reset();
    ingr_cnt_i_learn_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x400 && offset < 0x404) {
      offset -= 0x400;
      r += ingr_copy_to_cpu_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x404 && offset < 0x408) {
      offset -= 0x404;
      r += ingr_resub_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x480 && offset < 0x4e0) {
      offset -= 0x480;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      r += ingr_resub_tbl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4e0 && offset < 0x4e4) {
      offset -= 0x4e0;
      r += ingr_learn_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x600 && offset < 0x7a0) {
      offset -= 0x600;
      int i0 = offset / 0x34;
      offset  -= i0 * 0x34;
      r += ingr_learn_tbl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7a0 && offset < 0x7a4) {
      offset -= 0x7a0;
      r += ingr_phv8_grp_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7a4 && offset < 0x7a8) {
      offset -= 0x7a4;
      r += ingr_phv8_split_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7a8 && offset < 0x7ac) {
      offset -= 0x7a8;
      r += ingr_phv16_grp_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7ac && offset < 0x7b0) {
      offset -= 0x7ac;
      r += ingr_phv16_split_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7b0 && offset < 0x7b4) {
      offset -= 0x7b0;
      r += ingr_phv32_grp_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7b4 && offset < 0x7b8) {
      offset -= 0x7b4;
      r += ingr_phv32_split_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7b8 && offset < 0x7c0) {
      offset -= 0x7b8;
      r += ingr_cnt_i_read_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7c0 && offset < 0x7c8) {
      offset -= 0x7c0;
      r += ingr_cnt_i_discard_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7c8 && offset < 0x7d0) {
      offset -= 0x7c8;
      r += ingr_cnt_i_resubmit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7d0 && offset < 0x7d8) {
      offset -= 0x7d0;
      r += ingr_cnt_i_learn_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += ingr_copy_to_cpu_.to_string(print_zeros,indent_string) ;
    r += ingr_resub_cfg_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<8;++a0) {
      r += ingr_resub_tbl_[a0].to_string(print_zeros,indent_string) ;
    }
    r += ingr_learn_cfg_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<8;++a0) {
      r += ingr_learn_tbl_[a0].to_string(print_zeros,indent_string) ;
    }
    r += ingr_phv8_grp_.to_string(print_zeros,indent_string) ;
    r += ingr_phv8_split_.to_string(print_zeros,indent_string) ;
    r += ingr_phv16_grp_.to_string(print_zeros,indent_string) ;
    r += ingr_phv16_split_.to_string(print_zeros,indent_string) ;
    r += ingr_phv32_grp_.to_string(print_zeros,indent_string) ;
    r += ingr_phv32_split_.to_string(print_zeros,indent_string) ;
    r += ingr_cnt_i_read_.to_string(print_zeros,indent_string) ;
    r += ingr_cnt_i_discard_.to_string(print_zeros,indent_string) ;
    r += ingr_cnt_i_resubmit_.to_string(print_zeros,indent_string) ;
    r += ingr_cnt_i_learn_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrCopyToCPUR ingr_copy_to_cpu_;
  DprsrResubmitCfgR ingr_resub_cfg_;
  std::array< DprsrResubmitTableEntryR, 8 > ingr_resub_tbl_;
  DprsrLearnCfgR ingr_learn_cfg_;
  std::array< DprsrLearnTableEntryR, 8 > ingr_learn_tbl_;
  DprsrInputIngressOnlyGPhv8Grp ingr_phv8_grp_;
  DprsrInputIngressOnlyGPhv8Split ingr_phv8_split_;
  DprsrInputIngressOnlyGPhv16Grp ingr_phv16_grp_;
  DprsrInputIngressOnlyGPhv16Split ingr_phv16_split_;
  DprsrInputIngressOnlyGPhv32Grp ingr_phv32_grp_;
  DprsrInputIngressOnlyGPhv32Split ingr_phv32_split_;
  DprsrCntIDecRead ingr_cnt_i_read_;
  DprsrCntIDecDiscard ingr_cnt_i_discard_;
  DprsrCntIDecResubmit ingr_cnt_i_resubmit_;
  DprsrCntIDecLearn ingr_cnt_i_learn_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x780000; // to get to deparser
    offset += 0x8000; // to get to iir
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_DPRSR_INPUT_INGRESS_ONLY_G_H__
