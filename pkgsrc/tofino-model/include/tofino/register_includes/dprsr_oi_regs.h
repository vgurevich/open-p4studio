/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_OI_REGS_H__
#define __REGISTER_INCLUDES_DPRSR_OI_REGS_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "dpr_o_dbg_ctrl_r.h"
#include "dpr_o_dbg_r.h"
#include "dprsr_c_r_c640_cfg_r.h"
#include "dprsr_c_r_c_cfg_r.h"
#include "dprsr_c_r_c_chk_dis_r.h"
#include "dprsr_c_t_m_ch_empty_r.h"
#include "dprsr_cnt_oi_pkts.h"
#include "dprsr_ctm_fifo_reset_r.h"
#include "dprsr_ctm_fifo_size_r.h"
#include "dprsr_edf_thresh_r.h"
#include "dprsr_epipe_remap_r.h"
#include "dprsr_hdr_fifo_size_r.h"
#include "dprsr_intr_summary_r.h"
#include "dprsr_ipipe_remap_r.h"
#include "dprsr_o_ctm_delay_cfg_r.h"
#include "dprsr_oi_regs_ctm_crc_err.h"
#include "dprsr_oi_regs_diagbus_cfg.h"
#include "dprsr_oi_regs_ecc.h"
#include "dprsr_oi_regs_i_ctm_pkt_err.h"
#include "dprsr_oi_regs_i_disc_pkts.h"
#include "dprsr_oi_regs_i_egr_pkt_err.h"
#include "dprsr_oi_regs_i_fwd_pkts.h"
#include "dprsr_oi_regs_i_metadata.h"
#include "dprsr_oi_regs_i_metadata_mbe.h"
#include "dprsr_oi_regs_i_metadata_mbe_errlog.h"
#include "dprsr_oi_regs_i_metadata_sbe.h"
#include "dprsr_oi_regs_i_metadata_sbe_errlog.h"
#include "dprsr_oi_regs_i_mirr_hdr.h"
#include "dprsr_oi_regs_i_mirr_hdr_mbe.h"
#include "dprsr_oi_regs_i_mirr_hdr_mbe_errlog.h"
#include "dprsr_oi_regs_i_mirr_hdr_sbe.h"
#include "dprsr_oi_regs_i_mirr_hdr_sbe_errlog.h"
#include "dprsr_oi_regs_i_mirr_pkts.h"
#include "dprsr_oi_regs_intr.h"
#include "dprsr_oi_regs_mirr_hdr_i_mbe_err.h"
#include "dprsr_oi_regs_mirr_hdr_i_sbe_err.h"
#include "dprsr_oi_regs_mirr_tm_forced_crc_err.h"
#include "dprsr_oi_regs_mstr_diagbus_cfg.h"
#include "dprsr_oi_regs_offset_beyond_pkt_err.h"
#include "dprsr_oi_regs_pbs_req_ctrl_mbe_errlog.h"
#include "dprsr_oi_regs_pbs_req_ctrl_sbe_errlog.h"
#include "dprsr_oi_regs_pbs_req_data_mbe_errlog.h"
#include "dprsr_oi_regs_pbs_req_data_sbe_errlog.h"
#include "dprsr_oi_regs_pbs_resp_ctrl_mbe_errlog.h"
#include "dprsr_oi_regs_pbs_resp_ctrl_sbe_errlog.h"
#include "dprsr_oi_regs_pbs_resp_data_mbe_errlog.h"
#include "dprsr_oi_regs_pbs_resp_data_sbe_errlog.h"
#include "dprsr_out_arbiter_ctrl_r.h"
#include "dprsr_out_mirror_bucket_r.h"
#include "dprsr_out_mirror_wrr_vec_r.h"
#include "dprsr_out_tm_idprsr_bucket_limit_r.h"
#include "dprsr_prt_ge40_g_r.h"
#include "dprsr_tmdbg_data_r.h"
#include "dprsr_tmdbg_waddr_r.h"
#include "dprsr_tmdbg_word_sel_r.h"

namespace tofino {
  namespace register_classes {

class DprsrOiRegs : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrOiRegs(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4096, false, write_callback, read_callback, std::string("DprsrOiRegs")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrOiRegs(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DprsrOiRegs")
    {
    }
public:







  DprsrOutTmIdprsrBucketLimitR &tm_idprsr_bucket_limit() { return tm_idprsr_bucket_limit_; }





  DprsrOutMirrorWrrVecR &mirror_wrr() { return mirror_wrr_; }





  DprsrOutArbiterCtrlR &arb_ctrl() { return arb_ctrl_; }





  DprsrCntOiPkts &cnt_pkts() { return cnt_pkts_; }











  DprsrIpipeRemapR &ipipe_id() { return ipipe_id_; }











  DprsrEpipeRemapR &epipe_id() { return epipe_id_; }





  DprsrCRCCfgR &crc_zero() { return crc_zero_; }





  DprsrCRCChkDisR &crc_chk() { return crc_chk_; }





  DprsrCRC640CfgR &crc_gen_cfg() { return crc_gen_cfg_; }








  DprsrTmdbgDataR &tm_dbg_d() { return tm_dbg_d_; }





  DprsrTmdbgWordSelR &tm_dbg_sel() { return tm_dbg_sel_; }







  DprsrTmdbgWaddrR &tm_dbg_a() { return tm_dbg_a_; }










  DprsrCtmFifoResetR &ctm_fifo_rst() { return ctm_fifo_rst_; }







  DprsrPrtGe40GR &ctm_ch_rate() { return ctm_ch_rate_; }





  DprsrCTMChEmptyR &ctm_ch_fifo() { return ctm_ch_fifo_; }





  DprsrCtmFifoSizeR &ctm_fifo_size() { return ctm_fifo_size_; }





  DprsrHdrFifoSizeR &hdr_fifo_size() { return hdr_fifo_size_; }





  DprODbgCtrlR &arb_dbg_ctrl() { return arb_dbg_ctrl_; }






  DprODbgR &arb_dbg() { return arb_dbg_; }








  DprsrOiRegsEcc &ecc() { return ecc_; }






  DprsrOiRegsIMirrHdr &i_mirr_hdr() { return i_mirr_hdr_; }





  DprsrOiRegsIMirrHdrSbe &i_mirr_hdr_sbe() { return i_mirr_hdr_sbe_; }





  DprsrOiRegsIMirrHdrMbe &i_mirr_hdr_mbe() { return i_mirr_hdr_mbe_; }





  DprsrOiRegsIMirrHdrMbeErrlog &i_mirr_hdr_mbe_errlog() { return i_mirr_hdr_mbe_errlog_; }





  DprsrOiRegsIMirrHdrSbeErrlog &i_mirr_hdr_sbe_errlog() { return i_mirr_hdr_sbe_errlog_; }





  DprsrOiRegsPbsReqCtrlMbeErrlog &pbs_req_ctrl_mbe_errlog() { return pbs_req_ctrl_mbe_errlog_; }





  DprsrOiRegsPbsReqCtrlSbeErrlog &pbs_req_ctrl_sbe_errlog() { return pbs_req_ctrl_sbe_errlog_; }





  DprsrOiRegsPbsReqDataMbeErrlog &pbs_req_data_mbe_errlog() { return pbs_req_data_mbe_errlog_; }





  DprsrOiRegsPbsReqDataSbeErrlog &pbs_req_data_sbe_errlog() { return pbs_req_data_sbe_errlog_; }





  DprsrOiRegsPbsRespCtrlMbeErrlog &pbs_resp_ctrl_mbe_errlog() { return pbs_resp_ctrl_mbe_errlog_; }





  DprsrOiRegsPbsRespCtrlSbeErrlog &pbs_resp_ctrl_sbe_errlog() { return pbs_resp_ctrl_sbe_errlog_; }





  DprsrOiRegsPbsRespDataMbeErrlog &pbs_resp_data_mbe_errlog() { return pbs_resp_data_mbe_errlog_; }





  DprsrOiRegsPbsRespDataSbeErrlog &pbs_resp_data_sbe_errlog() { return pbs_resp_data_sbe_errlog_; }








  DprsrIntrSummaryR &dpr_int_summary() { return dpr_int_summary_; }





  DprsrOiRegsMirrHdrISbeErr &mirr_hdr_i_sbe_err() { return mirr_hdr_i_sbe_err_; }





  DprsrOiRegsMirrHdrIMbeErr &mirr_hdr_i_mbe_err() { return mirr_hdr_i_mbe_err_; }







  DprsrOiRegsCtmCrcErr &ctm_crc_err(int j0) { return ctm_crc_err_[j0]; }





  DprsrOiRegsIEgrPktErr &i_egr_pkt_err() { return i_egr_pkt_err_; }





  DprsrOiRegsICtmPktErr &i_ctm_pkt_err() { return i_ctm_pkt_err_; }





  DprsrOiRegsIFwdPkts &i_fwd_pkts() { return i_fwd_pkts_; }






  DprsrOiRegsIDiscPkts &i_disc_pkts() { return i_disc_pkts_; }





  DprsrOiRegsIMirrPkts &i_mirr_pkts() { return i_mirr_pkts_; }






  DprsrOiRegsIMetadata &i_metadata() { return i_metadata_; }





  DprsrOiRegsIMetadataSbe &i_metadata_sbe() { return i_metadata_sbe_; }





  DprsrOiRegsIMetadataMbe &i_metadata_mbe() { return i_metadata_mbe_; }





  DprsrOiRegsIMetadataMbeErrlog &i_metadata_mbe_errlog() { return i_metadata_mbe_errlog_; }





  DprsrOiRegsIMetadataSbeErrlog &i_metadata_sbe_errlog() { return i_metadata_sbe_errlog_; }





  DprsrOiRegsDiagbusCfg &diagbus_cfg() { return diagbus_cfg_; }





  DprsrOiRegsMstrDiagbusCfg &mstr_diagbus_cfg() { return mstr_diagbus_cfg_; }





  DprsrOiRegsMirrTmForcedCrcErr &mirr_tm_forced_crc_err() { return mirr_tm_forced_crc_err_; }





  DprsrOCtmDelayCfgR &ctm_fcu_cfg() { return ctm_fcu_cfg_; }








  DprsrOutMirrorBucketR &mirr_tb_cfg() { return mirr_tb_cfg_; }





  DprsrOiRegsOffsetBeyondPktErr &offset_beyond_pkt_err() { return offset_beyond_pkt_err_; }







  DprsrEdfThreshR &edf_min_thresh() { return edf_min_thresh_; }
  DprsrOiRegsIntr &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      tm_idprsr_bucket_limit_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      mirror_wrr_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      arb_ctrl_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x20) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      cnt_pkts_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      ipipe_id_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      epipe_id_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x3c) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      crc_zero_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x4c) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      crc_chk_.read( offset, data );
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      if (read_callback_) read_callback_();
      crc_gen_cfg_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      tm_dbg_d_.read( offset, data );
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      if (read_callback_) read_callback_();
      tm_dbg_sel_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      tm_dbg_a_.read( offset, data );
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      if (read_callback_) read_callback_();
      ctm_fifo_rst_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x6c) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      ctm_ch_rate_.read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x7c) {
      offset -= 0x70;
      if (read_callback_) read_callback_();
      ctm_ch_fifo_.read( offset, data );
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      if (read_callback_) read_callback_();
      ctm_fifo_size_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      hdr_fifo_size_.read( offset, data );
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      if (read_callback_) read_callback_();
      arb_dbg_ctrl_.read( offset, data );
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      if (read_callback_) read_callback_();
      arb_dbg_.read( offset, data );
    }
    else if (offset >= 0x600 && offset < 0x604) {
      offset -= 0x600;
      if (read_callback_) read_callback_();
      ecc_.read( offset, data );
    }
    else if (offset >= 0x604 && offset < 0x608) {
      offset -= 0x604;
      if (read_callback_) read_callback_();
      i_mirr_hdr_.read( offset, data );
    }
    else if (offset >= 0x608 && offset < 0x60c) {
      offset -= 0x608;
      if (read_callback_) read_callback_();
      i_mirr_hdr_sbe_.read( offset, data );
    }
    else if (offset >= 0x60c && offset < 0x610) {
      offset -= 0x60c;
      if (read_callback_) read_callback_();
      i_mirr_hdr_mbe_.read( offset, data );
    }
    else if (offset >= 0x634 && offset < 0x638) {
      offset -= 0x634;
      if (read_callback_) read_callback_();
      i_mirr_hdr_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x638 && offset < 0x63c) {
      offset -= 0x638;
      if (read_callback_) read_callback_();
      i_mirr_hdr_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x63c && offset < 0x640) {
      offset -= 0x63c;
      if (read_callback_) read_callback_();
      pbs_req_ctrl_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x640 && offset < 0x644) {
      offset -= 0x640;
      if (read_callback_) read_callback_();
      pbs_req_ctrl_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x644 && offset < 0x648) {
      offset -= 0x644;
      if (read_callback_) read_callback_();
      pbs_req_data_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x648 && offset < 0x64c) {
      offset -= 0x648;
      if (read_callback_) read_callback_();
      pbs_req_data_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x64c && offset < 0x650) {
      offset -= 0x64c;
      if (read_callback_) read_callback_();
      pbs_resp_ctrl_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x650 && offset < 0x654) {
      offset -= 0x650;
      if (read_callback_) read_callback_();
      pbs_resp_ctrl_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x654 && offset < 0x658) {
      offset -= 0x654;
      if (read_callback_) read_callback_();
      pbs_resp_data_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x658 && offset < 0x65c) {
      offset -= 0x658;
      if (read_callback_) read_callback_();
      pbs_resp_data_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x65c && offset < 0x660) {
      offset -= 0x65c;
      if (read_callback_) read_callback_();
      dpr_int_summary_.read( offset, data );
    }
    else if (offset >= 0x660 && offset < 0x664) {
      offset -= 0x660;
      if (read_callback_) read_callback_();
      mirr_hdr_i_sbe_err_.read( offset, data );
    }
    else if (offset >= 0x664 && offset < 0x668) {
      offset -= 0x664;
      if (read_callback_) read_callback_();
      mirr_hdr_i_mbe_err_.read( offset, data );
    }
    else if (offset >= 0x800 && offset < 0x920) {
      offset -= 0x800;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      ctm_crc_err_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x920 && offset < 0x924) {
      offset -= 0x920;
      if (read_callback_) read_callback_();
      i_egr_pkt_err_.read( offset, data );
    }
    else if (offset >= 0x924 && offset < 0x928) {
      offset -= 0x924;
      if (read_callback_) read_callback_();
      i_ctm_pkt_err_.read( offset, data );
    }
    else if (offset >= 0x928 && offset < 0x930) {
      offset -= 0x928;
      if (read_callback_) read_callback_();
      i_fwd_pkts_.read( offset, data );
    }
    else if (offset >= 0x930 && offset < 0x938) {
      offset -= 0x930;
      if (read_callback_) read_callback_();
      i_disc_pkts_.read( offset, data );
    }
    else if (offset >= 0x938 && offset < 0x940) {
      offset -= 0x938;
      if (read_callback_) read_callback_();
      i_mirr_pkts_.read( offset, data );
    }
    else if (offset >= 0x940 && offset < 0x944) {
      offset -= 0x940;
      if (read_callback_) read_callback_();
      i_metadata_.read( offset, data );
    }
    else if (offset >= 0x944 && offset < 0x948) {
      offset -= 0x944;
      if (read_callback_) read_callback_();
      i_metadata_sbe_.read( offset, data );
    }
    else if (offset >= 0x948 && offset < 0x94c) {
      offset -= 0x948;
      if (read_callback_) read_callback_();
      i_metadata_mbe_.read( offset, data );
    }
    else if (offset >= 0x94c && offset < 0x950) {
      offset -= 0x94c;
      if (read_callback_) read_callback_();
      i_metadata_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x950 && offset < 0x954) {
      offset -= 0x950;
      if (read_callback_) read_callback_();
      i_metadata_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x954 && offset < 0x958) {
      offset -= 0x954;
      if (read_callback_) read_callback_();
      diagbus_cfg_.read( offset, data );
    }
    else if (offset >= 0x958 && offset < 0x95c) {
      offset -= 0x958;
      if (read_callback_) read_callback_();
      mstr_diagbus_cfg_.read( offset, data );
    }
    else if (offset >= 0x95c && offset < 0x960) {
      offset -= 0x95c;
      if (read_callback_) read_callback_();
      mirr_tm_forced_crc_err_.read( offset, data );
    }
    else if (offset >= 0x960 && offset < 0x964) {
      offset -= 0x960;
      if (read_callback_) read_callback_();
      ctm_fcu_cfg_.read( offset, data );
    }
    else if (offset >= 0x964 && offset < 0x968) {
      offset -= 0x964;
      if (read_callback_) read_callback_();
      mirr_tb_cfg_.read( offset, data );
    }
    else if (offset >= 0x968 && offset < 0x96c) {
      offset -= 0x968;
      if (read_callback_) read_callback_();
      offset_beyond_pkt_err_.read( offset, data );
    }
    else if (offset >= 0x96c && offset < 0x970) {
      offset -= 0x96c;
      if (read_callback_) read_callback_();
      edf_min_thresh_.read( offset, data );
    }
    else if (offset >= 0x620 && offset < 0x634) {
      offset -= 0x620;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      tm_idprsr_bucket_limit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      mirror_wrr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      arb_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x20) {
      offset -= 0x18;
      cnt_pkts_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      ipipe_id_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      epipe_id_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x3c) {
      offset -= 0x30;
      crc_zero_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x4c) {
      offset -= 0x40;
      crc_chk_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      crc_gen_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      tm_dbg_d_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      tm_dbg_sel_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      tm_dbg_a_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      ctm_fifo_rst_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x6c) {
      offset -= 0x60;
      ctm_ch_rate_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x7c) {
      offset -= 0x70;
      ctm_ch_fifo_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      ctm_fifo_size_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      hdr_fifo_size_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      arb_dbg_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      arb_dbg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x600 && offset < 0x604) {
      offset -= 0x600;
      ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x604 && offset < 0x608) {
      offset -= 0x604;
      i_mirr_hdr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x608 && offset < 0x60c) {
      offset -= 0x608;
      i_mirr_hdr_sbe_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60c && offset < 0x610) {
      offset -= 0x60c;
      i_mirr_hdr_mbe_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x634 && offset < 0x638) {
      offset -= 0x634;
      i_mirr_hdr_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x638 && offset < 0x63c) {
      offset -= 0x638;
      i_mirr_hdr_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x63c && offset < 0x640) {
      offset -= 0x63c;
      pbs_req_ctrl_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x640 && offset < 0x644) {
      offset -= 0x640;
      pbs_req_ctrl_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x644 && offset < 0x648) {
      offset -= 0x644;
      pbs_req_data_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x648 && offset < 0x64c) {
      offset -= 0x648;
      pbs_req_data_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x64c && offset < 0x650) {
      offset -= 0x64c;
      pbs_resp_ctrl_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x650 && offset < 0x654) {
      offset -= 0x650;
      pbs_resp_ctrl_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x654 && offset < 0x658) {
      offset -= 0x654;
      pbs_resp_data_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x658 && offset < 0x65c) {
      offset -= 0x658;
      pbs_resp_data_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x65c && offset < 0x660) {
      offset -= 0x65c;
      dpr_int_summary_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x660 && offset < 0x664) {
      offset -= 0x660;
      mirr_hdr_i_sbe_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x664 && offset < 0x668) {
      offset -= 0x664;
      mirr_hdr_i_mbe_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x800 && offset < 0x920) {
      offset -= 0x800;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      ctm_crc_err_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x920 && offset < 0x924) {
      offset -= 0x920;
      i_egr_pkt_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x924 && offset < 0x928) {
      offset -= 0x924;
      i_ctm_pkt_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x928 && offset < 0x930) {
      offset -= 0x928;
      i_fwd_pkts_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x930 && offset < 0x938) {
      offset -= 0x930;
      i_disc_pkts_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x938 && offset < 0x940) {
      offset -= 0x938;
      i_mirr_pkts_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x940 && offset < 0x944) {
      offset -= 0x940;
      i_metadata_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x944 && offset < 0x948) {
      offset -= 0x944;
      i_metadata_sbe_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x948 && offset < 0x94c) {
      offset -= 0x948;
      i_metadata_mbe_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x94c && offset < 0x950) {
      offset -= 0x94c;
      i_metadata_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x950 && offset < 0x954) {
      offset -= 0x950;
      i_metadata_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x954 && offset < 0x958) {
      offset -= 0x954;
      diagbus_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x958 && offset < 0x95c) {
      offset -= 0x958;
      mstr_diagbus_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x95c && offset < 0x960) {
      offset -= 0x95c;
      mirr_tm_forced_crc_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x960 && offset < 0x964) {
      offset -= 0x960;
      ctm_fcu_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x964 && offset < 0x968) {
      offset -= 0x964;
      mirr_tb_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x968 && offset < 0x96c) {
      offset -= 0x968;
      offset_beyond_pkt_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x96c && offset < 0x970) {
      offset -= 0x96c;
      edf_min_thresh_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x620 && offset < 0x634) {
      offset -= 0x620;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    tm_idprsr_bucket_limit_.reset();
    mirror_wrr_.reset();
    arb_ctrl_.reset();
    cnt_pkts_.reset();
    ipipe_id_.reset();
    epipe_id_.reset();
    crc_zero_.reset();
    crc_chk_.reset();
    crc_gen_cfg_.reset();
    tm_dbg_d_.reset();
    tm_dbg_sel_.reset();
    tm_dbg_a_.reset();
    ctm_fifo_rst_.reset();
    ctm_ch_rate_.reset();
    ctm_ch_fifo_.reset();
    ctm_fifo_size_.reset();
    hdr_fifo_size_.reset();
    arb_dbg_ctrl_.reset();
    arb_dbg_.reset();
    ecc_.reset();
    i_mirr_hdr_.reset();
    i_mirr_hdr_sbe_.reset();
    i_mirr_hdr_mbe_.reset();
    i_mirr_hdr_mbe_errlog_.reset();
    i_mirr_hdr_sbe_errlog_.reset();
    pbs_req_ctrl_mbe_errlog_.reset();
    pbs_req_ctrl_sbe_errlog_.reset();
    pbs_req_data_mbe_errlog_.reset();
    pbs_req_data_sbe_errlog_.reset();
    pbs_resp_ctrl_mbe_errlog_.reset();
    pbs_resp_ctrl_sbe_errlog_.reset();
    pbs_resp_data_mbe_errlog_.reset();
    pbs_resp_data_sbe_errlog_.reset();
    dpr_int_summary_.reset();
    mirr_hdr_i_sbe_err_.reset();
    mirr_hdr_i_mbe_err_.reset();
    for (auto &f0 : ctm_crc_err_) {
      f0.reset();
    }
    i_egr_pkt_err_.reset();
    i_ctm_pkt_err_.reset();
    i_fwd_pkts_.reset();
    i_disc_pkts_.reset();
    i_mirr_pkts_.reset();
    i_metadata_.reset();
    i_metadata_sbe_.reset();
    i_metadata_mbe_.reset();
    i_metadata_mbe_errlog_.reset();
    i_metadata_sbe_errlog_.reset();
    diagbus_cfg_.reset();
    mstr_diagbus_cfg_.reset();
    mirr_tm_forced_crc_err_.reset();
    ctm_fcu_cfg_.reset();
    mirr_tb_cfg_.reset();
    offset_beyond_pkt_err_.reset();
    edf_min_thresh_.reset();
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += tm_idprsr_bucket_limit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += mirror_wrr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += arb_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x20) {
      offset -= 0x18;
      r += cnt_pkts_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += ipipe_id_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += epipe_id_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x3c) {
      offset -= 0x30;
      r += crc_zero_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x4c) {
      offset -= 0x40;
      r += crc_chk_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      r += crc_gen_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      r += tm_dbg_d_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      r += tm_dbg_sel_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      r += tm_dbg_a_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      r += ctm_fifo_rst_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x6c) {
      offset -= 0x60;
      r += ctm_ch_rate_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x7c) {
      offset -= 0x70;
      r += ctm_ch_fifo_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      r += ctm_fifo_size_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      r += hdr_fifo_size_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      r += arb_dbg_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      r += arb_dbg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x600 && offset < 0x604) {
      offset -= 0x600;
      r += ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x604 && offset < 0x608) {
      offset -= 0x604;
      r += i_mirr_hdr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x608 && offset < 0x60c) {
      offset -= 0x608;
      r += i_mirr_hdr_sbe_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60c && offset < 0x610) {
      offset -= 0x60c;
      r += i_mirr_hdr_mbe_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x634 && offset < 0x638) {
      offset -= 0x634;
      r += i_mirr_hdr_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x638 && offset < 0x63c) {
      offset -= 0x638;
      r += i_mirr_hdr_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x63c && offset < 0x640) {
      offset -= 0x63c;
      r += pbs_req_ctrl_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x640 && offset < 0x644) {
      offset -= 0x640;
      r += pbs_req_ctrl_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x644 && offset < 0x648) {
      offset -= 0x644;
      r += pbs_req_data_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x648 && offset < 0x64c) {
      offset -= 0x648;
      r += pbs_req_data_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x64c && offset < 0x650) {
      offset -= 0x64c;
      r += pbs_resp_ctrl_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x650 && offset < 0x654) {
      offset -= 0x650;
      r += pbs_resp_ctrl_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x654 && offset < 0x658) {
      offset -= 0x654;
      r += pbs_resp_data_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x658 && offset < 0x65c) {
      offset -= 0x658;
      r += pbs_resp_data_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x65c && offset < 0x660) {
      offset -= 0x65c;
      r += dpr_int_summary_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x660 && offset < 0x664) {
      offset -= 0x660;
      r += mirr_hdr_i_sbe_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x664 && offset < 0x668) {
      offset -= 0x664;
      r += mirr_hdr_i_mbe_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x800 && offset < 0x920) {
      offset -= 0x800;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += ctm_crc_err_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x920 && offset < 0x924) {
      offset -= 0x920;
      r += i_egr_pkt_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x924 && offset < 0x928) {
      offset -= 0x924;
      r += i_ctm_pkt_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x928 && offset < 0x930) {
      offset -= 0x928;
      r += i_fwd_pkts_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x930 && offset < 0x938) {
      offset -= 0x930;
      r += i_disc_pkts_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x938 && offset < 0x940) {
      offset -= 0x938;
      r += i_mirr_pkts_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x940 && offset < 0x944) {
      offset -= 0x940;
      r += i_metadata_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x944 && offset < 0x948) {
      offset -= 0x944;
      r += i_metadata_sbe_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x948 && offset < 0x94c) {
      offset -= 0x948;
      r += i_metadata_mbe_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x94c && offset < 0x950) {
      offset -= 0x94c;
      r += i_metadata_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x950 && offset < 0x954) {
      offset -= 0x950;
      r += i_metadata_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x954 && offset < 0x958) {
      offset -= 0x954;
      r += diagbus_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x958 && offset < 0x95c) {
      offset -= 0x958;
      r += mstr_diagbus_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x95c && offset < 0x960) {
      offset -= 0x95c;
      r += mirr_tm_forced_crc_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x960 && offset < 0x964) {
      offset -= 0x960;
      r += ctm_fcu_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x964 && offset < 0x968) {
      offset -= 0x964;
      r += mirr_tb_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x968 && offset < 0x96c) {
      offset -= 0x968;
      r += offset_beyond_pkt_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x96c && offset < 0x970) {
      offset -= 0x96c;
      r += edf_min_thresh_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x620 && offset < 0x634) {
      offset -= 0x620;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += tm_idprsr_bucket_limit_.to_string(print_zeros,indent_string) ;
    r += mirror_wrr_.to_string(print_zeros,indent_string) ;
    r += arb_ctrl_.to_string(print_zeros,indent_string) ;
    r += cnt_pkts_.to_string(print_zeros,indent_string) ;
    r += ipipe_id_.to_string(print_zeros,indent_string) ;
    r += epipe_id_.to_string(print_zeros,indent_string) ;
    r += crc_zero_.to_string(print_zeros,indent_string) ;
    r += crc_chk_.to_string(print_zeros,indent_string) ;
    r += crc_gen_cfg_.to_string(print_zeros,indent_string) ;
    r += tm_dbg_d_.to_string(print_zeros,indent_string) ;
    r += tm_dbg_sel_.to_string(print_zeros,indent_string) ;
    r += tm_dbg_a_.to_string(print_zeros,indent_string) ;
    r += ctm_fifo_rst_.to_string(print_zeros,indent_string) ;
    r += ctm_ch_rate_.to_string(print_zeros,indent_string) ;
    r += ctm_ch_fifo_.to_string(print_zeros,indent_string) ;
    r += ctm_fifo_size_.to_string(print_zeros,indent_string) ;
    r += hdr_fifo_size_.to_string(print_zeros,indent_string) ;
    r += arb_dbg_ctrl_.to_string(print_zeros,indent_string) ;
    r += arb_dbg_.to_string(print_zeros,indent_string) ;
    r += ecc_.to_string(print_zeros,indent_string) ;
    r += i_mirr_hdr_.to_string(print_zeros,indent_string) ;
    r += i_mirr_hdr_sbe_.to_string(print_zeros,indent_string) ;
    r += i_mirr_hdr_mbe_.to_string(print_zeros,indent_string) ;
    r += i_mirr_hdr_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += i_mirr_hdr_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += pbs_req_ctrl_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += pbs_req_ctrl_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += pbs_req_data_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += pbs_req_data_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += pbs_resp_ctrl_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += pbs_resp_ctrl_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += pbs_resp_data_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += pbs_resp_data_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += dpr_int_summary_.to_string(print_zeros,indent_string) ;
    r += mirr_hdr_i_sbe_err_.to_string(print_zeros,indent_string) ;
    r += mirr_hdr_i_mbe_err_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<72;++a0) {
      r += ctm_crc_err_[a0].to_string(print_zeros,indent_string) ;
    }
    r += i_egr_pkt_err_.to_string(print_zeros,indent_string) ;
    r += i_ctm_pkt_err_.to_string(print_zeros,indent_string) ;
    r += i_fwd_pkts_.to_string(print_zeros,indent_string) ;
    r += i_disc_pkts_.to_string(print_zeros,indent_string) ;
    r += i_mirr_pkts_.to_string(print_zeros,indent_string) ;
    r += i_metadata_.to_string(print_zeros,indent_string) ;
    r += i_metadata_sbe_.to_string(print_zeros,indent_string) ;
    r += i_metadata_mbe_.to_string(print_zeros,indent_string) ;
    r += i_metadata_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += i_metadata_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += diagbus_cfg_.to_string(print_zeros,indent_string) ;
    r += mstr_diagbus_cfg_.to_string(print_zeros,indent_string) ;
    r += mirr_tm_forced_crc_err_.to_string(print_zeros,indent_string) ;
    r += ctm_fcu_cfg_.to_string(print_zeros,indent_string) ;
    r += mirr_tb_cfg_.to_string(print_zeros,indent_string) ;
    r += offset_beyond_pkt_err_.to_string(print_zeros,indent_string) ;
    r += edf_min_thresh_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrOutTmIdprsrBucketLimitR tm_idprsr_bucket_limit_;
  DprsrOutMirrorWrrVecR mirror_wrr_;
  DprsrOutArbiterCtrlR arb_ctrl_;
  DprsrCntOiPkts cnt_pkts_;
  DprsrIpipeRemapR ipipe_id_;
  DprsrEpipeRemapR epipe_id_;
  DprsrCRCCfgR crc_zero_;
  DprsrCRCChkDisR crc_chk_;
  DprsrCRC640CfgR crc_gen_cfg_;
  DprsrTmdbgDataR tm_dbg_d_;
  DprsrTmdbgWordSelR tm_dbg_sel_;
  DprsrTmdbgWaddrR tm_dbg_a_;
  DprsrCtmFifoResetR ctm_fifo_rst_;
  DprsrPrtGe40GR ctm_ch_rate_;
  DprsrCTMChEmptyR ctm_ch_fifo_;
  DprsrCtmFifoSizeR ctm_fifo_size_;
  DprsrHdrFifoSizeR hdr_fifo_size_;
  DprODbgCtrlR arb_dbg_ctrl_;
  DprODbgR arb_dbg_;
  DprsrOiRegsEcc ecc_;
  DprsrOiRegsIMirrHdr i_mirr_hdr_;
  DprsrOiRegsIMirrHdrSbe i_mirr_hdr_sbe_;
  DprsrOiRegsIMirrHdrMbe i_mirr_hdr_mbe_;
  DprsrOiRegsIMirrHdrMbeErrlog i_mirr_hdr_mbe_errlog_;
  DprsrOiRegsIMirrHdrSbeErrlog i_mirr_hdr_sbe_errlog_;
  DprsrOiRegsPbsReqCtrlMbeErrlog pbs_req_ctrl_mbe_errlog_;
  DprsrOiRegsPbsReqCtrlSbeErrlog pbs_req_ctrl_sbe_errlog_;
  DprsrOiRegsPbsReqDataMbeErrlog pbs_req_data_mbe_errlog_;
  DprsrOiRegsPbsReqDataSbeErrlog pbs_req_data_sbe_errlog_;
  DprsrOiRegsPbsRespCtrlMbeErrlog pbs_resp_ctrl_mbe_errlog_;
  DprsrOiRegsPbsRespCtrlSbeErrlog pbs_resp_ctrl_sbe_errlog_;
  DprsrOiRegsPbsRespDataMbeErrlog pbs_resp_data_mbe_errlog_;
  DprsrOiRegsPbsRespDataSbeErrlog pbs_resp_data_sbe_errlog_;
  DprsrIntrSummaryR dpr_int_summary_;
  DprsrOiRegsMirrHdrISbeErr mirr_hdr_i_sbe_err_;
  DprsrOiRegsMirrHdrIMbeErr mirr_hdr_i_mbe_err_;
  std::array< DprsrOiRegsCtmCrcErr, 72 > ctm_crc_err_;
  DprsrOiRegsIEgrPktErr i_egr_pkt_err_;
  DprsrOiRegsICtmPktErr i_ctm_pkt_err_;
  DprsrOiRegsIFwdPkts i_fwd_pkts_;
  DprsrOiRegsIDiscPkts i_disc_pkts_;
  DprsrOiRegsIMirrPkts i_mirr_pkts_;
  DprsrOiRegsIMetadata i_metadata_;
  DprsrOiRegsIMetadataSbe i_metadata_sbe_;
  DprsrOiRegsIMetadataMbe i_metadata_mbe_;
  DprsrOiRegsIMetadataMbeErrlog i_metadata_mbe_errlog_;
  DprsrOiRegsIMetadataSbeErrlog i_metadata_sbe_errlog_;
  DprsrOiRegsDiagbusCfg diagbus_cfg_;
  DprsrOiRegsMstrDiagbusCfg mstr_diagbus_cfg_;
  DprsrOiRegsMirrTmForcedCrcErr mirr_tm_forced_crc_err_;
  DprsrOCtmDelayCfgR ctm_fcu_cfg_;
  DprsrOutMirrorBucketR mirr_tb_cfg_;
  DprsrOiRegsOffsetBeyondPktErr offset_beyond_pkt_err_;
  DprsrEdfThreshR edf_min_thresh_;
  DprsrOiRegsIntr intr_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x780000; // to get to deparser
    offset += 0x10000; // to get to out_ingr
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_DPRSR_OI_REGS_H__
