/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DVSL_ADDRMAP_H__
#define __REGISTER_INCLUDES_DVSL_ADDRMAP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "cbc_rspec.h"
#include "lfltr_rspec.h"
#include "mbc_rspec.h"
#include "misc_regs.h"
#include "pbc_rspec.h"
#include "pcie_bar01_regs.h"
#include "tbc_rspec.h"
#include "tm_top_rspec.h"

namespace tofino {
  namespace register_classes {

class DvslAddrmap : public model_core::RegisterBlock<RegisterCallback> {
public:
  DvslAddrmap(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 6717440, false, write_callback, read_callback, std::string("DvslAddrmap"))
    {
    }
  DvslAddrmap(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DvslAddrmap")
    {
    }
public:






  PcieBar01Regs &pcie_bar01_regs() { return pcie_bar01_regs_; }





  MiscRegs &misc_regs() { return misc_regs_; }





  MbcRspec &mbc() { return mbc_; }





  PbcRspec &pbc() { return pbc_; }





  CbcRspec &cbc() { return cbc_; }





  TbcRspec &tbc() { return tbc_; }





  LfltrRspec &lfltr0() { return lfltr0_; }





  LfltrRspec &lfltr1() { return lfltr1_; }





  LfltrRspec &lfltr2() { return lfltr2_; }





  LfltrRspec &lfltr3() { return lfltr3_; }





  TmTopRspec &tm_top() { return tm_top_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x174) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      pcie_bar01_regs_.read( offset, data );
    }
    else if (offset >= 0x40000 && offset < 0x4013c) {
      offset -= 0x40000;
      if (read_callback_) read_callback_();
      misc_regs_.read( offset, data );
    }
    else if (offset >= 0xc0000 && offset < 0xc016c) {
      offset -= 0xc0000;
      if (read_callback_) read_callback_();
      mbc_.read( offset, data );
    }
    else if (offset >= 0x100000 && offset < 0x100a6c) {
      offset -= 0x100000;
      if (read_callback_) read_callback_();
      pbc_.read( offset, data );
    }
    else if (offset >= 0x140000 && offset < 0x1401ec) {
      offset -= 0x140000;
      if (read_callback_) read_callback_();
      cbc_.read( offset, data );
    }
    else if (offset >= 0x180000 && offset < 0x180760) {
      offset -= 0x180000;
      if (read_callback_) read_callback_();
      tbc_.read( offset, data );
    }
    else if (offset >= 0x200000 && offset < 0x240000) {
      offset -= 0x200000;
      if (read_callback_) read_callback_();
      lfltr0_.read( offset, data );
    }
    else if (offset >= 0x240000 && offset < 0x280000) {
      offset -= 0x240000;
      if (read_callback_) read_callback_();
      lfltr1_.read( offset, data );
    }
    else if (offset >= 0x280000 && offset < 0x2c0000) {
      offset -= 0x280000;
      if (read_callback_) read_callback_();
      lfltr2_.read( offset, data );
    }
    else if (offset >= 0x2c0000 && offset < 0x300000) {
      offset -= 0x2c0000;
      if (read_callback_) read_callback_();
      lfltr3_.read( offset, data );
    }
    else if (offset >= 0x400000 && offset < 0x668000) {
      offset -= 0x400000;
      if (read_callback_) read_callback_();
      tm_top_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x174) {
      offset -= 0x0;
      pcie_bar01_regs_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40000 && offset < 0x4013c) {
      offset -= 0x40000;
      misc_regs_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0000 && offset < 0xc016c) {
      offset -= 0xc0000;
      mbc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100000 && offset < 0x100a6c) {
      offset -= 0x100000;
      pbc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140000 && offset < 0x1401ec) {
      offset -= 0x140000;
      cbc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180000 && offset < 0x180760) {
      offset -= 0x180000;
      tbc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200000 && offset < 0x240000) {
      offset -= 0x200000;
      lfltr0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x240000 && offset < 0x280000) {
      offset -= 0x240000;
      lfltr1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x280000 && offset < 0x2c0000) {
      offset -= 0x280000;
      lfltr2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c0000 && offset < 0x300000) {
      offset -= 0x2c0000;
      lfltr3_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400000 && offset < 0x668000) {
      offset -= 0x400000;
      tm_top_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    pcie_bar01_regs_.reset();
    misc_regs_.reset();
    mbc_.reset();
    pbc_.reset();
    cbc_.reset();
    tbc_.reset();
    lfltr0_.reset();
    lfltr1_.reset();
    lfltr2_.reset();
    lfltr3_.reset();
    tm_top_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x174) {
      offset -= 0x0;
      r += pcie_bar01_regs_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40000 && offset < 0x4013c) {
      offset -= 0x40000;
      r += misc_regs_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0000 && offset < 0xc016c) {
      offset -= 0xc0000;
      r += mbc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100000 && offset < 0x100a6c) {
      offset -= 0x100000;
      r += pbc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140000 && offset < 0x1401ec) {
      offset -= 0x140000;
      r += cbc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180000 && offset < 0x180760) {
      offset -= 0x180000;
      r += tbc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200000 && offset < 0x240000) {
      offset -= 0x200000;
      r += lfltr0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x240000 && offset < 0x280000) {
      offset -= 0x240000;
      r += lfltr1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x280000 && offset < 0x2c0000) {
      offset -= 0x280000;
      r += lfltr2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c0000 && offset < 0x300000) {
      offset -= 0x2c0000;
      r += lfltr3_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400000 && offset < 0x668000) {
      offset -= 0x400000;
      r += tm_top_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += pcie_bar01_regs_.to_string(print_zeros,indent_string) ;
    r += misc_regs_.to_string(print_zeros,indent_string) ;
    r += mbc_.to_string(print_zeros,indent_string) ;
    r += pbc_.to_string(print_zeros,indent_string) ;
    r += cbc_.to_string(print_zeros,indent_string) ;
    r += tbc_.to_string(print_zeros,indent_string) ;
    r += lfltr0_.to_string(print_zeros,indent_string) ;
    r += lfltr1_.to_string(print_zeros,indent_string) ;
    r += lfltr2_.to_string(print_zeros,indent_string) ;
    r += lfltr3_.to_string(print_zeros,indent_string) ;
    r += tm_top_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  PcieBar01Regs pcie_bar01_regs_;
  MiscRegs misc_regs_;
  MbcRspec mbc_;
  PbcRspec pbc_;
  CbcRspec cbc_;
  TbcRspec tbc_;
  LfltrRspec lfltr0_;
  LfltrRspec lfltr1_;
  LfltrRspec lfltr2_;
  LfltrRspec lfltr3_;
  TmTopRspec tm_top_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_DVSL_ADDRMAP_H__
