/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_EBUF_FIFO_REGS_INT_STAT_MUTABLE_H__
#define __REGISTER_INCLUDES_EBUF_FIFO_REGS_INT_STAT_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class EbufFifoRegsIntStatMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  EbufFifoRegsIntStatMutable(
      int chipNumber, int index_pipe_addrmap, int index_egrNx_regs, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_egrNx_regs), 4, true, write_callback, read_callback, std::string("EbufFifoRegsIntStatMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_egrNx_regs))
    {
    }
  EbufFifoRegsIntStatMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "EbufFifoRegsIntStatMutable")
    {
    }
public:





  uint8_t egrbypff_ecc_dual_err() { return egrbypff_ecc_dual_err_; }
  void egrbypff_ecc_dual_err(const uint8_t &v) { egrbypff_ecc_dual_err_=v; }





  uint8_t egrbypff_ecc_sngl_err() { return egrbypff_ecc_sngl_err_; }
  void egrbypff_ecc_sngl_err(const uint8_t &v) { egrbypff_ecc_sngl_err_=v; }





  uint8_t egrbypff_ovf0_err() { return egrbypff_ovf0_err_; }
  void egrbypff_ovf0_err(const uint8_t &v) { egrbypff_ovf0_err_=v; }





  uint8_t egrbypff_ovf1_err() { return egrbypff_ovf1_err_; }
  void egrbypff_ovf1_err(const uint8_t &v) { egrbypff_ovf1_err_=v; }





  uint8_t egrbypff_ovf2_err() { return egrbypff_ovf2_err_; }
  void egrbypff_ovf2_err(const uint8_t &v) { egrbypff_ovf2_err_=v; }





  uint8_t egrbypff_ovf3_err() { return egrbypff_ovf3_err_; }
  void egrbypff_ovf3_err(const uint8_t &v) { egrbypff_ovf3_err_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (egrbypff_ecc_dual_err_ & 0x1);
    *data |= ((egrbypff_ecc_sngl_err_ & 0x1) << 1);
    *data |= ((egrbypff_ovf0_err_ & 0x1) << 2);
    *data |= ((egrbypff_ovf1_err_ & 0x1) << 3);
    *data |= ((egrbypff_ovf2_err_ & 0x1) << 4);
    *data |= ((egrbypff_ovf3_err_ & 0x1) << 5);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    egrbypff_ecc_dual_err_ &= ~(data & 0x1);
    egrbypff_ecc_sngl_err_ &= ~((data >> 1) & 0x1);
    egrbypff_ovf0_err_ &= ~((data >> 2) & 0x1);
    egrbypff_ovf1_err_ &= ~((data >> 3) & 0x1);
    egrbypff_ovf2_err_ &= ~((data >> 4) & 0x1);
    egrbypff_ovf3_err_ &= ~((data >> 5) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    egrbypff_ecc_dual_err_ = 0x0;
    egrbypff_ecc_sngl_err_ = 0x0;
    egrbypff_ovf0_err_ = 0x0;
    egrbypff_ovf1_err_ = 0x0;
    egrbypff_ovf2_err_ = 0x0;
    egrbypff_ovf3_err_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EbufFifoRegsIntStatMutable") + ":\n";
    r += indent_string + "  " + std::string("egrbypff_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egrbypff_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == egrbypff_ecc_dual_err_);
    r += indent_string + "  " + std::string("egrbypff_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egrbypff_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == egrbypff_ecc_sngl_err_);
    r += indent_string + "  " + std::string("egrbypff_ovf0_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egrbypff_ovf0_err_) ) + "\n";
    all_zeros &= (0 == egrbypff_ovf0_err_);
    r += indent_string + "  " + std::string("egrbypff_ovf1_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egrbypff_ovf1_err_) ) + "\n";
    all_zeros &= (0 == egrbypff_ovf1_err_);
    r += indent_string + "  " + std::string("egrbypff_ovf2_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egrbypff_ovf2_err_) ) + "\n";
    all_zeros &= (0 == egrbypff_ovf2_err_);
    r += indent_string + "  " + std::string("egrbypff_ovf3_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egrbypff_ovf3_err_) ) + "\n";
    all_zeros &= (0 == egrbypff_ovf3_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EbufFifoRegsIntStatMutable") + ":\n";
    r += indent_string + "  " + std::string("egrbypff_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egrbypff_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == egrbypff_ecc_dual_err_);
    r += indent_string + "  " + std::string("egrbypff_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egrbypff_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == egrbypff_ecc_sngl_err_);
    r += indent_string + "  " + std::string("egrbypff_ovf0_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egrbypff_ovf0_err_) ) + "\n";
    all_zeros &= (0 == egrbypff_ovf0_err_);
    r += indent_string + "  " + std::string("egrbypff_ovf1_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egrbypff_ovf1_err_) ) + "\n";
    all_zeros &= (0 == egrbypff_ovf1_err_);
    r += indent_string + "  " + std::string("egrbypff_ovf2_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egrbypff_ovf2_err_) ) + "\n";
    all_zeros &= (0 == egrbypff_ovf2_err_);
    r += indent_string + "  " + std::string("egrbypff_ovf3_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egrbypff_ovf3_err_) ) + "\n";
    all_zeros &= (0 == egrbypff_ovf3_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t egrbypff_ecc_dual_err_;
  uint8_t egrbypff_ecc_sngl_err_;
  uint8_t egrbypff_ovf0_err_;
  uint8_t egrbypff_ovf1_err_;
  uint8_t egrbypff_ovf2_err_;
  uint8_t egrbypff_ovf3_err_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_egrNx_regs
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    offset += 0x40000; // to get to ebp18_reg
    offset += 0x30000; // to get to egrNx_reg
    assert(index_egrNx_regs < 18);
    offset += index_egrNx_regs * 0x200; // egrNx_regs[]
    offset += 0x80; // to get to ebuf_fifo_regs
    offset += 0x10; // to get to int_stat
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_EBUF_FIFO_REGS_INT_STAT_MUTABLE_H__
