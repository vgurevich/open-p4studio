/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_EGR_NX_REGS_H__
#define __REGISTER_INCLUDES_EGR_NX_REGS_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "ebuf_disp_regs.h"
#include "ebuf_fifo_regs.h"
#include "epb_disp_port_regs.h"
#include "epb_dprs_regs.h"

namespace tofino {
  namespace register_classes {

class EgrNxRegs : public model_core::RegisterBlock<RegisterCallback> {
public:
  EgrNxRegs(
      int chipNumber, int index_pipe_addrmap, int index_egrNx_regs, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_egrNx_regs), 512, false, write_callback, read_callback, std::string("EgrNxRegs")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_egrNx_regs))
    {
    }
  EgrNxRegs(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "EgrNxRegs")
    {
    }
public:





  EbufDispRegs &ebuf_disp_regs() { return ebuf_disp_regs_; }





  EbufFifoRegs &ebuf_fifo_regs() { return ebuf_fifo_regs_; }





  EpbDprsRegs &epb_dprs_regs() { return epb_dprs_regs_; }





  EpbDispPortRegs &epb_disp_port_regs() { return epb_disp_port_regs_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x3c) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      ebuf_disp_regs_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xb4) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      ebuf_fifo_regs_.read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x140) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      epb_dprs_regs_.read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x1fc) {
      offset -= 0x180;
      if (read_callback_) read_callback_();
      epb_disp_port_regs_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x3c) {
      offset -= 0x0;
      ebuf_disp_regs_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xb4) {
      offset -= 0x80;
      ebuf_fifo_regs_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x140) {
      offset -= 0x100;
      epb_dprs_regs_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x1fc) {
      offset -= 0x180;
      epb_disp_port_regs_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    ebuf_disp_regs_.reset();
    ebuf_fifo_regs_.reset();
    epb_dprs_regs_.reset();
    epb_disp_port_regs_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x3c) {
      offset -= 0x0;
      r += ebuf_disp_regs_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xb4) {
      offset -= 0x80;
      r += ebuf_fifo_regs_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x140) {
      offset -= 0x100;
      r += epb_dprs_regs_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x1fc) {
      offset -= 0x180;
      r += epb_disp_port_regs_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += ebuf_disp_regs_.to_string(print_zeros,indent_string) ;
    r += ebuf_fifo_regs_.to_string(print_zeros,indent_string) ;
    r += epb_dprs_regs_.to_string(print_zeros,indent_string) ;
    r += epb_disp_port_regs_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  EbufDispRegs ebuf_disp_regs_;
  EbufFifoRegs ebuf_fifo_regs_;
  EpbDprsRegs epb_dprs_regs_;
  EpbDispPortRegs epb_disp_port_regs_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_egrNx_regs
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    offset += 0x40000; // to get to ebp18_reg
    offset += 0x30000; // to get to egrNx_reg
    assert(index_egrNx_regs < 18);
    offset += index_egrNx_regs * 0x200; // egrNx_regs[]
    return offset;
  }

};





  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_EGR_NX_REGS_H__
