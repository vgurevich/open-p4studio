/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_EPB_DPRS_REGS_H__
#define __REGISTER_INCLUDES_EPB_DPRS_REGS_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "epb_dprs_regs_capt_dual_ecc_addr.h"
#include "epb_dprs_regs_chnl_ctrl.h"
#include "epb_dprs_regs_cred_ctrl.h"
#include "epb_dprs_regs_cred_cur.h"
#include "epb_dprs_regs_dprsff_emp.h"
#include "epb_dprs_regs_dprsff_max.h"
#include "epb_dprs_regs_int_en.h"
#include "epb_dprs_regs_int_freeze.h"
#include "epb_dprs_regs_int_inj.h"
#include "epb_dprs_regs_int_pri.h"
#include "epb_dprs_regs_int_stat.h"
#include "epb_dprs_regs_port_id.h"

namespace tofino {
  namespace register_classes {

class EpbDprsRegs : public model_core::RegisterBlock<RegisterCallback> {
public:
  EpbDprsRegs(
      int chipNumber, int index_pipe_addrmap, int index_egrNx_regs, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_egrNx_regs), 64, false, write_callback, read_callback, std::string("EpbDprsRegs")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_egrNx_regs))
    {
    }
  EpbDprsRegs(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "EpbDprsRegs")
    {
    }
public:







  EpbDprsRegsChnlCtrl &chnl_ctrl(int j0) { return chnl_ctrl_[j0]; }





  EpbDprsRegsPortId &port_id() { return port_id_; }





  EpbDprsRegsIntStat &int_stat() { return int_stat_; }





  EpbDprsRegsIntEn &int_en() { return int_en_; }





  EpbDprsRegsIntPri &int_pri() { return int_pri_; }






  EpbDprsRegsIntInj &int_inj() { return int_inj_; }





  EpbDprsRegsCaptDualEccAddr &capt_dual_ecc_addr() { return capt_dual_ecc_addr_; }





  EpbDprsRegsCredCtrl &cred_ctrl() { return cred_ctrl_; }





  EpbDprsRegsCredCur &cred_cur() { return cred_cur_; }





  EpbDprsRegsDprsffMax &dprsff_max() { return dprsff_max_; }





  EpbDprsRegsDprsffEmp &dprsff_emp() { return dprsff_emp_; }





  EpbDprsRegsIntFreeze &int_freeze() { return int_freeze_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x10) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      chnl_ctrl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      port_id_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      int_stat_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      int_en_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      int_pri_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      int_inj_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      capt_dual_ecc_addr_.read( offset, data );
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      if (read_callback_) read_callback_();
      cred_ctrl_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      cred_cur_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      dprsff_max_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      dprsff_emp_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      int_freeze_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x10) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      chnl_ctrl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      port_id_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      int_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      int_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      int_pri_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      int_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      capt_dual_ecc_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      cred_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      cred_cur_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      dprsff_max_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      dprsff_emp_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      int_freeze_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : chnl_ctrl_) {
      f0.reset();
    }
    port_id_.reset();
    int_stat_.reset();
    int_en_.reset();
    int_pri_.reset();
    int_inj_.reset();
    capt_dual_ecc_addr_.reset();
    cred_ctrl_.reset();
    cred_cur_.reset();
    dprsff_max_.reset();
    dprsff_emp_.reset();
    int_freeze_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x10) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += chnl_ctrl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += port_id_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += int_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += int_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += int_pri_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += int_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += capt_dual_ecc_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      r += cred_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += cred_cur_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += dprsff_max_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += dprsff_emp_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += int_freeze_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<4;++a0) {
      r += chnl_ctrl_[a0].to_string(print_zeros,indent_string) ;
    }
    r += port_id_.to_string(print_zeros,indent_string) ;
    r += int_stat_.to_string(print_zeros,indent_string) ;
    r += int_en_.to_string(print_zeros,indent_string) ;
    r += int_pri_.to_string(print_zeros,indent_string) ;
    r += int_inj_.to_string(print_zeros,indent_string) ;
    r += capt_dual_ecc_addr_.to_string(print_zeros,indent_string) ;
    r += cred_ctrl_.to_string(print_zeros,indent_string) ;
    r += cred_cur_.to_string(print_zeros,indent_string) ;
    r += dprsff_max_.to_string(print_zeros,indent_string) ;
    r += dprsff_emp_.to_string(print_zeros,indent_string) ;
    r += int_freeze_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< EpbDprsRegsChnlCtrl, 4 > chnl_ctrl_;
  EpbDprsRegsPortId port_id_;
  EpbDprsRegsIntStat int_stat_;
  EpbDprsRegsIntEn int_en_;
  EpbDprsRegsIntPri int_pri_;
  EpbDprsRegsIntInj int_inj_;
  EpbDprsRegsCaptDualEccAddr capt_dual_ecc_addr_;
  EpbDprsRegsCredCtrl cred_ctrl_;
  EpbDprsRegsCredCur cred_cur_;
  EpbDprsRegsDprsffMax dprsff_max_;
  EpbDprsRegsDprsffEmp dprsff_emp_;
  EpbDprsRegsIntFreeze int_freeze_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_egrNx_regs
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    offset += 0x40000; // to get to ebp18_reg
    offset += 0x30000; // to get to egrNx_reg
    assert(index_egrNx_regs < 18);
    offset += index_egrNx_regs * 0x200; // egrNx_regs[]
    offset += 0x100; // to get to epb_dprs_regs
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_EPB_DPRS_REGS_H__
