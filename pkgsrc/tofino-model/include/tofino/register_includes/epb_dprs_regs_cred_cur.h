/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_EPB_DPRS_REGS_CRED_CUR_H__
#define __REGISTER_INCLUDES_EPB_DPRS_REGS_CRED_CUR_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class EpbDprsRegsCredCur : public model_core::RegisterBlock<RegisterCallback> {
public:
  EpbDprsRegsCredCur(
      int chipNumber, int index_pipe_addrmap, int index_egrNx_regs, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_egrNx_regs), 4, false, write_callback, read_callback, std::string("EpbDprsRegsCredCur")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_egrNx_regs))
    {
    }
  EpbDprsRegsCredCur(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "EpbDprsRegsCredCur")
    {
    }
public:





  uint8_t &fc0_cred() { return fc0_cred_; }





  uint8_t &fc1_cred() { return fc1_cred_; }





  uint8_t &fc2_cred() { return fc2_cred_; }





  uint8_t &fc3_cred() { return fc3_cred_; }





  uint8_t &fc0_mod5() { return fc0_mod5_; }





  uint8_t &fc1_mod5() { return fc1_mod5_; }





  uint8_t &fc2_mod5() { return fc2_mod5_; }





  uint8_t &fc3_mod5() { return fc3_mod5_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (fc0_cred_ & 0xf);
    *data |= ((fc1_cred_ & 0xf) << 4);
    *data |= ((fc2_cred_ & 0xf) << 8);
    *data |= ((fc3_cred_ & 0xf) << 12);
    *data |= ((fc0_mod5_ & 0x7) << 16);
    *data |= ((fc1_mod5_ & 0x7) << 20);
    *data |= ((fc2_mod5_ & 0x7) << 24);
    *data |= ((fc3_mod5_ & 0x7) << 28);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    fc0_cred_ = (data & 0xf);
    fc1_cred_ = ((data >> 4) & 0xf);
    fc2_cred_ = ((data >> 8) & 0xf);
    fc3_cred_ = ((data >> 12) & 0xf);
    fc0_mod5_ = ((data >> 16) & 0x7);
    fc1_mod5_ = ((data >> 20) & 0x7);
    fc2_mod5_ = ((data >> 24) & 0x7);
    fc3_mod5_ = ((data >> 28) & 0x7);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    fc0_cred_ = 0x0;
    fc1_cred_ = 0x0;
    fc2_cred_ = 0x0;
    fc3_cred_ = 0x0;
    fc0_mod5_ = 0x0;
    fc1_mod5_ = 0x0;
    fc2_mod5_ = 0x0;
    fc3_mod5_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EpbDprsRegsCredCur") + ":\n";
    r += indent_string + "  " + std::string("fc0_cred") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fc0_cred_) ) + "\n";
    all_zeros &= (0 == fc0_cred_);
    r += indent_string + "  " + std::string("fc1_cred") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fc1_cred_) ) + "\n";
    all_zeros &= (0 == fc1_cred_);
    r += indent_string + "  " + std::string("fc2_cred") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fc2_cred_) ) + "\n";
    all_zeros &= (0 == fc2_cred_);
    r += indent_string + "  " + std::string("fc3_cred") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fc3_cred_) ) + "\n";
    all_zeros &= (0 == fc3_cred_);
    r += indent_string + "  " + std::string("fc0_mod5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fc0_mod5_) ) + "\n";
    all_zeros &= (0 == fc0_mod5_);
    r += indent_string + "  " + std::string("fc1_mod5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fc1_mod5_) ) + "\n";
    all_zeros &= (0 == fc1_mod5_);
    r += indent_string + "  " + std::string("fc2_mod5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fc2_mod5_) ) + "\n";
    all_zeros &= (0 == fc2_mod5_);
    r += indent_string + "  " + std::string("fc3_mod5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fc3_mod5_) ) + "\n";
    all_zeros &= (0 == fc3_mod5_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EpbDprsRegsCredCur") + ":\n";
    r += indent_string + "  " + std::string("fc0_cred") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fc0_cred_) ) + "\n";
    all_zeros &= (0 == fc0_cred_);
    r += indent_string + "  " + std::string("fc1_cred") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fc1_cred_) ) + "\n";
    all_zeros &= (0 == fc1_cred_);
    r += indent_string + "  " + std::string("fc2_cred") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fc2_cred_) ) + "\n";
    all_zeros &= (0 == fc2_cred_);
    r += indent_string + "  " + std::string("fc3_cred") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fc3_cred_) ) + "\n";
    all_zeros &= (0 == fc3_cred_);
    r += indent_string + "  " + std::string("fc0_mod5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fc0_mod5_) ) + "\n";
    all_zeros &= (0 == fc0_mod5_);
    r += indent_string + "  " + std::string("fc1_mod5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fc1_mod5_) ) + "\n";
    all_zeros &= (0 == fc1_mod5_);
    r += indent_string + "  " + std::string("fc2_mod5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fc2_mod5_) ) + "\n";
    all_zeros &= (0 == fc2_mod5_);
    r += indent_string + "  " + std::string("fc3_mod5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fc3_mod5_) ) + "\n";
    all_zeros &= (0 == fc3_mod5_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t fc0_cred_;
  uint8_t fc1_cred_;
  uint8_t fc2_cred_;
  uint8_t fc3_cred_;
  uint8_t fc0_mod5_;
  uint8_t fc1_mod5_;
  uint8_t fc2_mod5_;
  uint8_t fc3_mod5_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_egrNx_regs
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    offset += 0x40000; // to get to ebp18_reg
    offset += 0x30000; // to get to egrNx_reg
    assert(index_egrNx_regs < 18);
    offset += index_egrNx_regs * 0x200; // egrNx_regs[]
    offset += 0x100; // to get to epb_dprs_regs
    offset += 0x30; // to get to cred_cur
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_EPB_DPRS_REGS_CRED_CUR_H__
