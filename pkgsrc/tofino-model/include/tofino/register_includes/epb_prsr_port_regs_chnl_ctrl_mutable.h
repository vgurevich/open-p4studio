/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_EPB_PRSR_PORT_REGS_CHNL_CTRL_MUTABLE_H__
#define __REGISTER_INCLUDES_EPB_PRSR_PORT_REGS_CHNL_CTRL_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class EpbPrsrPortRegsChnlCtrlMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  EpbPrsrPortRegsChnlCtrlMutable(
      int chipNumber, int index_pipe_addrmap, int index_ebp_rspec, int index_epb_prsr_port_regs_chnl_ctrl, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ebp_rspec, index_epb_prsr_port_regs_chnl_ctrl), 4, true, write_callback, read_callback, std::string("EpbPrsrPortRegsChnlCtrlMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ebp_rspec) + "," + boost::lexical_cast<std::string>(index_epb_prsr_port_regs_chnl_ctrl))
    {
    }
  EpbPrsrPortRegsChnlCtrlMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "EpbPrsrPortRegsChnlCtrlMutable")
    {
    }
public:




















  uint16_t meta_opt() { return meta_opt_; }
  void meta_opt(const uint16_t &v) { meta_opt_=v; }





  uint8_t chnl_ena() { return chnl_ena_; }
  void chnl_ena(const uint8_t &v) { chnl_ena_=v; }








  uint8_t afull_thr() { return afull_thr_; }
  void afull_thr(const uint8_t &v) { afull_thr_=v; }









  uint8_t aemp_thr() { return aemp_thr_; }
  void aemp_thr(const uint8_t &v) { aemp_thr_=v; }






  uint8_t prsr_stall_full() { return prsr_stall_full_; }
  void prsr_stall_full(const uint8_t &v) { prsr_stall_full_=v; }






  uint8_t timestamp_shift() { return timestamp_shift_; }
  void timestamp_shift(const uint8_t &v) { timestamp_shift_=v; }





  uint8_t pipeid_ovr() { return pipeid_ovr_; }
  void pipeid_ovr(const uint8_t &v) { pipeid_ovr_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (meta_opt_ & 0x1fff);
    *data |= ((chnl_ena_ & 0x1) << 16);
    *data |= ((afull_thr_ & 0x7) << 17);
    *data |= ((aemp_thr_ & 0x7) << 20);
    *data |= ((prsr_stall_full_ & 0x1) << 23);
    *data |= ((timestamp_shift_ & 0xf) << 24);
    *data |= ((pipeid_ovr_ & 0x7) << 28);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    meta_opt_ = (data & 0x1fff);
    chnl_ena_ = ((data >> 16) & 0x1);
    afull_thr_ = ((data >> 17) & 0x7);
    aemp_thr_ = ((data >> 20) & 0x7);
    prsr_stall_full_ = ((data >> 23) & 0x1);
    timestamp_shift_ = ((data >> 24) & 0xf);
    pipeid_ovr_ = ((data >> 28) & 0x7);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    meta_opt_ = 0x0;
    chnl_ena_ = 0x0;
    afull_thr_ = 0x2;
    aemp_thr_ = 0x2;
    prsr_stall_full_ = 0x1;
    timestamp_shift_ = 0x0;
    pipeid_ovr_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EpbPrsrPortRegsChnlCtrlMutable") + ":\n";
    r += indent_string + "  " + std::string("meta_opt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_opt_) ) + "\n";
    all_zeros &= (0 == meta_opt_);
    r += indent_string + "  " + std::string("chnl_ena") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_ena_) ) + "\n";
    all_zeros &= (0 == chnl_ena_);
    r += indent_string + "  " + std::string("afull_thr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(afull_thr_) ) + "\n";
    all_zeros &= (0 == afull_thr_);
    r += indent_string + "  " + std::string("aemp_thr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aemp_thr_) ) + "\n";
    all_zeros &= (0 == aemp_thr_);
    r += indent_string + "  " + std::string("prsr_stall_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr_stall_full_) ) + "\n";
    all_zeros &= (0 == prsr_stall_full_);
    r += indent_string + "  " + std::string("timestamp_shift") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(timestamp_shift_) ) + "\n";
    all_zeros &= (0 == timestamp_shift_);
    r += indent_string + "  " + std::string("pipeid_ovr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pipeid_ovr_) ) + "\n";
    all_zeros &= (0 == pipeid_ovr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EpbPrsrPortRegsChnlCtrlMutable") + ":\n";
    r += indent_string + "  " + std::string("meta_opt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_opt_) ) + "\n";
    all_zeros &= (0 == meta_opt_);
    r += indent_string + "  " + std::string("chnl_ena") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_ena_) ) + "\n";
    all_zeros &= (0 == chnl_ena_);
    r += indent_string + "  " + std::string("afull_thr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(afull_thr_) ) + "\n";
    all_zeros &= (0 == afull_thr_);
    r += indent_string + "  " + std::string("aemp_thr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(aemp_thr_) ) + "\n";
    all_zeros &= (0 == aemp_thr_);
    r += indent_string + "  " + std::string("prsr_stall_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr_stall_full_) ) + "\n";
    all_zeros &= (0 == prsr_stall_full_);
    r += indent_string + "  " + std::string("timestamp_shift") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(timestamp_shift_) ) + "\n";
    all_zeros &= (0 == timestamp_shift_);
    r += indent_string + "  " + std::string("pipeid_ovr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pipeid_ovr_) ) + "\n";
    all_zeros &= (0 == pipeid_ovr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint16_t meta_opt_;
  uint8_t chnl_ena_;
  uint8_t afull_thr_;
  uint8_t aemp_thr_;
  uint8_t prsr_stall_full_;
  uint8_t timestamp_shift_;
  uint8_t pipeid_ovr_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ebp_rspec, int index_epb_prsr_port_regs_chnl_ctrl
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    offset += 0x40000; // to get to ebp18_reg
    assert(index_ebp_rspec < 18);
    offset += index_ebp_rspec * 0x2000; // ebp_rspec[]
    offset += 0x1800; // to get to epb_prsr_port_regs
    assert(index_epb_prsr_port_regs_chnl_ctrl < 4);
    offset += index_epb_prsr_port_regs_chnl_ctrl * 0x4; // epb_prsr_port_regs_chnl_ctrl[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_EPB_PRSR_PORT_REGS_CHNL_CTRL_MUTABLE_H__
