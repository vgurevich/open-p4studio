/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_INT_STAT_H__
#define __REGISTER_INCLUDES_INT_STAT_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class IntStat : public model_core::RegisterBlock<RegisterCallback> {
public:
  IntStat(
      int chipNumber, int index_pipe_addrmap, int index_ibp_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ibp_rspec), 4, false, write_callback, read_callback, std::string("IntStat")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ibp_rspec))
    {
    }
  IntStat(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "IntStat")
    {
    }
public:





  uint8_t &ptrff_ecc_dual_err() { return ptrff_ecc_dual_err_; }





  uint8_t &recirc_ecc_dual_err() { return recirc_ecc_dual_err_; }





  uint8_t &dbuf_ecc_dual_err() { return dbuf_ecc_dual_err_; }





  uint8_t &indm_ecc_dual_err() { return indm_ecc_dual_err_; }





  uint8_t &meta_ecc_dual_err() { return meta_ecc_dual_err_; }





  uint8_t &bcnt_ecc_dual_err() { return bcnt_ecc_dual_err_; }





  uint8_t &ptrff_ecc_sngl_err() { return ptrff_ecc_sngl_err_; }





  uint8_t &recirc_ecc_sngl_err() { return recirc_ecc_sngl_err_; }





  uint8_t &dbuf_ecc_sngl_err() { return dbuf_ecc_sngl_err_; }





  uint8_t &indm_ecc_sngl_err() { return indm_ecc_sngl_err_; }





  uint8_t &meta_ecc_sngl_err() { return meta_ecc_sngl_err_; }





  uint8_t &bcnt_ecc_sngl_err() { return bcnt_ecc_sngl_err_; }





  uint8_t &meta_ovf() { return meta_ovf_; }





  uint8_t &rclean_ovf() { return rclean_ovf_; }





  uint8_t &pclean_ovf() { return pclean_ovf_; }





  uint8_t &dprs_ovf() { return dprs_ovf_; }





  uint8_t &recirc_ovf() { return recirc_ovf_; }





  uint8_t &linklist_err() { return linklist_err_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (ptrff_ecc_dual_err_ & 0x1);
    *data |= ((recirc_ecc_dual_err_ & 0x1) << 1);
    *data |= ((dbuf_ecc_dual_err_ & 0x1) << 2);
    *data |= ((indm_ecc_dual_err_ & 0x1) << 3);
    *data |= ((meta_ecc_dual_err_ & 0x1) << 4);
    *data |= ((bcnt_ecc_dual_err_ & 0x1) << 5);
    *data |= ((ptrff_ecc_sngl_err_ & 0x1) << 6);
    *data |= ((recirc_ecc_sngl_err_ & 0x1) << 7);
    *data |= ((dbuf_ecc_sngl_err_ & 0x1) << 8);
    *data |= ((indm_ecc_sngl_err_ & 0x1) << 9);
    *data |= ((meta_ecc_sngl_err_ & 0x1) << 10);
    *data |= ((bcnt_ecc_sngl_err_ & 0x1) << 11);
    *data |= ((meta_ovf_ & 0x1) << 12);
    *data |= ((rclean_ovf_ & 0x1) << 13);
    *data |= ((pclean_ovf_ & 0x1) << 14);
    *data |= ((dprs_ovf_ & 0x1) << 15);
    *data |= ((recirc_ovf_ & 0x1) << 16);
    *data |= ((linklist_err_ & 0x1) << 17);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    ptrff_ecc_dual_err_ &= ~(data & 0x1);
    recirc_ecc_dual_err_ &= ~((data >> 1) & 0x1);
    dbuf_ecc_dual_err_ &= ~((data >> 2) & 0x1);
    indm_ecc_dual_err_ &= ~((data >> 3) & 0x1);
    meta_ecc_dual_err_ &= ~((data >> 4) & 0x1);
    bcnt_ecc_dual_err_ &= ~((data >> 5) & 0x1);
    ptrff_ecc_sngl_err_ &= ~((data >> 6) & 0x1);
    recirc_ecc_sngl_err_ &= ~((data >> 7) & 0x1);
    dbuf_ecc_sngl_err_ &= ~((data >> 8) & 0x1);
    indm_ecc_sngl_err_ &= ~((data >> 9) & 0x1);
    meta_ecc_sngl_err_ &= ~((data >> 10) & 0x1);
    bcnt_ecc_sngl_err_ &= ~((data >> 11) & 0x1);
    meta_ovf_ &= ~((data >> 12) & 0x1);
    rclean_ovf_ &= ~((data >> 13) & 0x1);
    pclean_ovf_ &= ~((data >> 14) & 0x1);
    dprs_ovf_ &= ~((data >> 15) & 0x1);
    recirc_ovf_ &= ~((data >> 16) & 0x1);
    linklist_err_ &= ~((data >> 17) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    ptrff_ecc_dual_err_ = 0x0;
    recirc_ecc_dual_err_ = 0x0;
    dbuf_ecc_dual_err_ = 0x0;
    indm_ecc_dual_err_ = 0x0;
    meta_ecc_dual_err_ = 0x0;
    bcnt_ecc_dual_err_ = 0x0;
    ptrff_ecc_sngl_err_ = 0x0;
    recirc_ecc_sngl_err_ = 0x0;
    dbuf_ecc_sngl_err_ = 0x0;
    indm_ecc_sngl_err_ = 0x0;
    meta_ecc_sngl_err_ = 0x0;
    bcnt_ecc_sngl_err_ = 0x0;
    meta_ovf_ = 0x0;
    rclean_ovf_ = 0x0;
    pclean_ovf_ = 0x0;
    dprs_ovf_ = 0x0;
    recirc_ovf_ = 0x0;
    linklist_err_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("IntStat") + ":\n";
    r += indent_string + "  " + std::string("ptrff_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ptrff_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == ptrff_ecc_dual_err_);
    r += indent_string + "  " + std::string("recirc_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(recirc_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == recirc_ecc_dual_err_);
    r += indent_string + "  " + std::string("dbuf_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dbuf_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == dbuf_ecc_dual_err_);
    r += indent_string + "  " + std::string("indm_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(indm_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == indm_ecc_dual_err_);
    r += indent_string + "  " + std::string("meta_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == meta_ecc_dual_err_);
    r += indent_string + "  " + std::string("bcnt_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bcnt_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == bcnt_ecc_dual_err_);
    r += indent_string + "  " + std::string("ptrff_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ptrff_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == ptrff_ecc_sngl_err_);
    r += indent_string + "  " + std::string("recirc_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(recirc_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == recirc_ecc_sngl_err_);
    r += indent_string + "  " + std::string("dbuf_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dbuf_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == dbuf_ecc_sngl_err_);
    r += indent_string + "  " + std::string("indm_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(indm_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == indm_ecc_sngl_err_);
    r += indent_string + "  " + std::string("meta_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == meta_ecc_sngl_err_);
    r += indent_string + "  " + std::string("bcnt_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bcnt_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == bcnt_ecc_sngl_err_);
    r += indent_string + "  " + std::string("meta_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_ovf_) ) + "\n";
    all_zeros &= (0 == meta_ovf_);
    r += indent_string + "  " + std::string("rclean_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rclean_ovf_) ) + "\n";
    all_zeros &= (0 == rclean_ovf_);
    r += indent_string + "  " + std::string("pclean_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pclean_ovf_) ) + "\n";
    all_zeros &= (0 == pclean_ovf_);
    r += indent_string + "  " + std::string("dprs_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprs_ovf_) ) + "\n";
    all_zeros &= (0 == dprs_ovf_);
    r += indent_string + "  " + std::string("recirc_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(recirc_ovf_) ) + "\n";
    all_zeros &= (0 == recirc_ovf_);
    r += indent_string + "  " + std::string("linklist_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(linklist_err_) ) + "\n";
    all_zeros &= (0 == linklist_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("IntStat") + ":\n";
    r += indent_string + "  " + std::string("ptrff_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ptrff_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == ptrff_ecc_dual_err_);
    r += indent_string + "  " + std::string("recirc_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(recirc_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == recirc_ecc_dual_err_);
    r += indent_string + "  " + std::string("dbuf_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dbuf_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == dbuf_ecc_dual_err_);
    r += indent_string + "  " + std::string("indm_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(indm_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == indm_ecc_dual_err_);
    r += indent_string + "  " + std::string("meta_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == meta_ecc_dual_err_);
    r += indent_string + "  " + std::string("bcnt_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bcnt_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == bcnt_ecc_dual_err_);
    r += indent_string + "  " + std::string("ptrff_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ptrff_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == ptrff_ecc_sngl_err_);
    r += indent_string + "  " + std::string("recirc_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(recirc_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == recirc_ecc_sngl_err_);
    r += indent_string + "  " + std::string("dbuf_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dbuf_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == dbuf_ecc_sngl_err_);
    r += indent_string + "  " + std::string("indm_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(indm_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == indm_ecc_sngl_err_);
    r += indent_string + "  " + std::string("meta_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == meta_ecc_sngl_err_);
    r += indent_string + "  " + std::string("bcnt_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bcnt_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == bcnt_ecc_sngl_err_);
    r += indent_string + "  " + std::string("meta_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meta_ovf_) ) + "\n";
    all_zeros &= (0 == meta_ovf_);
    r += indent_string + "  " + std::string("rclean_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rclean_ovf_) ) + "\n";
    all_zeros &= (0 == rclean_ovf_);
    r += indent_string + "  " + std::string("pclean_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pclean_ovf_) ) + "\n";
    all_zeros &= (0 == pclean_ovf_);
    r += indent_string + "  " + std::string("dprs_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dprs_ovf_) ) + "\n";
    all_zeros &= (0 == dprs_ovf_);
    r += indent_string + "  " + std::string("recirc_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(recirc_ovf_) ) + "\n";
    all_zeros &= (0 == recirc_ovf_);
    r += indent_string + "  " + std::string("linklist_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(linklist_err_) ) + "\n";
    all_zeros &= (0 == linklist_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t ptrff_ecc_dual_err_;
  uint8_t recirc_ecc_dual_err_;
  uint8_t dbuf_ecc_dual_err_;
  uint8_t indm_ecc_dual_err_;
  uint8_t meta_ecc_dual_err_;
  uint8_t bcnt_ecc_dual_err_;
  uint8_t ptrff_ecc_sngl_err_;
  uint8_t recirc_ecc_sngl_err_;
  uint8_t dbuf_ecc_sngl_err_;
  uint8_t indm_ecc_sngl_err_;
  uint8_t meta_ecc_sngl_err_;
  uint8_t bcnt_ecc_sngl_err_;
  uint8_t meta_ovf_;
  uint8_t rclean_ovf_;
  uint8_t pclean_ovf_;
  uint8_t dprs_ovf_;
  uint8_t recirc_ovf_;
  uint8_t linklist_err_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ibp_rspec
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    assert(index_ibp_rspec < 18);
    offset += index_ibp_rspec * 0x2000; // ibp_rspec[]
    offset += 0x1800; // to get to ing_buf_regs
    offset += 0x18; // to get to glb_group_int_stat
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_INT_STAT_H__
