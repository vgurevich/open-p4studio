/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAC_ADDRMAP_MUTABLE_H__
#define __REGISTER_INCLUDES_MAC_ADDRMAP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "comira_regs_mutable.h"
#include "eth_regs_mutable.h"

namespace tofino {
  namespace register_classes {

class MacAddrmapMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MacAddrmapMutable(
      int chipNumber, int index_mac_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_mac_addrmap), 130504, true, write_callback, read_callback, std::string("MacAddrmapMutable")+":"+boost::lexical_cast<std::string>(index_mac_addrmap))
    {
    }
  MacAddrmapMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MacAddrmapMutable")
    {
    }
public:





  ComiraRegsMutable &comira_regs() { return comira_regs_; }





  EthRegsMutable &eth_regs() { return eth_regs_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      comira_regs_.read( offset, data );
    }
    else if (offset >= 0x1fc00 && offset < 0x1fdc8) {
      offset -= 0x1fc00;
      if (read_callback_) read_callback_();
      eth_regs_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      comira_regs_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1fc00 && offset < 0x1fdc8) {
      offset -= 0x1fc00;
      eth_regs_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    comira_regs_.reset();
    eth_regs_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += comira_regs_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1fc00 && offset < 0x1fdc8) {
      offset -= 0x1fc00;
      r += eth_regs_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += comira_regs_.to_string(print_zeros,indent_string) ;
    r += eth_regs_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  ComiraRegsMutable comira_regs_;
  EthRegsMutable eth_regs_;
private:
  static int StartOffset(
      int index_mac_addrmap
      ) {
    int offset=0;
    offset += 0x1000000; // to get to macs
    assert(index_mac_addrmap < 65);
    offset += index_mac_addrmap * 0x20000; // mac_addrmap[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_MAC_ADDRMAP_MUTABLE_H__
