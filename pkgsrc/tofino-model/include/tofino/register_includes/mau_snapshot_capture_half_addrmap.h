/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_SNAPSHOT_CAPTURE_HALF_ADDRMAP_H__
#define __REGISTER_INCLUDES_MAU_SNAPSHOT_CAPTURE_HALF_ADDRMAP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "mau_snapshot_capture_subword16b.h"
#include "mau_snapshot_capture_subword32b_hi.h"
#include "mau_snapshot_capture_subword32b_lo.h"
#include "mau_snapshot_capture_subword8b.h"

namespace tofino {
  namespace register_classes {

class MauSnapshotCaptureHalfAddrmap : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauSnapshotCaptureHalfAddrmap(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_snapshot_capture_half_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_snapshot_capture_half_addrmap), 1024, false, write_callback, read_callback, std::string("MauSnapshotCaptureHalfAddrmap")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_snapshot_capture_half_addrmap))
    {
    }
  MauSnapshotCaptureHalfAddrmap(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MauSnapshotCaptureHalfAddrmap")
    {
    }
public:









  MauSnapshotCaptureSubword32bLo &mau_snapshot_capture_subword32b_lo(int j0) { return mau_snapshot_capture_subword32b_lo_[j0]; }









  MauSnapshotCaptureSubword32bHi &mau_snapshot_capture_subword32b_hi(int j0) { return mau_snapshot_capture_subword32b_hi_[j0]; }









  MauSnapshotCaptureSubword8b &mau_snapshot_capture_subword8b(int j0) { return mau_snapshot_capture_subword8b_[j0]; }









  MauSnapshotCaptureSubword16b &mau_snapshot_capture_subword16b(int j0) { return mau_snapshot_capture_subword16b_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x80) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_snapshot_capture_subword32b_lo_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x100) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_snapshot_capture_subword32b_hi_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x280) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_snapshot_capture_subword8b_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x300 && offset < 0x3c0) {
      offset -= 0x300;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_snapshot_capture_subword16b_[ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x80) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_snapshot_capture_subword32b_lo_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x100) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_snapshot_capture_subword32b_hi_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x280) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_snapshot_capture_subword8b_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x300 && offset < 0x3c0) {
      offset -= 0x300;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_snapshot_capture_subword16b_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : mau_snapshot_capture_subword32b_lo_) {
      f0.reset();
    }
    for (auto &f0 : mau_snapshot_capture_subword32b_hi_) {
      f0.reset();
    }
    for (auto &f0 : mau_snapshot_capture_subword8b_) {
      f0.reset();
    }
    for (auto &f0 : mau_snapshot_capture_subword16b_) {
      f0.reset();
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x80) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_snapshot_capture_subword32b_lo_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x100) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_snapshot_capture_subword32b_hi_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x280) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_snapshot_capture_subword8b_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x300 && offset < 0x3c0) {
      offset -= 0x300;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_snapshot_capture_subword16b_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<32;++a0) {
      r += mau_snapshot_capture_subword32b_lo_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<32;++a0) {
      r += mau_snapshot_capture_subword32b_hi_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<32;++a0) {
      r += mau_snapshot_capture_subword8b_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<48;++a0) {
      r += mau_snapshot_capture_subword16b_[a0].to_string(print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< MauSnapshotCaptureSubword32bLo, 32 > mau_snapshot_capture_subword32b_lo_;
  std::array< MauSnapshotCaptureSubword32bHi, 32 > mau_snapshot_capture_subword32b_hi_;
  std::array< MauSnapshotCaptureSubword8b, 32 > mau_snapshot_capture_subword8b_;
  std::array< MauSnapshotCaptureSubword16b, 48 > mau_snapshot_capture_subword16b_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_snapshot_capture_half_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    assert(index_mau_addrmap < 12);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to dp
    offset += 0x12000; // to get to snapshot_dp
    assert(index_mau_snapshot_capture_half_addrmap < 2);
    offset += index_mau_snapshot_capture_half_addrmap * 0x400; // mau_snapshot_capture_half_addrmap[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_MAU_SNAPSHOT_CAPTURE_HALF_ADDRMAP_H__
