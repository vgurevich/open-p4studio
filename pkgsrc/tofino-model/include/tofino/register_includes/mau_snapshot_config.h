/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_SNAPSHOT_CONFIG_H__
#define __REGISTER_INCLUDES_MAU_SNAPSHOT_CONFIG_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class MauSnapshotConfig : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauSnapshotConfig(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap), 4, false, write_callback, read_callback, std::string("MauSnapshotConfig")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap))
    {
    }
  MauSnapshotConfig(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MauSnapshotConfig")
    {
    }
public:
  uint8_t &timebased_snapshot_ingress_enable() { return timebased_snapshot_ingress_enable_; }
  uint8_t &timebased_snapshot_egress_enable() { return timebased_snapshot_egress_enable_; }
  uint8_t &snapshot_both_threads() { return snapshot_both_threads_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (timebased_snapshot_ingress_enable_ & 0x1);
    *data |= ((timebased_snapshot_egress_enable_ & 0x1) << 1);
    *data |= ((snapshot_both_threads_ & 0x1) << 2);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    timebased_snapshot_ingress_enable_ = (data & 0x1);
    timebased_snapshot_egress_enable_ = ((data >> 1) & 0x1);
    snapshot_both_threads_ = ((data >> 2) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    timebased_snapshot_ingress_enable_ = 0x0;
    timebased_snapshot_egress_enable_ = 0x0;
    snapshot_both_threads_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MauSnapshotConfig") + ":\n";
    r += indent_string + "  " + std::string("timebased_snapshot_ingress_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(timebased_snapshot_ingress_enable_) ) + "\n";
    all_zeros &= (0 == timebased_snapshot_ingress_enable_);
    r += indent_string + "  " + std::string("timebased_snapshot_egress_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(timebased_snapshot_egress_enable_) ) + "\n";
    all_zeros &= (0 == timebased_snapshot_egress_enable_);
    r += indent_string + "  " + std::string("snapshot_both_threads") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(snapshot_both_threads_) ) + "\n";
    all_zeros &= (0 == snapshot_both_threads_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MauSnapshotConfig") + ":\n";
    r += indent_string + "  " + std::string("timebased_snapshot_ingress_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(timebased_snapshot_ingress_enable_) ) + "\n";
    all_zeros &= (0 == timebased_snapshot_ingress_enable_);
    r += indent_string + "  " + std::string("timebased_snapshot_egress_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(timebased_snapshot_egress_enable_) ) + "\n";
    all_zeros &= (0 == timebased_snapshot_egress_enable_);
    r += indent_string + "  " + std::string("snapshot_both_threads") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(snapshot_both_threads_) ) + "\n";
    all_zeros &= (0 == snapshot_both_threads_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t timebased_snapshot_ingress_enable_;
  uint8_t timebased_snapshot_egress_enable_;
  uint8_t snapshot_both_threads_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    assert(index_mau_addrmap < 12);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to dp
    offset += 0x10440; // to get to snapshot_ctl
    offset += 0x8; // to get to mau_snapshot_config
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_MAU_SNAPSHOT_CONFIG_H__
