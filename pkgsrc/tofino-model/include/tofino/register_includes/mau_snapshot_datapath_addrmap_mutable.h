/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_SNAPSHOT_DATAPATH_ADDRMAP_MUTABLE_H__
#define __REGISTER_INCLUDES_MAU_SNAPSHOT_DATAPATH_ADDRMAP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "mau_snapshot_capture_half_addrmap_mutable.h"
#include "mau_snapshot_match_addrmap_mutable.h"

namespace tofino {
  namespace register_classes {

class MauSnapshotDatapathAddrmapMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauSnapshotDatapathAddrmapMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap), 8192, true, write_callback, read_callback, std::string("MauSnapshotDatapathAddrmapMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap))
    {
    }
  MauSnapshotDatapathAddrmapMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MauSnapshotDatapathAddrmapMutable")
    {
    }
public:







  MauSnapshotCaptureHalfAddrmapMutable &snapshot_capture(int j0) { return snapshot_capture_[j0]; }





  MauSnapshotMatchAddrmapMutable &snapshot_match() { return snapshot_match_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x800) {
      offset -= 0x0;
      int i0 = offset / 0x400;
      offset  -= i0 * 0x400;
      if (read_callback_) read_callback_();
      snapshot_capture_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1000 && offset < 0x2000) {
      offset -= 0x1000;
      if (read_callback_) read_callback_();
      snapshot_match_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x800) {
      offset -= 0x0;
      int i0 = offset / 0x400;
      offset  -= i0 * 0x400;
      snapshot_capture_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1000 && offset < 0x2000) {
      offset -= 0x1000;
      snapshot_match_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : snapshot_capture_) {
      f0.reset();
    }
    snapshot_match_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x800) {
      offset -= 0x0;
      int i0 = offset / 0x400;
      offset  -= i0 * 0x400;
      r += snapshot_capture_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1000 && offset < 0x2000) {
      offset -= 0x1000;
      r += snapshot_match_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<2;++a0) {
      r += snapshot_capture_[a0].to_string(print_zeros,indent_string) ;
    }
    r += snapshot_match_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< MauSnapshotCaptureHalfAddrmapMutable, 2 > snapshot_capture_;
  MauSnapshotMatchAddrmapMutable snapshot_match_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    assert(index_mau_addrmap < 12);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to dp
    offset += 0x12000; // to get to snapshot_dp
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_MAU_SNAPSHOT_DATAPATH_ADDRMAP_MUTABLE_H__
