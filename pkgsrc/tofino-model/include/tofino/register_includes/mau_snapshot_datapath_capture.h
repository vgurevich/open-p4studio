/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_SNAPSHOT_DATAPATH_CAPTURE_H__
#define __REGISTER_INCLUDES_MAU_SNAPSHOT_DATAPATH_CAPTURE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class MauSnapshotDatapathCapture : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauSnapshotDatapathCapture(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_snapshot_datapath_capture, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_snapshot_datapath_capture), 4, false, write_callback, read_callback, std::string("MauSnapshotDatapathCapture")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_snapshot_datapath_capture))
    {
    }
  MauSnapshotDatapathCapture(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MauSnapshotDatapathCapture")
    {
    }
public:


  uint8_t &snapshot_from_prev_stage() { return snapshot_from_prev_stage_; }


  uint8_t &timebased_snapshot_trigger() { return timebased_snapshot_trigger_; }




  uint8_t &snapshot_from_this_stage() { return snapshot_from_this_stage_; }


  uint8_t &unused() { return unused_; }


  uint8_t &snapshot_ingress_pktversion() { return snapshot_ingress_pktversion_; }


  uint8_t &snapshot_egress_pktversion() { return snapshot_egress_pktversion_; }


  uint8_t &snapshot_thread_active() { return snapshot_thread_active_; }



  uint8_t &snapshot_trigger_thread() { return snapshot_trigger_thread_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (snapshot_from_prev_stage_ & 0x3);
    *data |= ((timebased_snapshot_trigger_ & 0x1) << 2);
    *data |= ((snapshot_from_this_stage_ & 0x3) << 3);
    *data |= ((unused_ & 0x3) << 5);
    *data |= ((snapshot_ingress_pktversion_ & 0x3) << 7);
    *data |= ((snapshot_egress_pktversion_ & 0x3) << 9);
    *data |= ((snapshot_thread_active_ & 0x3) << 11);
    *data |= ((snapshot_trigger_thread_ & 0x3) << 13);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    snapshot_from_prev_stage_ = (data & 0x3);
    timebased_snapshot_trigger_ = ((data >> 2) & 0x1);
    snapshot_from_this_stage_ = ((data >> 3) & 0x3);
    unused_ = ((data >> 5) & 0x3);
    snapshot_ingress_pktversion_ = ((data >> 7) & 0x3);
    snapshot_egress_pktversion_ = ((data >> 9) & 0x3);
    snapshot_thread_active_ = ((data >> 11) & 0x3);
    snapshot_trigger_thread_ = ((data >> 13) & 0x3);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    snapshot_from_prev_stage_ = 0x0;
    timebased_snapshot_trigger_ = 0x0;
    snapshot_from_this_stage_ = 0x0;
    unused_ = 0x0;
    snapshot_ingress_pktversion_ = 0x0;
    snapshot_egress_pktversion_ = 0x0;
    snapshot_thread_active_ = 0x0;
    snapshot_trigger_thread_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MauSnapshotDatapathCapture") + ":\n";
    r += indent_string + "  " + std::string("snapshot_from_prev_stage") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(snapshot_from_prev_stage_) ) + "\n";
    all_zeros &= (0 == snapshot_from_prev_stage_);
    r += indent_string + "  " + std::string("timebased_snapshot_trigger") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(timebased_snapshot_trigger_) ) + "\n";
    all_zeros &= (0 == timebased_snapshot_trigger_);
    r += indent_string + "  " + std::string("snapshot_from_this_stage") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(snapshot_from_this_stage_) ) + "\n";
    all_zeros &= (0 == snapshot_from_this_stage_);
    r += indent_string + "  " + std::string("unused") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(unused_) ) + "\n";
    all_zeros &= (0 == unused_);
    r += indent_string + "  " + std::string("snapshot_ingress_pktversion") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(snapshot_ingress_pktversion_) ) + "\n";
    all_zeros &= (0 == snapshot_ingress_pktversion_);
    r += indent_string + "  " + std::string("snapshot_egress_pktversion") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(snapshot_egress_pktversion_) ) + "\n";
    all_zeros &= (0 == snapshot_egress_pktversion_);
    r += indent_string + "  " + std::string("snapshot_thread_active") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(snapshot_thread_active_) ) + "\n";
    all_zeros &= (0 == snapshot_thread_active_);
    r += indent_string + "  " + std::string("snapshot_trigger_thread") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(snapshot_trigger_thread_) ) + "\n";
    all_zeros &= (0 == snapshot_trigger_thread_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MauSnapshotDatapathCapture") + ":\n";
    r += indent_string + "  " + std::string("snapshot_from_prev_stage") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(snapshot_from_prev_stage_) ) + "\n";
    all_zeros &= (0 == snapshot_from_prev_stage_);
    r += indent_string + "  " + std::string("timebased_snapshot_trigger") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(timebased_snapshot_trigger_) ) + "\n";
    all_zeros &= (0 == timebased_snapshot_trigger_);
    r += indent_string + "  " + std::string("snapshot_from_this_stage") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(snapshot_from_this_stage_) ) + "\n";
    all_zeros &= (0 == snapshot_from_this_stage_);
    r += indent_string + "  " + std::string("unused") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(unused_) ) + "\n";
    all_zeros &= (0 == unused_);
    r += indent_string + "  " + std::string("snapshot_ingress_pktversion") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(snapshot_ingress_pktversion_) ) + "\n";
    all_zeros &= (0 == snapshot_ingress_pktversion_);
    r += indent_string + "  " + std::string("snapshot_egress_pktversion") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(snapshot_egress_pktversion_) ) + "\n";
    all_zeros &= (0 == snapshot_egress_pktversion_);
    r += indent_string + "  " + std::string("snapshot_thread_active") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(snapshot_thread_active_) ) + "\n";
    all_zeros &= (0 == snapshot_thread_active_);
    r += indent_string + "  " + std::string("snapshot_trigger_thread") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(snapshot_trigger_thread_) ) + "\n";
    all_zeros &= (0 == snapshot_trigger_thread_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t snapshot_from_prev_stage_;
  uint8_t timebased_snapshot_trigger_;
  uint8_t snapshot_from_this_stage_;
  uint8_t unused_;
  uint8_t snapshot_ingress_pktversion_;
  uint8_t snapshot_egress_pktversion_;
  uint8_t snapshot_thread_active_;
  uint8_t snapshot_trigger_thread_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_snapshot_datapath_capture
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    assert(index_mau_addrmap < 12);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to dp
    offset += 0x10440; // to get to snapshot_ctl
    offset += 0x38; // to get to mau_snapshot_datapath_capture
    assert(index_mau_snapshot_datapath_capture < 2);
    offset += index_mau_snapshot_datapath_capture * 0x4; // mau_snapshot_datapath_capture[]
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_MAU_SNAPSHOT_DATAPATH_CAPTURE_H__
