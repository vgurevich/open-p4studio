/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MBUS_INT_STAT_MUTABLE_H__
#define __REGISTER_INCLUDES_MBUS_INT_STAT_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class MbusIntStatMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MbusIntStatMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, true, write_callback, read_callback, std::string("MbusIntStatMutable"))
    {
    }
  MbusIntStatMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MbusIntStatMutable")
    {
    }
public:





  uint8_t host_overflow() { return host_overflow_; }
  void host_overflow(const uint8_t &v) { host_overflow_=v; }





  uint8_t mac_tx_dr_empty() { return mac_tx_dr_empty_; }
  void mac_tx_dr_empty(const uint8_t &v) { mac_tx_dr_empty_=v; }





  uint8_t mac_tx_dr_full() { return mac_tx_dr_full_; }
  void mac_tx_dr_full(const uint8_t &v) { mac_tx_dr_full_=v; }





  uint8_t mac_cpl_dr_empty() { return mac_cpl_dr_empty_; }
  void mac_cpl_dr_empty(const uint8_t &v) { mac_cpl_dr_empty_=v; }





  uint8_t mac_cpl_dr_full() { return mac_cpl_dr_full_; }
  void mac_cpl_dr_full(const uint8_t &v) { mac_cpl_dr_full_=v; }





  uint8_t mac_tx_dr_rd_err() { return mac_tx_dr_rd_err_; }
  void mac_tx_dr_rd_err(const uint8_t &v) { mac_tx_dr_rd_err_=v; }





  uint8_t mbus_flush_done() { return mbus_flush_done_; }
  void mbus_flush_done(const uint8_t &v) { mbus_flush_done_=v; }





  uint8_t mac_oqueue_mbe() { return mac_oqueue_mbe_; }
  void mac_oqueue_mbe(const uint8_t &v) { mac_oqueue_mbe_=v; }





  uint8_t mac_oqueue_sbe() { return mac_oqueue_sbe_; }
  void mac_oqueue_sbe(const uint8_t &v) { mac_oqueue_sbe_=v; }







  uint8_t mbus_parity_err(int j0) { return mbus_parity_err_[j0]; }
  void mbus_parity_err(int j0,const uint8_t &v) { mbus_parity_err_[j0]=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (host_overflow_ & 0x1);
    *data |= ((mac_tx_dr_empty_ & 0x1) << 1);
    *data |= ((mac_tx_dr_full_ & 0x1) << 2);
    *data |= ((mac_cpl_dr_empty_ & 0x1) << 3);
    *data |= ((mac_cpl_dr_full_ & 0x1) << 4);
    *data |= ((mac_tx_dr_rd_err_ & 0x1) << 5);
    *data |= ((mbus_flush_done_ & 0x1) << 6);
    *data |= ((mac_oqueue_mbe_ & 0x1) << 7);
    *data |= ((mac_oqueue_sbe_ & 0x1) << 8);
    *data |= ((mbus_parity_err_[0] & 0x1) << 9);
    *data |= ((mbus_parity_err_[1] & 0x1) << 10);
    *data |= ((mbus_parity_err_[2] & 0x1) << 11);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    host_overflow_ &= ~(data & 0x1);
    mac_tx_dr_empty_ &= ~((data >> 1) & 0x1);
    mac_tx_dr_full_ &= ~((data >> 2) & 0x1);
    mac_cpl_dr_empty_ &= ~((data >> 3) & 0x1);
    mac_cpl_dr_full_ &= ~((data >> 4) & 0x1);
    mac_tx_dr_rd_err_ &= ~((data >> 5) & 0x1);
    mbus_flush_done_ &= ~((data >> 6) & 0x1);
    mac_oqueue_mbe_ &= ~((data >> 7) & 0x1);
    mac_oqueue_sbe_ &= ~((data >> 8) & 0x1);
    mbus_parity_err_[0] &= ~((data >> 9) & 0x1);
    mbus_parity_err_[1] &= ~((data >> 10) & 0x1);
    mbus_parity_err_[2] &= ~((data >> 11) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    host_overflow_ = 0x0;
    mac_tx_dr_empty_ = 0x0;
    mac_tx_dr_full_ = 0x0;
    mac_cpl_dr_empty_ = 0x0;
    mac_cpl_dr_full_ = 0x0;
    mac_tx_dr_rd_err_ = 0x0;
    mbus_flush_done_ = 0x0;
    mac_oqueue_mbe_ = 0x0;
    mac_oqueue_sbe_ = 0x0;
    mbus_parity_err_[0] = 0x0;
    mbus_parity_err_[1] = 0x0;
    mbus_parity_err_[2] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MbusIntStatMutable") + ":\n";
    r += indent_string + "  " + std::string("host_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(host_overflow_) ) + "\n";
    all_zeros &= (0 == host_overflow_);
    r += indent_string + "  " + std::string("mac_tx_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_tx_dr_empty_) ) + "\n";
    all_zeros &= (0 == mac_tx_dr_empty_);
    r += indent_string + "  " + std::string("mac_tx_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_tx_dr_full_) ) + "\n";
    all_zeros &= (0 == mac_tx_dr_full_);
    r += indent_string + "  " + std::string("mac_cpl_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_cpl_dr_empty_) ) + "\n";
    all_zeros &= (0 == mac_cpl_dr_empty_);
    r += indent_string + "  " + std::string("mac_cpl_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_cpl_dr_full_) ) + "\n";
    all_zeros &= (0 == mac_cpl_dr_full_);
    r += indent_string + "  " + std::string("mac_tx_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_tx_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == mac_tx_dr_rd_err_);
    r += indent_string + "  " + std::string("mbus_flush_done") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mbus_flush_done_) ) + "\n";
    all_zeros &= (0 == mbus_flush_done_);
    r += indent_string + "  " + std::string("mac_oqueue_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_oqueue_mbe_) ) + "\n";
    all_zeros &= (0 == mac_oqueue_mbe_);
    r += indent_string + "  " + std::string("mac_oqueue_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_oqueue_sbe_) ) + "\n";
    all_zeros &= (0 == mac_oqueue_sbe_);
    for (uint32_t f=0;f<3;++f) {
      r += indent_string + "  " + std::string("mbus_parity_err") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mbus_parity_err_[f]) ) + "\n";
      all_zeros &= (0 == mbus_parity_err_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MbusIntStatMutable") + ":\n";
    r += indent_string + "  " + std::string("host_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(host_overflow_) ) + "\n";
    all_zeros &= (0 == host_overflow_);
    r += indent_string + "  " + std::string("mac_tx_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_tx_dr_empty_) ) + "\n";
    all_zeros &= (0 == mac_tx_dr_empty_);
    r += indent_string + "  " + std::string("mac_tx_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_tx_dr_full_) ) + "\n";
    all_zeros &= (0 == mac_tx_dr_full_);
    r += indent_string + "  " + std::string("mac_cpl_dr_empty") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_cpl_dr_empty_) ) + "\n";
    all_zeros &= (0 == mac_cpl_dr_empty_);
    r += indent_string + "  " + std::string("mac_cpl_dr_full") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_cpl_dr_full_) ) + "\n";
    all_zeros &= (0 == mac_cpl_dr_full_);
    r += indent_string + "  " + std::string("mac_tx_dr_rd_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_tx_dr_rd_err_) ) + "\n";
    all_zeros &= (0 == mac_tx_dr_rd_err_);
    r += indent_string + "  " + std::string("mbus_flush_done") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mbus_flush_done_) ) + "\n";
    all_zeros &= (0 == mbus_flush_done_);
    r += indent_string + "  " + std::string("mac_oqueue_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_oqueue_mbe_) ) + "\n";
    all_zeros &= (0 == mac_oqueue_mbe_);
    r += indent_string + "  " + std::string("mac_oqueue_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mac_oqueue_sbe_) ) + "\n";
    all_zeros &= (0 == mac_oqueue_sbe_);
    for (uint32_t f=0;f<3;++f) {
      r += indent_string + "  " + std::string("mbus_parity_err") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mbus_parity_err_[f]) ) + "\n";
      all_zeros &= (0 == mbus_parity_err_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t host_overflow_;
  uint8_t mac_tx_dr_empty_;
  uint8_t mac_tx_dr_full_;
  uint8_t mac_cpl_dr_empty_;
  uint8_t mac_cpl_dr_full_;
  uint8_t mac_tx_dr_rd_err_;
  uint8_t mbus_flush_done_;
  uint8_t mac_oqueue_mbe_;
  uint8_t mac_oqueue_sbe_;
  std::array< uint8_t, 3 > mbus_parity_err_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0xc0000; // to get to mbc
    offset += 0x68; // to get to int_stat
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_MBUS_INT_STAT_MUTABLE_H__
