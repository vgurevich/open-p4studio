/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_METER_CTL_MUTABLE_H__
#define __REGISTER_INCLUDES_METER_CTL_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class MeterCtlMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MeterCtlMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_meter_alu_group_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_meter_alu_group_addrmap), 4, true, write_callback, read_callback, std::string("MeterCtlMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_meter_alu_group_addrmap))
    {
    }
  MeterCtlMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MeterCtlMutable")
    {
    }
public:






  uint16_t meter_bytecount_adjust() { return meter_bytecount_adjust_; }
  void meter_bytecount_adjust(const uint16_t &v) { meter_bytecount_adjust_=v; }





  uint8_t meter_byte() { return meter_byte_; }
  void meter_byte(const uint8_t &v) { meter_byte_=v; }



  uint8_t meter_enable() { return meter_enable_; }
  void meter_enable(const uint8_t &v) { meter_enable_=v; }



  uint8_t lpf_enable() { return lpf_enable_; }
  void lpf_enable(const uint8_t &v) { lpf_enable_=v; }



  uint8_t red_enable() { return red_enable_; }
  void red_enable(const uint8_t &v) { red_enable_=v; }




  uint8_t meter_alu_egress() { return meter_alu_egress_; }
  void meter_alu_egress(const uint8_t &v) { meter_alu_egress_=v; }




  uint8_t meter_rng_enable() { return meter_rng_enable_; }
  void meter_rng_enable(const uint8_t &v) { meter_rng_enable_=v; }




  uint8_t meter_time_scale() { return meter_time_scale_; }
  void meter_time_scale(const uint8_t &v) { meter_time_scale_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (meter_bytecount_adjust_ & 0x3fff);
    *data |= ((meter_byte_ & 0x1) << 14);
    *data |= ((meter_enable_ & 0x1) << 15);
    *data |= ((lpf_enable_ & 0x1) << 16);
    *data |= ((red_enable_ & 0x1) << 17);
    *data |= ((meter_alu_egress_ & 0x1) << 18);
    *data |= ((meter_rng_enable_ & 0x1) << 19);
    *data |= ((meter_time_scale_ & 0xf) << 20);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    meter_bytecount_adjust_ = (data & 0x3fff);
    meter_byte_ = ((data >> 14) & 0x1);
    meter_enable_ = ((data >> 15) & 0x1);
    lpf_enable_ = ((data >> 16) & 0x1);
    red_enable_ = ((data >> 17) & 0x1);
    meter_alu_egress_ = ((data >> 18) & 0x1);
    meter_rng_enable_ = ((data >> 19) & 0x1);
    meter_time_scale_ = ((data >> 20) & 0xf);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    meter_bytecount_adjust_ = 0x0;
    meter_byte_ = 0x0;
    meter_enable_ = 0x0;
    lpf_enable_ = 0x0;
    red_enable_ = 0x0;
    meter_alu_egress_ = 0x0;
    meter_rng_enable_ = 0x0;
    meter_time_scale_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MeterCtlMutable") + ":\n";
    r += indent_string + "  " + std::string("meter_bytecount_adjust") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meter_bytecount_adjust_) ) + "\n";
    all_zeros &= (0 == meter_bytecount_adjust_);
    r += indent_string + "  " + std::string("meter_byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meter_byte_) ) + "\n";
    all_zeros &= (0 == meter_byte_);
    r += indent_string + "  " + std::string("meter_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meter_enable_) ) + "\n";
    all_zeros &= (0 == meter_enable_);
    r += indent_string + "  " + std::string("lpf_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lpf_enable_) ) + "\n";
    all_zeros &= (0 == lpf_enable_);
    r += indent_string + "  " + std::string("red_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(red_enable_) ) + "\n";
    all_zeros &= (0 == red_enable_);
    r += indent_string + "  " + std::string("meter_alu_egress") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meter_alu_egress_) ) + "\n";
    all_zeros &= (0 == meter_alu_egress_);
    r += indent_string + "  " + std::string("meter_rng_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meter_rng_enable_) ) + "\n";
    all_zeros &= (0 == meter_rng_enable_);
    r += indent_string + "  " + std::string("meter_time_scale") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meter_time_scale_) ) + "\n";
    all_zeros &= (0 == meter_time_scale_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MeterCtlMutable") + ":\n";
    r += indent_string + "  " + std::string("meter_bytecount_adjust") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meter_bytecount_adjust_) ) + "\n";
    all_zeros &= (0 == meter_bytecount_adjust_);
    r += indent_string + "  " + std::string("meter_byte") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meter_byte_) ) + "\n";
    all_zeros &= (0 == meter_byte_);
    r += indent_string + "  " + std::string("meter_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meter_enable_) ) + "\n";
    all_zeros &= (0 == meter_enable_);
    r += indent_string + "  " + std::string("lpf_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lpf_enable_) ) + "\n";
    all_zeros &= (0 == lpf_enable_);
    r += indent_string + "  " + std::string("red_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(red_enable_) ) + "\n";
    all_zeros &= (0 == red_enable_);
    r += indent_string + "  " + std::string("meter_alu_egress") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meter_alu_egress_) ) + "\n";
    all_zeros &= (0 == meter_alu_egress_);
    r += indent_string + "  " + std::string("meter_rng_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meter_rng_enable_) ) + "\n";
    all_zeros &= (0 == meter_rng_enable_);
    r += indent_string + "  " + std::string("meter_time_scale") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(meter_time_scale_) ) + "\n";
    all_zeros &= (0 == meter_time_scale_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint16_t meter_bytecount_adjust_;
  uint8_t meter_byte_;
  uint8_t meter_enable_;
  uint8_t lpf_enable_;
  uint8_t red_enable_;
  uint8_t meter_alu_egress_;
  uint8_t meter_rng_enable_;
  uint8_t meter_time_scale_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_meter_alu_group_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    assert(index_mau_addrmap < 12);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x10000; // to get to map_alu
    offset += 0x800; // to get to meter_group
    assert(index_mau_meter_alu_group_addrmap < 4);
    offset += index_mau_meter_alu_group_addrmap * 0x200; // mau_meter_alu_group_addrmap[]
    offset += 0x4; // to get to meter_ctl
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_METER_CTL_MUTABLE_H__
