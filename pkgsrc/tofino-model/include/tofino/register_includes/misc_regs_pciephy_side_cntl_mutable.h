/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MISC_REGS_PCIEPHY_SIDE_CNTL_MUTABLE_H__
#define __REGISTER_INCLUDES_MISC_REGS_PCIEPHY_SIDE_CNTL_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class MiscRegsPciephySideCntlMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MiscRegsPciephySideCntlMutable(
      int chipNumber, int index_misc_regs_pciephy_side_cntl, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_misc_regs_pciephy_side_cntl), 4, true, write_callback, read_callback, std::string("MiscRegsPciephySideCntlMutable")+":"+boost::lexical_cast<std::string>(index_misc_regs_pciephy_side_cntl))
    {
    }
  MiscRegsPciephySideCntlMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MiscRegsPciephySideCntlMutable")
    {
    }
public:





  uint16_t core_to_cntl() { return core_to_cntl_; }
  void core_to_cntl(const uint16_t &v) { core_to_cntl_=v; }





  uint8_t fts_align_en() { return fts_align_en_; }
  void fts_align_en(const uint8_t &v) { fts_align_en_=v; }





  uint8_t rx_8b10b_realign_en() { return rx_8b10b_realign_en_; }
  void rx_8b10b_realign_en(const uint8_t &v) { rx_8b10b_realign_en_=v; }





  uint8_t sris_enable() { return sris_enable_; }
  void sris_enable(const uint8_t &v) { sris_enable_=v; }





  uint8_t tx_refclk_sync_in() { return tx_refclk_sync_in_; }
  void tx_refclk_sync_in(const uint8_t &v) { tx_refclk_sync_in_=v; }





  uint8_t bypass() { return bypass_; }
  void bypass(const uint8_t &v) { bypass_=v; }





  uint8_t pcie_tx_elec_idle() { return pcie_tx_elec_idle_; }
  void pcie_tx_elec_idle(const uint8_t &v) { pcie_tx_elec_idle_=v; }





  uint8_t pcie_tx_override_in() { return pcie_tx_override_in_; }
  void pcie_tx_override_in(const uint8_t &v) { pcie_tx_override_in_=v; }





  uint8_t pcie_tx_phase_beacon() { return pcie_tx_phase_beacon_; }
  void pcie_tx_phase_beacon(const uint8_t &v) { pcie_tx_phase_beacon_=v; }








  uint8_t pcie_rev_lpbk_auto() { return pcie_rev_lpbk_auto_; }
  void pcie_rev_lpbk_auto(const uint8_t &v) { pcie_rev_lpbk_auto_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = core_to_cntl_;
    *data |= ((fts_align_en_ & 0x1) << 16);
    *data |= ((rx_8b10b_realign_en_ & 0x1) << 17);
    *data |= ((sris_enable_ & 0x1) << 18);
    *data |= ((tx_refclk_sync_in_ & 0x1) << 19);
    *data |= ((bypass_ & 0x1) << 20);
    *data |= ((pcie_tx_elec_idle_ & 0x1) << 21);
    *data |= ((pcie_tx_override_in_ & 0x1) << 22);
    *data |= ((pcie_tx_phase_beacon_ & 0x1) << 23);
    *data |= ((pcie_rev_lpbk_auto_ & 0x1) << 24);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    core_to_cntl_ = data;
    fts_align_en_ = ((data >> 16) & 0x1);
    rx_8b10b_realign_en_ = ((data >> 17) & 0x1);
    sris_enable_ = ((data >> 18) & 0x1);
    tx_refclk_sync_in_ = ((data >> 19) & 0x1);
    bypass_ = ((data >> 20) & 0x1);
    pcie_tx_elec_idle_ = ((data >> 21) & 0x1);
    pcie_tx_override_in_ = ((data >> 22) & 0x1);
    pcie_tx_phase_beacon_ = ((data >> 23) & 0x1);
    pcie_rev_lpbk_auto_ = ((data >> 24) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    core_to_cntl_ = 0xaaaa;
    fts_align_en_ = 0x0;
    rx_8b10b_realign_en_ = 0x0;
    sris_enable_ = 0x0;
    tx_refclk_sync_in_ = 0x0;
    bypass_ = 0x0;
    pcie_tx_elec_idle_ = 0x0;
    pcie_tx_override_in_ = 0x0;
    pcie_tx_phase_beacon_ = 0x0;
    pcie_rev_lpbk_auto_ = 0x1;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MiscRegsPciephySideCntlMutable") + ":\n";
    r += indent_string + "  " + std::string("core_to_cntl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(core_to_cntl_) ) + "\n";
    all_zeros &= (0 == core_to_cntl_);
    r += indent_string + "  " + std::string("fts_align_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fts_align_en_) ) + "\n";
    all_zeros &= (0 == fts_align_en_);
    r += indent_string + "  " + std::string("rx_8b10b_realign_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx_8b10b_realign_en_) ) + "\n";
    all_zeros &= (0 == rx_8b10b_realign_en_);
    r += indent_string + "  " + std::string("sris_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(sris_enable_) ) + "\n";
    all_zeros &= (0 == sris_enable_);
    r += indent_string + "  " + std::string("tx_refclk_sync_in") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_refclk_sync_in_) ) + "\n";
    all_zeros &= (0 == tx_refclk_sync_in_);
    r += indent_string + "  " + std::string("bypass") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bypass_) ) + "\n";
    all_zeros &= (0 == bypass_);
    r += indent_string + "  " + std::string("pcie_tx_elec_idle") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pcie_tx_elec_idle_) ) + "\n";
    all_zeros &= (0 == pcie_tx_elec_idle_);
    r += indent_string + "  " + std::string("pcie_tx_override_in") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pcie_tx_override_in_) ) + "\n";
    all_zeros &= (0 == pcie_tx_override_in_);
    r += indent_string + "  " + std::string("pcie_tx_phase_beacon") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pcie_tx_phase_beacon_) ) + "\n";
    all_zeros &= (0 == pcie_tx_phase_beacon_);
    r += indent_string + "  " + std::string("pcie_rev_lpbk_auto") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pcie_rev_lpbk_auto_) ) + "\n";
    all_zeros &= (0 == pcie_rev_lpbk_auto_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MiscRegsPciephySideCntlMutable") + ":\n";
    r += indent_string + "  " + std::string("core_to_cntl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(core_to_cntl_) ) + "\n";
    all_zeros &= (0 == core_to_cntl_);
    r += indent_string + "  " + std::string("fts_align_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fts_align_en_) ) + "\n";
    all_zeros &= (0 == fts_align_en_);
    r += indent_string + "  " + std::string("rx_8b10b_realign_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx_8b10b_realign_en_) ) + "\n";
    all_zeros &= (0 == rx_8b10b_realign_en_);
    r += indent_string + "  " + std::string("sris_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(sris_enable_) ) + "\n";
    all_zeros &= (0 == sris_enable_);
    r += indent_string + "  " + std::string("tx_refclk_sync_in") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_refclk_sync_in_) ) + "\n";
    all_zeros &= (0 == tx_refclk_sync_in_);
    r += indent_string + "  " + std::string("bypass") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bypass_) ) + "\n";
    all_zeros &= (0 == bypass_);
    r += indent_string + "  " + std::string("pcie_tx_elec_idle") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pcie_tx_elec_idle_) ) + "\n";
    all_zeros &= (0 == pcie_tx_elec_idle_);
    r += indent_string + "  " + std::string("pcie_tx_override_in") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pcie_tx_override_in_) ) + "\n";
    all_zeros &= (0 == pcie_tx_override_in_);
    r += indent_string + "  " + std::string("pcie_tx_phase_beacon") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pcie_tx_phase_beacon_) ) + "\n";
    all_zeros &= (0 == pcie_tx_phase_beacon_);
    r += indent_string + "  " + std::string("pcie_rev_lpbk_auto") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pcie_rev_lpbk_auto_) ) + "\n";
    all_zeros &= (0 == pcie_rev_lpbk_auto_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint16_t core_to_cntl_;
  uint8_t fts_align_en_;
  uint8_t rx_8b10b_realign_en_;
  uint8_t sris_enable_;
  uint8_t tx_refclk_sync_in_;
  uint8_t bypass_;
  uint8_t pcie_tx_elec_idle_;
  uint8_t pcie_tx_override_in_;
  uint8_t pcie_tx_phase_beacon_;
  uint8_t pcie_rev_lpbk_auto_;
private:
  static int StartOffset(
      int index_misc_regs_pciephy_side_cntl
      ) {
    int offset=0;
    offset += 0x40000; // to get to misc_regs
    offset += 0x70; // to get to pciephy_side_cntl
    assert(index_misc_regs_pciephy_side_cntl < 4);
    offset += index_misc_regs_pciephy_side_cntl * 0x4; // misc_regs_pciephy_side_cntl[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_MISC_REGS_PCIEPHY_SIDE_CNTL_MUTABLE_H__
