/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MISC_REGS_PCIEPHY_STATUS1_H__
#define __REGISTER_INCLUDES_MISC_REGS_PCIEPHY_STATUS1_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class MiscRegsPciephyStatus1 : public model_core::RegisterBlock<RegisterCallback> {
public:
  MiscRegsPciephyStatus1(
      int chipNumber, int index_misc_regs_pciephy_status1, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_misc_regs_pciephy_status1), 4, false, write_callback, read_callback, std::string("MiscRegsPciephyStatus1")+":"+boost::lexical_cast<std::string>(index_misc_regs_pciephy_status1))
    {
    }
  MiscRegsPciephyStatus1(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MiscRegsPciephyStatus1")
    {
    }
public:





  uint16_t &pciephy_int_data_out() { return pciephy_int_data_out_; }





  uint8_t &pciephy_analog_to_core() { return pciephy_analog_to_core_; }





  uint8_t &pciephy_local_fs_lf_valid() { return pciephy_local_fs_lf_valid_; }





  uint8_t &pciephy_rx_idle_detect() { return pciephy_rx_idle_detect_; }





  uint8_t &pciephy_link_loopback_en() { return pciephy_link_loopback_en_; }





  uint8_t &pciephy_rx_rdy() { return pciephy_rx_rdy_; }





  uint8_t &pciephy_tx_rdy() { return pciephy_tx_rdy_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = pciephy_int_data_out_;
    *data |= (pciephy_analog_to_core_ << 16);
    *data |= ((pciephy_local_fs_lf_valid_ & 0x1) << 24);
    *data |= ((pciephy_rx_idle_detect_ & 0x1) << 25);
    *data |= ((pciephy_link_loopback_en_ & 0x1) << 26);
    *data |= ((pciephy_rx_rdy_ & 0x1) << 28);
    *data |= ((pciephy_tx_rdy_ & 0x1) << 29);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    pciephy_int_data_out_ = data;
    pciephy_analog_to_core_ = (data >> 16);
    pciephy_local_fs_lf_valid_ = ((data >> 24) & 0x1);
    pciephy_rx_idle_detect_ = ((data >> 25) & 0x1);
    pciephy_link_loopback_en_ = ((data >> 26) & 0x1);
    pciephy_rx_rdy_ = ((data >> 28) & 0x1);
    pciephy_tx_rdy_ = ((data >> 29) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    pciephy_int_data_out_ = 0x0;
    pciephy_analog_to_core_ = 0x0;
    pciephy_local_fs_lf_valid_ = 0x0;
    pciephy_rx_idle_detect_ = 0x0;
    pciephy_link_loopback_en_ = 0x0;
    pciephy_rx_rdy_ = 0x0;
    pciephy_tx_rdy_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MiscRegsPciephyStatus1") + ":\n";
    r += indent_string + "  " + std::string("pciephy_int_data_out") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_int_data_out_) ) + "\n";
    all_zeros &= (0 == pciephy_int_data_out_);
    r += indent_string + "  " + std::string("pciephy_analog_to_core") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_analog_to_core_) ) + "\n";
    all_zeros &= (0 == pciephy_analog_to_core_);
    r += indent_string + "  " + std::string("pciephy_local_fs_lf_valid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_local_fs_lf_valid_) ) + "\n";
    all_zeros &= (0 == pciephy_local_fs_lf_valid_);
    r += indent_string + "  " + std::string("pciephy_rx_idle_detect") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_rx_idle_detect_) ) + "\n";
    all_zeros &= (0 == pciephy_rx_idle_detect_);
    r += indent_string + "  " + std::string("pciephy_link_loopback_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_link_loopback_en_) ) + "\n";
    all_zeros &= (0 == pciephy_link_loopback_en_);
    r += indent_string + "  " + std::string("pciephy_rx_rdy") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_rx_rdy_) ) + "\n";
    all_zeros &= (0 == pciephy_rx_rdy_);
    r += indent_string + "  " + std::string("pciephy_tx_rdy") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_tx_rdy_) ) + "\n";
    all_zeros &= (0 == pciephy_tx_rdy_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MiscRegsPciephyStatus1") + ":\n";
    r += indent_string + "  " + std::string("pciephy_int_data_out") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_int_data_out_) ) + "\n";
    all_zeros &= (0 == pciephy_int_data_out_);
    r += indent_string + "  " + std::string("pciephy_analog_to_core") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_analog_to_core_) ) + "\n";
    all_zeros &= (0 == pciephy_analog_to_core_);
    r += indent_string + "  " + std::string("pciephy_local_fs_lf_valid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_local_fs_lf_valid_) ) + "\n";
    all_zeros &= (0 == pciephy_local_fs_lf_valid_);
    r += indent_string + "  " + std::string("pciephy_rx_idle_detect") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_rx_idle_detect_) ) + "\n";
    all_zeros &= (0 == pciephy_rx_idle_detect_);
    r += indent_string + "  " + std::string("pciephy_link_loopback_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_link_loopback_en_) ) + "\n";
    all_zeros &= (0 == pciephy_link_loopback_en_);
    r += indent_string + "  " + std::string("pciephy_rx_rdy") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_rx_rdy_) ) + "\n";
    all_zeros &= (0 == pciephy_rx_rdy_);
    r += indent_string + "  " + std::string("pciephy_tx_rdy") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pciephy_tx_rdy_) ) + "\n";
    all_zeros &= (0 == pciephy_tx_rdy_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint16_t pciephy_int_data_out_;
  uint8_t pciephy_analog_to_core_;
  uint8_t pciephy_local_fs_lf_valid_;
  uint8_t pciephy_rx_idle_detect_;
  uint8_t pciephy_link_loopback_en_;
  uint8_t pciephy_rx_rdy_;
  uint8_t pciephy_tx_rdy_;
private:
  static int StartOffset(
      int index_misc_regs_pciephy_status1
      ) {
    int offset=0;
    offset += 0x40000; // to get to misc_regs
    offset += 0x90; // to get to pciephy_status1
    assert(index_misc_regs_pciephy_status1 < 4);
    offset += index_misc_regs_pciephy_status1 * 0x4; // misc_regs_pciephy_status1[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_MISC_REGS_PCIEPHY_STATUS1_H__
