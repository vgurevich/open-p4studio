/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PARTY_GLUE_REG_RSPEC_EBP18_INTR_STATUS0_H__
#define __REGISTER_INCLUDES_PARTY_GLUE_REG_RSPEC_EBP18_INTR_STATUS0_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class PartyGlueRegRspecEbp18IntrStatus0 : public model_core::RegisterBlock<RegisterCallback> {
public:
  PartyGlueRegRspecEbp18IntrStatus0(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, false, write_callback, read_callback, std::string("PartyGlueRegRspecEbp18IntrStatus0")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PartyGlueRegRspecEbp18IntrStatus0(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PartyGlueRegRspecEbp18IntrStatus0")
    {
    }
public:





  uint8_t &ebp0() { return ebp0_; }





  uint8_t &ebp1() { return ebp1_; }





  uint8_t &ebp2() { return ebp2_; }





  uint8_t &ebp3() { return ebp3_; }





  uint8_t &ebp4() { return ebp4_; }





  uint8_t &ebp5() { return ebp5_; }





  uint8_t &ebp6() { return ebp6_; }





  uint8_t &ebp7() { return ebp7_; }





  uint8_t &ebp8() { return ebp8_; }





  uint8_t &ebp9() { return ebp9_; }





  uint8_t &ebp10() { return ebp10_; }





  uint8_t &ebp11() { return ebp11_; }





  uint8_t &ebp12() { return ebp12_; }





  uint8_t &ebp13() { return ebp13_; }





  uint8_t &ebp14() { return ebp14_; }





  uint8_t &ebp15() { return ebp15_; }





  uint8_t &ebp16() { return ebp16_; }





  uint8_t &ebp17() { return ebp17_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (ebp0_ & 0x1);
    *data |= ((ebp1_ & 0x1) << 1);
    *data |= ((ebp2_ & 0x1) << 2);
    *data |= ((ebp3_ & 0x1) << 3);
    *data |= ((ebp4_ & 0x1) << 4);
    *data |= ((ebp5_ & 0x1) << 5);
    *data |= ((ebp6_ & 0x1) << 6);
    *data |= ((ebp7_ & 0x1) << 7);
    *data |= ((ebp8_ & 0x1) << 8);
    *data |= ((ebp9_ & 0x1) << 9);
    *data |= ((ebp10_ & 0x1) << 10);
    *data |= ((ebp11_ & 0x1) << 11);
    *data |= ((ebp12_ & 0x1) << 12);
    *data |= ((ebp13_ & 0x1) << 13);
    *data |= ((ebp14_ & 0x1) << 14);
    *data |= ((ebp15_ & 0x1) << 15);
    *data |= ((ebp16_ & 0x1) << 16);
    *data |= ((ebp17_ & 0x1) << 17);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    ebp0_ = (data & 0x1);
    ebp1_ = ((data >> 1) & 0x1);
    ebp2_ = ((data >> 2) & 0x1);
    ebp3_ = ((data >> 3) & 0x1);
    ebp4_ = ((data >> 4) & 0x1);
    ebp5_ = ((data >> 5) & 0x1);
    ebp6_ = ((data >> 6) & 0x1);
    ebp7_ = ((data >> 7) & 0x1);
    ebp8_ = ((data >> 8) & 0x1);
    ebp9_ = ((data >> 9) & 0x1);
    ebp10_ = ((data >> 10) & 0x1);
    ebp11_ = ((data >> 11) & 0x1);
    ebp12_ = ((data >> 12) & 0x1);
    ebp13_ = ((data >> 13) & 0x1);
    ebp14_ = ((data >> 14) & 0x1);
    ebp15_ = ((data >> 15) & 0x1);
    ebp16_ = ((data >> 16) & 0x1);
    ebp17_ = ((data >> 17) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    ebp0_ = 0;
    ebp1_ = 0;
    ebp2_ = 0;
    ebp3_ = 0;
    ebp4_ = 0;
    ebp5_ = 0;
    ebp6_ = 0;
    ebp7_ = 0;
    ebp8_ = 0;
    ebp9_ = 0;
    ebp10_ = 0;
    ebp11_ = 0;
    ebp12_ = 0;
    ebp13_ = 0;
    ebp14_ = 0;
    ebp15_ = 0;
    ebp16_ = 0;
    ebp17_ = 0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PartyGlueRegRspecEbp18IntrStatus0") + ":\n";
    r += indent_string + "  " + std::string("ebp0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp0_) ) + "\n";
    all_zeros &= (0 == ebp0_);
    r += indent_string + "  " + std::string("ebp1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp1_) ) + "\n";
    all_zeros &= (0 == ebp1_);
    r += indent_string + "  " + std::string("ebp2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp2_) ) + "\n";
    all_zeros &= (0 == ebp2_);
    r += indent_string + "  " + std::string("ebp3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp3_) ) + "\n";
    all_zeros &= (0 == ebp3_);
    r += indent_string + "  " + std::string("ebp4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp4_) ) + "\n";
    all_zeros &= (0 == ebp4_);
    r += indent_string + "  " + std::string("ebp5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp5_) ) + "\n";
    all_zeros &= (0 == ebp5_);
    r += indent_string + "  " + std::string("ebp6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp6_) ) + "\n";
    all_zeros &= (0 == ebp6_);
    r += indent_string + "  " + std::string("ebp7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp7_) ) + "\n";
    all_zeros &= (0 == ebp7_);
    r += indent_string + "  " + std::string("ebp8") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp8_) ) + "\n";
    all_zeros &= (0 == ebp8_);
    r += indent_string + "  " + std::string("ebp9") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp9_) ) + "\n";
    all_zeros &= (0 == ebp9_);
    r += indent_string + "  " + std::string("ebp10") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp10_) ) + "\n";
    all_zeros &= (0 == ebp10_);
    r += indent_string + "  " + std::string("ebp11") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp11_) ) + "\n";
    all_zeros &= (0 == ebp11_);
    r += indent_string + "  " + std::string("ebp12") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp12_) ) + "\n";
    all_zeros &= (0 == ebp12_);
    r += indent_string + "  " + std::string("ebp13") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp13_) ) + "\n";
    all_zeros &= (0 == ebp13_);
    r += indent_string + "  " + std::string("ebp14") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp14_) ) + "\n";
    all_zeros &= (0 == ebp14_);
    r += indent_string + "  " + std::string("ebp15") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp15_) ) + "\n";
    all_zeros &= (0 == ebp15_);
    r += indent_string + "  " + std::string("ebp16") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp16_) ) + "\n";
    all_zeros &= (0 == ebp16_);
    r += indent_string + "  " + std::string("ebp17") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp17_) ) + "\n";
    all_zeros &= (0 == ebp17_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PartyGlueRegRspecEbp18IntrStatus0") + ":\n";
    r += indent_string + "  " + std::string("ebp0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp0_) ) + "\n";
    all_zeros &= (0 == ebp0_);
    r += indent_string + "  " + std::string("ebp1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp1_) ) + "\n";
    all_zeros &= (0 == ebp1_);
    r += indent_string + "  " + std::string("ebp2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp2_) ) + "\n";
    all_zeros &= (0 == ebp2_);
    r += indent_string + "  " + std::string("ebp3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp3_) ) + "\n";
    all_zeros &= (0 == ebp3_);
    r += indent_string + "  " + std::string("ebp4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp4_) ) + "\n";
    all_zeros &= (0 == ebp4_);
    r += indent_string + "  " + std::string("ebp5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp5_) ) + "\n";
    all_zeros &= (0 == ebp5_);
    r += indent_string + "  " + std::string("ebp6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp6_) ) + "\n";
    all_zeros &= (0 == ebp6_);
    r += indent_string + "  " + std::string("ebp7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp7_) ) + "\n";
    all_zeros &= (0 == ebp7_);
    r += indent_string + "  " + std::string("ebp8") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp8_) ) + "\n";
    all_zeros &= (0 == ebp8_);
    r += indent_string + "  " + std::string("ebp9") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp9_) ) + "\n";
    all_zeros &= (0 == ebp9_);
    r += indent_string + "  " + std::string("ebp10") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp10_) ) + "\n";
    all_zeros &= (0 == ebp10_);
    r += indent_string + "  " + std::string("ebp11") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp11_) ) + "\n";
    all_zeros &= (0 == ebp11_);
    r += indent_string + "  " + std::string("ebp12") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp12_) ) + "\n";
    all_zeros &= (0 == ebp12_);
    r += indent_string + "  " + std::string("ebp13") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp13_) ) + "\n";
    all_zeros &= (0 == ebp13_);
    r += indent_string + "  " + std::string("ebp14") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp14_) ) + "\n";
    all_zeros &= (0 == ebp14_);
    r += indent_string + "  " + std::string("ebp15") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp15_) ) + "\n";
    all_zeros &= (0 == ebp15_);
    r += indent_string + "  " + std::string("ebp16") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp16_) ) + "\n";
    all_zeros &= (0 == ebp16_);
    r += indent_string + "  " + std::string("ebp17") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp17_) ) + "\n";
    all_zeros &= (0 == ebp17_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t ebp0_;
  uint8_t ebp1_;
  uint8_t ebp2_;
  uint8_t ebp3_;
  uint8_t ebp4_;
  uint8_t ebp5_;
  uint8_t ebp6_;
  uint8_t ebp7_;
  uint8_t ebp8_;
  uint8_t ebp9_;
  uint8_t ebp10_;
  uint8_t ebp11_;
  uint8_t ebp12_;
  uint8_t ebp13_;
  uint8_t ebp14_;
  uint8_t ebp15_;
  uint8_t ebp16_;
  uint8_t ebp17_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    offset += 0x3e000; // to get to party_glue_reg
    offset += 0x18; // to get to ebp18_intr_status0
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_PARTY_GLUE_REG_RSPEC_EBP18_INTR_STATUS0_H__
