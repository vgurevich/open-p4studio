/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PARTY_GLUE_REG_RSPEC_EGR18_INTR_STATUS1_H__
#define __REGISTER_INCLUDES_PARTY_GLUE_REG_RSPEC_EGR18_INTR_STATUS1_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class PartyGlueRegRspecEgr18IntrStatus1 : public model_core::RegisterBlock<RegisterCallback> {
public:
  PartyGlueRegRspecEgr18IntrStatus1(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, false, write_callback, read_callback, std::string("PartyGlueRegRspecEgr18IntrStatus1")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PartyGlueRegRspecEgr18IntrStatus1(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PartyGlueRegRspecEgr18IntrStatus1")
    {
    }
public:





  uint8_t &egr0() { return egr0_; }





  uint8_t &egr1() { return egr1_; }





  uint8_t &egr2() { return egr2_; }





  uint8_t &egr3() { return egr3_; }





  uint8_t &egr4() { return egr4_; }





  uint8_t &egr5() { return egr5_; }





  uint8_t &egr6() { return egr6_; }





  uint8_t &egr7() { return egr7_; }





  uint8_t &egr8() { return egr8_; }





  uint8_t &egr9() { return egr9_; }





  uint8_t &egr10() { return egr10_; }





  uint8_t &egr11() { return egr11_; }





  uint8_t &egr12() { return egr12_; }





  uint8_t &egr13() { return egr13_; }





  uint8_t &egr14() { return egr14_; }





  uint8_t &egr15() { return egr15_; }





  uint8_t &egr16() { return egr16_; }





  uint8_t &egr17() { return egr17_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (egr0_ & 0x1);
    *data |= ((egr1_ & 0x1) << 1);
    *data |= ((egr2_ & 0x1) << 2);
    *data |= ((egr3_ & 0x1) << 3);
    *data |= ((egr4_ & 0x1) << 4);
    *data |= ((egr5_ & 0x1) << 5);
    *data |= ((egr6_ & 0x1) << 6);
    *data |= ((egr7_ & 0x1) << 7);
    *data |= ((egr8_ & 0x1) << 8);
    *data |= ((egr9_ & 0x1) << 9);
    *data |= ((egr10_ & 0x1) << 10);
    *data |= ((egr11_ & 0x1) << 11);
    *data |= ((egr12_ & 0x1) << 12);
    *data |= ((egr13_ & 0x1) << 13);
    *data |= ((egr14_ & 0x1) << 14);
    *data |= ((egr15_ & 0x1) << 15);
    *data |= ((egr16_ & 0x1) << 16);
    *data |= ((egr17_ & 0x1) << 17);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    egr0_ = (data & 0x1);
    egr1_ = ((data >> 1) & 0x1);
    egr2_ = ((data >> 2) & 0x1);
    egr3_ = ((data >> 3) & 0x1);
    egr4_ = ((data >> 4) & 0x1);
    egr5_ = ((data >> 5) & 0x1);
    egr6_ = ((data >> 6) & 0x1);
    egr7_ = ((data >> 7) & 0x1);
    egr8_ = ((data >> 8) & 0x1);
    egr9_ = ((data >> 9) & 0x1);
    egr10_ = ((data >> 10) & 0x1);
    egr11_ = ((data >> 11) & 0x1);
    egr12_ = ((data >> 12) & 0x1);
    egr13_ = ((data >> 13) & 0x1);
    egr14_ = ((data >> 14) & 0x1);
    egr15_ = ((data >> 15) & 0x1);
    egr16_ = ((data >> 16) & 0x1);
    egr17_ = ((data >> 17) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    egr0_ = 0;
    egr1_ = 0;
    egr2_ = 0;
    egr3_ = 0;
    egr4_ = 0;
    egr5_ = 0;
    egr6_ = 0;
    egr7_ = 0;
    egr8_ = 0;
    egr9_ = 0;
    egr10_ = 0;
    egr11_ = 0;
    egr12_ = 0;
    egr13_ = 0;
    egr14_ = 0;
    egr15_ = 0;
    egr16_ = 0;
    egr17_ = 0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PartyGlueRegRspecEgr18IntrStatus1") + ":\n";
    r += indent_string + "  " + std::string("egr0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr0_) ) + "\n";
    all_zeros &= (0 == egr0_);
    r += indent_string + "  " + std::string("egr1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr1_) ) + "\n";
    all_zeros &= (0 == egr1_);
    r += indent_string + "  " + std::string("egr2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr2_) ) + "\n";
    all_zeros &= (0 == egr2_);
    r += indent_string + "  " + std::string("egr3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr3_) ) + "\n";
    all_zeros &= (0 == egr3_);
    r += indent_string + "  " + std::string("egr4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr4_) ) + "\n";
    all_zeros &= (0 == egr4_);
    r += indent_string + "  " + std::string("egr5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr5_) ) + "\n";
    all_zeros &= (0 == egr5_);
    r += indent_string + "  " + std::string("egr6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr6_) ) + "\n";
    all_zeros &= (0 == egr6_);
    r += indent_string + "  " + std::string("egr7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr7_) ) + "\n";
    all_zeros &= (0 == egr7_);
    r += indent_string + "  " + std::string("egr8") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr8_) ) + "\n";
    all_zeros &= (0 == egr8_);
    r += indent_string + "  " + std::string("egr9") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr9_) ) + "\n";
    all_zeros &= (0 == egr9_);
    r += indent_string + "  " + std::string("egr10") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr10_) ) + "\n";
    all_zeros &= (0 == egr10_);
    r += indent_string + "  " + std::string("egr11") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr11_) ) + "\n";
    all_zeros &= (0 == egr11_);
    r += indent_string + "  " + std::string("egr12") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr12_) ) + "\n";
    all_zeros &= (0 == egr12_);
    r += indent_string + "  " + std::string("egr13") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr13_) ) + "\n";
    all_zeros &= (0 == egr13_);
    r += indent_string + "  " + std::string("egr14") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr14_) ) + "\n";
    all_zeros &= (0 == egr14_);
    r += indent_string + "  " + std::string("egr15") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr15_) ) + "\n";
    all_zeros &= (0 == egr15_);
    r += indent_string + "  " + std::string("egr16") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr16_) ) + "\n";
    all_zeros &= (0 == egr16_);
    r += indent_string + "  " + std::string("egr17") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr17_) ) + "\n";
    all_zeros &= (0 == egr17_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PartyGlueRegRspecEgr18IntrStatus1") + ":\n";
    r += indent_string + "  " + std::string("egr0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr0_) ) + "\n";
    all_zeros &= (0 == egr0_);
    r += indent_string + "  " + std::string("egr1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr1_) ) + "\n";
    all_zeros &= (0 == egr1_);
    r += indent_string + "  " + std::string("egr2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr2_) ) + "\n";
    all_zeros &= (0 == egr2_);
    r += indent_string + "  " + std::string("egr3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr3_) ) + "\n";
    all_zeros &= (0 == egr3_);
    r += indent_string + "  " + std::string("egr4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr4_) ) + "\n";
    all_zeros &= (0 == egr4_);
    r += indent_string + "  " + std::string("egr5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr5_) ) + "\n";
    all_zeros &= (0 == egr5_);
    r += indent_string + "  " + std::string("egr6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr6_) ) + "\n";
    all_zeros &= (0 == egr6_);
    r += indent_string + "  " + std::string("egr7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr7_) ) + "\n";
    all_zeros &= (0 == egr7_);
    r += indent_string + "  " + std::string("egr8") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr8_) ) + "\n";
    all_zeros &= (0 == egr8_);
    r += indent_string + "  " + std::string("egr9") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr9_) ) + "\n";
    all_zeros &= (0 == egr9_);
    r += indent_string + "  " + std::string("egr10") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr10_) ) + "\n";
    all_zeros &= (0 == egr10_);
    r += indent_string + "  " + std::string("egr11") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr11_) ) + "\n";
    all_zeros &= (0 == egr11_);
    r += indent_string + "  " + std::string("egr12") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr12_) ) + "\n";
    all_zeros &= (0 == egr12_);
    r += indent_string + "  " + std::string("egr13") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr13_) ) + "\n";
    all_zeros &= (0 == egr13_);
    r += indent_string + "  " + std::string("egr14") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr14_) ) + "\n";
    all_zeros &= (0 == egr14_);
    r += indent_string + "  " + std::string("egr15") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr15_) ) + "\n";
    all_zeros &= (0 == egr15_);
    r += indent_string + "  " + std::string("egr16") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr16_) ) + "\n";
    all_zeros &= (0 == egr16_);
    r += indent_string + "  " + std::string("egr17") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr17_) ) + "\n";
    all_zeros &= (0 == egr17_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t egr0_;
  uint8_t egr1_;
  uint8_t egr2_;
  uint8_t egr3_;
  uint8_t egr4_;
  uint8_t egr5_;
  uint8_t egr6_;
  uint8_t egr7_;
  uint8_t egr8_;
  uint8_t egr9_;
  uint8_t egr10_;
  uint8_t egr11_;
  uint8_t egr12_;
  uint8_t egr13_;
  uint8_t egr14_;
  uint8_t egr15_;
  uint8_t egr16_;
  uint8_t egr17_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    offset += 0x3e000; // to get to party_glue_reg
    offset += 0x24; // to get to egr18_intr_status1
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_PARTY_GLUE_REG_RSPEC_EGR18_INTR_STATUS1_H__
