/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PARTY_GLUE_REG_RSPEC_PARDE_INTR_STATUS1_H__
#define __REGISTER_INCLUDES_PARTY_GLUE_REG_RSPEC_PARDE_INTR_STATUS1_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class PartyGlueRegRspecPardeIntrStatus1 : public model_core::RegisterBlock<RegisterCallback> {
public:
  PartyGlueRegRspecPardeIntrStatus1(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, false, write_callback, read_callback, std::string("PartyGlueRegRspecPardeIntrStatus1")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PartyGlueRegRspecPardeIntrStatus1(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PartyGlueRegRspecPardeIntrStatus1")
    {
    }
public:





  uint8_t &ibp() { return ibp_; }





  uint8_t &parb() { return parb_; }





  uint8_t &prsr_merge() { return prsr_merge_; }





  uint8_t &pbusstat() { return pbusstat_; }





  uint8_t &pgr() { return pgr_; }





  uint8_t &party_glue() { return party_glue_; }





  uint8_t &ebp() { return ebp_; }





  uint8_t &egr() { return egr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (ibp_ & 0x1);
    *data |= ((parb_ & 0x1) << 1);
    *data |= ((prsr_merge_ & 0x1) << 2);
    *data |= ((pbusstat_ & 0x1) << 3);
    *data |= ((pgr_ & 0x1) << 4);
    *data |= ((party_glue_ & 0x1) << 5);
    *data |= ((ebp_ & 0x1) << 6);
    *data |= ((egr_ & 0x1) << 7);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    ibp_ = (data & 0x1);
    parb_ = ((data >> 1) & 0x1);
    prsr_merge_ = ((data >> 2) & 0x1);
    pbusstat_ = ((data >> 3) & 0x1);
    pgr_ = ((data >> 4) & 0x1);
    party_glue_ = ((data >> 5) & 0x1);
    ebp_ = ((data >> 6) & 0x1);
    egr_ = ((data >> 7) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    ibp_ = 0;
    parb_ = 0;
    prsr_merge_ = 0;
    pbusstat_ = 0;
    pgr_ = 0;
    party_glue_ = 0;
    ebp_ = 0;
    egr_ = 0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PartyGlueRegRspecPardeIntrStatus1") + ":\n";
    r += indent_string + "  " + std::string("ibp") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp_) ) + "\n";
    all_zeros &= (0 == ibp_);
    r += indent_string + "  " + std::string("parb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(parb_) ) + "\n";
    all_zeros &= (0 == parb_);
    r += indent_string + "  " + std::string("prsr_merge") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr_merge_) ) + "\n";
    all_zeros &= (0 == prsr_merge_);
    r += indent_string + "  " + std::string("pbusstat") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbusstat_) ) + "\n";
    all_zeros &= (0 == pbusstat_);
    r += indent_string + "  " + std::string("pgr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pgr_) ) + "\n";
    all_zeros &= (0 == pgr_);
    r += indent_string + "  " + std::string("party_glue") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(party_glue_) ) + "\n";
    all_zeros &= (0 == party_glue_);
    r += indent_string + "  " + std::string("ebp") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp_) ) + "\n";
    all_zeros &= (0 == ebp_);
    r += indent_string + "  " + std::string("egr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr_) ) + "\n";
    all_zeros &= (0 == egr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PartyGlueRegRspecPardeIntrStatus1") + ":\n";
    r += indent_string + "  " + std::string("ibp") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp_) ) + "\n";
    all_zeros &= (0 == ibp_);
    r += indent_string + "  " + std::string("parb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(parb_) ) + "\n";
    all_zeros &= (0 == parb_);
    r += indent_string + "  " + std::string("prsr_merge") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prsr_merge_) ) + "\n";
    all_zeros &= (0 == prsr_merge_);
    r += indent_string + "  " + std::string("pbusstat") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbusstat_) ) + "\n";
    all_zeros &= (0 == pbusstat_);
    r += indent_string + "  " + std::string("pgr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pgr_) ) + "\n";
    all_zeros &= (0 == pgr_);
    r += indent_string + "  " + std::string("party_glue") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(party_glue_) ) + "\n";
    all_zeros &= (0 == party_glue_);
    r += indent_string + "  " + std::string("ebp") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ebp_) ) + "\n";
    all_zeros &= (0 == ebp_);
    r += indent_string + "  " + std::string("egr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr_) ) + "\n";
    all_zeros &= (0 == egr_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t ibp_;
  uint8_t parb_;
  uint8_t prsr_merge_;
  uint8_t pbusstat_;
  uint8_t pgr_;
  uint8_t party_glue_;
  uint8_t ebp_;
  uint8_t egr_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    offset += 0x3e000; // to get to party_glue_reg
    offset += 0x2c; // to get to parde_intr_status1
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_PARTY_GLUE_REG_RSPEC_PARDE_INTR_STATUS1_H__
