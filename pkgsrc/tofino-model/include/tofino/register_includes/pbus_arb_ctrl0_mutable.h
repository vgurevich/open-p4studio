/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PBUS_ARB_CTRL0_MUTABLE_H__
#define __REGISTER_INCLUDES_PBUS_ARB_CTRL0_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class PbusArbCtrl0Mutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PbusArbCtrl0Mutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, true, write_callback, read_callback, std::string("PbusArbCtrl0Mutable"))
    {
    }
  PbusArbCtrl0Mutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PbusArbCtrl0Mutable")
    {
    }
public:





  uint8_t host_master_req_weight() { return host_master_req_weight_; }
  void host_master_req_weight(const uint8_t &v) { host_master_req_weight_=v; }





  uint8_t il_req_weight0() { return il_req_weight0_; }
  void il_req_weight0(const uint8_t &v) { il_req_weight0_=v; }





  uint8_t il_req_weight1() { return il_req_weight1_; }
  void il_req_weight1(const uint8_t &v) { il_req_weight1_=v; }





  uint8_t il_req_weight2() { return il_req_weight2_; }
  void il_req_weight2(const uint8_t &v) { il_req_weight2_=v; }





  uint8_t il_req_weight3() { return il_req_weight3_; }
  void il_req_weight3(const uint8_t &v) { il_req_weight3_=v; }





  uint8_t wb_req_weight() { return wb_req_weight_; }
  void wb_req_weight(const uint8_t &v) { wb_req_weight_=v; }





  uint8_t rb_req_weight() { return rb_req_weight_; }
  void rb_req_weight(const uint8_t &v) { rb_req_weight_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (host_master_req_weight_ & 0xf);
    *data |= ((il_req_weight0_ & 0xf) << 4);
    *data |= ((il_req_weight1_ & 0xf) << 8);
    *data |= ((il_req_weight2_ & 0xf) << 12);
    *data |= ((il_req_weight3_ & 0xf) << 16);
    *data |= ((wb_req_weight_ & 0xf) << 20);
    *data |= ((rb_req_weight_ & 0xf) << 24);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    host_master_req_weight_ = (data & 0xf);
    il_req_weight0_ = ((data >> 4) & 0xf);
    il_req_weight1_ = ((data >> 8) & 0xf);
    il_req_weight2_ = ((data >> 12) & 0xf);
    il_req_weight3_ = ((data >> 16) & 0xf);
    wb_req_weight_ = ((data >> 20) & 0xf);
    rb_req_weight_ = ((data >> 24) & 0xf);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    host_master_req_weight_ = 0x1;
    il_req_weight0_ = 0x1;
    il_req_weight1_ = 0x1;
    il_req_weight2_ = 0x1;
    il_req_weight3_ = 0x1;
    wb_req_weight_ = 0x1;
    rb_req_weight_ = 0x1;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PbusArbCtrl0Mutable") + ":\n";
    r += indent_string + "  " + std::string("host_master_req_weight") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(host_master_req_weight_) ) + "\n";
    all_zeros &= (0 == host_master_req_weight_);
    r += indent_string + "  " + std::string("il_req_weight0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_req_weight0_) ) + "\n";
    all_zeros &= (0 == il_req_weight0_);
    r += indent_string + "  " + std::string("il_req_weight1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_req_weight1_) ) + "\n";
    all_zeros &= (0 == il_req_weight1_);
    r += indent_string + "  " + std::string("il_req_weight2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_req_weight2_) ) + "\n";
    all_zeros &= (0 == il_req_weight2_);
    r += indent_string + "  " + std::string("il_req_weight3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_req_weight3_) ) + "\n";
    all_zeros &= (0 == il_req_weight3_);
    r += indent_string + "  " + std::string("wb_req_weight") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wb_req_weight_) ) + "\n";
    all_zeros &= (0 == wb_req_weight_);
    r += indent_string + "  " + std::string("rb_req_weight") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_req_weight_) ) + "\n";
    all_zeros &= (0 == rb_req_weight_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PbusArbCtrl0Mutable") + ":\n";
    r += indent_string + "  " + std::string("host_master_req_weight") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(host_master_req_weight_) ) + "\n";
    all_zeros &= (0 == host_master_req_weight_);
    r += indent_string + "  " + std::string("il_req_weight0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_req_weight0_) ) + "\n";
    all_zeros &= (0 == il_req_weight0_);
    r += indent_string + "  " + std::string("il_req_weight1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_req_weight1_) ) + "\n";
    all_zeros &= (0 == il_req_weight1_);
    r += indent_string + "  " + std::string("il_req_weight2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_req_weight2_) ) + "\n";
    all_zeros &= (0 == il_req_weight2_);
    r += indent_string + "  " + std::string("il_req_weight3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(il_req_weight3_) ) + "\n";
    all_zeros &= (0 == il_req_weight3_);
    r += indent_string + "  " + std::string("wb_req_weight") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wb_req_weight_) ) + "\n";
    all_zeros &= (0 == wb_req_weight_);
    r += indent_string + "  " + std::string("rb_req_weight") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rb_req_weight_) ) + "\n";
    all_zeros &= (0 == rb_req_weight_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t host_master_req_weight_;
  uint8_t il_req_weight0_;
  uint8_t il_req_weight1_;
  uint8_t il_req_weight2_;
  uint8_t il_req_weight3_;
  uint8_t wb_req_weight_;
  uint8_t rb_req_weight_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x100000; // to get to pbc
    offset += 0x20; // to get to arb_ctrl0
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_PBUS_ARB_CTRL0_MUTABLE_H__
