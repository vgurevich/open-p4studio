/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PBUS_CTRL_H__
#define __REGISTER_INCLUDES_PBUS_CTRL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class PbusCtrl : public model_core::RegisterBlock<RegisterCallback> {
public:
  PbusCtrl(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, false, write_callback, read_callback, std::string("PbusCtrl"))
    {
    }
  PbusCtrl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PbusCtrl")
    {
    }
public:





  uint8_t &diag_bus_en() { return diag_bus_en_; }





  uint8_t &diag_cap_en() { return diag_cap_en_; }





  uint8_t &diag_trig_en() { return diag_trig_en_; }









  uint8_t &diag_dma_mode() { return diag_dma_mode_; }





  uint8_t &ecc_dec_dis() { return ecc_dec_dis_; }









  uint8_t &diag_pbus_sel0() { return diag_pbus_sel0_; }









  uint8_t &diag_pbus_sel1() { return diag_pbus_sel1_; }









  uint8_t &diag_pbus_sel2() { return diag_pbus_sel2_; }









  uint8_t &diag_pbus_sel3() { return diag_pbus_sel3_; }





  uint8_t &credit_reset() { return credit_reset_; }






  uint8_t &diag_test_sel() { return diag_test_sel_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (diag_bus_en_ & 0xf);
    *data |= ((diag_cap_en_ & 0x1) << 4);
    *data |= ((diag_trig_en_ & 0x1) << 5);
    *data |= ((diag_dma_mode_ & 0x1) << 6);
    *data |= ((ecc_dec_dis_ & 0x1) << 7);
    *data |= ((diag_pbus_sel0_ & 0x3) << 16);
    *data |= ((diag_pbus_sel1_ & 0x3) << 18);
    *data |= ((diag_pbus_sel2_ & 0x3) << 20);
    *data |= ((diag_pbus_sel3_ & 0x3) << 22);
    *data |= ((credit_reset_ & 0x1) << 30);
    *data |= ((diag_test_sel_ & 0x1) << 31);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    diag_bus_en_ = (data & 0xf);
    diag_cap_en_ = ((data >> 4) & 0x1);
    diag_trig_en_ = ((data >> 5) & 0x1);
    diag_dma_mode_ = ((data >> 6) & 0x1);
    ecc_dec_dis_ = ((data >> 7) & 0x1);
    diag_pbus_sel0_ = ((data >> 16) & 0x3);
    diag_pbus_sel1_ = ((data >> 18) & 0x3);
    diag_pbus_sel2_ = ((data >> 20) & 0x3);
    diag_pbus_sel3_ = ((data >> 22) & 0x3);
    credit_reset_ = ((data >> 30) & 0x1);
    diag_test_sel_ = ((data >> 31) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    diag_bus_en_ = 0x0;
    diag_cap_en_ = 0x0;
    diag_trig_en_ = 0x0;
    diag_dma_mode_ = 0x0;
    ecc_dec_dis_ = 0x0;
    diag_pbus_sel0_ = 0x0;
    diag_pbus_sel1_ = 0x0;
    diag_pbus_sel2_ = 0x0;
    diag_pbus_sel3_ = 0x0;
    credit_reset_ = 0x0;
    diag_test_sel_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PbusCtrl") + ":\n";
    r += indent_string + "  " + std::string("diag_bus_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_bus_en_) ) + "\n";
    all_zeros &= (0 == diag_bus_en_);
    r += indent_string + "  " + std::string("diag_cap_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_cap_en_) ) + "\n";
    all_zeros &= (0 == diag_cap_en_);
    r += indent_string + "  " + std::string("diag_trig_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_trig_en_) ) + "\n";
    all_zeros &= (0 == diag_trig_en_);
    r += indent_string + "  " + std::string("diag_dma_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_dma_mode_) ) + "\n";
    all_zeros &= (0 == diag_dma_mode_);
    r += indent_string + "  " + std::string("ecc_dec_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ecc_dec_dis_) ) + "\n";
    all_zeros &= (0 == ecc_dec_dis_);
    r += indent_string + "  " + std::string("diag_pbus_sel0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_pbus_sel0_) ) + "\n";
    all_zeros &= (0 == diag_pbus_sel0_);
    r += indent_string + "  " + std::string("diag_pbus_sel1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_pbus_sel1_) ) + "\n";
    all_zeros &= (0 == diag_pbus_sel1_);
    r += indent_string + "  " + std::string("diag_pbus_sel2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_pbus_sel2_) ) + "\n";
    all_zeros &= (0 == diag_pbus_sel2_);
    r += indent_string + "  " + std::string("diag_pbus_sel3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_pbus_sel3_) ) + "\n";
    all_zeros &= (0 == diag_pbus_sel3_);
    r += indent_string + "  " + std::string("credit_reset") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(credit_reset_) ) + "\n";
    all_zeros &= (0 == credit_reset_);
    r += indent_string + "  " + std::string("diag_test_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_test_sel_) ) + "\n";
    all_zeros &= (0 == diag_test_sel_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PbusCtrl") + ":\n";
    r += indent_string + "  " + std::string("diag_bus_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_bus_en_) ) + "\n";
    all_zeros &= (0 == diag_bus_en_);
    r += indent_string + "  " + std::string("diag_cap_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_cap_en_) ) + "\n";
    all_zeros &= (0 == diag_cap_en_);
    r += indent_string + "  " + std::string("diag_trig_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_trig_en_) ) + "\n";
    all_zeros &= (0 == diag_trig_en_);
    r += indent_string + "  " + std::string("diag_dma_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_dma_mode_) ) + "\n";
    all_zeros &= (0 == diag_dma_mode_);
    r += indent_string + "  " + std::string("ecc_dec_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ecc_dec_dis_) ) + "\n";
    all_zeros &= (0 == ecc_dec_dis_);
    r += indent_string + "  " + std::string("diag_pbus_sel0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_pbus_sel0_) ) + "\n";
    all_zeros &= (0 == diag_pbus_sel0_);
    r += indent_string + "  " + std::string("diag_pbus_sel1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_pbus_sel1_) ) + "\n";
    all_zeros &= (0 == diag_pbus_sel1_);
    r += indent_string + "  " + std::string("diag_pbus_sel2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_pbus_sel2_) ) + "\n";
    all_zeros &= (0 == diag_pbus_sel2_);
    r += indent_string + "  " + std::string("diag_pbus_sel3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_pbus_sel3_) ) + "\n";
    all_zeros &= (0 == diag_pbus_sel3_);
    r += indent_string + "  " + std::string("credit_reset") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(credit_reset_) ) + "\n";
    all_zeros &= (0 == credit_reset_);
    r += indent_string + "  " + std::string("diag_test_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(diag_test_sel_) ) + "\n";
    all_zeros &= (0 == diag_test_sel_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t diag_bus_en_;
  uint8_t diag_cap_en_;
  uint8_t diag_trig_en_;
  uint8_t diag_dma_mode_;
  uint8_t ecc_dec_dis_;
  uint8_t diag_pbus_sel0_;
  uint8_t diag_pbus_sel1_;
  uint8_t diag_pbus_sel2_;
  uint8_t diag_pbus_sel3_;
  uint8_t credit_reset_;
  uint8_t diag_test_sel_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x100000; // to get to pbc
    offset += 0x10; // to get to ctrl
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_PBUS_CTRL_H__
