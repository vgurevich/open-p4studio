/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PBUS_IL_DMA_STATEMACHINE_H__
#define __REGISTER_INCLUDES_PBUS_IL_DMA_STATEMACHINE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class PbusIlDmaStatemachine : public model_core::RegisterBlock<RegisterCallback> {
public:
  PbusIlDmaStatemachine(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, false, write_callback, read_callback, std::string("PbusIlDmaStatemachine"))
    {
    }
  PbusIlDmaStatemachine(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PbusIlDmaStatemachine")
    {
    }
public:







  uint8_t &read(int j0) { return read_[j0]; }







  uint8_t &instr(int j0) { return instr_[j0]; }







  uint8_t &write(int j0) { return write_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (read_[0] & 0x1);
    *data |= ((read_[1] & 0x1) << 1);
    *data |= ((read_[2] & 0x1) << 2);
    *data |= ((read_[3] & 0x1) << 3);
    *data |= ((instr_[0] & 0x7) << 4);
    *data |= ((instr_[1] & 0x7) << 7);
    *data |= ((instr_[2] & 0x7) << 10);
    *data |= ((instr_[3] & 0x7) << 13);
    *data |= ((write_[0] & 0x7) << 16);
    *data |= ((write_[1] & 0x7) << 19);
    *data |= ((write_[2] & 0x7) << 22);
    *data |= ((write_[3] & 0x7) << 25);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    read_[0] = (data & 0x1);
    read_[1] = ((data >> 1) & 0x1);
    read_[2] = ((data >> 2) & 0x1);
    read_[3] = ((data >> 3) & 0x1);
    instr_[0] = ((data >> 4) & 0x7);
    instr_[1] = ((data >> 7) & 0x7);
    instr_[2] = ((data >> 10) & 0x7);
    instr_[3] = ((data >> 13) & 0x7);
    write_[0] = ((data >> 16) & 0x7);
    write_[1] = ((data >> 19) & 0x7);
    write_[2] = ((data >> 22) & 0x7);
    write_[3] = ((data >> 25) & 0x7);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    read_[0] = 0x0;
    read_[1] = 0x0;
    read_[2] = 0x0;
    read_[3] = 0x0;
    instr_[0] = 0x0;
    instr_[1] = 0x0;
    instr_[2] = 0x0;
    instr_[3] = 0x0;
    write_[0] = 0x0;
    write_[1] = 0x0;
    write_[2] = 0x0;
    write_[3] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PbusIlDmaStatemachine") + ":\n";
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("read") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(read_[f]) ) + "\n";
      all_zeros &= (0 == read_[f]);
    }
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("instr") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(instr_[f]) ) + "\n";
      all_zeros &= (0 == instr_[f]);
    }
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("write") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(write_[f]) ) + "\n";
      all_zeros &= (0 == write_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PbusIlDmaStatemachine") + ":\n";
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("read") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(read_[f]) ) + "\n";
      all_zeros &= (0 == read_[f]);
    }
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("instr") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(instr_[f]) ) + "\n";
      all_zeros &= (0 == instr_[f]);
    }
    for (uint32_t f=0;f<4;++f) {
      r += indent_string + "  " + std::string("write") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(write_[f]) ) + "\n";
      all_zeros &= (0 == write_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 4 > read_;
  std::array< uint8_t, 4 > instr_;
  std::array< uint8_t, 4 > write_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x100000; // to get to pbc
    offset += 0x338; // to get to il_dma_statemachine
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_PBUS_IL_DMA_STATEMACHINE_H__
