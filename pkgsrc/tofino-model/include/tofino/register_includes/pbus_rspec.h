/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PBUS_RSPEC_H__
#define __REGISTER_INCLUDES_PBUS_RSPEC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "pbus_arb_ctrl0.h"
#include "pbus_arb_ctrl1.h"
#include "pbus_controller_mbe_log.h"
#include "pbus_controller_sbe_log.h"
#include "pbus_ctrl.h"
#include "pbus_diag_delay.h"
#include "pbus_diag_edge.h"
#include "pbus_diag_fm_dr_rd_err_log.h"
#include "pbus_diag_mask.h"
#include "pbus_diag_ts.h"
#include "pbus_diag_value.h"
#include "pbus_dma_statemachine.h"
#include "pbus_flush.h"
#include "pbus_freeze_en0.h"
#include "pbus_freeze_en1.h"
#include "pbus_freeze_en2.h"
#include "pbus_freeze_en3.h"
#include "pbus_host_creq_credit.h"
#include "pbus_host_slv_credit.h"
#include "pbus_idle_fm_dr_rd_err_log.h"
#include "pbus_il_address.h"
#include "pbus_il_creq_credit.h"
#include "pbus_il_dma_statemachine.h"
#include "pbus_il_tx_dr_rd_err_log.h"
#include "pbus_int_en0_0.h"
#include "pbus_int_en0_1.h"
#include "pbus_int_en1_0.h"
#include "pbus_int_en1_1.h"
#include "pbus_int_en2_0.h"
#include "pbus_int_en2_1.h"
#include "pbus_int_en3_0.h"
#include "pbus_int_en3_1.h"
#include "pbus_int_inj.h"
#include "pbus_int_stat0.h"
#include "pbus_int_stat1.h"
#include "pbus_int_stat2.h"
#include "pbus_int_stat3.h"
#include "pbus_parity_err_log.h"
#include "pbus_pri_ctrl.h"
#include "pbus_rb_creq_credit.h"
#include "pbus_rb_tx_dr_rd_err_log.h"
#include "pbus_sreq_slot_credit.h"
#include "pbus_stat_fm_dr_rd_err_log.h"
#include "pbus_wb_creq_credit.h"
#include "pbus_wb_tx_dr_rd_err_log.h"

namespace tofino {
  namespace register_classes {

class PbusRspec : public model_core::RegisterBlock<RegisterCallback> {
public:
  PbusRspec(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 832, false, write_callback, read_callback, std::string("PbusRspec"))
    {
    }
  PbusRspec(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PbusRspec")
    {
    }
public:





  PbusCtrl &ctrl() { return ctrl_; }





  PbusFlush &flush() { return flush_; }






  PbusArbCtrl0 &arb_ctrl0() { return arb_ctrl0_; }








  PbusArbCtrl1 &arb_ctrl1(int j0) { return arb_ctrl1_[j0]; }








  PbusPriCtrl &pri_ctrl() { return pri_ctrl_; }





  PbusIntStat0 &int_stat0() { return int_stat0_; }





  PbusIntStat1 &int_stat1() { return int_stat1_; }





  PbusIntStat2 &int_stat2() { return int_stat2_; }





  PbusIntStat3 &int_stat3() { return int_stat3_; }





  PbusIntEn0_0 &int_en0_0() { return int_en0_0_; }





  PbusIntEn0_1 &int_en0_1() { return int_en0_1_; }





  PbusIntEn1_0 &int_en1_0() { return int_en1_0_; }





  PbusIntEn1_1 &int_en1_1() { return int_en1_1_; }





  PbusIntEn2_0 &int_en2_0() { return int_en2_0_; }





  PbusIntEn2_1 &int_en2_1() { return int_en2_1_; }





  PbusIntEn3_0 &int_en3_0() { return int_en3_0_; }





  PbusIntEn3_1 &int_en3_1() { return int_en3_1_; }





  PbusFreezeEn0 &freeze_en0() { return freeze_en0_; }





  PbusFreezeEn1 &freeze_en1() { return freeze_en1_; }





  PbusFreezeEn2 &freeze_en2() { return freeze_en2_; }





  PbusFreezeEn3 &freeze_en3() { return freeze_en3_; }





  PbusIntInj &int_inj() { return int_inj_; }





  PbusDiagTs &diag_ts() { return diag_ts_; }





  PbusDiagDelay &diag_delay() { return diag_delay_; }








  PbusDiagEdge &diag_edge(int j0) { return diag_edge_[j0]; }








  PbusDiagValue &diag_value(int j0) { return diag_value_[j0]; }








  PbusDiagMask &diag_mask(int j0) { return diag_mask_[j0]; }







  PbusIlAddress &il_address(int j0) { return il_address_[j0]; }







  PbusIlTxDrRdErrLog &il_tx_dr_rd_err_log(int j0) { return il_tx_dr_rd_err_log_[j0]; }





  PbusWbTxDrRdErrLog &wb_tx_dr_rd_err_log() { return wb_tx_dr_rd_err_log_; }





  PbusRbTxDrRdErrLog &rb_tx_dr_rd_err_log() { return rb_tx_dr_rd_err_log_; }





  PbusStatFmDrRdErrLog &stat_fm_dr_rd_err_log() { return stat_fm_dr_rd_err_log_; }





  PbusIdleFmDrRdErrLog &idle_fm_dr_rd_err_log() { return idle_fm_dr_rd_err_log_; }





  PbusDiagFmDrRdErrLog &diag_fm_dr_rd_err_log() { return diag_fm_dr_rd_err_log_; }





  PbusControllerMbeLog &controller_mbe_log() { return controller_mbe_log_; }





  PbusControllerSbeLog &controller_sbe_log() { return controller_sbe_log_; }
















  PbusParityErrLog &parity_err_log(int j0) { return parity_err_log_[j0]; }





  PbusHostCreqCredit &host_creq_credit() { return host_creq_credit_; }







  PbusIlCreqCredit &il_creq_credit(int j0) { return il_creq_credit_[j0]; }





  PbusWbCreqCredit &wb_creq_credit() { return wb_creq_credit_; }





  PbusRbCreqCredit &rb_creq_credit() { return rb_creq_credit_; }





  PbusSreqSlotCredit &sreq_slot_credit() { return sreq_slot_credit_; }





  PbusHostSlvCredit &host_slave_credit() { return host_slave_credit_; }





  PbusIlDmaStatemachine &il_dma_statemachine() { return il_dma_statemachine_; }





  PbusDmaStatemachine &dma_statemachine() { return dma_statemachine_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      ctrl_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      flush_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      arb_ctrl0_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      arb_ctrl1_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      pri_ctrl_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      int_stat0_.read( offset, data );
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      if (read_callback_) read_callback_();
      int_stat1_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      int_stat2_.read( offset, data );
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      if (read_callback_) read_callback_();
      int_stat3_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      int_en0_0_.read( offset, data );
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      if (read_callback_) read_callback_();
      int_en0_1_.read( offset, data );
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      if (read_callback_) read_callback_();
      int_en1_0_.read( offset, data );
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      if (read_callback_) read_callback_();
      int_en1_1_.read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      if (read_callback_) read_callback_();
      int_en2_0_.read( offset, data );
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      if (read_callback_) read_callback_();
      int_en2_1_.read( offset, data );
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      if (read_callback_) read_callback_();
      int_en3_0_.read( offset, data );
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      if (read_callback_) read_callback_();
      int_en3_1_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      freeze_en0_.read( offset, data );
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      if (read_callback_) read_callback_();
      freeze_en1_.read( offset, data );
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      if (read_callback_) read_callback_();
      freeze_en2_.read( offset, data );
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      if (read_callback_) read_callback_();
      freeze_en3_.read( offset, data );
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      if (read_callback_) read_callback_();
      int_inj_.read( offset, data );
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      if (read_callback_) read_callback_();
      diag_ts_.read( offset, data );
    }
    else if (offset >= 0x98 && offset < 0x9c) {
      offset -= 0x98;
      if (read_callback_) read_callback_();
      diag_delay_.read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      diag_edge_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      diag_value_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xd0) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      diag_mask_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xd0 && offset < 0xe0) {
      offset -= 0xd0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      il_address_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0xf0) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      il_tx_dr_rd_err_log_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xf0 && offset < 0xf4) {
      offset -= 0xf0;
      if (read_callback_) read_callback_();
      wb_tx_dr_rd_err_log_.read( offset, data );
    }
    else if (offset >= 0xf4 && offset < 0xf8) {
      offset -= 0xf4;
      if (read_callback_) read_callback_();
      rb_tx_dr_rd_err_log_.read( offset, data );
    }
    else if (offset >= 0xf8 && offset < 0xfc) {
      offset -= 0xf8;
      if (read_callback_) read_callback_();
      stat_fm_dr_rd_err_log_.read( offset, data );
    }
    else if (offset >= 0xfc && offset < 0x100) {
      offset -= 0xfc;
      if (read_callback_) read_callback_();
      idle_fm_dr_rd_err_log_.read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      diag_fm_dr_rd_err_log_.read( offset, data );
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      if (read_callback_) read_callback_();
      controller_mbe_log_.read( offset, data );
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      if (read_callback_) read_callback_();
      controller_sbe_log_.read( offset, data );
    }
    else if (offset >= 0x120 && offset < 0x13c) {
      offset -= 0x120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      parity_err_log_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x170) {
      offset -= 0x140;
      if (read_callback_) read_callback_();
      host_creq_credit_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x2c0) {
      offset -= 0x200;
      int i0 = offset / 0x30;
      offset  -= i0 * 0x30;
      if (read_callback_) read_callback_();
      il_creq_credit_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x2c0 && offset < 0x2f0) {
      offset -= 0x2c0;
      if (read_callback_) read_callback_();
      wb_creq_credit_.read( offset, data );
    }
    else if (offset >= 0x300 && offset < 0x330) {
      offset -= 0x300;
      if (read_callback_) read_callback_();
      rb_creq_credit_.read( offset, data );
    }
    else if (offset >= 0x330 && offset < 0x334) {
      offset -= 0x330;
      if (read_callback_) read_callback_();
      sreq_slot_credit_.read( offset, data );
    }
    else if (offset >= 0x334 && offset < 0x338) {
      offset -= 0x334;
      if (read_callback_) read_callback_();
      host_slave_credit_.read( offset, data );
    }
    else if (offset >= 0x338 && offset < 0x33c) {
      offset -= 0x338;
      if (read_callback_) read_callback_();
      il_dma_statemachine_.read( offset, data );
    }
    else if (offset >= 0x33c && offset < 0x340) {
      offset -= 0x33c;
      if (read_callback_) read_callback_();
      dma_statemachine_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      flush_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      arb_ctrl0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      arb_ctrl1_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      pri_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      int_stat0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      int_stat1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      int_stat2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      int_stat3_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      int_en0_0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      int_en0_1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      int_en1_0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      int_en1_1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      int_en2_0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      int_en2_1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      int_en3_0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      int_en3_1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      freeze_en0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      freeze_en1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      freeze_en2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      freeze_en3_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      int_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      diag_ts_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x98 && offset < 0x9c) {
      offset -= 0x98;
      diag_delay_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      diag_edge_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      diag_value_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xd0) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      diag_mask_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd0 && offset < 0xe0) {
      offset -= 0xd0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      il_address_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0xf0) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      il_tx_dr_rd_err_log_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf0 && offset < 0xf4) {
      offset -= 0xf0;
      wb_tx_dr_rd_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf4 && offset < 0xf8) {
      offset -= 0xf4;
      rb_tx_dr_rd_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf8 && offset < 0xfc) {
      offset -= 0xf8;
      stat_fm_dr_rd_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xfc && offset < 0x100) {
      offset -= 0xfc;
      idle_fm_dr_rd_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      diag_fm_dr_rd_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      controller_mbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      controller_sbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x120 && offset < 0x13c) {
      offset -= 0x120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      parity_err_log_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x170) {
      offset -= 0x140;
      host_creq_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x2c0) {
      offset -= 0x200;
      int i0 = offset / 0x30;
      offset  -= i0 * 0x30;
      il_creq_credit_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c0 && offset < 0x2f0) {
      offset -= 0x2c0;
      wb_creq_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x300 && offset < 0x330) {
      offset -= 0x300;
      rb_creq_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x330 && offset < 0x334) {
      offset -= 0x330;
      sreq_slot_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x334 && offset < 0x338) {
      offset -= 0x334;
      host_slave_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x338 && offset < 0x33c) {
      offset -= 0x338;
      il_dma_statemachine_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x33c && offset < 0x340) {
      offset -= 0x33c;
      dma_statemachine_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    ctrl_.reset();
    flush_.reset();
    arb_ctrl0_.reset();
    for (auto &f0 : arb_ctrl1_) {
      f0.reset();
    }
    pri_ctrl_.reset();
    int_stat0_.reset();
    int_stat1_.reset();
    int_stat2_.reset();
    int_stat3_.reset();
    int_en0_0_.reset();
    int_en0_1_.reset();
    int_en1_0_.reset();
    int_en1_1_.reset();
    int_en2_0_.reset();
    int_en2_1_.reset();
    int_en3_0_.reset();
    int_en3_1_.reset();
    freeze_en0_.reset();
    freeze_en1_.reset();
    freeze_en2_.reset();
    freeze_en3_.reset();
    int_inj_.reset();
    diag_ts_.reset();
    diag_delay_.reset();
    for (auto &f0 : diag_edge_) {
      f0.reset();
    }
    for (auto &f0 : diag_value_) {
      f0.reset();
    }
    for (auto &f0 : diag_mask_) {
      f0.reset();
    }
    for (auto &f0 : il_address_) {
      f0.reset();
    }
    for (auto &f0 : il_tx_dr_rd_err_log_) {
      f0.reset();
    }
    wb_tx_dr_rd_err_log_.reset();
    rb_tx_dr_rd_err_log_.reset();
    stat_fm_dr_rd_err_log_.reset();
    idle_fm_dr_rd_err_log_.reset();
    diag_fm_dr_rd_err_log_.reset();
    controller_mbe_log_.reset();
    controller_sbe_log_.reset();
    for (auto &f0 : parity_err_log_) {
      f0.reset();
    }
    host_creq_credit_.reset();
    for (auto &f0 : il_creq_credit_) {
      f0.reset();
    }
    wb_creq_credit_.reset();
    rb_creq_credit_.reset();
    sreq_slot_credit_.reset();
    host_slave_credit_.reset();
    il_dma_statemachine_.reset();
    dma_statemachine_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += flush_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += arb_ctrl0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += arb_ctrl1_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      r += pri_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      r += int_stat0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      r += int_stat1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      r += int_stat2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5c && offset < 0x60) {
      offset -= 0x5c;
      r += int_stat3_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x64) {
      offset -= 0x60;
      r += int_en0_0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x64 && offset < 0x68) {
      offset -= 0x64;
      r += int_en0_1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      r += int_en1_0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      r += int_en1_1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      r += int_en2_0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      r += int_en2_1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      r += int_en3_0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      r += int_en3_1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      r += freeze_en0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      r += freeze_en1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      r += freeze_en2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      r += freeze_en3_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      r += int_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      r += diag_ts_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x98 && offset < 0x9c) {
      offset -= 0x98;
      r += diag_delay_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += diag_edge_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += diag_value_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xd0) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += diag_mask_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd0 && offset < 0xe0) {
      offset -= 0xd0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += il_address_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0xf0) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += il_tx_dr_rd_err_log_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf0 && offset < 0xf4) {
      offset -= 0xf0;
      r += wb_tx_dr_rd_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf4 && offset < 0xf8) {
      offset -= 0xf4;
      r += rb_tx_dr_rd_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf8 && offset < 0xfc) {
      offset -= 0xf8;
      r += stat_fm_dr_rd_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xfc && offset < 0x100) {
      offset -= 0xfc;
      r += idle_fm_dr_rd_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      r += diag_fm_dr_rd_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      r += controller_mbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      r += controller_sbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x120 && offset < 0x13c) {
      offset -= 0x120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += parity_err_log_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x170) {
      offset -= 0x140;
      r += host_creq_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x2c0) {
      offset -= 0x200;
      int i0 = offset / 0x30;
      offset  -= i0 * 0x30;
      r += il_creq_credit_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c0 && offset < 0x2f0) {
      offset -= 0x2c0;
      r += wb_creq_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x300 && offset < 0x330) {
      offset -= 0x300;
      r += rb_creq_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x330 && offset < 0x334) {
      offset -= 0x330;
      r += sreq_slot_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x334 && offset < 0x338) {
      offset -= 0x334;
      r += host_slave_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x338 && offset < 0x33c) {
      offset -= 0x338;
      r += il_dma_statemachine_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x33c && offset < 0x340) {
      offset -= 0x33c;
      r += dma_statemachine_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += ctrl_.to_string(print_zeros,indent_string) ;
    r += flush_.to_string(print_zeros,indent_string) ;
    r += arb_ctrl0_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += arb_ctrl1_[a0].to_string(print_zeros,indent_string) ;
    }
    r += pri_ctrl_.to_string(print_zeros,indent_string) ;
    r += int_stat0_.to_string(print_zeros,indent_string) ;
    r += int_stat1_.to_string(print_zeros,indent_string) ;
    r += int_stat2_.to_string(print_zeros,indent_string) ;
    r += int_stat3_.to_string(print_zeros,indent_string) ;
    r += int_en0_0_.to_string(print_zeros,indent_string) ;
    r += int_en0_1_.to_string(print_zeros,indent_string) ;
    r += int_en1_0_.to_string(print_zeros,indent_string) ;
    r += int_en1_1_.to_string(print_zeros,indent_string) ;
    r += int_en2_0_.to_string(print_zeros,indent_string) ;
    r += int_en2_1_.to_string(print_zeros,indent_string) ;
    r += int_en3_0_.to_string(print_zeros,indent_string) ;
    r += int_en3_1_.to_string(print_zeros,indent_string) ;
    r += freeze_en0_.to_string(print_zeros,indent_string) ;
    r += freeze_en1_.to_string(print_zeros,indent_string) ;
    r += freeze_en2_.to_string(print_zeros,indent_string) ;
    r += freeze_en3_.to_string(print_zeros,indent_string) ;
    r += int_inj_.to_string(print_zeros,indent_string) ;
    r += diag_ts_.to_string(print_zeros,indent_string) ;
    r += diag_delay_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += diag_edge_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += diag_value_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += diag_mask_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += il_address_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += il_tx_dr_rd_err_log_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wb_tx_dr_rd_err_log_.to_string(print_zeros,indent_string) ;
    r += rb_tx_dr_rd_err_log_.to_string(print_zeros,indent_string) ;
    r += stat_fm_dr_rd_err_log_.to_string(print_zeros,indent_string) ;
    r += idle_fm_dr_rd_err_log_.to_string(print_zeros,indent_string) ;
    r += diag_fm_dr_rd_err_log_.to_string(print_zeros,indent_string) ;
    r += controller_mbe_log_.to_string(print_zeros,indent_string) ;
    r += controller_sbe_log_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<7;++a0) {
      r += parity_err_log_[a0].to_string(print_zeros,indent_string) ;
    }
    r += host_creq_credit_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += il_creq_credit_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wb_creq_credit_.to_string(print_zeros,indent_string) ;
    r += rb_creq_credit_.to_string(print_zeros,indent_string) ;
    r += sreq_slot_credit_.to_string(print_zeros,indent_string) ;
    r += host_slave_credit_.to_string(print_zeros,indent_string) ;
    r += il_dma_statemachine_.to_string(print_zeros,indent_string) ;
    r += dma_statemachine_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  PbusCtrl ctrl_;
  PbusFlush flush_;
  PbusArbCtrl0 arb_ctrl0_;
  std::array< PbusArbCtrl1, 4 > arb_ctrl1_;
  PbusPriCtrl pri_ctrl_;
  PbusIntStat0 int_stat0_;
  PbusIntStat1 int_stat1_;
  PbusIntStat2 int_stat2_;
  PbusIntStat3 int_stat3_;
  PbusIntEn0_0 int_en0_0_;
  PbusIntEn0_1 int_en0_1_;
  PbusIntEn1_0 int_en1_0_;
  PbusIntEn1_1 int_en1_1_;
  PbusIntEn2_0 int_en2_0_;
  PbusIntEn2_1 int_en2_1_;
  PbusIntEn3_0 int_en3_0_;
  PbusIntEn3_1 int_en3_1_;
  PbusFreezeEn0 freeze_en0_;
  PbusFreezeEn1 freeze_en1_;
  PbusFreezeEn2 freeze_en2_;
  PbusFreezeEn3 freeze_en3_;
  PbusIntInj int_inj_;
  PbusDiagTs diag_ts_;
  PbusDiagDelay diag_delay_;
  std::array< PbusDiagEdge, 4 > diag_edge_;
  std::array< PbusDiagValue, 4 > diag_value_;
  std::array< PbusDiagMask, 4 > diag_mask_;
  std::array< PbusIlAddress, 4 > il_address_;
  std::array< PbusIlTxDrRdErrLog, 4 > il_tx_dr_rd_err_log_;
  PbusWbTxDrRdErrLog wb_tx_dr_rd_err_log_;
  PbusRbTxDrRdErrLog rb_tx_dr_rd_err_log_;
  PbusStatFmDrRdErrLog stat_fm_dr_rd_err_log_;
  PbusIdleFmDrRdErrLog idle_fm_dr_rd_err_log_;
  PbusDiagFmDrRdErrLog diag_fm_dr_rd_err_log_;
  PbusControllerMbeLog controller_mbe_log_;
  PbusControllerSbeLog controller_sbe_log_;
  std::array< PbusParityErrLog, 7 > parity_err_log_;
  PbusHostCreqCredit host_creq_credit_;
  std::array< PbusIlCreqCredit, 4 > il_creq_credit_;
  PbusWbCreqCredit wb_creq_credit_;
  PbusRbCreqCredit rb_creq_credit_;
  PbusSreqSlotCredit sreq_slot_credit_;
  PbusHostSlvCredit host_slave_credit_;
  PbusIlDmaStatemachine il_dma_statemachine_;
  PbusDmaStatemachine dma_statemachine_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x100000; // to get to pbc
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_PBUS_RSPEC_H__
