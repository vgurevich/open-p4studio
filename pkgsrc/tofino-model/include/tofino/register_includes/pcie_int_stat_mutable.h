/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PCIE_INT_STAT_MUTABLE_H__
#define __REGISTER_INCLUDES_PCIE_INT_STAT_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class PcieIntStatMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PcieIntStatMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, true, write_callback, read_callback, std::string("PcieIntStatMutable"))
    {
    }
  PcieIntStatMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PcieIntStatMutable")
    {
    }
public:





  uint8_t rxreqbuf_ecc_dual_err() { return rxreqbuf_ecc_dual_err_; }
  void rxreqbuf_ecc_dual_err(const uint8_t &v) { rxreqbuf_ecc_dual_err_=v; }





  uint8_t rxcplbuf_ecc_dual_err() { return rxcplbuf_ecc_dual_err_; }
  void rxcplbuf_ecc_dual_err(const uint8_t &v) { rxcplbuf_ecc_dual_err_=v; }





  uint8_t txbuf_ecc_dual_err() { return txbuf_ecc_dual_err_; }
  void txbuf_ecc_dual_err(const uint8_t &v) { txbuf_ecc_dual_err_=v; }





  uint8_t msix_ecc_dual_err() { return msix_ecc_dual_err_; }
  void msix_ecc_dual_err(const uint8_t &v) { msix_ecc_dual_err_=v; }





  uint8_t dma_timeout_err() { return dma_timeout_err_; }
  void dma_timeout_err(const uint8_t &v) { dma_timeout_err_=v; }





  uint8_t cpu_timeout_err() { return cpu_timeout_err_; }
  void cpu_timeout_err(const uint8_t &v) { cpu_timeout_err_=v; }





  uint8_t cpu_non_dw_err() { return cpu_non_dw_err_; }
  void cpu_non_dw_err(const uint8_t &v) { cpu_non_dw_err_=v; }





  uint8_t cpu_max_dw_err() { return cpu_max_dw_err_; }
  void cpu_max_dw_err(const uint8_t &v) { cpu_max_dw_err_=v; }





  uint8_t rxreqbuf_ecc_sngl_err() { return rxreqbuf_ecc_sngl_err_; }
  void rxreqbuf_ecc_sngl_err(const uint8_t &v) { rxreqbuf_ecc_sngl_err_=v; }





  uint8_t rxcplbuf_ecc_sngl_err() { return rxcplbuf_ecc_sngl_err_; }
  void rxcplbuf_ecc_sngl_err(const uint8_t &v) { rxcplbuf_ecc_sngl_err_=v; }





  uint8_t txbuf_ecc_sngl_err() { return txbuf_ecc_sngl_err_; }
  void txbuf_ecc_sngl_err(const uint8_t &v) { txbuf_ecc_sngl_err_=v; }





  uint8_t msix_ecc_sngl_err() { return msix_ecc_sngl_err_; }
  void msix_ecc_sngl_err(const uint8_t &v) { msix_ecc_sngl_err_=v; }





  uint8_t pdma_pst_ovf_err() { return pdma_pst_ovf_err_; }
  void pdma_pst_ovf_err(const uint8_t &v) { pdma_pst_ovf_err_=v; }





  uint8_t pdma_non_ovf_err() { return pdma_non_ovf_err_; }
  void pdma_non_ovf_err(const uint8_t &v) { pdma_non_ovf_err_=v; }





  uint8_t cdma_pst_ovf_err() { return cdma_pst_ovf_err_; }
  void cdma_pst_ovf_err(const uint8_t &v) { cdma_pst_ovf_err_=v; }





  uint8_t cdma_non_ovf_err() { return cdma_non_ovf_err_; }
  void cdma_non_ovf_err(const uint8_t &v) { cdma_non_ovf_err_=v; }





  uint8_t tdma_pst_ovf_err() { return tdma_pst_ovf_err_; }
  void tdma_pst_ovf_err(const uint8_t &v) { tdma_pst_ovf_err_=v; }





  uint8_t tdma_non_ovf_err() { return tdma_non_ovf_err_; }
  void tdma_non_ovf_err(const uint8_t &v) { tdma_non_ovf_err_=v; }





  uint8_t mdma_pst_ovf_err() { return mdma_pst_ovf_err_; }
  void mdma_pst_ovf_err(const uint8_t &v) { mdma_pst_ovf_err_=v; }





  uint8_t mdma_non_ovf_err() { return mdma_non_ovf_err_; }
  void mdma_non_ovf_err(const uint8_t &v) { mdma_non_ovf_err_=v; }





  uint8_t dma_cpl_ovf_err() { return dma_cpl_ovf_err_; }
  void dma_cpl_ovf_err(const uint8_t &v) { dma_cpl_ovf_err_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (rxreqbuf_ecc_dual_err_ & 0x1);
    *data |= ((rxcplbuf_ecc_dual_err_ & 0x1) << 1);
    *data |= ((txbuf_ecc_dual_err_ & 0x1) << 2);
    *data |= ((msix_ecc_dual_err_ & 0x1) << 3);
    *data |= ((dma_timeout_err_ & 0x1) << 4);
    *data |= ((cpu_timeout_err_ & 0x1) << 5);
    *data |= ((cpu_non_dw_err_ & 0x1) << 6);
    *data |= ((cpu_max_dw_err_ & 0x1) << 7);
    *data |= ((rxreqbuf_ecc_sngl_err_ & 0x1) << 8);
    *data |= ((rxcplbuf_ecc_sngl_err_ & 0x1) << 9);
    *data |= ((txbuf_ecc_sngl_err_ & 0x1) << 10);
    *data |= ((msix_ecc_sngl_err_ & 0x1) << 11);
    *data |= ((pdma_pst_ovf_err_ & 0x1) << 12);
    *data |= ((pdma_non_ovf_err_ & 0x1) << 13);
    *data |= ((cdma_pst_ovf_err_ & 0x1) << 14);
    *data |= ((cdma_non_ovf_err_ & 0x1) << 15);
    *data |= ((tdma_pst_ovf_err_ & 0x1) << 16);
    *data |= ((tdma_non_ovf_err_ & 0x1) << 17);
    *data |= ((mdma_pst_ovf_err_ & 0x1) << 18);
    *data |= ((mdma_non_ovf_err_ & 0x1) << 19);
    *data |= ((dma_cpl_ovf_err_ & 0x1) << 20);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    rxreqbuf_ecc_dual_err_ &= ~(data & 0x1);
    rxcplbuf_ecc_dual_err_ &= ~((data >> 1) & 0x1);
    txbuf_ecc_dual_err_ &= ~((data >> 2) & 0x1);
    msix_ecc_dual_err_ &= ~((data >> 3) & 0x1);
    dma_timeout_err_ &= ~((data >> 4) & 0x1);
    cpu_timeout_err_ &= ~((data >> 5) & 0x1);
    cpu_non_dw_err_ &= ~((data >> 6) & 0x1);
    cpu_max_dw_err_ &= ~((data >> 7) & 0x1);
    rxreqbuf_ecc_sngl_err_ &= ~((data >> 8) & 0x1);
    rxcplbuf_ecc_sngl_err_ &= ~((data >> 9) & 0x1);
    txbuf_ecc_sngl_err_ &= ~((data >> 10) & 0x1);
    msix_ecc_sngl_err_ &= ~((data >> 11) & 0x1);
    pdma_pst_ovf_err_ &= ~((data >> 12) & 0x1);
    pdma_non_ovf_err_ &= ~((data >> 13) & 0x1);
    cdma_pst_ovf_err_ &= ~((data >> 14) & 0x1);
    cdma_non_ovf_err_ &= ~((data >> 15) & 0x1);
    tdma_pst_ovf_err_ &= ~((data >> 16) & 0x1);
    tdma_non_ovf_err_ &= ~((data >> 17) & 0x1);
    mdma_pst_ovf_err_ &= ~((data >> 18) & 0x1);
    mdma_non_ovf_err_ &= ~((data >> 19) & 0x1);
    dma_cpl_ovf_err_ &= ~((data >> 20) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    rxreqbuf_ecc_dual_err_ = 0x0;
    rxcplbuf_ecc_dual_err_ = 0x0;
    txbuf_ecc_dual_err_ = 0x0;
    msix_ecc_dual_err_ = 0x0;
    dma_timeout_err_ = 0x0;
    cpu_timeout_err_ = 0x0;
    cpu_non_dw_err_ = 0x0;
    cpu_max_dw_err_ = 0x0;
    rxreqbuf_ecc_sngl_err_ = 0x0;
    rxcplbuf_ecc_sngl_err_ = 0x0;
    txbuf_ecc_sngl_err_ = 0x0;
    msix_ecc_sngl_err_ = 0x0;
    pdma_pst_ovf_err_ = 0x0;
    pdma_non_ovf_err_ = 0x0;
    cdma_pst_ovf_err_ = 0x0;
    cdma_non_ovf_err_ = 0x0;
    tdma_pst_ovf_err_ = 0x0;
    tdma_non_ovf_err_ = 0x0;
    mdma_pst_ovf_err_ = 0x0;
    mdma_non_ovf_err_ = 0x0;
    dma_cpl_ovf_err_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PcieIntStatMutable") + ":\n";
    r += indent_string + "  " + std::string("rxreqbuf_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxreqbuf_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == rxreqbuf_ecc_dual_err_);
    r += indent_string + "  " + std::string("rxcplbuf_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcplbuf_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == rxcplbuf_ecc_dual_err_);
    r += indent_string + "  " + std::string("txbuf_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txbuf_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == txbuf_ecc_dual_err_);
    r += indent_string + "  " + std::string("msix_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(msix_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == msix_ecc_dual_err_);
    r += indent_string + "  " + std::string("dma_timeout_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dma_timeout_err_) ) + "\n";
    all_zeros &= (0 == dma_timeout_err_);
    r += indent_string + "  " + std::string("cpu_timeout_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_timeout_err_) ) + "\n";
    all_zeros &= (0 == cpu_timeout_err_);
    r += indent_string + "  " + std::string("cpu_non_dw_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_non_dw_err_) ) + "\n";
    all_zeros &= (0 == cpu_non_dw_err_);
    r += indent_string + "  " + std::string("cpu_max_dw_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_max_dw_err_) ) + "\n";
    all_zeros &= (0 == cpu_max_dw_err_);
    r += indent_string + "  " + std::string("rxreqbuf_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxreqbuf_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == rxreqbuf_ecc_sngl_err_);
    r += indent_string + "  " + std::string("rxcplbuf_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcplbuf_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == rxcplbuf_ecc_sngl_err_);
    r += indent_string + "  " + std::string("txbuf_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txbuf_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == txbuf_ecc_sngl_err_);
    r += indent_string + "  " + std::string("msix_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(msix_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == msix_ecc_sngl_err_);
    r += indent_string + "  " + std::string("pdma_pst_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pdma_pst_ovf_err_) ) + "\n";
    all_zeros &= (0 == pdma_pst_ovf_err_);
    r += indent_string + "  " + std::string("pdma_non_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pdma_non_ovf_err_) ) + "\n";
    all_zeros &= (0 == pdma_non_ovf_err_);
    r += indent_string + "  " + std::string("cdma_pst_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cdma_pst_ovf_err_) ) + "\n";
    all_zeros &= (0 == cdma_pst_ovf_err_);
    r += indent_string + "  " + std::string("cdma_non_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cdma_non_ovf_err_) ) + "\n";
    all_zeros &= (0 == cdma_non_ovf_err_);
    r += indent_string + "  " + std::string("tdma_pst_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tdma_pst_ovf_err_) ) + "\n";
    all_zeros &= (0 == tdma_pst_ovf_err_);
    r += indent_string + "  " + std::string("tdma_non_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tdma_non_ovf_err_) ) + "\n";
    all_zeros &= (0 == tdma_non_ovf_err_);
    r += indent_string + "  " + std::string("mdma_pst_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mdma_pst_ovf_err_) ) + "\n";
    all_zeros &= (0 == mdma_pst_ovf_err_);
    r += indent_string + "  " + std::string("mdma_non_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mdma_non_ovf_err_) ) + "\n";
    all_zeros &= (0 == mdma_non_ovf_err_);
    r += indent_string + "  " + std::string("dma_cpl_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dma_cpl_ovf_err_) ) + "\n";
    all_zeros &= (0 == dma_cpl_ovf_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PcieIntStatMutable") + ":\n";
    r += indent_string + "  " + std::string("rxreqbuf_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxreqbuf_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == rxreqbuf_ecc_dual_err_);
    r += indent_string + "  " + std::string("rxcplbuf_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcplbuf_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == rxcplbuf_ecc_dual_err_);
    r += indent_string + "  " + std::string("txbuf_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txbuf_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == txbuf_ecc_dual_err_);
    r += indent_string + "  " + std::string("msix_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(msix_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == msix_ecc_dual_err_);
    r += indent_string + "  " + std::string("dma_timeout_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dma_timeout_err_) ) + "\n";
    all_zeros &= (0 == dma_timeout_err_);
    r += indent_string + "  " + std::string("cpu_timeout_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_timeout_err_) ) + "\n";
    all_zeros &= (0 == cpu_timeout_err_);
    r += indent_string + "  " + std::string("cpu_non_dw_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_non_dw_err_) ) + "\n";
    all_zeros &= (0 == cpu_non_dw_err_);
    r += indent_string + "  " + std::string("cpu_max_dw_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cpu_max_dw_err_) ) + "\n";
    all_zeros &= (0 == cpu_max_dw_err_);
    r += indent_string + "  " + std::string("rxreqbuf_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxreqbuf_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == rxreqbuf_ecc_sngl_err_);
    r += indent_string + "  " + std::string("rxcplbuf_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rxcplbuf_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == rxcplbuf_ecc_sngl_err_);
    r += indent_string + "  " + std::string("txbuf_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txbuf_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == txbuf_ecc_sngl_err_);
    r += indent_string + "  " + std::string("msix_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(msix_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == msix_ecc_sngl_err_);
    r += indent_string + "  " + std::string("pdma_pst_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pdma_pst_ovf_err_) ) + "\n";
    all_zeros &= (0 == pdma_pst_ovf_err_);
    r += indent_string + "  " + std::string("pdma_non_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pdma_non_ovf_err_) ) + "\n";
    all_zeros &= (0 == pdma_non_ovf_err_);
    r += indent_string + "  " + std::string("cdma_pst_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cdma_pst_ovf_err_) ) + "\n";
    all_zeros &= (0 == cdma_pst_ovf_err_);
    r += indent_string + "  " + std::string("cdma_non_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cdma_non_ovf_err_) ) + "\n";
    all_zeros &= (0 == cdma_non_ovf_err_);
    r += indent_string + "  " + std::string("tdma_pst_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tdma_pst_ovf_err_) ) + "\n";
    all_zeros &= (0 == tdma_pst_ovf_err_);
    r += indent_string + "  " + std::string("tdma_non_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tdma_non_ovf_err_) ) + "\n";
    all_zeros &= (0 == tdma_non_ovf_err_);
    r += indent_string + "  " + std::string("mdma_pst_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mdma_pst_ovf_err_) ) + "\n";
    all_zeros &= (0 == mdma_pst_ovf_err_);
    r += indent_string + "  " + std::string("mdma_non_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mdma_non_ovf_err_) ) + "\n";
    all_zeros &= (0 == mdma_non_ovf_err_);
    r += indent_string + "  " + std::string("dma_cpl_ovf_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dma_cpl_ovf_err_) ) + "\n";
    all_zeros &= (0 == dma_cpl_ovf_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t rxreqbuf_ecc_dual_err_;
  uint8_t rxcplbuf_ecc_dual_err_;
  uint8_t txbuf_ecc_dual_err_;
  uint8_t msix_ecc_dual_err_;
  uint8_t dma_timeout_err_;
  uint8_t cpu_timeout_err_;
  uint8_t cpu_non_dw_err_;
  uint8_t cpu_max_dw_err_;
  uint8_t rxreqbuf_ecc_sngl_err_;
  uint8_t rxcplbuf_ecc_sngl_err_;
  uint8_t txbuf_ecc_sngl_err_;
  uint8_t msix_ecc_sngl_err_;
  uint8_t pdma_pst_ovf_err_;
  uint8_t pdma_non_ovf_err_;
  uint8_t cdma_pst_ovf_err_;
  uint8_t cdma_non_ovf_err_;
  uint8_t tdma_pst_ovf_err_;
  uint8_t tdma_non_ovf_err_;
  uint8_t mdma_pst_ovf_err_;
  uint8_t mdma_non_ovf_err_;
  uint8_t dma_cpl_ovf_err_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x124; // to get to pcie_regs_pcie_int_stat
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_PCIE_INT_STAT_MUTABLE_H__
