/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PGR_INT_INJ_MUTABLE_H__
#define __REGISTER_INCLUDES_PGR_INT_INJ_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class PgrIntInjMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PgrIntInjMutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, true, write_callback, read_callback, std::string("PgrIntInjMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PgrIntInjMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PgrIntInjMutable")
    {
    }
public:





  uint8_t port16_crc_err0_inj() { return port16_crc_err0_inj_; }
  void port16_crc_err0_inj(const uint8_t &v) { port16_crc_err0_inj_=v; }





  uint8_t port16_crc_err1_inj() { return port16_crc_err1_inj_; }
  void port16_crc_err1_inj(const uint8_t &v) { port16_crc_err1_inj_=v; }





  uint8_t port16_crc_err2_inj() { return port16_crc_err2_inj_; }
  void port16_crc_err2_inj(const uint8_t &v) { port16_crc_err2_inj_=v; }





  uint8_t port16_crc_err3_inj() { return port16_crc_err3_inj_; }
  void port16_crc_err3_inj(const uint8_t &v) { port16_crc_err3_inj_=v; }





  uint8_t port17_crc_err0_inj() { return port17_crc_err0_inj_; }
  void port17_crc_err0_inj(const uint8_t &v) { port17_crc_err0_inj_=v; }





  uint8_t port17_crc_err1_inj() { return port17_crc_err1_inj_; }
  void port17_crc_err1_inj(const uint8_t &v) { port17_crc_err1_inj_=v; }





  uint8_t port17_crc_err2_inj() { return port17_crc_err2_inj_; }
  void port17_crc_err2_inj(const uint8_t &v) { port17_crc_err2_inj_=v; }





  uint8_t port17_crc_err3_inj() { return port17_crc_err3_inj_; }
  void port17_crc_err3_inj(const uint8_t &v) { port17_crc_err3_inj_=v; }





  uint8_t buffer_mbe_inj() { return buffer_mbe_inj_; }
  void buffer_mbe_inj(const uint8_t &v) { buffer_mbe_inj_=v; }





  uint8_t buffer_sbe_inj() { return buffer_sbe_inj_; }
  void buffer_sbe_inj(const uint8_t &v) { buffer_sbe_inj_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (port16_crc_err0_inj_ & 0x1);
    *data |= ((port16_crc_err1_inj_ & 0x1) << 1);
    *data |= ((port16_crc_err2_inj_ & 0x1) << 2);
    *data |= ((port16_crc_err3_inj_ & 0x1) << 3);
    *data |= ((port17_crc_err0_inj_ & 0x1) << 4);
    *data |= ((port17_crc_err1_inj_ & 0x1) << 5);
    *data |= ((port17_crc_err2_inj_ & 0x1) << 6);
    *data |= ((port17_crc_err3_inj_ & 0x1) << 7);
    *data |= ((buffer_mbe_inj_ & 0x1) << 8);
    *data |= ((buffer_sbe_inj_ & 0x1) << 9);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    port16_crc_err0_inj_ = (data & 0x1);
    port16_crc_err1_inj_ = ((data >> 1) & 0x1);
    port16_crc_err2_inj_ = ((data >> 2) & 0x1);
    port16_crc_err3_inj_ = ((data >> 3) & 0x1);
    port17_crc_err0_inj_ = ((data >> 4) & 0x1);
    port17_crc_err1_inj_ = ((data >> 5) & 0x1);
    port17_crc_err2_inj_ = ((data >> 6) & 0x1);
    port17_crc_err3_inj_ = ((data >> 7) & 0x1);
    buffer_mbe_inj_ = ((data >> 8) & 0x1);
    buffer_sbe_inj_ = ((data >> 9) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    port16_crc_err0_inj_ = 0x0;
    port16_crc_err1_inj_ = 0x0;
    port16_crc_err2_inj_ = 0x0;
    port16_crc_err3_inj_ = 0x0;
    port17_crc_err0_inj_ = 0x0;
    port17_crc_err1_inj_ = 0x0;
    port17_crc_err2_inj_ = 0x0;
    port17_crc_err3_inj_ = 0x0;
    buffer_mbe_inj_ = 0x0;
    buffer_sbe_inj_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PgrIntInjMutable") + ":\n";
    r += indent_string + "  " + std::string("port16_crc_err0_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port16_crc_err0_inj_) ) + "\n";
    all_zeros &= (0 == port16_crc_err0_inj_);
    r += indent_string + "  " + std::string("port16_crc_err1_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port16_crc_err1_inj_) ) + "\n";
    all_zeros &= (0 == port16_crc_err1_inj_);
    r += indent_string + "  " + std::string("port16_crc_err2_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port16_crc_err2_inj_) ) + "\n";
    all_zeros &= (0 == port16_crc_err2_inj_);
    r += indent_string + "  " + std::string("port16_crc_err3_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port16_crc_err3_inj_) ) + "\n";
    all_zeros &= (0 == port16_crc_err3_inj_);
    r += indent_string + "  " + std::string("port17_crc_err0_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port17_crc_err0_inj_) ) + "\n";
    all_zeros &= (0 == port17_crc_err0_inj_);
    r += indent_string + "  " + std::string("port17_crc_err1_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port17_crc_err1_inj_) ) + "\n";
    all_zeros &= (0 == port17_crc_err1_inj_);
    r += indent_string + "  " + std::string("port17_crc_err2_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port17_crc_err2_inj_) ) + "\n";
    all_zeros &= (0 == port17_crc_err2_inj_);
    r += indent_string + "  " + std::string("port17_crc_err3_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port17_crc_err3_inj_) ) + "\n";
    all_zeros &= (0 == port17_crc_err3_inj_);
    r += indent_string + "  " + std::string("buffer_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(buffer_mbe_inj_) ) + "\n";
    all_zeros &= (0 == buffer_mbe_inj_);
    r += indent_string + "  " + std::string("buffer_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(buffer_sbe_inj_) ) + "\n";
    all_zeros &= (0 == buffer_sbe_inj_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PgrIntInjMutable") + ":\n";
    r += indent_string + "  " + std::string("port16_crc_err0_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port16_crc_err0_inj_) ) + "\n";
    all_zeros &= (0 == port16_crc_err0_inj_);
    r += indent_string + "  " + std::string("port16_crc_err1_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port16_crc_err1_inj_) ) + "\n";
    all_zeros &= (0 == port16_crc_err1_inj_);
    r += indent_string + "  " + std::string("port16_crc_err2_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port16_crc_err2_inj_) ) + "\n";
    all_zeros &= (0 == port16_crc_err2_inj_);
    r += indent_string + "  " + std::string("port16_crc_err3_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port16_crc_err3_inj_) ) + "\n";
    all_zeros &= (0 == port16_crc_err3_inj_);
    r += indent_string + "  " + std::string("port17_crc_err0_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port17_crc_err0_inj_) ) + "\n";
    all_zeros &= (0 == port17_crc_err0_inj_);
    r += indent_string + "  " + std::string("port17_crc_err1_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port17_crc_err1_inj_) ) + "\n";
    all_zeros &= (0 == port17_crc_err1_inj_);
    r += indent_string + "  " + std::string("port17_crc_err2_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port17_crc_err2_inj_) ) + "\n";
    all_zeros &= (0 == port17_crc_err2_inj_);
    r += indent_string + "  " + std::string("port17_crc_err3_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port17_crc_err3_inj_) ) + "\n";
    all_zeros &= (0 == port17_crc_err3_inj_);
    r += indent_string + "  " + std::string("buffer_mbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(buffer_mbe_inj_) ) + "\n";
    all_zeros &= (0 == buffer_mbe_inj_);
    r += indent_string + "  " + std::string("buffer_sbe_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(buffer_sbe_inj_) ) + "\n";
    all_zeros &= (0 == buffer_sbe_inj_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t port16_crc_err0_inj_;
  uint8_t port16_crc_err1_inj_;
  uint8_t port16_crc_err2_inj_;
  uint8_t port16_crc_err3_inj_;
  uint8_t port17_crc_err0_inj_;
  uint8_t port17_crc_err1_inj_;
  uint8_t port17_crc_err2_inj_;
  uint8_t port17_crc_err3_inj_;
  uint8_t buffer_mbe_inj_;
  uint8_t buffer_sbe_inj_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    offset += 0x3c000; // to get to pgr_reg
    offset += 0x1000; // to get to pgr_common
    offset += 0x4c; // to get to int_inj
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_PGR_INT_INJ_MUTABLE_H__
