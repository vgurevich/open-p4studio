/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PIPE_BLOCK_REG_H__
#define __REGISTER_INCLUDES_PIPE_BLOCK_REG_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "discard_queue_cnt_cell.h"
#include "discard_queue_wm_cnt_cell.h"
#include "pipe_block_reg_debug_bus_ctrl.h"
#include "pipe_block_reg_intr.h"
#include "pipe_block_reg_intr_enable0.h"
#include "pipe_block_reg_intr_enable1.h"
#include "pipe_block_reg_intr_freeze_enable.h"
#include "pipe_block_reg_intr_inject.h"
#include "pipe_block_reg_intr_status.h"
#include "pipe_block_reg_port_drop_cnt_table_mbe_errlog.h"
#include "pipe_block_reg_port_drop_cnt_table_sbe_errlog.h"
#include "pipe_block_reg_qac_ctr32_drop_no_dst.h"
#include "pipe_block_reg_qac_ctr32_pre_mc_drop.h"
#include "pipe_block_reg_qac_ecc.h"
#include "pipe_block_reg_queue_drop_table_mbe_errlog.h"
#include "pipe_block_reg_queue_drop_table_sbe_errlog.h"
#include "port_drop_state.h"
#include "qac_debug_register.h"
#include "qac_drop_count_data.h"
#include "qac_indir_queue_resume_mem_addr.h"
#include "qac_indir_queue_resume_mem_data.h"
#include "qac_mc_apid.h"
#include "qac_offset.h"
#include "qac_pipe_config.h"
#include "qac_port_drop_count_addr.h"
#include "qac_port_rx_disable.h"
#include "qac_qid_mapping.h"
#include "qac_qid_profile_config.h"
#include "qac_queue_drop_count_addr.h"
#include "queue_drop_state.h"

namespace tofino {
  namespace register_classes {

class PipeBlockReg : public model_core::RegisterBlock<RegisterCallback> {
public:
  PipeBlockReg(
      int chipNumber, int index_tm_qac_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_qac_pipe_rspec), 5408, false, write_callback, read_callback, std::string("PipeBlockReg")+":"+boost::lexical_cast<std::string>(index_tm_qac_pipe_rspec))
    {
    }
  PipeBlockReg(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PipeBlockReg")
    {
    }
public:





  PipeBlockRegQacCtr32DropNoDst &qac_reg_qac_ctr32_drop_no_dst() { return qac_reg_qac_ctr32_drop_no_dst_; }





  PipeBlockRegQacCtr32PreMcDrop &qac_reg_qac_ctr32_pre_mc_drop() { return qac_reg_qac_ctr32_pre_mc_drop_; }







  QacOffset &qac_reg_offset_profile(int j0) { return qac_reg_offset_profile_[j0]; }





  QacMcApid &qac_reg_mc_apid() { return qac_reg_mc_apid_; }







  QacQidProfileConfig &qac_reg_qac_qid_profile_config(int j0) { return qac_reg_qac_qid_profile_config_[j0]; }







  QacQidMapping &qac_reg_qac_qid_mapping(int j0) { return qac_reg_qac_qid_mapping_[j0]; }





  QacPipeConfig &qac_reg_pipe_config() { return qac_reg_pipe_config_; }





  DiscardQueueCntCell &qac_reg_discard_queue_cnt_cell() { return qac_reg_discard_queue_cnt_cell_; }





  DiscardQueueWmCntCell &qac_reg_discard_queue_wm_cnt_cell() { return qac_reg_discard_queue_wm_cnt_cell_; }





  QacDropCountData &qac_reg_qac_queue_drop_count_data() { return qac_reg_qac_queue_drop_count_data_; }





  QacDropCountData &qac_reg_qac_port_drop_count_data() { return qac_reg_qac_port_drop_count_data_; }





  QacQueueDropCountAddr &qac_reg_qac_queue_drop_count_addr() { return qac_reg_qac_queue_drop_count_addr_; }





  QacPortDropCountAddr &qac_reg_qac_port_drop_count_addr() { return qac_reg_qac_port_drop_count_addr_; }





  QacPortRxDisable &qac_reg_qac_port_rx_disable() { return qac_reg_qac_port_rx_disable_; }





  QacDebugRegister &qac_reg_qac_debug_register() { return qac_reg_qac_debug_register_; }








  PipeBlockRegQacEcc &qac_reg_qac_ecc() { return qac_reg_qac_ecc_; }





  PipeBlockRegQueueDropTableSbeErrlog &qac_reg_queue_drop_table_sbe_errlog() { return qac_reg_queue_drop_table_sbe_errlog_; }





  PipeBlockRegQueueDropTableMbeErrlog &qac_reg_queue_drop_table_mbe_errlog() { return qac_reg_queue_drop_table_mbe_errlog_; }





  PipeBlockRegPortDropCntTableSbeErrlog &qac_reg_port_drop_cnt_table_sbe_errlog() { return qac_reg_port_drop_cnt_table_sbe_errlog_; }





  PipeBlockRegPortDropCntTableMbeErrlog &qac_reg_port_drop_cnt_table_mbe_errlog() { return qac_reg_port_drop_cnt_table_mbe_errlog_; }





  PipeBlockRegDebugBusCtrl &qac_reg_debug_bus_ctrl() { return qac_reg_debug_bus_ctrl_; }









  QacIndirQueueResumeMemAddr &qac_reg_qac_indir_queue_resume_mem_addr() { return qac_reg_qac_indir_queue_resume_mem_addr_; }






  QacIndirQueueResumeMemData &qac_reg_qac_indir_queue_resume_mem_data_data() { return qac_reg_qac_indir_queue_resume_mem_data_data_; }







  QueueDropState &qac_reg_queue_drop_state(int j0) { return qac_reg_queue_drop_state_[j0]; }







  QueueDropState &qac_reg_queue_drop_yel_state(int j0) { return qac_reg_queue_drop_yel_state_[j0]; }







  QueueDropState &qac_reg_queue_drop_red_state(int j0) { return qac_reg_queue_drop_red_state_[j0]; }







  PortDropState &qac_reg_port_drop_state(int j0) { return qac_reg_port_drop_state_[j0]; }
  PipeBlockRegIntr &qac_reg_intr() { return qac_reg_intr_; }






  PipeBlockRegIntrStatus &qac_reg_intr_status() { return qac_reg_intr_status_; }







  PipeBlockRegIntrEnable0 &qac_reg_intr_enable0() { return qac_reg_intr_enable0_; }







  PipeBlockRegIntrEnable1 &qac_reg_intr_enable1() { return qac_reg_intr_enable1_; }








  PipeBlockRegIntrInject &qac_reg_intr_inject() { return qac_reg_intr_inject_; }





  PipeBlockRegIntrFreezeEnable &qac_reg_intr_freeze_enable() { return qac_reg_intr_freeze_enable_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x6000 && offset < 0x6004) {
      offset -= 0x6000;
      if (read_callback_) read_callback_();
      qac_reg_qac_ctr32_drop_no_dst_.read( offset, data );
    }
    else if (offset >= 0x6004 && offset < 0x6008) {
      offset -= 0x6004;
      if (read_callback_) read_callback_();
      qac_reg_qac_ctr32_pre_mc_drop_.read( offset, data );
    }
    else if (offset >= 0x6080 && offset < 0x6100) {
      offset -= 0x6080;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_reg_offset_profile_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x6100 && offset < 0x6104) {
      offset -= 0x6100;
      if (read_callback_) read_callback_();
      qac_reg_mc_apid_.read( offset, data );
    }
    else if (offset >= 0x6200 && offset < 0x6320) {
      offset -= 0x6200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_reg_qac_qid_profile_config_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x6800 && offset < 0x7000) {
      offset -= 0x6800;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_reg_qac_qid_mapping_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x7000 && offset < 0x7004) {
      offset -= 0x7000;
      if (read_callback_) read_callback_();
      qac_reg_pipe_config_.read( offset, data );
    }
    else if (offset >= 0x7004 && offset < 0x7008) {
      offset -= 0x7004;
      if (read_callback_) read_callback_();
      qac_reg_discard_queue_cnt_cell_.read( offset, data );
    }
    else if (offset >= 0x7008 && offset < 0x700c) {
      offset -= 0x7008;
      if (read_callback_) read_callback_();
      qac_reg_discard_queue_wm_cnt_cell_.read( offset, data );
    }
    else if (offset >= 0x7010 && offset < 0x7018) {
      offset -= 0x7010;
      if (read_callback_) read_callback_();
      qac_reg_qac_queue_drop_count_data_.read( offset, data );
    }
    else if (offset >= 0x7018 && offset < 0x7020) {
      offset -= 0x7018;
      if (read_callback_) read_callback_();
      qac_reg_qac_port_drop_count_data_.read( offset, data );
    }
    else if (offset >= 0x7020 && offset < 0x7024) {
      offset -= 0x7020;
      if (read_callback_) read_callback_();
      qac_reg_qac_queue_drop_count_addr_.read( offset, data );
    }
    else if (offset >= 0x7024 && offset < 0x7028) {
      offset -= 0x7024;
      if (read_callback_) read_callback_();
      qac_reg_qac_port_drop_count_addr_.read( offset, data );
    }
    else if (offset >= 0x7030 && offset < 0x703c) {
      offset -= 0x7030;
      if (read_callback_) read_callback_();
      qac_reg_qac_port_rx_disable_.read( offset, data );
    }
    else if (offset >= 0x703c && offset < 0x7040) {
      offset -= 0x703c;
      if (read_callback_) read_callback_();
      qac_reg_qac_debug_register_.read( offset, data );
    }
    else if (offset >= 0x7040 && offset < 0x7044) {
      offset -= 0x7040;
      if (read_callback_) read_callback_();
      qac_reg_qac_ecc_.read( offset, data );
    }
    else if (offset >= 0x7074 && offset < 0x7078) {
      offset -= 0x7074;
      if (read_callback_) read_callback_();
      qac_reg_queue_drop_table_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x7078 && offset < 0x707c) {
      offset -= 0x7078;
      if (read_callback_) read_callback_();
      qac_reg_queue_drop_table_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x707c && offset < 0x7080) {
      offset -= 0x707c;
      if (read_callback_) read_callback_();
      qac_reg_port_drop_cnt_table_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x7080 && offset < 0x7084) {
      offset -= 0x7080;
      if (read_callback_) read_callback_();
      qac_reg_port_drop_cnt_table_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x7084 && offset < 0x7088) {
      offset -= 0x7084;
      if (read_callback_) read_callback_();
      qac_reg_debug_bus_ctrl_.read( offset, data );
    }
    else if (offset >= 0x7088 && offset < 0x708c) {
      offset -= 0x7088;
      if (read_callback_) read_callback_();
      qac_reg_qac_indir_queue_resume_mem_addr_.read( offset, data );
    }
    else if (offset >= 0x708c && offset < 0x7090) {
      offset -= 0x708c;
      if (read_callback_) read_callback_();
      qac_reg_qac_indir_queue_resume_mem_data_data_.read( offset, data );
    }
    else if (offset >= 0x7100 && offset < 0x7148) {
      offset -= 0x7100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_reg_queue_drop_state_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x7180 && offset < 0x71c8) {
      offset -= 0x7180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_reg_queue_drop_yel_state_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x7200 && offset < 0x7248) {
      offset -= 0x7200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_reg_queue_drop_red_state_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x7400 && offset < 0x7520) {
      offset -= 0x7400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      qac_reg_port_drop_state_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x7060 && offset < 0x7074) {
      offset -= 0x7060;
      if (read_callback_) read_callback_();
      qac_reg_intr_.read( offset, data );
    }
    else if (offset >= 0x7060 && offset < 0x7064) {
      offset -= 0x7060;
      if (read_callback_) read_callback_();
      qac_reg_intr_status_.read( offset, data );
    }
    else if (offset >= 0x7064 && offset < 0x7068) {
      offset -= 0x7064;
      if (read_callback_) read_callback_();
      qac_reg_intr_enable0_.read( offset, data );
    }
    else if (offset >= 0x7068 && offset < 0x706c) {
      offset -= 0x7068;
      if (read_callback_) read_callback_();
      qac_reg_intr_enable1_.read( offset, data );
    }
    else if (offset >= 0x706c && offset < 0x7070) {
      offset -= 0x706c;
      if (read_callback_) read_callback_();
      qac_reg_intr_inject_.read( offset, data );
    }
    else if (offset >= 0x7070 && offset < 0x7074) {
      offset -= 0x7070;
      if (read_callback_) read_callback_();
      qac_reg_intr_freeze_enable_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x6000 && offset < 0x6004) {
      offset -= 0x6000;
      qac_reg_qac_ctr32_drop_no_dst_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6004 && offset < 0x6008) {
      offset -= 0x6004;
      qac_reg_qac_ctr32_pre_mc_drop_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6080 && offset < 0x6100) {
      offset -= 0x6080;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_reg_offset_profile_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6100 && offset < 0x6104) {
      offset -= 0x6100;
      qac_reg_mc_apid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6200 && offset < 0x6320) {
      offset -= 0x6200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_reg_qac_qid_profile_config_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6800 && offset < 0x7000) {
      offset -= 0x6800;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_reg_qac_qid_mapping_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7000 && offset < 0x7004) {
      offset -= 0x7000;
      qac_reg_pipe_config_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7004 && offset < 0x7008) {
      offset -= 0x7004;
      qac_reg_discard_queue_cnt_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7008 && offset < 0x700c) {
      offset -= 0x7008;
      qac_reg_discard_queue_wm_cnt_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7010 && offset < 0x7018) {
      offset -= 0x7010;
      qac_reg_qac_queue_drop_count_data_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7018 && offset < 0x7020) {
      offset -= 0x7018;
      qac_reg_qac_port_drop_count_data_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7020 && offset < 0x7024) {
      offset -= 0x7020;
      qac_reg_qac_queue_drop_count_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7024 && offset < 0x7028) {
      offset -= 0x7024;
      qac_reg_qac_port_drop_count_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7030 && offset < 0x703c) {
      offset -= 0x7030;
      qac_reg_qac_port_rx_disable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x703c && offset < 0x7040) {
      offset -= 0x703c;
      qac_reg_qac_debug_register_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7040 && offset < 0x7044) {
      offset -= 0x7040;
      qac_reg_qac_ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7074 && offset < 0x7078) {
      offset -= 0x7074;
      qac_reg_queue_drop_table_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7078 && offset < 0x707c) {
      offset -= 0x7078;
      qac_reg_queue_drop_table_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x707c && offset < 0x7080) {
      offset -= 0x707c;
      qac_reg_port_drop_cnt_table_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7080 && offset < 0x7084) {
      offset -= 0x7080;
      qac_reg_port_drop_cnt_table_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7084 && offset < 0x7088) {
      offset -= 0x7084;
      qac_reg_debug_bus_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7088 && offset < 0x708c) {
      offset -= 0x7088;
      qac_reg_qac_indir_queue_resume_mem_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x708c && offset < 0x7090) {
      offset -= 0x708c;
      qac_reg_qac_indir_queue_resume_mem_data_data_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7100 && offset < 0x7148) {
      offset -= 0x7100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_reg_queue_drop_state_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7180 && offset < 0x71c8) {
      offset -= 0x7180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_reg_queue_drop_yel_state_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7200 && offset < 0x7248) {
      offset -= 0x7200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_reg_queue_drop_red_state_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7400 && offset < 0x7520) {
      offset -= 0x7400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      qac_reg_port_drop_state_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7060 && offset < 0x7074) {
      offset -= 0x7060;
      qac_reg_intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7060 && offset < 0x7064) {
      offset -= 0x7060;
      qac_reg_intr_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7064 && offset < 0x7068) {
      offset -= 0x7064;
      qac_reg_intr_enable0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7068 && offset < 0x706c) {
      offset -= 0x7068;
      qac_reg_intr_enable1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x706c && offset < 0x7070) {
      offset -= 0x706c;
      qac_reg_intr_inject_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7070 && offset < 0x7074) {
      offset -= 0x7070;
      qac_reg_intr_freeze_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    qac_reg_qac_ctr32_drop_no_dst_.reset();
    qac_reg_qac_ctr32_pre_mc_drop_.reset();
    for (auto &f0 : qac_reg_offset_profile_) {
      f0.reset();
    }
    qac_reg_mc_apid_.reset();
    for (auto &f0 : qac_reg_qac_qid_profile_config_) {
      f0.reset();
    }
    for (auto &f0 : qac_reg_qac_qid_mapping_) {
      f0.reset();
    }
    qac_reg_pipe_config_.reset();
    qac_reg_discard_queue_cnt_cell_.reset();
    qac_reg_discard_queue_wm_cnt_cell_.reset();
    qac_reg_qac_queue_drop_count_data_.reset();
    qac_reg_qac_port_drop_count_data_.reset();
    qac_reg_qac_queue_drop_count_addr_.reset();
    qac_reg_qac_port_drop_count_addr_.reset();
    qac_reg_qac_port_rx_disable_.reset();
    qac_reg_qac_debug_register_.reset();
    qac_reg_qac_ecc_.reset();
    qac_reg_queue_drop_table_sbe_errlog_.reset();
    qac_reg_queue_drop_table_mbe_errlog_.reset();
    qac_reg_port_drop_cnt_table_sbe_errlog_.reset();
    qac_reg_port_drop_cnt_table_mbe_errlog_.reset();
    qac_reg_debug_bus_ctrl_.reset();
    qac_reg_qac_indir_queue_resume_mem_addr_.reset();
    qac_reg_qac_indir_queue_resume_mem_data_data_.reset();
    for (auto &f0 : qac_reg_queue_drop_state_) {
      f0.reset();
    }
    for (auto &f0 : qac_reg_queue_drop_yel_state_) {
      f0.reset();
    }
    for (auto &f0 : qac_reg_queue_drop_red_state_) {
      f0.reset();
    }
    for (auto &f0 : qac_reg_port_drop_state_) {
      f0.reset();
    }
    qac_reg_intr_.reset();
    qac_reg_intr_status_.reset();
    qac_reg_intr_enable0_.reset();
    qac_reg_intr_enable1_.reset();
    qac_reg_intr_inject_.reset();
    qac_reg_intr_freeze_enable_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x6000 && offset < 0x6004) {
      offset -= 0x6000;
      r += qac_reg_qac_ctr32_drop_no_dst_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6004 && offset < 0x6008) {
      offset -= 0x6004;
      r += qac_reg_qac_ctr32_pre_mc_drop_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6080 && offset < 0x6100) {
      offset -= 0x6080;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_reg_offset_profile_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6100 && offset < 0x6104) {
      offset -= 0x6100;
      r += qac_reg_mc_apid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6200 && offset < 0x6320) {
      offset -= 0x6200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_reg_qac_qid_profile_config_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6800 && offset < 0x7000) {
      offset -= 0x6800;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_reg_qac_qid_mapping_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7000 && offset < 0x7004) {
      offset -= 0x7000;
      r += qac_reg_pipe_config_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7004 && offset < 0x7008) {
      offset -= 0x7004;
      r += qac_reg_discard_queue_cnt_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7008 && offset < 0x700c) {
      offset -= 0x7008;
      r += qac_reg_discard_queue_wm_cnt_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7010 && offset < 0x7018) {
      offset -= 0x7010;
      r += qac_reg_qac_queue_drop_count_data_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7018 && offset < 0x7020) {
      offset -= 0x7018;
      r += qac_reg_qac_port_drop_count_data_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7020 && offset < 0x7024) {
      offset -= 0x7020;
      r += qac_reg_qac_queue_drop_count_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7024 && offset < 0x7028) {
      offset -= 0x7024;
      r += qac_reg_qac_port_drop_count_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7030 && offset < 0x703c) {
      offset -= 0x7030;
      r += qac_reg_qac_port_rx_disable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x703c && offset < 0x7040) {
      offset -= 0x703c;
      r += qac_reg_qac_debug_register_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7040 && offset < 0x7044) {
      offset -= 0x7040;
      r += qac_reg_qac_ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7074 && offset < 0x7078) {
      offset -= 0x7074;
      r += qac_reg_queue_drop_table_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7078 && offset < 0x707c) {
      offset -= 0x7078;
      r += qac_reg_queue_drop_table_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x707c && offset < 0x7080) {
      offset -= 0x707c;
      r += qac_reg_port_drop_cnt_table_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7080 && offset < 0x7084) {
      offset -= 0x7080;
      r += qac_reg_port_drop_cnt_table_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7084 && offset < 0x7088) {
      offset -= 0x7084;
      r += qac_reg_debug_bus_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7088 && offset < 0x708c) {
      offset -= 0x7088;
      r += qac_reg_qac_indir_queue_resume_mem_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x708c && offset < 0x7090) {
      offset -= 0x708c;
      r += qac_reg_qac_indir_queue_resume_mem_data_data_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7100 && offset < 0x7148) {
      offset -= 0x7100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_reg_queue_drop_state_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7180 && offset < 0x71c8) {
      offset -= 0x7180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_reg_queue_drop_yel_state_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7200 && offset < 0x7248) {
      offset -= 0x7200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_reg_queue_drop_red_state_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7400 && offset < 0x7520) {
      offset -= 0x7400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += qac_reg_port_drop_state_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7060 && offset < 0x7074) {
      offset -= 0x7060;
      r += qac_reg_intr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7060 && offset < 0x7064) {
      offset -= 0x7060;
      r += qac_reg_intr_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7064 && offset < 0x7068) {
      offset -= 0x7064;
      r += qac_reg_intr_enable0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7068 && offset < 0x706c) {
      offset -= 0x7068;
      r += qac_reg_intr_enable1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x706c && offset < 0x7070) {
      offset -= 0x706c;
      r += qac_reg_intr_inject_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7070 && offset < 0x7074) {
      offset -= 0x7070;
      r += qac_reg_intr_freeze_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += qac_reg_qac_ctr32_drop_no_dst_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac_ctr32_pre_mc_drop_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<32;++a0) {
      r += qac_reg_offset_profile_[a0].to_string(print_zeros,indent_string) ;
    }
    r += qac_reg_mc_apid_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<72;++a0) {
      r += qac_reg_qac_qid_profile_config_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<512;++a0) {
      r += qac_reg_qac_qid_mapping_[a0].to_string(print_zeros,indent_string) ;
    }
    r += qac_reg_pipe_config_.to_string(print_zeros,indent_string) ;
    r += qac_reg_discard_queue_cnt_cell_.to_string(print_zeros,indent_string) ;
    r += qac_reg_discard_queue_wm_cnt_cell_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac_queue_drop_count_data_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac_port_drop_count_data_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac_queue_drop_count_addr_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac_port_drop_count_addr_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac_port_rx_disable_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac_debug_register_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac_ecc_.to_string(print_zeros,indent_string) ;
    r += qac_reg_queue_drop_table_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += qac_reg_queue_drop_table_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += qac_reg_port_drop_cnt_table_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += qac_reg_port_drop_cnt_table_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += qac_reg_debug_bus_ctrl_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac_indir_queue_resume_mem_addr_.to_string(print_zeros,indent_string) ;
    r += qac_reg_qac_indir_queue_resume_mem_data_data_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<18;++a0) {
      r += qac_reg_queue_drop_state_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<18;++a0) {
      r += qac_reg_queue_drop_yel_state_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<18;++a0) {
      r += qac_reg_queue_drop_red_state_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<72;++a0) {
      r += qac_reg_port_drop_state_[a0].to_string(print_zeros,indent_string) ;
    }
    r += qac_reg_intr_.to_string(print_zeros,indent_string) ;
    r += qac_reg_intr_status_.to_string(print_zeros,indent_string) ;
    r += qac_reg_intr_enable0_.to_string(print_zeros,indent_string) ;
    r += qac_reg_intr_enable1_.to_string(print_zeros,indent_string) ;
    r += qac_reg_intr_inject_.to_string(print_zeros,indent_string) ;
    r += qac_reg_intr_freeze_enable_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  PipeBlockRegQacCtr32DropNoDst qac_reg_qac_ctr32_drop_no_dst_;
  PipeBlockRegQacCtr32PreMcDrop qac_reg_qac_ctr32_pre_mc_drop_;
  std::array< QacOffset, 32 > qac_reg_offset_profile_;
  QacMcApid qac_reg_mc_apid_;
  std::array< QacQidProfileConfig, 72 > qac_reg_qac_qid_profile_config_;
  std::array< QacQidMapping, 512 > qac_reg_qac_qid_mapping_;
  QacPipeConfig qac_reg_pipe_config_;
  DiscardQueueCntCell qac_reg_discard_queue_cnt_cell_;
  DiscardQueueWmCntCell qac_reg_discard_queue_wm_cnt_cell_;
  QacDropCountData qac_reg_qac_queue_drop_count_data_;
  QacDropCountData qac_reg_qac_port_drop_count_data_;
  QacQueueDropCountAddr qac_reg_qac_queue_drop_count_addr_;
  QacPortDropCountAddr qac_reg_qac_port_drop_count_addr_;
  QacPortRxDisable qac_reg_qac_port_rx_disable_;
  QacDebugRegister qac_reg_qac_debug_register_;
  PipeBlockRegQacEcc qac_reg_qac_ecc_;
  PipeBlockRegQueueDropTableSbeErrlog qac_reg_queue_drop_table_sbe_errlog_;
  PipeBlockRegQueueDropTableMbeErrlog qac_reg_queue_drop_table_mbe_errlog_;
  PipeBlockRegPortDropCntTableSbeErrlog qac_reg_port_drop_cnt_table_sbe_errlog_;
  PipeBlockRegPortDropCntTableMbeErrlog qac_reg_port_drop_cnt_table_mbe_errlog_;
  PipeBlockRegDebugBusCtrl qac_reg_debug_bus_ctrl_;
  QacIndirQueueResumeMemAddr qac_reg_qac_indir_queue_resume_mem_addr_;
  QacIndirQueueResumeMemData qac_reg_qac_indir_queue_resume_mem_data_data_;
  std::array< QueueDropState, 18 > qac_reg_queue_drop_state_;
  std::array< QueueDropState, 18 > qac_reg_queue_drop_yel_state_;
  std::array< QueueDropState, 18 > qac_reg_queue_drop_red_state_;
  std::array< PortDropState, 72 > qac_reg_port_drop_state_;
  PipeBlockRegIntr qac_reg_intr_;
  PipeBlockRegIntrStatus qac_reg_intr_status_;
  PipeBlockRegIntrEnable0 qac_reg_intr_enable0_;
  PipeBlockRegIntrEnable1 qac_reg_intr_enable1_;
  PipeBlockRegIntrInject qac_reg_intr_inject_;
  PipeBlockRegIntrFreezeEnable qac_reg_intr_freeze_enable_;
private:
  static int StartOffset(
      int index_tm_qac_pipe_rspec
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x80000; // to get to tm_qac_top
    assert(index_tm_qac_pipe_rspec < 4);
    offset += index_tm_qac_pipe_rspec * 0x8000; // tm_qac_pipe_rspec[]
    return offset;
  }

};





  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_PIPE_BLOCK_REG_H__
