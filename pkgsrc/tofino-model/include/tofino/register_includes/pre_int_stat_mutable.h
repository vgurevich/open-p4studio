/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PRE_INT_STAT_MUTABLE_H__
#define __REGISTER_INCLUDES_PRE_INT_STAT_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class PreIntStatMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PreIntStatMutable(
      int chipNumber, int index_tm_pre_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_pre_pipe_rspec), 4, true, write_callback, read_callback, std::string("PreIntStatMutable")+":"+boost::lexical_cast<std::string>(index_tm_pre_pipe_rspec))
    {
    }
  PreIntStatMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PreIntStatMutable")
    {
    }
public:





  uint8_t fifo_ready() { return fifo_ready_; }
  void fifo_ready(const uint8_t &v) { fifo_ready_=v; }






  uint8_t rdm_change_done() { return rdm_change_done_; }
  void rdm_change_done(const uint8_t &v) { rdm_change_done_=v; }





  uint8_t table0_ph_count_zero() { return table0_ph_count_zero_; }
  void table0_ph_count_zero(const uint8_t &v) { table0_ph_count_zero_=v; }





  uint8_t table1_ph_count_zero() { return table1_ph_count_zero_; }
  void table1_ph_count_zero(const uint8_t &v) { table1_ph_count_zero_=v; }





  uint8_t max_l1_nodes() { return max_l1_nodes_; }
  void max_l1_nodes(const uint8_t &v) { max_l1_nodes_=v; }





  uint8_t max_l2_nodes() { return max_l2_nodes_; }
  void max_l2_nodes(const uint8_t &v) { max_l2_nodes_=v; }





  uint8_t illegal_l1_node() { return illegal_l1_node_; }
  void illegal_l1_node(const uint8_t &v) { illegal_l1_node_=v; }





  uint8_t illegal_l2_node() { return illegal_l2_node_; }
  void illegal_l2_node(const uint8_t &v) { illegal_l2_node_=v; }





  uint8_t fifo0_overflow() { return fifo0_overflow_; }
  void fifo0_overflow(const uint8_t &v) { fifo0_overflow_=v; }





  uint8_t fifo1_overflow() { return fifo1_overflow_; }
  void fifo1_overflow(const uint8_t &v) { fifo1_overflow_=v; }





  uint8_t fifo2_overflow() { return fifo2_overflow_; }
  void fifo2_overflow(const uint8_t &v) { fifo2_overflow_=v; }





  uint8_t fifo3_overflow() { return fifo3_overflow_; }
  void fifo3_overflow(const uint8_t &v) { fifo3_overflow_=v; }





  uint8_t rdm_addr_hit() { return rdm_addr_hit_; }
  void rdm_addr_hit(const uint8_t &v) { rdm_addr_hit_=v; }





  uint8_t rdm_addr_err() { return rdm_addr_err_; }
  void rdm_addr_err(const uint8_t &v) { rdm_addr_err_=v; }





  uint8_t fifo_mbe() { return fifo_mbe_; }
  void fifo_mbe(const uint8_t &v) { fifo_mbe_=v; }





  uint8_t mit_mbe() { return mit_mbe_; }
  void mit_mbe(const uint8_t &v) { mit_mbe_=v; }





  uint8_t lit0_bm_mbe() { return lit0_bm_mbe_; }
  void lit0_bm_mbe(const uint8_t &v) { lit0_bm_mbe_=v; }





  uint8_t lit1_bm_mbe() { return lit1_bm_mbe_; }
  void lit1_bm_mbe(const uint8_t &v) { lit1_bm_mbe_=v; }





  uint8_t lit0_np_mbe() { return lit0_np_mbe_; }
  void lit0_np_mbe(const uint8_t &v) { lit0_np_mbe_=v; }





  uint8_t lit1_np_mbe() { return lit1_np_mbe_; }
  void lit1_np_mbe(const uint8_t &v) { lit1_np_mbe_=v; }





  uint8_t pmt0_mbe() { return pmt0_mbe_; }
  void pmt0_mbe(const uint8_t &v) { pmt0_mbe_=v; }





  uint8_t pmt1_mbe() { return pmt1_mbe_; }
  void pmt1_mbe(const uint8_t &v) { pmt1_mbe_=v; }





  uint8_t rdm_mbe() { return rdm_mbe_; }
  void rdm_mbe(const uint8_t &v) { rdm_mbe_=v; }





  uint8_t fifo_sbe() { return fifo_sbe_; }
  void fifo_sbe(const uint8_t &v) { fifo_sbe_=v; }





  uint8_t mit_sbe() { return mit_sbe_; }
  void mit_sbe(const uint8_t &v) { mit_sbe_=v; }





  uint8_t lit0_bm_sbe() { return lit0_bm_sbe_; }
  void lit0_bm_sbe(const uint8_t &v) { lit0_bm_sbe_=v; }





  uint8_t lit1_bm_sbe() { return lit1_bm_sbe_; }
  void lit1_bm_sbe(const uint8_t &v) { lit1_bm_sbe_=v; }





  uint8_t lit0_np_sbe() { return lit0_np_sbe_; }
  void lit0_np_sbe(const uint8_t &v) { lit0_np_sbe_=v; }





  uint8_t lit1_np_sbe() { return lit1_np_sbe_; }
  void lit1_np_sbe(const uint8_t &v) { lit1_np_sbe_=v; }





  uint8_t pmt0_sbe() { return pmt0_sbe_; }
  void pmt0_sbe(const uint8_t &v) { pmt0_sbe_=v; }





  uint8_t pmt1_sbe() { return pmt1_sbe_; }
  void pmt1_sbe(const uint8_t &v) { pmt1_sbe_=v; }





  uint8_t rdm_sbe() { return rdm_sbe_; }
  void rdm_sbe(const uint8_t &v) { rdm_sbe_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (fifo_ready_ & 0x1);
    *data |= ((rdm_change_done_ & 0x1) << 1);
    *data |= ((table0_ph_count_zero_ & 0x1) << 2);
    *data |= ((table1_ph_count_zero_ & 0x1) << 3);
    *data |= ((max_l1_nodes_ & 0x1) << 4);
    *data |= ((max_l2_nodes_ & 0x1) << 5);
    *data |= ((illegal_l1_node_ & 0x1) << 6);
    *data |= ((illegal_l2_node_ & 0x1) << 7);
    *data |= ((fifo0_overflow_ & 0x1) << 8);
    *data |= ((fifo1_overflow_ & 0x1) << 9);
    *data |= ((fifo2_overflow_ & 0x1) << 10);
    *data |= ((fifo3_overflow_ & 0x1) << 11);
    *data |= ((rdm_addr_hit_ & 0x1) << 12);
    *data |= ((rdm_addr_err_ & 0x1) << 13);
    *data |= ((fifo_mbe_ & 0x1) << 14);
    *data |= ((mit_mbe_ & 0x1) << 15);
    *data |= ((lit0_bm_mbe_ & 0x1) << 16);
    *data |= ((lit1_bm_mbe_ & 0x1) << 17);
    *data |= ((lit0_np_mbe_ & 0x1) << 18);
    *data |= ((lit1_np_mbe_ & 0x1) << 19);
    *data |= ((pmt0_mbe_ & 0x1) << 20);
    *data |= ((pmt1_mbe_ & 0x1) << 21);
    *data |= ((rdm_mbe_ & 0x1) << 22);
    *data |= ((fifo_sbe_ & 0x1) << 23);
    *data |= ((mit_sbe_ & 0x1) << 24);
    *data |= ((lit0_bm_sbe_ & 0x1) << 25);
    *data |= ((lit1_bm_sbe_ & 0x1) << 26);
    *data |= ((lit0_np_sbe_ & 0x1) << 27);
    *data |= ((lit1_np_sbe_ & 0x1) << 28);
    *data |= ((pmt0_sbe_ & 0x1) << 29);
    *data |= ((pmt1_sbe_ & 0x1) << 30);
    *data |= ((rdm_sbe_ & 0x1) << 31);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    fifo_ready_ &= ~(data & 0x1);
    rdm_change_done_ &= ~((data >> 1) & 0x1);
    table0_ph_count_zero_ &= ~((data >> 2) & 0x1);
    table1_ph_count_zero_ &= ~((data >> 3) & 0x1);
    max_l1_nodes_ &= ~((data >> 4) & 0x1);
    max_l2_nodes_ &= ~((data >> 5) & 0x1);
    illegal_l1_node_ &= ~((data >> 6) & 0x1);
    illegal_l2_node_ &= ~((data >> 7) & 0x1);
    fifo0_overflow_ &= ~((data >> 8) & 0x1);
    fifo1_overflow_ &= ~((data >> 9) & 0x1);
    fifo2_overflow_ &= ~((data >> 10) & 0x1);
    fifo3_overflow_ &= ~((data >> 11) & 0x1);
    rdm_addr_hit_ &= ~((data >> 12) & 0x1);
    rdm_addr_err_ &= ~((data >> 13) & 0x1);
    fifo_mbe_ &= ~((data >> 14) & 0x1);
    mit_mbe_ &= ~((data >> 15) & 0x1);
    lit0_bm_mbe_ &= ~((data >> 16) & 0x1);
    lit1_bm_mbe_ &= ~((data >> 17) & 0x1);
    lit0_np_mbe_ &= ~((data >> 18) & 0x1);
    lit1_np_mbe_ &= ~((data >> 19) & 0x1);
    pmt0_mbe_ &= ~((data >> 20) & 0x1);
    pmt1_mbe_ &= ~((data >> 21) & 0x1);
    rdm_mbe_ &= ~((data >> 22) & 0x1);
    fifo_sbe_ &= ~((data >> 23) & 0x1);
    mit_sbe_ &= ~((data >> 24) & 0x1);
    lit0_bm_sbe_ &= ~((data >> 25) & 0x1);
    lit1_bm_sbe_ &= ~((data >> 26) & 0x1);
    lit0_np_sbe_ &= ~((data >> 27) & 0x1);
    lit1_np_sbe_ &= ~((data >> 28) & 0x1);
    pmt0_sbe_ &= ~((data >> 29) & 0x1);
    pmt1_sbe_ &= ~((data >> 30) & 0x1);
    rdm_sbe_ &= ~((data >> 31) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    fifo_ready_ = 0x0;
    rdm_change_done_ = 0x0;
    table0_ph_count_zero_ = 0x0;
    table1_ph_count_zero_ = 0x0;
    max_l1_nodes_ = 0x0;
    max_l2_nodes_ = 0x0;
    illegal_l1_node_ = 0x0;
    illegal_l2_node_ = 0x0;
    fifo0_overflow_ = 0x0;
    fifo1_overflow_ = 0x0;
    fifo2_overflow_ = 0x0;
    fifo3_overflow_ = 0x0;
    rdm_addr_hit_ = 0x0;
    rdm_addr_err_ = 0x0;
    fifo_mbe_ = 0x0;
    mit_mbe_ = 0x0;
    lit0_bm_mbe_ = 0x0;
    lit1_bm_mbe_ = 0x0;
    lit0_np_mbe_ = 0x0;
    lit1_np_mbe_ = 0x0;
    pmt0_mbe_ = 0x0;
    pmt1_mbe_ = 0x0;
    rdm_mbe_ = 0x0;
    fifo_sbe_ = 0x0;
    mit_sbe_ = 0x0;
    lit0_bm_sbe_ = 0x0;
    lit1_bm_sbe_ = 0x0;
    lit0_np_sbe_ = 0x0;
    lit1_np_sbe_ = 0x0;
    pmt0_sbe_ = 0x0;
    pmt1_sbe_ = 0x0;
    rdm_sbe_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PreIntStatMutable") + ":\n";
    r += indent_string + "  " + std::string("fifo_ready") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_ready_) ) + "\n";
    all_zeros &= (0 == fifo_ready_);
    r += indent_string + "  " + std::string("rdm_change_done") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rdm_change_done_) ) + "\n";
    all_zeros &= (0 == rdm_change_done_);
    r += indent_string + "  " + std::string("table0_ph_count_zero") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(table0_ph_count_zero_) ) + "\n";
    all_zeros &= (0 == table0_ph_count_zero_);
    r += indent_string + "  " + std::string("table1_ph_count_zero") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(table1_ph_count_zero_) ) + "\n";
    all_zeros &= (0 == table1_ph_count_zero_);
    r += indent_string + "  " + std::string("max_l1_nodes") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(max_l1_nodes_) ) + "\n";
    all_zeros &= (0 == max_l1_nodes_);
    r += indent_string + "  " + std::string("max_l2_nodes") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(max_l2_nodes_) ) + "\n";
    all_zeros &= (0 == max_l2_nodes_);
    r += indent_string + "  " + std::string("illegal_l1_node") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(illegal_l1_node_) ) + "\n";
    all_zeros &= (0 == illegal_l1_node_);
    r += indent_string + "  " + std::string("illegal_l2_node") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(illegal_l2_node_) ) + "\n";
    all_zeros &= (0 == illegal_l2_node_);
    r += indent_string + "  " + std::string("fifo0_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo0_overflow_) ) + "\n";
    all_zeros &= (0 == fifo0_overflow_);
    r += indent_string + "  " + std::string("fifo1_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo1_overflow_) ) + "\n";
    all_zeros &= (0 == fifo1_overflow_);
    r += indent_string + "  " + std::string("fifo2_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo2_overflow_) ) + "\n";
    all_zeros &= (0 == fifo2_overflow_);
    r += indent_string + "  " + std::string("fifo3_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo3_overflow_) ) + "\n";
    all_zeros &= (0 == fifo3_overflow_);
    r += indent_string + "  " + std::string("rdm_addr_hit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rdm_addr_hit_) ) + "\n";
    all_zeros &= (0 == rdm_addr_hit_);
    r += indent_string + "  " + std::string("rdm_addr_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rdm_addr_err_) ) + "\n";
    all_zeros &= (0 == rdm_addr_err_);
    r += indent_string + "  " + std::string("fifo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_mbe_) ) + "\n";
    all_zeros &= (0 == fifo_mbe_);
    r += indent_string + "  " + std::string("mit_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mit_mbe_) ) + "\n";
    all_zeros &= (0 == mit_mbe_);
    r += indent_string + "  " + std::string("lit0_bm_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_bm_mbe_) ) + "\n";
    all_zeros &= (0 == lit0_bm_mbe_);
    r += indent_string + "  " + std::string("lit1_bm_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_bm_mbe_) ) + "\n";
    all_zeros &= (0 == lit1_bm_mbe_);
    r += indent_string + "  " + std::string("lit0_np_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_np_mbe_) ) + "\n";
    all_zeros &= (0 == lit0_np_mbe_);
    r += indent_string + "  " + std::string("lit1_np_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_np_mbe_) ) + "\n";
    all_zeros &= (0 == lit1_np_mbe_);
    r += indent_string + "  " + std::string("pmt0_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt0_mbe_) ) + "\n";
    all_zeros &= (0 == pmt0_mbe_);
    r += indent_string + "  " + std::string("pmt1_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt1_mbe_) ) + "\n";
    all_zeros &= (0 == pmt1_mbe_);
    r += indent_string + "  " + std::string("rdm_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rdm_mbe_) ) + "\n";
    all_zeros &= (0 == rdm_mbe_);
    r += indent_string + "  " + std::string("fifo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_sbe_) ) + "\n";
    all_zeros &= (0 == fifo_sbe_);
    r += indent_string + "  " + std::string("mit_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mit_sbe_) ) + "\n";
    all_zeros &= (0 == mit_sbe_);
    r += indent_string + "  " + std::string("lit0_bm_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_bm_sbe_) ) + "\n";
    all_zeros &= (0 == lit0_bm_sbe_);
    r += indent_string + "  " + std::string("lit1_bm_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_bm_sbe_) ) + "\n";
    all_zeros &= (0 == lit1_bm_sbe_);
    r += indent_string + "  " + std::string("lit0_np_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_np_sbe_) ) + "\n";
    all_zeros &= (0 == lit0_np_sbe_);
    r += indent_string + "  " + std::string("lit1_np_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_np_sbe_) ) + "\n";
    all_zeros &= (0 == lit1_np_sbe_);
    r += indent_string + "  " + std::string("pmt0_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt0_sbe_) ) + "\n";
    all_zeros &= (0 == pmt0_sbe_);
    r += indent_string + "  " + std::string("pmt1_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt1_sbe_) ) + "\n";
    all_zeros &= (0 == pmt1_sbe_);
    r += indent_string + "  " + std::string("rdm_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rdm_sbe_) ) + "\n";
    all_zeros &= (0 == rdm_sbe_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PreIntStatMutable") + ":\n";
    r += indent_string + "  " + std::string("fifo_ready") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_ready_) ) + "\n";
    all_zeros &= (0 == fifo_ready_);
    r += indent_string + "  " + std::string("rdm_change_done") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rdm_change_done_) ) + "\n";
    all_zeros &= (0 == rdm_change_done_);
    r += indent_string + "  " + std::string("table0_ph_count_zero") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(table0_ph_count_zero_) ) + "\n";
    all_zeros &= (0 == table0_ph_count_zero_);
    r += indent_string + "  " + std::string("table1_ph_count_zero") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(table1_ph_count_zero_) ) + "\n";
    all_zeros &= (0 == table1_ph_count_zero_);
    r += indent_string + "  " + std::string("max_l1_nodes") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(max_l1_nodes_) ) + "\n";
    all_zeros &= (0 == max_l1_nodes_);
    r += indent_string + "  " + std::string("max_l2_nodes") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(max_l2_nodes_) ) + "\n";
    all_zeros &= (0 == max_l2_nodes_);
    r += indent_string + "  " + std::string("illegal_l1_node") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(illegal_l1_node_) ) + "\n";
    all_zeros &= (0 == illegal_l1_node_);
    r += indent_string + "  " + std::string("illegal_l2_node") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(illegal_l2_node_) ) + "\n";
    all_zeros &= (0 == illegal_l2_node_);
    r += indent_string + "  " + std::string("fifo0_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo0_overflow_) ) + "\n";
    all_zeros &= (0 == fifo0_overflow_);
    r += indent_string + "  " + std::string("fifo1_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo1_overflow_) ) + "\n";
    all_zeros &= (0 == fifo1_overflow_);
    r += indent_string + "  " + std::string("fifo2_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo2_overflow_) ) + "\n";
    all_zeros &= (0 == fifo2_overflow_);
    r += indent_string + "  " + std::string("fifo3_overflow") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo3_overflow_) ) + "\n";
    all_zeros &= (0 == fifo3_overflow_);
    r += indent_string + "  " + std::string("rdm_addr_hit") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rdm_addr_hit_) ) + "\n";
    all_zeros &= (0 == rdm_addr_hit_);
    r += indent_string + "  " + std::string("rdm_addr_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rdm_addr_err_) ) + "\n";
    all_zeros &= (0 == rdm_addr_err_);
    r += indent_string + "  " + std::string("fifo_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_mbe_) ) + "\n";
    all_zeros &= (0 == fifo_mbe_);
    r += indent_string + "  " + std::string("mit_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mit_mbe_) ) + "\n";
    all_zeros &= (0 == mit_mbe_);
    r += indent_string + "  " + std::string("lit0_bm_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_bm_mbe_) ) + "\n";
    all_zeros &= (0 == lit0_bm_mbe_);
    r += indent_string + "  " + std::string("lit1_bm_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_bm_mbe_) ) + "\n";
    all_zeros &= (0 == lit1_bm_mbe_);
    r += indent_string + "  " + std::string("lit0_np_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_np_mbe_) ) + "\n";
    all_zeros &= (0 == lit0_np_mbe_);
    r += indent_string + "  " + std::string("lit1_np_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_np_mbe_) ) + "\n";
    all_zeros &= (0 == lit1_np_mbe_);
    r += indent_string + "  " + std::string("pmt0_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt0_mbe_) ) + "\n";
    all_zeros &= (0 == pmt0_mbe_);
    r += indent_string + "  " + std::string("pmt1_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt1_mbe_) ) + "\n";
    all_zeros &= (0 == pmt1_mbe_);
    r += indent_string + "  " + std::string("rdm_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rdm_mbe_) ) + "\n";
    all_zeros &= (0 == rdm_mbe_);
    r += indent_string + "  " + std::string("fifo_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(fifo_sbe_) ) + "\n";
    all_zeros &= (0 == fifo_sbe_);
    r += indent_string + "  " + std::string("mit_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mit_sbe_) ) + "\n";
    all_zeros &= (0 == mit_sbe_);
    r += indent_string + "  " + std::string("lit0_bm_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_bm_sbe_) ) + "\n";
    all_zeros &= (0 == lit0_bm_sbe_);
    r += indent_string + "  " + std::string("lit1_bm_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_bm_sbe_) ) + "\n";
    all_zeros &= (0 == lit1_bm_sbe_);
    r += indent_string + "  " + std::string("lit0_np_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit0_np_sbe_) ) + "\n";
    all_zeros &= (0 == lit0_np_sbe_);
    r += indent_string + "  " + std::string("lit1_np_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lit1_np_sbe_) ) + "\n";
    all_zeros &= (0 == lit1_np_sbe_);
    r += indent_string + "  " + std::string("pmt0_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt0_sbe_) ) + "\n";
    all_zeros &= (0 == pmt0_sbe_);
    r += indent_string + "  " + std::string("pmt1_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pmt1_sbe_) ) + "\n";
    all_zeros &= (0 == pmt1_sbe_);
    r += indent_string + "  " + std::string("rdm_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rdm_sbe_) ) + "\n";
    all_zeros &= (0 == rdm_sbe_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t fifo_ready_;
  uint8_t rdm_change_done_;
  uint8_t table0_ph_count_zero_;
  uint8_t table1_ph_count_zero_;
  uint8_t max_l1_nodes_;
  uint8_t max_l2_nodes_;
  uint8_t illegal_l1_node_;
  uint8_t illegal_l2_node_;
  uint8_t fifo0_overflow_;
  uint8_t fifo1_overflow_;
  uint8_t fifo2_overflow_;
  uint8_t fifo3_overflow_;
  uint8_t rdm_addr_hit_;
  uint8_t rdm_addr_err_;
  uint8_t fifo_mbe_;
  uint8_t mit_mbe_;
  uint8_t lit0_bm_mbe_;
  uint8_t lit1_bm_mbe_;
  uint8_t lit0_np_mbe_;
  uint8_t lit1_np_mbe_;
  uint8_t pmt0_mbe_;
  uint8_t pmt1_mbe_;
  uint8_t rdm_mbe_;
  uint8_t fifo_sbe_;
  uint8_t mit_sbe_;
  uint8_t lit0_bm_sbe_;
  uint8_t lit1_bm_sbe_;
  uint8_t lit0_np_sbe_;
  uint8_t lit1_np_sbe_;
  uint8_t pmt0_sbe_;
  uint8_t pmt1_sbe_;
  uint8_t rdm_sbe_;
private:
  static int StartOffset(
      int index_tm_pre_pipe_rspec
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x200000; // to get to tm_pre_top
    assert(index_tm_pre_pipe_rspec < 4);
    offset += index_tm_pre_pipe_rspec * 0x8000; // tm_pre_pipe_rspec[]
    offset += 0x50; // to get to int_stat
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_PRE_INT_STAT_MUTABLE_H__
