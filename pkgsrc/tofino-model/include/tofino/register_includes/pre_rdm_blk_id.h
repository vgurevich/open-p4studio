/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PRE_RDM_BLK_ID_H__
#define __REGISTER_INCLUDES_PRE_RDM_BLK_ID_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class PreRdmBlkId : public model_core::RegisterBlock<RegisterCallback> {
public:
  PreRdmBlkId(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 52, false, write_callback, read_callback, std::string("PreRdmBlkId"))
    {
    }
  PreRdmBlkId(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PreRdmBlkId")
    {
    }
public:







  uint8_t &id(int j0) { return id_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (id_[0] & 0x3);
      *data |= ((id_[1] & 0x3) << 2);
      *data |= ((id_[2] & 0x3) << 4);
      *data |= ((id_[3] & 0x3) << 6);
      *data |= ((id_[4] & 0x3) << 8);
      *data |= ((id_[5] & 0x3) << 10);
      *data |= ((id_[6] & 0x3) << 12);
      *data |= ((id_[7] & 0x3) << 14);
      *data |= ((id_[8] & 0x3) << 16);
      *data |= ((id_[9] & 0x3) << 18);
      *data |= ((id_[10] & 0x3) << 20);
      *data |= ((id_[11] & 0x3) << 22);
      *data |= ((id_[12] & 0x3) << 24);
      *data |= ((id_[13] & 0x3) << 26);
      *data |= ((id_[14] & 0x3) << 28);
      *data |= ((id_[15] & 0x3) << 30);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (id_[16] & 0x3);
      *data |= ((id_[17] & 0x3) << 2);
      *data |= ((id_[18] & 0x3) << 4);
      *data |= ((id_[19] & 0x3) << 6);
      *data |= ((id_[20] & 0x3) << 8);
      *data |= ((id_[21] & 0x3) << 10);
      *data |= ((id_[22] & 0x3) << 12);
      *data |= ((id_[23] & 0x3) << 14);
      *data |= ((id_[24] & 0x3) << 16);
      *data |= ((id_[25] & 0x3) << 18);
      *data |= ((id_[26] & 0x3) << 20);
      *data |= ((id_[27] & 0x3) << 22);
      *data |= ((id_[28] & 0x3) << 24);
      *data |= ((id_[29] & 0x3) << 26);
      *data |= ((id_[30] & 0x3) << 28);
      *data |= ((id_[31] & 0x3) << 30);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = (id_[32] & 0x3);
      *data |= ((id_[33] & 0x3) << 2);
      *data |= ((id_[34] & 0x3) << 4);
      *data |= ((id_[35] & 0x3) << 6);
      *data |= ((id_[36] & 0x3) << 8);
      *data |= ((id_[37] & 0x3) << 10);
      *data |= ((id_[38] & 0x3) << 12);
      *data |= ((id_[39] & 0x3) << 14);
      *data |= ((id_[40] & 0x3) << 16);
      *data |= ((id_[41] & 0x3) << 18);
      *data |= ((id_[42] & 0x3) << 20);
      *data |= ((id_[43] & 0x3) << 22);
      *data |= ((id_[44] & 0x3) << 24);
      *data |= ((id_[45] & 0x3) << 26);
      *data |= ((id_[46] & 0x3) << 28);
      *data |= ((id_[47] & 0x3) << 30);
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = (id_[48] & 0x3);
      *data |= ((id_[49] & 0x3) << 2);
      *data |= ((id_[50] & 0x3) << 4);
      *data |= ((id_[51] & 0x3) << 6);
      *data |= ((id_[52] & 0x3) << 8);
      *data |= ((id_[53] & 0x3) << 10);
      *data |= ((id_[54] & 0x3) << 12);
      *data |= ((id_[55] & 0x3) << 14);
      *data |= ((id_[56] & 0x3) << 16);
      *data |= ((id_[57] & 0x3) << 18);
      *data |= ((id_[58] & 0x3) << 20);
      *data |= ((id_[59] & 0x3) << 22);
      *data |= ((id_[60] & 0x3) << 24);
      *data |= ((id_[61] & 0x3) << 26);
      *data |= ((id_[62] & 0x3) << 28);
      *data |= ((id_[63] & 0x3) << 30);
    }
    else if (offset >= 0x10 && offset < 0x14) {
      if (read_callback_) read_callback_();
      *data = (id_[64] & 0x3);
      *data |= ((id_[65] & 0x3) << 2);
      *data |= ((id_[66] & 0x3) << 4);
      *data |= ((id_[67] & 0x3) << 6);
      *data |= ((id_[68] & 0x3) << 8);
      *data |= ((id_[69] & 0x3) << 10);
      *data |= ((id_[70] & 0x3) << 12);
      *data |= ((id_[71] & 0x3) << 14);
      *data |= ((id_[72] & 0x3) << 16);
      *data |= ((id_[73] & 0x3) << 18);
      *data |= ((id_[74] & 0x3) << 20);
      *data |= ((id_[75] & 0x3) << 22);
      *data |= ((id_[76] & 0x3) << 24);
      *data |= ((id_[77] & 0x3) << 26);
      *data |= ((id_[78] & 0x3) << 28);
      *data |= ((id_[79] & 0x3) << 30);
    }
    else if (offset >= 0x14 && offset < 0x18) {
      if (read_callback_) read_callback_();
      *data = (id_[80] & 0x3);
      *data |= ((id_[81] & 0x3) << 2);
      *data |= ((id_[82] & 0x3) << 4);
      *data |= ((id_[83] & 0x3) << 6);
      *data |= ((id_[84] & 0x3) << 8);
      *data |= ((id_[85] & 0x3) << 10);
      *data |= ((id_[86] & 0x3) << 12);
      *data |= ((id_[87] & 0x3) << 14);
      *data |= ((id_[88] & 0x3) << 16);
      *data |= ((id_[89] & 0x3) << 18);
      *data |= ((id_[90] & 0x3) << 20);
      *data |= ((id_[91] & 0x3) << 22);
      *data |= ((id_[92] & 0x3) << 24);
      *data |= ((id_[93] & 0x3) << 26);
      *data |= ((id_[94] & 0x3) << 28);
      *data |= ((id_[95] & 0x3) << 30);
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      if (read_callback_) read_callback_();
      *data = (id_[96] & 0x3);
      *data |= ((id_[97] & 0x3) << 2);
      *data |= ((id_[98] & 0x3) << 4);
      *data |= ((id_[99] & 0x3) << 6);
      *data |= ((id_[100] & 0x3) << 8);
      *data |= ((id_[101] & 0x3) << 10);
      *data |= ((id_[102] & 0x3) << 12);
      *data |= ((id_[103] & 0x3) << 14);
      *data |= ((id_[104] & 0x3) << 16);
      *data |= ((id_[105] & 0x3) << 18);
      *data |= ((id_[106] & 0x3) << 20);
      *data |= ((id_[107] & 0x3) << 22);
      *data |= ((id_[108] & 0x3) << 24);
      *data |= ((id_[109] & 0x3) << 26);
      *data |= ((id_[110] & 0x3) << 28);
      *data |= ((id_[111] & 0x3) << 30);
    }
    else if (offset >= 0x1c && offset < 0x20) {
      if (read_callback_) read_callback_();
      *data = (id_[112] & 0x3);
      *data |= ((id_[113] & 0x3) << 2);
      *data |= ((id_[114] & 0x3) << 4);
      *data |= ((id_[115] & 0x3) << 6);
      *data |= ((id_[116] & 0x3) << 8);
      *data |= ((id_[117] & 0x3) << 10);
      *data |= ((id_[118] & 0x3) << 12);
      *data |= ((id_[119] & 0x3) << 14);
      *data |= ((id_[120] & 0x3) << 16);
      *data |= ((id_[121] & 0x3) << 18);
      *data |= ((id_[122] & 0x3) << 20);
      *data |= ((id_[123] & 0x3) << 22);
      *data |= ((id_[124] & 0x3) << 24);
      *data |= ((id_[125] & 0x3) << 26);
      *data |= ((id_[126] & 0x3) << 28);
      *data |= ((id_[127] & 0x3) << 30);
    }
    else if (offset >= 0x20 && offset < 0x24) {
      if (read_callback_) read_callback_();
      *data = (id_[128] & 0x3);
      *data |= ((id_[129] & 0x3) << 2);
      *data |= ((id_[130] & 0x3) << 4);
      *data |= ((id_[131] & 0x3) << 6);
      *data |= ((id_[132] & 0x3) << 8);
      *data |= ((id_[133] & 0x3) << 10);
      *data |= ((id_[134] & 0x3) << 12);
      *data |= ((id_[135] & 0x3) << 14);
      *data |= ((id_[136] & 0x3) << 16);
      *data |= ((id_[137] & 0x3) << 18);
      *data |= ((id_[138] & 0x3) << 20);
      *data |= ((id_[139] & 0x3) << 22);
      *data |= ((id_[140] & 0x3) << 24);
      *data |= ((id_[141] & 0x3) << 26);
      *data |= ((id_[142] & 0x3) << 28);
      *data |= ((id_[143] & 0x3) << 30);
    }
    else if (offset >= 0x24 && offset < 0x28) {
      if (read_callback_) read_callback_();
      *data = (id_[144] & 0x3);
      *data |= ((id_[145] & 0x3) << 2);
      *data |= ((id_[146] & 0x3) << 4);
      *data |= ((id_[147] & 0x3) << 6);
      *data |= ((id_[148] & 0x3) << 8);
      *data |= ((id_[149] & 0x3) << 10);
      *data |= ((id_[150] & 0x3) << 12);
      *data |= ((id_[151] & 0x3) << 14);
      *data |= ((id_[152] & 0x3) << 16);
      *data |= ((id_[153] & 0x3) << 18);
      *data |= ((id_[154] & 0x3) << 20);
      *data |= ((id_[155] & 0x3) << 22);
      *data |= ((id_[156] & 0x3) << 24);
      *data |= ((id_[157] & 0x3) << 26);
      *data |= ((id_[158] & 0x3) << 28);
      *data |= ((id_[159] & 0x3) << 30);
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      if (read_callback_) read_callback_();
      *data = (id_[160] & 0x3);
      *data |= ((id_[161] & 0x3) << 2);
      *data |= ((id_[162] & 0x3) << 4);
      *data |= ((id_[163] & 0x3) << 6);
      *data |= ((id_[164] & 0x3) << 8);
      *data |= ((id_[165] & 0x3) << 10);
      *data |= ((id_[166] & 0x3) << 12);
      *data |= ((id_[167] & 0x3) << 14);
      *data |= ((id_[168] & 0x3) << 16);
      *data |= ((id_[169] & 0x3) << 18);
      *data |= ((id_[170] & 0x3) << 20);
      *data |= ((id_[171] & 0x3) << 22);
      *data |= ((id_[172] & 0x3) << 24);
      *data |= ((id_[173] & 0x3) << 26);
      *data |= ((id_[174] & 0x3) << 28);
      *data |= ((id_[175] & 0x3) << 30);
    }
    else if (offset >= 0x2c && offset < 0x30) {
      if (read_callback_) read_callback_();
      *data = (id_[176] & 0x3);
      *data |= ((id_[177] & 0x3) << 2);
      *data |= ((id_[178] & 0x3) << 4);
      *data |= ((id_[179] & 0x3) << 6);
      *data |= ((id_[180] & 0x3) << 8);
      *data |= ((id_[181] & 0x3) << 10);
      *data |= ((id_[182] & 0x3) << 12);
      *data |= ((id_[183] & 0x3) << 14);
      *data |= ((id_[184] & 0x3) << 16);
      *data |= ((id_[185] & 0x3) << 18);
      *data |= ((id_[186] & 0x3) << 20);
      *data |= ((id_[187] & 0x3) << 22);
      *data |= ((id_[188] & 0x3) << 24);
      *data |= ((id_[189] & 0x3) << 26);
      *data |= ((id_[190] & 0x3) << 28);
      *data |= ((id_[191] & 0x3) << 30);
    }
    else if (offset >= 0x30 && offset < 0x34) {
      if (read_callback_) read_callback_();
      *data = (id_[192] & 0x3);
      *data |= ((id_[193] & 0x3) << 2);
      *data |= ((id_[194] & 0x3) << 4);
      *data |= ((id_[195] & 0x3) << 6);
      *data |= ((id_[196] & 0x3) << 8);
      *data |= ((id_[197] & 0x3) << 10);
      *data |= ((id_[198] & 0x3) << 12);
      *data |= ((id_[199] & 0x3) << 14);
      *data |= ((id_[200] & 0x3) << 16);
      *data |= ((id_[201] & 0x3) << 18);
      *data |= ((id_[202] & 0x3) << 20);
      *data |= ((id_[203] & 0x3) << 22);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      id_[0] = (data & 0x3);
      id_[1] = ((data >> 2) & 0x3);
      id_[2] = ((data >> 4) & 0x3);
      id_[3] = ((data >> 6) & 0x3);
      id_[4] = ((data >> 8) & 0x3);
      id_[5] = ((data >> 10) & 0x3);
      id_[6] = ((data >> 12) & 0x3);
      id_[7] = ((data >> 14) & 0x3);
      id_[8] = ((data >> 16) & 0x3);
      id_[9] = ((data >> 18) & 0x3);
      id_[10] = ((data >> 20) & 0x3);
      id_[11] = ((data >> 22) & 0x3);
      id_[12] = ((data >> 24) & 0x3);
      id_[13] = ((data >> 26) & 0x3);
      id_[14] = ((data >> 28) & 0x3);
      id_[15] = ((data >> 30) & 0x3);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      id_[16] = (data & 0x3);
      id_[17] = ((data >> 2) & 0x3);
      id_[18] = ((data >> 4) & 0x3);
      id_[19] = ((data >> 6) & 0x3);
      id_[20] = ((data >> 8) & 0x3);
      id_[21] = ((data >> 10) & 0x3);
      id_[22] = ((data >> 12) & 0x3);
      id_[23] = ((data >> 14) & 0x3);
      id_[24] = ((data >> 16) & 0x3);
      id_[25] = ((data >> 18) & 0x3);
      id_[26] = ((data >> 20) & 0x3);
      id_[27] = ((data >> 22) & 0x3);
      id_[28] = ((data >> 24) & 0x3);
      id_[29] = ((data >> 26) & 0x3);
      id_[30] = ((data >> 28) & 0x3);
      id_[31] = ((data >> 30) & 0x3);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      id_[32] = (data & 0x3);
      id_[33] = ((data >> 2) & 0x3);
      id_[34] = ((data >> 4) & 0x3);
      id_[35] = ((data >> 6) & 0x3);
      id_[36] = ((data >> 8) & 0x3);
      id_[37] = ((data >> 10) & 0x3);
      id_[38] = ((data >> 12) & 0x3);
      id_[39] = ((data >> 14) & 0x3);
      id_[40] = ((data >> 16) & 0x3);
      id_[41] = ((data >> 18) & 0x3);
      id_[42] = ((data >> 20) & 0x3);
      id_[43] = ((data >> 22) & 0x3);
      id_[44] = ((data >> 24) & 0x3);
      id_[45] = ((data >> 26) & 0x3);
      id_[46] = ((data >> 28) & 0x3);
      id_[47] = ((data >> 30) & 0x3);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      id_[48] = (data & 0x3);
      id_[49] = ((data >> 2) & 0x3);
      id_[50] = ((data >> 4) & 0x3);
      id_[51] = ((data >> 6) & 0x3);
      id_[52] = ((data >> 8) & 0x3);
      id_[53] = ((data >> 10) & 0x3);
      id_[54] = ((data >> 12) & 0x3);
      id_[55] = ((data >> 14) & 0x3);
      id_[56] = ((data >> 16) & 0x3);
      id_[57] = ((data >> 18) & 0x3);
      id_[58] = ((data >> 20) & 0x3);
      id_[59] = ((data >> 22) & 0x3);
      id_[60] = ((data >> 24) & 0x3);
      id_[61] = ((data >> 26) & 0x3);
      id_[62] = ((data >> 28) & 0x3);
      id_[63] = ((data >> 30) & 0x3);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      id_[64] = (data & 0x3);
      id_[65] = ((data >> 2) & 0x3);
      id_[66] = ((data >> 4) & 0x3);
      id_[67] = ((data >> 6) & 0x3);
      id_[68] = ((data >> 8) & 0x3);
      id_[69] = ((data >> 10) & 0x3);
      id_[70] = ((data >> 12) & 0x3);
      id_[71] = ((data >> 14) & 0x3);
      id_[72] = ((data >> 16) & 0x3);
      id_[73] = ((data >> 18) & 0x3);
      id_[74] = ((data >> 20) & 0x3);
      id_[75] = ((data >> 22) & 0x3);
      id_[76] = ((data >> 24) & 0x3);
      id_[77] = ((data >> 26) & 0x3);
      id_[78] = ((data >> 28) & 0x3);
      id_[79] = ((data >> 30) & 0x3);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      id_[80] = (data & 0x3);
      id_[81] = ((data >> 2) & 0x3);
      id_[82] = ((data >> 4) & 0x3);
      id_[83] = ((data >> 6) & 0x3);
      id_[84] = ((data >> 8) & 0x3);
      id_[85] = ((data >> 10) & 0x3);
      id_[86] = ((data >> 12) & 0x3);
      id_[87] = ((data >> 14) & 0x3);
      id_[88] = ((data >> 16) & 0x3);
      id_[89] = ((data >> 18) & 0x3);
      id_[90] = ((data >> 20) & 0x3);
      id_[91] = ((data >> 22) & 0x3);
      id_[92] = ((data >> 24) & 0x3);
      id_[93] = ((data >> 26) & 0x3);
      id_[94] = ((data >> 28) & 0x3);
      id_[95] = ((data >> 30) & 0x3);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      id_[96] = (data & 0x3);
      id_[97] = ((data >> 2) & 0x3);
      id_[98] = ((data >> 4) & 0x3);
      id_[99] = ((data >> 6) & 0x3);
      id_[100] = ((data >> 8) & 0x3);
      id_[101] = ((data >> 10) & 0x3);
      id_[102] = ((data >> 12) & 0x3);
      id_[103] = ((data >> 14) & 0x3);
      id_[104] = ((data >> 16) & 0x3);
      id_[105] = ((data >> 18) & 0x3);
      id_[106] = ((data >> 20) & 0x3);
      id_[107] = ((data >> 22) & 0x3);
      id_[108] = ((data >> 24) & 0x3);
      id_[109] = ((data >> 26) & 0x3);
      id_[110] = ((data >> 28) & 0x3);
      id_[111] = ((data >> 30) & 0x3);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      id_[112] = (data & 0x3);
      id_[113] = ((data >> 2) & 0x3);
      id_[114] = ((data >> 4) & 0x3);
      id_[115] = ((data >> 6) & 0x3);
      id_[116] = ((data >> 8) & 0x3);
      id_[117] = ((data >> 10) & 0x3);
      id_[118] = ((data >> 12) & 0x3);
      id_[119] = ((data >> 14) & 0x3);
      id_[120] = ((data >> 16) & 0x3);
      id_[121] = ((data >> 18) & 0x3);
      id_[122] = ((data >> 20) & 0x3);
      id_[123] = ((data >> 22) & 0x3);
      id_[124] = ((data >> 24) & 0x3);
      id_[125] = ((data >> 26) & 0x3);
      id_[126] = ((data >> 28) & 0x3);
      id_[127] = ((data >> 30) & 0x3);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      id_[128] = (data & 0x3);
      id_[129] = ((data >> 2) & 0x3);
      id_[130] = ((data >> 4) & 0x3);
      id_[131] = ((data >> 6) & 0x3);
      id_[132] = ((data >> 8) & 0x3);
      id_[133] = ((data >> 10) & 0x3);
      id_[134] = ((data >> 12) & 0x3);
      id_[135] = ((data >> 14) & 0x3);
      id_[136] = ((data >> 16) & 0x3);
      id_[137] = ((data >> 18) & 0x3);
      id_[138] = ((data >> 20) & 0x3);
      id_[139] = ((data >> 22) & 0x3);
      id_[140] = ((data >> 24) & 0x3);
      id_[141] = ((data >> 26) & 0x3);
      id_[142] = ((data >> 28) & 0x3);
      id_[143] = ((data >> 30) & 0x3);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      id_[144] = (data & 0x3);
      id_[145] = ((data >> 2) & 0x3);
      id_[146] = ((data >> 4) & 0x3);
      id_[147] = ((data >> 6) & 0x3);
      id_[148] = ((data >> 8) & 0x3);
      id_[149] = ((data >> 10) & 0x3);
      id_[150] = ((data >> 12) & 0x3);
      id_[151] = ((data >> 14) & 0x3);
      id_[152] = ((data >> 16) & 0x3);
      id_[153] = ((data >> 18) & 0x3);
      id_[154] = ((data >> 20) & 0x3);
      id_[155] = ((data >> 22) & 0x3);
      id_[156] = ((data >> 24) & 0x3);
      id_[157] = ((data >> 26) & 0x3);
      id_[158] = ((data >> 28) & 0x3);
      id_[159] = ((data >> 30) & 0x3);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      id_[160] = (data & 0x3);
      id_[161] = ((data >> 2) & 0x3);
      id_[162] = ((data >> 4) & 0x3);
      id_[163] = ((data >> 6) & 0x3);
      id_[164] = ((data >> 8) & 0x3);
      id_[165] = ((data >> 10) & 0x3);
      id_[166] = ((data >> 12) & 0x3);
      id_[167] = ((data >> 14) & 0x3);
      id_[168] = ((data >> 16) & 0x3);
      id_[169] = ((data >> 18) & 0x3);
      id_[170] = ((data >> 20) & 0x3);
      id_[171] = ((data >> 22) & 0x3);
      id_[172] = ((data >> 24) & 0x3);
      id_[173] = ((data >> 26) & 0x3);
      id_[174] = ((data >> 28) & 0x3);
      id_[175] = ((data >> 30) & 0x3);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      id_[176] = (data & 0x3);
      id_[177] = ((data >> 2) & 0x3);
      id_[178] = ((data >> 4) & 0x3);
      id_[179] = ((data >> 6) & 0x3);
      id_[180] = ((data >> 8) & 0x3);
      id_[181] = ((data >> 10) & 0x3);
      id_[182] = ((data >> 12) & 0x3);
      id_[183] = ((data >> 14) & 0x3);
      id_[184] = ((data >> 16) & 0x3);
      id_[185] = ((data >> 18) & 0x3);
      id_[186] = ((data >> 20) & 0x3);
      id_[187] = ((data >> 22) & 0x3);
      id_[188] = ((data >> 24) & 0x3);
      id_[189] = ((data >> 26) & 0x3);
      id_[190] = ((data >> 28) & 0x3);
      id_[191] = ((data >> 30) & 0x3);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      id_[192] = (data & 0x3);
      id_[193] = ((data >> 2) & 0x3);
      id_[194] = ((data >> 4) & 0x3);
      id_[195] = ((data >> 6) & 0x3);
      id_[196] = ((data >> 8) & 0x3);
      id_[197] = ((data >> 10) & 0x3);
      id_[198] = ((data >> 12) & 0x3);
      id_[199] = ((data >> 14) & 0x3);
      id_[200] = ((data >> 16) & 0x3);
      id_[201] = ((data >> 18) & 0x3);
      id_[202] = ((data >> 20) & 0x3);
      id_[203] = ((data >> 22) & 0x3);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    id_[0] = 0x0;
    id_[1] = 0x0;
    id_[2] = 0x0;
    id_[3] = 0x0;
    id_[4] = 0x0;
    id_[5] = 0x0;
    id_[6] = 0x0;
    id_[7] = 0x0;
    id_[8] = 0x0;
    id_[9] = 0x0;
    id_[10] = 0x0;
    id_[11] = 0x0;
    id_[12] = 0x0;
    id_[13] = 0x0;
    id_[14] = 0x0;
    id_[15] = 0x0;
    id_[16] = 0x0;
    id_[17] = 0x0;
    id_[18] = 0x0;
    id_[19] = 0x0;
    id_[20] = 0x0;
    id_[21] = 0x0;
    id_[22] = 0x0;
    id_[23] = 0x0;
    id_[24] = 0x0;
    id_[25] = 0x0;
    id_[26] = 0x0;
    id_[27] = 0x0;
    id_[28] = 0x0;
    id_[29] = 0x0;
    id_[30] = 0x0;
    id_[31] = 0x0;
    id_[32] = 0x0;
    id_[33] = 0x0;
    id_[34] = 0x0;
    id_[35] = 0x0;
    id_[36] = 0x0;
    id_[37] = 0x0;
    id_[38] = 0x0;
    id_[39] = 0x0;
    id_[40] = 0x0;
    id_[41] = 0x0;
    id_[42] = 0x0;
    id_[43] = 0x0;
    id_[44] = 0x0;
    id_[45] = 0x0;
    id_[46] = 0x0;
    id_[47] = 0x0;
    id_[48] = 0x0;
    id_[49] = 0x0;
    id_[50] = 0x0;
    id_[51] = 0x0;
    id_[52] = 0x0;
    id_[53] = 0x0;
    id_[54] = 0x0;
    id_[55] = 0x0;
    id_[56] = 0x0;
    id_[57] = 0x0;
    id_[58] = 0x0;
    id_[59] = 0x0;
    id_[60] = 0x0;
    id_[61] = 0x0;
    id_[62] = 0x0;
    id_[63] = 0x0;
    id_[64] = 0x0;
    id_[65] = 0x0;
    id_[66] = 0x0;
    id_[67] = 0x0;
    id_[68] = 0x0;
    id_[69] = 0x0;
    id_[70] = 0x0;
    id_[71] = 0x0;
    id_[72] = 0x0;
    id_[73] = 0x0;
    id_[74] = 0x0;
    id_[75] = 0x0;
    id_[76] = 0x0;
    id_[77] = 0x0;
    id_[78] = 0x0;
    id_[79] = 0x0;
    id_[80] = 0x0;
    id_[81] = 0x0;
    id_[82] = 0x0;
    id_[83] = 0x0;
    id_[84] = 0x0;
    id_[85] = 0x0;
    id_[86] = 0x0;
    id_[87] = 0x0;
    id_[88] = 0x0;
    id_[89] = 0x0;
    id_[90] = 0x0;
    id_[91] = 0x0;
    id_[92] = 0x0;
    id_[93] = 0x0;
    id_[94] = 0x0;
    id_[95] = 0x0;
    id_[96] = 0x0;
    id_[97] = 0x0;
    id_[98] = 0x0;
    id_[99] = 0x0;
    id_[100] = 0x0;
    id_[101] = 0x0;
    id_[102] = 0x0;
    id_[103] = 0x0;
    id_[104] = 0x0;
    id_[105] = 0x0;
    id_[106] = 0x0;
    id_[107] = 0x0;
    id_[108] = 0x0;
    id_[109] = 0x0;
    id_[110] = 0x0;
    id_[111] = 0x0;
    id_[112] = 0x0;
    id_[113] = 0x0;
    id_[114] = 0x0;
    id_[115] = 0x0;
    id_[116] = 0x0;
    id_[117] = 0x0;
    id_[118] = 0x0;
    id_[119] = 0x0;
    id_[120] = 0x0;
    id_[121] = 0x0;
    id_[122] = 0x0;
    id_[123] = 0x0;
    id_[124] = 0x0;
    id_[125] = 0x0;
    id_[126] = 0x0;
    id_[127] = 0x0;
    id_[128] = 0x0;
    id_[129] = 0x0;
    id_[130] = 0x0;
    id_[131] = 0x0;
    id_[132] = 0x0;
    id_[133] = 0x0;
    id_[134] = 0x0;
    id_[135] = 0x0;
    id_[136] = 0x0;
    id_[137] = 0x0;
    id_[138] = 0x0;
    id_[139] = 0x0;
    id_[140] = 0x0;
    id_[141] = 0x0;
    id_[142] = 0x0;
    id_[143] = 0x0;
    id_[144] = 0x0;
    id_[145] = 0x0;
    id_[146] = 0x0;
    id_[147] = 0x0;
    id_[148] = 0x0;
    id_[149] = 0x0;
    id_[150] = 0x0;
    id_[151] = 0x0;
    id_[152] = 0x0;
    id_[153] = 0x0;
    id_[154] = 0x0;
    id_[155] = 0x0;
    id_[156] = 0x0;
    id_[157] = 0x0;
    id_[158] = 0x0;
    id_[159] = 0x0;
    id_[160] = 0x0;
    id_[161] = 0x0;
    id_[162] = 0x0;
    id_[163] = 0x0;
    id_[164] = 0x0;
    id_[165] = 0x0;
    id_[166] = 0x0;
    id_[167] = 0x0;
    id_[168] = 0x0;
    id_[169] = 0x0;
    id_[170] = 0x0;
    id_[171] = 0x0;
    id_[172] = 0x0;
    id_[173] = 0x0;
    id_[174] = 0x0;
    id_[175] = 0x0;
    id_[176] = 0x0;
    id_[177] = 0x0;
    id_[178] = 0x0;
    id_[179] = 0x0;
    id_[180] = 0x0;
    id_[181] = 0x0;
    id_[182] = 0x0;
    id_[183] = 0x0;
    id_[184] = 0x0;
    id_[185] = 0x0;
    id_[186] = 0x0;
    id_[187] = 0x0;
    id_[188] = 0x0;
    id_[189] = 0x0;
    id_[190] = 0x0;
    id_[191] = 0x0;
    id_[192] = 0x0;
    id_[193] = 0x0;
    id_[194] = 0x0;
    id_[195] = 0x0;
    id_[196] = 0x0;
    id_[197] = 0x0;
    id_[198] = 0x0;
    id_[199] = 0x0;
    id_[200] = 0x0;
    id_[201] = 0x0;
    id_[202] = 0x0;
    id_[203] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PreRdmBlkId") + ":\n";
    for (uint32_t f=0;f<204;++f) {
      r += indent_string + "  " + std::string("id") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(id_[f]) ) + "\n";
      all_zeros &= (0 == id_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PreRdmBlkId") + ":\n";
    for (uint32_t f=0;f<204;++f) {
      r += indent_string + "  " + std::string("id") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(id_[f]) ) + "\n";
      all_zeros &= (0 == id_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 204 > id_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x200000; // to get to tm_pre_top
    offset += 0x20000; // to get to pre_common
    offset += 0x40; // to get to blk_id
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_PRE_RDM_BLK_ID_H__
