/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_QCLC_CT_UC_PT_MUTABLE_H__
#define __REGISTER_INCLUDES_QCLC_CT_UC_PT_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class QclcCtUcPtMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  QclcCtUcPtMutable(
      int chipNumber, int index_qclc_ct_uc_pt, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_qclc_ct_uc_pt), 4, true, write_callback, read_callback, std::string("QclcCtUcPtMutable")+":"+boost::lexical_cast<std::string>(index_qclc_ct_uc_pt))
    {
    }
  QclcCtUcPtMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "QclcCtUcPtMutable")
    {
    }
public:





  uint8_t uc_ct_pt_th0() { return uc_ct_pt_th0_; }
  void uc_ct_pt_th0(const uint8_t &v) { uc_ct_pt_th0_=v; }





  uint8_t uc_ct_pt_th1() { return uc_ct_pt_th1_; }
  void uc_ct_pt_th1(const uint8_t &v) { uc_ct_pt_th1_=v; }





  uint8_t uc_ct_pt_th2() { return uc_ct_pt_th2_; }
  void uc_ct_pt_th2(const uint8_t &v) { uc_ct_pt_th2_=v; }





  uint8_t uc_ct_pt_th3() { return uc_ct_pt_th3_; }
  void uc_ct_pt_th3(const uint8_t &v) { uc_ct_pt_th3_=v; }





  uint8_t uc_ct_pt_th4() { return uc_ct_pt_th4_; }
  void uc_ct_pt_th4(const uint8_t &v) { uc_ct_pt_th4_=v; }





  uint8_t uc_ct_pt_th5() { return uc_ct_pt_th5_; }
  void uc_ct_pt_th5(const uint8_t &v) { uc_ct_pt_th5_=v; }





  uint8_t uc_ct_pt_th6() { return uc_ct_pt_th6_; }
  void uc_ct_pt_th6(const uint8_t &v) { uc_ct_pt_th6_=v; }





  uint8_t uc_ct_pt_th7() { return uc_ct_pt_th7_; }
  void uc_ct_pt_th7(const uint8_t &v) { uc_ct_pt_th7_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (uc_ct_pt_th0_ & 0xf);
    *data |= ((uc_ct_pt_th1_ & 0xf) << 4);
    *data |= ((uc_ct_pt_th2_ & 0xf) << 8);
    *data |= ((uc_ct_pt_th3_ & 0xf) << 12);
    *data |= ((uc_ct_pt_th4_ & 0xf) << 16);
    *data |= ((uc_ct_pt_th5_ & 0xf) << 20);
    *data |= ((uc_ct_pt_th6_ & 0xf) << 24);
    *data |= ((uc_ct_pt_th7_ & 0xf) << 28);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    uc_ct_pt_th0_ = (data & 0xf);
    uc_ct_pt_th1_ = ((data >> 4) & 0xf);
    uc_ct_pt_th2_ = ((data >> 8) & 0xf);
    uc_ct_pt_th3_ = ((data >> 12) & 0xf);
    uc_ct_pt_th4_ = ((data >> 16) & 0xf);
    uc_ct_pt_th5_ = ((data >> 20) & 0xf);
    uc_ct_pt_th6_ = ((data >> 24) & 0xf);
    uc_ct_pt_th7_ = ((data >> 28) & 0xf);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    uc_ct_pt_th0_ = 0xf;
    uc_ct_pt_th1_ = 0x4;
    uc_ct_pt_th2_ = 0x8;
    uc_ct_pt_th3_ = 0x4;
    uc_ct_pt_th4_ = 0xf;
    uc_ct_pt_th5_ = 0x4;
    uc_ct_pt_th6_ = 0x8;
    uc_ct_pt_th7_ = 0x4;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("QclcCtUcPtMutable") + ":\n";
    r += indent_string + "  " + std::string("uc_ct_pt_th0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(uc_ct_pt_th0_) ) + "\n";
    all_zeros &= (0 == uc_ct_pt_th0_);
    r += indent_string + "  " + std::string("uc_ct_pt_th1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(uc_ct_pt_th1_) ) + "\n";
    all_zeros &= (0 == uc_ct_pt_th1_);
    r += indent_string + "  " + std::string("uc_ct_pt_th2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(uc_ct_pt_th2_) ) + "\n";
    all_zeros &= (0 == uc_ct_pt_th2_);
    r += indent_string + "  " + std::string("uc_ct_pt_th3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(uc_ct_pt_th3_) ) + "\n";
    all_zeros &= (0 == uc_ct_pt_th3_);
    r += indent_string + "  " + std::string("uc_ct_pt_th4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(uc_ct_pt_th4_) ) + "\n";
    all_zeros &= (0 == uc_ct_pt_th4_);
    r += indent_string + "  " + std::string("uc_ct_pt_th5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(uc_ct_pt_th5_) ) + "\n";
    all_zeros &= (0 == uc_ct_pt_th5_);
    r += indent_string + "  " + std::string("uc_ct_pt_th6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(uc_ct_pt_th6_) ) + "\n";
    all_zeros &= (0 == uc_ct_pt_th6_);
    r += indent_string + "  " + std::string("uc_ct_pt_th7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(uc_ct_pt_th7_) ) + "\n";
    all_zeros &= (0 == uc_ct_pt_th7_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("QclcCtUcPtMutable") + ":\n";
    r += indent_string + "  " + std::string("uc_ct_pt_th0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(uc_ct_pt_th0_) ) + "\n";
    all_zeros &= (0 == uc_ct_pt_th0_);
    r += indent_string + "  " + std::string("uc_ct_pt_th1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(uc_ct_pt_th1_) ) + "\n";
    all_zeros &= (0 == uc_ct_pt_th1_);
    r += indent_string + "  " + std::string("uc_ct_pt_th2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(uc_ct_pt_th2_) ) + "\n";
    all_zeros &= (0 == uc_ct_pt_th2_);
    r += indent_string + "  " + std::string("uc_ct_pt_th3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(uc_ct_pt_th3_) ) + "\n";
    all_zeros &= (0 == uc_ct_pt_th3_);
    r += indent_string + "  " + std::string("uc_ct_pt_th4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(uc_ct_pt_th4_) ) + "\n";
    all_zeros &= (0 == uc_ct_pt_th4_);
    r += indent_string + "  " + std::string("uc_ct_pt_th5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(uc_ct_pt_th5_) ) + "\n";
    all_zeros &= (0 == uc_ct_pt_th5_);
    r += indent_string + "  " + std::string("uc_ct_pt_th6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(uc_ct_pt_th6_) ) + "\n";
    all_zeros &= (0 == uc_ct_pt_th6_);
    r += indent_string + "  " + std::string("uc_ct_pt_th7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(uc_ct_pt_th7_) ) + "\n";
    all_zeros &= (0 == uc_ct_pt_th7_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t uc_ct_pt_th0_;
  uint8_t uc_ct_pt_th1_;
  uint8_t uc_ct_pt_th2_;
  uint8_t uc_ct_pt_th3_;
  uint8_t uc_ct_pt_th4_;
  uint8_t uc_ct_pt_th5_;
  uint8_t uc_ct_pt_th6_;
  uint8_t uc_ct_pt_th7_;
private:
  static int StartOffset(
      int index_qclc_ct_uc_pt
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x100000; // to get to tm_clc_top
    offset += 0x20000; // to get to clc_common
    offset += 0x200; // to get to pt_th
    assert(index_qclc_ct_uc_pt < 36);
    offset += index_qclc_ct_uc_pt * 0x4; // qclc_ct_uc_pt[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_QCLC_CT_UC_PT_MUTABLE_H__
