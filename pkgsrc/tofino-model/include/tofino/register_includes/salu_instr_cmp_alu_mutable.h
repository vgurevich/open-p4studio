/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_SALU_INSTR_CMP_ALU_MUTABLE_H__
#define __REGISTER_INCLUDES_SALU_INSTR_CMP_ALU_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class SaluInstrCmpAluMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  SaluInstrCmpAluMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_meter_alu_group_addrmap, int index_salu_instr_cmp_alu_0, int index_salu_instr_cmp_alu_1, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_meter_alu_group_addrmap, index_salu_instr_cmp_alu_0, index_salu_instr_cmp_alu_1), 4, true, write_callback, read_callback, std::string("SaluInstrCmpAluMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_meter_alu_group_addrmap) + "," + boost::lexical_cast<std::string>(index_salu_instr_cmp_alu_0) + "," + boost::lexical_cast<std::string>(index_salu_instr_cmp_alu_1))
    {
    }
  SaluInstrCmpAluMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "SaluInstrCmpAluMutable")
    {
    }
public:





  uint8_t salu_cmp_const_src() { return salu_cmp_const_src_; }
  void salu_cmp_const_src(const uint8_t &v) { salu_cmp_const_src_=v; }



  uint8_t salu_cmp_regfile_const() { return salu_cmp_regfile_const_; }
  void salu_cmp_regfile_const(const uint8_t &v) { salu_cmp_regfile_const_=v; }




  uint8_t salu_cmp_bsrc_input() { return salu_cmp_bsrc_input_; }
  void salu_cmp_bsrc_input(const uint8_t &v) { salu_cmp_bsrc_input_=v; }



  uint8_t salu_cmp_bsrc_sign() { return salu_cmp_bsrc_sign_; }
  void salu_cmp_bsrc_sign(const uint8_t &v) { salu_cmp_bsrc_sign_=v; }


  uint8_t salu_cmp_bsrc_enable() { return salu_cmp_bsrc_enable_; }
  void salu_cmp_bsrc_enable(const uint8_t &v) { salu_cmp_bsrc_enable_=v; }




  uint8_t salu_cmp_asrc_input() { return salu_cmp_asrc_input_; }
  void salu_cmp_asrc_input(const uint8_t &v) { salu_cmp_asrc_input_=v; }



  uint8_t salu_cmp_asrc_sign() { return salu_cmp_asrc_sign_; }
  void salu_cmp_asrc_sign(const uint8_t &v) { salu_cmp_asrc_sign_=v; }


  uint8_t salu_cmp_asrc_enable() { return salu_cmp_asrc_enable_; }
  void salu_cmp_asrc_enable(const uint8_t &v) { salu_cmp_asrc_enable_=v; }


  uint8_t salu_cmp_opcode() { return salu_cmp_opcode_; }
  void salu_cmp_opcode(const uint8_t &v) { salu_cmp_opcode_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (salu_cmp_const_src_ & 0xf);
    *data |= ((salu_cmp_regfile_const_ & 0x1) << 4);
    *data |= ((salu_cmp_bsrc_input_ & 0x1) << 5);
    *data |= ((salu_cmp_bsrc_sign_ & 0x1) << 6);
    *data |= ((salu_cmp_bsrc_enable_ & 0x1) << 7);
    *data |= ((salu_cmp_asrc_input_ & 0x1) << 8);
    *data |= ((salu_cmp_asrc_sign_ & 0x1) << 9);
    *data |= ((salu_cmp_asrc_enable_ & 0x1) << 10);
    *data |= ((salu_cmp_opcode_ & 0xf) << 11);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    salu_cmp_const_src_ = (data & 0xf);
    salu_cmp_regfile_const_ = ((data >> 4) & 0x1);
    salu_cmp_bsrc_input_ = ((data >> 5) & 0x1);
    salu_cmp_bsrc_sign_ = ((data >> 6) & 0x1);
    salu_cmp_bsrc_enable_ = ((data >> 7) & 0x1);
    salu_cmp_asrc_input_ = ((data >> 8) & 0x1);
    salu_cmp_asrc_sign_ = ((data >> 9) & 0x1);
    salu_cmp_asrc_enable_ = ((data >> 10) & 0x1);
    salu_cmp_opcode_ = ((data >> 11) & 0xf);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    salu_cmp_const_src_ = 0x0;
    salu_cmp_regfile_const_ = 0x0;
    salu_cmp_bsrc_input_ = 0x0;
    salu_cmp_bsrc_sign_ = 0x0;
    salu_cmp_bsrc_enable_ = 0x0;
    salu_cmp_asrc_input_ = 0x0;
    salu_cmp_asrc_sign_ = 0x0;
    salu_cmp_asrc_enable_ = 0x0;
    salu_cmp_opcode_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("SaluInstrCmpAluMutable") + ":\n";
    r += indent_string + "  " + std::string("salu_cmp_const_src") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_const_src_) ) + "\n";
    all_zeros &= (0 == salu_cmp_const_src_);
    r += indent_string + "  " + std::string("salu_cmp_regfile_const") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_regfile_const_) ) + "\n";
    all_zeros &= (0 == salu_cmp_regfile_const_);
    r += indent_string + "  " + std::string("salu_cmp_bsrc_input") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_bsrc_input_) ) + "\n";
    all_zeros &= (0 == salu_cmp_bsrc_input_);
    r += indent_string + "  " + std::string("salu_cmp_bsrc_sign") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_bsrc_sign_) ) + "\n";
    all_zeros &= (0 == salu_cmp_bsrc_sign_);
    r += indent_string + "  " + std::string("salu_cmp_bsrc_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_bsrc_enable_) ) + "\n";
    all_zeros &= (0 == salu_cmp_bsrc_enable_);
    r += indent_string + "  " + std::string("salu_cmp_asrc_input") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_asrc_input_) ) + "\n";
    all_zeros &= (0 == salu_cmp_asrc_input_);
    r += indent_string + "  " + std::string("salu_cmp_asrc_sign") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_asrc_sign_) ) + "\n";
    all_zeros &= (0 == salu_cmp_asrc_sign_);
    r += indent_string + "  " + std::string("salu_cmp_asrc_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_asrc_enable_) ) + "\n";
    all_zeros &= (0 == salu_cmp_asrc_enable_);
    r += indent_string + "  " + std::string("salu_cmp_opcode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_opcode_) ) + "\n";
    all_zeros &= (0 == salu_cmp_opcode_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("SaluInstrCmpAluMutable") + ":\n";
    r += indent_string + "  " + std::string("salu_cmp_const_src") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_const_src_) ) + "\n";
    all_zeros &= (0 == salu_cmp_const_src_);
    r += indent_string + "  " + std::string("salu_cmp_regfile_const") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_regfile_const_) ) + "\n";
    all_zeros &= (0 == salu_cmp_regfile_const_);
    r += indent_string + "  " + std::string("salu_cmp_bsrc_input") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_bsrc_input_) ) + "\n";
    all_zeros &= (0 == salu_cmp_bsrc_input_);
    r += indent_string + "  " + std::string("salu_cmp_bsrc_sign") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_bsrc_sign_) ) + "\n";
    all_zeros &= (0 == salu_cmp_bsrc_sign_);
    r += indent_string + "  " + std::string("salu_cmp_bsrc_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_bsrc_enable_) ) + "\n";
    all_zeros &= (0 == salu_cmp_bsrc_enable_);
    r += indent_string + "  " + std::string("salu_cmp_asrc_input") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_asrc_input_) ) + "\n";
    all_zeros &= (0 == salu_cmp_asrc_input_);
    r += indent_string + "  " + std::string("salu_cmp_asrc_sign") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_asrc_sign_) ) + "\n";
    all_zeros &= (0 == salu_cmp_asrc_sign_);
    r += indent_string + "  " + std::string("salu_cmp_asrc_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_asrc_enable_) ) + "\n";
    all_zeros &= (0 == salu_cmp_asrc_enable_);
    r += indent_string + "  " + std::string("salu_cmp_opcode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(salu_cmp_opcode_) ) + "\n";
    all_zeros &= (0 == salu_cmp_opcode_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t salu_cmp_const_src_;
  uint8_t salu_cmp_regfile_const_;
  uint8_t salu_cmp_bsrc_input_;
  uint8_t salu_cmp_bsrc_sign_;
  uint8_t salu_cmp_bsrc_enable_;
  uint8_t salu_cmp_asrc_input_;
  uint8_t salu_cmp_asrc_sign_;
  uint8_t salu_cmp_asrc_enable_;
  uint8_t salu_cmp_opcode_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_meter_alu_group_addrmap, int index_salu_instr_cmp_alu_0, int index_salu_instr_cmp_alu_1
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    assert(index_mau_addrmap < 12);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x10000; // to get to map_alu
    offset += 0x800; // to get to meter_group
    assert(index_mau_meter_alu_group_addrmap < 4);
    offset += index_mau_meter_alu_group_addrmap * 0x200; // mau_meter_alu_group_addrmap[]
    offset += 0x100; // to get to stateful
    offset += 0xe0; // to get to salu_instr_cmp_alu
    assert(index_salu_instr_cmp_alu_0 < 4);
    offset += index_salu_instr_cmp_alu_0 * 0x8; // salu_instr_cmp_alu[]
    assert(index_salu_instr_cmp_alu_1 < 2);
    offset += index_salu_instr_cmp_alu_1 * 0x4; // salu_instr_cmp_alu[][]
    return offset;
  }

};













  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_SALU_INSTR_CMP_ALU_MUTABLE_H__
