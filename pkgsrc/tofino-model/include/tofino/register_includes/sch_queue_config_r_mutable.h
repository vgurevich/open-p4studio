/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_SCH_QUEUE_CONFIG_R_MUTABLE_H__
#define __REGISTER_INCLUDES_SCH_QUEUE_CONFIG_R_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class SchQueueConfigRMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  SchQueueConfigRMutable(
      int chipNumber, int index_tm_sch_pipe_rspec, int index_sch_queue_config_r, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_sch_pipe_rspec, index_sch_queue_config_r), 4, true, write_callback, read_callback, std::string("SchQueueConfigRMutable")+":"+boost::lexical_cast<std::string>(index_tm_sch_pipe_rspec) + "," + boost::lexical_cast<std::string>(index_sch_queue_config_r))
    {
    }
  SchQueueConfigRMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "SchQueueConfigRMutable")
    {
    }
public:





  uint8_t enb() { return enb_; }
  void enb(const uint8_t &v) { enb_=v; }






  uint8_t pfc_upd_enb() { return pfc_upd_enb_; }
  void pfc_upd_enb(const uint8_t &v) { pfc_upd_enb_=v; }





  uint8_t min_rate_enb() { return min_rate_enb_; }
  void min_rate_enb(const uint8_t &v) { min_rate_enb_=v; }





  uint8_t max_rate_enb() { return max_rate_enb_; }
  void max_rate_enb(const uint8_t &v) { max_rate_enb_=v; }







  uint8_t cid() { return cid_; }
  void cid(const uint8_t &v) { cid_=v; }







  uint8_t pfc_pri() { return pfc_pri_; }
  void pfc_pri(const uint8_t &v) { pfc_pri_=v; }





  uint8_t min_rate_pri() { return min_rate_pri_; }
  void min_rate_pri(const uint8_t &v) { min_rate_pri_=v; }





  uint8_t max_rate_pri() { return max_rate_pri_; }
  void max_rate_pri(const uint8_t &v) { max_rate_pri_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (enb_ & 0x1);
    *data |= ((pfc_upd_enb_ & 0x1) << 1);
    *data |= ((min_rate_enb_ & 0x1) << 2);
    *data |= ((max_rate_enb_ & 0x1) << 3);
    *data |= ((cid_ & 0x3) << 4);
    *data |= ((pfc_pri_ & 0x7) << 8);
    *data |= ((min_rate_pri_ & 0x7) << 11);
    *data |= ((max_rate_pri_ & 0x7) << 14);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    enb_ = (data & 0x1);
    pfc_upd_enb_ = ((data >> 1) & 0x1);
    min_rate_enb_ = ((data >> 2) & 0x1);
    max_rate_enb_ = ((data >> 3) & 0x1);
    cid_ = ((data >> 4) & 0x3);
    pfc_pri_ = ((data >> 8) & 0x7);
    min_rate_pri_ = ((data >> 11) & 0x7);
    max_rate_pri_ = ((data >> 14) & 0x7);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    enb_ = 0x1;
    pfc_upd_enb_ = 0x1;
    min_rate_enb_ = 0x0;
    max_rate_enb_ = 0x1;
    cid_ = 0;
    pfc_pri_ = 0x0;
    min_rate_pri_ = 0x0;
    max_rate_pri_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("SchQueueConfigRMutable") + ":\n";
    r += indent_string + "  " + std::string("enb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enb_) ) + "\n";
    all_zeros &= (0 == enb_);
    r += indent_string + "  " + std::string("pfc_upd_enb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_upd_enb_) ) + "\n";
    all_zeros &= (0 == pfc_upd_enb_);
    r += indent_string + "  " + std::string("min_rate_enb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(min_rate_enb_) ) + "\n";
    all_zeros &= (0 == min_rate_enb_);
    r += indent_string + "  " + std::string("max_rate_enb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(max_rate_enb_) ) + "\n";
    all_zeros &= (0 == max_rate_enb_);
    r += indent_string + "  " + std::string("cid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cid_) ) + "\n";
    all_zeros &= (0 == cid_);
    r += indent_string + "  " + std::string("pfc_pri") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_pri_) ) + "\n";
    all_zeros &= (0 == pfc_pri_);
    r += indent_string + "  " + std::string("min_rate_pri") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(min_rate_pri_) ) + "\n";
    all_zeros &= (0 == min_rate_pri_);
    r += indent_string + "  " + std::string("max_rate_pri") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(max_rate_pri_) ) + "\n";
    all_zeros &= (0 == max_rate_pri_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("SchQueueConfigRMutable") + ":\n";
    r += indent_string + "  " + std::string("enb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enb_) ) + "\n";
    all_zeros &= (0 == enb_);
    r += indent_string + "  " + std::string("pfc_upd_enb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_upd_enb_) ) + "\n";
    all_zeros &= (0 == pfc_upd_enb_);
    r += indent_string + "  " + std::string("min_rate_enb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(min_rate_enb_) ) + "\n";
    all_zeros &= (0 == min_rate_enb_);
    r += indent_string + "  " + std::string("max_rate_enb") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(max_rate_enb_) ) + "\n";
    all_zeros &= (0 == max_rate_enb_);
    r += indent_string + "  " + std::string("cid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cid_) ) + "\n";
    all_zeros &= (0 == cid_);
    r += indent_string + "  " + std::string("pfc_pri") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_pri_) ) + "\n";
    all_zeros &= (0 == pfc_pri_);
    r += indent_string + "  " + std::string("min_rate_pri") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(min_rate_pri_) ) + "\n";
    all_zeros &= (0 == min_rate_pri_);
    r += indent_string + "  " + std::string("max_rate_pri") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(max_rate_pri_) ) + "\n";
    all_zeros &= (0 == max_rate_pri_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t enb_;
  uint8_t pfc_upd_enb_;
  uint8_t min_rate_enb_;
  uint8_t max_rate_enb_;
  uint8_t cid_;
  uint8_t pfc_pri_;
  uint8_t min_rate_pri_;
  uint8_t max_rate_pri_;
private:
  static int StartOffset(
      int index_tm_sch_pipe_rspec, int index_sch_queue_config_r
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0xc0000; // to get to tm_sch_top
    assert(index_tm_sch_pipe_rspec < 4);
    offset += index_tm_sch_pipe_rspec * 0x10000; // tm_sch_pipe_rspec[]
    offset += 0x2000; // to get to queue_config
    assert(index_sch_queue_config_r < 576);
    offset += index_sch_queue_config_r * 0x4; // sch_queue_config_r[]
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_SCH_QUEUE_CONFIG_R_MUTABLE_H__
