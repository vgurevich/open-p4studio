/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_STATISTICS_CTL_H__
#define __REGISTER_INCLUDES_STATISTICS_CTL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class StatisticsCtl : public model_core::RegisterBlock<RegisterCallback> {
public:
  StatisticsCtl(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_stats_alu_wrap_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_stats_alu_wrap_addrmap), 4, false, write_callback, read_callback, std::string("StatisticsCtl")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_stats_alu_wrap_addrmap))
    {
    }
  StatisticsCtl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "StatisticsCtl")
    {
    }
public:








  uint8_t &stats_entries_per_word() { return stats_entries_per_word_; }


  uint8_t &stats_process_bytes() { return stats_process_bytes_; }


  uint8_t &stats_process_packets() { return stats_process_packets_; }


  uint8_t &lrt_enable() { return lrt_enable_; }




  uint8_t &stats_alu_egress() { return stats_alu_egress_; }





  uint16_t &stats_bytecount_adjust() { return stats_bytecount_adjust_; }


  uint8_t &stats_alu_error_enable() { return stats_alu_error_enable_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (stats_entries_per_word_ & 0x7);
    *data |= ((stats_process_bytes_ & 0x1) << 3);
    *data |= ((stats_process_packets_ & 0x1) << 4);
    *data |= ((lrt_enable_ & 0x1) << 5);
    *data |= ((stats_alu_egress_ & 0x1) << 6);
    *data |= ((stats_bytecount_adjust_ & 0x3fff) << 7);
    *data |= ((stats_alu_error_enable_ & 0x1) << 21);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    stats_entries_per_word_ = (data & 0x7);
    stats_process_bytes_ = ((data >> 3) & 0x1);
    stats_process_packets_ = ((data >> 4) & 0x1);
    lrt_enable_ = ((data >> 5) & 0x1);
    stats_alu_egress_ = ((data >> 6) & 0x1);
    stats_bytecount_adjust_ = ((data >> 7) & 0x3fff);
    stats_alu_error_enable_ = ((data >> 21) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    stats_entries_per_word_ = 0x0;
    stats_process_bytes_ = 0x0;
    stats_process_packets_ = 0x0;
    lrt_enable_ = 0x0;
    stats_alu_egress_ = 0x0;
    stats_bytecount_adjust_ = 0x0;
    stats_alu_error_enable_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("StatisticsCtl") + ":\n";
    r += indent_string + "  " + std::string("stats_entries_per_word") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stats_entries_per_word_) ) + "\n";
    all_zeros &= (0 == stats_entries_per_word_);
    r += indent_string + "  " + std::string("stats_process_bytes") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stats_process_bytes_) ) + "\n";
    all_zeros &= (0 == stats_process_bytes_);
    r += indent_string + "  " + std::string("stats_process_packets") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stats_process_packets_) ) + "\n";
    all_zeros &= (0 == stats_process_packets_);
    r += indent_string + "  " + std::string("lrt_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lrt_enable_) ) + "\n";
    all_zeros &= (0 == lrt_enable_);
    r += indent_string + "  " + std::string("stats_alu_egress") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stats_alu_egress_) ) + "\n";
    all_zeros &= (0 == stats_alu_egress_);
    r += indent_string + "  " + std::string("stats_bytecount_adjust") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stats_bytecount_adjust_) ) + "\n";
    all_zeros &= (0 == stats_bytecount_adjust_);
    r += indent_string + "  " + std::string("stats_alu_error_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stats_alu_error_enable_) ) + "\n";
    all_zeros &= (0 == stats_alu_error_enable_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("StatisticsCtl") + ":\n";
    r += indent_string + "  " + std::string("stats_entries_per_word") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stats_entries_per_word_) ) + "\n";
    all_zeros &= (0 == stats_entries_per_word_);
    r += indent_string + "  " + std::string("stats_process_bytes") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stats_process_bytes_) ) + "\n";
    all_zeros &= (0 == stats_process_bytes_);
    r += indent_string + "  " + std::string("stats_process_packets") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stats_process_packets_) ) + "\n";
    all_zeros &= (0 == stats_process_packets_);
    r += indent_string + "  " + std::string("lrt_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(lrt_enable_) ) + "\n";
    all_zeros &= (0 == lrt_enable_);
    r += indent_string + "  " + std::string("stats_alu_egress") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stats_alu_egress_) ) + "\n";
    all_zeros &= (0 == stats_alu_egress_);
    r += indent_string + "  " + std::string("stats_bytecount_adjust") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stats_bytecount_adjust_) ) + "\n";
    all_zeros &= (0 == stats_bytecount_adjust_);
    r += indent_string + "  " + std::string("stats_alu_error_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(stats_alu_error_enable_) ) + "\n";
    all_zeros &= (0 == stats_alu_error_enable_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t stats_entries_per_word_;
  uint8_t stats_process_bytes_;
  uint8_t stats_process_packets_;
  uint8_t lrt_enable_;
  uint8_t stats_alu_egress_;
  uint16_t stats_bytecount_adjust_;
  uint8_t stats_alu_error_enable_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_stats_alu_wrap_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    assert(index_mau_addrmap < 12);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x10000; // to get to map_alu
    offset += 0x200; // to get to stats_wrap
    assert(index_mau_stats_alu_wrap_addrmap < 4);
    offset += index_mau_stats_alu_wrap_addrmap * 0x40; // mau_stats_alu_wrap_addrmap[]
    offset += 0x30; // to get to statistics_ctl
    return offset;
  }

};













  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_STATISTICS_CTL_H__
