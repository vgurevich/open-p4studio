/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TBUS_CTRL_MUTABLE_H__
#define __REGISTER_INCLUDES_TBUS_CTRL_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofino {
  namespace register_classes {

class TbusCtrlMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  TbusCtrlMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, true, write_callback, read_callback, std::string("TbusCtrlMutable"))
    {
    }
  TbusCtrlMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "TbusCtrlMutable")
    {
    }
public:





  uint8_t pfc_fm() { return pfc_fm_; }
  void pfc_fm(const uint8_t &v) { pfc_fm_=v; }





  uint8_t pfc_rx() { return pfc_rx_; }
  void pfc_rx(const uint8_t &v) { pfc_rx_=v; }





  uint8_t ecc_dec_dis() { return ecc_dec_dis_; }
  void ecc_dec_dis(const uint8_t &v) { ecc_dec_dis_=v; }





  uint8_t crcchk_dis() { return crcchk_dis_; }
  void crcchk_dis(const uint8_t &v) { crcchk_dis_=v; }





  uint8_t crcrmv_dis() { return crcrmv_dis_; }
  void crcrmv_dis(const uint8_t &v) { crcrmv_dis_=v; }





  uint8_t crcgen_dis() { return crcgen_dis_; }
  void crcgen_dis(const uint8_t &v) { crcgen_dis_=v; }






  uint8_t rx_en() { return rx_en_; }
  void rx_en(const uint8_t &v) { rx_en_=v; }





  uint8_t port_alive() { return port_alive_; }
  void port_alive(const uint8_t &v) { port_alive_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = pfc_fm_;
    *data |= (pfc_rx_ << 8);
    *data |= ((ecc_dec_dis_ & 0x1) << 16);
    *data |= ((crcchk_dis_ & 0x1) << 17);
    *data |= ((crcrmv_dis_ & 0x1) << 18);
    *data |= ((crcgen_dis_ & 0x1) << 19);
    *data |= ((rx_en_ & 0x1) << 20);
    *data |= ((port_alive_ & 0x1) << 21);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    pfc_fm_ = data;
    pfc_rx_ = (data >> 8);
    ecc_dec_dis_ = ((data >> 16) & 0x1);
    crcchk_dis_ = ((data >> 17) & 0x1);
    crcrmv_dis_ = ((data >> 18) & 0x1);
    crcgen_dis_ = ((data >> 19) & 0x1);
    rx_en_ = ((data >> 20) & 0x1);
    port_alive_ = ((data >> 21) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    pfc_fm_ = 0x0;
    pfc_rx_ = 0x0;
    ecc_dec_dis_ = 0x0;
    crcchk_dis_ = 0x0;
    crcrmv_dis_ = 0x0;
    crcgen_dis_ = 0x0;
    rx_en_ = 0x0;
    port_alive_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TbusCtrlMutable") + ":\n";
    r += indent_string + "  " + std::string("pfc_fm") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_fm_) ) + "\n";
    all_zeros &= (0 == pfc_fm_);
    r += indent_string + "  " + std::string("pfc_rx") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_rx_) ) + "\n";
    all_zeros &= (0 == pfc_rx_);
    r += indent_string + "  " + std::string("ecc_dec_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ecc_dec_dis_) ) + "\n";
    all_zeros &= (0 == ecc_dec_dis_);
    r += indent_string + "  " + std::string("crcchk_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcchk_dis_) ) + "\n";
    all_zeros &= (0 == crcchk_dis_);
    r += indent_string + "  " + std::string("crcrmv_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcrmv_dis_) ) + "\n";
    all_zeros &= (0 == crcrmv_dis_);
    r += indent_string + "  " + std::string("crcgen_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcgen_dis_) ) + "\n";
    all_zeros &= (0 == crcgen_dis_);
    r += indent_string + "  " + std::string("rx_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx_en_) ) + "\n";
    all_zeros &= (0 == rx_en_);
    r += indent_string + "  " + std::string("port_alive") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port_alive_) ) + "\n";
    all_zeros &= (0 == port_alive_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TbusCtrlMutable") + ":\n";
    r += indent_string + "  " + std::string("pfc_fm") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_fm_) ) + "\n";
    all_zeros &= (0 == pfc_fm_);
    r += indent_string + "  " + std::string("pfc_rx") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_rx_) ) + "\n";
    all_zeros &= (0 == pfc_rx_);
    r += indent_string + "  " + std::string("ecc_dec_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ecc_dec_dis_) ) + "\n";
    all_zeros &= (0 == ecc_dec_dis_);
    r += indent_string + "  " + std::string("crcchk_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcchk_dis_) ) + "\n";
    all_zeros &= (0 == crcchk_dis_);
    r += indent_string + "  " + std::string("crcrmv_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcrmv_dis_) ) + "\n";
    all_zeros &= (0 == crcrmv_dis_);
    r += indent_string + "  " + std::string("crcgen_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcgen_dis_) ) + "\n";
    all_zeros &= (0 == crcgen_dis_);
    r += indent_string + "  " + std::string("rx_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rx_en_) ) + "\n";
    all_zeros &= (0 == rx_en_);
    r += indent_string + "  " + std::string("port_alive") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(port_alive_) ) + "\n";
    all_zeros &= (0 == port_alive_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t pfc_fm_;
  uint8_t pfc_rx_;
  uint8_t ecc_dec_dis_;
  uint8_t crcchk_dis_;
  uint8_t crcrmv_dis_;
  uint8_t crcgen_dis_;
  uint8_t rx_en_;
  uint8_t port_alive_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x180000; // to get to tbc
    offset += 0x10; // to get to ctrl
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_TBUS_CTRL_MUTABLE_H__
