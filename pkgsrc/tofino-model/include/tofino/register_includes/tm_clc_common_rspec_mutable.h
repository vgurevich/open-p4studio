/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_CLC_COMMON_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_TM_CLC_COMMON_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "clm_blk_rdy_mutable.h"
#include "clm_blk_reset_mutable.h"
#include "eport_ct_state_mutable.h"
#include "qclc_ct_tot_mutable.h"
#include "qclc_ct_uc_pt_mutable.h"
#include "qclc_pt_ct_cnt_mutable.h"
#include "qclc_pt_spd_mutable.h"
#include "qclc_pt_tot_cnt_mutable.h"
#include "qclc_top_ctrl_mutable.h"

namespace tofino {
  namespace register_classes {

class TmClcCommonRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmClcCommonRspecMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 16384, true, write_callback, read_callback, std::string("TmClcCommonRspecMutable"))
    {
    }
  TmClcCommonRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "TmClcCommonRspecMutable")
    {
    }
public:





  QclcTopCtrlMutable &top_ctrl() { return top_ctrl_; }







  QclcPtSpdMutable &pt_speed(int j0) { return pt_speed_[j0]; }





  ClmBlkRdyMutable &clm_blk_rdy() { return clm_blk_rdy_; }





  ClmBlkResetMutable &clm_blk_reset() { return clm_blk_reset_; }







  EportCtStateMutable &ct_state(int j0) { return ct_state_[j0]; }





  QclcCtTotMutable &tot_th() { return tot_th_; }







  QclcCtUcPtMutable &pt_th(int j0) { return pt_th_[j0]; }





  QclcPtTotCntMutable &ct_tot_cnt() { return ct_tot_cnt_; }







  QclcPtCtCntMutable &ct_pt_cnt(int j0) { return ct_pt_cnt_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      top_ctrl_.read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x190) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pt_speed_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x190 && offset < 0x194) {
      offset -= 0x190;
      if (read_callback_) read_callback_();
      clm_blk_rdy_.read( offset, data );
    }
    else if (offset >= 0x194 && offset < 0x198) {
      offset -= 0x194;
      if (read_callback_) read_callback_();
      clm_blk_reset_.read( offset, data );
    }
    else if (offset >= 0x1c0 && offset < 0x1f0) {
      offset -= 0x1c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      ct_state_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1f0 && offset < 0x1f4) {
      offset -= 0x1f0;
      if (read_callback_) read_callback_();
      tot_th_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x290) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pt_th_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x290 && offset < 0x294) {
      offset -= 0x290;
      if (read_callback_) read_callback_();
      ct_tot_cnt_.read( offset, data );
    }
    else if (offset >= 0x400 && offset < 0x520) {
      offset -= 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      ct_pt_cnt_[ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      top_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x190) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pt_speed_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x190 && offset < 0x194) {
      offset -= 0x190;
      clm_blk_rdy_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x194 && offset < 0x198) {
      offset -= 0x194;
      clm_blk_reset_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c0 && offset < 0x1f0) {
      offset -= 0x1c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      ct_state_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1f0 && offset < 0x1f4) {
      offset -= 0x1f0;
      tot_th_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x290) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pt_th_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x290 && offset < 0x294) {
      offset -= 0x290;
      ct_tot_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400 && offset < 0x520) {
      offset -= 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      ct_pt_cnt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    top_ctrl_.reset();
    for (auto &f0 : pt_speed_) {
      f0.reset();
    }
    clm_blk_rdy_.reset();
    clm_blk_reset_.reset();
    for (auto &f0 : ct_state_) {
      f0.reset();
    }
    tot_th_.reset();
    for (auto &f0 : pt_th_) {
      f0.reset();
    }
    ct_tot_cnt_.reset();
    for (auto &f0 : ct_pt_cnt_) {
      f0.reset();
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += top_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x190) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pt_speed_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x190 && offset < 0x194) {
      offset -= 0x190;
      r += clm_blk_rdy_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x194 && offset < 0x198) {
      offset -= 0x194;
      r += clm_blk_reset_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c0 && offset < 0x1f0) {
      offset -= 0x1c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += ct_state_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1f0 && offset < 0x1f4) {
      offset -= 0x1f0;
      r += tot_th_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x290) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pt_th_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x290 && offset < 0x294) {
      offset -= 0x290;
      r += ct_tot_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400 && offset < 0x520) {
      offset -= 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += ct_pt_cnt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += top_ctrl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<36;++a0) {
      r += pt_speed_[a0].to_string(print_zeros,indent_string) ;
    }
    r += clm_blk_rdy_.to_string(print_zeros,indent_string) ;
    r += clm_blk_reset_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<12;++a0) {
      r += ct_state_[a0].to_string(print_zeros,indent_string) ;
    }
    r += tot_th_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<36;++a0) {
      r += pt_th_[a0].to_string(print_zeros,indent_string) ;
    }
    r += ct_tot_cnt_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<72;++a0) {
      r += ct_pt_cnt_[a0].to_string(print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  QclcTopCtrlMutable top_ctrl_;
  std::array< QclcPtSpdMutable, 36 > pt_speed_;
  ClmBlkRdyMutable clm_blk_rdy_;
  ClmBlkResetMutable clm_blk_reset_;
  std::array< EportCtStateMutable, 12 > ct_state_;
  QclcCtTotMutable tot_th_;
  std::array< QclcCtUcPtMutable, 36 > pt_th_;
  QclcPtTotCntMutable ct_tot_cnt_;
  std::array< QclcPtCtCntMutable, 72 > ct_pt_cnt_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x100000; // to get to tm_clc_top
    offset += 0x20000; // to get to clc_common
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_TM_CLC_COMMON_RSPEC_MUTABLE_H__
