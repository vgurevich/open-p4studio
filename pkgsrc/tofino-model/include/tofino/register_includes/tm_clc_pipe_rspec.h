/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_CLC_PIPE_RSPEC_H__
#define __REGISTER_INCLUDES_TM_CLC_PIPE_RSPEC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "clc_ind_addr.h"
#include "clc_ind_data.h"
#include "clc_inport_cell_cnt.h"
#include "clc_inport_pkt_cnt.h"
#include "clc_mc_ct_cnt.h"
#include "clc_tot_cell_cnt.h"
#include "clc_tot_pkt_cnt.h"
#include "clc_uc_ct_cnt.h"
#include "qclc_fifo_threshold.h"
#include "qclc_pipe_ctrl.h"
#include "tm_clc_pipe_rspec_debug_bus_ctrl.h"
#include "tm_clc_pipe_rspec_ecc.h"
#include "tm_clc_pipe_rspec_intr.h"

namespace tofino {
  namespace register_classes {

class TmClcPipeRspec : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmClcPipeRspec(
      int chipNumber, int index_tm_clc_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_clc_pipe_rspec), 16384, false, write_callback, read_callback, std::string("TmClcPipeRspec")+":"+boost::lexical_cast<std::string>(index_tm_clc_pipe_rspec))
    {
    }
  TmClcPipeRspec(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "TmClcPipeRspec")
    {
    }
public:





  QclcPipeCtrl &pipe_ctrl() { return pipe_ctrl_; }








  TmClcPipeRspecEcc &ecc() { return ecc_; }





  QclcFifoThreshold &fifo_threshold() { return fifo_threshold_; }





  ClcIndAddr &ind_addr() { return ind_addr_; }





  ClcIndData &ind_data() { return ind_data_; }





  ClcInportCellCnt &inport_cell_cnt() { return inport_cell_cnt_; }





  ClcInportPktCnt &inport_pkt_cnt() { return inport_pkt_cnt_; }





  ClcTotCellCnt &tot_cell_cnt() { return tot_cell_cnt_; }





  ClcTotPktCnt &tot_pkt_cnt() { return tot_pkt_cnt_; }





  ClcUcCtCnt &uc_ct_cnt() { return uc_ct_cnt_; }





  ClcMcCtCnt &mc_ct_cnt() { return mc_ct_cnt_; }





  TmClcPipeRspecDebugBusCtrl &debug_bus_ctrl() { return debug_bus_ctrl_; }
  TmClcPipeRspecIntr &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      pipe_ctrl_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      ecc_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      fifo_threshold_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      ind_addr_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      ind_data_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      inport_cell_cnt_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      inport_pkt_cnt_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      tot_cell_cnt_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      tot_pkt_cnt_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      uc_ct_cnt_.read( offset, data );
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      if (read_callback_) read_callback_();
      mc_ct_cnt_.read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      if (read_callback_) read_callback_();
      debug_bus_ctrl_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      pipe_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      fifo_threshold_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      ind_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      ind_data_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      inport_cell_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      inport_pkt_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      tot_cell_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      tot_pkt_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      uc_ct_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      mc_ct_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      debug_bus_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    pipe_ctrl_.reset();
    ecc_.reset();
    fifo_threshold_.reset();
    ind_addr_.reset();
    ind_data_.reset();
    inport_cell_cnt_.reset();
    inport_pkt_cnt_.reset();
    tot_cell_cnt_.reset();
    tot_pkt_cnt_.reset();
    uc_ct_cnt_.reset();
    mc_ct_cnt_.reset();
    debug_bus_ctrl_.reset();
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += pipe_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += fifo_threshold_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += ind_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += ind_data_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      r += inport_cell_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      r += inport_pkt_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      r += tot_cell_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      r += tot_pkt_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      r += uc_ct_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      r += mc_ct_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      r += debug_bus_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += pipe_ctrl_.to_string(print_zeros,indent_string) ;
    r += ecc_.to_string(print_zeros,indent_string) ;
    r += fifo_threshold_.to_string(print_zeros,indent_string) ;
    r += ind_addr_.to_string(print_zeros,indent_string) ;
    r += ind_data_.to_string(print_zeros,indent_string) ;
    r += inport_cell_cnt_.to_string(print_zeros,indent_string) ;
    r += inport_pkt_cnt_.to_string(print_zeros,indent_string) ;
    r += tot_cell_cnt_.to_string(print_zeros,indent_string) ;
    r += tot_pkt_cnt_.to_string(print_zeros,indent_string) ;
    r += uc_ct_cnt_.to_string(print_zeros,indent_string) ;
    r += mc_ct_cnt_.to_string(print_zeros,indent_string) ;
    r += debug_bus_ctrl_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  QclcPipeCtrl pipe_ctrl_;
  TmClcPipeRspecEcc ecc_;
  QclcFifoThreshold fifo_threshold_;
  ClcIndAddr ind_addr_;
  ClcIndData ind_data_;
  ClcInportCellCnt inport_cell_cnt_;
  ClcInportPktCnt inport_pkt_cnt_;
  ClcTotCellCnt tot_cell_cnt_;
  ClcTotPktCnt tot_pkt_cnt_;
  ClcUcCtCnt uc_ct_cnt_;
  ClcMcCtCnt mc_ct_cnt_;
  TmClcPipeRspecDebugBusCtrl debug_bus_ctrl_;
  TmClcPipeRspecIntr intr_;
private:
  static int StartOffset(
      int index_tm_clc_pipe_rspec
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x100000; // to get to tm_clc_top
    assert(index_tm_clc_pipe_rspec < 4);
    offset += index_tm_clc_pipe_rspec * 0x4000; // tm_clc_pipe_rspec[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_TM_CLC_PIPE_RSPEC_H__
