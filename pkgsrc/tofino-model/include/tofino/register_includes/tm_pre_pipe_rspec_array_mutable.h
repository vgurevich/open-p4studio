/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_PRE_PIPE_RSPEC_ARRAY_MUTABLE_H__
#define __REGISTER_INCLUDES_TM_PRE_PIPE_RSPEC_ARRAY_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "pre_arb_ctrl_mutable.h"
#include "pre_ctr48_cpu_copies_mutable.h"
#include "pre_ctr48_packet_drop_mutable.h"
#include "pre_ctr48_ph_lost_mutable.h"
#include "pre_ctr48_ph_processed_mutable.h"
#include "pre_ctr48_total_copies_mutable.h"
#include "pre_ctr48_xid_prunes_mutable.h"
#include "pre_ctr48_yid_prunes_mutable.h"
#include "pre_ctrl_mutable.h"
#include "pre_fifo_credit_log_mutable.h"
#include "pre_fifo_depth_ctrl_mutable.h"
#include "pre_fifo_ph_count_mutable.h"
#include "pre_filter_ctrl_mutable.h"
#include "pre_filter_mask_mutable.h"
#include "pre_freeze_en_mutable.h"
#include "pre_illegal_l1_node_log_mutable.h"
#include "pre_illegal_l2_node_log_mutable.h"
#include "pre_int_en0_mutable.h"
#include "pre_int_en1_mutable.h"
#include "pre_int_inj_mutable.h"
#include "pre_int_stat_mutable.h"
#include "pre_max_l1_node_ctrl_mutable.h"
#include "pre_max_l1_node_log_mutable.h"
#include "pre_max_l2_node_ctrl_mutable.h"
#include "pre_max_l2_node_log_mutable.h"
#include "pre_mbe_log_mutable.h"
#include "pre_port_vector_mutable.h"
#include "pre_rdm_addr_ctrl_mutable.h"
#include "pre_rdm_ctrl_mutable.h"
#include "pre_rdm_ph_log_mutable.h"
#include "pre_sbe_log_mutable.h"
#include "pre_table_ph_count_mutable.h"
#include "pre_wrr_ctrl_mutable.h"
#include "tm_pre_pipe_rspec_debug_bus_ctrl_mutable.h"
#include "tm_pre_pipe_rspec_mutable.h"

namespace tofino {
  namespace register_classes {

class TmPrePipeRspecArrayMutable : public model_core::RegisterBlock<RegisterArrayCallback> {
public:
  TmPrePipeRspecArrayMutable(
      int chipNumber, RegisterArrayCallback& write_callback = 0, RegisterArrayCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 32768 * ArraySize(-1), true, write_callback, read_callback, std::string("TmPrePipeRspecArrayMutable")),
    array(RealArraySize(-1)),
    size0_(ArraySize(0)),
    real_size0_(RealArraySize(0))
    {
    }
public:





  PreCtrlMutable &ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].ctrl();
  }





  PreArbCtrlMutable &arb_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].arb_ctrl();
  }





  PreWrrCtrlMutable &wrr_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].wrr_ctrl();
  }







  PreFifoDepthCtrlMutable &fifo_depth(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].fifo_depth(j0);
  }





  PreMaxL1NodeCtrlMutable &max_l1_node_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].max_l1_node_ctrl();
  }





  PreMaxL2NodeCtrlMutable &max_l2_node_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].max_l2_node_ctrl();
  }





  PreRdmCtrlMutable &rdm_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].rdm_ctrl();
  }





  PreFilterCtrlMutable &filter_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].filter_ctrl();
  }





  PreFilterMaskMutable &filter_mask(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].filter_mask();
  }





  PreRdmAddrCtrlMutable &rdm_addr_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].rdm_addr_ctrl();
  }





  PreIntStatMutable &int_stat(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].int_stat();
  }





  PreIntEn0Mutable &int_en0(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].int_en0();
  }





  PreIntEn1Mutable &int_en1(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].int_en1();
  }





  PreIntInjMutable &int_inj(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].int_inj();
  }





  PreFreezeEnMutable &freeze_en(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].freeze_en();
  }







  PreFifoPhCountMutable &fifo_ph_count(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].fifo_ph_count(j0);
  }







  PreTablePhCountMutable &table_ph_count(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].table_ph_count(j0);
  }





  PreCtr48CpuCopiesMutable &cpu_copies(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].cpu_copies();
  }





  PreCtr48PhProcessedMutable &ph_processed(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].ph_processed();
  }





  PreCtr48TotalCopiesMutable &total_copies(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].total_copies();
  }





  PreCtr48XidPrunesMutable &xid_prunes(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].xid_prunes();
  }





  PreCtr48YidPrunesMutable &yid_prunes(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].yid_prunes();
  }





  PreCtr48PhProcessedMutable &filtered_ph_processed(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].filtered_ph_processed();
  }





  PreCtr48TotalCopiesMutable &filtered_total_copies(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].filtered_total_copies();
  }





  PreCtr48XidPrunesMutable &filtered_xid_prunes(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].filtered_xid_prunes();
  }





  PreCtr48YidPrunesMutable &filtered_yid_prunes(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].filtered_yid_prunes();
  }





  PrePortVectorMutable &filtered_port_vector(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].filtered_port_vector();
  }







  PreRdmPhLogMutable &rdm_ph_log(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].rdm_ph_log(j0);
  }





  PreCtr48PhLostMutable &ph_lost(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].ph_lost();
  }





  PreCtr48PacketDropMutable &packet_drop(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].packet_drop();
  }





  PreMaxL1NodeLogMutable &max_l1_node_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].max_l1_node_log();
  }





  PreMaxL2NodeLogMutable &max_l2_node_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].max_l2_node_log();
  }





  PreIllegalL1NodeLogMutable &illegal_l1_node_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].illegal_l1_node_log();
  }





  PreIllegalL2NodeLogMutable &illegal_l2_node_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].illegal_l2_node_log();
  }





  PreSbeLogMutable &sbe_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].sbe_log();
  }





  PreMbeLogMutable &mbe_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].mbe_log();
  }





  PreFifoCreditLogMutable &credit_log(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].credit_log();
  }





  TmPrePipeRspecDebugBusCtrlMutable &debug_bus_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].debug_bus_ctrl();
  }
  bool calculate_index(
      uint32_t* offset, uint32_t* a0
      ) const {
    int i = (*offset)/32768;
    (*offset) -= (i*32768);
    uint32_t t = i;
    *a0 = t;
    bool in_bounds = true;
    in_bounds &= CheckArrayBounds(*a0,real_size0_,size0_,*offset,0,true);
    return in_bounds;
  }


  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return true;
    if (read_callback_) read_callback_(a0);
    array[a0].read(offset,data);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return true;
    array[a0].write(offset,data);
    if (write_callback_) write_callback_(a0);
    return true;
  }

  void reset(
      
      ) {
    for (uint32_t i=0;i<array.size();++i) {
      array[i].reset();
      int t = i;
      int a0 = t;
      if (write_callback_) write_callback_(a0);
    }
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return "OUT_OF_BOUNDS";
    std::string r_s = array[a0].to_string(print_zeros,indent_string+"  ");
    if (! r_s.empty()) {
      r += indent_string + std::string("TmPrePipeRspecArrayMutable") + "["+boost::lexical_cast<std::string>(a0)+"]"+ ":\n" + r_s ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<real_size0_;++a0) {
      std::string r_s = array[a0].to_string(print_zeros,indent_string+"  ");
      if (! r_s.empty()) {
        r += indent_string + std::string("TmPrePipeRspecArrayMutable") + "["+boost::lexical_cast<std::string>(a0)+"]"+ ":\n" + r_s ;
      }
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::vector<TmPrePipeRspecMutable> array;
  uint32_t size0_;
  uint32_t real_size0_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x200000; // to get to tm_pre_top
    return offset;
  }

  static int ArraySize(
      int dimension
      ) {
    switch (dimension) {
      case -1:
        return 4;
        break;
      case 0:
        return 4;
        break;
      default:
        assert(0);
        break;
    }
  }

  static int RealArraySize(
      int dimension
      ) {
    switch (dimension) {
      case -1:
        return 4;
        break;
      case 0:
        return 4;
        break;
      default:
        assert(0);
        break;
    }
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_TM_PRE_PIPE_RSPEC_ARRAY_MUTABLE_H__
