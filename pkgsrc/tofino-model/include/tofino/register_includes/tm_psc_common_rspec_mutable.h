/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_PSC_COMMON_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_TM_PSC_COMMON_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "psc_ba_blocks_freecnt_r_mutable.h"
#include "psc_bank_ctrl_r_mutable.h"
#include "psc_block_enable_r_mutable.h"
#include "psc_block_g_mutable.h"
#include "psc_block_linkmem_r_mutable.h"
#include "psc_block_ready_r_mutable.h"
#include "psc_block_reset_r_mutable.h"
#include "psc_block_valid_r_mutable.h"
#include "psc_ctrl_r_mutable.h"
#include "psc_epipe_g_mutable.h"
#include "psc_fa_full_threshold_r_mutable.h"
#include "psc_fa_hyst_threshold_r_mutable.h"
#include "psc_indir_access_addr_r_mutable.h"
#include "psc_psm_org_r_mutable.h"
#include "psc_timestamp_shift_r_mutable.h"
#include "psc_ts_offset_r_mutable.h"
#include "tm_psc_common_rspec_ecc_mutable.h"
#include "tm_psc_common_rspec_intr_mutable.h"
#include "tm_psc_common_rspec_linkmem_mbe_errlog_mutable.h"
#include "tm_psc_common_rspec_linkmem_sbe_errlog_mutable.h"
#include "tm_psc_common_rspec_lmem_indir_access_addr_mutable.h"
#include "tm_psc_common_rspec_overflow_errlog_mutable.h"
#include "tm_psc_common_rspec_underflow_errlog_mutable.h"

namespace tofino {
  namespace register_classes {

class TmPscCommonRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmPscCommonRspecMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 32768, true, write_callback, read_callback, std::string("TmPscCommonRspecMutable"))
    {
    }
  TmPscCommonRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "TmPscCommonRspecMutable")
    {
    }
public:






  PscPsmOrgRMutable &psm_org() { return psm_org_; }






  PscCtrlRMutable &ctrl() { return ctrl_; }







  PscTimestampShiftRMutable &timestamp_shift() { return timestamp_shift_; }







  PscFaFullThresholdRMutable &full_threshold() { return full_threshold_; }








  PscFaHystThresholdRMutable &hyst_threshold() { return hyst_threshold_; }






  PscTsOffsetRMutable &ts_offset() { return ts_offset_; }






  PscBlockValidRMutable &block_valid() { return block_valid_; }






  PscBlockResetRMutable &block_reset() { return block_reset_; }






  PscBlockEnableRMutable &block_enable() { return block_enable_; }






  PscBlockReadyRMutable &block_ready() { return block_ready_; }







  PscBaBlocksFreecntRMutable &blocks_freecnt() { return blocks_freecnt_; }








  PscIndirAccessAddrRMutable &bank_indir_access_addr() { return bank_indir_access_addr_; }







  PscBankCtrlRMutable &bank_indir_access_data() { return bank_indir_access_data_; }








  TmPscCommonRspecLmemIndirAccessAddrMutable &lmem_indir_access_addr() { return lmem_indir_access_addr_; }











  PscBlockLinkmemRMutable &lmem_indir_access_data() { return lmem_indir_access_data_; }








  TmPscCommonRspecEccMutable &ecc() { return ecc_; }





  TmPscCommonRspecLinkmemSbeErrlogMutable &linkmem_sbe_errlog() { return linkmem_sbe_errlog_; }





  TmPscCommonRspecLinkmemMbeErrlogMutable &linkmem_mbe_errlog() { return linkmem_mbe_errlog_; }





  TmPscCommonRspecOverflowErrlogMutable &overflow_errlog() { return overflow_errlog_; }





  TmPscCommonRspecUnderflowErrlogMutable &underflow_errlog() { return underflow_errlog_; }








  PscEpipeGMutable &epipe(int j0) { return epipe_[j0]; }







  PscBlockGMutable &block(int j0) { return block_[j0]; }
  TmPscCommonRspecIntrMutable &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      psm_org_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      ctrl_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      timestamp_shift_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      full_threshold_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      hyst_threshold_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      ts_offset_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x208) {
      offset -= 0x200;
      if (read_callback_) read_callback_();
      block_valid_.read( offset, data );
    }
    else if (offset >= 0x208 && offset < 0x210) {
      offset -= 0x208;
      if (read_callback_) read_callback_();
      block_reset_.read( offset, data );
    }
    else if (offset >= 0x210 && offset < 0x218) {
      offset -= 0x210;
      if (read_callback_) read_callback_();
      block_enable_.read( offset, data );
    }
    else if (offset >= 0x218 && offset < 0x220) {
      offset -= 0x218;
      if (read_callback_) read_callback_();
      block_ready_.read( offset, data );
    }
    else if (offset >= 0x220 && offset < 0x224) {
      offset -= 0x220;
      if (read_callback_) read_callback_();
      blocks_freecnt_.read( offset, data );
    }
    else if (offset >= 0x3000 && offset < 0x3004) {
      offset -= 0x3000;
      if (read_callback_) read_callback_();
      bank_indir_access_addr_.read( offset, data );
    }
    else if (offset >= 0x3008 && offset < 0x3010) {
      offset -= 0x3008;
      if (read_callback_) read_callback_();
      bank_indir_access_data_.read( offset, data );
    }
    else if (offset >= 0x3010 && offset < 0x3014) {
      offset -= 0x3010;
      if (read_callback_) read_callback_();
      lmem_indir_access_addr_.read( offset, data );
    }
    else if (offset >= 0x3014 && offset < 0x3018) {
      offset -= 0x3014;
      if (read_callback_) read_callback_();
      lmem_indir_access_data_.read( offset, data );
    }
    else if (offset >= 0x3020 && offset < 0x3034) {
      offset -= 0x3020;
      if (read_callback_) read_callback_();
      ecc_.read( offset, data );
    }
    else if (offset >= 0x3054 && offset < 0x3058) {
      offset -= 0x3054;
      if (read_callback_) read_callback_();
      linkmem_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x3058 && offset < 0x305c) {
      offset -= 0x3058;
      if (read_callback_) read_callback_();
      linkmem_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x305c && offset < 0x3060) {
      offset -= 0x305c;
      if (read_callback_) read_callback_();
      overflow_errlog_.read( offset, data );
    }
    else if (offset >= 0x3060 && offset < 0x3064) {
      offset -= 0x3060;
      if (read_callback_) read_callback_();
      underflow_errlog_.read( offset, data );
    }
    else if (offset >= 0x1000 && offset < 0x1060) {
      offset -= 0x1000;
      int i0 = offset / 0x18;
      offset  -= i0 * 0x18;
      if (read_callback_) read_callback_();
      epipe_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x2000 && offset < 0x21b0) {
      offset -= 0x2000;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      if (read_callback_) read_callback_();
      block_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3040 && offset < 0x3054) {
      offset -= 0x3040;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      psm_org_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      timestamp_shift_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      full_threshold_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      hyst_threshold_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      ts_offset_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x208) {
      offset -= 0x200;
      block_valid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x208 && offset < 0x210) {
      offset -= 0x208;
      block_reset_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x210 && offset < 0x218) {
      offset -= 0x210;
      block_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x218 && offset < 0x220) {
      offset -= 0x218;
      block_ready_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x220 && offset < 0x224) {
      offset -= 0x220;
      blocks_freecnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3000 && offset < 0x3004) {
      offset -= 0x3000;
      bank_indir_access_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3008 && offset < 0x3010) {
      offset -= 0x3008;
      bank_indir_access_data_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3010 && offset < 0x3014) {
      offset -= 0x3010;
      lmem_indir_access_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3014 && offset < 0x3018) {
      offset -= 0x3014;
      lmem_indir_access_data_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3020 && offset < 0x3034) {
      offset -= 0x3020;
      ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3054 && offset < 0x3058) {
      offset -= 0x3054;
      linkmem_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3058 && offset < 0x305c) {
      offset -= 0x3058;
      linkmem_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x305c && offset < 0x3060) {
      offset -= 0x305c;
      overflow_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3060 && offset < 0x3064) {
      offset -= 0x3060;
      underflow_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1000 && offset < 0x1060) {
      offset -= 0x1000;
      int i0 = offset / 0x18;
      offset  -= i0 * 0x18;
      epipe_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2000 && offset < 0x21b0) {
      offset -= 0x2000;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      block_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3040 && offset < 0x3054) {
      offset -= 0x3040;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    psm_org_.reset();
    ctrl_.reset();
    timestamp_shift_.reset();
    full_threshold_.reset();
    hyst_threshold_.reset();
    ts_offset_.reset();
    block_valid_.reset();
    block_reset_.reset();
    block_enable_.reset();
    block_ready_.reset();
    blocks_freecnt_.reset();
    bank_indir_access_addr_.reset();
    bank_indir_access_data_.reset();
    lmem_indir_access_addr_.reset();
    lmem_indir_access_data_.reset();
    ecc_.reset();
    linkmem_sbe_errlog_.reset();
    linkmem_mbe_errlog_.reset();
    overflow_errlog_.reset();
    underflow_errlog_.reset();
    for (auto &f0 : epipe_) {
      f0.reset();
    }
    for (auto &f0 : block_) {
      f0.reset();
    }
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += psm_org_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += timestamp_shift_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += full_threshold_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += hyst_threshold_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += ts_offset_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x208) {
      offset -= 0x200;
      r += block_valid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x208 && offset < 0x210) {
      offset -= 0x208;
      r += block_reset_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x210 && offset < 0x218) {
      offset -= 0x210;
      r += block_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x218 && offset < 0x220) {
      offset -= 0x218;
      r += block_ready_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x220 && offset < 0x224) {
      offset -= 0x220;
      r += blocks_freecnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3000 && offset < 0x3004) {
      offset -= 0x3000;
      r += bank_indir_access_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3008 && offset < 0x3010) {
      offset -= 0x3008;
      r += bank_indir_access_data_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3010 && offset < 0x3014) {
      offset -= 0x3010;
      r += lmem_indir_access_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3014 && offset < 0x3018) {
      offset -= 0x3014;
      r += lmem_indir_access_data_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3020 && offset < 0x3034) {
      offset -= 0x3020;
      r += ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3054 && offset < 0x3058) {
      offset -= 0x3054;
      r += linkmem_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3058 && offset < 0x305c) {
      offset -= 0x3058;
      r += linkmem_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x305c && offset < 0x3060) {
      offset -= 0x305c;
      r += overflow_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3060 && offset < 0x3064) {
      offset -= 0x3060;
      r += underflow_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1000 && offset < 0x1060) {
      offset -= 0x1000;
      int i0 = offset / 0x18;
      offset  -= i0 * 0x18;
      r += epipe_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2000 && offset < 0x21b0) {
      offset -= 0x2000;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      r += block_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3040 && offset < 0x3054) {
      offset -= 0x3040;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += psm_org_.to_string(print_zeros,indent_string) ;
    r += ctrl_.to_string(print_zeros,indent_string) ;
    r += timestamp_shift_.to_string(print_zeros,indent_string) ;
    r += full_threshold_.to_string(print_zeros,indent_string) ;
    r += hyst_threshold_.to_string(print_zeros,indent_string) ;
    r += ts_offset_.to_string(print_zeros,indent_string) ;
    r += block_valid_.to_string(print_zeros,indent_string) ;
    r += block_reset_.to_string(print_zeros,indent_string) ;
    r += block_enable_.to_string(print_zeros,indent_string) ;
    r += block_ready_.to_string(print_zeros,indent_string) ;
    r += blocks_freecnt_.to_string(print_zeros,indent_string) ;
    r += bank_indir_access_addr_.to_string(print_zeros,indent_string) ;
    r += bank_indir_access_data_.to_string(print_zeros,indent_string) ;
    r += lmem_indir_access_addr_.to_string(print_zeros,indent_string) ;
    r += lmem_indir_access_data_.to_string(print_zeros,indent_string) ;
    r += ecc_.to_string(print_zeros,indent_string) ;
    r += linkmem_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += linkmem_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += overflow_errlog_.to_string(print_zeros,indent_string) ;
    r += underflow_errlog_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += epipe_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<36;++a0) {
      r += block_[a0].to_string(print_zeros,indent_string) ;
    }
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  PscPsmOrgRMutable psm_org_;
  PscCtrlRMutable ctrl_;
  PscTimestampShiftRMutable timestamp_shift_;
  PscFaFullThresholdRMutable full_threshold_;
  PscFaHystThresholdRMutable hyst_threshold_;
  PscTsOffsetRMutable ts_offset_;
  PscBlockValidRMutable block_valid_;
  PscBlockResetRMutable block_reset_;
  PscBlockEnableRMutable block_enable_;
  PscBlockReadyRMutable block_ready_;
  PscBaBlocksFreecntRMutable blocks_freecnt_;
  PscIndirAccessAddrRMutable bank_indir_access_addr_;
  PscBankCtrlRMutable bank_indir_access_data_;
  TmPscCommonRspecLmemIndirAccessAddrMutable lmem_indir_access_addr_;
  PscBlockLinkmemRMutable lmem_indir_access_data_;
  TmPscCommonRspecEccMutable ecc_;
  TmPscCommonRspecLinkmemSbeErrlogMutable linkmem_sbe_errlog_;
  TmPscCommonRspecLinkmemMbeErrlogMutable linkmem_mbe_errlog_;
  TmPscCommonRspecOverflowErrlogMutable overflow_errlog_;
  TmPscCommonRspecUnderflowErrlogMutable underflow_errlog_;
  std::array< PscEpipeGMutable, 4 > epipe_;
  std::array< PscBlockGMutable, 36 > block_;
  TmPscCommonRspecIntrMutable intr_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x240000; // to get to tm_psc_top
    offset += 0x20000; // to get to psc_common
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_TM_PSC_COMMON_RSPEC_MUTABLE_H__
