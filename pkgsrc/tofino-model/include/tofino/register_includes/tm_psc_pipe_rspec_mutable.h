/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_PSC_PIPE_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_TM_PSC_PIPE_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "psc_ph_used_mutable.h"
#include "psc_psm_indir_access_addr_r_mutable.h"
#include "psc_psm_indir_access_data_r_mutable.h"
#include "tm_psc_pipe_rspec_debug_bus_ctrl_mutable.h"
#include "tm_psc_pipe_rspec_ecc_mutable.h"
#include "tm_psc_pipe_rspec_intr_mutable.h"
#include "tm_psc_pipe_rspec_psm_mbe_errlog_mutable.h"
#include "tm_psc_pipe_rspec_psm_sbe_errlog_mutable.h"

namespace tofino {
  namespace register_classes {

class TmPscPipeRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmPscPipeRspecMutable(
      int chipNumber, int index_tm_psc_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_psc_pipe_rspec), 32768, true, write_callback, read_callback, std::string("TmPscPipeRspecMutable")+":"+boost::lexical_cast<std::string>(index_tm_psc_pipe_rspec))
    {
    }
  TmPscPipeRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "TmPscPipeRspecMutable")
    {
    }
public:





  PscPhUsedMutable &psc_ph_used() { return psc_ph_used_; }








  TmPscPipeRspecEccMutable &ecc() { return ecc_; }





  TmPscPipeRspecPsmSbeErrlogMutable &psm_sbe_errlog() { return psm_sbe_errlog_; }





  TmPscPipeRspecPsmMbeErrlogMutable &psm_mbe_errlog() { return psm_mbe_errlog_; }








  PscPsmIndirAccessAddrRMutable &psm_indir_access_addr() { return psm_indir_access_addr_; }







  PscPsmIndirAccessDataRMutable &psm_indir_access_data() { return psm_indir_access_data_; }





  TmPscPipeRspecDebugBusCtrlMutable &debug_bus_ctrl() { return debug_bus_ctrl_; }
  TmPscPipeRspecIntrMutable &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      psc_ph_used_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      ecc_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      psm_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      psm_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      psm_indir_access_addr_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x58) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      psm_indir_access_data_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      debug_bus_ctrl_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      psc_ph_used_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      psm_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      psm_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      psm_indir_access_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x58) {
      offset -= 0x40;
      psm_indir_access_data_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      debug_bus_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    psc_ph_used_.reset();
    ecc_.reset();
    psm_sbe_errlog_.reset();
    psm_mbe_errlog_.reset();
    psm_indir_access_addr_.reset();
    psm_indir_access_data_.reset();
    debug_bus_ctrl_.reset();
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += psc_ph_used_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += psm_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += psm_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += psm_indir_access_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x58) {
      offset -= 0x40;
      r += psm_indir_access_data_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x5c) {
      offset -= 0x58;
      r += debug_bus_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += psc_ph_used_.to_string(print_zeros,indent_string) ;
    r += ecc_.to_string(print_zeros,indent_string) ;
    r += psm_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += psm_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += psm_indir_access_addr_.to_string(print_zeros,indent_string) ;
    r += psm_indir_access_data_.to_string(print_zeros,indent_string) ;
    r += debug_bus_ctrl_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  PscPhUsedMutable psc_ph_used_;
  TmPscPipeRspecEccMutable ecc_;
  TmPscPipeRspecPsmSbeErrlogMutable psm_sbe_errlog_;
  TmPscPipeRspecPsmMbeErrlogMutable psm_mbe_errlog_;
  PscPsmIndirAccessAddrRMutable psm_indir_access_addr_;
  PscPsmIndirAccessDataRMutable psm_indir_access_data_;
  TmPscPipeRspecDebugBusCtrlMutable debug_bus_ctrl_;
  TmPscPipeRspecIntrMutable intr_;
private:
  static int StartOffset(
      int index_tm_psc_pipe_rspec
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x240000; // to get to tm_psc_top
    assert(index_tm_psc_pipe_rspec < 4);
    offset += index_tm_psc_pipe_rspec * 0x8000; // tm_psc_pipe_rspec[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_TM_PSC_PIPE_RSPEC_MUTABLE_H__
