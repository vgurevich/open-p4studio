/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_WAC_PIPE_RSPEC_H__
#define __REGISTER_INCLUDES_TM_WAC_PIPE_RSPEC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "pipe_reg.h"
#include "wac_port_cnt.h"
#include "wac_port_max_lmt.h"
#include "wac_port_ppg_mapping.h"
#include "wac_port_wm_cnt.h"
#include "wac_ppg_hdr_cnt.h"
#include "wac_ppg_hdr_lmt.h"
#include "wac_ppg_icos_mapping.h"
#include "wac_ppg_min_cnt.h"
#include "wac_ppg_min_lmt.h"
#include "wac_ppg_resume.h"
#include "wac_ppg_shr_cnt.h"
#include "wac_ppg_shr_lmt.h"
#include "wac_ppg_wm_cnt.h"

namespace tofino {
  namespace register_classes {

class TmWacPipeRspec : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmWacPipeRspec(
      int chipNumber, int index_tm_wac_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_wac_pipe_rspec), 32768, false, write_callback, read_callback, std::string("TmWacPipeRspec")+":"+boost::lexical_cast<std::string>(index_tm_wac_pipe_rspec))
    {
    }
  TmWacPipeRspec(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "TmWacPipeRspec")
    {
    }
public:
  PipeReg &wac_reg() { return wac_reg_; }







  WacPpgMinLmt &csr_mem_wac_ppg_min_lmt() { return csr_mem_wac_ppg_min_lmt_; }







  WacPpgHdrLmt &csr_mem_wac_ppg_hdr_lmt() { return csr_mem_wac_ppg_hdr_lmt_; }






  WacPortMaxLmt &csr_mem_wac_port_max_lmt() { return csr_mem_wac_port_max_lmt_; }







  WacPpgShrCnt &csr_mem_wac_ppg_shr_cnt() { return csr_mem_wac_ppg_shr_cnt_; }








  WacPpgMinCnt &csr_mem_wac_ppg_min_cnt() { return csr_mem_wac_ppg_min_cnt_; }







  WacPpgHdrCnt &csr_mem_wac_ppg_hdr_cnt() { return csr_mem_wac_ppg_hdr_cnt_; }










  WacPpgResume &csr_mem_wac_ppg_resume() { return csr_mem_wac_ppg_resume_; }






  WacPortPpgMapping &csr_mem_wac_port_ppg_mapping() { return csr_mem_wac_port_ppg_mapping_; }







  WacPpgShrLmt &csr_mem_wac_ppg_shr_lmt() { return csr_mem_wac_ppg_shr_lmt_; }






  WacPpgWmCnt &csr_mem_wac_ppg_wm_cnt() { return csr_mem_wac_ppg_wm_cnt_; }










  WacPpgIcosMapping &csr_mem_wac_ppg_icos_mapping() { return csr_mem_wac_ppg_icos_mapping_; }






  WacPortCnt &csr_mem_wac_port_cnt() { return csr_mem_wac_port_cnt_; }






  WacPortWmCnt &csr_mem_wac_port_wm_cnt() { return csr_mem_wac_port_wm_cnt_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x1984) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      wac_reg_.read( offset, data );
    }
    else if (offset >= 0x1c00 && offset < 0x1f24) {
      offset -= 0x1c00;
      if (read_callback_) read_callback_();
      csr_mem_wac_ppg_min_lmt_.read( offset, data );
    }
    else if (offset >= 0x2000 && offset < 0x2200) {
      offset -= 0x2000;
      if (read_callback_) read_callback_();
      csr_mem_wac_ppg_hdr_lmt_.read( offset, data );
    }
    else if (offset >= 0x2200 && offset < 0x2324) {
      offset -= 0x2200;
      if (read_callback_) read_callback_();
      csr_mem_wac_port_max_lmt_.read( offset, data );
    }
    else if (offset >= 0x2400 && offset < 0x2724) {
      offset -= 0x2400;
      if (read_callback_) read_callback_();
      csr_mem_wac_ppg_shr_cnt_.read( offset, data );
    }
    else if (offset >= 0x2800 && offset < 0x2b24) {
      offset -= 0x2800;
      if (read_callback_) read_callback_();
      csr_mem_wac_ppg_min_cnt_.read( offset, data );
    }
    else if (offset >= 0x2c00 && offset < 0x2e00) {
      offset -= 0x2c00;
      if (read_callback_) read_callback_();
      csr_mem_wac_ppg_hdr_cnt_.read( offset, data );
    }
    else if (offset >= 0x3000 && offset < 0x3324) {
      offset -= 0x3000;
      if (read_callback_) read_callback_();
      csr_mem_wac_ppg_resume_.read( offset, data );
    }
    else if (offset >= 0x3800 && offset < 0x3c90) {
      offset -= 0x3800;
      if (read_callback_) read_callback_();
      csr_mem_wac_port_ppg_mapping_.read( offset, data );
    }
    else if (offset >= 0x4000 && offset < 0x4324) {
      offset -= 0x4000;
      if (read_callback_) read_callback_();
      csr_mem_wac_ppg_shr_lmt_.read( offset, data );
    }
    else if (offset >= 0x4400 && offset < 0x4724) {
      offset -= 0x4400;
      if (read_callback_) read_callback_();
      csr_mem_wac_ppg_wm_cnt_.read( offset, data );
    }
    else if (offset >= 0x4800 && offset < 0x4a00) {
      offset -= 0x4800;
      if (read_callback_) read_callback_();
      csr_mem_wac_ppg_icos_mapping_.read( offset, data );
    }
    else if (offset >= 0x4a00 && offset < 0x4b24) {
      offset -= 0x4a00;
      if (read_callback_) read_callback_();
      csr_mem_wac_port_cnt_.read( offset, data );
    }
    else if (offset >= 0x4c00 && offset < 0x4d24) {
      offset -= 0x4c00;
      if (read_callback_) read_callback_();
      csr_mem_wac_port_wm_cnt_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x1984) {
      offset -= 0x0;
      wac_reg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c00 && offset < 0x1f24) {
      offset -= 0x1c00;
      csr_mem_wac_ppg_min_lmt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2000 && offset < 0x2200) {
      offset -= 0x2000;
      csr_mem_wac_ppg_hdr_lmt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2200 && offset < 0x2324) {
      offset -= 0x2200;
      csr_mem_wac_port_max_lmt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2400 && offset < 0x2724) {
      offset -= 0x2400;
      csr_mem_wac_ppg_shr_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2800 && offset < 0x2b24) {
      offset -= 0x2800;
      csr_mem_wac_ppg_min_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c00 && offset < 0x2e00) {
      offset -= 0x2c00;
      csr_mem_wac_ppg_hdr_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3000 && offset < 0x3324) {
      offset -= 0x3000;
      csr_mem_wac_ppg_resume_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3800 && offset < 0x3c90) {
      offset -= 0x3800;
      csr_mem_wac_port_ppg_mapping_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4000 && offset < 0x4324) {
      offset -= 0x4000;
      csr_mem_wac_ppg_shr_lmt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4400 && offset < 0x4724) {
      offset -= 0x4400;
      csr_mem_wac_ppg_wm_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4800 && offset < 0x4a00) {
      offset -= 0x4800;
      csr_mem_wac_ppg_icos_mapping_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4a00 && offset < 0x4b24) {
      offset -= 0x4a00;
      csr_mem_wac_port_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c00 && offset < 0x4d24) {
      offset -= 0x4c00;
      csr_mem_wac_port_wm_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    wac_reg_.reset();
    csr_mem_wac_ppg_min_lmt_.reset();
    csr_mem_wac_ppg_hdr_lmt_.reset();
    csr_mem_wac_port_max_lmt_.reset();
    csr_mem_wac_ppg_shr_cnt_.reset();
    csr_mem_wac_ppg_min_cnt_.reset();
    csr_mem_wac_ppg_hdr_cnt_.reset();
    csr_mem_wac_ppg_resume_.reset();
    csr_mem_wac_port_ppg_mapping_.reset();
    csr_mem_wac_ppg_shr_lmt_.reset();
    csr_mem_wac_ppg_wm_cnt_.reset();
    csr_mem_wac_ppg_icos_mapping_.reset();
    csr_mem_wac_port_cnt_.reset();
    csr_mem_wac_port_wm_cnt_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x1984) {
      offset -= 0x0;
      r += wac_reg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c00 && offset < 0x1f24) {
      offset -= 0x1c00;
      r += csr_mem_wac_ppg_min_lmt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2000 && offset < 0x2200) {
      offset -= 0x2000;
      r += csr_mem_wac_ppg_hdr_lmt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2200 && offset < 0x2324) {
      offset -= 0x2200;
      r += csr_mem_wac_port_max_lmt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2400 && offset < 0x2724) {
      offset -= 0x2400;
      r += csr_mem_wac_ppg_shr_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2800 && offset < 0x2b24) {
      offset -= 0x2800;
      r += csr_mem_wac_ppg_min_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c00 && offset < 0x2e00) {
      offset -= 0x2c00;
      r += csr_mem_wac_ppg_hdr_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3000 && offset < 0x3324) {
      offset -= 0x3000;
      r += csr_mem_wac_ppg_resume_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3800 && offset < 0x3c90) {
      offset -= 0x3800;
      r += csr_mem_wac_port_ppg_mapping_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4000 && offset < 0x4324) {
      offset -= 0x4000;
      r += csr_mem_wac_ppg_shr_lmt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4400 && offset < 0x4724) {
      offset -= 0x4400;
      r += csr_mem_wac_ppg_wm_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4800 && offset < 0x4a00) {
      offset -= 0x4800;
      r += csr_mem_wac_ppg_icos_mapping_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4a00 && offset < 0x4b24) {
      offset -= 0x4a00;
      r += csr_mem_wac_port_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c00 && offset < 0x4d24) {
      offset -= 0x4c00;
      r += csr_mem_wac_port_wm_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += wac_reg_.to_string(print_zeros,indent_string) ;
    r += csr_mem_wac_ppg_min_lmt_.to_string(print_zeros,indent_string) ;
    r += csr_mem_wac_ppg_hdr_lmt_.to_string(print_zeros,indent_string) ;
    r += csr_mem_wac_port_max_lmt_.to_string(print_zeros,indent_string) ;
    r += csr_mem_wac_ppg_shr_cnt_.to_string(print_zeros,indent_string) ;
    r += csr_mem_wac_ppg_min_cnt_.to_string(print_zeros,indent_string) ;
    r += csr_mem_wac_ppg_hdr_cnt_.to_string(print_zeros,indent_string) ;
    r += csr_mem_wac_ppg_resume_.to_string(print_zeros,indent_string) ;
    r += csr_mem_wac_port_ppg_mapping_.to_string(print_zeros,indent_string) ;
    r += csr_mem_wac_ppg_shr_lmt_.to_string(print_zeros,indent_string) ;
    r += csr_mem_wac_ppg_wm_cnt_.to_string(print_zeros,indent_string) ;
    r += csr_mem_wac_ppg_icos_mapping_.to_string(print_zeros,indent_string) ;
    r += csr_mem_wac_port_cnt_.to_string(print_zeros,indent_string) ;
    r += csr_mem_wac_port_wm_cnt_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  PipeReg wac_reg_;
  WacPpgMinLmt csr_mem_wac_ppg_min_lmt_;
  WacPpgHdrLmt csr_mem_wac_ppg_hdr_lmt_;
  WacPortMaxLmt csr_mem_wac_port_max_lmt_;
  WacPpgShrCnt csr_mem_wac_ppg_shr_cnt_;
  WacPpgMinCnt csr_mem_wac_ppg_min_cnt_;
  WacPpgHdrCnt csr_mem_wac_ppg_hdr_cnt_;
  WacPpgResume csr_mem_wac_ppg_resume_;
  WacPortPpgMapping csr_mem_wac_port_ppg_mapping_;
  WacPpgShrLmt csr_mem_wac_ppg_shr_lmt_;
  WacPpgWmCnt csr_mem_wac_ppg_wm_cnt_;
  WacPpgIcosMapping csr_mem_wac_ppg_icos_mapping_;
  WacPortCnt csr_mem_wac_port_cnt_;
  WacPortWmCnt csr_mem_wac_port_wm_cnt_;
private:
  static int StartOffset(
      int index_tm_wac_pipe_rspec
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    assert(index_tm_wac_pipe_rspec < 4);
    offset += index_tm_wac_pipe_rspec * 0x8000; // tm_wac_pipe_rspec[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_TM_WAC_PIPE_RSPEC_H__
