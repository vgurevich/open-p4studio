/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_WAC_COMMON_BLOCK_MUTABLE_H__
#define __REGISTER_INCLUDES_WAC_COMMON_BLOCK_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "wac_ap_cnt_cell_mutable.h"
#include "wac_ap_limit_cell_mutable.h"
#include "wac_ap_offset_cell_mutable.h"
#include "wac_ap_red_limit_cell_mutable.h"
#include "wac_ap_red_offset_cell_mutable.h"
#include "wac_ap_yel_limit_cell_mutable.h"
#include "wac_ap_yel_offset_cell_mutable.h"
#include "wac_dod_cnt_cell_mutable.h"
#include "wac_dod_limit_cell_mutable.h"
#include "wac_drop_cnt_pre_fifo_mutable.h"
#include "wac_egress_qid_mapping_mutable.h"
#include "wac_glb_config_mutable.h"
#include "wac_hdr_cnt_cell_mutable.h"
#include "wac_hdr_limit_cell_mutable.h"
#include "wac_hdr_offset_cell_mutable.h"
#include "wac_intr_status_mutable.h"
#include "wac_mem_init_done_mutable.h"
#include "wac_pfc_pool_limit_cell_mutable.h"
#include "wac_wm_ap_cnt_cell_mutable.h"
#include "wac_wm_hdr_cnt_cell_mutable.h"

namespace tofino {
  namespace register_classes {

class WacCommonBlockMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  WacCommonBlockMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4096, true, write_callback, read_callback, std::string("WacCommonBlockMutable"))
    {
    }
  WacCommonBlockMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "WacCommonBlockMutable")
    {
    }
public:





  WacIntrStatusMutable &wac_common_wac_intr_status() { return wac_common_wac_intr_status_; }





  WacGlbConfigMutable &wac_common_wac_glb_config() { return wac_common_wac_glb_config_; }





  WacMemInitDoneMutable &wac_common_wac_mem_init_done() { return wac_common_wac_mem_init_done_; }







  WacApLimitCellMutable &wac_common_wac_ap_limit_cell(int j0) { return wac_common_wac_ap_limit_cell_[j0]; }





  WacApOffsetCellMutable &wac_common_wac_ap_offset_cell() { return wac_common_wac_ap_offset_cell_; }







  WacApRedLimitCellMutable &wac_common_wac_ap_red_limit_cell(int j0) { return wac_common_wac_ap_red_limit_cell_[j0]; }





  WacApRedOffsetCellMutable &wac_common_wac_ap_red_offset_cell() { return wac_common_wac_ap_red_offset_cell_; }







  WacApYelLimitCellMutable &wac_common_wac_ap_yel_limit_cell(int j0) { return wac_common_wac_ap_yel_limit_cell_[j0]; }





  WacApYelOffsetCellMutable &wac_common_wac_ap_yel_offset_cell() { return wac_common_wac_ap_yel_offset_cell_; }





  WacDodLimitCellMutable &wac_common_wac_dod_limit_cell() { return wac_common_wac_dod_limit_cell_; }







  WacApCntCellMutable &wac_common_wac_ap_cnt_cell(int j0) { return wac_common_wac_ap_cnt_cell_[j0]; }







  WacWmApCntCellMutable &wac_common_wac_wm_ap_cnt_cell(int j0) { return wac_common_wac_wm_ap_cnt_cell_[j0]; }





  WacHdrCntCellMutable &wac_common_wac_hdr_cnt_cell() { return wac_common_wac_hdr_cnt_cell_; }





  WacWmHdrCntCellMutable &wac_common_wac_wm_hdr_cnt_cell() { return wac_common_wac_wm_hdr_cnt_cell_; }





  WacHdrLimitCellMutable &wac_common_wac_hdr_limit_cell() { return wac_common_wac_hdr_limit_cell_; }





  WacHdrOffsetCellMutable &wac_common_wac_hdr_offset_cell() { return wac_common_wac_hdr_offset_cell_; }





  WacDodCntCellMutable &wac_common_wac_dod_cnt_cell() { return wac_common_wac_dod_cnt_cell_; }







  WacPfcPoolLimitCellMutable &wac_common_wac_pfc_pool_0_limit_cell(int j0) { return wac_common_wac_pfc_pool_0_limit_cell_[j0]; }







  WacPfcPoolLimitCellMutable &wac_common_wac_pfc_pool_1_limit_cell(int j0) { return wac_common_wac_pfc_pool_1_limit_cell_[j0]; }







  WacPfcPoolLimitCellMutable &wac_common_wac_pfc_pool_2_limit_cell(int j0) { return wac_common_wac_pfc_pool_2_limit_cell_[j0]; }







  WacPfcPoolLimitCellMutable &wac_common_wac_pfc_pool_3_limit_cell(int j0) { return wac_common_wac_pfc_pool_3_limit_cell_[j0]; }







  WacDropCntPreFifoMutable &wac_common_wac_drop_cnt_pre0_fifo(int j0) { return wac_common_wac_drop_cnt_pre0_fifo_[j0]; }







  WacDropCntPreFifoMutable &wac_common_wac_drop_cnt_pre1_fifo(int j0) { return wac_common_wac_drop_cnt_pre1_fifo_[j0]; }







  WacDropCntPreFifoMutable &wac_common_wac_drop_cnt_pre2_fifo(int j0) { return wac_common_wac_drop_cnt_pre2_fifo_[j0]; }







  WacDropCntPreFifoMutable &wac_common_wac_drop_cnt_pre3_fifo(int j0) { return wac_common_wac_drop_cnt_pre3_fifo_[j0]; }








  WacEgressQidMappingMutable &wac_common_wac_egress_qid_mapping(int j0) { return wac_common_wac_egress_qid_mapping_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      wac_common_wac_intr_status_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      wac_common_wac_glb_config_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      wac_common_wac_mem_init_done_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_ap_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      wac_common_wac_ap_offset_cell_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x50) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_ap_red_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      wac_common_wac_ap_red_offset_cell_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x70) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_ap_yel_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      if (read_callback_) read_callback_();
      wac_common_wac_ap_yel_offset_cell_.read( offset, data );
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      if (read_callback_) read_callback_();
      wac_common_wac_dod_limit_cell_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x90) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_ap_cnt_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_wm_ap_cnt_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      if (read_callback_) read_callback_();
      wac_common_wac_hdr_cnt_cell_.read( offset, data );
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      if (read_callback_) read_callback_();
      wac_common_wac_wm_hdr_cnt_cell_.read( offset, data );
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      if (read_callback_) read_callback_();
      wac_common_wac_hdr_limit_cell_.read( offset, data );
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      if (read_callback_) read_callback_();
      wac_common_wac_hdr_offset_cell_.read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      if (read_callback_) read_callback_();
      wac_common_wac_dod_cnt_cell_.read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xe0) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_pfc_pool_0_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0x100) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_pfc_pool_1_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x120) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_pfc_pool_2_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x120 && offset < 0x140) {
      offset -= 0x120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_pfc_pool_3_limit_cell_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x160) {
      offset -= 0x140;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      wac_common_wac_drop_cnt_pre0_fifo_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x160 && offset < 0x180) {
      offset -= 0x160;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      wac_common_wac_drop_cnt_pre1_fifo_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x1a0) {
      offset -= 0x180;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      wac_common_wac_drop_cnt_pre2_fifo_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1a0 && offset < 0x1c0) {
      offset -= 0x1a0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      wac_common_wac_drop_cnt_pre3_fifo_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x800 && offset < 0x1000) {
      offset -= 0x800;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      wac_common_wac_egress_qid_mapping_[ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      wac_common_wac_intr_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      wac_common_wac_glb_config_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      wac_common_wac_mem_init_done_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_ap_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      wac_common_wac_ap_offset_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x50) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_ap_red_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      wac_common_wac_ap_red_offset_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x70) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_ap_yel_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      wac_common_wac_ap_yel_offset_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      wac_common_wac_dod_limit_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x90) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_ap_cnt_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_wm_ap_cnt_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      wac_common_wac_hdr_cnt_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      wac_common_wac_wm_hdr_cnt_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      wac_common_wac_hdr_limit_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      wac_common_wac_hdr_offset_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      wac_common_wac_dod_cnt_cell_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xe0) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_pfc_pool_0_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0x100) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_pfc_pool_1_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x120) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_pfc_pool_2_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x120 && offset < 0x140) {
      offset -= 0x120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_pfc_pool_3_limit_cell_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x160) {
      offset -= 0x140;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      wac_common_wac_drop_cnt_pre0_fifo_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x160 && offset < 0x180) {
      offset -= 0x160;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      wac_common_wac_drop_cnt_pre1_fifo_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x1a0) {
      offset -= 0x180;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      wac_common_wac_drop_cnt_pre2_fifo_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1a0 && offset < 0x1c0) {
      offset -= 0x1a0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      wac_common_wac_drop_cnt_pre3_fifo_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x800 && offset < 0x1000) {
      offset -= 0x800;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      wac_common_wac_egress_qid_mapping_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    wac_common_wac_intr_status_.reset();
    wac_common_wac_glb_config_.reset();
    wac_common_wac_mem_init_done_.reset();
    for (auto &f0 : wac_common_wac_ap_limit_cell_) {
      f0.reset();
    }
    wac_common_wac_ap_offset_cell_.reset();
    for (auto &f0 : wac_common_wac_ap_red_limit_cell_) {
      f0.reset();
    }
    wac_common_wac_ap_red_offset_cell_.reset();
    for (auto &f0 : wac_common_wac_ap_yel_limit_cell_) {
      f0.reset();
    }
    wac_common_wac_ap_yel_offset_cell_.reset();
    wac_common_wac_dod_limit_cell_.reset();
    for (auto &f0 : wac_common_wac_ap_cnt_cell_) {
      f0.reset();
    }
    for (auto &f0 : wac_common_wac_wm_ap_cnt_cell_) {
      f0.reset();
    }
    wac_common_wac_hdr_cnt_cell_.reset();
    wac_common_wac_wm_hdr_cnt_cell_.reset();
    wac_common_wac_hdr_limit_cell_.reset();
    wac_common_wac_hdr_offset_cell_.reset();
    wac_common_wac_dod_cnt_cell_.reset();
    for (auto &f0 : wac_common_wac_pfc_pool_0_limit_cell_) {
      f0.reset();
    }
    for (auto &f0 : wac_common_wac_pfc_pool_1_limit_cell_) {
      f0.reset();
    }
    for (auto &f0 : wac_common_wac_pfc_pool_2_limit_cell_) {
      f0.reset();
    }
    for (auto &f0 : wac_common_wac_pfc_pool_3_limit_cell_) {
      f0.reset();
    }
    for (auto &f0 : wac_common_wac_drop_cnt_pre0_fifo_) {
      f0.reset();
    }
    for (auto &f0 : wac_common_wac_drop_cnt_pre1_fifo_) {
      f0.reset();
    }
    for (auto &f0 : wac_common_wac_drop_cnt_pre2_fifo_) {
      f0.reset();
    }
    for (auto &f0 : wac_common_wac_drop_cnt_pre3_fifo_) {
      f0.reset();
    }
    for (auto &f0 : wac_common_wac_egress_qid_mapping_) {
      f0.reset();
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += wac_common_wac_intr_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += wac_common_wac_glb_config_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += wac_common_wac_mem_init_done_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_ap_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += wac_common_wac_ap_offset_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x50) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_ap_red_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      r += wac_common_wac_ap_red_offset_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x70) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_ap_yel_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      r += wac_common_wac_ap_yel_offset_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      r += wac_common_wac_dod_limit_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x90) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_ap_cnt_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_wm_ap_cnt_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      r += wac_common_wac_hdr_cnt_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      r += wac_common_wac_wm_hdr_cnt_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      r += wac_common_wac_hdr_limit_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      r += wac_common_wac_hdr_offset_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      r += wac_common_wac_dod_cnt_cell_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xe0) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_pfc_pool_0_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0x100) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_pfc_pool_1_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x120) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_pfc_pool_2_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x120 && offset < 0x140) {
      offset -= 0x120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_pfc_pool_3_limit_cell_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x160) {
      offset -= 0x140;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += wac_common_wac_drop_cnt_pre0_fifo_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x160 && offset < 0x180) {
      offset -= 0x160;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += wac_common_wac_drop_cnt_pre1_fifo_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x1a0) {
      offset -= 0x180;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += wac_common_wac_drop_cnt_pre2_fifo_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1a0 && offset < 0x1c0) {
      offset -= 0x1a0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += wac_common_wac_drop_cnt_pre3_fifo_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x800 && offset < 0x1000) {
      offset -= 0x800;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += wac_common_wac_egress_qid_mapping_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += wac_common_wac_intr_status_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_glb_config_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_mem_init_done_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_common_wac_ap_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wac_common_wac_ap_offset_cell_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_common_wac_ap_red_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wac_common_wac_ap_red_offset_cell_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_common_wac_ap_yel_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wac_common_wac_ap_yel_offset_cell_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_dod_limit_cell_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_common_wac_ap_cnt_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_common_wac_wm_ap_cnt_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    r += wac_common_wac_hdr_cnt_cell_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_wm_hdr_cnt_cell_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_hdr_limit_cell_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_hdr_offset_cell_.to_string(print_zeros,indent_string) ;
    r += wac_common_wac_dod_cnt_cell_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<8;++a0) {
      r += wac_common_wac_pfc_pool_0_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += wac_common_wac_pfc_pool_1_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += wac_common_wac_pfc_pool_2_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += wac_common_wac_pfc_pool_3_limit_cell_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_common_wac_drop_cnt_pre0_fifo_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_common_wac_drop_cnt_pre1_fifo_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_common_wac_drop_cnt_pre2_fifo_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += wac_common_wac_drop_cnt_pre3_fifo_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<512;++a0) {
      r += wac_common_wac_egress_qid_mapping_[a0].to_string(print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  WacIntrStatusMutable wac_common_wac_intr_status_;
  WacGlbConfigMutable wac_common_wac_glb_config_;
  WacMemInitDoneMutable wac_common_wac_mem_init_done_;
  std::array< WacApLimitCellMutable, 4 > wac_common_wac_ap_limit_cell_;
  WacApOffsetCellMutable wac_common_wac_ap_offset_cell_;
  std::array< WacApRedLimitCellMutable, 4 > wac_common_wac_ap_red_limit_cell_;
  WacApRedOffsetCellMutable wac_common_wac_ap_red_offset_cell_;
  std::array< WacApYelLimitCellMutable, 4 > wac_common_wac_ap_yel_limit_cell_;
  WacApYelOffsetCellMutable wac_common_wac_ap_yel_offset_cell_;
  WacDodLimitCellMutable wac_common_wac_dod_limit_cell_;
  std::array< WacApCntCellMutable, 4 > wac_common_wac_ap_cnt_cell_;
  std::array< WacWmApCntCellMutable, 4 > wac_common_wac_wm_ap_cnt_cell_;
  WacHdrCntCellMutable wac_common_wac_hdr_cnt_cell_;
  WacWmHdrCntCellMutable wac_common_wac_wm_hdr_cnt_cell_;
  WacHdrLimitCellMutable wac_common_wac_hdr_limit_cell_;
  WacHdrOffsetCellMutable wac_common_wac_hdr_offset_cell_;
  WacDodCntCellMutable wac_common_wac_dod_cnt_cell_;
  std::array< WacPfcPoolLimitCellMutable, 8 > wac_common_wac_pfc_pool_0_limit_cell_;
  std::array< WacPfcPoolLimitCellMutable, 8 > wac_common_wac_pfc_pool_1_limit_cell_;
  std::array< WacPfcPoolLimitCellMutable, 8 > wac_common_wac_pfc_pool_2_limit_cell_;
  std::array< WacPfcPoolLimitCellMutable, 8 > wac_common_wac_pfc_pool_3_limit_cell_;
  std::array< WacDropCntPreFifoMutable, 4 > wac_common_wac_drop_cnt_pre0_fifo_;
  std::array< WacDropCntPreFifoMutable, 4 > wac_common_wac_drop_cnt_pre1_fifo_;
  std::array< WacDropCntPreFifoMutable, 4 > wac_common_wac_drop_cnt_pre2_fifo_;
  std::array< WacDropCntPreFifoMutable, 4 > wac_common_wac_drop_cnt_pre3_fifo_;
  std::array< WacEgressQidMappingMutable, 512 > wac_common_wac_egress_qid_mapping_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x20000; // to get to wac_common
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofino

#endif // __REGISTER_INCLUDES_WAC_COMMON_BLOCK_MUTABLE_H__
