/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_CBUS_RSPEC_H__
#define __REGISTER_INCLUDES_CBUS_RSPEC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "cbus_arb_ctrl.h"
#include "cbus_controller_mbe_log.h"
#include "cbus_controller_sbe_log.h"
#include "cbus_ctrl.h"
#include "cbus_dma_statemachine.h"
#include "cbus_flush.h"
#include "cbus_freeze_en.h"
#include "cbus_host_creq_credit.h"
#include "cbus_host_slv_credit.h"
#include "cbus_int_en_0.h"
#include "cbus_int_en_1.h"
#include "cbus_int_inj.h"
#include "cbus_int_stat.h"
#include "cbus_lq_fm_dr_rd_err_log.h"
#include "cbus_lq_slot_credit.h"
#include "cbus_parity_err_log.h"
#include "cbus_pri_ctrl.h"
#include "cbus_wl_creq_credit.h"
#include "cbus_wl_tx_dr_rd_err_log.h"

namespace tofinoB0 {
  namespace register_classes {

class CbusRspec : public model_core::RegisterBlock<RegisterCallback> {
public:
  CbusRspec(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 168, false, write_callback, read_callback, std::string("CbusRspec"))
    {
    }
  CbusRspec(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "CbusRspec")
    {
    }
public:





  CbusCtrl &ctrl() { return ctrl_; }





  CbusFlush &flush() { return flush_; }






  CbusArbCtrl &arb_ctrl() { return arb_ctrl_; }








  CbusPriCtrl &pri_ctrl() { return pri_ctrl_; }





  CbusIntStat &int_stat() { return int_stat_; }





  CbusIntEn_0 &int_en_0() { return int_en_0_; }





  CbusIntEn_1 &int_en_1() { return int_en_1_; }





  CbusFreezeEn &freeze_en() { return freeze_en_; }





  CbusIntInj &int_inj() { return int_inj_; }





  CbusWlTxDrRdErrLog &wl_tx_dr_rd_err_log() { return wl_tx_dr_rd_err_log_; }





  CbusLqFmDrRdErrLog &lq_fm_dr_rd_err_log() { return lq_fm_dr_rd_err_log_; }





  CbusControllerMbeLog &controller_mbe_log() { return controller_mbe_log_; }





  CbusControllerSbeLog &controller_sbe_log() { return controller_sbe_log_; }
















  CbusParityErrLog &parity_err_log(int j0) { return parity_err_log_[j0]; }





  CbusHostCreqCredit &host_creq_credit() { return host_creq_credit_; }





  CbusWlCreqCredit &wl_creq_credit() { return wl_creq_credit_; }





  CbusLqSlotCredit &lq_slot_credit() { return lq_slot_credit_; }





  CbusHostSlvCredit &host_slave_credit() { return host_slave_credit_; }





  CbusDmaStatemachine &dma_statemachine() { return dma_statemachine_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      ctrl_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      flush_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      arb_ctrl_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      pri_ctrl_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      int_stat_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      int_en_0_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      int_en_1_.read( offset, data );
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      if (read_callback_) read_callback_();
      freeze_en_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      int_inj_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      wl_tx_dr_rd_err_log_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      lq_fm_dr_rd_err_log_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      controller_mbe_log_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      controller_sbe_log_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x78) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      parity_err_log_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x8c) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      host_creq_credit_.read( offset, data );
    }
    else if (offset >= 0x90 && offset < 0x9c) {
      offset -= 0x90;
      if (read_callback_) read_callback_();
      wl_creq_credit_.read( offset, data );
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      if (read_callback_) read_callback_();
      lq_slot_credit_.read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      if (read_callback_) read_callback_();
      host_slave_credit_.read( offset, data );
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      if (read_callback_) read_callback_();
      dma_statemachine_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      flush_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      arb_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      pri_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      int_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      int_en_0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      int_en_1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      freeze_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      int_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      wl_tx_dr_rd_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      lq_fm_dr_rd_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      controller_mbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      controller_sbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x78) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      parity_err_log_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x8c) {
      offset -= 0x80;
      host_creq_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x90 && offset < 0x9c) {
      offset -= 0x90;
      wl_creq_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      lq_slot_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      host_slave_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      dma_statemachine_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    ctrl_.reset();
    flush_.reset();
    arb_ctrl_.reset();
    pri_ctrl_.reset();
    int_stat_.reset();
    int_en_0_.reset();
    int_en_1_.reset();
    freeze_en_.reset();
    int_inj_.reset();
    wl_tx_dr_rd_err_log_.reset();
    lq_fm_dr_rd_err_log_.reset();
    controller_mbe_log_.reset();
    controller_sbe_log_.reset();
    for (auto &f0 : parity_err_log_) {
      f0.reset();
    }
    host_creq_credit_.reset();
    wl_creq_credit_.reset();
    lq_slot_credit_.reset();
    host_slave_credit_.reset();
    dma_statemachine_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += flush_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += arb_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += pri_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += int_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += int_en_0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += int_en_1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      r += freeze_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += int_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += wl_tx_dr_rd_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += lq_fm_dr_rd_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += controller_mbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      r += controller_sbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x78) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += parity_err_log_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x8c) {
      offset -= 0x80;
      r += host_creq_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x90 && offset < 0x9c) {
      offset -= 0x90;
      r += wl_creq_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      r += lq_slot_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      r += host_slave_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      r += dma_statemachine_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += ctrl_.to_string(print_zeros,indent_string) ;
    r += flush_.to_string(print_zeros,indent_string) ;
    r += arb_ctrl_.to_string(print_zeros,indent_string) ;
    r += pri_ctrl_.to_string(print_zeros,indent_string) ;
    r += int_stat_.to_string(print_zeros,indent_string) ;
    r += int_en_0_.to_string(print_zeros,indent_string) ;
    r += int_en_1_.to_string(print_zeros,indent_string) ;
    r += freeze_en_.to_string(print_zeros,indent_string) ;
    r += int_inj_.to_string(print_zeros,indent_string) ;
    r += wl_tx_dr_rd_err_log_.to_string(print_zeros,indent_string) ;
    r += lq_fm_dr_rd_err_log_.to_string(print_zeros,indent_string) ;
    r += controller_mbe_log_.to_string(print_zeros,indent_string) ;
    r += controller_sbe_log_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<6;++a0) {
      r += parity_err_log_[a0].to_string(print_zeros,indent_string) ;
    }
    r += host_creq_credit_.to_string(print_zeros,indent_string) ;
    r += wl_creq_credit_.to_string(print_zeros,indent_string) ;
    r += lq_slot_credit_.to_string(print_zeros,indent_string) ;
    r += host_slave_credit_.to_string(print_zeros,indent_string) ;
    r += dma_statemachine_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  CbusCtrl ctrl_;
  CbusFlush flush_;
  CbusArbCtrl arb_ctrl_;
  CbusPriCtrl pri_ctrl_;
  CbusIntStat int_stat_;
  CbusIntEn_0 int_en_0_;
  CbusIntEn_1 int_en_1_;
  CbusFreezeEn freeze_en_;
  CbusIntInj int_inj_;
  CbusWlTxDrRdErrLog wl_tx_dr_rd_err_log_;
  CbusLqFmDrRdErrLog lq_fm_dr_rd_err_log_;
  CbusControllerMbeLog controller_mbe_log_;
  CbusControllerSbeLog controller_sbe_log_;
  std::array< CbusParityErrLog, 6 > parity_err_log_;
  CbusHostCreqCredit host_creq_credit_;
  CbusWlCreqCredit wl_creq_credit_;
  CbusLqSlotCredit lq_slot_credit_;
  CbusHostSlvCredit host_slave_credit_;
  CbusDmaStatemachine dma_statemachine_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x140000; // to get to cbc
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_CBUS_RSPEC_H__
