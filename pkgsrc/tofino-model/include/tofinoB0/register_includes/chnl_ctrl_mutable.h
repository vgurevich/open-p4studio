/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_CHNL_CTRL_MUTABLE_H__
#define __REGISTER_INCLUDES_CHNL_CTRL_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class ChnlCtrlMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum IngBufRegsEnum {
    kChan0Group,
    kChan1Group,
    kChan2Group,
    kChan3Group
  };
public:
  ChnlCtrlMutable(
      int chipNumber, int index_pipe_addrmap, int index_ibp_rspec, IngBufRegsEnum selector_ing_buf_regs, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ibp_rspec, selector_ing_buf_regs), 4, true, write_callback, read_callback, std::string("ChnlCtrlMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ibp_rspec) + "," + boost::lexical_cast<std::string>(selector_ing_buf_regs))
    {
    }
  ChnlCtrlMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "ChnlCtrlMutable")
    {
    }
public:






  uint8_t chnl_ena() { return chnl_ena_; }
  void chnl_ena(const uint8_t &v) { chnl_ena_=v; }













  uint8_t chnl_mode() { return chnl_mode_; }
  void chnl_mode(const uint8_t &v) { chnl_mode_=v; }






  uint8_t chnl_clean() { return chnl_clean_; }
  void chnl_clean(const uint8_t &v) { chnl_clean_=v; }








  uint8_t dis_cong() { return dis_cong_; }
  void dis_cong(const uint8_t &v) { dis_cong_=v; }








  uint8_t en_tx_xoff() { return en_tx_xoff_; }
  void en_tx_xoff(const uint8_t &v) { en_tx_xoff_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (chnl_ena_ & 0x1);
    *data |= ((chnl_mode_ & 0x3) << 2);
    *data |= ((chnl_clean_ & 0x1) << 4);
    *data |= ((dis_cong_ & 0x1) << 8);
    *data |= ((en_tx_xoff_ & 0x1) << 9);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    chnl_ena_ = (data & 0x1);
    chnl_mode_ = ((data >> 2) & 0x3);
    chnl_clean_ = ((data >> 4) & 0x1);
    dis_cong_ = ((data >> 8) & 0x1);
    en_tx_xoff_ = ((data >> 9) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    chnl_ena_ = 0x0;
    chnl_mode_ = 0x0;
    chnl_clean_ = 0x0;
    dis_cong_ = 0x0;
    en_tx_xoff_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("ChnlCtrlMutable") + ":\n";
    r += indent_string + "  " + std::string("chnl_ena") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_ena_) ) + "\n";
    all_zeros &= (0 == chnl_ena_);
    r += indent_string + "  " + std::string("chnl_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_mode_) ) + "\n";
    all_zeros &= (0 == chnl_mode_);
    r += indent_string + "  " + std::string("chnl_clean") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_clean_) ) + "\n";
    all_zeros &= (0 == chnl_clean_);
    r += indent_string + "  " + std::string("dis_cong") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dis_cong_) ) + "\n";
    all_zeros &= (0 == dis_cong_);
    r += indent_string + "  " + std::string("en_tx_xoff") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(en_tx_xoff_) ) + "\n";
    all_zeros &= (0 == en_tx_xoff_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("ChnlCtrlMutable") + ":\n";
    r += indent_string + "  " + std::string("chnl_ena") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_ena_) ) + "\n";
    all_zeros &= (0 == chnl_ena_);
    r += indent_string + "  " + std::string("chnl_mode") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_mode_) ) + "\n";
    all_zeros &= (0 == chnl_mode_);
    r += indent_string + "  " + std::string("chnl_clean") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_clean_) ) + "\n";
    all_zeros &= (0 == chnl_clean_);
    r += indent_string + "  " + std::string("dis_cong") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dis_cong_) ) + "\n";
    all_zeros &= (0 == dis_cong_);
    r += indent_string + "  " + std::string("en_tx_xoff") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(en_tx_xoff_) ) + "\n";
    all_zeros &= (0 == en_tx_xoff_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t chnl_ena_;
  uint8_t chnl_mode_;
  uint8_t chnl_clean_;
  uint8_t dis_cong_;
  uint8_t en_tx_xoff_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ibp_rspec, IngBufRegsEnum selector_ing_buf_regs
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    assert(index_ibp_rspec < 18);
    offset += index_ibp_rspec * 0x2000; // ibp_rspec[]
    offset += 0x1800; // to get to ing_buf_regs
    switch (selector_ing_buf_regs) {
      case kChan0Group:
        offset += 0x200; // to get to chan0_group_chnl_ctrl
        break;
      case kChan1Group:
        offset += 0x280; // to get to chan1_group_chnl_ctrl
        break;
      case kChan2Group:
        offset += 0x300; // to get to chan2_group_chnl_ctrl
        break;
      case kChan3Group:
        offset += 0x380; // to get to chan3_group_chnl_ctrl
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_CHNL_CTRL_MUTABLE_H__
