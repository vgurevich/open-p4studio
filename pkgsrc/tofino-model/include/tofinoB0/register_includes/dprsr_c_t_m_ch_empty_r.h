/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_C_T_M_CH_EMPTY_R_H__
#define __REGISTER_INCLUDES_DPRSR_C_T_M_CH_EMPTY_R_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class DprsrCTMChEmptyR : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum DprsrRegRspecEnum {
    kOutEgr,
    kOutIngr
  };
public:
  DprsrCTMChEmptyR(
      int chipNumber, int index_pipe_addrmap, DprsrRegRspecEnum selector_dprsr_reg_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, selector_dprsr_reg_rspec), 12, false, write_callback, read_callback, std::string("DprsrCTMChEmptyR")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(selector_dprsr_reg_rspec))
    {
    }
  DprsrCTMChEmptyR(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DprsrCTMChEmptyR")
    {
    }
public:







  uint8_t &empty(int j0) { return empty_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (empty_[0] & 0x1);
      *data |= ((empty_[1] & 0x1) << 1);
      *data |= ((empty_[2] & 0x1) << 2);
      *data |= ((empty_[3] & 0x1) << 3);
      *data |= ((empty_[4] & 0x1) << 4);
      *data |= ((empty_[5] & 0x1) << 5);
      *data |= ((empty_[6] & 0x1) << 6);
      *data |= ((empty_[7] & 0x1) << 7);
      *data |= ((empty_[8] & 0x1) << 8);
      *data |= ((empty_[9] & 0x1) << 9);
      *data |= ((empty_[10] & 0x1) << 10);
      *data |= ((empty_[11] & 0x1) << 11);
      *data |= ((empty_[12] & 0x1) << 12);
      *data |= ((empty_[13] & 0x1) << 13);
      *data |= ((empty_[14] & 0x1) << 14);
      *data |= ((empty_[15] & 0x1) << 15);
      *data |= ((empty_[16] & 0x1) << 16);
      *data |= ((empty_[17] & 0x1) << 17);
      *data |= ((empty_[18] & 0x1) << 18);
      *data |= ((empty_[19] & 0x1) << 19);
      *data |= ((empty_[20] & 0x1) << 20);
      *data |= ((empty_[21] & 0x1) << 21);
      *data |= ((empty_[22] & 0x1) << 22);
      *data |= ((empty_[23] & 0x1) << 23);
      *data |= ((empty_[24] & 0x1) << 24);
      *data |= ((empty_[25] & 0x1) << 25);
      *data |= ((empty_[26] & 0x1) << 26);
      *data |= ((empty_[27] & 0x1) << 27);
      *data |= ((empty_[28] & 0x1) << 28);
      *data |= ((empty_[29] & 0x1) << 29);
      *data |= ((empty_[30] & 0x1) << 30);
      *data |= ((empty_[31] & 0x1) << 31);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (empty_[32] & 0x1);
      *data |= ((empty_[33] & 0x1) << 1);
      *data |= ((empty_[34] & 0x1) << 2);
      *data |= ((empty_[35] & 0x1) << 3);
      *data |= ((empty_[36] & 0x1) << 4);
      *data |= ((empty_[37] & 0x1) << 5);
      *data |= ((empty_[38] & 0x1) << 6);
      *data |= ((empty_[39] & 0x1) << 7);
      *data |= ((empty_[40] & 0x1) << 8);
      *data |= ((empty_[41] & 0x1) << 9);
      *data |= ((empty_[42] & 0x1) << 10);
      *data |= ((empty_[43] & 0x1) << 11);
      *data |= ((empty_[44] & 0x1) << 12);
      *data |= ((empty_[45] & 0x1) << 13);
      *data |= ((empty_[46] & 0x1) << 14);
      *data |= ((empty_[47] & 0x1) << 15);
      *data |= ((empty_[48] & 0x1) << 16);
      *data |= ((empty_[49] & 0x1) << 17);
      *data |= ((empty_[50] & 0x1) << 18);
      *data |= ((empty_[51] & 0x1) << 19);
      *data |= ((empty_[52] & 0x1) << 20);
      *data |= ((empty_[53] & 0x1) << 21);
      *data |= ((empty_[54] & 0x1) << 22);
      *data |= ((empty_[55] & 0x1) << 23);
      *data |= ((empty_[56] & 0x1) << 24);
      *data |= ((empty_[57] & 0x1) << 25);
      *data |= ((empty_[58] & 0x1) << 26);
      *data |= ((empty_[59] & 0x1) << 27);
      *data |= ((empty_[60] & 0x1) << 28);
      *data |= ((empty_[61] & 0x1) << 29);
      *data |= ((empty_[62] & 0x1) << 30);
      *data |= ((empty_[63] & 0x1) << 31);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = (empty_[64] & 0x1);
      *data |= ((empty_[65] & 0x1) << 1);
      *data |= ((empty_[66] & 0x1) << 2);
      *data |= ((empty_[67] & 0x1) << 3);
      *data |= ((empty_[68] & 0x1) << 4);
      *data |= ((empty_[69] & 0x1) << 5);
      *data |= ((empty_[70] & 0x1) << 6);
      *data |= ((empty_[71] & 0x1) << 7);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      empty_[0] = (data & 0x1);
      empty_[1] = ((data >> 1) & 0x1);
      empty_[2] = ((data >> 2) & 0x1);
      empty_[3] = ((data >> 3) & 0x1);
      empty_[4] = ((data >> 4) & 0x1);
      empty_[5] = ((data >> 5) & 0x1);
      empty_[6] = ((data >> 6) & 0x1);
      empty_[7] = ((data >> 7) & 0x1);
      empty_[8] = ((data >> 8) & 0x1);
      empty_[9] = ((data >> 9) & 0x1);
      empty_[10] = ((data >> 10) & 0x1);
      empty_[11] = ((data >> 11) & 0x1);
      empty_[12] = ((data >> 12) & 0x1);
      empty_[13] = ((data >> 13) & 0x1);
      empty_[14] = ((data >> 14) & 0x1);
      empty_[15] = ((data >> 15) & 0x1);
      empty_[16] = ((data >> 16) & 0x1);
      empty_[17] = ((data >> 17) & 0x1);
      empty_[18] = ((data >> 18) & 0x1);
      empty_[19] = ((data >> 19) & 0x1);
      empty_[20] = ((data >> 20) & 0x1);
      empty_[21] = ((data >> 21) & 0x1);
      empty_[22] = ((data >> 22) & 0x1);
      empty_[23] = ((data >> 23) & 0x1);
      empty_[24] = ((data >> 24) & 0x1);
      empty_[25] = ((data >> 25) & 0x1);
      empty_[26] = ((data >> 26) & 0x1);
      empty_[27] = ((data >> 27) & 0x1);
      empty_[28] = ((data >> 28) & 0x1);
      empty_[29] = ((data >> 29) & 0x1);
      empty_[30] = ((data >> 30) & 0x1);
      empty_[31] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      empty_[32] = (data & 0x1);
      empty_[33] = ((data >> 1) & 0x1);
      empty_[34] = ((data >> 2) & 0x1);
      empty_[35] = ((data >> 3) & 0x1);
      empty_[36] = ((data >> 4) & 0x1);
      empty_[37] = ((data >> 5) & 0x1);
      empty_[38] = ((data >> 6) & 0x1);
      empty_[39] = ((data >> 7) & 0x1);
      empty_[40] = ((data >> 8) & 0x1);
      empty_[41] = ((data >> 9) & 0x1);
      empty_[42] = ((data >> 10) & 0x1);
      empty_[43] = ((data >> 11) & 0x1);
      empty_[44] = ((data >> 12) & 0x1);
      empty_[45] = ((data >> 13) & 0x1);
      empty_[46] = ((data >> 14) & 0x1);
      empty_[47] = ((data >> 15) & 0x1);
      empty_[48] = ((data >> 16) & 0x1);
      empty_[49] = ((data >> 17) & 0x1);
      empty_[50] = ((data >> 18) & 0x1);
      empty_[51] = ((data >> 19) & 0x1);
      empty_[52] = ((data >> 20) & 0x1);
      empty_[53] = ((data >> 21) & 0x1);
      empty_[54] = ((data >> 22) & 0x1);
      empty_[55] = ((data >> 23) & 0x1);
      empty_[56] = ((data >> 24) & 0x1);
      empty_[57] = ((data >> 25) & 0x1);
      empty_[58] = ((data >> 26) & 0x1);
      empty_[59] = ((data >> 27) & 0x1);
      empty_[60] = ((data >> 28) & 0x1);
      empty_[61] = ((data >> 29) & 0x1);
      empty_[62] = ((data >> 30) & 0x1);
      empty_[63] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      empty_[64] = (data & 0x1);
      empty_[65] = ((data >> 1) & 0x1);
      empty_[66] = ((data >> 2) & 0x1);
      empty_[67] = ((data >> 3) & 0x1);
      empty_[68] = ((data >> 4) & 0x1);
      empty_[69] = ((data >> 5) & 0x1);
      empty_[70] = ((data >> 6) & 0x1);
      empty_[71] = ((data >> 7) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    empty_[0] = 0;
    empty_[1] = 0;
    empty_[2] = 0;
    empty_[3] = 0;
    empty_[4] = 0;
    empty_[5] = 0;
    empty_[6] = 0;
    empty_[7] = 0;
    empty_[8] = 0;
    empty_[9] = 0;
    empty_[10] = 0;
    empty_[11] = 0;
    empty_[12] = 0;
    empty_[13] = 0;
    empty_[14] = 0;
    empty_[15] = 0;
    empty_[16] = 0;
    empty_[17] = 0;
    empty_[18] = 0;
    empty_[19] = 0;
    empty_[20] = 0;
    empty_[21] = 0;
    empty_[22] = 0;
    empty_[23] = 0;
    empty_[24] = 0;
    empty_[25] = 0;
    empty_[26] = 0;
    empty_[27] = 0;
    empty_[28] = 0;
    empty_[29] = 0;
    empty_[30] = 0;
    empty_[31] = 0;
    empty_[32] = 0;
    empty_[33] = 0;
    empty_[34] = 0;
    empty_[35] = 0;
    empty_[36] = 0;
    empty_[37] = 0;
    empty_[38] = 0;
    empty_[39] = 0;
    empty_[40] = 0;
    empty_[41] = 0;
    empty_[42] = 0;
    empty_[43] = 0;
    empty_[44] = 0;
    empty_[45] = 0;
    empty_[46] = 0;
    empty_[47] = 0;
    empty_[48] = 0;
    empty_[49] = 0;
    empty_[50] = 0;
    empty_[51] = 0;
    empty_[52] = 0;
    empty_[53] = 0;
    empty_[54] = 0;
    empty_[55] = 0;
    empty_[56] = 0;
    empty_[57] = 0;
    empty_[58] = 0;
    empty_[59] = 0;
    empty_[60] = 0;
    empty_[61] = 0;
    empty_[62] = 0;
    empty_[63] = 0;
    empty_[64] = 0;
    empty_[65] = 0;
    empty_[66] = 0;
    empty_[67] = 0;
    empty_[68] = 0;
    empty_[69] = 0;
    empty_[70] = 0;
    empty_[71] = 0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrCTMChEmptyR") + ":\n";
    for (uint32_t f=0;f<72;++f) {
      r += indent_string + "  " + std::string("empty") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(empty_[f]) ) + "\n";
      all_zeros &= (0 == empty_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrCTMChEmptyR") + ":\n";
    for (uint32_t f=0;f<72;++f) {
      r += indent_string + "  " + std::string("empty") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(empty_[f]) ) + "\n";
      all_zeros &= (0 == empty_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 72 > empty_;
private:
  static int StartOffset(
      int index_pipe_addrmap, DprsrRegRspecEnum selector_dprsr_reg_rspec
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x780000; // to get to deparser
    switch (selector_dprsr_reg_rspec) {
      case kOutEgr:
        offset += 0x18000; // to get to out_egr
        offset += 0x40; // to get to ctm_ch_fifo
        break;
      case kOutIngr:
        offset += 0x10000; // to get to out_ingr
        offset += 0x70; // to get to ctm_ch_fifo
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_DPRSR_C_T_M_CH_EMPTY_R_H__
