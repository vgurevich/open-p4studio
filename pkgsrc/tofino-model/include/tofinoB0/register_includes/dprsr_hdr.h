/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_HDR_H__
#define __REGISTER_INCLUDES_DPRSR_HDR_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "dprsr_he_mem.h"
#include "dprsr_he_regs.h"
#include "dprsr_hi_mem.h"
#include "dprsr_hi_regs.h"

namespace tofinoB0 {
  namespace register_classes {

class DprsrHdr : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrHdr(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 262144, false, write_callback, read_callback, std::string("DprsrHdr")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrHdr(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DprsrHdr")
    {
    }
public:





  DprsrHiRegs &hir() { return hir_; }





  DprsrHeRegs &her() { return her_; }
  DprsrHeMem &hem() { return hem_; }
  DprsrHiMem &him() { return him_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4d0) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      hir_.read( offset, data );
    }
    else if (offset >= 0x800 && offset < 0xb50) {
      offset -= 0x800;
      if (read_callback_) read_callback_();
      her_.read( offset, data );
    }
    else if (offset >= 0x4000 && offset < 0x6d20) {
      offset -= 0x4000;
      if (read_callback_) read_callback_();
      hem_.read( offset, data );
    }
    else if (offset >= 0x20000 && offset < 0x40000) {
      offset -= 0x20000;
      if (read_callback_) read_callback_();
      him_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4d0) {
      offset -= 0x0;
      hir_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x800 && offset < 0xb50) {
      offset -= 0x800;
      her_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4000 && offset < 0x6d20) {
      offset -= 0x4000;
      hem_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20000 && offset < 0x40000) {
      offset -= 0x20000;
      him_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    hir_.reset();
    her_.reset();
    hem_.reset();
    him_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4d0) {
      offset -= 0x0;
      r += hir_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x800 && offset < 0xb50) {
      offset -= 0x800;
      r += her_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4000 && offset < 0x6d20) {
      offset -= 0x4000;
      r += hem_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20000 && offset < 0x40000) {
      offset -= 0x20000;
      r += him_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += hir_.to_string(print_zeros,indent_string) ;
    r += her_.to_string(print_zeros,indent_string) ;
    r += hem_.to_string(print_zeros,indent_string) ;
    r += him_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrHiRegs hir_;
  DprsrHeRegs her_;
  DprsrHeMem hem_;
  DprsrHiMem him_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x780000; // to get to deparser
    offset += 0x40000; // to get to hdr
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_DPRSR_HDR_H__
