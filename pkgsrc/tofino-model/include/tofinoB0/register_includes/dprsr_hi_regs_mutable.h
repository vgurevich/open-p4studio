/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_HI_REGS_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_HI_REGS_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "dpr_h_dbg_ctrl_r_mutable.h"
#include "dpr_h_dbg_r_mutable.h"
#include "dprsr_hdr_cred_cfg_r_mutable.h"
#include "dprsr_hdr_cred_ctrl_r_mutable.h"
#include "dprsr_hdr_creds_r_mutable.h"
#include "dprsr_header_ing_and_egr_g_mutable.h"
#include "dprsr_header_ingress_only_g_mutable.h"
#include "dprsr_hi_regs_h_diagbus_cfg_mutable.h"
#include "dprsr_hi_regs_i_hdr_pkt_ctr_mutable.h"

namespace tofinoB0 {
  namespace register_classes {

class DprsrHiRegsMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrHiRegsMutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 1232, true, write_callback, read_callback, std::string("DprsrHiRegsMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrHiRegsMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrHiRegsMutable")
    {
    }
public:





  DprsrHdrCredCtrlRMutable &i_hdr_cr_ctrl() { return i_hdr_cr_ctrl_; }






  DprsrHdrCredsRMutable &i_hdr_cr_status() { return i_hdr_cr_status_; }





  DprsrHiRegsIHdrPktCtrMutable &i_hdr_pkt_ctr() { return i_hdr_pkt_ctr_; }





  DprHDbgCtrlRMutable &i_hdr_dbg_ctrl() { return i_hdr_dbg_ctrl_; }






  DprHDbgRMutable &i_hdr_dbg() { return i_hdr_dbg_; }





  DprsrHiRegsHDiagbusCfgMutable &h_diagbus_cfg() { return h_diagbus_cfg_; }







  DprsrHdrCredCfgRMutable &h_cr_cfg() { return h_cr_cfg_; }






  DprsrHeaderIngAndEgrGMutable &main_i() { return main_i_; }





  DprsrHeaderIngressOnlyGMutable &ingr() { return ingr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x4b0 && offset < 0x4b4) {
      offset -= 0x4b0;
      if (read_callback_) read_callback_();
      i_hdr_cr_ctrl_.read( offset, data );
    }
    else if (offset >= 0x4b4 && offset < 0x4b8) {
      offset -= 0x4b4;
      if (read_callback_) read_callback_();
      i_hdr_cr_status_.read( offset, data );
    }
    else if (offset >= 0x4b8 && offset < 0x4c0) {
      offset -= 0x4b8;
      if (read_callback_) read_callback_();
      i_hdr_pkt_ctr_.read( offset, data );
    }
    else if (offset >= 0x4c0 && offset < 0x4c4) {
      offset -= 0x4c0;
      if (read_callback_) read_callback_();
      i_hdr_dbg_ctrl_.read( offset, data );
    }
    else if (offset >= 0x4c4 && offset < 0x4c8) {
      offset -= 0x4c4;
      if (read_callback_) read_callback_();
      i_hdr_dbg_.read( offset, data );
    }
    else if (offset >= 0x4c8 && offset < 0x4cc) {
      offset -= 0x4c8;
      if (read_callback_) read_callback_();
      h_diagbus_cfg_.read( offset, data );
    }
    else if (offset >= 0x4cc && offset < 0x4d0) {
      offset -= 0x4cc;
      if (read_callback_) read_callback_();
      h_cr_cfg_.read( offset, data );
    }
    else if (offset < 0x320) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      main_i_.read( offset, data );
    }
    else if (offset >= 0x400 && offset < 0x4b0) {
      offset -= 0x400;
      if (read_callback_) read_callback_();
      ingr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x4b0 && offset < 0x4b4) {
      offset -= 0x4b0;
      i_hdr_cr_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4b4 && offset < 0x4b8) {
      offset -= 0x4b4;
      i_hdr_cr_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4b8 && offset < 0x4c0) {
      offset -= 0x4b8;
      i_hdr_pkt_ctr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c0 && offset < 0x4c4) {
      offset -= 0x4c0;
      i_hdr_dbg_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c4 && offset < 0x4c8) {
      offset -= 0x4c4;
      i_hdr_dbg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c8 && offset < 0x4cc) {
      offset -= 0x4c8;
      h_diagbus_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4cc && offset < 0x4d0) {
      offset -= 0x4cc;
      h_cr_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset < 0x320) {
      offset -= 0x0;
      main_i_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400 && offset < 0x4b0) {
      offset -= 0x400;
      ingr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    i_hdr_cr_ctrl_.reset();
    i_hdr_cr_status_.reset();
    i_hdr_pkt_ctr_.reset();
    i_hdr_dbg_ctrl_.reset();
    i_hdr_dbg_.reset();
    h_diagbus_cfg_.reset();
    h_cr_cfg_.reset();
    main_i_.reset();
    ingr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x4b0 && offset < 0x4b4) {
      offset -= 0x4b0;
      r += i_hdr_cr_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4b4 && offset < 0x4b8) {
      offset -= 0x4b4;
      r += i_hdr_cr_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4b8 && offset < 0x4c0) {
      offset -= 0x4b8;
      r += i_hdr_pkt_ctr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c0 && offset < 0x4c4) {
      offset -= 0x4c0;
      r += i_hdr_dbg_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c4 && offset < 0x4c8) {
      offset -= 0x4c4;
      r += i_hdr_dbg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c8 && offset < 0x4cc) {
      offset -= 0x4c8;
      r += h_diagbus_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4cc && offset < 0x4d0) {
      offset -= 0x4cc;
      r += h_cr_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset < 0x320) {
      offset -= 0x0;
      r += main_i_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400 && offset < 0x4b0) {
      offset -= 0x400;
      r += ingr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += i_hdr_cr_ctrl_.to_string(print_zeros,indent_string) ;
    r += i_hdr_cr_status_.to_string(print_zeros,indent_string) ;
    r += i_hdr_pkt_ctr_.to_string(print_zeros,indent_string) ;
    r += i_hdr_dbg_ctrl_.to_string(print_zeros,indent_string) ;
    r += i_hdr_dbg_.to_string(print_zeros,indent_string) ;
    r += h_diagbus_cfg_.to_string(print_zeros,indent_string) ;
    r += h_cr_cfg_.to_string(print_zeros,indent_string) ;
    r += main_i_.to_string(print_zeros,indent_string) ;
    r += ingr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrHdrCredCtrlRMutable i_hdr_cr_ctrl_;
  DprsrHdrCredsRMutable i_hdr_cr_status_;
  DprsrHiRegsIHdrPktCtrMutable i_hdr_pkt_ctr_;
  DprHDbgCtrlRMutable i_hdr_dbg_ctrl_;
  DprHDbgRMutable i_hdr_dbg_;
  DprsrHiRegsHDiagbusCfgMutable h_diagbus_cfg_;
  DprsrHdrCredCfgRMutable h_cr_cfg_;
  DprsrHeaderIngAndEgrGMutable main_i_;
  DprsrHeaderIngressOnlyGMutable ingr_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x780000; // to get to deparser
    offset += 0x40000; // to get to hdr
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_DPRSR_HI_REGS_MUTABLE_H__
