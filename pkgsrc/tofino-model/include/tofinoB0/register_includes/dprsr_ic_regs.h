/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_IC_REGS_H__
#define __REGISTER_INCLUDES_DPRSR_IC_REGS_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "dpr_i_dbg_r.h"
#include "dprsr_ic_regs_e_meta_mbe_errlog.h"
#include "dprsr_ic_regs_e_meta_sbe_errlog.h"
#include "dprsr_ic_regs_e_tphv_mbe_errlog.h"
#include "dprsr_ic_regs_e_tphv_sbe_errlog.h"
#include "dprsr_ic_regs_i_delay_fifo.h"
#include "dprsr_ic_regs_i_diagbus_cfg.h"
#include "dprsr_ic_regs_i_meta_fifo.h"
#include "dprsr_ic_regs_i_meta_mbe_errlog.h"
#include "dprsr_ic_regs_i_meta_sbe_errlog.h"
#include "dprsr_ic_regs_i_tphv_mbe_errlog.h"
#include "dprsr_ic_regs_i_tphv_sbe_errlog.h"
#include "dprsr_ic_regs_intr.h"
#include "dprsr_ic_regs_meta_mbe_err.h"
#include "dprsr_ic_regs_meta_sbe_err.h"
#include "dprsr_ic_regs_phv16.h"
#include "dprsr_ic_regs_phv16_mbe.h"
#include "dprsr_ic_regs_phv16_mbe_err.h"
#include "dprsr_ic_regs_phv16_mbe_errlog.h"
#include "dprsr_ic_regs_phv16_sbe.h"
#include "dprsr_ic_regs_phv16_sbe_err.h"
#include "dprsr_ic_regs_phv16_sbe_errlog.h"
#include "dprsr_ic_regs_phv32.h"
#include "dprsr_ic_regs_phv32_mbe.h"
#include "dprsr_ic_regs_phv32_mbe_err.h"
#include "dprsr_ic_regs_phv32_mbe_errlog.h"
#include "dprsr_ic_regs_phv32_sbe.h"
#include "dprsr_ic_regs_phv32_sbe_err.h"
#include "dprsr_ic_regs_phv32_sbe_errlog.h"
#include "dprsr_ic_regs_phv8.h"
#include "dprsr_ic_regs_phv8_mbe.h"
#include "dprsr_ic_regs_phv8_mbe_err.h"
#include "dprsr_ic_regs_phv8_mbe_errlog.h"
#include "dprsr_ic_regs_phv8_sbe.h"
#include "dprsr_ic_regs_phv8_sbe_err.h"
#include "dprsr_ic_regs_phv8_sbe_errlog.h"
#include "dprsr_ic_regs_tphv_buff.h"
#include "dprsr_ic_regs_tphv_buff_ecc_mbe.h"
#include "dprsr_ic_regs_tphv_buff_ecc_sbe.h"
#include "dprsr_ic_regs_tphv_mbe_err.h"
#include "dprsr_ic_regs_tphv_sbe_err.h"
#include "dprsr_inp_cfg_r.h"
#include "dprsr_inp_tphv_block_cfg_r.h"

namespace tofinoB0 {
  namespace register_classes {

class DprsrIcRegs : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrIcRegs(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 512, false, write_callback, read_callback, std::string("DprsrIcRegs")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrIcRegs(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DprsrIcRegs")
    {
    }
public:





  DprsrInpCfgR &inp_cfg() { return inp_cfg_; }





  DprsrInpTphvBlockCfgR &tphv_cfg() { return tphv_cfg_; }






  DprsrIcRegsTphvBuff &tphv_buff() { return tphv_buff_; }






  DprsrIcRegsTphvBuffEccSbe &tphv_buff_ecc_sbe() { return tphv_buff_ecc_sbe_; }






  DprsrIcRegsTphvBuffEccMbe &tphv_buff_ecc_mbe() { return tphv_buff_ecc_mbe_; }






  DprsrIcRegsPhv8 &phv8() { return phv8_; }





  DprsrIcRegsPhv8Sbe &phv8_sbe() { return phv8_sbe_; }





  DprsrIcRegsPhv8Mbe &phv8_mbe() { return phv8_mbe_; }






  DprsrIcRegsPhv16 &phv16() { return phv16_; }





  DprsrIcRegsPhv16Sbe &phv16_sbe() { return phv16_sbe_; }





  DprsrIcRegsPhv16Mbe &phv16_mbe() { return phv16_mbe_; }






  DprsrIcRegsPhv32 &phv32() { return phv32_; }





  DprsrIcRegsPhv32Sbe &phv32_sbe() { return phv32_sbe_; }





  DprsrIcRegsPhv32Mbe &phv32_mbe() { return phv32_mbe_; }





  DprsrIcRegsITphvMbeErrlog &i_tphv_mbe_errlog() { return i_tphv_mbe_errlog_; }





  DprsrIcRegsITphvSbeErrlog &i_tphv_sbe_errlog() { return i_tphv_sbe_errlog_; }





  DprsrIcRegsETphvMbeErrlog &e_tphv_mbe_errlog() { return e_tphv_mbe_errlog_; }





  DprsrIcRegsETphvSbeErrlog &e_tphv_sbe_errlog() { return e_tphv_sbe_errlog_; }





  DprsrIcRegsPhv8MbeErrlog &phv8_mbe_errlog() { return phv8_mbe_errlog_; }





  DprsrIcRegsPhv8SbeErrlog &phv8_sbe_errlog() { return phv8_sbe_errlog_; }





  DprsrIcRegsPhv16MbeErrlog &phv16_mbe_errlog() { return phv16_mbe_errlog_; }





  DprsrIcRegsPhv16SbeErrlog &phv16_sbe_errlog() { return phv16_sbe_errlog_; }





  DprsrIcRegsPhv32MbeErrlog &phv32_mbe_errlog() { return phv32_mbe_errlog_; }





  DprsrIcRegsPhv32SbeErrlog &phv32_sbe_errlog() { return phv32_sbe_errlog_; }





  DprsrIcRegsIMetaMbeErrlog &i_meta_mbe_errlog() { return i_meta_mbe_errlog_; }





  DprsrIcRegsIMetaSbeErrlog &i_meta_sbe_errlog() { return i_meta_sbe_errlog_; }





  DprsrIcRegsEMetaMbeErrlog &e_meta_mbe_errlog() { return e_meta_mbe_errlog_; }





  DprsrIcRegsEMetaSbeErrlog &e_meta_sbe_errlog() { return e_meta_sbe_errlog_; }





  DprsrIcRegsPhv8SbeErr &phv8_sbe_err() { return phv8_sbe_err_; }





  DprsrIcRegsPhv8MbeErr &phv8_mbe_err() { return phv8_mbe_err_; }





  DprsrIcRegsPhv16SbeErr &phv16_sbe_err() { return phv16_sbe_err_; }





  DprsrIcRegsPhv16MbeErr &phv16_mbe_err() { return phv16_mbe_err_; }





  DprsrIcRegsPhv32SbeErr &phv32_sbe_err() { return phv32_sbe_err_; }





  DprsrIcRegsPhv32MbeErr &phv32_mbe_err() { return phv32_mbe_err_; }





  DprsrIcRegsTphvSbeErr &tphv_sbe_err() { return tphv_sbe_err_; }





  DprsrIcRegsTphvMbeErr &tphv_mbe_err() { return tphv_mbe_err_; }





  DprsrIcRegsMetaSbeErr &meta_sbe_err() { return meta_sbe_err_; }





  DprsrIcRegsMetaMbeErr &meta_mbe_err() { return meta_mbe_err_; }





  DprIDbgR &i_dbg() { return i_dbg_; }





  DprsrIcRegsIDiagbusCfg &i_diagbus_cfg() { return i_diagbus_cfg_; }





  DprsrIcRegsIMetaFifo &i_meta_fifo() { return i_meta_fifo_; }





  DprsrIcRegsIDelayFifo &i_delay_fifo() { return i_delay_fifo_; }
  DprsrIcRegsIntr &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      inp_cfg_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      tphv_cfg_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      tphv_buff_.read( offset, data );
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      if (read_callback_) read_callback_();
      tphv_buff_ecc_sbe_.read( offset, data );
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      if (read_callback_) read_callback_();
      tphv_buff_ecc_mbe_.read( offset, data );
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      if (read_callback_) read_callback_();
      phv8_.read( offset, data );
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      if (read_callback_) read_callback_();
      phv8_sbe_.read( offset, data );
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      if (read_callback_) read_callback_();
      phv8_mbe_.read( offset, data );
    }
    else if (offset >= 0x98 && offset < 0x9c) {
      offset -= 0x98;
      if (read_callback_) read_callback_();
      phv16_.read( offset, data );
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      if (read_callback_) read_callback_();
      phv16_sbe_.read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      if (read_callback_) read_callback_();
      phv16_mbe_.read( offset, data );
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      if (read_callback_) read_callback_();
      phv32_.read( offset, data );
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      if (read_callback_) read_callback_();
      phv32_sbe_.read( offset, data );
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      if (read_callback_) read_callback_();
      phv32_mbe_.read( offset, data );
    }
    else if (offset >= 0xd4 && offset < 0xd8) {
      offset -= 0xd4;
      if (read_callback_) read_callback_();
      i_tphv_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0xd8 && offset < 0xdc) {
      offset -= 0xd8;
      if (read_callback_) read_callback_();
      i_tphv_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0xdc && offset < 0xe0) {
      offset -= 0xdc;
      if (read_callback_) read_callback_();
      e_tphv_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0xe4) {
      offset -= 0xe0;
      if (read_callback_) read_callback_();
      e_tphv_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0xe4 && offset < 0xe8) {
      offset -= 0xe4;
      if (read_callback_) read_callback_();
      phv8_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0xe8 && offset < 0xec) {
      offset -= 0xe8;
      if (read_callback_) read_callback_();
      phv8_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0xec && offset < 0xf0) {
      offset -= 0xec;
      if (read_callback_) read_callback_();
      phv16_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0xf0 && offset < 0xf4) {
      offset -= 0xf0;
      if (read_callback_) read_callback_();
      phv16_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0xf4 && offset < 0xf8) {
      offset -= 0xf4;
      if (read_callback_) read_callback_();
      phv32_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0xf8 && offset < 0xfc) {
      offset -= 0xf8;
      if (read_callback_) read_callback_();
      phv32_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0xfc && offset < 0x100) {
      offset -= 0xfc;
      if (read_callback_) read_callback_();
      i_meta_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      i_meta_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      if (read_callback_) read_callback_();
      e_meta_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      if (read_callback_) read_callback_();
      e_meta_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x10c && offset < 0x110) {
      offset -= 0x10c;
      if (read_callback_) read_callback_();
      phv8_sbe_err_.read( offset, data );
    }
    else if (offset >= 0x110 && offset < 0x114) {
      offset -= 0x110;
      if (read_callback_) read_callback_();
      phv8_mbe_err_.read( offset, data );
    }
    else if (offset >= 0x114 && offset < 0x118) {
      offset -= 0x114;
      if (read_callback_) read_callback_();
      phv16_sbe_err_.read( offset, data );
    }
    else if (offset >= 0x118 && offset < 0x11c) {
      offset -= 0x118;
      if (read_callback_) read_callback_();
      phv16_mbe_err_.read( offset, data );
    }
    else if (offset >= 0x11c && offset < 0x120) {
      offset -= 0x11c;
      if (read_callback_) read_callback_();
      phv32_sbe_err_.read( offset, data );
    }
    else if (offset >= 0x120 && offset < 0x124) {
      offset -= 0x120;
      if (read_callback_) read_callback_();
      phv32_mbe_err_.read( offset, data );
    }
    else if (offset >= 0x124 && offset < 0x128) {
      offset -= 0x124;
      if (read_callback_) read_callback_();
      tphv_sbe_err_.read( offset, data );
    }
    else if (offset >= 0x128 && offset < 0x12c) {
      offset -= 0x128;
      if (read_callback_) read_callback_();
      tphv_mbe_err_.read( offset, data );
    }
    else if (offset >= 0x12c && offset < 0x130) {
      offset -= 0x12c;
      if (read_callback_) read_callback_();
      meta_sbe_err_.read( offset, data );
    }
    else if (offset >= 0x130 && offset < 0x134) {
      offset -= 0x130;
      if (read_callback_) read_callback_();
      meta_mbe_err_.read( offset, data );
    }
    else if (offset >= 0x138 && offset < 0x140) {
      offset -= 0x138;
      if (read_callback_) read_callback_();
      i_dbg_.read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      if (read_callback_) read_callback_();
      i_diagbus_cfg_.read( offset, data );
    }
    else if (offset >= 0x144 && offset < 0x148) {
      offset -= 0x144;
      if (read_callback_) read_callback_();
      i_meta_fifo_.read( offset, data );
    }
    else if (offset >= 0x148 && offset < 0x14c) {
      offset -= 0x148;
      if (read_callback_) read_callback_();
      i_delay_fifo_.read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xd4) {
      offset -= 0xc0;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      inp_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      tphv_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      tphv_buff_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      tphv_buff_ecc_sbe_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      tphv_buff_ecc_mbe_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      phv8_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      phv8_sbe_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      phv8_mbe_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x98 && offset < 0x9c) {
      offset -= 0x98;
      phv16_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      phv16_sbe_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      phv16_mbe_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      phv32_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      phv32_sbe_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      phv32_mbe_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd4 && offset < 0xd8) {
      offset -= 0xd4;
      i_tphv_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd8 && offset < 0xdc) {
      offset -= 0xd8;
      i_tphv_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xdc && offset < 0xe0) {
      offset -= 0xdc;
      e_tphv_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0xe4) {
      offset -= 0xe0;
      e_tphv_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe4 && offset < 0xe8) {
      offset -= 0xe4;
      phv8_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe8 && offset < 0xec) {
      offset -= 0xe8;
      phv8_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xec && offset < 0xf0) {
      offset -= 0xec;
      phv16_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf0 && offset < 0xf4) {
      offset -= 0xf0;
      phv16_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf4 && offset < 0xf8) {
      offset -= 0xf4;
      phv32_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf8 && offset < 0xfc) {
      offset -= 0xf8;
      phv32_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xfc && offset < 0x100) {
      offset -= 0xfc;
      i_meta_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      i_meta_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      e_meta_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      e_meta_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10c && offset < 0x110) {
      offset -= 0x10c;
      phv8_sbe_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x110 && offset < 0x114) {
      offset -= 0x110;
      phv8_mbe_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x114 && offset < 0x118) {
      offset -= 0x114;
      phv16_sbe_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x118 && offset < 0x11c) {
      offset -= 0x118;
      phv16_mbe_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x11c && offset < 0x120) {
      offset -= 0x11c;
      phv32_sbe_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x120 && offset < 0x124) {
      offset -= 0x120;
      phv32_mbe_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x124 && offset < 0x128) {
      offset -= 0x124;
      tphv_sbe_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x128 && offset < 0x12c) {
      offset -= 0x128;
      tphv_mbe_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x12c && offset < 0x130) {
      offset -= 0x12c;
      meta_sbe_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x130 && offset < 0x134) {
      offset -= 0x130;
      meta_mbe_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x138 && offset < 0x140) {
      offset -= 0x138;
      i_dbg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      i_diagbus_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x144 && offset < 0x148) {
      offset -= 0x144;
      i_meta_fifo_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x148 && offset < 0x14c) {
      offset -= 0x148;
      i_delay_fifo_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xd4) {
      offset -= 0xc0;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    inp_cfg_.reset();
    tphv_cfg_.reset();
    tphv_buff_.reset();
    tphv_buff_ecc_sbe_.reset();
    tphv_buff_ecc_mbe_.reset();
    phv8_.reset();
    phv8_sbe_.reset();
    phv8_mbe_.reset();
    phv16_.reset();
    phv16_sbe_.reset();
    phv16_mbe_.reset();
    phv32_.reset();
    phv32_sbe_.reset();
    phv32_mbe_.reset();
    i_tphv_mbe_errlog_.reset();
    i_tphv_sbe_errlog_.reset();
    e_tphv_mbe_errlog_.reset();
    e_tphv_sbe_errlog_.reset();
    phv8_mbe_errlog_.reset();
    phv8_sbe_errlog_.reset();
    phv16_mbe_errlog_.reset();
    phv16_sbe_errlog_.reset();
    phv32_mbe_errlog_.reset();
    phv32_sbe_errlog_.reset();
    i_meta_mbe_errlog_.reset();
    i_meta_sbe_errlog_.reset();
    e_meta_mbe_errlog_.reset();
    e_meta_sbe_errlog_.reset();
    phv8_sbe_err_.reset();
    phv8_mbe_err_.reset();
    phv16_sbe_err_.reset();
    phv16_mbe_err_.reset();
    phv32_sbe_err_.reset();
    phv32_mbe_err_.reset();
    tphv_sbe_err_.reset();
    tphv_mbe_err_.reset();
    meta_sbe_err_.reset();
    meta_mbe_err_.reset();
    i_dbg_.reset();
    i_diagbus_cfg_.reset();
    i_meta_fifo_.reset();
    i_delay_fifo_.reset();
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += inp_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += tphv_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      r += tphv_buff_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      r += tphv_buff_ecc_sbe_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x88 && offset < 0x8c) {
      offset -= 0x88;
      r += tphv_buff_ecc_mbe_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8c && offset < 0x90) {
      offset -= 0x8c;
      r += phv8_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x90 && offset < 0x94) {
      offset -= 0x90;
      r += phv8_sbe_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      r += phv8_mbe_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x98 && offset < 0x9c) {
      offset -= 0x98;
      r += phv16_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      r += phv16_sbe_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      r += phv16_mbe_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      r += phv32_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      r += phv32_sbe_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      r += phv32_mbe_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd4 && offset < 0xd8) {
      offset -= 0xd4;
      r += i_tphv_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd8 && offset < 0xdc) {
      offset -= 0xd8;
      r += i_tphv_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xdc && offset < 0xe0) {
      offset -= 0xdc;
      r += e_tphv_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0xe4) {
      offset -= 0xe0;
      r += e_tphv_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe4 && offset < 0xe8) {
      offset -= 0xe4;
      r += phv8_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe8 && offset < 0xec) {
      offset -= 0xe8;
      r += phv8_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xec && offset < 0xf0) {
      offset -= 0xec;
      r += phv16_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf0 && offset < 0xf4) {
      offset -= 0xf0;
      r += phv16_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf4 && offset < 0xf8) {
      offset -= 0xf4;
      r += phv32_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf8 && offset < 0xfc) {
      offset -= 0xf8;
      r += phv32_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xfc && offset < 0x100) {
      offset -= 0xfc;
      r += i_meta_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      r += i_meta_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      r += e_meta_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      r += e_meta_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10c && offset < 0x110) {
      offset -= 0x10c;
      r += phv8_sbe_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x110 && offset < 0x114) {
      offset -= 0x110;
      r += phv8_mbe_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x114 && offset < 0x118) {
      offset -= 0x114;
      r += phv16_sbe_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x118 && offset < 0x11c) {
      offset -= 0x118;
      r += phv16_mbe_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x11c && offset < 0x120) {
      offset -= 0x11c;
      r += phv32_sbe_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x120 && offset < 0x124) {
      offset -= 0x120;
      r += phv32_mbe_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x124 && offset < 0x128) {
      offset -= 0x124;
      r += tphv_sbe_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x128 && offset < 0x12c) {
      offset -= 0x128;
      r += tphv_mbe_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x12c && offset < 0x130) {
      offset -= 0x12c;
      r += meta_sbe_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x130 && offset < 0x134) {
      offset -= 0x130;
      r += meta_mbe_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x138 && offset < 0x140) {
      offset -= 0x138;
      r += i_dbg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      r += i_diagbus_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x144 && offset < 0x148) {
      offset -= 0x144;
      r += i_meta_fifo_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x148 && offset < 0x14c) {
      offset -= 0x148;
      r += i_delay_fifo_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xd4) {
      offset -= 0xc0;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += inp_cfg_.to_string(print_zeros,indent_string) ;
    r += tphv_cfg_.to_string(print_zeros,indent_string) ;
    r += tphv_buff_.to_string(print_zeros,indent_string) ;
    r += tphv_buff_ecc_sbe_.to_string(print_zeros,indent_string) ;
    r += tphv_buff_ecc_mbe_.to_string(print_zeros,indent_string) ;
    r += phv8_.to_string(print_zeros,indent_string) ;
    r += phv8_sbe_.to_string(print_zeros,indent_string) ;
    r += phv8_mbe_.to_string(print_zeros,indent_string) ;
    r += phv16_.to_string(print_zeros,indent_string) ;
    r += phv16_sbe_.to_string(print_zeros,indent_string) ;
    r += phv16_mbe_.to_string(print_zeros,indent_string) ;
    r += phv32_.to_string(print_zeros,indent_string) ;
    r += phv32_sbe_.to_string(print_zeros,indent_string) ;
    r += phv32_mbe_.to_string(print_zeros,indent_string) ;
    r += i_tphv_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += i_tphv_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += e_tphv_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += e_tphv_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += phv8_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += phv8_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += phv16_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += phv16_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += phv32_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += phv32_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += i_meta_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += i_meta_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += e_meta_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += e_meta_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += phv8_sbe_err_.to_string(print_zeros,indent_string) ;
    r += phv8_mbe_err_.to_string(print_zeros,indent_string) ;
    r += phv16_sbe_err_.to_string(print_zeros,indent_string) ;
    r += phv16_mbe_err_.to_string(print_zeros,indent_string) ;
    r += phv32_sbe_err_.to_string(print_zeros,indent_string) ;
    r += phv32_mbe_err_.to_string(print_zeros,indent_string) ;
    r += tphv_sbe_err_.to_string(print_zeros,indent_string) ;
    r += tphv_mbe_err_.to_string(print_zeros,indent_string) ;
    r += meta_sbe_err_.to_string(print_zeros,indent_string) ;
    r += meta_mbe_err_.to_string(print_zeros,indent_string) ;
    r += i_dbg_.to_string(print_zeros,indent_string) ;
    r += i_diagbus_cfg_.to_string(print_zeros,indent_string) ;
    r += i_meta_fifo_.to_string(print_zeros,indent_string) ;
    r += i_delay_fifo_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrInpCfgR inp_cfg_;
  DprsrInpTphvBlockCfgR tphv_cfg_;
  DprsrIcRegsTphvBuff tphv_buff_;
  DprsrIcRegsTphvBuffEccSbe tphv_buff_ecc_sbe_;
  DprsrIcRegsTphvBuffEccMbe tphv_buff_ecc_mbe_;
  DprsrIcRegsPhv8 phv8_;
  DprsrIcRegsPhv8Sbe phv8_sbe_;
  DprsrIcRegsPhv8Mbe phv8_mbe_;
  DprsrIcRegsPhv16 phv16_;
  DprsrIcRegsPhv16Sbe phv16_sbe_;
  DprsrIcRegsPhv16Mbe phv16_mbe_;
  DprsrIcRegsPhv32 phv32_;
  DprsrIcRegsPhv32Sbe phv32_sbe_;
  DprsrIcRegsPhv32Mbe phv32_mbe_;
  DprsrIcRegsITphvMbeErrlog i_tphv_mbe_errlog_;
  DprsrIcRegsITphvSbeErrlog i_tphv_sbe_errlog_;
  DprsrIcRegsETphvMbeErrlog e_tphv_mbe_errlog_;
  DprsrIcRegsETphvSbeErrlog e_tphv_sbe_errlog_;
  DprsrIcRegsPhv8MbeErrlog phv8_mbe_errlog_;
  DprsrIcRegsPhv8SbeErrlog phv8_sbe_errlog_;
  DprsrIcRegsPhv16MbeErrlog phv16_mbe_errlog_;
  DprsrIcRegsPhv16SbeErrlog phv16_sbe_errlog_;
  DprsrIcRegsPhv32MbeErrlog phv32_mbe_errlog_;
  DprsrIcRegsPhv32SbeErrlog phv32_sbe_errlog_;
  DprsrIcRegsIMetaMbeErrlog i_meta_mbe_errlog_;
  DprsrIcRegsIMetaSbeErrlog i_meta_sbe_errlog_;
  DprsrIcRegsEMetaMbeErrlog e_meta_mbe_errlog_;
  DprsrIcRegsEMetaSbeErrlog e_meta_sbe_errlog_;
  DprsrIcRegsPhv8SbeErr phv8_sbe_err_;
  DprsrIcRegsPhv8MbeErr phv8_mbe_err_;
  DprsrIcRegsPhv16SbeErr phv16_sbe_err_;
  DprsrIcRegsPhv16MbeErr phv16_mbe_err_;
  DprsrIcRegsPhv32SbeErr phv32_sbe_err_;
  DprsrIcRegsPhv32MbeErr phv32_mbe_err_;
  DprsrIcRegsTphvSbeErr tphv_sbe_err_;
  DprsrIcRegsTphvMbeErr tphv_mbe_err_;
  DprsrIcRegsMetaSbeErr meta_sbe_err_;
  DprsrIcRegsMetaMbeErr meta_mbe_err_;
  DprIDbgR i_dbg_;
  DprsrIcRegsIDiagbusCfg i_diagbus_cfg_;
  DprsrIcRegsIMetaFifo i_meta_fifo_;
  DprsrIcRegsIDelayFifo i_delay_fifo_;
  DprsrIcRegsIntr intr_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x780000; // to get to deparser
    offset += 0x9800; // to get to icr
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_DPRSR_IC_REGS_H__
