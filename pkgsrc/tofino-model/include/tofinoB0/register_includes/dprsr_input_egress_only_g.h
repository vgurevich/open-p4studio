/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_INPUT_EGRESS_ONLY_G_H__
#define __REGISTER_INCLUDES_DPRSR_INPUT_EGRESS_ONLY_G_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "dprsr_input_egress_only_g_phv16_grp.h"
#include "dprsr_input_egress_only_g_phv16_split.h"
#include "dprsr_input_egress_only_g_phv32_grp.h"
#include "dprsr_input_egress_only_g_phv32_split.h"
#include "dprsr_input_egress_only_g_phv8_grp.h"
#include "dprsr_input_egress_only_g_phv8_split.h"

namespace tofinoB0 {
  namespace register_classes {

class DprsrInputEgressOnlyG : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrInputEgressOnlyG(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 24, false, write_callback, read_callback, std::string("DprsrInputEgressOnlyG")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrInputEgressOnlyG(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DprsrInputEgressOnlyG")
    {
    }
public:






  DprsrInputEgressOnlyGPhv8Grp &egr_phv8_grp() { return egr_phv8_grp_; }






  DprsrInputEgressOnlyGPhv8Split &egr_phv8_split() { return egr_phv8_split_; }






  DprsrInputEgressOnlyGPhv16Grp &egr_phv16_grp() { return egr_phv16_grp_; }






  DprsrInputEgressOnlyGPhv16Split &egr_phv16_split() { return egr_phv16_split_; }






  DprsrInputEgressOnlyGPhv32Grp &egr_phv32_grp() { return egr_phv32_grp_; }






  DprsrInputEgressOnlyGPhv32Split &egr_phv32_split() { return egr_phv32_split_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      egr_phv8_grp_.read( offset, data );
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      if (read_callback_) read_callback_();
      egr_phv8_split_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      egr_phv16_grp_.read( offset, data );
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      if (read_callback_) read_callback_();
      egr_phv16_split_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      egr_phv32_grp_.read( offset, data );
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      if (read_callback_) read_callback_();
      egr_phv32_split_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      egr_phv8_grp_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      egr_phv8_split_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      egr_phv16_grp_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      egr_phv16_split_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      egr_phv32_grp_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      egr_phv32_split_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    egr_phv8_grp_.reset();
    egr_phv8_split_.reset();
    egr_phv16_grp_.reset();
    egr_phv16_split_.reset();
    egr_phv32_grp_.reset();
    egr_phv32_split_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      r += egr_phv8_grp_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      r += egr_phv8_split_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      r += egr_phv16_grp_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      r += egr_phv16_split_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      r += egr_phv32_grp_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      r += egr_phv32_split_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += egr_phv8_grp_.to_string(print_zeros,indent_string) ;
    r += egr_phv8_split_.to_string(print_zeros,indent_string) ;
    r += egr_phv16_grp_.to_string(print_zeros,indent_string) ;
    r += egr_phv16_split_.to_string(print_zeros,indent_string) ;
    r += egr_phv32_grp_.to_string(print_zeros,indent_string) ;
    r += egr_phv32_split_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrInputEgressOnlyGPhv8Grp egr_phv8_grp_;
  DprsrInputEgressOnlyGPhv8Split egr_phv8_split_;
  DprsrInputEgressOnlyGPhv16Grp egr_phv16_grp_;
  DprsrInputEgressOnlyGPhv16Split egr_phv16_split_;
  DprsrInputEgressOnlyGPhv32Grp egr_phv32_grp_;
  DprsrInputEgressOnlyGPhv32Split egr_phv32_split_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x780000; // to get to deparser
    offset += 0x9000; // to get to ier
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_DPRSR_INPUT_EGRESS_ONLY_G_H__
