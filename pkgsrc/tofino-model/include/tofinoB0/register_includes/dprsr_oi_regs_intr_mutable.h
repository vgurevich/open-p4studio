/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_OI_REGS_INTR_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_OI_REGS_INTR_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "dprsr_oi_regs_intr_enable0_mutable.h"
#include "dprsr_oi_regs_intr_enable1_mutable.h"
#include "dprsr_oi_regs_intr_freeze_enable_mutable.h"
#include "dprsr_oi_regs_intr_inject_mutable.h"
#include "dprsr_oi_regs_intr_status_mutable.h"

namespace tofinoB0 {
  namespace register_classes {

class DprsrOiRegsIntrMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrOiRegsIntrMutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 20, true, write_callback, read_callback, std::string("DprsrOiRegsIntrMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrOiRegsIntrMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrOiRegsIntrMutable")
    {
    }
public:






  DprsrOiRegsIntrStatusMutable &intr_status() { return intr_status_; }







  DprsrOiRegsIntrEnable0Mutable &intr_enable0() { return intr_enable0_; }







  DprsrOiRegsIntrEnable1Mutable &intr_enable1() { return intr_enable1_; }








  DprsrOiRegsIntrInjectMutable &intr_inject() { return intr_inject_; }





  DprsrOiRegsIntrFreezeEnableMutable &intr_freeze_enable() { return intr_freeze_enable_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x620 && offset < 0x624) {
      offset -= 0x620;
      if (read_callback_) read_callback_();
      intr_status_.read( offset, data );
    }
    else if (offset >= 0x624 && offset < 0x628) {
      offset -= 0x624;
      if (read_callback_) read_callback_();
      intr_enable0_.read( offset, data );
    }
    else if (offset >= 0x628 && offset < 0x62c) {
      offset -= 0x628;
      if (read_callback_) read_callback_();
      intr_enable1_.read( offset, data );
    }
    else if (offset >= 0x62c && offset < 0x630) {
      offset -= 0x62c;
      if (read_callback_) read_callback_();
      intr_inject_.read( offset, data );
    }
    else if (offset >= 0x630 && offset < 0x634) {
      offset -= 0x630;
      if (read_callback_) read_callback_();
      intr_freeze_enable_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x620 && offset < 0x624) {
      offset -= 0x620;
      intr_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x624 && offset < 0x628) {
      offset -= 0x624;
      intr_enable0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x628 && offset < 0x62c) {
      offset -= 0x628;
      intr_enable1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x62c && offset < 0x630) {
      offset -= 0x62c;
      intr_inject_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x630 && offset < 0x634) {
      offset -= 0x630;
      intr_freeze_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    intr_status_.reset();
    intr_enable0_.reset();
    intr_enable1_.reset();
    intr_inject_.reset();
    intr_freeze_enable_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x620 && offset < 0x624) {
      offset -= 0x620;
      r += intr_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x624 && offset < 0x628) {
      offset -= 0x624;
      r += intr_enable0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x628 && offset < 0x62c) {
      offset -= 0x628;
      r += intr_enable1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x62c && offset < 0x630) {
      offset -= 0x62c;
      r += intr_inject_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x630 && offset < 0x634) {
      offset -= 0x630;
      r += intr_freeze_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += intr_status_.to_string(print_zeros,indent_string) ;
    r += intr_enable0_.to_string(print_zeros,indent_string) ;
    r += intr_enable1_.to_string(print_zeros,indent_string) ;
    r += intr_inject_.to_string(print_zeros,indent_string) ;
    r += intr_freeze_enable_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  DprsrOiRegsIntrStatusMutable intr_status_;
  DprsrOiRegsIntrEnable0Mutable intr_enable0_;
  DprsrOiRegsIntrEnable1Mutable intr_enable1_;
  DprsrOiRegsIntrInjectMutable intr_inject_;
  DprsrOiRegsIntrFreezeEnableMutable intr_freeze_enable_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x780000; // to get to deparser
    offset += 0x10000; // to get to out_ingr
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_DPRSR_OI_REGS_INTR_MUTABLE_H__
