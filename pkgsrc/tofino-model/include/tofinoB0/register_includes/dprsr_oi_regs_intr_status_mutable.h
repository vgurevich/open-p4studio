/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DPRSR_OI_REGS_INTR_STATUS_MUTABLE_H__
#define __REGISTER_INCLUDES_DPRSR_OI_REGS_INTR_STATUS_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class DprsrOiRegsIntrStatusMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  DprsrOiRegsIntrStatusMutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, true, write_callback, read_callback, std::string("DprsrOiRegsIntrStatusMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  DprsrOiRegsIntrStatusMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "DprsrOiRegsIntrStatusMutable")
    {
    }
public:





  uint8_t i_mirr_hdr_mbe() { return i_mirr_hdr_mbe_; }
  void i_mirr_hdr_mbe(const uint8_t &v) { i_mirr_hdr_mbe_=v; }





  uint8_t i_mirr_hdr_sbe() { return i_mirr_hdr_sbe_; }
  void i_mirr_hdr_sbe(const uint8_t &v) { i_mirr_hdr_sbe_=v; }





  uint8_t pbs_req_ctrl_mbe() { return pbs_req_ctrl_mbe_; }
  void pbs_req_ctrl_mbe(const uint8_t &v) { pbs_req_ctrl_mbe_=v; }





  uint8_t pbs_req_ctrl_sbe() { return pbs_req_ctrl_sbe_; }
  void pbs_req_ctrl_sbe(const uint8_t &v) { pbs_req_ctrl_sbe_=v; }





  uint8_t pbs_req_data_mbe() { return pbs_req_data_mbe_; }
  void pbs_req_data_mbe(const uint8_t &v) { pbs_req_data_mbe_=v; }





  uint8_t pbs_req_data_sbe() { return pbs_req_data_sbe_; }
  void pbs_req_data_sbe(const uint8_t &v) { pbs_req_data_sbe_=v; }





  uint8_t pbs_resp_ctrl_mbe() { return pbs_resp_ctrl_mbe_; }
  void pbs_resp_ctrl_mbe(const uint8_t &v) { pbs_resp_ctrl_mbe_=v; }





  uint8_t pbs_resp_ctrl_sbe() { return pbs_resp_ctrl_sbe_; }
  void pbs_resp_ctrl_sbe(const uint8_t &v) { pbs_resp_ctrl_sbe_=v; }





  uint8_t pbs_resp_data_mbe() { return pbs_resp_data_mbe_; }
  void pbs_resp_data_mbe(const uint8_t &v) { pbs_resp_data_mbe_=v; }





  uint8_t pbs_resp_data_sbe() { return pbs_resp_data_sbe_; }
  void pbs_resp_data_sbe(const uint8_t &v) { pbs_resp_data_sbe_=v; }





  uint8_t i_pkt_state_push_err() { return i_pkt_state_push_err_; }
  void i_pkt_state_push_err(const uint8_t &v) { i_pkt_state_push_err_=v; }





  uint8_t i_pkt_state_pop_err() { return i_pkt_state_pop_err_; }
  void i_pkt_state_pop_err(const uint8_t &v) { i_pkt_state_pop_err_=v; }





  uint8_t i_hdr_push_err() { return i_hdr_push_err_; }
  void i_hdr_push_err(const uint8_t &v) { i_hdr_push_err_=v; }





  uint8_t i_hdr_pop_err() { return i_hdr_pop_err_; }
  void i_hdr_pop_err(const uint8_t &v) { i_hdr_pop_err_=v; }





  uint8_t mirr_tm_push_err() { return mirr_tm_push_err_; }
  void mirr_tm_push_err(const uint8_t &v) { mirr_tm_push_err_=v; }





  uint8_t mirr_tm_pop_err() { return mirr_tm_pop_err_; }
  void mirr_tm_pop_err(const uint8_t &v) { mirr_tm_pop_err_=v; }





  uint8_t i_metadata_mbe() { return i_metadata_mbe_; }
  void i_metadata_mbe(const uint8_t &v) { i_metadata_mbe_=v; }





  uint8_t i_metadata_sbe() { return i_metadata_sbe_; }
  void i_metadata_sbe(const uint8_t &v) { i_metadata_sbe_=v; }





  uint8_t mirr_overflow_err() { return mirr_overflow_err_; }
  void mirr_overflow_err(const uint8_t &v) { mirr_overflow_err_=v; }





  uint8_t mirr_underflow_err() { return mirr_underflow_err_; }
  void mirr_underflow_err(const uint8_t &v) { mirr_underflow_err_=v; }





  uint8_t ctm_overflow_err() { return ctm_overflow_err_; }
  void ctm_overflow_err(const uint8_t &v) { ctm_overflow_err_=v; }





  uint8_t ctm_underflow_err() { return ctm_underflow_err_; }
  void ctm_underflow_err(const uint8_t &v) { ctm_underflow_err_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (i_mirr_hdr_mbe_ & 0x1);
    *data |= ((i_mirr_hdr_sbe_ & 0x1) << 1);
    *data |= ((pbs_req_ctrl_mbe_ & 0x1) << 2);
    *data |= ((pbs_req_ctrl_sbe_ & 0x1) << 3);
    *data |= ((pbs_req_data_mbe_ & 0x1) << 4);
    *data |= ((pbs_req_data_sbe_ & 0x1) << 5);
    *data |= ((pbs_resp_ctrl_mbe_ & 0x1) << 6);
    *data |= ((pbs_resp_ctrl_sbe_ & 0x1) << 7);
    *data |= ((pbs_resp_data_mbe_ & 0x1) << 8);
    *data |= ((pbs_resp_data_sbe_ & 0x1) << 9);
    *data |= ((i_pkt_state_push_err_ & 0x1) << 10);
    *data |= ((i_pkt_state_pop_err_ & 0x1) << 11);
    *data |= ((i_hdr_push_err_ & 0x1) << 12);
    *data |= ((i_hdr_pop_err_ & 0x1) << 13);
    *data |= ((mirr_tm_push_err_ & 0x1) << 14);
    *data |= ((mirr_tm_pop_err_ & 0x1) << 15);
    *data |= ((i_metadata_mbe_ & 0x1) << 16);
    *data |= ((i_metadata_sbe_ & 0x1) << 17);
    *data |= ((mirr_overflow_err_ & 0x1) << 18);
    *data |= ((mirr_underflow_err_ & 0x1) << 19);
    *data |= ((ctm_overflow_err_ & 0x1) << 20);
    *data |= ((ctm_underflow_err_ & 0x1) << 21);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    i_mirr_hdr_mbe_ &= ~(data & 0x1);
    i_mirr_hdr_sbe_ &= ~((data >> 1) & 0x1);
    pbs_req_ctrl_mbe_ &= ~((data >> 2) & 0x1);
    pbs_req_ctrl_sbe_ &= ~((data >> 3) & 0x1);
    pbs_req_data_mbe_ &= ~((data >> 4) & 0x1);
    pbs_req_data_sbe_ &= ~((data >> 5) & 0x1);
    pbs_resp_ctrl_mbe_ &= ~((data >> 6) & 0x1);
    pbs_resp_ctrl_sbe_ &= ~((data >> 7) & 0x1);
    pbs_resp_data_mbe_ &= ~((data >> 8) & 0x1);
    pbs_resp_data_sbe_ &= ~((data >> 9) & 0x1);
    i_pkt_state_push_err_ &= ~((data >> 10) & 0x1);
    i_pkt_state_pop_err_ &= ~((data >> 11) & 0x1);
    i_hdr_push_err_ &= ~((data >> 12) & 0x1);
    i_hdr_pop_err_ &= ~((data >> 13) & 0x1);
    mirr_tm_push_err_ &= ~((data >> 14) & 0x1);
    mirr_tm_pop_err_ &= ~((data >> 15) & 0x1);
    i_metadata_mbe_ &= ~((data >> 16) & 0x1);
    i_metadata_sbe_ &= ~((data >> 17) & 0x1);
    mirr_overflow_err_ &= ~((data >> 18) & 0x1);
    mirr_underflow_err_ &= ~((data >> 19) & 0x1);
    ctm_overflow_err_ &= ~((data >> 20) & 0x1);
    ctm_underflow_err_ &= ~((data >> 21) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    i_mirr_hdr_mbe_ = 0x0;
    i_mirr_hdr_sbe_ = 0x0;
    pbs_req_ctrl_mbe_ = 0x0;
    pbs_req_ctrl_sbe_ = 0x0;
    pbs_req_data_mbe_ = 0x0;
    pbs_req_data_sbe_ = 0x0;
    pbs_resp_ctrl_mbe_ = 0x0;
    pbs_resp_ctrl_sbe_ = 0x0;
    pbs_resp_data_mbe_ = 0x0;
    pbs_resp_data_sbe_ = 0x0;
    i_pkt_state_push_err_ = 0x0;
    i_pkt_state_pop_err_ = 0x0;
    i_hdr_push_err_ = 0x0;
    i_hdr_pop_err_ = 0x0;
    mirr_tm_push_err_ = 0x0;
    mirr_tm_pop_err_ = 0x0;
    i_metadata_mbe_ = 0x0;
    i_metadata_sbe_ = 0x0;
    mirr_overflow_err_ = 0x0;
    mirr_underflow_err_ = 0x0;
    ctm_overflow_err_ = 0x0;
    ctm_underflow_err_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrOiRegsIntrStatusMutable") + ":\n";
    r += indent_string + "  " + std::string("i_mirr_hdr_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_mirr_hdr_mbe_) ) + "\n";
    all_zeros &= (0 == i_mirr_hdr_mbe_);
    r += indent_string + "  " + std::string("i_mirr_hdr_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_mirr_hdr_sbe_) ) + "\n";
    all_zeros &= (0 == i_mirr_hdr_sbe_);
    r += indent_string + "  " + std::string("pbs_req_ctrl_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_req_ctrl_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_req_ctrl_mbe_);
    r += indent_string + "  " + std::string("pbs_req_ctrl_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_req_ctrl_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_req_ctrl_sbe_);
    r += indent_string + "  " + std::string("pbs_req_data_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_req_data_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_req_data_mbe_);
    r += indent_string + "  " + std::string("pbs_req_data_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_req_data_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_req_data_sbe_);
    r += indent_string + "  " + std::string("pbs_resp_ctrl_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_resp_ctrl_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_resp_ctrl_mbe_);
    r += indent_string + "  " + std::string("pbs_resp_ctrl_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_resp_ctrl_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_resp_ctrl_sbe_);
    r += indent_string + "  " + std::string("pbs_resp_data_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_resp_data_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_resp_data_mbe_);
    r += indent_string + "  " + std::string("pbs_resp_data_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_resp_data_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_resp_data_sbe_);
    r += indent_string + "  " + std::string("i_pkt_state_push_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_pkt_state_push_err_) ) + "\n";
    all_zeros &= (0 == i_pkt_state_push_err_);
    r += indent_string + "  " + std::string("i_pkt_state_pop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_pkt_state_pop_err_) ) + "\n";
    all_zeros &= (0 == i_pkt_state_pop_err_);
    r += indent_string + "  " + std::string("i_hdr_push_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_hdr_push_err_) ) + "\n";
    all_zeros &= (0 == i_hdr_push_err_);
    r += indent_string + "  " + std::string("i_hdr_pop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_hdr_pop_err_) ) + "\n";
    all_zeros &= (0 == i_hdr_pop_err_);
    r += indent_string + "  " + std::string("mirr_tm_push_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirr_tm_push_err_) ) + "\n";
    all_zeros &= (0 == mirr_tm_push_err_);
    r += indent_string + "  " + std::string("mirr_tm_pop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirr_tm_pop_err_) ) + "\n";
    all_zeros &= (0 == mirr_tm_pop_err_);
    r += indent_string + "  " + std::string("i_metadata_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_metadata_mbe_) ) + "\n";
    all_zeros &= (0 == i_metadata_mbe_);
    r += indent_string + "  " + std::string("i_metadata_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_metadata_sbe_) ) + "\n";
    all_zeros &= (0 == i_metadata_sbe_);
    r += indent_string + "  " + std::string("mirr_overflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirr_overflow_err_) ) + "\n";
    all_zeros &= (0 == mirr_overflow_err_);
    r += indent_string + "  " + std::string("mirr_underflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirr_underflow_err_) ) + "\n";
    all_zeros &= (0 == mirr_underflow_err_);
    r += indent_string + "  " + std::string("ctm_overflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ctm_overflow_err_) ) + "\n";
    all_zeros &= (0 == ctm_overflow_err_);
    r += indent_string + "  " + std::string("ctm_underflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ctm_underflow_err_) ) + "\n";
    all_zeros &= (0 == ctm_underflow_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DprsrOiRegsIntrStatusMutable") + ":\n";
    r += indent_string + "  " + std::string("i_mirr_hdr_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_mirr_hdr_mbe_) ) + "\n";
    all_zeros &= (0 == i_mirr_hdr_mbe_);
    r += indent_string + "  " + std::string("i_mirr_hdr_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_mirr_hdr_sbe_) ) + "\n";
    all_zeros &= (0 == i_mirr_hdr_sbe_);
    r += indent_string + "  " + std::string("pbs_req_ctrl_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_req_ctrl_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_req_ctrl_mbe_);
    r += indent_string + "  " + std::string("pbs_req_ctrl_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_req_ctrl_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_req_ctrl_sbe_);
    r += indent_string + "  " + std::string("pbs_req_data_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_req_data_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_req_data_mbe_);
    r += indent_string + "  " + std::string("pbs_req_data_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_req_data_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_req_data_sbe_);
    r += indent_string + "  " + std::string("pbs_resp_ctrl_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_resp_ctrl_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_resp_ctrl_mbe_);
    r += indent_string + "  " + std::string("pbs_resp_ctrl_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_resp_ctrl_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_resp_ctrl_sbe_);
    r += indent_string + "  " + std::string("pbs_resp_data_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_resp_data_mbe_) ) + "\n";
    all_zeros &= (0 == pbs_resp_data_mbe_);
    r += indent_string + "  " + std::string("pbs_resp_data_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pbs_resp_data_sbe_) ) + "\n";
    all_zeros &= (0 == pbs_resp_data_sbe_);
    r += indent_string + "  " + std::string("i_pkt_state_push_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_pkt_state_push_err_) ) + "\n";
    all_zeros &= (0 == i_pkt_state_push_err_);
    r += indent_string + "  " + std::string("i_pkt_state_pop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_pkt_state_pop_err_) ) + "\n";
    all_zeros &= (0 == i_pkt_state_pop_err_);
    r += indent_string + "  " + std::string("i_hdr_push_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_hdr_push_err_) ) + "\n";
    all_zeros &= (0 == i_hdr_push_err_);
    r += indent_string + "  " + std::string("i_hdr_pop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_hdr_pop_err_) ) + "\n";
    all_zeros &= (0 == i_hdr_pop_err_);
    r += indent_string + "  " + std::string("mirr_tm_push_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirr_tm_push_err_) ) + "\n";
    all_zeros &= (0 == mirr_tm_push_err_);
    r += indent_string + "  " + std::string("mirr_tm_pop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirr_tm_pop_err_) ) + "\n";
    all_zeros &= (0 == mirr_tm_pop_err_);
    r += indent_string + "  " + std::string("i_metadata_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_metadata_mbe_) ) + "\n";
    all_zeros &= (0 == i_metadata_mbe_);
    r += indent_string + "  " + std::string("i_metadata_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(i_metadata_sbe_) ) + "\n";
    all_zeros &= (0 == i_metadata_sbe_);
    r += indent_string + "  " + std::string("mirr_overflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirr_overflow_err_) ) + "\n";
    all_zeros &= (0 == mirr_overflow_err_);
    r += indent_string + "  " + std::string("mirr_underflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mirr_underflow_err_) ) + "\n";
    all_zeros &= (0 == mirr_underflow_err_);
    r += indent_string + "  " + std::string("ctm_overflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ctm_overflow_err_) ) + "\n";
    all_zeros &= (0 == ctm_overflow_err_);
    r += indent_string + "  " + std::string("ctm_underflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ctm_underflow_err_) ) + "\n";
    all_zeros &= (0 == ctm_underflow_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t i_mirr_hdr_mbe_;
  uint8_t i_mirr_hdr_sbe_;
  uint8_t pbs_req_ctrl_mbe_;
  uint8_t pbs_req_ctrl_sbe_;
  uint8_t pbs_req_data_mbe_;
  uint8_t pbs_req_data_sbe_;
  uint8_t pbs_resp_ctrl_mbe_;
  uint8_t pbs_resp_ctrl_sbe_;
  uint8_t pbs_resp_data_mbe_;
  uint8_t pbs_resp_data_sbe_;
  uint8_t i_pkt_state_push_err_;
  uint8_t i_pkt_state_pop_err_;
  uint8_t i_hdr_push_err_;
  uint8_t i_hdr_pop_err_;
  uint8_t mirr_tm_push_err_;
  uint8_t mirr_tm_pop_err_;
  uint8_t i_metadata_mbe_;
  uint8_t i_metadata_sbe_;
  uint8_t mirr_overflow_err_;
  uint8_t mirr_underflow_err_;
  uint8_t ctm_overflow_err_;
  uint8_t ctm_underflow_err_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x780000; // to get to deparser
    offset += 0x10000; // to get to out_ingr
    offset += 0x620; // to get to intr_status
    return offset;
  }

};





  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_DPRSR_OI_REGS_INTR_STATUS_MUTABLE_H__
