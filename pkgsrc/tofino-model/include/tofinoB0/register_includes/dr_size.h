/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_DR_SIZE_H__
#define __REGISTER_INCLUDES_DR_SIZE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class DrSize : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum CbcRspecEnum {
    kCbcLqFmDr,
    kCbcLqRxDr,
    kCbcWlCplDr,
    kCbcWlTxDr
  };
  enum MbcRspecEnum {
    kMbcMacCplDr,
    kMbcMacTxDr
  };
  enum PbcRspecEnum {
    kPbcDiagFmDr,
    kPbcDiagRxDr,
    kPbcIdleFmDr,
    kPbcIdleRxDr,
    kPbcIlCplDr,
    kPbcIlTxDr,
    kPbcRbCplDr,
    kPbcRbTxDr,
    kPbcStatFmDr,
    kPbcStatRxDr,
    kPbcWbCplDr,
    kPbcWbTxDr
  };
  enum TbcRspecEnum {
    kTbcCplDr,
    kTbcFmDr,
    kTbcRxDr,
    kTbcTxDr
  };
public:
  DrSize(
      int chipNumber, CbcRspecEnum selector_cbc_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_cbc_rspec), 4, false, write_callback, read_callback, std::string("DrSize")+":"+boost::lexical_cast<std::string>(selector_cbc_rspec))
    {
    }
  DrSize(
      int chipNumber, MbcRspecEnum selector_mbc_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_mbc_rspec), 4, false, write_callback, read_callback, std::string("DrSize")+":"+boost::lexical_cast<std::string>(selector_mbc_rspec))
    {
    }
  DrSize(
      int chipNumber, PbcRspecEnum selector_pbc_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_pbc_rspec), 4, false, write_callback, read_callback, std::string("DrSize")+":"+boost::lexical_cast<std::string>(selector_pbc_rspec))
    {
    }
  DrSize(
      int chipNumber, PbcRspecEnum selector_pbc_rspec, int index_dru_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_pbc_rspec, index_dru_rspec), 4, false, write_callback, read_callback, std::string("DrSize")+":"+boost::lexical_cast<std::string>(selector_pbc_rspec) + "," + boost::lexical_cast<std::string>(index_dru_rspec))
    {
    }
  DrSize(
      int chipNumber, TbcRspecEnum selector_tbc_rspec, int index_dru_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_tbc_rspec, index_dru_rspec), 4, false, write_callback, read_callback, std::string("DrSize")+":"+boost::lexical_cast<std::string>(selector_tbc_rspec) + "," + boost::lexical_cast<std::string>(index_dru_rspec))
    {
    }
  DrSize(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "DrSize")
    {
    }
public:











  uint16_t &size() { return size_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = ((size_ & 0x3fff) << 6);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    size_ = ((data >> 6) & 0x3fff);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    size_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DrSize") + ":\n";
    r += indent_string + "  " + std::string("size") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(size_) ) + "\n";
    all_zeros &= (0 == size_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("DrSize") + ":\n";
    r += indent_string + "  " + std::string("size") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(size_) ) + "\n";
    all_zeros &= (0 == size_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint16_t size_;
private:
  static int StartOffset(
      CbcRspecEnum selector_cbc_rspec
      ) {
    int offset=0;
    offset += 0x140000; // to get to cbc
    switch (selector_cbc_rspec) {
      case kCbcLqFmDr:
        offset += 0x180; // to get to cbc_lq_fm_dr
        offset += 0x14; // to get to size
        break;
      case kCbcLqRxDr:
        offset += 0x1c0; // to get to cbc_lq_rx_dr
        offset += 0x14; // to get to size
        break;
      case kCbcWlCplDr:
        offset += 0x140; // to get to cbc_wl_cpl_dr
        offset += 0x14; // to get to size
        break;
      case kCbcWlTxDr:
        offset += 0x100; // to get to cbc_wl_tx_dr
        offset += 0x14; // to get to size
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

  static int StartOffset(
      MbcRspecEnum selector_mbc_rspec
      ) {
    int offset=0;
    offset += 0xc0000; // to get to mbc
    switch (selector_mbc_rspec) {
      case kMbcMacCplDr:
        offset += 0x140; // to get to mbc_mac_cpl_dr
        offset += 0x14; // to get to size
        break;
      case kMbcMacTxDr:
        offset += 0x100; // to get to mbc_mac_tx_dr
        offset += 0x14; // to get to size
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

  static int StartOffset(
      PbcRspecEnum selector_pbc_rspec
      ) {
    int offset=0;
    offset += 0x100000; // to get to pbc
    switch (selector_pbc_rspec) {
      case kPbcDiagFmDr:
        offset += 0xa00; // to get to pbc_diag_fm_dr
        offset += 0x14; // to get to size
        break;
      case kPbcDiagRxDr:
        offset += 0xa40; // to get to pbc_diag_rx_dr
        offset += 0x14; // to get to size
        break;
      case kPbcIdleFmDr:
        offset += 0x980; // to get to pbc_idle_fm_dr
        offset += 0x14; // to get to size
        break;
      case kPbcIdleRxDr:
        offset += 0x9c0; // to get to pbc_idle_rx_dr
        offset += 0x14; // to get to size
        break;
      case kPbcRbCplDr:
        offset += 0x8c0; // to get to pbc_rb_cpl_dr
        offset += 0x14; // to get to size
        break;
      case kPbcRbTxDr:
        offset += 0x880; // to get to pbc_rb_tx_dr
        offset += 0x14; // to get to size
        break;
      case kPbcStatFmDr:
        offset += 0x900; // to get to pbc_stat_fm_dr
        offset += 0x14; // to get to size
        break;
      case kPbcStatRxDr:
        offset += 0x940; // to get to pbc_stat_rx_dr
        offset += 0x14; // to get to size
        break;
      case kPbcWbCplDr:
        offset += 0x840; // to get to pbc_wb_cpl_dr
        offset += 0x14; // to get to size
        break;
      case kPbcWbTxDr:
        offset += 0x800; // to get to pbc_wb_tx_dr
        offset += 0x14; // to get to size
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

  static int StartOffset(
      PbcRspecEnum selector_pbc_rspec, int index_dru_rspec
      ) {
    int offset=0;
    offset += 0x100000; // to get to pbc
    switch (selector_pbc_rspec) {
      case kPbcIlCplDr:
        offset += 0x600; // to get to pbc_il_cpl_dr
        assert(index_dru_rspec < 4);
        offset += index_dru_rspec * 0x2c; // dru_rspec[]
        offset += 0x14; // to get to size
        break;
      case kPbcIlTxDr:
        offset += 0x400; // to get to pbc_il_tx_dr
        assert(index_dru_rspec < 4);
        offset += index_dru_rspec * 0x2c; // dru_rspec[]
        offset += 0x14; // to get to size
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

  static int StartOffset(
      TbcRspecEnum selector_tbc_rspec, int index_dru_rspec
      ) {
    int offset=0;
    offset += 0x180000; // to get to tbc
    switch (selector_tbc_rspec) {
      case kTbcCplDr:
        offset += 0x200; // to get to tbc_cpl_dr
        assert(index_dru_rspec < 4);
        offset += index_dru_rspec * 0x2c; // dru_rspec[]
        offset += 0x14; // to get to size
        break;
      case kTbcFmDr:
        offset += 0x400; // to get to tbc_fm_dr
        assert(index_dru_rspec < 8);
        offset += index_dru_rspec * 0x2c; // dru_rspec[]
        offset += 0x14; // to get to size
        break;
      case kTbcRxDr:
        offset += 0x600; // to get to tbc_rx_dr
        assert(index_dru_rspec < 8);
        offset += index_dru_rspec * 0x2c; // dru_rspec[]
        offset += 0x14; // to get to size
        break;
      case kTbcTxDr:
        offset += 0x100; // to get to tbc_tx_dr
        assert(index_dru_rspec < 4);
        offset += index_dru_rspec * 0x2c; // dru_rspec[]
        offset += 0x14; // to get to size
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_DR_SIZE_H__
