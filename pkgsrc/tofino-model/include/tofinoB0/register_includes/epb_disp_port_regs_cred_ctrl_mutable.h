/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_EPB_DISP_PORT_REGS_CRED_CTRL_MUTABLE_H__
#define __REGISTER_INCLUDES_EPB_DISP_PORT_REGS_CRED_CTRL_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class EpbDispPortRegsCredCtrlMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  EpbDispPortRegsCredCtrlMutable(
      int chipNumber, int index_pipe_addrmap, int index_egrNx_regs, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_egrNx_regs), 4, true, write_callback, read_callback, std::string("EpbDispPortRegsCredCtrlMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_egrNx_regs))
    {
    }
  EpbDispPortRegsCredCtrlMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "EpbDispPortRegsCredCtrlMutable")
    {
    }
public:






  uint8_t cred_100g() { return cred_100g_; }
  void cred_100g(const uint8_t &v) { cred_100g_=v; }





  uint8_t cred_50g() { return cred_50g_; }
  void cred_50g(const uint8_t &v) { cred_50g_=v; }





  uint8_t cred_25g() { return cred_25g_; }
  void cred_25g(const uint8_t &v) { cred_25g_=v; }







  uint8_t chk_start() { return chk_start_; }
  void chk_start(const uint8_t &v) { chk_start_=v; }






  uint8_t chk_eop_dis() { return chk_eop_dis_; }
  void chk_eop_dis(const uint8_t &v) { chk_eop_dis_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (cred_100g_ & 0x1f);
    *data |= ((cred_50g_ & 0x1f) << 8);
    *data |= ((cred_25g_ & 0x1f) << 16);
    *data |= ((chk_start_ & 0x1f) << 24);
    *data |= ((chk_eop_dis_ & 0x1) << 31);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    cred_100g_ = (data & 0x1f);
    cred_50g_ = ((data >> 8) & 0x1f);
    cred_25g_ = ((data >> 16) & 0x1f);
    chk_start_ = ((data >> 24) & 0x1f);
    chk_eop_dis_ = ((data >> 31) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    cred_100g_ = 0x18;
    cred_50g_ = 0xc;
    cred_25g_ = 0x6;
    chk_start_ = 0x1;
    chk_eop_dis_ = 0x1;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EpbDispPortRegsCredCtrlMutable") + ":\n";
    r += indent_string + "  " + std::string("cred_100g") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred_100g_) ) + "\n";
    all_zeros &= (0 == cred_100g_);
    r += indent_string + "  " + std::string("cred_50g") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred_50g_) ) + "\n";
    all_zeros &= (0 == cred_50g_);
    r += indent_string + "  " + std::string("cred_25g") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred_25g_) ) + "\n";
    all_zeros &= (0 == cred_25g_);
    r += indent_string + "  " + std::string("chk_start") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chk_start_) ) + "\n";
    all_zeros &= (0 == chk_start_);
    r += indent_string + "  " + std::string("chk_eop_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chk_eop_dis_) ) + "\n";
    all_zeros &= (0 == chk_eop_dis_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EpbDispPortRegsCredCtrlMutable") + ":\n";
    r += indent_string + "  " + std::string("cred_100g") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred_100g_) ) + "\n";
    all_zeros &= (0 == cred_100g_);
    r += indent_string + "  " + std::string("cred_50g") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred_50g_) ) + "\n";
    all_zeros &= (0 == cred_50g_);
    r += indent_string + "  " + std::string("cred_25g") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred_25g_) ) + "\n";
    all_zeros &= (0 == cred_25g_);
    r += indent_string + "  " + std::string("chk_start") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chk_start_) ) + "\n";
    all_zeros &= (0 == chk_start_);
    r += indent_string + "  " + std::string("chk_eop_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chk_eop_dis_) ) + "\n";
    all_zeros &= (0 == chk_eop_dis_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t cred_100g_;
  uint8_t cred_50g_;
  uint8_t cred_25g_;
  uint8_t chk_start_;
  uint8_t chk_eop_dis_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_egrNx_regs
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    offset += 0x40000; // to get to ebp18_reg
    offset += 0x30000; // to get to egrNx_reg
    assert(index_egrNx_regs < 18);
    offset += index_egrNx_regs * 0x200; // egrNx_regs[]
    offset += 0x180; // to get to epb_disp_port_regs
    offset += 0x4; // to get to cred_ctrl
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_EPB_DISP_PORT_REGS_CRED_CTRL_MUTABLE_H__
