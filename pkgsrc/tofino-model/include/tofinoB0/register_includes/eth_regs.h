/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH_REGS_H__
#define __REGISTER_INCLUDES_ETH_REGS_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "eth_regs_ebuf_cred.h"
#include "eth_regs_eth_clkobs_ctrl.h"
#include "eth_regs_eth_gpio_ring.h"
#include "eth_regs_eth_mac_ts_offset_ctrl.h"
#include "eth_regs_eth_onestep_ets_offset_ctrl.h"
#include "eth_regs_eth_sel_altclk.h"
#include "eth_regs_eth_soft_reset.h"
#include "eth_regs_eth_status.h"
#include "eth_regs_eth_txff_err_addr.h"
#include "eth_regs_ethsds_core_cntl.h"
#include "eth_regs_ethsds_int_ctrl.h"
#include "eth_regs_ethsds_int_stat.h"
#include "eth_regs_ethsds_rxsigok_ctrl.h"
#include "eth_regs_ethsds_status0.h"
#include "eth_regs_ethsds_status1.h"
#include "eth_regs_force_pfc_flush.h"
#include "eth_regs_int_en.h"
#include "eth_regs_int_freeze.h"
#include "eth_regs_int_inj.h"
#include "eth_regs_int_pri.h"
#include "eth_regs_int_stat.h"
#include "eth_regs_min_thr.h"
#include "eth_regs_pfcff_ctrl_ro.h"
#include "eth_regs_port_alive_lut.h"
#include "eth_regs_rxpkt_err_hdr0.h"
#include "eth_regs_rxpkt_err_hdr1.h"
#include "eth_regs_rxpkt_err_hdr2.h"
#include "eth_regs_rxpkt_err_hdr3.h"
#include "eth_regs_rxpkt_err_sts.h"
#include "eth_regs_trunc_ctrl.h"
#include "eth_regs_tx_prbs23.h"
#include "eth_regs_txff_ctrl.h"
#include "eth_regs_txff_pream0.h"
#include "eth_regs_txff_pream1.h"

namespace tofinoB0 {
  namespace register_classes {

class EthRegs : public model_core::RegisterBlock<RegisterCallback> {
public:
  EthRegs(
      int chipNumber, int index_mac_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_mac_addrmap), 456, false, write_callback, read_callback, std::string("EthRegs")+":"+boost::lexical_cast<std::string>(index_mac_addrmap))
    {
    }
  EthRegs(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "EthRegs")
    {
    }
public:






  EthRegsEthSoftReset &eth_soft_reset() { return eth_soft_reset_; }





  EthRegsEthSelAltclk &eth_sel_altclk() { return eth_sel_altclk_; }






  EthRegsEthsdsIntCtrl &ethsds_int_broadcast() { return ethsds_int_broadcast_; }





  EthRegsEthMacTsOffsetCtrl &eth_mac_ts_offset_ctrl() { return eth_mac_ts_offset_ctrl_; }








  EthRegsEthsdsIntCtrl &ethsds_int_ctrl(int j0) { return ethsds_int_ctrl_[j0]; }







  EthRegsEthsdsIntStat &ethsds_int_stat(int j0) { return ethsds_int_stat_[j0]; }









  EthRegsEthsdsRxsigokCtrl &ethsds_rxsigok_ctrl(int j0) { return ethsds_rxsigok_ctrl_[j0]; }







  EthRegsEthsdsCoreCntl &ethsds_core_cntl(int j0) { return ethsds_core_cntl_[j0]; }







  EthRegsEthsdsStatus0 &ethsds_status0(int j0) { return ethsds_status0_[j0]; }







  EthRegsEthsdsStatus1 &ethsds_status1(int j0) { return ethsds_status1_[j0]; }








  EthRegsEthOnestepEtsOffsetCtrl &eth_onestep_ets_offset_ctrl(int j0) { return eth_onestep_ets_offset_ctrl_[j0]; }





  EthRegsIntStat &int_stat() { return int_stat_; }





  EthRegsIntEn &int_en() { return int_en_; }





  EthRegsIntPri &int_pri() { return int_pri_; }






  EthRegsIntInj &int_inj() { return int_inj_; }





  EthRegsTxffCtrl &txff_ctrl() { return txff_ctrl_; }





  EthRegsTxffPream0 &txff_pream0() { return txff_pream0_; }





  EthRegsTxffPream1 &txff_pream1() { return txff_pream1_; }





  EthRegsEthTxffErrAddr &eth_txff_err_addr() { return eth_txff_err_addr_; }





  EthRegsEthStatus &eth_status() { return eth_status_; }







  EthRegsRxpktErrSts &rxpkt_err_sts(int j0) { return rxpkt_err_sts_[j0]; }







  EthRegsRxpktErrHdr0 &rxpkt_err_hdr0(int j0) { return rxpkt_err_hdr0_[j0]; }







  EthRegsRxpktErrHdr1 &rxpkt_err_hdr1(int j0) { return rxpkt_err_hdr1_[j0]; }







  EthRegsRxpktErrHdr2 &rxpkt_err_hdr2(int j0) { return rxpkt_err_hdr2_[j0]; }







  EthRegsRxpktErrHdr3 &rxpkt_err_hdr3(int j0) { return rxpkt_err_hdr3_[j0]; }





  EthRegsEthClkobsCtrl &eth_clkobs_ctrl() { return eth_clkobs_ctrl_; }







  EthRegsEthGpioRing &eth_gpio_ring(int j0) { return eth_gpio_ring_[j0]; }







  EthRegsPfcffCtrlRo &pfcff_ctrl(int j0) { return pfcff_ctrl_[j0]; }







  EthRegsTruncCtrl &trunc_ctrl(int j0) { return trunc_ctrl_[j0]; }








  EthRegsPortAliveLut &port_alive_lut() { return port_alive_lut_; }







  EthRegsForcePfcFlush &force_pfc_flush(int j0) { return force_pfc_flush_[j0]; }





  EthRegsTxPrbs23 &tx_prbs23() { return tx_prbs23_; }





  EthRegsIntFreeze &int_freeze() { return int_freeze_; }






  EthRegsEbufCred &ebuf_cred() { return ebuf_cred_; }






  EthRegsMinThr &min_thr() { return min_thr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      eth_soft_reset_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      eth_sel_altclk_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      ethsds_int_broadcast_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      eth_mac_ts_offset_ctrl_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      ethsds_int_ctrl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      ethsds_int_stat_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x50) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      ethsds_rxsigok_ctrl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x60) {
      offset -= 0x50;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      ethsds_core_cntl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x70) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      ethsds_status0_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x80) {
      offset -= 0x70;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      ethsds_status1_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xa0) {
      offset -= 0x80;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      eth_onestep_ets_offset_ctrl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      if (read_callback_) read_callback_();
      int_stat_.read( offset, data );
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      if (read_callback_) read_callback_();
      int_en_.read( offset, data );
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      if (read_callback_) read_callback_();
      int_pri_.read( offset, data );
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      if (read_callback_) read_callback_();
      int_inj_.read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      if (read_callback_) read_callback_();
      txff_ctrl_.read( offset, data );
    }
    else if (offset >= 0xb4 && offset < 0xb8) {
      offset -= 0xb4;
      if (read_callback_) read_callback_();
      txff_pream0_.read( offset, data );
    }
    else if (offset >= 0xb8 && offset < 0xbc) {
      offset -= 0xb8;
      if (read_callback_) read_callback_();
      txff_pream1_.read( offset, data );
    }
    else if (offset >= 0xbc && offset < 0xc0) {
      offset -= 0xbc;
      if (read_callback_) read_callback_();
      eth_txff_err_addr_.read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xc4) {
      offset -= 0xc0;
      if (read_callback_) read_callback_();
      eth_status_.read( offset, data );
    }
    else if (offset >= 0xd0 && offset < 0xe0) {
      offset -= 0xd0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      rxpkt_err_sts_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0xf0) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      rxpkt_err_hdr0_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xf0 && offset < 0x100) {
      offset -= 0xf0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      rxpkt_err_hdr1_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x110) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      rxpkt_err_hdr2_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x110 && offset < 0x120) {
      offset -= 0x110;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      rxpkt_err_hdr3_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x120 && offset < 0x124) {
      offset -= 0x120;
      if (read_callback_) read_callback_();
      eth_clkobs_ctrl_.read( offset, data );
    }
    else if (offset >= 0x130 && offset < 0x140) {
      offset -= 0x130;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      eth_gpio_ring_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x180) {
      offset -= 0x140;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pfcff_ctrl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x190) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      trunc_ctrl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x190 && offset < 0x194) {
      offset -= 0x190;
      if (read_callback_) read_callback_();
      port_alive_lut_.read( offset, data );
    }
    else if (offset >= 0x1a0 && offset < 0x1b0) {
      offset -= 0x1a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      force_pfc_flush_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1b0 && offset < 0x1b4) {
      offset -= 0x1b0;
      if (read_callback_) read_callback_();
      tx_prbs23_.read( offset, data );
    }
    else if (offset >= 0x1b8 && offset < 0x1bc) {
      offset -= 0x1b8;
      if (read_callback_) read_callback_();
      int_freeze_.read( offset, data );
    }
    else if (offset >= 0x1bc && offset < 0x1c0) {
      offset -= 0x1bc;
      if (read_callback_) read_callback_();
      ebuf_cred_.read( offset, data );
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      if (read_callback_) read_callback_();
      min_thr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      eth_soft_reset_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      eth_sel_altclk_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      ethsds_int_broadcast_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      eth_mac_ts_offset_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      ethsds_int_ctrl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      ethsds_int_stat_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x50) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      ethsds_rxsigok_ctrl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x60) {
      offset -= 0x50;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      ethsds_core_cntl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x70) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      ethsds_status0_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x80) {
      offset -= 0x70;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      ethsds_status1_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xa0) {
      offset -= 0x80;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      eth_onestep_ets_offset_ctrl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      int_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      int_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      int_pri_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      int_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      txff_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb4 && offset < 0xb8) {
      offset -= 0xb4;
      txff_pream0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb8 && offset < 0xbc) {
      offset -= 0xb8;
      txff_pream1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xbc && offset < 0xc0) {
      offset -= 0xbc;
      eth_txff_err_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xc4) {
      offset -= 0xc0;
      eth_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd0 && offset < 0xe0) {
      offset -= 0xd0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      rxpkt_err_sts_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0xf0) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      rxpkt_err_hdr0_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf0 && offset < 0x100) {
      offset -= 0xf0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      rxpkt_err_hdr1_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x110) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      rxpkt_err_hdr2_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x110 && offset < 0x120) {
      offset -= 0x110;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      rxpkt_err_hdr3_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x120 && offset < 0x124) {
      offset -= 0x120;
      eth_clkobs_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x130 && offset < 0x140) {
      offset -= 0x130;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      eth_gpio_ring_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x180) {
      offset -= 0x140;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pfcff_ctrl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x190) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      trunc_ctrl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x190 && offset < 0x194) {
      offset -= 0x190;
      port_alive_lut_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1a0 && offset < 0x1b0) {
      offset -= 0x1a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      force_pfc_flush_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1b0 && offset < 0x1b4) {
      offset -= 0x1b0;
      tx_prbs23_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1b8 && offset < 0x1bc) {
      offset -= 0x1b8;
      int_freeze_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1bc && offset < 0x1c0) {
      offset -= 0x1bc;
      ebuf_cred_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      min_thr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    eth_soft_reset_.reset();
    eth_sel_altclk_.reset();
    ethsds_int_broadcast_.reset();
    eth_mac_ts_offset_ctrl_.reset();
    for (auto &f0 : ethsds_int_ctrl_) {
      f0.reset();
    }
    for (auto &f0 : ethsds_int_stat_) {
      f0.reset();
    }
    for (auto &f0 : ethsds_rxsigok_ctrl_) {
      f0.reset();
    }
    for (auto &f0 : ethsds_core_cntl_) {
      f0.reset();
    }
    for (auto &f0 : ethsds_status0_) {
      f0.reset();
    }
    for (auto &f0 : ethsds_status1_) {
      f0.reset();
    }
    for (auto &f0 : eth_onestep_ets_offset_ctrl_) {
      f0.reset();
    }
    int_stat_.reset();
    int_en_.reset();
    int_pri_.reset();
    int_inj_.reset();
    txff_ctrl_.reset();
    txff_pream0_.reset();
    txff_pream1_.reset();
    eth_txff_err_addr_.reset();
    eth_status_.reset();
    for (auto &f0 : rxpkt_err_sts_) {
      f0.reset();
    }
    for (auto &f0 : rxpkt_err_hdr0_) {
      f0.reset();
    }
    for (auto &f0 : rxpkt_err_hdr1_) {
      f0.reset();
    }
    for (auto &f0 : rxpkt_err_hdr2_) {
      f0.reset();
    }
    for (auto &f0 : rxpkt_err_hdr3_) {
      f0.reset();
    }
    eth_clkobs_ctrl_.reset();
    for (auto &f0 : eth_gpio_ring_) {
      f0.reset();
    }
    for (auto &f0 : pfcff_ctrl_) {
      f0.reset();
    }
    for (auto &f0 : trunc_ctrl_) {
      f0.reset();
    }
    port_alive_lut_.reset();
    for (auto &f0 : force_pfc_flush_) {
      f0.reset();
    }
    tx_prbs23_.reset();
    int_freeze_.reset();
    ebuf_cred_.reset();
    min_thr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += eth_soft_reset_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += eth_sel_altclk_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += ethsds_int_broadcast_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      r += eth_mac_ts_offset_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += ethsds_int_ctrl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += ethsds_int_stat_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x50) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += ethsds_rxsigok_ctrl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x60) {
      offset -= 0x50;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += ethsds_core_cntl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x70) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += ethsds_status0_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x80) {
      offset -= 0x70;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += ethsds_status1_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xa0) {
      offset -= 0x80;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += eth_onestep_ets_offset_ctrl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      r += int_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      r += int_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      r += int_pri_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xac && offset < 0xb0) {
      offset -= 0xac;
      r += int_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      r += txff_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb4 && offset < 0xb8) {
      offset -= 0xb4;
      r += txff_pream0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb8 && offset < 0xbc) {
      offset -= 0xb8;
      r += txff_pream1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xbc && offset < 0xc0) {
      offset -= 0xbc;
      r += eth_txff_err_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xc4) {
      offset -= 0xc0;
      r += eth_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd0 && offset < 0xe0) {
      offset -= 0xd0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += rxpkt_err_sts_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0xf0) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += rxpkt_err_hdr0_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf0 && offset < 0x100) {
      offset -= 0xf0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += rxpkt_err_hdr1_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x110) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += rxpkt_err_hdr2_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x110 && offset < 0x120) {
      offset -= 0x110;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += rxpkt_err_hdr3_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x120 && offset < 0x124) {
      offset -= 0x120;
      r += eth_clkobs_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x130 && offset < 0x140) {
      offset -= 0x130;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += eth_gpio_ring_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x180) {
      offset -= 0x140;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pfcff_ctrl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x190) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += trunc_ctrl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x190 && offset < 0x194) {
      offset -= 0x190;
      r += port_alive_lut_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1a0 && offset < 0x1b0) {
      offset -= 0x1a0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += force_pfc_flush_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1b0 && offset < 0x1b4) {
      offset -= 0x1b0;
      r += tx_prbs23_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1b8 && offset < 0x1bc) {
      offset -= 0x1b8;
      r += int_freeze_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1bc && offset < 0x1c0) {
      offset -= 0x1bc;
      r += ebuf_cred_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      r += min_thr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += eth_soft_reset_.to_string(print_zeros,indent_string) ;
    r += eth_sel_altclk_.to_string(print_zeros,indent_string) ;
    r += ethsds_int_broadcast_.to_string(print_zeros,indent_string) ;
    r += eth_mac_ts_offset_ctrl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += ethsds_int_ctrl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += ethsds_int_stat_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += ethsds_rxsigok_ctrl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += ethsds_core_cntl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += ethsds_status0_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += ethsds_status1_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += eth_onestep_ets_offset_ctrl_[a0].to_string(print_zeros,indent_string) ;
    }
    r += int_stat_.to_string(print_zeros,indent_string) ;
    r += int_en_.to_string(print_zeros,indent_string) ;
    r += int_pri_.to_string(print_zeros,indent_string) ;
    r += int_inj_.to_string(print_zeros,indent_string) ;
    r += txff_ctrl_.to_string(print_zeros,indent_string) ;
    r += txff_pream0_.to_string(print_zeros,indent_string) ;
    r += txff_pream1_.to_string(print_zeros,indent_string) ;
    r += eth_txff_err_addr_.to_string(print_zeros,indent_string) ;
    r += eth_status_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += rxpkt_err_sts_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += rxpkt_err_hdr0_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += rxpkt_err_hdr1_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += rxpkt_err_hdr2_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += rxpkt_err_hdr3_[a0].to_string(print_zeros,indent_string) ;
    }
    r += eth_clkobs_ctrl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += eth_gpio_ring_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<16;++a0) {
      r += pfcff_ctrl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += trunc_ctrl_[a0].to_string(print_zeros,indent_string) ;
    }
    r += port_alive_lut_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += force_pfc_flush_[a0].to_string(print_zeros,indent_string) ;
    }
    r += tx_prbs23_.to_string(print_zeros,indent_string) ;
    r += int_freeze_.to_string(print_zeros,indent_string) ;
    r += ebuf_cred_.to_string(print_zeros,indent_string) ;
    r += min_thr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  EthRegsEthSoftReset eth_soft_reset_;
  EthRegsEthSelAltclk eth_sel_altclk_;
  EthRegsEthsdsIntCtrl ethsds_int_broadcast_;
  EthRegsEthMacTsOffsetCtrl eth_mac_ts_offset_ctrl_;
  std::array< EthRegsEthsdsIntCtrl, 4 > ethsds_int_ctrl_;
  std::array< EthRegsEthsdsIntStat, 4 > ethsds_int_stat_;
  std::array< EthRegsEthsdsRxsigokCtrl, 4 > ethsds_rxsigok_ctrl_;
  std::array< EthRegsEthsdsCoreCntl, 4 > ethsds_core_cntl_;
  std::array< EthRegsEthsdsStatus0, 4 > ethsds_status0_;
  std::array< EthRegsEthsdsStatus1, 4 > ethsds_status1_;
  std::array< EthRegsEthOnestepEtsOffsetCtrl, 4 > eth_onestep_ets_offset_ctrl_;
  EthRegsIntStat int_stat_;
  EthRegsIntEn int_en_;
  EthRegsIntPri int_pri_;
  EthRegsIntInj int_inj_;
  EthRegsTxffCtrl txff_ctrl_;
  EthRegsTxffPream0 txff_pream0_;
  EthRegsTxffPream1 txff_pream1_;
  EthRegsEthTxffErrAddr eth_txff_err_addr_;
  EthRegsEthStatus eth_status_;
  std::array< EthRegsRxpktErrSts, 4 > rxpkt_err_sts_;
  std::array< EthRegsRxpktErrHdr0, 4 > rxpkt_err_hdr0_;
  std::array< EthRegsRxpktErrHdr1, 4 > rxpkt_err_hdr1_;
  std::array< EthRegsRxpktErrHdr2, 4 > rxpkt_err_hdr2_;
  std::array< EthRegsRxpktErrHdr3, 4 > rxpkt_err_hdr3_;
  EthRegsEthClkobsCtrl eth_clkobs_ctrl_;
  std::array< EthRegsEthGpioRing, 4 > eth_gpio_ring_;
  std::array< EthRegsPfcffCtrlRo, 16 > pfcff_ctrl_;
  std::array< EthRegsTruncCtrl, 4 > trunc_ctrl_;
  EthRegsPortAliveLut port_alive_lut_;
  std::array< EthRegsForcePfcFlush, 4 > force_pfc_flush_;
  EthRegsTxPrbs23 tx_prbs23_;
  EthRegsIntFreeze int_freeze_;
  EthRegsEbufCred ebuf_cred_;
  EthRegsMinThr min_thr_;
private:
  static int StartOffset(
      int index_mac_addrmap
      ) {
    int offset=0;
    offset += 0x1000000; // to get to macs
    assert(index_mac_addrmap < 65);
    offset += index_mac_addrmap * 0x20000; // mac_addrmap[]
    offset += 0x1fc00; // to get to eth_regs
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_ETH_REGS_H__
