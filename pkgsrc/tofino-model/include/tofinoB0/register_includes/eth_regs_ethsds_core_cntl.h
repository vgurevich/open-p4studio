/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH_REGS_ETHSDS_CORE_CNTL_H__
#define __REGISTER_INCLUDES_ETH_REGS_ETHSDS_CORE_CNTL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class EthRegsEthsdsCoreCntl : public model_core::RegisterBlock<RegisterCallback> {
public:
  EthRegsEthsdsCoreCntl(
      int chipNumber, int index_mac_addrmap, int index_eth_regs_ethsds_core_cntl, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_mac_addrmap, index_eth_regs_ethsds_core_cntl), 4, false, write_callback, read_callback, std::string("EthRegsEthsdsCoreCntl")+":"+boost::lexical_cast<std::string>(index_mac_addrmap) + "," + boost::lexical_cast<std::string>(index_eth_regs_ethsds_core_cntl))
    {
    }
  EthRegsEthsdsCoreCntl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "EthRegsEthsdsCoreCntl")
    {
    }
public:





  uint16_t &core_to_cntl() { return core_to_cntl_; }





  uint8_t &tx_ovr() { return tx_ovr_; }





  uint8_t &pcie_txei() { return pcie_txei_; }






  uint8_t &tx_bcon_en() { return tx_bcon_en_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = core_to_cntl_;
    *data |= ((tx_ovr_ & 0x1) << 16);
    *data |= ((pcie_txei_ & 0x1) << 17);
    *data |= ((tx_bcon_en_ & 0x1) << 18);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    core_to_cntl_ = data;
    tx_ovr_ = ((data >> 16) & 0x1);
    pcie_txei_ = ((data >> 17) & 0x1);
    tx_bcon_en_ = ((data >> 18) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    core_to_cntl_ = 0xaa;
    tx_ovr_ = 0x0;
    pcie_txei_ = 0x0;
    tx_bcon_en_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EthRegsEthsdsCoreCntl") + ":\n";
    r += indent_string + "  " + std::string("core_to_cntl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(core_to_cntl_) ) + "\n";
    all_zeros &= (0 == core_to_cntl_);
    r += indent_string + "  " + std::string("tx_ovr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_ovr_) ) + "\n";
    all_zeros &= (0 == tx_ovr_);
    r += indent_string + "  " + std::string("pcie_txei") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pcie_txei_) ) + "\n";
    all_zeros &= (0 == pcie_txei_);
    r += indent_string + "  " + std::string("tx_bcon_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_bcon_en_) ) + "\n";
    all_zeros &= (0 == tx_bcon_en_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EthRegsEthsdsCoreCntl") + ":\n";
    r += indent_string + "  " + std::string("core_to_cntl") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(core_to_cntl_) ) + "\n";
    all_zeros &= (0 == core_to_cntl_);
    r += indent_string + "  " + std::string("tx_ovr") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_ovr_) ) + "\n";
    all_zeros &= (0 == tx_ovr_);
    r += indent_string + "  " + std::string("pcie_txei") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pcie_txei_) ) + "\n";
    all_zeros &= (0 == pcie_txei_);
    r += indent_string + "  " + std::string("tx_bcon_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(tx_bcon_en_) ) + "\n";
    all_zeros &= (0 == tx_bcon_en_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint16_t core_to_cntl_;
  uint8_t tx_ovr_;
  uint8_t pcie_txei_;
  uint8_t tx_bcon_en_;
private:
  static int StartOffset(
      int index_mac_addrmap, int index_eth_regs_ethsds_core_cntl
      ) {
    int offset=0;
    offset += 0x1000000; // to get to macs
    assert(index_mac_addrmap < 65);
    offset += index_mac_addrmap * 0x20000; // mac_addrmap[]
    offset += 0x1fc00; // to get to eth_regs
    offset += 0x50; // to get to ethsds_core_cntl
    assert(index_eth_regs_ethsds_core_cntl < 4);
    offset += index_eth_regs_ethsds_core_cntl * 0x4; // eth_regs_ethsds_core_cntl[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_ETH_REGS_ETHSDS_CORE_CNTL_H__
