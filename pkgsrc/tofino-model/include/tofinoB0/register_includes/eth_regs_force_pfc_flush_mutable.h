/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH_REGS_FORCE_PFC_FLUSH_MUTABLE_H__
#define __REGISTER_INCLUDES_ETH_REGS_FORCE_PFC_FLUSH_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class EthRegsForcePfcFlushMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  EthRegsForcePfcFlushMutable(
      int chipNumber, int index_mac_addrmap, int index_eth_regs_force_pfc_flush, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_mac_addrmap, index_eth_regs_force_pfc_flush), 4, true, write_callback, read_callback, std::string("EthRegsForcePfcFlushMutable")+":"+boost::lexical_cast<std::string>(index_mac_addrmap) + "," + boost::lexical_cast<std::string>(index_eth_regs_force_pfc_flush))
    {
    }
  EthRegsForcePfcFlushMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "EthRegsForcePfcFlushMutable")
    {
    }
public:






  uint8_t force_rx_pfc() { return force_rx_pfc_; }
  void force_rx_pfc(const uint8_t &v) { force_rx_pfc_=v; }





  uint8_t force_rx_xoff() { return force_rx_xoff_; }
  void force_rx_xoff(const uint8_t &v) { force_rx_xoff_=v; }





  uint8_t force_tx_flush() { return force_tx_flush_; }
  void force_tx_flush(const uint8_t &v) { force_tx_flush_=v; }





  uint8_t override_rx_pfc() { return override_rx_pfc_; }
  void override_rx_pfc(const uint8_t &v) { override_rx_pfc_=v; }





  uint8_t override_rx_xoff() { return override_rx_xoff_; }
  void override_rx_xoff(const uint8_t &v) { override_rx_xoff_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = force_rx_pfc_;
    *data |= ((force_rx_xoff_ & 0x1) << 8);
    *data |= ((force_tx_flush_ & 0x1) << 9);
    *data |= ((override_rx_pfc_ & 0x1) << 10);
    *data |= ((override_rx_xoff_ & 0x1) << 11);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    force_rx_pfc_ = data;
    force_rx_xoff_ = ((data >> 8) & 0x1);
    force_tx_flush_ = ((data >> 9) & 0x1);
    override_rx_pfc_ = ((data >> 10) & 0x1);
    override_rx_xoff_ = ((data >> 11) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    force_rx_pfc_ = 0x0;
    force_rx_xoff_ = 0x0;
    force_tx_flush_ = 0x0;
    override_rx_pfc_ = 0x0;
    override_rx_xoff_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EthRegsForcePfcFlushMutable") + ":\n";
    r += indent_string + "  " + std::string("force_rx_pfc") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(force_rx_pfc_) ) + "\n";
    all_zeros &= (0 == force_rx_pfc_);
    r += indent_string + "  " + std::string("force_rx_xoff") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(force_rx_xoff_) ) + "\n";
    all_zeros &= (0 == force_rx_xoff_);
    r += indent_string + "  " + std::string("force_tx_flush") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(force_tx_flush_) ) + "\n";
    all_zeros &= (0 == force_tx_flush_);
    r += indent_string + "  " + std::string("override_rx_pfc") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(override_rx_pfc_) ) + "\n";
    all_zeros &= (0 == override_rx_pfc_);
    r += indent_string + "  " + std::string("override_rx_xoff") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(override_rx_xoff_) ) + "\n";
    all_zeros &= (0 == override_rx_xoff_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EthRegsForcePfcFlushMutable") + ":\n";
    r += indent_string + "  " + std::string("force_rx_pfc") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(force_rx_pfc_) ) + "\n";
    all_zeros &= (0 == force_rx_pfc_);
    r += indent_string + "  " + std::string("force_rx_xoff") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(force_rx_xoff_) ) + "\n";
    all_zeros &= (0 == force_rx_xoff_);
    r += indent_string + "  " + std::string("force_tx_flush") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(force_tx_flush_) ) + "\n";
    all_zeros &= (0 == force_tx_flush_);
    r += indent_string + "  " + std::string("override_rx_pfc") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(override_rx_pfc_) ) + "\n";
    all_zeros &= (0 == override_rx_pfc_);
    r += indent_string + "  " + std::string("override_rx_xoff") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(override_rx_xoff_) ) + "\n";
    all_zeros &= (0 == override_rx_xoff_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t force_rx_pfc_;
  uint8_t force_rx_xoff_;
  uint8_t force_tx_flush_;
  uint8_t override_rx_pfc_;
  uint8_t override_rx_xoff_;
private:
  static int StartOffset(
      int index_mac_addrmap, int index_eth_regs_force_pfc_flush
      ) {
    int offset=0;
    offset += 0x1000000; // to get to macs
    assert(index_mac_addrmap < 65);
    offset += index_mac_addrmap * 0x20000; // mac_addrmap[]
    offset += 0x1fc00; // to get to eth_regs
    offset += 0x1a0; // to get to force_pfc_flush
    assert(index_eth_regs_force_pfc_flush < 4);
    offset += index_eth_regs_force_pfc_flush * 0x4; // eth_regs_force_pfc_flush[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_ETH_REGS_FORCE_PFC_FLUSH_MUTABLE_H__
