/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH_REGS_INT_STAT_H__
#define __REGISTER_INCLUDES_ETH_REGS_INT_STAT_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class EthRegsIntStat : public model_core::RegisterBlock<RegisterCallback> {
public:
  EthRegsIntStat(
      int chipNumber, int index_mac_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_mac_addrmap), 4, false, write_callback, read_callback, std::string("EthRegsIntStat")+":"+boost::lexical_cast<std::string>(index_mac_addrmap))
    {
    }
  EthRegsIntStat(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "EthRegsIntStat")
    {
    }
public:





  uint8_t &ethsds_lane0_dual_err() { return ethsds_lane0_dual_err_; }





  uint8_t &ethsds_lane1_dual_err() { return ethsds_lane1_dual_err_; }





  uint8_t &ethsds_lane2_dual_err() { return ethsds_lane2_dual_err_; }





  uint8_t &ethsds_lane3_dual_err() { return ethsds_lane3_dual_err_; }





  uint8_t &eth_txff_dual_err() { return eth_txff_dual_err_; }





  uint8_t &eth_pfcff_dual_err() { return eth_pfcff_dual_err_; }





  uint8_t &ethsds_lane0_sngl_err() { return ethsds_lane0_sngl_err_; }





  uint8_t &ethsds_lane1_sngl_err() { return ethsds_lane1_sngl_err_; }





  uint8_t &ethsds_lane2_sngl_err() { return ethsds_lane2_sngl_err_; }





  uint8_t &ethsds_lane3_sngl_err() { return ethsds_lane3_sngl_err_; }





  uint8_t &eth_txff_sngl_err() { return eth_txff_sngl_err_; }





  uint8_t &eth_pfcff_sngl_err() { return eth_pfcff_sngl_err_; }





  uint8_t &pfc_ovf0_int() { return pfc_ovf0_int_; }





  uint8_t &pfc_ovf1_int() { return pfc_ovf1_int_; }





  uint8_t &pfc_ovf2_int() { return pfc_ovf2_int_; }





  uint8_t &pfc_ovf3_int() { return pfc_ovf3_int_; }





  uint8_t &crc32err0_int() { return crc32err0_int_; }





  uint8_t &crc32err1_int() { return crc32err1_int_; }





  uint8_t &crc32err2_int() { return crc32err2_int_; }





  uint8_t &crc32err3_int() { return crc32err3_int_; }







  uint8_t &ethmac_glb_int() { return ethmac_glb_int_; }





  uint8_t &txff_ovf0_int() { return txff_ovf0_int_; }





  uint8_t &txff_ovf1_int() { return txff_ovf1_int_; }





  uint8_t &txff_ovf2_int() { return txff_ovf2_int_; }





  uint8_t &txff_ovf3_int() { return txff_ovf3_int_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (ethsds_lane0_dual_err_ & 0x1);
    *data |= ((ethsds_lane1_dual_err_ & 0x1) << 1);
    *data |= ((ethsds_lane2_dual_err_ & 0x1) << 2);
    *data |= ((ethsds_lane3_dual_err_ & 0x1) << 3);
    *data |= ((eth_txff_dual_err_ & 0x1) << 4);
    *data |= ((eth_pfcff_dual_err_ & 0x1) << 5);
    *data |= ((ethsds_lane0_sngl_err_ & 0x1) << 6);
    *data |= ((ethsds_lane1_sngl_err_ & 0x1) << 7);
    *data |= ((ethsds_lane2_sngl_err_ & 0x1) << 8);
    *data |= ((ethsds_lane3_sngl_err_ & 0x1) << 9);
    *data |= ((eth_txff_sngl_err_ & 0x1) << 10);
    *data |= ((eth_pfcff_sngl_err_ & 0x1) << 11);
    *data |= ((pfc_ovf0_int_ & 0x1) << 12);
    *data |= ((pfc_ovf1_int_ & 0x1) << 13);
    *data |= ((pfc_ovf2_int_ & 0x1) << 14);
    *data |= ((pfc_ovf3_int_ & 0x1) << 15);
    *data |= ((crc32err0_int_ & 0x1) << 16);
    *data |= ((crc32err1_int_ & 0x1) << 17);
    *data |= ((crc32err2_int_ & 0x1) << 18);
    *data |= ((crc32err3_int_ & 0x1) << 19);
    *data |= ((ethmac_glb_int_ & 0x1) << 20);
    *data |= ((txff_ovf0_int_ & 0x1) << 21);
    *data |= ((txff_ovf1_int_ & 0x1) << 22);
    *data |= ((txff_ovf2_int_ & 0x1) << 23);
    *data |= ((txff_ovf3_int_ & 0x1) << 24);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    ethsds_lane0_dual_err_ &= ~(data & 0x1);
    ethsds_lane1_dual_err_ &= ~((data >> 1) & 0x1);
    ethsds_lane2_dual_err_ &= ~((data >> 2) & 0x1);
    ethsds_lane3_dual_err_ &= ~((data >> 3) & 0x1);
    eth_txff_dual_err_ &= ~((data >> 4) & 0x1);
    eth_pfcff_dual_err_ &= ~((data >> 5) & 0x1);
    ethsds_lane0_sngl_err_ &= ~((data >> 6) & 0x1);
    ethsds_lane1_sngl_err_ &= ~((data >> 7) & 0x1);
    ethsds_lane2_sngl_err_ &= ~((data >> 8) & 0x1);
    ethsds_lane3_sngl_err_ &= ~((data >> 9) & 0x1);
    eth_txff_sngl_err_ &= ~((data >> 10) & 0x1);
    eth_pfcff_sngl_err_ &= ~((data >> 11) & 0x1);
    pfc_ovf0_int_ &= ~((data >> 12) & 0x1);
    pfc_ovf1_int_ &= ~((data >> 13) & 0x1);
    pfc_ovf2_int_ &= ~((data >> 14) & 0x1);
    pfc_ovf3_int_ &= ~((data >> 15) & 0x1);
    crc32err0_int_ &= ~((data >> 16) & 0x1);
    crc32err1_int_ &= ~((data >> 17) & 0x1);
    crc32err2_int_ &= ~((data >> 18) & 0x1);
    crc32err3_int_ &= ~((data >> 19) & 0x1);
    ethmac_glb_int_ = ((data >> 20) & 0x1);
    txff_ovf0_int_ &= ~((data >> 21) & 0x1);
    txff_ovf1_int_ &= ~((data >> 22) & 0x1);
    txff_ovf2_int_ &= ~((data >> 23) & 0x1);
    txff_ovf3_int_ &= ~((data >> 24) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    ethsds_lane0_dual_err_ = 0x0;
    ethsds_lane1_dual_err_ = 0x0;
    ethsds_lane2_dual_err_ = 0x0;
    ethsds_lane3_dual_err_ = 0x0;
    eth_txff_dual_err_ = 0x0;
    eth_pfcff_dual_err_ = 0x0;
    ethsds_lane0_sngl_err_ = 0x0;
    ethsds_lane1_sngl_err_ = 0x0;
    ethsds_lane2_sngl_err_ = 0x0;
    ethsds_lane3_sngl_err_ = 0x0;
    eth_txff_sngl_err_ = 0x0;
    eth_pfcff_sngl_err_ = 0x0;
    pfc_ovf0_int_ = 0x0;
    pfc_ovf1_int_ = 0x0;
    pfc_ovf2_int_ = 0x0;
    pfc_ovf3_int_ = 0x0;
    crc32err0_int_ = 0x0;
    crc32err1_int_ = 0x0;
    crc32err2_int_ = 0x0;
    crc32err3_int_ = 0x0;
    ethmac_glb_int_ = 0x0;
    txff_ovf0_int_ = 0x0;
    txff_ovf1_int_ = 0x0;
    txff_ovf2_int_ = 0x0;
    txff_ovf3_int_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EthRegsIntStat") + ":\n";
    r += indent_string + "  " + std::string("ethsds_lane0_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethsds_lane0_dual_err_) ) + "\n";
    all_zeros &= (0 == ethsds_lane0_dual_err_);
    r += indent_string + "  " + std::string("ethsds_lane1_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethsds_lane1_dual_err_) ) + "\n";
    all_zeros &= (0 == ethsds_lane1_dual_err_);
    r += indent_string + "  " + std::string("ethsds_lane2_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethsds_lane2_dual_err_) ) + "\n";
    all_zeros &= (0 == ethsds_lane2_dual_err_);
    r += indent_string + "  " + std::string("ethsds_lane3_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethsds_lane3_dual_err_) ) + "\n";
    all_zeros &= (0 == ethsds_lane3_dual_err_);
    r += indent_string + "  " + std::string("eth_txff_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eth_txff_dual_err_) ) + "\n";
    all_zeros &= (0 == eth_txff_dual_err_);
    r += indent_string + "  " + std::string("eth_pfcff_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eth_pfcff_dual_err_) ) + "\n";
    all_zeros &= (0 == eth_pfcff_dual_err_);
    r += indent_string + "  " + std::string("ethsds_lane0_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethsds_lane0_sngl_err_) ) + "\n";
    all_zeros &= (0 == ethsds_lane0_sngl_err_);
    r += indent_string + "  " + std::string("ethsds_lane1_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethsds_lane1_sngl_err_) ) + "\n";
    all_zeros &= (0 == ethsds_lane1_sngl_err_);
    r += indent_string + "  " + std::string("ethsds_lane2_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethsds_lane2_sngl_err_) ) + "\n";
    all_zeros &= (0 == ethsds_lane2_sngl_err_);
    r += indent_string + "  " + std::string("ethsds_lane3_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethsds_lane3_sngl_err_) ) + "\n";
    all_zeros &= (0 == ethsds_lane3_sngl_err_);
    r += indent_string + "  " + std::string("eth_txff_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eth_txff_sngl_err_) ) + "\n";
    all_zeros &= (0 == eth_txff_sngl_err_);
    r += indent_string + "  " + std::string("eth_pfcff_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eth_pfcff_sngl_err_) ) + "\n";
    all_zeros &= (0 == eth_pfcff_sngl_err_);
    r += indent_string + "  " + std::string("pfc_ovf0_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_ovf0_int_) ) + "\n";
    all_zeros &= (0 == pfc_ovf0_int_);
    r += indent_string + "  " + std::string("pfc_ovf1_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_ovf1_int_) ) + "\n";
    all_zeros &= (0 == pfc_ovf1_int_);
    r += indent_string + "  " + std::string("pfc_ovf2_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_ovf2_int_) ) + "\n";
    all_zeros &= (0 == pfc_ovf2_int_);
    r += indent_string + "  " + std::string("pfc_ovf3_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_ovf3_int_) ) + "\n";
    all_zeros &= (0 == pfc_ovf3_int_);
    r += indent_string + "  " + std::string("crc32err0_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crc32err0_int_) ) + "\n";
    all_zeros &= (0 == crc32err0_int_);
    r += indent_string + "  " + std::string("crc32err1_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crc32err1_int_) ) + "\n";
    all_zeros &= (0 == crc32err1_int_);
    r += indent_string + "  " + std::string("crc32err2_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crc32err2_int_) ) + "\n";
    all_zeros &= (0 == crc32err2_int_);
    r += indent_string + "  " + std::string("crc32err3_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crc32err3_int_) ) + "\n";
    all_zeros &= (0 == crc32err3_int_);
    r += indent_string + "  " + std::string("ethmac_glb_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethmac_glb_int_) ) + "\n";
    all_zeros &= (0 == ethmac_glb_int_);
    r += indent_string + "  " + std::string("txff_ovf0_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txff_ovf0_int_) ) + "\n";
    all_zeros &= (0 == txff_ovf0_int_);
    r += indent_string + "  " + std::string("txff_ovf1_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txff_ovf1_int_) ) + "\n";
    all_zeros &= (0 == txff_ovf1_int_);
    r += indent_string + "  " + std::string("txff_ovf2_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txff_ovf2_int_) ) + "\n";
    all_zeros &= (0 == txff_ovf2_int_);
    r += indent_string + "  " + std::string("txff_ovf3_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txff_ovf3_int_) ) + "\n";
    all_zeros &= (0 == txff_ovf3_int_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EthRegsIntStat") + ":\n";
    r += indent_string + "  " + std::string("ethsds_lane0_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethsds_lane0_dual_err_) ) + "\n";
    all_zeros &= (0 == ethsds_lane0_dual_err_);
    r += indent_string + "  " + std::string("ethsds_lane1_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethsds_lane1_dual_err_) ) + "\n";
    all_zeros &= (0 == ethsds_lane1_dual_err_);
    r += indent_string + "  " + std::string("ethsds_lane2_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethsds_lane2_dual_err_) ) + "\n";
    all_zeros &= (0 == ethsds_lane2_dual_err_);
    r += indent_string + "  " + std::string("ethsds_lane3_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethsds_lane3_dual_err_) ) + "\n";
    all_zeros &= (0 == ethsds_lane3_dual_err_);
    r += indent_string + "  " + std::string("eth_txff_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eth_txff_dual_err_) ) + "\n";
    all_zeros &= (0 == eth_txff_dual_err_);
    r += indent_string + "  " + std::string("eth_pfcff_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eth_pfcff_dual_err_) ) + "\n";
    all_zeros &= (0 == eth_pfcff_dual_err_);
    r += indent_string + "  " + std::string("ethsds_lane0_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethsds_lane0_sngl_err_) ) + "\n";
    all_zeros &= (0 == ethsds_lane0_sngl_err_);
    r += indent_string + "  " + std::string("ethsds_lane1_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethsds_lane1_sngl_err_) ) + "\n";
    all_zeros &= (0 == ethsds_lane1_sngl_err_);
    r += indent_string + "  " + std::string("ethsds_lane2_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethsds_lane2_sngl_err_) ) + "\n";
    all_zeros &= (0 == ethsds_lane2_sngl_err_);
    r += indent_string + "  " + std::string("ethsds_lane3_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethsds_lane3_sngl_err_) ) + "\n";
    all_zeros &= (0 == ethsds_lane3_sngl_err_);
    r += indent_string + "  " + std::string("eth_txff_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eth_txff_sngl_err_) ) + "\n";
    all_zeros &= (0 == eth_txff_sngl_err_);
    r += indent_string + "  " + std::string("eth_pfcff_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(eth_pfcff_sngl_err_) ) + "\n";
    all_zeros &= (0 == eth_pfcff_sngl_err_);
    r += indent_string + "  " + std::string("pfc_ovf0_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_ovf0_int_) ) + "\n";
    all_zeros &= (0 == pfc_ovf0_int_);
    r += indent_string + "  " + std::string("pfc_ovf1_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_ovf1_int_) ) + "\n";
    all_zeros &= (0 == pfc_ovf1_int_);
    r += indent_string + "  " + std::string("pfc_ovf2_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_ovf2_int_) ) + "\n";
    all_zeros &= (0 == pfc_ovf2_int_);
    r += indent_string + "  " + std::string("pfc_ovf3_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pfc_ovf3_int_) ) + "\n";
    all_zeros &= (0 == pfc_ovf3_int_);
    r += indent_string + "  " + std::string("crc32err0_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crc32err0_int_) ) + "\n";
    all_zeros &= (0 == crc32err0_int_);
    r += indent_string + "  " + std::string("crc32err1_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crc32err1_int_) ) + "\n";
    all_zeros &= (0 == crc32err1_int_);
    r += indent_string + "  " + std::string("crc32err2_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crc32err2_int_) ) + "\n";
    all_zeros &= (0 == crc32err2_int_);
    r += indent_string + "  " + std::string("crc32err3_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crc32err3_int_) ) + "\n";
    all_zeros &= (0 == crc32err3_int_);
    r += indent_string + "  " + std::string("ethmac_glb_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ethmac_glb_int_) ) + "\n";
    all_zeros &= (0 == ethmac_glb_int_);
    r += indent_string + "  " + std::string("txff_ovf0_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txff_ovf0_int_) ) + "\n";
    all_zeros &= (0 == txff_ovf0_int_);
    r += indent_string + "  " + std::string("txff_ovf1_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txff_ovf1_int_) ) + "\n";
    all_zeros &= (0 == txff_ovf1_int_);
    r += indent_string + "  " + std::string("txff_ovf2_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txff_ovf2_int_) ) + "\n";
    all_zeros &= (0 == txff_ovf2_int_);
    r += indent_string + "  " + std::string("txff_ovf3_int") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txff_ovf3_int_) ) + "\n";
    all_zeros &= (0 == txff_ovf3_int_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t ethsds_lane0_dual_err_;
  uint8_t ethsds_lane1_dual_err_;
  uint8_t ethsds_lane2_dual_err_;
  uint8_t ethsds_lane3_dual_err_;
  uint8_t eth_txff_dual_err_;
  uint8_t eth_pfcff_dual_err_;
  uint8_t ethsds_lane0_sngl_err_;
  uint8_t ethsds_lane1_sngl_err_;
  uint8_t ethsds_lane2_sngl_err_;
  uint8_t ethsds_lane3_sngl_err_;
  uint8_t eth_txff_sngl_err_;
  uint8_t eth_pfcff_sngl_err_;
  uint8_t pfc_ovf0_int_;
  uint8_t pfc_ovf1_int_;
  uint8_t pfc_ovf2_int_;
  uint8_t pfc_ovf3_int_;
  uint8_t crc32err0_int_;
  uint8_t crc32err1_int_;
  uint8_t crc32err2_int_;
  uint8_t crc32err3_int_;
  uint8_t ethmac_glb_int_;
  uint8_t txff_ovf0_int_;
  uint8_t txff_ovf1_int_;
  uint8_t txff_ovf2_int_;
  uint8_t txff_ovf3_int_;
private:
  static int StartOffset(
      int index_mac_addrmap
      ) {
    int offset=0;
    offset += 0x1000000; // to get to macs
    assert(index_mac_addrmap < 65);
    offset += index_mac_addrmap * 0x20000; // mac_addrmap[]
    offset += 0x1fc00; // to get to eth_regs
    offset += 0xa0; // to get to int_stat
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_ETH_REGS_INT_STAT_H__
