/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ETH_REGS_TXFF_CTRL_H__
#define __REGISTER_INCLUDES_ETH_REGS_TXFF_CTRL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class EthRegsTxffCtrl : public model_core::RegisterBlock<RegisterCallback> {
public:
  EthRegsTxffCtrl(
      int chipNumber, int index_mac_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_mac_addrmap), 4, false, write_callback, read_callback, std::string("EthRegsTxffCtrl")+":"+boost::lexical_cast<std::string>(index_mac_addrmap))
    {
    }
  EthRegsTxffCtrl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "EthRegsTxffCtrl")
    {
    }
public:








  uint8_t &chnl_seq() { return chnl_seq_; }






  uint8_t &crcchk_dis() { return crcchk_dis_; }





  uint8_t &crcrmv_dis() { return crcrmv_dis_; }





  uint8_t &chnl_ena() { return chnl_ena_; }






  uint8_t &ins_ws() { return ins_ws_; }









  uint8_t &chnl_mode0() { return chnl_mode0_; }









  uint8_t &chnl_mode1() { return chnl_mode1_; }





  uint8_t &txdisfcs() { return txdisfcs_; }





  uint8_t &txdispad() { return txdispad_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = chnl_seq_;
    *data |= ((crcchk_dis_ & 0xf) << 8);
    *data |= ((crcrmv_dis_ & 0xf) << 12);
    *data |= ((chnl_ena_ & 0xf) << 16);
    *data |= ((ins_ws_ & 0x7) << 20);
    *data |= ((chnl_mode0_ & 0x3) << 24);
    *data |= ((chnl_mode1_ & 0x3) << 26);
    *data |= ((txdisfcs_ & 0x1) << 28);
    *data |= ((txdispad_ & 0x1) << 29);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    chnl_seq_ = data;
    crcchk_dis_ = ((data >> 8) & 0xf);
    crcrmv_dis_ = ((data >> 12) & 0xf);
    chnl_ena_ = ((data >> 16) & 0xf);
    ins_ws_ = ((data >> 20) & 0x7);
    chnl_mode0_ = ((data >> 24) & 0x3);
    chnl_mode1_ = ((data >> 26) & 0x3);
    txdisfcs_ = ((data >> 28) & 0x1);
    txdispad_ = ((data >> 29) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    chnl_seq_ = 0x0;
    crcchk_dis_ = 0x0;
    crcrmv_dis_ = 0x0;
    chnl_ena_ = 0x0;
    ins_ws_ = 0x0;
    chnl_mode0_ = 0x0;
    chnl_mode1_ = 0x0;
    txdisfcs_ = 0x0;
    txdispad_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EthRegsTxffCtrl") + ":\n";
    r += indent_string + "  " + std::string("chnl_seq") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_seq_) ) + "\n";
    all_zeros &= (0 == chnl_seq_);
    r += indent_string + "  " + std::string("crcchk_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcchk_dis_) ) + "\n";
    all_zeros &= (0 == crcchk_dis_);
    r += indent_string + "  " + std::string("crcrmv_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcrmv_dis_) ) + "\n";
    all_zeros &= (0 == crcrmv_dis_);
    r += indent_string + "  " + std::string("chnl_ena") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_ena_) ) + "\n";
    all_zeros &= (0 == chnl_ena_);
    r += indent_string + "  " + std::string("ins_ws") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ins_ws_) ) + "\n";
    all_zeros &= (0 == ins_ws_);
    r += indent_string + "  " + std::string("chnl_mode0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_mode0_) ) + "\n";
    all_zeros &= (0 == chnl_mode0_);
    r += indent_string + "  " + std::string("chnl_mode1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_mode1_) ) + "\n";
    all_zeros &= (0 == chnl_mode1_);
    r += indent_string + "  " + std::string("txdisfcs") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txdisfcs_) ) + "\n";
    all_zeros &= (0 == txdisfcs_);
    r += indent_string + "  " + std::string("txdispad") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txdispad_) ) + "\n";
    all_zeros &= (0 == txdispad_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("EthRegsTxffCtrl") + ":\n";
    r += indent_string + "  " + std::string("chnl_seq") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_seq_) ) + "\n";
    all_zeros &= (0 == chnl_seq_);
    r += indent_string + "  " + std::string("crcchk_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcchk_dis_) ) + "\n";
    all_zeros &= (0 == crcchk_dis_);
    r += indent_string + "  " + std::string("crcrmv_dis") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crcrmv_dis_) ) + "\n";
    all_zeros &= (0 == crcrmv_dis_);
    r += indent_string + "  " + std::string("chnl_ena") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_ena_) ) + "\n";
    all_zeros &= (0 == chnl_ena_);
    r += indent_string + "  " + std::string("ins_ws") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ins_ws_) ) + "\n";
    all_zeros &= (0 == ins_ws_);
    r += indent_string + "  " + std::string("chnl_mode0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_mode0_) ) + "\n";
    all_zeros &= (0 == chnl_mode0_);
    r += indent_string + "  " + std::string("chnl_mode1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl_mode1_) ) + "\n";
    all_zeros &= (0 == chnl_mode1_);
    r += indent_string + "  " + std::string("txdisfcs") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txdisfcs_) ) + "\n";
    all_zeros &= (0 == txdisfcs_);
    r += indent_string + "  " + std::string("txdispad") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(txdispad_) ) + "\n";
    all_zeros &= (0 == txdispad_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t chnl_seq_;
  uint8_t crcchk_dis_;
  uint8_t crcrmv_dis_;
  uint8_t chnl_ena_;
  uint8_t ins_ws_;
  uint8_t chnl_mode0_;
  uint8_t chnl_mode1_;
  uint8_t txdisfcs_;
  uint8_t txdispad_;
private:
  static int StartOffset(
      int index_mac_addrmap
      ) {
    int offset=0;
    offset += 0x1000000; // to get to macs
    assert(index_mac_addrmap < 65);
    offset += index_mac_addrmap * 0x20000; // mac_addrmap[]
    offset += 0x1fc00; // to get to eth_regs
    offset += 0xb0; // to get to txff_ctrl
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_ETH_REGS_TXFF_CTRL_H__
