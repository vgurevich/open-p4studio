/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_GLB_GROUP_H__
#define __REGISTER_INCLUDES_GLB_GROUP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "bank_watermark_afull.h"
#include "bank_watermark_drop.h"
#include "bank_watermark_tx_xoff.h"
#include "cred_ctrl.h"
#include "cred_cur.h"
#include "dbg_ctrl.h"
#include "freelist_cnt.h"
#include "freelist_reg.h"
#include "glb_ctrl.h"
#include "glb_err_addr0.h"
#include "glb_err_addr1.h"
#include "glb_err_addr2.h"
#include "glb_meta_avail.h"
#include "glb_parser_maxbyte.h"
#include "indmfree_cnt.h"
#include "indmfree_reg.h"
#include "int_en.h"
#include "int_freeze.h"
#include "int_inj.h"
#include "int_pri.h"
#include "int_stat.h"
#include "time_offset.h"

namespace tofinoB0 {
  namespace register_classes {

class GlbGroup : public model_core::RegisterBlock<RegisterCallback> {
public:
  GlbGroup(
      int chipNumber, int index_pipe_addrmap, int index_ibp_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ibp_rspec), 512, false, write_callback, read_callback, std::string("GlbGroup")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ibp_rspec))
    {
    }
  GlbGroup(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "GlbGroup")
    {
    }
public:





  GlbCtrl &glb_group_glb_ctrl() { return glb_group_glb_ctrl_; }





  GlbParserMaxbyte &glb_group_glb_parser_maxbyte() { return glb_group_glb_parser_maxbyte_; }





  GlbMetaAvail &glb_group_glb_meta_avail() { return glb_group_glb_meta_avail_; }






  BankWatermarkAfull &glb_group_bank_watermark_afull() { return glb_group_bank_watermark_afull_; }







  BankWatermarkTxXoff &glb_group_bank_watermark_tx_xoff() { return glb_group_bank_watermark_tx_xoff_; }






  BankWatermarkDrop &glb_group_bank_watermark_drop() { return glb_group_bank_watermark_drop_; }





  IntStat &glb_group_int_stat() { return glb_group_int_stat_; }





  IntEn &glb_group_int_en() { return glb_group_int_en_; }





  IntPri &glb_group_int_pri() { return glb_group_int_pri_; }






  IntInj &glb_group_int_inj() { return glb_group_int_inj_; }





  GlbErrAddr0 &glb_group_glb_err_addr0() { return glb_group_glb_err_addr0_; }





  GlbErrAddr1 &glb_group_glb_err_addr1() { return glb_group_glb_err_addr1_; }





  GlbErrAddr2 &glb_group_glb_err_addr2() { return glb_group_glb_err_addr2_; }





  IndmfreeCnt &glb_group_indmfree_cnt() { return glb_group_indmfree_cnt_; }







  IndmfreeReg &glb_group_indmfree_reg(int j0) { return glb_group_indmfree_reg_[j0]; }







  FreelistCnt &glb_group_freelist_cnt(int j0) { return glb_group_freelist_cnt_[j0]; }






  TimeOffset &glb_group_tim_off() { return glb_group_tim_off_; }





  IntFreeze &glb_group_int_freeze() { return glb_group_int_freeze_; }





  DbgCtrl &glb_group_dbg_ctrl() { return glb_group_dbg_ctrl_; }





  CredCtrl &glb_group_cred_ctrl() { return glb_group_cred_ctrl_; }





  CredCur &glb_group_cred_cur() { return glb_group_cred_cur_; }







  FreelistReg &glb_group_freelist_reg(int j0) { return glb_group_freelist_reg_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      glb_group_glb_ctrl_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      glb_group_glb_parser_maxbyte_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      glb_group_glb_meta_avail_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      glb_group_bank_watermark_afull_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      glb_group_bank_watermark_tx_xoff_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      glb_group_bank_watermark_drop_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      glb_group_int_stat_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      glb_group_int_en_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      glb_group_int_pri_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      glb_group_int_inj_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      glb_group_glb_err_addr0_.read( offset, data );
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      if (read_callback_) read_callback_();
      glb_group_glb_err_addr1_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      glb_group_glb_err_addr2_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      glb_group_indmfree_cnt_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x80) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      glb_group_indmfree_reg_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x90) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      glb_group_freelist_cnt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      if (read_callback_) read_callback_();
      glb_group_tim_off_.read( offset, data );
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      if (read_callback_) read_callback_();
      glb_group_int_freeze_.read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      if (read_callback_) read_callback_();
      glb_group_dbg_ctrl_.read( offset, data );
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      if (read_callback_) read_callback_();
      glb_group_cred_ctrl_.read( offset, data );
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      if (read_callback_) read_callback_();
      glb_group_cred_cur_.read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x200) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      glb_group_freelist_reg_[ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      glb_group_glb_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      glb_group_glb_parser_maxbyte_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      glb_group_glb_meta_avail_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      glb_group_bank_watermark_afull_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      glb_group_bank_watermark_tx_xoff_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      glb_group_bank_watermark_drop_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      glb_group_int_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      glb_group_int_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      glb_group_int_pri_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      glb_group_int_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      glb_group_glb_err_addr0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      glb_group_glb_err_addr1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      glb_group_glb_err_addr2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      glb_group_indmfree_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x80) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      glb_group_indmfree_reg_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x90) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      glb_group_freelist_cnt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      glb_group_tim_off_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      glb_group_int_freeze_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      glb_group_dbg_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      glb_group_cred_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      glb_group_cred_cur_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x200) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      glb_group_freelist_reg_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    glb_group_glb_ctrl_.reset();
    glb_group_glb_parser_maxbyte_.reset();
    glb_group_glb_meta_avail_.reset();
    glb_group_bank_watermark_afull_.reset();
    glb_group_bank_watermark_tx_xoff_.reset();
    glb_group_bank_watermark_drop_.reset();
    glb_group_int_stat_.reset();
    glb_group_int_en_.reset();
    glb_group_int_pri_.reset();
    glb_group_int_inj_.reset();
    glb_group_glb_err_addr0_.reset();
    glb_group_glb_err_addr1_.reset();
    glb_group_glb_err_addr2_.reset();
    glb_group_indmfree_cnt_.reset();
    for (auto &f0 : glb_group_indmfree_reg_) {
      f0.reset();
    }
    for (auto &f0 : glb_group_freelist_cnt_) {
      f0.reset();
    }
    glb_group_tim_off_.reset();
    glb_group_int_freeze_.reset();
    glb_group_dbg_ctrl_.reset();
    glb_group_cred_ctrl_.reset();
    glb_group_cred_cur_.reset();
    for (auto &f0 : glb_group_freelist_reg_) {
      f0.reset();
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += glb_group_glb_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += glb_group_glb_parser_maxbyte_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += glb_group_glb_meta_avail_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += glb_group_bank_watermark_afull_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += glb_group_bank_watermark_tx_xoff_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += glb_group_bank_watermark_drop_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += glb_group_int_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += glb_group_int_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += glb_group_int_pri_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += glb_group_int_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += glb_group_glb_err_addr0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      r += glb_group_glb_err_addr1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += glb_group_glb_err_addr2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += glb_group_indmfree_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x80) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += glb_group_indmfree_reg_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x90) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += glb_group_freelist_cnt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x94 && offset < 0x98) {
      offset -= 0x94;
      r += glb_group_tim_off_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x9c && offset < 0xa0) {
      offset -= 0x9c;
      r += glb_group_int_freeze_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xa4) {
      offset -= 0xa0;
      r += glb_group_dbg_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa4 && offset < 0xa8) {
      offset -= 0xa4;
      r += glb_group_cred_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa8 && offset < 0xac) {
      offset -= 0xa8;
      r += glb_group_cred_cur_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x200) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += glb_group_freelist_reg_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += glb_group_glb_ctrl_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_parser_maxbyte_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_meta_avail_.to_string(print_zeros,indent_string) ;
    r += glb_group_bank_watermark_afull_.to_string(print_zeros,indent_string) ;
    r += glb_group_bank_watermark_tx_xoff_.to_string(print_zeros,indent_string) ;
    r += glb_group_bank_watermark_drop_.to_string(print_zeros,indent_string) ;
    r += glb_group_int_stat_.to_string(print_zeros,indent_string) ;
    r += glb_group_int_en_.to_string(print_zeros,indent_string) ;
    r += glb_group_int_pri_.to_string(print_zeros,indent_string) ;
    r += glb_group_int_inj_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_err_addr0_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_err_addr1_.to_string(print_zeros,indent_string) ;
    r += glb_group_glb_err_addr2_.to_string(print_zeros,indent_string) ;
    r += glb_group_indmfree_cnt_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<16;++a0) {
      r += glb_group_indmfree_reg_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += glb_group_freelist_cnt_[a0].to_string(print_zeros,indent_string) ;
    }
    r += glb_group_tim_off_.to_string(print_zeros,indent_string) ;
    r += glb_group_int_freeze_.to_string(print_zeros,indent_string) ;
    r += glb_group_dbg_ctrl_.to_string(print_zeros,indent_string) ;
    r += glb_group_cred_ctrl_.to_string(print_zeros,indent_string) ;
    r += glb_group_cred_cur_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<64;++a0) {
      r += glb_group_freelist_reg_[a0].to_string(print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  GlbCtrl glb_group_glb_ctrl_;
  GlbParserMaxbyte glb_group_glb_parser_maxbyte_;
  GlbMetaAvail glb_group_glb_meta_avail_;
  BankWatermarkAfull glb_group_bank_watermark_afull_;
  BankWatermarkTxXoff glb_group_bank_watermark_tx_xoff_;
  BankWatermarkDrop glb_group_bank_watermark_drop_;
  IntStat glb_group_int_stat_;
  IntEn glb_group_int_en_;
  IntPri glb_group_int_pri_;
  IntInj glb_group_int_inj_;
  GlbErrAddr0 glb_group_glb_err_addr0_;
  GlbErrAddr1 glb_group_glb_err_addr1_;
  GlbErrAddr2 glb_group_glb_err_addr2_;
  IndmfreeCnt glb_group_indmfree_cnt_;
  std::array< IndmfreeReg, 16 > glb_group_indmfree_reg_;
  std::array< FreelistCnt, 4 > glb_group_freelist_cnt_;
  TimeOffset glb_group_tim_off_;
  IntFreeze glb_group_int_freeze_;
  DbgCtrl glb_group_dbg_ctrl_;
  CredCtrl glb_group_cred_ctrl_;
  CredCur glb_group_cred_cur_;
  std::array< FreelistReg, 64 > glb_group_freelist_reg_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ibp_rspec
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    assert(index_ibp_rspec < 18);
    offset += index_ibp_rspec * 0x2000; // ibp_rspec[]
    offset += 0x1800; // to get to ing_buf_regs
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_GLB_GROUP_H__
