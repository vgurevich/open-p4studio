/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_GPIO_COMMON_REGS_H__
#define __REGISTER_INCLUDES_GPIO_COMMON_REGS_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "gpio_common_regs_gpio_status.h"
#include "gpio_common_regs_i2c_basetime.h"
#include "gpio_common_regs_int_en.h"
#include "gpio_common_regs_int_inj.h"
#include "gpio_common_regs_int_pri.h"
#include "gpio_common_regs_int_stat.h"
#include "gpio_common_regs_refclk_ctrl.h"
#include "gpio_common_regs_refclk_select.h"
#include "gpio_common_regs_shld_ctrl.h"
#include "gpio_common_regs_statein.h"
#include "gpio_common_regs_stateout.h"
#include "gpio_common_regs_stateout_mask.h"
#include "gpio_common_regs_validin.h"

namespace tofinoB0 {
  namespace register_classes {

class GpioCommonRegs : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum TofinoEnum {
    kEthgpiobr,
    kEthgpiotl
  };
public:
  GpioCommonRegs(
      int chipNumber, TofinoEnum selector_tofino, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_tofino), 380, false, write_callback, read_callback, std::string("GpioCommonRegs")+":"+boost::lexical_cast<std::string>(selector_tofino))
    {
    }
  GpioCommonRegs(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "GpioCommonRegs")
    {
    }
public:







  GpioCommonRegsStateout &stateout(int j0) { return stateout_[j0]; }







  GpioCommonRegsStatein &statein(int j0) { return statein_[j0]; }







  GpioCommonRegsValidin &validin(int j0) { return validin_[j0]; }





  GpioCommonRegsI2cBasetime &i2c_basetime() { return i2c_basetime_; }





  GpioCommonRegsIntStat &int_stat() { return int_stat_; }





  GpioCommonRegsIntEn &int_en() { return int_en_; }





  GpioCommonRegsIntPri &int_pri() { return int_pri_; }






  GpioCommonRegsIntInj &int_inj() { return int_inj_; }





  GpioCommonRegsShldCtrl &shld_ctrl() { return shld_ctrl_; }





  GpioCommonRegsGpioStatus &gpio_status() { return gpio_status_; }





  GpioCommonRegsRefclkCtrl &refclk_ctrl() { return refclk_ctrl_; }







  GpioCommonRegsRefclkSelect &refclk_select(int j0) { return refclk_select_[j0]; }





  GpioCommonRegsStateoutMask &stateout_mask() { return stateout_mask_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x100) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stateout_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x120) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      statein_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x120 && offset < 0x140) {
      offset -= 0x120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      validin_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      if (read_callback_) read_callback_();
      i2c_basetime_.read( offset, data );
    }
    else if (offset >= 0x144 && offset < 0x148) {
      offset -= 0x144;
      if (read_callback_) read_callback_();
      int_stat_.read( offset, data );
    }
    else if (offset >= 0x148 && offset < 0x14c) {
      offset -= 0x148;
      if (read_callback_) read_callback_();
      int_en_.read( offset, data );
    }
    else if (offset >= 0x14c && offset < 0x150) {
      offset -= 0x14c;
      if (read_callback_) read_callback_();
      int_pri_.read( offset, data );
    }
    else if (offset >= 0x150 && offset < 0x154) {
      offset -= 0x150;
      if (read_callback_) read_callback_();
      int_inj_.read( offset, data );
    }
    else if (offset >= 0x154 && offset < 0x158) {
      offset -= 0x154;
      if (read_callback_) read_callback_();
      shld_ctrl_.read( offset, data );
    }
    else if (offset >= 0x158 && offset < 0x15c) {
      offset -= 0x158;
      if (read_callback_) read_callback_();
      gpio_status_.read( offset, data );
    }
    else if (offset >= 0x15c && offset < 0x160) {
      offset -= 0x15c;
      if (read_callback_) read_callback_();
      refclk_ctrl_.read( offset, data );
    }
    else if (offset >= 0x160 && offset < 0x170) {
      offset -= 0x160;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      refclk_select_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x170 && offset < 0x174) {
      offset -= 0x170;
      if (read_callback_) read_callback_();
      stateout_mask_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x100) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stateout_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x120) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      statein_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x120 && offset < 0x140) {
      offset -= 0x120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      validin_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      i2c_basetime_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x144 && offset < 0x148) {
      offset -= 0x144;
      int_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x148 && offset < 0x14c) {
      offset -= 0x148;
      int_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14c && offset < 0x150) {
      offset -= 0x14c;
      int_pri_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x150 && offset < 0x154) {
      offset -= 0x150;
      int_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x154 && offset < 0x158) {
      offset -= 0x154;
      shld_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x158 && offset < 0x15c) {
      offset -= 0x158;
      gpio_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x15c && offset < 0x160) {
      offset -= 0x15c;
      refclk_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x160 && offset < 0x170) {
      offset -= 0x160;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      refclk_select_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x170 && offset < 0x174) {
      offset -= 0x170;
      stateout_mask_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : stateout_) {
      f0.reset();
    }
    for (auto &f0 : statein_) {
      f0.reset();
    }
    for (auto &f0 : validin_) {
      f0.reset();
    }
    i2c_basetime_.reset();
    int_stat_.reset();
    int_en_.reset();
    int_pri_.reset();
    int_inj_.reset();
    shld_ctrl_.reset();
    gpio_status_.reset();
    refclk_ctrl_.reset();
    for (auto &f0 : refclk_select_) {
      f0.reset();
    }
    stateout_mask_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x100) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stateout_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x120) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += statein_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x120 && offset < 0x140) {
      offset -= 0x120;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += validin_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      r += i2c_basetime_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x144 && offset < 0x148) {
      offset -= 0x144;
      r += int_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x148 && offset < 0x14c) {
      offset -= 0x148;
      r += int_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14c && offset < 0x150) {
      offset -= 0x14c;
      r += int_pri_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x150 && offset < 0x154) {
      offset -= 0x150;
      r += int_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x154 && offset < 0x158) {
      offset -= 0x154;
      r += shld_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x158 && offset < 0x15c) {
      offset -= 0x158;
      r += gpio_status_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x15c && offset < 0x160) {
      offset -= 0x15c;
      r += refclk_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x160 && offset < 0x170) {
      offset -= 0x160;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += refclk_select_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x170 && offset < 0x174) {
      offset -= 0x170;
      r += stateout_mask_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<64;++a0) {
      r += stateout_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += statein_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += validin_[a0].to_string(print_zeros,indent_string) ;
    }
    r += i2c_basetime_.to_string(print_zeros,indent_string) ;
    r += int_stat_.to_string(print_zeros,indent_string) ;
    r += int_en_.to_string(print_zeros,indent_string) ;
    r += int_pri_.to_string(print_zeros,indent_string) ;
    r += int_inj_.to_string(print_zeros,indent_string) ;
    r += shld_ctrl_.to_string(print_zeros,indent_string) ;
    r += gpio_status_.to_string(print_zeros,indent_string) ;
    r += refclk_ctrl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += refclk_select_[a0].to_string(print_zeros,indent_string) ;
    }
    r += stateout_mask_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< GpioCommonRegsStateout, 64 > stateout_;
  std::array< GpioCommonRegsStatein, 8 > statein_;
  std::array< GpioCommonRegsValidin, 8 > validin_;
  GpioCommonRegsI2cBasetime i2c_basetime_;
  GpioCommonRegsIntStat int_stat_;
  GpioCommonRegsIntEn int_en_;
  GpioCommonRegsIntPri int_pri_;
  GpioCommonRegsIntInj int_inj_;
  GpioCommonRegsShldCtrl shld_ctrl_;
  GpioCommonRegsGpioStatus gpio_status_;
  GpioCommonRegsRefclkCtrl refclk_ctrl_;
  std::array< GpioCommonRegsRefclkSelect, 4 > refclk_select_;
  GpioCommonRegsStateoutMask stateout_mask_;
private:
  static int StartOffset(
      TofinoEnum selector_tofino
      ) {
    int offset=0;
    switch (selector_tofino) {
      case kEthgpiobr:
        offset += 0x1820000; // to get to ethgpiobr
        offset += 0x200; // to get to gpio_common_regs
        break;
      case kEthgpiotl:
        offset += 0x1840000; // to get to ethgpiotl
        offset += 0x200; // to get to gpio_common_regs
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_GPIO_COMMON_REGS_H__
