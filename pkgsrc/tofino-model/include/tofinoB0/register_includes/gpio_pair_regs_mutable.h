/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_GPIO_PAIR_REGS_MUTABLE_H__
#define __REGISTER_INCLUDES_GPIO_PAIR_REGS_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "gpio_pair_regs_gpio_config_mutable.h"
#include "gpio_pair_regs_gpio_settings_mutable.h"
#include "gpio_pair_regs_i2c_addr_mutable.h"
#include "gpio_pair_regs_i2c_ctrl_mutable.h"
#include "gpio_pair_regs_i2c_rdata_mutable.h"
#include "gpio_pair_regs_i2c_scl_freq_mutable.h"
#include "gpio_pair_regs_i2c_statein_mutable.h"
#include "gpio_pair_regs_i2c_wdata_mutable.h"
#include "gpio_pair_regs_mdio_addrdata_mutable.h"
#include "gpio_pair_regs_mdio_clkdiv_mutable.h"
#include "gpio_pair_regs_mdio_ctrl_mutable.h"

namespace tofinoB0 {
  namespace register_classes {

class GpioPairRegsMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum TofinoEnum {
    kEthgpiobr,
    kEthgpiotl
  };
public:
  GpioPairRegsMutable(
      int chipNumber, TofinoEnum selector_tofino, int index_gpio_pair_regs, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_tofino, index_gpio_pair_regs), 44, true, write_callback, read_callback, std::string("GpioPairRegsMutable")+":"+boost::lexical_cast<std::string>(selector_tofino) + "," + boost::lexical_cast<std::string>(index_gpio_pair_regs))
    {
    }
  GpioPairRegsMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "GpioPairRegsMutable")
    {
    }
public:





  GpioPairRegsGpioConfigMutable &gpio_config() { return gpio_config_; }







  GpioPairRegsGpioSettingsMutable &gpio_settings() { return gpio_settings_; }





  GpioPairRegsI2cAddrMutable &i2c_addr() { return i2c_addr_; }





  GpioPairRegsI2cWdataMutable &i2c_wdata() { return i2c_wdata_; }





  GpioPairRegsI2cCtrlMutable &i2c_ctrl() { return i2c_ctrl_; }





  GpioPairRegsI2cStateinMutable &i2c_statein() { return i2c_statein_; }





  GpioPairRegsI2cSclFreqMutable &i2c_scl_freq() { return i2c_scl_freq_; }





  GpioPairRegsI2cRdataMutable &i2c_rdata() { return i2c_rdata_; }





  GpioPairRegsMdioCtrlMutable &mdio_ctrl() { return mdio_ctrl_; }





  GpioPairRegsMdioAddrdataMutable &mdio_addrdata() { return mdio_addrdata_; }






  GpioPairRegsMdioClkdivMutable &mdio_clkdiv() { return mdio_clkdiv_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      gpio_config_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      gpio_settings_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      i2c_addr_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      i2c_wdata_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      i2c_ctrl_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      i2c_statein_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      i2c_scl_freq_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      i2c_rdata_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      mdio_ctrl_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      mdio_addrdata_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      mdio_clkdiv_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      gpio_config_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      gpio_settings_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      i2c_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      i2c_wdata_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      i2c_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      i2c_statein_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      i2c_scl_freq_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      i2c_rdata_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      mdio_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      mdio_addrdata_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      mdio_clkdiv_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    gpio_config_.reset();
    gpio_settings_.reset();
    i2c_addr_.reset();
    i2c_wdata_.reset();
    i2c_ctrl_.reset();
    i2c_statein_.reset();
    i2c_scl_freq_.reset();
    i2c_rdata_.reset();
    mdio_ctrl_.reset();
    mdio_addrdata_.reset();
    mdio_clkdiv_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += gpio_config_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += gpio_settings_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += i2c_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += i2c_wdata_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += i2c_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += i2c_statein_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += i2c_scl_freq_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += i2c_rdata_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += mdio_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += mdio_addrdata_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += mdio_clkdiv_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += gpio_config_.to_string(print_zeros,indent_string) ;
    r += gpio_settings_.to_string(print_zeros,indent_string) ;
    r += i2c_addr_.to_string(print_zeros,indent_string) ;
    r += i2c_wdata_.to_string(print_zeros,indent_string) ;
    r += i2c_ctrl_.to_string(print_zeros,indent_string) ;
    r += i2c_statein_.to_string(print_zeros,indent_string) ;
    r += i2c_scl_freq_.to_string(print_zeros,indent_string) ;
    r += i2c_rdata_.to_string(print_zeros,indent_string) ;
    r += mdio_ctrl_.to_string(print_zeros,indent_string) ;
    r += mdio_addrdata_.to_string(print_zeros,indent_string) ;
    r += mdio_clkdiv_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  GpioPairRegsGpioConfigMutable gpio_config_;
  GpioPairRegsGpioSettingsMutable gpio_settings_;
  GpioPairRegsI2cAddrMutable i2c_addr_;
  GpioPairRegsI2cWdataMutable i2c_wdata_;
  GpioPairRegsI2cCtrlMutable i2c_ctrl_;
  GpioPairRegsI2cStateinMutable i2c_statein_;
  GpioPairRegsI2cSclFreqMutable i2c_scl_freq_;
  GpioPairRegsI2cRdataMutable i2c_rdata_;
  GpioPairRegsMdioCtrlMutable mdio_ctrl_;
  GpioPairRegsMdioAddrdataMutable mdio_addrdata_;
  GpioPairRegsMdioClkdivMutable mdio_clkdiv_;
private:
  static int StartOffset(
      TofinoEnum selector_tofino, int index_gpio_pair_regs
      ) {
    int offset=0;
    switch (selector_tofino) {
      case kEthgpiobr:
        offset += 0x1820000; // to get to ethgpiobr
        assert(index_gpio_pair_regs < 6);
        offset += index_gpio_pair_regs * 0x2c; // gpio_pair_regs[]
        break;
      case kEthgpiotl:
        offset += 0x1840000; // to get to ethgpiotl
        assert(index_gpio_pair_regs < 6);
        offset += index_gpio_pair_regs * 0x2c; // gpio_pair_regs[]
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_GPIO_PAIR_REGS_MUTABLE_H__
