/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_ING_BUF_REGS_H__
#define __REGISTER_INCLUDES_ING_BUF_REGS_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "glb_group.h"
#include "ing_buf_regs_chan0_group.h"
#include "ing_buf_regs_chan1_group.h"
#include "ing_buf_regs_chan2_group.h"
#include "ing_buf_regs_chan3_group.h"

namespace tofinoB0 {
  namespace register_classes {

class IngBufRegs : public model_core::RegisterBlock<RegisterCallback> {
public:
  IngBufRegs(
      int chipNumber, int index_pipe_addrmap, int index_ibp_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_ibp_rspec), 992, false, write_callback, read_callback, std::string("IngBufRegs")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_ibp_rspec))
    {
    }
  IngBufRegs(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "IngBufRegs")
    {
    }
public:





  GlbGroup &glb_group() { return glb_group_; }





  IngBufRegsChan0Group &chan0_group() { return chan0_group_; }





  IngBufRegsChan1Group &chan1_group() { return chan1_group_; }





  IngBufRegsChan2Group &chan2_group() { return chan2_group_; }





  IngBufRegsChan3Group &chan3_group() { return chan3_group_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x200) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      glb_group_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x260) {
      offset -= 0x200;
      if (read_callback_) read_callback_();
      chan0_group_.read( offset, data );
    }
    else if (offset >= 0x280 && offset < 0x2e0) {
      offset -= 0x280;
      if (read_callback_) read_callback_();
      chan1_group_.read( offset, data );
    }
    else if (offset >= 0x300 && offset < 0x360) {
      offset -= 0x300;
      if (read_callback_) read_callback_();
      chan2_group_.read( offset, data );
    }
    else if (offset >= 0x380 && offset < 0x3e0) {
      offset -= 0x380;
      if (read_callback_) read_callback_();
      chan3_group_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x200) {
      offset -= 0x0;
      glb_group_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x260) {
      offset -= 0x200;
      chan0_group_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x280 && offset < 0x2e0) {
      offset -= 0x280;
      chan1_group_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x300 && offset < 0x360) {
      offset -= 0x300;
      chan2_group_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x380 && offset < 0x3e0) {
      offset -= 0x380;
      chan3_group_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    glb_group_.reset();
    chan0_group_.reset();
    chan1_group_.reset();
    chan2_group_.reset();
    chan3_group_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x200) {
      offset -= 0x0;
      r += glb_group_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x260) {
      offset -= 0x200;
      r += chan0_group_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x280 && offset < 0x2e0) {
      offset -= 0x280;
      r += chan1_group_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x300 && offset < 0x360) {
      offset -= 0x300;
      r += chan2_group_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x380 && offset < 0x3e0) {
      offset -= 0x380;
      r += chan3_group_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += glb_group_.to_string(print_zeros,indent_string) ;
    r += chan0_group_.to_string(print_zeros,indent_string) ;
    r += chan1_group_.to_string(print_zeros,indent_string) ;
    r += chan2_group_.to_string(print_zeros,indent_string) ;
    r += chan3_group_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  GlbGroup glb_group_;
  IngBufRegsChan0Group chan0_group_;
  IngBufRegsChan1Group chan1_group_;
  IngBufRegsChan2Group chan2_group_;
  IngBufRegsChan3Group chan3_group_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_ibp_rspec
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    assert(index_ibp_rspec < 18);
    offset += index_ibp_rspec * 0x2000; // ibp_rspec[]
    offset += 0x1800; // to get to ing_buf_regs
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_ING_BUF_REGS_H__
