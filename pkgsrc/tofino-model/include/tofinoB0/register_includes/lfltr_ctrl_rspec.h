/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_LFLTR_CTRL_RSPEC_H__
#define __REGISTER_INCLUDES_LFLTR_CTRL_RSPEC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "lfltr_bft_ctrl.h"
#include "lfltr_bft_state.h"
#include "lfltr_common_ctrl.h"
#include "lfltr_creq_state.h"
#include "lfltr_ctr48_lq_dropped_learned.h"
#include "lfltr_ctr48_lq_dropped_state.h"
#include "lfltr_ctr48_lq_in.h"
#include "lfltr_ctr48_lq_learned.h"
#include "lfltr_ctrl_rspec_debug_bus_ctrl.h"
#include "lfltr_freeze_en.h"
#include "lfltr_hash_seed.h"
#include "lfltr_int_en0.h"
#include "lfltr_int_en1.h"
#include "lfltr_int_inj.h"
#include "lfltr_int_stat.h"
#include "lfltr_lqt_state.h"
#include "lfltr_lqt_timeout.h"
#include "lfltr_mbe_log.h"
#include "lfltr_pbe_log.h"
#include "lfltr_sbe_log.h"

namespace tofinoB0 {
  namespace register_classes {

class LfltrCtrlRspec : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum DvslAddrmapEnum {
    kLfltr0,
    kLfltr1,
    kLfltr2,
    kLfltr3
  };
public:
  LfltrCtrlRspec(
      int chipNumber, DvslAddrmapEnum selector_dvsl_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_dvsl_addrmap), 32768, false, write_callback, read_callback, std::string("LfltrCtrlRspec")+":"+boost::lexical_cast<std::string>(selector_dvsl_addrmap))
    {
    }
  LfltrCtrlRspec(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "LfltrCtrlRspec")
    {
    }
public:





  LfltrCommonCtrl &common_ctrl() { return common_ctrl_; }





  LfltrLqtTimeout &lqt_timeout() { return lqt_timeout_; }





  LfltrBftCtrl &bft_ctrl() { return bft_ctrl_; }







  LfltrHashSeed &hash_seed(int j0) { return hash_seed_[j0]; }





  LfltrIntStat &int_stat() { return int_stat_; }





  LfltrIntEn0 &int_en0() { return int_en0_; }





  LfltrIntEn1 &int_en1() { return int_en1_; }





  LfltrFreezeEn &freeze_en() { return freeze_en_; }





  LfltrIntInj &int_inj() { return int_inj_; }





  LfltrCtr48LqIn &lq_in() { return lq_in_; }





  LfltrCtr48LqDroppedState &lq_dropped_state() { return lq_dropped_state_; }





  LfltrCtr48LqDroppedLearned &lq_dropped_learned() { return lq_dropped_learned_; }





  LfltrCtr48LqLearned &lq_learned() { return lq_learned_; }





  LfltrPbeLog &pbe_log() { return pbe_log_; }





  LfltrSbeLog &sbe_log() { return sbe_log_; }





  LfltrMbeLog &mbe_log() { return mbe_log_; }





  LfltrBftState &bft_state() { return bft_state_; }





  LfltrLqtState &lqt_state() { return lqt_state_; }





  LfltrCreqState &creq_state() { return creq_state_; }





  LfltrCtrlRspecDebugBusCtrl &debug_bus_ctrl() { return debug_bus_ctrl_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      common_ctrl_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      lqt_timeout_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      bft_ctrl_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      hash_seed_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      int_stat_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      int_en0_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      int_en1_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      freeze_en_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      int_inj_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      lq_in_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      lq_dropped_state_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      lq_dropped_learned_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      lq_learned_.read( offset, data );
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      if (read_callback_) read_callback_();
      pbe_log_.read( offset, data );
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      if (read_callback_) read_callback_();
      sbe_log_.read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      if (read_callback_) read_callback_();
      mbe_log_.read( offset, data );
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      if (read_callback_) read_callback_();
      bft_state_.read( offset, data );
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      if (read_callback_) read_callback_();
      lqt_state_.read( offset, data );
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      if (read_callback_) read_callback_();
      creq_state_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      debug_bus_ctrl_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      common_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      lqt_timeout_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      bft_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      hash_seed_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      int_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      int_en0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      int_en1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      freeze_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      int_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      lq_in_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      lq_dropped_state_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      lq_dropped_learned_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      lq_learned_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      pbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      sbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      mbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      bft_state_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      lqt_state_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      creq_state_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      debug_bus_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    common_ctrl_.reset();
    lqt_timeout_.reset();
    bft_ctrl_.reset();
    for (auto &f0 : hash_seed_) {
      f0.reset();
    }
    int_stat_.reset();
    int_en0_.reset();
    int_en1_.reset();
    freeze_en_.reset();
    int_inj_.reset();
    lq_in_.reset();
    lq_dropped_state_.reset();
    lq_dropped_learned_.reset();
    lq_learned_.reset();
    pbe_log_.reset();
    sbe_log_.reset();
    mbe_log_.reset();
    bft_state_.reset();
    lqt_state_.reset();
    creq_state_.reset();
    debug_bus_ctrl_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += common_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += lqt_timeout_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += bft_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += hash_seed_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += int_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += int_en0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += int_en1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += freeze_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      r += int_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      r += lq_in_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      r += lq_dropped_state_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      r += lq_dropped_learned_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      r += lq_learned_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      r += pbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      r += sbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      r += mbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      r += bft_state_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      r += lqt_state_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      r += creq_state_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      r += debug_bus_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += common_ctrl_.to_string(print_zeros,indent_string) ;
    r += lqt_timeout_.to_string(print_zeros,indent_string) ;
    r += bft_ctrl_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += hash_seed_[a0].to_string(print_zeros,indent_string) ;
    }
    r += int_stat_.to_string(print_zeros,indent_string) ;
    r += int_en0_.to_string(print_zeros,indent_string) ;
    r += int_en1_.to_string(print_zeros,indent_string) ;
    r += freeze_en_.to_string(print_zeros,indent_string) ;
    r += int_inj_.to_string(print_zeros,indent_string) ;
    r += lq_in_.to_string(print_zeros,indent_string) ;
    r += lq_dropped_state_.to_string(print_zeros,indent_string) ;
    r += lq_dropped_learned_.to_string(print_zeros,indent_string) ;
    r += lq_learned_.to_string(print_zeros,indent_string) ;
    r += pbe_log_.to_string(print_zeros,indent_string) ;
    r += sbe_log_.to_string(print_zeros,indent_string) ;
    r += mbe_log_.to_string(print_zeros,indent_string) ;
    r += bft_state_.to_string(print_zeros,indent_string) ;
    r += lqt_state_.to_string(print_zeros,indent_string) ;
    r += creq_state_.to_string(print_zeros,indent_string) ;
    r += debug_bus_ctrl_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  LfltrCommonCtrl common_ctrl_;
  LfltrLqtTimeout lqt_timeout_;
  LfltrBftCtrl bft_ctrl_;
  std::array< LfltrHashSeed, 4 > hash_seed_;
  LfltrIntStat int_stat_;
  LfltrIntEn0 int_en0_;
  LfltrIntEn1 int_en1_;
  LfltrFreezeEn freeze_en_;
  LfltrIntInj int_inj_;
  LfltrCtr48LqIn lq_in_;
  LfltrCtr48LqDroppedState lq_dropped_state_;
  LfltrCtr48LqDroppedLearned lq_dropped_learned_;
  LfltrCtr48LqLearned lq_learned_;
  LfltrPbeLog pbe_log_;
  LfltrSbeLog sbe_log_;
  LfltrMbeLog mbe_log_;
  LfltrBftState bft_state_;
  LfltrLqtState lqt_state_;
  LfltrCreqState creq_state_;
  LfltrCtrlRspecDebugBusCtrl debug_bus_ctrl_;
private:
  static int StartOffset(
      DvslAddrmapEnum selector_dvsl_addrmap
      ) {
    int offset=0;
    switch (selector_dvsl_addrmap) {
      case kLfltr0:
        offset += 0x200000; // to get to lfltr0
        offset += 0x20000; // to get to ctrl
        break;
      case kLfltr1:
        offset += 0x240000; // to get to lfltr1
        offset += 0x20000; // to get to ctrl
        break;
      case kLfltr2:
        offset += 0x280000; // to get to lfltr2
        offset += 0x20000; // to get to ctrl
        break;
      case kLfltr3:
        offset += 0x2c0000; // to get to lfltr3
        offset += 0x20000; // to get to ctrl
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_LFLTR_CTRL_RSPEC_H__
