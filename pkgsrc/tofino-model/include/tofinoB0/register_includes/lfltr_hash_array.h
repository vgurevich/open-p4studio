/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_LFLTR_HASH_ARRAY_H__
#define __REGISTER_INCLUDES_LFLTR_HASH_ARRAY_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class LfltrHashArray : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum DvslAddrmapEnum {
    kLfltr0,
    kLfltr1,
    kLfltr2,
    kLfltr3
  };
public:
  LfltrHashArray(
      int chipNumber, DvslAddrmapEnum selector_dvsl_addrmap, int index_lfltr_hash_rspec, int index_lfltr_hash_array, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(selector_dvsl_addrmap, index_lfltr_hash_rspec, index_lfltr_hash_array), 48, false, write_callback, read_callback, std::string("LfltrHashArray")+":"+boost::lexical_cast<std::string>(selector_dvsl_addrmap) + "," + boost::lexical_cast<std::string>(index_lfltr_hash_rspec) + "," + boost::lexical_cast<std::string>(index_lfltr_hash_array))
    {
    }
  LfltrHashArray(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "LfltrHashArray")
    {
    }
public:







  uint8_t &sel(int j0) { return sel_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (sel_[0] & 0x1);
      *data |= ((sel_[1] & 0x1) << 1);
      *data |= ((sel_[2] & 0x1) << 2);
      *data |= ((sel_[3] & 0x1) << 3);
      *data |= ((sel_[4] & 0x1) << 4);
      *data |= ((sel_[5] & 0x1) << 5);
      *data |= ((sel_[6] & 0x1) << 6);
      *data |= ((sel_[7] & 0x1) << 7);
      *data |= ((sel_[8] & 0x1) << 8);
      *data |= ((sel_[9] & 0x1) << 9);
      *data |= ((sel_[10] & 0x1) << 10);
      *data |= ((sel_[11] & 0x1) << 11);
      *data |= ((sel_[12] & 0x1) << 12);
      *data |= ((sel_[13] & 0x1) << 13);
      *data |= ((sel_[14] & 0x1) << 14);
      *data |= ((sel_[15] & 0x1) << 15);
      *data |= ((sel_[16] & 0x1) << 16);
      *data |= ((sel_[17] & 0x1) << 17);
      *data |= ((sel_[18] & 0x1) << 18);
      *data |= ((sel_[19] & 0x1) << 19);
      *data |= ((sel_[20] & 0x1) << 20);
      *data |= ((sel_[21] & 0x1) << 21);
      *data |= ((sel_[22] & 0x1) << 22);
      *data |= ((sel_[23] & 0x1) << 23);
      *data |= ((sel_[24] & 0x1) << 24);
      *data |= ((sel_[25] & 0x1) << 25);
      *data |= ((sel_[26] & 0x1) << 26);
      *data |= ((sel_[27] & 0x1) << 27);
      *data |= ((sel_[28] & 0x1) << 28);
      *data |= ((sel_[29] & 0x1) << 29);
      *data |= ((sel_[30] & 0x1) << 30);
      *data |= ((sel_[31] & 0x1) << 31);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (sel_[32] & 0x1);
      *data |= ((sel_[33] & 0x1) << 1);
      *data |= ((sel_[34] & 0x1) << 2);
      *data |= ((sel_[35] & 0x1) << 3);
      *data |= ((sel_[36] & 0x1) << 4);
      *data |= ((sel_[37] & 0x1) << 5);
      *data |= ((sel_[38] & 0x1) << 6);
      *data |= ((sel_[39] & 0x1) << 7);
      *data |= ((sel_[40] & 0x1) << 8);
      *data |= ((sel_[41] & 0x1) << 9);
      *data |= ((sel_[42] & 0x1) << 10);
      *data |= ((sel_[43] & 0x1) << 11);
      *data |= ((sel_[44] & 0x1) << 12);
      *data |= ((sel_[45] & 0x1) << 13);
      *data |= ((sel_[46] & 0x1) << 14);
      *data |= ((sel_[47] & 0x1) << 15);
      *data |= ((sel_[48] & 0x1) << 16);
      *data |= ((sel_[49] & 0x1) << 17);
      *data |= ((sel_[50] & 0x1) << 18);
      *data |= ((sel_[51] & 0x1) << 19);
      *data |= ((sel_[52] & 0x1) << 20);
      *data |= ((sel_[53] & 0x1) << 21);
      *data |= ((sel_[54] & 0x1) << 22);
      *data |= ((sel_[55] & 0x1) << 23);
      *data |= ((sel_[56] & 0x1) << 24);
      *data |= ((sel_[57] & 0x1) << 25);
      *data |= ((sel_[58] & 0x1) << 26);
      *data |= ((sel_[59] & 0x1) << 27);
      *data |= ((sel_[60] & 0x1) << 28);
      *data |= ((sel_[61] & 0x1) << 29);
      *data |= ((sel_[62] & 0x1) << 30);
      *data |= ((sel_[63] & 0x1) << 31);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = (sel_[64] & 0x1);
      *data |= ((sel_[65] & 0x1) << 1);
      *data |= ((sel_[66] & 0x1) << 2);
      *data |= ((sel_[67] & 0x1) << 3);
      *data |= ((sel_[68] & 0x1) << 4);
      *data |= ((sel_[69] & 0x1) << 5);
      *data |= ((sel_[70] & 0x1) << 6);
      *data |= ((sel_[71] & 0x1) << 7);
      *data |= ((sel_[72] & 0x1) << 8);
      *data |= ((sel_[73] & 0x1) << 9);
      *data |= ((sel_[74] & 0x1) << 10);
      *data |= ((sel_[75] & 0x1) << 11);
      *data |= ((sel_[76] & 0x1) << 12);
      *data |= ((sel_[77] & 0x1) << 13);
      *data |= ((sel_[78] & 0x1) << 14);
      *data |= ((sel_[79] & 0x1) << 15);
      *data |= ((sel_[80] & 0x1) << 16);
      *data |= ((sel_[81] & 0x1) << 17);
      *data |= ((sel_[82] & 0x1) << 18);
      *data |= ((sel_[83] & 0x1) << 19);
      *data |= ((sel_[84] & 0x1) << 20);
      *data |= ((sel_[85] & 0x1) << 21);
      *data |= ((sel_[86] & 0x1) << 22);
      *data |= ((sel_[87] & 0x1) << 23);
      *data |= ((sel_[88] & 0x1) << 24);
      *data |= ((sel_[89] & 0x1) << 25);
      *data |= ((sel_[90] & 0x1) << 26);
      *data |= ((sel_[91] & 0x1) << 27);
      *data |= ((sel_[92] & 0x1) << 28);
      *data |= ((sel_[93] & 0x1) << 29);
      *data |= ((sel_[94] & 0x1) << 30);
      *data |= ((sel_[95] & 0x1) << 31);
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = (sel_[96] & 0x1);
      *data |= ((sel_[97] & 0x1) << 1);
      *data |= ((sel_[98] & 0x1) << 2);
      *data |= ((sel_[99] & 0x1) << 3);
      *data |= ((sel_[100] & 0x1) << 4);
      *data |= ((sel_[101] & 0x1) << 5);
      *data |= ((sel_[102] & 0x1) << 6);
      *data |= ((sel_[103] & 0x1) << 7);
      *data |= ((sel_[104] & 0x1) << 8);
      *data |= ((sel_[105] & 0x1) << 9);
      *data |= ((sel_[106] & 0x1) << 10);
      *data |= ((sel_[107] & 0x1) << 11);
      *data |= ((sel_[108] & 0x1) << 12);
      *data |= ((sel_[109] & 0x1) << 13);
      *data |= ((sel_[110] & 0x1) << 14);
      *data |= ((sel_[111] & 0x1) << 15);
      *data |= ((sel_[112] & 0x1) << 16);
      *data |= ((sel_[113] & 0x1) << 17);
      *data |= ((sel_[114] & 0x1) << 18);
      *data |= ((sel_[115] & 0x1) << 19);
      *data |= ((sel_[116] & 0x1) << 20);
      *data |= ((sel_[117] & 0x1) << 21);
      *data |= ((sel_[118] & 0x1) << 22);
      *data |= ((sel_[119] & 0x1) << 23);
      *data |= ((sel_[120] & 0x1) << 24);
      *data |= ((sel_[121] & 0x1) << 25);
      *data |= ((sel_[122] & 0x1) << 26);
      *data |= ((sel_[123] & 0x1) << 27);
      *data |= ((sel_[124] & 0x1) << 28);
      *data |= ((sel_[125] & 0x1) << 29);
      *data |= ((sel_[126] & 0x1) << 30);
      *data |= ((sel_[127] & 0x1) << 31);
    }
    else if (offset >= 0x10 && offset < 0x14) {
      if (read_callback_) read_callback_();
      *data = (sel_[128] & 0x1);
      *data |= ((sel_[129] & 0x1) << 1);
      *data |= ((sel_[130] & 0x1) << 2);
      *data |= ((sel_[131] & 0x1) << 3);
      *data |= ((sel_[132] & 0x1) << 4);
      *data |= ((sel_[133] & 0x1) << 5);
      *data |= ((sel_[134] & 0x1) << 6);
      *data |= ((sel_[135] & 0x1) << 7);
      *data |= ((sel_[136] & 0x1) << 8);
      *data |= ((sel_[137] & 0x1) << 9);
      *data |= ((sel_[138] & 0x1) << 10);
      *data |= ((sel_[139] & 0x1) << 11);
      *data |= ((sel_[140] & 0x1) << 12);
      *data |= ((sel_[141] & 0x1) << 13);
      *data |= ((sel_[142] & 0x1) << 14);
      *data |= ((sel_[143] & 0x1) << 15);
      *data |= ((sel_[144] & 0x1) << 16);
      *data |= ((sel_[145] & 0x1) << 17);
      *data |= ((sel_[146] & 0x1) << 18);
      *data |= ((sel_[147] & 0x1) << 19);
      *data |= ((sel_[148] & 0x1) << 20);
      *data |= ((sel_[149] & 0x1) << 21);
      *data |= ((sel_[150] & 0x1) << 22);
      *data |= ((sel_[151] & 0x1) << 23);
      *data |= ((sel_[152] & 0x1) << 24);
      *data |= ((sel_[153] & 0x1) << 25);
      *data |= ((sel_[154] & 0x1) << 26);
      *data |= ((sel_[155] & 0x1) << 27);
      *data |= ((sel_[156] & 0x1) << 28);
      *data |= ((sel_[157] & 0x1) << 29);
      *data |= ((sel_[158] & 0x1) << 30);
      *data |= ((sel_[159] & 0x1) << 31);
    }
    else if (offset >= 0x14 && offset < 0x18) {
      if (read_callback_) read_callback_();
      *data = (sel_[160] & 0x1);
      *data |= ((sel_[161] & 0x1) << 1);
      *data |= ((sel_[162] & 0x1) << 2);
      *data |= ((sel_[163] & 0x1) << 3);
      *data |= ((sel_[164] & 0x1) << 4);
      *data |= ((sel_[165] & 0x1) << 5);
      *data |= ((sel_[166] & 0x1) << 6);
      *data |= ((sel_[167] & 0x1) << 7);
      *data |= ((sel_[168] & 0x1) << 8);
      *data |= ((sel_[169] & 0x1) << 9);
      *data |= ((sel_[170] & 0x1) << 10);
      *data |= ((sel_[171] & 0x1) << 11);
      *data |= ((sel_[172] & 0x1) << 12);
      *data |= ((sel_[173] & 0x1) << 13);
      *data |= ((sel_[174] & 0x1) << 14);
      *data |= ((sel_[175] & 0x1) << 15);
      *data |= ((sel_[176] & 0x1) << 16);
      *data |= ((sel_[177] & 0x1) << 17);
      *data |= ((sel_[178] & 0x1) << 18);
      *data |= ((sel_[179] & 0x1) << 19);
      *data |= ((sel_[180] & 0x1) << 20);
      *data |= ((sel_[181] & 0x1) << 21);
      *data |= ((sel_[182] & 0x1) << 22);
      *data |= ((sel_[183] & 0x1) << 23);
      *data |= ((sel_[184] & 0x1) << 24);
      *data |= ((sel_[185] & 0x1) << 25);
      *data |= ((sel_[186] & 0x1) << 26);
      *data |= ((sel_[187] & 0x1) << 27);
      *data |= ((sel_[188] & 0x1) << 28);
      *data |= ((sel_[189] & 0x1) << 29);
      *data |= ((sel_[190] & 0x1) << 30);
      *data |= ((sel_[191] & 0x1) << 31);
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      if (read_callback_) read_callback_();
      *data = (sel_[192] & 0x1);
      *data |= ((sel_[193] & 0x1) << 1);
      *data |= ((sel_[194] & 0x1) << 2);
      *data |= ((sel_[195] & 0x1) << 3);
      *data |= ((sel_[196] & 0x1) << 4);
      *data |= ((sel_[197] & 0x1) << 5);
      *data |= ((sel_[198] & 0x1) << 6);
      *data |= ((sel_[199] & 0x1) << 7);
      *data |= ((sel_[200] & 0x1) << 8);
      *data |= ((sel_[201] & 0x1) << 9);
      *data |= ((sel_[202] & 0x1) << 10);
      *data |= ((sel_[203] & 0x1) << 11);
      *data |= ((sel_[204] & 0x1) << 12);
      *data |= ((sel_[205] & 0x1) << 13);
      *data |= ((sel_[206] & 0x1) << 14);
      *data |= ((sel_[207] & 0x1) << 15);
      *data |= ((sel_[208] & 0x1) << 16);
      *data |= ((sel_[209] & 0x1) << 17);
      *data |= ((sel_[210] & 0x1) << 18);
      *data |= ((sel_[211] & 0x1) << 19);
      *data |= ((sel_[212] & 0x1) << 20);
      *data |= ((sel_[213] & 0x1) << 21);
      *data |= ((sel_[214] & 0x1) << 22);
      *data |= ((sel_[215] & 0x1) << 23);
      *data |= ((sel_[216] & 0x1) << 24);
      *data |= ((sel_[217] & 0x1) << 25);
      *data |= ((sel_[218] & 0x1) << 26);
      *data |= ((sel_[219] & 0x1) << 27);
      *data |= ((sel_[220] & 0x1) << 28);
      *data |= ((sel_[221] & 0x1) << 29);
      *data |= ((sel_[222] & 0x1) << 30);
      *data |= ((sel_[223] & 0x1) << 31);
    }
    else if (offset >= 0x1c && offset < 0x20) {
      if (read_callback_) read_callback_();
      *data = (sel_[224] & 0x1);
      *data |= ((sel_[225] & 0x1) << 1);
      *data |= ((sel_[226] & 0x1) << 2);
      *data |= ((sel_[227] & 0x1) << 3);
      *data |= ((sel_[228] & 0x1) << 4);
      *data |= ((sel_[229] & 0x1) << 5);
      *data |= ((sel_[230] & 0x1) << 6);
      *data |= ((sel_[231] & 0x1) << 7);
      *data |= ((sel_[232] & 0x1) << 8);
      *data |= ((sel_[233] & 0x1) << 9);
      *data |= ((sel_[234] & 0x1) << 10);
      *data |= ((sel_[235] & 0x1) << 11);
      *data |= ((sel_[236] & 0x1) << 12);
      *data |= ((sel_[237] & 0x1) << 13);
      *data |= ((sel_[238] & 0x1) << 14);
      *data |= ((sel_[239] & 0x1) << 15);
      *data |= ((sel_[240] & 0x1) << 16);
      *data |= ((sel_[241] & 0x1) << 17);
      *data |= ((sel_[242] & 0x1) << 18);
      *data |= ((sel_[243] & 0x1) << 19);
      *data |= ((sel_[244] & 0x1) << 20);
      *data |= ((sel_[245] & 0x1) << 21);
      *data |= ((sel_[246] & 0x1) << 22);
      *data |= ((sel_[247] & 0x1) << 23);
      *data |= ((sel_[248] & 0x1) << 24);
      *data |= ((sel_[249] & 0x1) << 25);
      *data |= ((sel_[250] & 0x1) << 26);
      *data |= ((sel_[251] & 0x1) << 27);
      *data |= ((sel_[252] & 0x1) << 28);
      *data |= ((sel_[253] & 0x1) << 29);
      *data |= ((sel_[254] & 0x1) << 30);
      *data |= ((sel_[255] & 0x1) << 31);
    }
    else if (offset >= 0x20 && offset < 0x24) {
      if (read_callback_) read_callback_();
      *data = (sel_[256] & 0x1);
      *data |= ((sel_[257] & 0x1) << 1);
      *data |= ((sel_[258] & 0x1) << 2);
      *data |= ((sel_[259] & 0x1) << 3);
      *data |= ((sel_[260] & 0x1) << 4);
      *data |= ((sel_[261] & 0x1) << 5);
      *data |= ((sel_[262] & 0x1) << 6);
      *data |= ((sel_[263] & 0x1) << 7);
      *data |= ((sel_[264] & 0x1) << 8);
      *data |= ((sel_[265] & 0x1) << 9);
      *data |= ((sel_[266] & 0x1) << 10);
      *data |= ((sel_[267] & 0x1) << 11);
      *data |= ((sel_[268] & 0x1) << 12);
      *data |= ((sel_[269] & 0x1) << 13);
      *data |= ((sel_[270] & 0x1) << 14);
      *data |= ((sel_[271] & 0x1) << 15);
      *data |= ((sel_[272] & 0x1) << 16);
      *data |= ((sel_[273] & 0x1) << 17);
      *data |= ((sel_[274] & 0x1) << 18);
      *data |= ((sel_[275] & 0x1) << 19);
      *data |= ((sel_[276] & 0x1) << 20);
      *data |= ((sel_[277] & 0x1) << 21);
      *data |= ((sel_[278] & 0x1) << 22);
      *data |= ((sel_[279] & 0x1) << 23);
      *data |= ((sel_[280] & 0x1) << 24);
      *data |= ((sel_[281] & 0x1) << 25);
      *data |= ((sel_[282] & 0x1) << 26);
      *data |= ((sel_[283] & 0x1) << 27);
      *data |= ((sel_[284] & 0x1) << 28);
      *data |= ((sel_[285] & 0x1) << 29);
      *data |= ((sel_[286] & 0x1) << 30);
      *data |= ((sel_[287] & 0x1) << 31);
    }
    else if (offset >= 0x24 && offset < 0x28) {
      if (read_callback_) read_callback_();
      *data = (sel_[288] & 0x1);
      *data |= ((sel_[289] & 0x1) << 1);
      *data |= ((sel_[290] & 0x1) << 2);
      *data |= ((sel_[291] & 0x1) << 3);
      *data |= ((sel_[292] & 0x1) << 4);
      *data |= ((sel_[293] & 0x1) << 5);
      *data |= ((sel_[294] & 0x1) << 6);
      *data |= ((sel_[295] & 0x1) << 7);
      *data |= ((sel_[296] & 0x1) << 8);
      *data |= ((sel_[297] & 0x1) << 9);
      *data |= ((sel_[298] & 0x1) << 10);
      *data |= ((sel_[299] & 0x1) << 11);
      *data |= ((sel_[300] & 0x1) << 12);
      *data |= ((sel_[301] & 0x1) << 13);
      *data |= ((sel_[302] & 0x1) << 14);
      *data |= ((sel_[303] & 0x1) << 15);
      *data |= ((sel_[304] & 0x1) << 16);
      *data |= ((sel_[305] & 0x1) << 17);
      *data |= ((sel_[306] & 0x1) << 18);
      *data |= ((sel_[307] & 0x1) << 19);
      *data |= ((sel_[308] & 0x1) << 20);
      *data |= ((sel_[309] & 0x1) << 21);
      *data |= ((sel_[310] & 0x1) << 22);
      *data |= ((sel_[311] & 0x1) << 23);
      *data |= ((sel_[312] & 0x1) << 24);
      *data |= ((sel_[313] & 0x1) << 25);
      *data |= ((sel_[314] & 0x1) << 26);
      *data |= ((sel_[315] & 0x1) << 27);
      *data |= ((sel_[316] & 0x1) << 28);
      *data |= ((sel_[317] & 0x1) << 29);
      *data |= ((sel_[318] & 0x1) << 30);
      *data |= ((sel_[319] & 0x1) << 31);
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      if (read_callback_) read_callback_();
      *data = (sel_[320] & 0x1);
      *data |= ((sel_[321] & 0x1) << 1);
      *data |= ((sel_[322] & 0x1) << 2);
      *data |= ((sel_[323] & 0x1) << 3);
      *data |= ((sel_[324] & 0x1) << 4);
      *data |= ((sel_[325] & 0x1) << 5);
      *data |= ((sel_[326] & 0x1) << 6);
      *data |= ((sel_[327] & 0x1) << 7);
      *data |= ((sel_[328] & 0x1) << 8);
      *data |= ((sel_[329] & 0x1) << 9);
      *data |= ((sel_[330] & 0x1) << 10);
      *data |= ((sel_[331] & 0x1) << 11);
      *data |= ((sel_[332] & 0x1) << 12);
      *data |= ((sel_[333] & 0x1) << 13);
      *data |= ((sel_[334] & 0x1) << 14);
      *data |= ((sel_[335] & 0x1) << 15);
      *data |= ((sel_[336] & 0x1) << 16);
      *data |= ((sel_[337] & 0x1) << 17);
      *data |= ((sel_[338] & 0x1) << 18);
      *data |= ((sel_[339] & 0x1) << 19);
      *data |= ((sel_[340] & 0x1) << 20);
      *data |= ((sel_[341] & 0x1) << 21);
      *data |= ((sel_[342] & 0x1) << 22);
      *data |= ((sel_[343] & 0x1) << 23);
      *data |= ((sel_[344] & 0x1) << 24);
      *data |= ((sel_[345] & 0x1) << 25);
      *data |= ((sel_[346] & 0x1) << 26);
      *data |= ((sel_[347] & 0x1) << 27);
      *data |= ((sel_[348] & 0x1) << 28);
      *data |= ((sel_[349] & 0x1) << 29);
      *data |= ((sel_[350] & 0x1) << 30);
      *data |= ((sel_[351] & 0x1) << 31);
    }
    else if (offset >= 0x2c && offset < 0x30) {
      if (read_callback_) read_callback_();
      *data = (sel_[352] & 0x1);
      *data |= ((sel_[353] & 0x1) << 1);
      *data |= ((sel_[354] & 0x1) << 2);
      *data |= ((sel_[355] & 0x1) << 3);
      *data |= ((sel_[356] & 0x1) << 4);
      *data |= ((sel_[357] & 0x1) << 5);
      *data |= ((sel_[358] & 0x1) << 6);
      *data |= ((sel_[359] & 0x1) << 7);
      *data |= ((sel_[360] & 0x1) << 8);
      *data |= ((sel_[361] & 0x1) << 9);
      *data |= ((sel_[362] & 0x1) << 10);
      *data |= ((sel_[363] & 0x1) << 11);
      *data |= ((sel_[364] & 0x1) << 12);
      *data |= ((sel_[365] & 0x1) << 13);
      *data |= ((sel_[366] & 0x1) << 14);
      *data |= ((sel_[367] & 0x1) << 15);
      *data |= ((sel_[368] & 0x1) << 16);
      *data |= ((sel_[369] & 0x1) << 17);
      *data |= ((sel_[370] & 0x1) << 18);
      *data |= ((sel_[371] & 0x1) << 19);
      *data |= ((sel_[372] & 0x1) << 20);
      *data |= ((sel_[373] & 0x1) << 21);
      *data |= ((sel_[374] & 0x1) << 22);
      *data |= ((sel_[375] & 0x1) << 23);
      *data |= ((sel_[376] & 0x1) << 24);
      *data |= ((sel_[377] & 0x1) << 25);
      *data |= ((sel_[378] & 0x1) << 26);
      *data |= ((sel_[379] & 0x1) << 27);
      *data |= ((sel_[380] & 0x1) << 28);
      *data |= ((sel_[381] & 0x1) << 29);
      *data |= ((sel_[382] & 0x1) << 30);
      *data |= ((sel_[383] & 0x1) << 31);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      sel_[0] = (data & 0x1);
      sel_[1] = ((data >> 1) & 0x1);
      sel_[2] = ((data >> 2) & 0x1);
      sel_[3] = ((data >> 3) & 0x1);
      sel_[4] = ((data >> 4) & 0x1);
      sel_[5] = ((data >> 5) & 0x1);
      sel_[6] = ((data >> 6) & 0x1);
      sel_[7] = ((data >> 7) & 0x1);
      sel_[8] = ((data >> 8) & 0x1);
      sel_[9] = ((data >> 9) & 0x1);
      sel_[10] = ((data >> 10) & 0x1);
      sel_[11] = ((data >> 11) & 0x1);
      sel_[12] = ((data >> 12) & 0x1);
      sel_[13] = ((data >> 13) & 0x1);
      sel_[14] = ((data >> 14) & 0x1);
      sel_[15] = ((data >> 15) & 0x1);
      sel_[16] = ((data >> 16) & 0x1);
      sel_[17] = ((data >> 17) & 0x1);
      sel_[18] = ((data >> 18) & 0x1);
      sel_[19] = ((data >> 19) & 0x1);
      sel_[20] = ((data >> 20) & 0x1);
      sel_[21] = ((data >> 21) & 0x1);
      sel_[22] = ((data >> 22) & 0x1);
      sel_[23] = ((data >> 23) & 0x1);
      sel_[24] = ((data >> 24) & 0x1);
      sel_[25] = ((data >> 25) & 0x1);
      sel_[26] = ((data >> 26) & 0x1);
      sel_[27] = ((data >> 27) & 0x1);
      sel_[28] = ((data >> 28) & 0x1);
      sel_[29] = ((data >> 29) & 0x1);
      sel_[30] = ((data >> 30) & 0x1);
      sel_[31] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      sel_[32] = (data & 0x1);
      sel_[33] = ((data >> 1) & 0x1);
      sel_[34] = ((data >> 2) & 0x1);
      sel_[35] = ((data >> 3) & 0x1);
      sel_[36] = ((data >> 4) & 0x1);
      sel_[37] = ((data >> 5) & 0x1);
      sel_[38] = ((data >> 6) & 0x1);
      sel_[39] = ((data >> 7) & 0x1);
      sel_[40] = ((data >> 8) & 0x1);
      sel_[41] = ((data >> 9) & 0x1);
      sel_[42] = ((data >> 10) & 0x1);
      sel_[43] = ((data >> 11) & 0x1);
      sel_[44] = ((data >> 12) & 0x1);
      sel_[45] = ((data >> 13) & 0x1);
      sel_[46] = ((data >> 14) & 0x1);
      sel_[47] = ((data >> 15) & 0x1);
      sel_[48] = ((data >> 16) & 0x1);
      sel_[49] = ((data >> 17) & 0x1);
      sel_[50] = ((data >> 18) & 0x1);
      sel_[51] = ((data >> 19) & 0x1);
      sel_[52] = ((data >> 20) & 0x1);
      sel_[53] = ((data >> 21) & 0x1);
      sel_[54] = ((data >> 22) & 0x1);
      sel_[55] = ((data >> 23) & 0x1);
      sel_[56] = ((data >> 24) & 0x1);
      sel_[57] = ((data >> 25) & 0x1);
      sel_[58] = ((data >> 26) & 0x1);
      sel_[59] = ((data >> 27) & 0x1);
      sel_[60] = ((data >> 28) & 0x1);
      sel_[61] = ((data >> 29) & 0x1);
      sel_[62] = ((data >> 30) & 0x1);
      sel_[63] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      sel_[64] = (data & 0x1);
      sel_[65] = ((data >> 1) & 0x1);
      sel_[66] = ((data >> 2) & 0x1);
      sel_[67] = ((data >> 3) & 0x1);
      sel_[68] = ((data >> 4) & 0x1);
      sel_[69] = ((data >> 5) & 0x1);
      sel_[70] = ((data >> 6) & 0x1);
      sel_[71] = ((data >> 7) & 0x1);
      sel_[72] = ((data >> 8) & 0x1);
      sel_[73] = ((data >> 9) & 0x1);
      sel_[74] = ((data >> 10) & 0x1);
      sel_[75] = ((data >> 11) & 0x1);
      sel_[76] = ((data >> 12) & 0x1);
      sel_[77] = ((data >> 13) & 0x1);
      sel_[78] = ((data >> 14) & 0x1);
      sel_[79] = ((data >> 15) & 0x1);
      sel_[80] = ((data >> 16) & 0x1);
      sel_[81] = ((data >> 17) & 0x1);
      sel_[82] = ((data >> 18) & 0x1);
      sel_[83] = ((data >> 19) & 0x1);
      sel_[84] = ((data >> 20) & 0x1);
      sel_[85] = ((data >> 21) & 0x1);
      sel_[86] = ((data >> 22) & 0x1);
      sel_[87] = ((data >> 23) & 0x1);
      sel_[88] = ((data >> 24) & 0x1);
      sel_[89] = ((data >> 25) & 0x1);
      sel_[90] = ((data >> 26) & 0x1);
      sel_[91] = ((data >> 27) & 0x1);
      sel_[92] = ((data >> 28) & 0x1);
      sel_[93] = ((data >> 29) & 0x1);
      sel_[94] = ((data >> 30) & 0x1);
      sel_[95] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      sel_[96] = (data & 0x1);
      sel_[97] = ((data >> 1) & 0x1);
      sel_[98] = ((data >> 2) & 0x1);
      sel_[99] = ((data >> 3) & 0x1);
      sel_[100] = ((data >> 4) & 0x1);
      sel_[101] = ((data >> 5) & 0x1);
      sel_[102] = ((data >> 6) & 0x1);
      sel_[103] = ((data >> 7) & 0x1);
      sel_[104] = ((data >> 8) & 0x1);
      sel_[105] = ((data >> 9) & 0x1);
      sel_[106] = ((data >> 10) & 0x1);
      sel_[107] = ((data >> 11) & 0x1);
      sel_[108] = ((data >> 12) & 0x1);
      sel_[109] = ((data >> 13) & 0x1);
      sel_[110] = ((data >> 14) & 0x1);
      sel_[111] = ((data >> 15) & 0x1);
      sel_[112] = ((data >> 16) & 0x1);
      sel_[113] = ((data >> 17) & 0x1);
      sel_[114] = ((data >> 18) & 0x1);
      sel_[115] = ((data >> 19) & 0x1);
      sel_[116] = ((data >> 20) & 0x1);
      sel_[117] = ((data >> 21) & 0x1);
      sel_[118] = ((data >> 22) & 0x1);
      sel_[119] = ((data >> 23) & 0x1);
      sel_[120] = ((data >> 24) & 0x1);
      sel_[121] = ((data >> 25) & 0x1);
      sel_[122] = ((data >> 26) & 0x1);
      sel_[123] = ((data >> 27) & 0x1);
      sel_[124] = ((data >> 28) & 0x1);
      sel_[125] = ((data >> 29) & 0x1);
      sel_[126] = ((data >> 30) & 0x1);
      sel_[127] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      sel_[128] = (data & 0x1);
      sel_[129] = ((data >> 1) & 0x1);
      sel_[130] = ((data >> 2) & 0x1);
      sel_[131] = ((data >> 3) & 0x1);
      sel_[132] = ((data >> 4) & 0x1);
      sel_[133] = ((data >> 5) & 0x1);
      sel_[134] = ((data >> 6) & 0x1);
      sel_[135] = ((data >> 7) & 0x1);
      sel_[136] = ((data >> 8) & 0x1);
      sel_[137] = ((data >> 9) & 0x1);
      sel_[138] = ((data >> 10) & 0x1);
      sel_[139] = ((data >> 11) & 0x1);
      sel_[140] = ((data >> 12) & 0x1);
      sel_[141] = ((data >> 13) & 0x1);
      sel_[142] = ((data >> 14) & 0x1);
      sel_[143] = ((data >> 15) & 0x1);
      sel_[144] = ((data >> 16) & 0x1);
      sel_[145] = ((data >> 17) & 0x1);
      sel_[146] = ((data >> 18) & 0x1);
      sel_[147] = ((data >> 19) & 0x1);
      sel_[148] = ((data >> 20) & 0x1);
      sel_[149] = ((data >> 21) & 0x1);
      sel_[150] = ((data >> 22) & 0x1);
      sel_[151] = ((data >> 23) & 0x1);
      sel_[152] = ((data >> 24) & 0x1);
      sel_[153] = ((data >> 25) & 0x1);
      sel_[154] = ((data >> 26) & 0x1);
      sel_[155] = ((data >> 27) & 0x1);
      sel_[156] = ((data >> 28) & 0x1);
      sel_[157] = ((data >> 29) & 0x1);
      sel_[158] = ((data >> 30) & 0x1);
      sel_[159] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      sel_[160] = (data & 0x1);
      sel_[161] = ((data >> 1) & 0x1);
      sel_[162] = ((data >> 2) & 0x1);
      sel_[163] = ((data >> 3) & 0x1);
      sel_[164] = ((data >> 4) & 0x1);
      sel_[165] = ((data >> 5) & 0x1);
      sel_[166] = ((data >> 6) & 0x1);
      sel_[167] = ((data >> 7) & 0x1);
      sel_[168] = ((data >> 8) & 0x1);
      sel_[169] = ((data >> 9) & 0x1);
      sel_[170] = ((data >> 10) & 0x1);
      sel_[171] = ((data >> 11) & 0x1);
      sel_[172] = ((data >> 12) & 0x1);
      sel_[173] = ((data >> 13) & 0x1);
      sel_[174] = ((data >> 14) & 0x1);
      sel_[175] = ((data >> 15) & 0x1);
      sel_[176] = ((data >> 16) & 0x1);
      sel_[177] = ((data >> 17) & 0x1);
      sel_[178] = ((data >> 18) & 0x1);
      sel_[179] = ((data >> 19) & 0x1);
      sel_[180] = ((data >> 20) & 0x1);
      sel_[181] = ((data >> 21) & 0x1);
      sel_[182] = ((data >> 22) & 0x1);
      sel_[183] = ((data >> 23) & 0x1);
      sel_[184] = ((data >> 24) & 0x1);
      sel_[185] = ((data >> 25) & 0x1);
      sel_[186] = ((data >> 26) & 0x1);
      sel_[187] = ((data >> 27) & 0x1);
      sel_[188] = ((data >> 28) & 0x1);
      sel_[189] = ((data >> 29) & 0x1);
      sel_[190] = ((data >> 30) & 0x1);
      sel_[191] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      sel_[192] = (data & 0x1);
      sel_[193] = ((data >> 1) & 0x1);
      sel_[194] = ((data >> 2) & 0x1);
      sel_[195] = ((data >> 3) & 0x1);
      sel_[196] = ((data >> 4) & 0x1);
      sel_[197] = ((data >> 5) & 0x1);
      sel_[198] = ((data >> 6) & 0x1);
      sel_[199] = ((data >> 7) & 0x1);
      sel_[200] = ((data >> 8) & 0x1);
      sel_[201] = ((data >> 9) & 0x1);
      sel_[202] = ((data >> 10) & 0x1);
      sel_[203] = ((data >> 11) & 0x1);
      sel_[204] = ((data >> 12) & 0x1);
      sel_[205] = ((data >> 13) & 0x1);
      sel_[206] = ((data >> 14) & 0x1);
      sel_[207] = ((data >> 15) & 0x1);
      sel_[208] = ((data >> 16) & 0x1);
      sel_[209] = ((data >> 17) & 0x1);
      sel_[210] = ((data >> 18) & 0x1);
      sel_[211] = ((data >> 19) & 0x1);
      sel_[212] = ((data >> 20) & 0x1);
      sel_[213] = ((data >> 21) & 0x1);
      sel_[214] = ((data >> 22) & 0x1);
      sel_[215] = ((data >> 23) & 0x1);
      sel_[216] = ((data >> 24) & 0x1);
      sel_[217] = ((data >> 25) & 0x1);
      sel_[218] = ((data >> 26) & 0x1);
      sel_[219] = ((data >> 27) & 0x1);
      sel_[220] = ((data >> 28) & 0x1);
      sel_[221] = ((data >> 29) & 0x1);
      sel_[222] = ((data >> 30) & 0x1);
      sel_[223] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      sel_[224] = (data & 0x1);
      sel_[225] = ((data >> 1) & 0x1);
      sel_[226] = ((data >> 2) & 0x1);
      sel_[227] = ((data >> 3) & 0x1);
      sel_[228] = ((data >> 4) & 0x1);
      sel_[229] = ((data >> 5) & 0x1);
      sel_[230] = ((data >> 6) & 0x1);
      sel_[231] = ((data >> 7) & 0x1);
      sel_[232] = ((data >> 8) & 0x1);
      sel_[233] = ((data >> 9) & 0x1);
      sel_[234] = ((data >> 10) & 0x1);
      sel_[235] = ((data >> 11) & 0x1);
      sel_[236] = ((data >> 12) & 0x1);
      sel_[237] = ((data >> 13) & 0x1);
      sel_[238] = ((data >> 14) & 0x1);
      sel_[239] = ((data >> 15) & 0x1);
      sel_[240] = ((data >> 16) & 0x1);
      sel_[241] = ((data >> 17) & 0x1);
      sel_[242] = ((data >> 18) & 0x1);
      sel_[243] = ((data >> 19) & 0x1);
      sel_[244] = ((data >> 20) & 0x1);
      sel_[245] = ((data >> 21) & 0x1);
      sel_[246] = ((data >> 22) & 0x1);
      sel_[247] = ((data >> 23) & 0x1);
      sel_[248] = ((data >> 24) & 0x1);
      sel_[249] = ((data >> 25) & 0x1);
      sel_[250] = ((data >> 26) & 0x1);
      sel_[251] = ((data >> 27) & 0x1);
      sel_[252] = ((data >> 28) & 0x1);
      sel_[253] = ((data >> 29) & 0x1);
      sel_[254] = ((data >> 30) & 0x1);
      sel_[255] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      sel_[256] = (data & 0x1);
      sel_[257] = ((data >> 1) & 0x1);
      sel_[258] = ((data >> 2) & 0x1);
      sel_[259] = ((data >> 3) & 0x1);
      sel_[260] = ((data >> 4) & 0x1);
      sel_[261] = ((data >> 5) & 0x1);
      sel_[262] = ((data >> 6) & 0x1);
      sel_[263] = ((data >> 7) & 0x1);
      sel_[264] = ((data >> 8) & 0x1);
      sel_[265] = ((data >> 9) & 0x1);
      sel_[266] = ((data >> 10) & 0x1);
      sel_[267] = ((data >> 11) & 0x1);
      sel_[268] = ((data >> 12) & 0x1);
      sel_[269] = ((data >> 13) & 0x1);
      sel_[270] = ((data >> 14) & 0x1);
      sel_[271] = ((data >> 15) & 0x1);
      sel_[272] = ((data >> 16) & 0x1);
      sel_[273] = ((data >> 17) & 0x1);
      sel_[274] = ((data >> 18) & 0x1);
      sel_[275] = ((data >> 19) & 0x1);
      sel_[276] = ((data >> 20) & 0x1);
      sel_[277] = ((data >> 21) & 0x1);
      sel_[278] = ((data >> 22) & 0x1);
      sel_[279] = ((data >> 23) & 0x1);
      sel_[280] = ((data >> 24) & 0x1);
      sel_[281] = ((data >> 25) & 0x1);
      sel_[282] = ((data >> 26) & 0x1);
      sel_[283] = ((data >> 27) & 0x1);
      sel_[284] = ((data >> 28) & 0x1);
      sel_[285] = ((data >> 29) & 0x1);
      sel_[286] = ((data >> 30) & 0x1);
      sel_[287] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      sel_[288] = (data & 0x1);
      sel_[289] = ((data >> 1) & 0x1);
      sel_[290] = ((data >> 2) & 0x1);
      sel_[291] = ((data >> 3) & 0x1);
      sel_[292] = ((data >> 4) & 0x1);
      sel_[293] = ((data >> 5) & 0x1);
      sel_[294] = ((data >> 6) & 0x1);
      sel_[295] = ((data >> 7) & 0x1);
      sel_[296] = ((data >> 8) & 0x1);
      sel_[297] = ((data >> 9) & 0x1);
      sel_[298] = ((data >> 10) & 0x1);
      sel_[299] = ((data >> 11) & 0x1);
      sel_[300] = ((data >> 12) & 0x1);
      sel_[301] = ((data >> 13) & 0x1);
      sel_[302] = ((data >> 14) & 0x1);
      sel_[303] = ((data >> 15) & 0x1);
      sel_[304] = ((data >> 16) & 0x1);
      sel_[305] = ((data >> 17) & 0x1);
      sel_[306] = ((data >> 18) & 0x1);
      sel_[307] = ((data >> 19) & 0x1);
      sel_[308] = ((data >> 20) & 0x1);
      sel_[309] = ((data >> 21) & 0x1);
      sel_[310] = ((data >> 22) & 0x1);
      sel_[311] = ((data >> 23) & 0x1);
      sel_[312] = ((data >> 24) & 0x1);
      sel_[313] = ((data >> 25) & 0x1);
      sel_[314] = ((data >> 26) & 0x1);
      sel_[315] = ((data >> 27) & 0x1);
      sel_[316] = ((data >> 28) & 0x1);
      sel_[317] = ((data >> 29) & 0x1);
      sel_[318] = ((data >> 30) & 0x1);
      sel_[319] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      sel_[320] = (data & 0x1);
      sel_[321] = ((data >> 1) & 0x1);
      sel_[322] = ((data >> 2) & 0x1);
      sel_[323] = ((data >> 3) & 0x1);
      sel_[324] = ((data >> 4) & 0x1);
      sel_[325] = ((data >> 5) & 0x1);
      sel_[326] = ((data >> 6) & 0x1);
      sel_[327] = ((data >> 7) & 0x1);
      sel_[328] = ((data >> 8) & 0x1);
      sel_[329] = ((data >> 9) & 0x1);
      sel_[330] = ((data >> 10) & 0x1);
      sel_[331] = ((data >> 11) & 0x1);
      sel_[332] = ((data >> 12) & 0x1);
      sel_[333] = ((data >> 13) & 0x1);
      sel_[334] = ((data >> 14) & 0x1);
      sel_[335] = ((data >> 15) & 0x1);
      sel_[336] = ((data >> 16) & 0x1);
      sel_[337] = ((data >> 17) & 0x1);
      sel_[338] = ((data >> 18) & 0x1);
      sel_[339] = ((data >> 19) & 0x1);
      sel_[340] = ((data >> 20) & 0x1);
      sel_[341] = ((data >> 21) & 0x1);
      sel_[342] = ((data >> 22) & 0x1);
      sel_[343] = ((data >> 23) & 0x1);
      sel_[344] = ((data >> 24) & 0x1);
      sel_[345] = ((data >> 25) & 0x1);
      sel_[346] = ((data >> 26) & 0x1);
      sel_[347] = ((data >> 27) & 0x1);
      sel_[348] = ((data >> 28) & 0x1);
      sel_[349] = ((data >> 29) & 0x1);
      sel_[350] = ((data >> 30) & 0x1);
      sel_[351] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      sel_[352] = (data & 0x1);
      sel_[353] = ((data >> 1) & 0x1);
      sel_[354] = ((data >> 2) & 0x1);
      sel_[355] = ((data >> 3) & 0x1);
      sel_[356] = ((data >> 4) & 0x1);
      sel_[357] = ((data >> 5) & 0x1);
      sel_[358] = ((data >> 6) & 0x1);
      sel_[359] = ((data >> 7) & 0x1);
      sel_[360] = ((data >> 8) & 0x1);
      sel_[361] = ((data >> 9) & 0x1);
      sel_[362] = ((data >> 10) & 0x1);
      sel_[363] = ((data >> 11) & 0x1);
      sel_[364] = ((data >> 12) & 0x1);
      sel_[365] = ((data >> 13) & 0x1);
      sel_[366] = ((data >> 14) & 0x1);
      sel_[367] = ((data >> 15) & 0x1);
      sel_[368] = ((data >> 16) & 0x1);
      sel_[369] = ((data >> 17) & 0x1);
      sel_[370] = ((data >> 18) & 0x1);
      sel_[371] = ((data >> 19) & 0x1);
      sel_[372] = ((data >> 20) & 0x1);
      sel_[373] = ((data >> 21) & 0x1);
      sel_[374] = ((data >> 22) & 0x1);
      sel_[375] = ((data >> 23) & 0x1);
      sel_[376] = ((data >> 24) & 0x1);
      sel_[377] = ((data >> 25) & 0x1);
      sel_[378] = ((data >> 26) & 0x1);
      sel_[379] = ((data >> 27) & 0x1);
      sel_[380] = ((data >> 28) & 0x1);
      sel_[381] = ((data >> 29) & 0x1);
      sel_[382] = ((data >> 30) & 0x1);
      sel_[383] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    sel_[0] = 0x0;
    sel_[1] = 0x0;
    sel_[2] = 0x0;
    sel_[3] = 0x0;
    sel_[4] = 0x0;
    sel_[5] = 0x0;
    sel_[6] = 0x0;
    sel_[7] = 0x0;
    sel_[8] = 0x0;
    sel_[9] = 0x0;
    sel_[10] = 0x0;
    sel_[11] = 0x0;
    sel_[12] = 0x0;
    sel_[13] = 0x0;
    sel_[14] = 0x0;
    sel_[15] = 0x0;
    sel_[16] = 0x0;
    sel_[17] = 0x0;
    sel_[18] = 0x0;
    sel_[19] = 0x0;
    sel_[20] = 0x0;
    sel_[21] = 0x0;
    sel_[22] = 0x0;
    sel_[23] = 0x0;
    sel_[24] = 0x0;
    sel_[25] = 0x0;
    sel_[26] = 0x0;
    sel_[27] = 0x0;
    sel_[28] = 0x0;
    sel_[29] = 0x0;
    sel_[30] = 0x0;
    sel_[31] = 0x0;
    sel_[32] = 0x0;
    sel_[33] = 0x0;
    sel_[34] = 0x0;
    sel_[35] = 0x0;
    sel_[36] = 0x0;
    sel_[37] = 0x0;
    sel_[38] = 0x0;
    sel_[39] = 0x0;
    sel_[40] = 0x0;
    sel_[41] = 0x0;
    sel_[42] = 0x0;
    sel_[43] = 0x0;
    sel_[44] = 0x0;
    sel_[45] = 0x0;
    sel_[46] = 0x0;
    sel_[47] = 0x0;
    sel_[48] = 0x0;
    sel_[49] = 0x0;
    sel_[50] = 0x0;
    sel_[51] = 0x0;
    sel_[52] = 0x0;
    sel_[53] = 0x0;
    sel_[54] = 0x0;
    sel_[55] = 0x0;
    sel_[56] = 0x0;
    sel_[57] = 0x0;
    sel_[58] = 0x0;
    sel_[59] = 0x0;
    sel_[60] = 0x0;
    sel_[61] = 0x0;
    sel_[62] = 0x0;
    sel_[63] = 0x0;
    sel_[64] = 0x0;
    sel_[65] = 0x0;
    sel_[66] = 0x0;
    sel_[67] = 0x0;
    sel_[68] = 0x0;
    sel_[69] = 0x0;
    sel_[70] = 0x0;
    sel_[71] = 0x0;
    sel_[72] = 0x0;
    sel_[73] = 0x0;
    sel_[74] = 0x0;
    sel_[75] = 0x0;
    sel_[76] = 0x0;
    sel_[77] = 0x0;
    sel_[78] = 0x0;
    sel_[79] = 0x0;
    sel_[80] = 0x0;
    sel_[81] = 0x0;
    sel_[82] = 0x0;
    sel_[83] = 0x0;
    sel_[84] = 0x0;
    sel_[85] = 0x0;
    sel_[86] = 0x0;
    sel_[87] = 0x0;
    sel_[88] = 0x0;
    sel_[89] = 0x0;
    sel_[90] = 0x0;
    sel_[91] = 0x0;
    sel_[92] = 0x0;
    sel_[93] = 0x0;
    sel_[94] = 0x0;
    sel_[95] = 0x0;
    sel_[96] = 0x0;
    sel_[97] = 0x0;
    sel_[98] = 0x0;
    sel_[99] = 0x0;
    sel_[100] = 0x0;
    sel_[101] = 0x0;
    sel_[102] = 0x0;
    sel_[103] = 0x0;
    sel_[104] = 0x0;
    sel_[105] = 0x0;
    sel_[106] = 0x0;
    sel_[107] = 0x0;
    sel_[108] = 0x0;
    sel_[109] = 0x0;
    sel_[110] = 0x0;
    sel_[111] = 0x0;
    sel_[112] = 0x0;
    sel_[113] = 0x0;
    sel_[114] = 0x0;
    sel_[115] = 0x0;
    sel_[116] = 0x0;
    sel_[117] = 0x0;
    sel_[118] = 0x0;
    sel_[119] = 0x0;
    sel_[120] = 0x0;
    sel_[121] = 0x0;
    sel_[122] = 0x0;
    sel_[123] = 0x0;
    sel_[124] = 0x0;
    sel_[125] = 0x0;
    sel_[126] = 0x0;
    sel_[127] = 0x0;
    sel_[128] = 0x0;
    sel_[129] = 0x0;
    sel_[130] = 0x0;
    sel_[131] = 0x0;
    sel_[132] = 0x0;
    sel_[133] = 0x0;
    sel_[134] = 0x0;
    sel_[135] = 0x0;
    sel_[136] = 0x0;
    sel_[137] = 0x0;
    sel_[138] = 0x0;
    sel_[139] = 0x0;
    sel_[140] = 0x0;
    sel_[141] = 0x0;
    sel_[142] = 0x0;
    sel_[143] = 0x0;
    sel_[144] = 0x0;
    sel_[145] = 0x0;
    sel_[146] = 0x0;
    sel_[147] = 0x0;
    sel_[148] = 0x0;
    sel_[149] = 0x0;
    sel_[150] = 0x0;
    sel_[151] = 0x0;
    sel_[152] = 0x0;
    sel_[153] = 0x0;
    sel_[154] = 0x0;
    sel_[155] = 0x0;
    sel_[156] = 0x0;
    sel_[157] = 0x0;
    sel_[158] = 0x0;
    sel_[159] = 0x0;
    sel_[160] = 0x0;
    sel_[161] = 0x0;
    sel_[162] = 0x0;
    sel_[163] = 0x0;
    sel_[164] = 0x0;
    sel_[165] = 0x0;
    sel_[166] = 0x0;
    sel_[167] = 0x0;
    sel_[168] = 0x0;
    sel_[169] = 0x0;
    sel_[170] = 0x0;
    sel_[171] = 0x0;
    sel_[172] = 0x0;
    sel_[173] = 0x0;
    sel_[174] = 0x0;
    sel_[175] = 0x0;
    sel_[176] = 0x0;
    sel_[177] = 0x0;
    sel_[178] = 0x0;
    sel_[179] = 0x0;
    sel_[180] = 0x0;
    sel_[181] = 0x0;
    sel_[182] = 0x0;
    sel_[183] = 0x0;
    sel_[184] = 0x0;
    sel_[185] = 0x0;
    sel_[186] = 0x0;
    sel_[187] = 0x0;
    sel_[188] = 0x0;
    sel_[189] = 0x0;
    sel_[190] = 0x0;
    sel_[191] = 0x0;
    sel_[192] = 0x0;
    sel_[193] = 0x0;
    sel_[194] = 0x0;
    sel_[195] = 0x0;
    sel_[196] = 0x0;
    sel_[197] = 0x0;
    sel_[198] = 0x0;
    sel_[199] = 0x0;
    sel_[200] = 0x0;
    sel_[201] = 0x0;
    sel_[202] = 0x0;
    sel_[203] = 0x0;
    sel_[204] = 0x0;
    sel_[205] = 0x0;
    sel_[206] = 0x0;
    sel_[207] = 0x0;
    sel_[208] = 0x0;
    sel_[209] = 0x0;
    sel_[210] = 0x0;
    sel_[211] = 0x0;
    sel_[212] = 0x0;
    sel_[213] = 0x0;
    sel_[214] = 0x0;
    sel_[215] = 0x0;
    sel_[216] = 0x0;
    sel_[217] = 0x0;
    sel_[218] = 0x0;
    sel_[219] = 0x0;
    sel_[220] = 0x0;
    sel_[221] = 0x0;
    sel_[222] = 0x0;
    sel_[223] = 0x0;
    sel_[224] = 0x0;
    sel_[225] = 0x0;
    sel_[226] = 0x0;
    sel_[227] = 0x0;
    sel_[228] = 0x0;
    sel_[229] = 0x0;
    sel_[230] = 0x0;
    sel_[231] = 0x0;
    sel_[232] = 0x0;
    sel_[233] = 0x0;
    sel_[234] = 0x0;
    sel_[235] = 0x0;
    sel_[236] = 0x0;
    sel_[237] = 0x0;
    sel_[238] = 0x0;
    sel_[239] = 0x0;
    sel_[240] = 0x0;
    sel_[241] = 0x0;
    sel_[242] = 0x0;
    sel_[243] = 0x0;
    sel_[244] = 0x0;
    sel_[245] = 0x0;
    sel_[246] = 0x0;
    sel_[247] = 0x0;
    sel_[248] = 0x0;
    sel_[249] = 0x0;
    sel_[250] = 0x0;
    sel_[251] = 0x0;
    sel_[252] = 0x0;
    sel_[253] = 0x0;
    sel_[254] = 0x0;
    sel_[255] = 0x0;
    sel_[256] = 0x0;
    sel_[257] = 0x0;
    sel_[258] = 0x0;
    sel_[259] = 0x0;
    sel_[260] = 0x0;
    sel_[261] = 0x0;
    sel_[262] = 0x0;
    sel_[263] = 0x0;
    sel_[264] = 0x0;
    sel_[265] = 0x0;
    sel_[266] = 0x0;
    sel_[267] = 0x0;
    sel_[268] = 0x0;
    sel_[269] = 0x0;
    sel_[270] = 0x0;
    sel_[271] = 0x0;
    sel_[272] = 0x0;
    sel_[273] = 0x0;
    sel_[274] = 0x0;
    sel_[275] = 0x0;
    sel_[276] = 0x0;
    sel_[277] = 0x0;
    sel_[278] = 0x0;
    sel_[279] = 0x0;
    sel_[280] = 0x0;
    sel_[281] = 0x0;
    sel_[282] = 0x0;
    sel_[283] = 0x0;
    sel_[284] = 0x0;
    sel_[285] = 0x0;
    sel_[286] = 0x0;
    sel_[287] = 0x0;
    sel_[288] = 0x0;
    sel_[289] = 0x0;
    sel_[290] = 0x0;
    sel_[291] = 0x0;
    sel_[292] = 0x0;
    sel_[293] = 0x0;
    sel_[294] = 0x0;
    sel_[295] = 0x0;
    sel_[296] = 0x0;
    sel_[297] = 0x0;
    sel_[298] = 0x0;
    sel_[299] = 0x0;
    sel_[300] = 0x0;
    sel_[301] = 0x0;
    sel_[302] = 0x0;
    sel_[303] = 0x0;
    sel_[304] = 0x0;
    sel_[305] = 0x0;
    sel_[306] = 0x0;
    sel_[307] = 0x0;
    sel_[308] = 0x0;
    sel_[309] = 0x0;
    sel_[310] = 0x0;
    sel_[311] = 0x0;
    sel_[312] = 0x0;
    sel_[313] = 0x0;
    sel_[314] = 0x0;
    sel_[315] = 0x0;
    sel_[316] = 0x0;
    sel_[317] = 0x0;
    sel_[318] = 0x0;
    sel_[319] = 0x0;
    sel_[320] = 0x0;
    sel_[321] = 0x0;
    sel_[322] = 0x0;
    sel_[323] = 0x0;
    sel_[324] = 0x0;
    sel_[325] = 0x0;
    sel_[326] = 0x0;
    sel_[327] = 0x0;
    sel_[328] = 0x0;
    sel_[329] = 0x0;
    sel_[330] = 0x0;
    sel_[331] = 0x0;
    sel_[332] = 0x0;
    sel_[333] = 0x0;
    sel_[334] = 0x0;
    sel_[335] = 0x0;
    sel_[336] = 0x0;
    sel_[337] = 0x0;
    sel_[338] = 0x0;
    sel_[339] = 0x0;
    sel_[340] = 0x0;
    sel_[341] = 0x0;
    sel_[342] = 0x0;
    sel_[343] = 0x0;
    sel_[344] = 0x0;
    sel_[345] = 0x0;
    sel_[346] = 0x0;
    sel_[347] = 0x0;
    sel_[348] = 0x0;
    sel_[349] = 0x0;
    sel_[350] = 0x0;
    sel_[351] = 0x0;
    sel_[352] = 0x0;
    sel_[353] = 0x0;
    sel_[354] = 0x0;
    sel_[355] = 0x0;
    sel_[356] = 0x0;
    sel_[357] = 0x0;
    sel_[358] = 0x0;
    sel_[359] = 0x0;
    sel_[360] = 0x0;
    sel_[361] = 0x0;
    sel_[362] = 0x0;
    sel_[363] = 0x0;
    sel_[364] = 0x0;
    sel_[365] = 0x0;
    sel_[366] = 0x0;
    sel_[367] = 0x0;
    sel_[368] = 0x0;
    sel_[369] = 0x0;
    sel_[370] = 0x0;
    sel_[371] = 0x0;
    sel_[372] = 0x0;
    sel_[373] = 0x0;
    sel_[374] = 0x0;
    sel_[375] = 0x0;
    sel_[376] = 0x0;
    sel_[377] = 0x0;
    sel_[378] = 0x0;
    sel_[379] = 0x0;
    sel_[380] = 0x0;
    sel_[381] = 0x0;
    sel_[382] = 0x0;
    sel_[383] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("LfltrHashArray") + ":\n";
    for (uint32_t f=0;f<384;++f) {
      r += indent_string + "  " + std::string("sel") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(sel_[f]) ) + "\n";
      all_zeros &= (0 == sel_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("LfltrHashArray") + ":\n";
    for (uint32_t f=0;f<384;++f) {
      r += indent_string + "  " + std::string("sel") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(sel_[f]) ) + "\n";
      all_zeros &= (0 == sel_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 384 > sel_;
private:
  static int StartOffset(
      DvslAddrmapEnum selector_dvsl_addrmap, int index_lfltr_hash_rspec, int index_lfltr_hash_array
      ) {
    int offset=0;
    switch (selector_dvsl_addrmap) {
      case kLfltr0:
        offset += 0x200000; // to get to lfltr0
        assert(index_lfltr_hash_rspec < 4);
        offset += index_lfltr_hash_rspec * 0x8000; // lfltr_hash_rspec[]
        assert(index_lfltr_hash_array < 14);
        offset += index_lfltr_hash_array * 0x30; // lfltr_hash_array[]
        break;
      case kLfltr1:
        offset += 0x240000; // to get to lfltr1
        assert(index_lfltr_hash_rspec < 4);
        offset += index_lfltr_hash_rspec * 0x8000; // lfltr_hash_rspec[]
        assert(index_lfltr_hash_array < 14);
        offset += index_lfltr_hash_array * 0x30; // lfltr_hash_array[]
        break;
      case kLfltr2:
        offset += 0x280000; // to get to lfltr2
        assert(index_lfltr_hash_rspec < 4);
        offset += index_lfltr_hash_rspec * 0x8000; // lfltr_hash_rspec[]
        assert(index_lfltr_hash_array < 14);
        offset += index_lfltr_hash_array * 0x30; // lfltr_hash_array[]
        break;
      case kLfltr3:
        offset += 0x2c0000; // to get to lfltr3
        assert(index_lfltr_hash_rspec < 4);
        offset += index_lfltr_hash_rspec * 0x8000; // lfltr_hash_rspec[]
        assert(index_lfltr_hash_array < 14);
        offset += index_lfltr_hash_array * 0x30; // lfltr_hash_array[]
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_LFLTR_HASH_ARRAY_H__
