/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_ACTION_OUTPUT_HV_XBAR_ADDRMAP_MUTABLE_H__
#define __REGISTER_INCLUDES_MAU_ACTION_OUTPUT_HV_XBAR_ADDRMAP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "action_hv_ixbar_ctl_byte_mutable.h"
#include "action_hv_ixbar_ctl_halfword_mutable.h"
#include "action_hv_ixbar_ctl_word_mutable.h"
#include "action_hv_ixbar_input_bytemask_mutable.h"
#include "action_hv_xbar_disable_ram_adr_mutable.h"
#include "mau_diag_row_adb_clk_enable_mutable.h"

namespace tofinoB0 {
  namespace register_classes {

class MauActionOutputHvXbarAddrmapMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauActionOutputHvXbarAddrmapMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_unit_ram_row_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_unit_ram_row_addrmap), 128, true, write_callback, read_callback, std::string("MauActionOutputHvXbarAddrmapMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_unit_ram_row_addrmap))
    {
    }
  MauActionOutputHvXbarAddrmapMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MauActionOutputHvXbarAddrmapMutable")
    {
    }
public:












  MauDiagRowAdbClkEnableMutable &mau_diag_row_adb_clk_enable() { return mau_diag_row_adb_clk_enable_; }













  ActionHvXbarDisableRamAdrMutable &action_hv_xbar_disable_ram_adr() { return action_hv_xbar_disable_ram_adr_; }









  ActionHvIxbarCtlByteMutable &action_hv_ixbar_ctl_byte(int j0) { return action_hv_ixbar_ctl_byte_[j0]; }











  ActionHvIxbarInputBytemaskMutable &action_hv_ixbar_input_bytemask(int j0) { return action_hv_ixbar_input_bytemask_[j0]; }











  ActionHvIxbarCtlHalfwordMutable &action_hv_ixbar_ctl_halfword(int j1,int j0) { return action_hv_ixbar_ctl_halfword_[j1][j0]; }











  ActionHvIxbarCtlWordMutable &action_hv_ixbar_ctl_word(int j1,int j0) { return action_hv_ixbar_ctl_word_[j1][j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      mau_diag_row_adb_clk_enable_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      action_hv_xbar_disable_ram_adr_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      action_hv_ixbar_ctl_byte_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x20) {
      offset -= 0x18;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      action_hv_ixbar_input_bytemask_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x58) {
      offset -= 0x40;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      action_hv_ixbar_ctl_halfword_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x80) {
      offset -= 0x60;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      action_hv_ixbar_ctl_word_[ i1 ][ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      mau_diag_row_adb_clk_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      action_hv_xbar_disable_ram_adr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      action_hv_ixbar_ctl_byte_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x20) {
      offset -= 0x18;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      action_hv_ixbar_input_bytemask_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x58) {
      offset -= 0x40;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      action_hv_ixbar_ctl_halfword_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x80) {
      offset -= 0x60;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      action_hv_ixbar_ctl_word_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    mau_diag_row_adb_clk_enable_.reset();
    action_hv_xbar_disable_ram_adr_.reset();
    for (auto &f0 : action_hv_ixbar_ctl_byte_) {
      f0.reset();
    }
    for (auto &f0 : action_hv_ixbar_input_bytemask_) {
      f0.reset();
    }
    for (auto &f0 : action_hv_ixbar_ctl_halfword_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : action_hv_ixbar_ctl_word_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += mau_diag_row_adb_clk_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += action_hv_xbar_disable_ram_adr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += action_hv_ixbar_ctl_byte_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x20) {
      offset -= 0x18;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += action_hv_ixbar_input_bytemask_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x58) {
      offset -= 0x40;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += action_hv_ixbar_ctl_halfword_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x80) {
      offset -= 0x60;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += action_hv_ixbar_ctl_word_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += mau_diag_row_adb_clk_enable_.to_string(print_zeros,indent_string) ;
    r += action_hv_xbar_disable_ram_adr_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<2;++a0) {
      r += action_hv_ixbar_ctl_byte_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += action_hv_ixbar_input_bytemask_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a1=0;a1<3;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += action_hv_ixbar_ctl_halfword_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<4;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += action_hv_ixbar_ctl_word_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  MauDiagRowAdbClkEnableMutable mau_diag_row_adb_clk_enable_;
  ActionHvXbarDisableRamAdrMutable action_hv_xbar_disable_ram_adr_;
  std::array< ActionHvIxbarCtlByteMutable, 2 > action_hv_ixbar_ctl_byte_;
  std::array< ActionHvIxbarInputBytemaskMutable, 2 > action_hv_ixbar_input_bytemask_;
  std::array< std::array< ActionHvIxbarCtlHalfwordMutable, 2 >, 3 > action_hv_ixbar_ctl_halfword_;
  std::array< std::array< ActionHvIxbarCtlWordMutable, 2 >, 4 > action_hv_ixbar_ctl_word_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_unit_ram_row_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    assert(index_mau_addrmap < 12);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x8000; // to get to row
    assert(index_mau_unit_ram_row_addrmap < 8);
    offset += index_mau_unit_ram_row_addrmap * 0x1000; // mau_unit_ram_row_addrmap[]
    offset += 0xf80; // to get to action_hv_xbar
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_MAU_ACTION_OUTPUT_HV_XBAR_ADDRMAP_MUTABLE_H__
