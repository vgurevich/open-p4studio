/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_ADRMUX_ROW_ADDRMAP_MUTABLE_H__
#define __REGISTER_INCLUDES_MAU_ADRMUX_ROW_ADDRMAP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "adrmux_row_mem_slow_mode_mutable.h"
#include "idletime_cfg_rd_clear_val_mutable.h"
#include "idletime_logical_to_physical_sweep_grant_ctl_mutable.h"
#include "idletime_physical_to_logical_req_inc_ctl_mutable.h"
#include "intr_enable0_mau_adrmux_row_mutable.h"
#include "intr_enable1_mau_adrmux_row_mutable.h"
#include "intr_freeze_enable_mau_adrmux_row_mutable.h"
#include "intr_inject_mau_adrmux_row_mutable.h"
#include "intr_status_mau_adrmux_row_mutable.h"
#include "mapram_config_mutable.h"
#include "mapram_mbe_errlog_mutable.h"
#include "mapram_mbe_inj_mutable.h"
#include "mapram_sbe_errlog_mutable.h"
#include "mapram_sbe_inj_mutable.h"
#include "ram_address_mux_ctl_mutable.h"
#include "unitram_config_mutable.h"

namespace tofinoB0 {
  namespace register_classes {

class MauAdrmuxRowAddrmapMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauAdrmuxRowAddrmapMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_map_and_alu_row_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_map_and_alu_row_addrmap), 512, true, write_callback, read_callback, std::string("MauAdrmuxRowAddrmapMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_map_and_alu_row_addrmap))
    {
    }
  MauAdrmuxRowAddrmapMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MauAdrmuxRowAddrmapMutable")
    {
    }
public:








  MapramMbeErrlogMutable &mapram_mbe_errlog(int j0) { return mapram_mbe_errlog_[j0]; }










  IdletimeLogicalToPhysicalSweepGrantCtlMutable &idletime_logical_to_physical_sweep_grant_ctl(int j0) { return idletime_logical_to_physical_sweep_grant_ctl_[j0]; }










  IdletimePhysicalToLogicalReqIncCtlMutable &idletime_physical_to_logical_req_inc_ctl(int j0) { return idletime_physical_to_logical_req_inc_ctl_[j0]; }









  IdletimeCfgRdClearValMutable &idletime_cfg_rd_clear_val(int j0) { return idletime_cfg_rd_clear_val_[j0]; }





  MapramSbeInjMutable &mapram_sbe_inj() { return mapram_sbe_inj_; }





  MapramMbeInjMutable &mapram_mbe_inj() { return mapram_mbe_inj_; }







  AdrmuxRowMemSlowModeMutable &adrmux_row_mem_slow_mode() { return adrmux_row_mem_slow_mode_; }






  IntrStatusMauAdrmuxRowMutable &intr_status_mau_adrmux_row() { return intr_status_mau_adrmux_row_; }






  IntrEnable0MauAdrmuxRowMutable &intr_enable0_mau_adrmux_row() { return intr_enable0_mau_adrmux_row_; }






  IntrEnable1MauAdrmuxRowMutable &intr_enable1_mau_adrmux_row() { return intr_enable1_mau_adrmux_row_; }







  IntrInjectMauAdrmuxRowMutable &intr_inject_mau_adrmux_row() { return intr_inject_mau_adrmux_row_; }





  IntrFreezeEnableMauAdrmuxRowMutable &intr_freeze_enable_mau_adrmux_row() { return intr_freeze_enable_mau_adrmux_row_; }






















  RamAddressMuxCtlMutable &ram_address_mux_ctl(int j1,int j0) { return ram_address_mux_ctl_[j1][j0]; }



















  UnitramConfigMutable &unitram_config(int j1,int j0) { return unitram_config_[j1][j0]; }















  MapramConfigMutable &mapram_config(int j0) { return mapram_config_[j0]; }








  MapramSbeErrlogMutable &mapram_sbe_errlog(int j0) { return mapram_sbe_errlog_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x18) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mapram_mbe_errlog_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x38) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      idletime_logical_to_physical_sweep_grant_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x58) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      idletime_physical_to_logical_req_inc_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x78) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      idletime_cfg_rd_clear_val_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      mapram_sbe_inj_.read( offset, data );
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      if (read_callback_) read_callback_();
      mapram_mbe_inj_.read( offset, data );
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      if (read_callback_) read_callback_();
      adrmux_row_mem_slow_mode_.read( offset, data );
    }
    else if (offset >= 0x10c && offset < 0x110) {
      offset -= 0x10c;
      if (read_callback_) read_callback_();
      intr_status_mau_adrmux_row_.read( offset, data );
    }
    else if (offset >= 0x110 && offset < 0x114) {
      offset -= 0x110;
      if (read_callback_) read_callback_();
      intr_enable0_mau_adrmux_row_.read( offset, data );
    }
    else if (offset >= 0x114 && offset < 0x118) {
      offset -= 0x114;
      if (read_callback_) read_callback_();
      intr_enable1_mau_adrmux_row_.read( offset, data );
    }
    else if (offset >= 0x118 && offset < 0x11c) {
      offset -= 0x118;
      if (read_callback_) read_callback_();
      intr_inject_mau_adrmux_row_.read( offset, data );
    }
    else if (offset >= 0x11c && offset < 0x120) {
      offset -= 0x11c;
      if (read_callback_) read_callback_();
      intr_freeze_enable_mau_adrmux_row_.read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x180) {
      offset -= 0x140;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      ram_address_mux_ctl_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x1c0) {
      offset -= 0x180;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      unitram_config_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x1c0 && offset < 0x1d8) {
      offset -= 0x1c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mapram_config_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x1e0 && offset < 0x1f8) {
      offset -= 0x1e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mapram_sbe_errlog_[ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x18) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mapram_mbe_errlog_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x38) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      idletime_logical_to_physical_sweep_grant_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x58) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      idletime_physical_to_logical_req_inc_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x78) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      idletime_cfg_rd_clear_val_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      mapram_sbe_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      mapram_mbe_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      adrmux_row_mem_slow_mode_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10c && offset < 0x110) {
      offset -= 0x10c;
      intr_status_mau_adrmux_row_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x110 && offset < 0x114) {
      offset -= 0x110;
      intr_enable0_mau_adrmux_row_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x114 && offset < 0x118) {
      offset -= 0x114;
      intr_enable1_mau_adrmux_row_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x118 && offset < 0x11c) {
      offset -= 0x118;
      intr_inject_mau_adrmux_row_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x11c && offset < 0x120) {
      offset -= 0x11c;
      intr_freeze_enable_mau_adrmux_row_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x180) {
      offset -= 0x140;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      ram_address_mux_ctl_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x1c0) {
      offset -= 0x180;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      unitram_config_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c0 && offset < 0x1d8) {
      offset -= 0x1c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mapram_config_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e0 && offset < 0x1f8) {
      offset -= 0x1e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mapram_sbe_errlog_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : mapram_mbe_errlog_) {
      f0.reset();
    }
    for (auto &f0 : idletime_logical_to_physical_sweep_grant_ctl_) {
      f0.reset();
    }
    for (auto &f0 : idletime_physical_to_logical_req_inc_ctl_) {
      f0.reset();
    }
    for (auto &f0 : idletime_cfg_rd_clear_val_) {
      f0.reset();
    }
    mapram_sbe_inj_.reset();
    mapram_mbe_inj_.reset();
    adrmux_row_mem_slow_mode_.reset();
    intr_status_mau_adrmux_row_.reset();
    intr_enable0_mau_adrmux_row_.reset();
    intr_enable1_mau_adrmux_row_.reset();
    intr_inject_mau_adrmux_row_.reset();
    intr_freeze_enable_mau_adrmux_row_.reset();
    for (auto &f0 : ram_address_mux_ctl_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : unitram_config_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mapram_config_) {
      f0.reset();
    }
    for (auto &f0 : mapram_sbe_errlog_) {
      f0.reset();
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x18) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mapram_mbe_errlog_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x38) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += idletime_logical_to_physical_sweep_grant_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x58) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += idletime_physical_to_logical_req_inc_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x78) {
      offset -= 0x60;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += idletime_cfg_rd_clear_val_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x104) {
      offset -= 0x100;
      r += mapram_sbe_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x104 && offset < 0x108) {
      offset -= 0x104;
      r += mapram_mbe_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x108 && offset < 0x10c) {
      offset -= 0x108;
      r += adrmux_row_mem_slow_mode_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10c && offset < 0x110) {
      offset -= 0x10c;
      r += intr_status_mau_adrmux_row_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x110 && offset < 0x114) {
      offset -= 0x110;
      r += intr_enable0_mau_adrmux_row_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x114 && offset < 0x118) {
      offset -= 0x114;
      r += intr_enable1_mau_adrmux_row_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x118 && offset < 0x11c) {
      offset -= 0x118;
      r += intr_inject_mau_adrmux_row_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x11c && offset < 0x120) {
      offset -= 0x11c;
      r += intr_freeze_enable_mau_adrmux_row_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x180) {
      offset -= 0x140;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += ram_address_mux_ctl_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x1c0) {
      offset -= 0x180;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += unitram_config_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c0 && offset < 0x1d8) {
      offset -= 0x1c0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mapram_config_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e0 && offset < 0x1f8) {
      offset -= 0x1e0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mapram_sbe_errlog_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<6;++a0) {
      r += mapram_mbe_errlog_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<6;++a0) {
      r += idletime_logical_to_physical_sweep_grant_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<6;++a0) {
      r += idletime_physical_to_logical_req_inc_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<6;++a0) {
      r += idletime_cfg_rd_clear_val_[a0].to_string(print_zeros,indent_string) ;
    }
    r += mapram_sbe_inj_.to_string(print_zeros,indent_string) ;
    r += mapram_mbe_inj_.to_string(print_zeros,indent_string) ;
    r += adrmux_row_mem_slow_mode_.to_string(print_zeros,indent_string) ;
    r += intr_status_mau_adrmux_row_.to_string(print_zeros,indent_string) ;
    r += intr_enable0_mau_adrmux_row_.to_string(print_zeros,indent_string) ;
    r += intr_enable1_mau_adrmux_row_.to_string(print_zeros,indent_string) ;
    r += intr_inject_mau_adrmux_row_.to_string(print_zeros,indent_string) ;
    r += intr_freeze_enable_mau_adrmux_row_.to_string(print_zeros,indent_string) ;
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<8;++a0) {
        r += ram_address_mux_ctl_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<8;++a0) {
        r += unitram_config_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a0=0;a0<6;++a0) {
      r += mapram_config_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<6;++a0) {
      r += mapram_sbe_errlog_[a0].to_string(print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< MapramMbeErrlogMutable, 6 > mapram_mbe_errlog_;
  std::array< IdletimeLogicalToPhysicalSweepGrantCtlMutable, 6 > idletime_logical_to_physical_sweep_grant_ctl_;
  std::array< IdletimePhysicalToLogicalReqIncCtlMutable, 6 > idletime_physical_to_logical_req_inc_ctl_;
  std::array< IdletimeCfgRdClearValMutable, 6 > idletime_cfg_rd_clear_val_;
  MapramSbeInjMutable mapram_sbe_inj_;
  MapramMbeInjMutable mapram_mbe_inj_;
  AdrmuxRowMemSlowModeMutable adrmux_row_mem_slow_mode_;
  IntrStatusMauAdrmuxRowMutable intr_status_mau_adrmux_row_;
  IntrEnable0MauAdrmuxRowMutable intr_enable0_mau_adrmux_row_;
  IntrEnable1MauAdrmuxRowMutable intr_enable1_mau_adrmux_row_;
  IntrInjectMauAdrmuxRowMutable intr_inject_mau_adrmux_row_;
  IntrFreezeEnableMauAdrmuxRowMutable intr_freeze_enable_mau_adrmux_row_;
  std::array< std::array< RamAddressMuxCtlMutable, 6 >, 2 > ram_address_mux_ctl_;
  std::array< std::array< UnitramConfigMutable, 6 >, 2 > unitram_config_;
  std::array< MapramConfigMutable, 6 > mapram_config_;
  std::array< MapramSbeErrlogMutable, 6 > mapram_sbe_errlog_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_map_and_alu_row_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    assert(index_mau_addrmap < 12);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x10000; // to get to map_alu
    offset += 0x2000; // to get to row
    assert(index_mau_map_and_alu_row_addrmap < 8);
    offset += index_mau_map_and_alu_row_addrmap * 0x400; // mau_map_and_alu_row_addrmap[]
    offset += 0x200; // to get to adrmux
    return offset;
  }

};


















  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_MAU_ADRMUX_ROW_ADDRMAP_MUTABLE_H__
