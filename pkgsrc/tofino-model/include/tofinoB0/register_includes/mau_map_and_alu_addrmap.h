/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_MAP_AND_ALU_ADDRMAP_H__
#define __REGISTER_INCLUDES_MAU_MAP_AND_ALU_ADDRMAP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "intr_mau_decode_memory_core.h"
#include "mau_map_and_alu_row_addrmap.h"
#include "mau_mapram_color_switchbox_addrmap.h"
#include "mau_mapram_color_write_switchbox_addrmap.h"
#include "mau_meter_alu_group_addrmap.h"
#include "mau_selector_action_adr_shift.h"
#include "mau_selector_action_adr_switchbox_addrmap.h"
#include "mau_stats_alu_wrap_addrmap.h"
#include "meter_alu_group_action_ctl.h"
#include "meter_alu_group_data_delay_ctl.h"
#include "meter_alu_group_error_ctl.h"
#include "selector_action_adr_fallback.h"

namespace tofinoB0 {
  namespace register_classes {

class MauMapAndAluAddrmap : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauMapAndAluAddrmap(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap), 16384, false, write_callback, read_callback, std::string("MauMapAndAluAddrmap")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap))
    {
    }
  MauMapAndAluAddrmap(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MauMapAndAluAddrmap")
    {
    }
public:











  SelectorActionAdrFallback &selector_action_adr_fallback(int j1,int j0) { return selector_action_adr_fallback_[j1][j0]; }
















  MauSelectorActionAdrShift &mau_selector_action_adr_shift(int j0) { return mau_selector_action_adr_shift_[j0]; }













  IntrMauDecodeMemoryCore &intr_mau_decode_memory_core(int j0) { return intr_mau_decode_memory_core_[j0]; }



















  MeterAluGroupDataDelayCtl &meter_alu_group_data_delay_ctl(int j0) { return meter_alu_group_data_delay_ctl_[j0]; }

















  MeterAluGroupActionCtl &meter_alu_group_action_ctl(int j0) { return meter_alu_group_action_ctl_[j0]; }







  MeterAluGroupErrorCtl &meter_alu_group_error_ctl(int j0) { return meter_alu_group_error_ctl_[j0]; }





  MauMapramColorSwitchboxAddrmap &mapram_color_switchbox() { return mapram_color_switchbox_; }







  MauMapramColorWriteSwitchboxAddrmap &mapram_color_write_switchbox(int j0) { return mapram_color_write_switchbox_[j0]; }







  MauStatsAluWrapAddrmap &stats_wrap(int j0) { return stats_wrap_[j0]; }





  MauSelectorActionAdrSwitchboxAddrmap &selector_adr_switchbox() { return selector_adr_switchbox_; }







  MauMeterAluGroupAddrmap &meter_group(int j0) { return meter_group_[j0]; }







  MauMapAndAluRowAddrmap &row(int j0) { return row_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x80 && offset < 0xc0) {
      offset -= 0x80;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      selector_action_adr_fallback_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0x100) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_selector_action_adr_shift_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x300 && offset < 0x308) {
      offset -= 0x300;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      intr_mau_decode_memory_core_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x310 && offset < 0x320) {
      offset -= 0x310;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      meter_alu_group_data_delay_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x320 && offset < 0x330) {
      offset -= 0x320;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      meter_alu_group_action_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x330 && offset < 0x340) {
      offset -= 0x330;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      meter_alu_group_error_ctl_[ i0 ].read( offset, data );
    }
    else if (offset < 0x80) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      mapram_color_switchbox_.read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xe0) {
      offset -= 0xc0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      mapram_color_write_switchbox_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x300) {
      offset -= 0x200;
      int i0 = offset / 0x40;
      offset  -= i0 * 0x40;
      if (read_callback_) read_callback_();
      stats_wrap_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x380 && offset < 0x400) {
      offset -= 0x380;
      if (read_callback_) read_callback_();
      selector_adr_switchbox_.read( offset, data );
    }
    else if (offset >= 0x800 && offset < 0x1000) {
      offset -= 0x800;
      int i0 = offset / 0x200;
      offset  -= i0 * 0x200;
      if (read_callback_) read_callback_();
      meter_group_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x2000 && offset < 0x4000) {
      offset -= 0x2000;
      int i0 = offset / 0x400;
      offset  -= i0 * 0x400;
      if (read_callback_) read_callback_();
      row_[ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x80 && offset < 0xc0) {
      offset -= 0x80;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      selector_action_adr_fallback_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0x100) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_selector_action_adr_shift_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x300 && offset < 0x308) {
      offset -= 0x300;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      intr_mau_decode_memory_core_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x310 && offset < 0x320) {
      offset -= 0x310;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      meter_alu_group_data_delay_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x320 && offset < 0x330) {
      offset -= 0x320;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      meter_alu_group_action_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x330 && offset < 0x340) {
      offset -= 0x330;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      meter_alu_group_error_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset < 0x80) {
      offset -= 0x0;
      mapram_color_switchbox_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xe0) {
      offset -= 0xc0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      mapram_color_write_switchbox_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x300) {
      offset -= 0x200;
      int i0 = offset / 0x40;
      offset  -= i0 * 0x40;
      stats_wrap_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x380 && offset < 0x400) {
      offset -= 0x380;
      selector_adr_switchbox_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x800 && offset < 0x1000) {
      offset -= 0x800;
      int i0 = offset / 0x200;
      offset  -= i0 * 0x200;
      meter_group_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2000 && offset < 0x4000) {
      offset -= 0x2000;
      int i0 = offset / 0x400;
      offset  -= i0 * 0x400;
      row_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : selector_action_adr_fallback_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : mau_selector_action_adr_shift_) {
      f0.reset();
    }
    for (auto &f0 : intr_mau_decode_memory_core_) {
      f0.reset();
    }
    for (auto &f0 : meter_alu_group_data_delay_ctl_) {
      f0.reset();
    }
    for (auto &f0 : meter_alu_group_action_ctl_) {
      f0.reset();
    }
    for (auto &f0 : meter_alu_group_error_ctl_) {
      f0.reset();
    }
    mapram_color_switchbox_.reset();
    for (auto &f0 : mapram_color_write_switchbox_) {
      f0.reset();
    }
    for (auto &f0 : stats_wrap_) {
      f0.reset();
    }
    selector_adr_switchbox_.reset();
    for (auto &f0 : meter_group_) {
      f0.reset();
    }
    for (auto &f0 : row_) {
      f0.reset();
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x80 && offset < 0xc0) {
      offset -= 0x80;
      int i1 = offset / 0x8;
      offset  -= i1 * 0x8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += selector_action_adr_fallback_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0x100) {
      offset -= 0xe0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_selector_action_adr_shift_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x300 && offset < 0x308) {
      offset -= 0x300;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += intr_mau_decode_memory_core_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x310 && offset < 0x320) {
      offset -= 0x310;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += meter_alu_group_data_delay_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x320 && offset < 0x330) {
      offset -= 0x320;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += meter_alu_group_action_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x330 && offset < 0x340) {
      offset -= 0x330;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += meter_alu_group_error_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset < 0x80) {
      offset -= 0x0;
      r += mapram_color_switchbox_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xe0) {
      offset -= 0xc0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += mapram_color_write_switchbox_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x300) {
      offset -= 0x200;
      int i0 = offset / 0x40;
      offset  -= i0 * 0x40;
      r += stats_wrap_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x380 && offset < 0x400) {
      offset -= 0x380;
      r += selector_adr_switchbox_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x800 && offset < 0x1000) {
      offset -= 0x800;
      int i0 = offset / 0x200;
      offset  -= i0 * 0x200;
      r += meter_group_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2000 && offset < 0x4000) {
      offset -= 0x2000;
      int i0 = offset / 0x400;
      offset  -= i0 * 0x400;
      r += row_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a1=0;a1<8;++a1) {
      for (uint32_t a0=0;a0<2;++a0) {
        r += selector_action_adr_fallback_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += mau_selector_action_adr_shift_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += intr_mau_decode_memory_core_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += meter_alu_group_data_delay_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += meter_alu_group_action_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += meter_alu_group_error_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    r += mapram_color_switchbox_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += mapram_color_write_switchbox_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += stats_wrap_[a0].to_string(print_zeros,indent_string) ;
    }
    r += selector_adr_switchbox_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += meter_group_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += row_[a0].to_string(print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< std::array< SelectorActionAdrFallback, 2 >, 8 > selector_action_adr_fallback_;
  std::array< MauSelectorActionAdrShift, 8 > mau_selector_action_adr_shift_;
  std::array< IntrMauDecodeMemoryCore, 2 > intr_mau_decode_memory_core_;
  std::array< MeterAluGroupDataDelayCtl, 4 > meter_alu_group_data_delay_ctl_;
  std::array< MeterAluGroupActionCtl, 4 > meter_alu_group_action_ctl_;
  std::array< MeterAluGroupErrorCtl, 4 > meter_alu_group_error_ctl_;
  MauMapramColorSwitchboxAddrmap mapram_color_switchbox_;
  std::array< MauMapramColorWriteSwitchboxAddrmap, 4 > mapram_color_write_switchbox_;
  std::array< MauStatsAluWrapAddrmap, 4 > stats_wrap_;
  MauSelectorActionAdrSwitchboxAddrmap selector_adr_switchbox_;
  std::array< MauMeterAluGroupAddrmap, 4 > meter_group_;
  std::array< MauMapAndAluRowAddrmap, 8 > row_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    assert(index_mau_addrmap < 12);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x10000; // to get to map_alu
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_MAU_MAP_AND_ALU_ADDRMAP_H__
