/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_SNAPSHOT_CONTROL_ADDRMAP_H__
#define __REGISTER_INCLUDES_MAU_SNAPSHOT_CONTROL_ADDRMAP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "mau_fsm_snapshot_cur_stateq.h"
#include "mau_snapshot_config.h"
#include "mau_snapshot_datapath_capture.h"
#include "mau_snapshot_timestamp_hi.h"
#include "mau_snapshot_timestamp_lo.h"
#include "mau_snapshot_timestamp_trigger_hi.h"
#include "mau_snapshot_timestamp_trigger_lo.h"

namespace tofinoB0 {
  namespace register_classes {

class MauSnapshotControlAddrmap : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauSnapshotControlAddrmap(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap), 64, false, write_callback, read_callback, std::string("MauSnapshotControlAddrmap")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap))
    {
    }
  MauSnapshotControlAddrmap(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MauSnapshotControlAddrmap")
    {
    }
public:















  MauFsmSnapshotCurStateq &mau_fsm_snapshot_cur_stateq(int j0) { return mau_fsm_snapshot_cur_stateq_[j0]; }





  MauSnapshotConfig &mau_snapshot_config() { return mau_snapshot_config_; }






  MauSnapshotTimestampTriggerHi &mau_snapshot_timestamp_trigger_hi() { return mau_snapshot_timestamp_trigger_hi_; }






  MauSnapshotTimestampTriggerLo &mau_snapshot_timestamp_trigger_lo() { return mau_snapshot_timestamp_trigger_lo_; }








  MauSnapshotTimestampHi &mau_snapshot_timestamp_hi() { return mau_snapshot_timestamp_hi_; }








  MauSnapshotTimestampLo &mau_snapshot_timestamp_lo() { return mau_snapshot_timestamp_lo_; }









  MauSnapshotDatapathCapture &mau_snapshot_datapath_capture(int j0) { return mau_snapshot_datapath_capture_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x8) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_fsm_snapshot_cur_stateq_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      mau_snapshot_config_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      mau_snapshot_timestamp_trigger_hi_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      mau_snapshot_timestamp_trigger_lo_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      mau_snapshot_timestamp_hi_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      mau_snapshot_timestamp_lo_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x40) {
      offset -= 0x38;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mau_snapshot_datapath_capture_[ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x8) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_fsm_snapshot_cur_stateq_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      mau_snapshot_config_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      mau_snapshot_timestamp_trigger_hi_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      mau_snapshot_timestamp_trigger_lo_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      mau_snapshot_timestamp_hi_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      mau_snapshot_timestamp_lo_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x40) {
      offset -= 0x38;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mau_snapshot_datapath_capture_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : mau_fsm_snapshot_cur_stateq_) {
      f0.reset();
    }
    mau_snapshot_config_.reset();
    mau_snapshot_timestamp_trigger_hi_.reset();
    mau_snapshot_timestamp_trigger_lo_.reset();
    mau_snapshot_timestamp_hi_.reset();
    mau_snapshot_timestamp_lo_.reset();
    for (auto &f0 : mau_snapshot_datapath_capture_) {
      f0.reset();
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x8) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_fsm_snapshot_cur_stateq_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += mau_snapshot_config_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += mau_snapshot_timestamp_trigger_hi_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += mau_snapshot_timestamp_trigger_lo_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += mau_snapshot_timestamp_hi_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += mau_snapshot_timestamp_lo_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x40) {
      offset -= 0x38;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mau_snapshot_datapath_capture_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<2;++a0) {
      r += mau_fsm_snapshot_cur_stateq_[a0].to_string(print_zeros,indent_string) ;
    }
    r += mau_snapshot_config_.to_string(print_zeros,indent_string) ;
    r += mau_snapshot_timestamp_trigger_hi_.to_string(print_zeros,indent_string) ;
    r += mau_snapshot_timestamp_trigger_lo_.to_string(print_zeros,indent_string) ;
    r += mau_snapshot_timestamp_hi_.to_string(print_zeros,indent_string) ;
    r += mau_snapshot_timestamp_lo_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<2;++a0) {
      r += mau_snapshot_datapath_capture_[a0].to_string(print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< MauFsmSnapshotCurStateq, 2 > mau_fsm_snapshot_cur_stateq_;
  MauSnapshotConfig mau_snapshot_config_;
  MauSnapshotTimestampTriggerHi mau_snapshot_timestamp_trigger_hi_;
  MauSnapshotTimestampTriggerLo mau_snapshot_timestamp_trigger_lo_;
  MauSnapshotTimestampHi mau_snapshot_timestamp_hi_;
  MauSnapshotTimestampLo mau_snapshot_timestamp_lo_;
  std::array< MauSnapshotDatapathCapture, 2 > mau_snapshot_datapath_capture_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    assert(index_mau_addrmap < 12);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x60000; // to get to dp
    offset += 0x10440; // to get to snapshot_ctl
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_MAU_SNAPSHOT_CONTROL_ADDRMAP_H__
