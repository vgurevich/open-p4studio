/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_STASH_ADDRMAP_H__
#define __REGISTER_INCLUDES_MAU_STASH_ADDRMAP_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "stash_bank_enable.h"
#include "stash_data.h"
#include "stash_hashkey_data.h"
#include "stash_match_address.h"
#include "stash_match_input_data_ctl.h"
#include "stash_match_mask.h"
#include "stash_match_result_bus_select.h"
#include "stash_version_valid.h"

namespace tofinoB0 {
  namespace register_classes {

class MauStashAddrmap : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauStashAddrmap(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_unit_ram_row_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_unit_ram_row_addrmap), 256, false, write_callback, read_callback, std::string("MauStashAddrmap")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_unit_ram_row_addrmap))
    {
    }
  MauStashAddrmap(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MauStashAddrmap")
    {
    }
public:










  StashHashkeyData &stash_hashkey_data(int j0) { return stash_hashkey_data_[j0]; }















  StashBankEnable &stash_bank_enable(int j0) { return stash_bank_enable_[j0]; }










  StashMatchAddress &stash_match_address(int j0) { return stash_match_address_[j0]; }


















  StashVersionValid &stash_version_valid(int j0) { return stash_version_valid_[j0]; }











  StashData &stash_data(int j1,int j0) { return stash_data_[j1][j0]; }


















  StashMatchInputDataCtl &stash_match_input_data_ctl(int j0) { return stash_match_input_data_ctl_[j0]; }













  StashMatchResultBusSelect &stash_match_result_bus_select(int j0) { return stash_match_result_bus_select_[j0]; }











  StashMatchMask &stash_match_mask(int j1,int j0) { return stash_match_mask_[j1][j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x10) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stash_hashkey_data_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x20) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stash_bank_enable_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stash_match_address_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stash_version_valid_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xc0) {
      offset -= 0x80;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stash_data_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xc8) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stash_match_input_data_ctl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xc8 && offset < 0xd0) {
      offset -= 0xc8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stash_match_result_bus_select_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0x100) {
      offset -= 0xe0;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      stash_match_mask_[ i1 ][ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x10) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stash_hashkey_data_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x20) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stash_bank_enable_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stash_match_address_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stash_version_valid_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xc0) {
      offset -= 0x80;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stash_data_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xc8) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stash_match_input_data_ctl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc8 && offset < 0xd0) {
      offset -= 0xc8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stash_match_result_bus_select_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0x100) {
      offset -= 0xe0;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      stash_match_mask_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : stash_hashkey_data_) {
      f0.reset();
    }
    for (auto &f0 : stash_bank_enable_) {
      f0.reset();
    }
    for (auto &f0 : stash_match_address_) {
      f0.reset();
    }
    for (auto &f0 : stash_version_valid_) {
      f0.reset();
    }
    for (auto &f0 : stash_data_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : stash_match_input_data_ctl_) {
      f0.reset();
    }
    for (auto &f0 : stash_match_result_bus_select_) {
      f0.reset();
    }
    for (auto &f0 : stash_match_mask_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x10) {
      offset -= 0x0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stash_hashkey_data_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x20) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stash_bank_enable_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x30) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stash_match_address_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x40) {
      offset -= 0x30;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stash_version_valid_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xc0) {
      offset -= 0x80;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stash_data_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xc8) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stash_match_input_data_ctl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc8 && offset < 0xd0) {
      offset -= 0xc8;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stash_match_result_bus_select_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0x100) {
      offset -= 0xe0;
      int i1 = offset / 0x10;
      offset  -= i1 * 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += stash_match_mask_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<4;++a0) {
      r += stash_hashkey_data_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += stash_bank_enable_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += stash_match_address_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += stash_version_valid_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a1=0;a1<4;++a1) {
      for (uint32_t a0=0;a0<4;++a0) {
        r += stash_data_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += stash_match_input_data_ctl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<2;++a0) {
      r += stash_match_result_bus_select_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<4;++a0) {
        r += stash_match_mask_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< StashHashkeyData, 4 > stash_hashkey_data_;
  std::array< StashBankEnable, 4 > stash_bank_enable_;
  std::array< StashMatchAddress, 4 > stash_match_address_;
  std::array< StashVersionValid, 4 > stash_version_valid_;
  std::array< std::array< StashData, 4 >, 4 > stash_data_;
  std::array< StashMatchInputDataCtl, 2 > stash_match_input_data_ctl_;
  std::array< StashMatchResultBusSelect, 2 > stash_match_result_bus_select_;
  std::array< std::array< StashMatchMask, 4 >, 2 > stash_match_mask_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_unit_ram_row_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    assert(index_mau_addrmap < 12);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x8000; // to get to row
    assert(index_mau_unit_ram_row_addrmap < 8);
    offset += index_mau_unit_ram_row_addrmap * 0x1000; // mau_unit_ram_row_addrmap[]
    offset += 0xd00; // to get to stash
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_MAU_STASH_ADDRMAP_H__
