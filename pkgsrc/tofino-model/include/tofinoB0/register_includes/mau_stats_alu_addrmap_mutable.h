/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_STATS_ALU_ADDRMAP_MUTABLE_H__
#define __REGISTER_INCLUDES_MAU_STATS_ALU_ADDRMAP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "intr_enable0_mau_stats_alu_mutable.h"
#include "intr_enable1_mau_stats_alu_mutable.h"
#include "intr_inject_mau_stats_alu_mutable.h"
#include "intr_status_mau_stats_alu_mutable.h"
#include "lrt_threshold_mutable.h"
#include "lrt_update_interval_mutable.h"
#include "mau_diag_stats_alu_mutable.h"
#include "statistics_ctl_mutable.h"

namespace tofinoB0 {
  namespace register_classes {

class MauStatsAluAddrmapMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauStatsAluAddrmapMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_stats_alu_wrap_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_stats_alu_wrap_addrmap), 64, true, write_callback, read_callback, std::string("MauStatsAluAddrmapMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_stats_alu_wrap_addrmap))
    {
    }
  MauStatsAluAddrmapMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MauStatsAluAddrmapMutable")
    {
    }
public:






  IntrEnable1MauStatsAluMutable &intr_enable1_mau_stats_alu() { return intr_enable1_mau_stats_alu_; }







  IntrInjectMauStatsAluMutable &intr_inject_mau_stats_alu() { return intr_inject_mau_stats_alu_; }














  LrtThresholdMutable &lrt_threshold(int j0) { return lrt_threshold_[j0]; }












  LrtUpdateIntervalMutable &lrt_update_interval(int j0) { return lrt_update_interval_[j0]; }









  StatisticsCtlMutable &statistics_ctl() { return statistics_ctl_; }






  MauDiagStatsAluMutable &mau_diag_stats_alu() { return mau_diag_stats_alu_; }






  IntrStatusMauStatsAluMutable &intr_status_mau_stats_alu() { return intr_status_mau_stats_alu_; }






  IntrEnable0MauStatsAluMutable &intr_enable0_mau_stats_alu() { return intr_enable0_mau_stats_alu_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      intr_enable1_mau_stats_alu_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      intr_inject_mau_stats_alu_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x1c) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      lrt_threshold_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x2c) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      lrt_update_interval_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      statistics_ctl_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      mau_diag_stats_alu_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      intr_status_mau_stats_alu_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      intr_enable0_mau_stats_alu_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      intr_enable1_mau_stats_alu_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      intr_inject_mau_stats_alu_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x1c) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      lrt_threshold_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x2c) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      lrt_update_interval_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      statistics_ctl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      mau_diag_stats_alu_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      intr_status_mau_stats_alu_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      intr_enable0_mau_stats_alu_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    intr_enable1_mau_stats_alu_.reset();
    intr_inject_mau_stats_alu_.reset();
    for (auto &f0 : lrt_threshold_) {
      f0.reset();
    }
    for (auto &f0 : lrt_update_interval_) {
      f0.reset();
    }
    statistics_ctl_.reset();
    mau_diag_stats_alu_.reset();
    intr_status_mau_stats_alu_.reset();
    intr_enable0_mau_stats_alu_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += intr_enable1_mau_stats_alu_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += intr_inject_mau_stats_alu_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x1c) {
      offset -= 0x10;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += lrt_threshold_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x2c) {
      offset -= 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += lrt_update_interval_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += statistics_ctl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += mau_diag_stats_alu_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += intr_status_mau_stats_alu_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += intr_enable0_mau_stats_alu_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += intr_enable1_mau_stats_alu_.to_string(print_zeros,indent_string) ;
    r += intr_inject_mau_stats_alu_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<3;++a0) {
      r += lrt_threshold_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<3;++a0) {
      r += lrt_update_interval_[a0].to_string(print_zeros,indent_string) ;
    }
    r += statistics_ctl_.to_string(print_zeros,indent_string) ;
    r += mau_diag_stats_alu_.to_string(print_zeros,indent_string) ;
    r += intr_status_mau_stats_alu_.to_string(print_zeros,indent_string) ;
    r += intr_enable0_mau_stats_alu_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  IntrEnable1MauStatsAluMutable intr_enable1_mau_stats_alu_;
  IntrInjectMauStatsAluMutable intr_inject_mau_stats_alu_;
  std::array< LrtThresholdMutable, 3 > lrt_threshold_;
  std::array< LrtUpdateIntervalMutable, 3 > lrt_update_interval_;
  StatisticsCtlMutable statistics_ctl_;
  MauDiagStatsAluMutable mau_diag_stats_alu_;
  IntrStatusMauStatsAluMutable intr_status_mau_stats_alu_;
  IntrEnable0MauStatsAluMutable intr_enable0_mau_stats_alu_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_stats_alu_wrap_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    assert(index_mau_addrmap < 12);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x10000; // to get to map_alu
    offset += 0x200; // to get to stats_wrap
    assert(index_mau_stats_alu_wrap_addrmap < 4);
    offset += index_mau_stats_alu_wrap_addrmap * 0x40; // mau_stats_alu_wrap_addrmap[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_MAU_STATS_ALU_ADDRMAP_MUTABLE_H__
