/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MAU_TCAM_ROW_VH_XBAR_ARRAY_ADDRMAP_MUTABLE_H__
#define __REGISTER_INCLUDES_MAU_TCAM_ROW_VH_XBAR_ARRAY_ADDRMAP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "tcam_extra_byte_ctl_mutable.h"
#include "tcam_row_halfbyte_mux_ctl_mutable.h"
#include "tcam_row_output_ctl_mutable.h"
#include "tcam_validbit_xbar_ctl_mutable.h"

namespace tofinoB0 {
  namespace register_classes {

class MauTcamRowVhXbarArrayAddrmapMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MauTcamRowVhXbarArrayAddrmapMutable(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap), 1024, true, write_callback, read_callback, std::string("MauTcamRowVhXbarArrayAddrmapMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap))
    {
    }
  MauTcamRowVhXbarArrayAddrmapMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MauTcamRowVhXbarArrayAddrmapMutable")
    {
    }
public:













  TcamValidbitXbarCtlMutable &tcam_validbit_xbar_ctl(int j2,int j1,int j0) { return tcam_validbit_xbar_ctl_[j2][j1][j0]; }















  TcamRowHalfbyteMuxCtlMutable &tcam_row_halfbyte_mux_ctl(int j1,int j0) { return tcam_row_halfbyte_mux_ctl_[j1][j0]; }















  TcamExtraByteCtlMutable &tcam_extra_byte_ctl(int j1,int j0) { return tcam_extra_byte_ctl_[j1][j0]; }

















  TcamRowOutputCtlMutable &tcam_row_output_ctl(int j1,int j0) { return tcam_row_output_ctl_[j1][j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x200) {
      offset -= 0x0;
      int i2 = offset / 0x100;
      offset  -= i2 * 0x100;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tcam_validbit_xbar_ctl_[ i2 ][ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x280) {
      offset -= 0x200;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tcam_row_halfbyte_mux_ctl_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x300 && offset < 0x340) {
      offset -= 0x300;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tcam_extra_byte_ctl_[ i1 ][ i0 ].read( offset, data );
    }
    else if (offset >= 0x380 && offset < 0x400) {
      offset -= 0x380;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      tcam_row_output_ctl_[ i1 ][ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x200) {
      offset -= 0x0;
      int i2 = offset / 0x100;
      offset  -= i2 * 0x100;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tcam_validbit_xbar_ctl_[ i2 ][ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x280) {
      offset -= 0x200;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tcam_row_halfbyte_mux_ctl_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x300 && offset < 0x340) {
      offset -= 0x300;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tcam_extra_byte_ctl_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x380 && offset < 0x400) {
      offset -= 0x380;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      tcam_row_output_ctl_[ i1 ][ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    for (auto &f0 : tcam_validbit_xbar_ctl_) {
      for (auto &f1 : f0) {
        for (auto &f2 : f1) {
          f2.reset();
        }
      }
    }
    for (auto &f0 : tcam_row_halfbyte_mux_ctl_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : tcam_extra_byte_ctl_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    for (auto &f0 : tcam_row_output_ctl_) {
      for (auto &f1 : f0) {
        f1.reset();
      }
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x200) {
      offset -= 0x0;
      int i2 = offset / 0x100;
      offset  -= i2 * 0x100;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tcam_validbit_xbar_ctl_[ i2 ][ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x280) {
      offset -= 0x200;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tcam_row_halfbyte_mux_ctl_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x300 && offset < 0x340) {
      offset -= 0x300;
      int i1 = offset / 0x20;
      offset  -= i1 * 0x20;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tcam_extra_byte_ctl_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x380 && offset < 0x400) {
      offset -= 0x380;
      int i1 = offset / 0x40;
      offset  -= i1 * 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += tcam_row_output_ctl_[ i1 ][ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a2=0;a2<2;++a2) {
      for (uint32_t a1=0;a1<8;++a1) {
        for (uint32_t a0=0;a0<8;++a0) {
          r += tcam_validbit_xbar_ctl_[a2][a1][a0].to_string(print_zeros,indent_string) ;
        }
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += tcam_row_halfbyte_mux_ctl_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<8;++a0) {
        r += tcam_extra_byte_ctl_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    for (uint32_t a1=0;a1<2;++a1) {
      for (uint32_t a0=0;a0<16;++a0) {
        r += tcam_row_output_ctl_[a1][a0].to_string(print_zeros,indent_string) ;
      }
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< std::array< std::array< TcamValidbitXbarCtlMutable, 8 >, 8 >, 2 > tcam_validbit_xbar_ctl_;
  std::array< std::array< TcamRowHalfbyteMuxCtlMutable, 16 >, 2 > tcam_row_halfbyte_mux_ctl_;
  std::array< std::array< TcamExtraByteCtlMutable, 8 >, 2 > tcam_extra_byte_ctl_;
  std::array< std::array< TcamRowOutputCtlMutable, 16 >, 2 > tcam_row_output_ctl_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    assert(index_mau_addrmap < 12);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x40800; // to get to tcams
    offset += 0x400; // to get to vh_data_xbar
    return offset;
  }

};
















  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_MAU_TCAM_ROW_VH_XBAR_ARRAY_ADDRMAP_MUTABLE_H__
