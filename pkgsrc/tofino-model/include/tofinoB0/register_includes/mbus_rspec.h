/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MBUS_RSPEC_H__
#define __REGISTER_INCLUDES_MBUS_RSPEC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "mbus_baresync_ts_inc_value.h"
#include "mbus_baresync_ts_set_value.h"
#include "mbus_baresync_ts_value.h"
#include "mbus_controller_mbe_log.h"
#include "mbus_controller_sbe_log.h"
#include "mbus_ctrl.h"
#include "mbus_flush.h"
#include "mbus_freeze_en.h"
#include "mbus_global_ts_inc.h"
#include "mbus_global_ts_inc_value.h"
#include "mbus_global_ts_offset_value.h"
#include "mbus_global_ts_set.h"
#include "mbus_global_ts_value.h"
#include "mbus_host_creq_credit.h"
#include "mbus_host_slv_credit.h"
#include "mbus_int_en_0.h"
#include "mbus_int_en_1.h"
#include "mbus_int_inj.h"
#include "mbus_int_stat.h"
#include "mbus_mac_creq_credit.h"
#include "mbus_mac_dma_statemachine.h"
#include "mbus_mac_tx_dr_rd_err_log.h"
#include "mbus_parity_err_log.h"
#include "mbus_ts_capture.h"
#include "mbus_ts_timer.h"

namespace tofinoB0 {
  namespace register_classes {

class MbusRspec : public model_core::RegisterBlock<RegisterCallback> {
public:
  MbusRspec(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 200, false, write_callback, read_callback, std::string("MbusRspec"))
    {
    }
  MbusRspec(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MbusRspec")
    {
    }
public:





  MbusCtrl &ctrl() { return ctrl_; }





  MbusFlush &flush() { return flush_; }





  MbusBaresyncTsSetValue &baresync_ts_set_value() { return baresync_ts_set_value_; }





  MbusBaresyncTsIncValue &baresync_ts_inc_value() { return baresync_ts_inc_value_; }





  MbusGlobalTsSet &global_ts_set() { return global_ts_set_; }





  MbusGlobalTsInc &global_ts_inc() { return global_ts_inc_; }





  MbusGlobalTsIncValue &global_ts_inc_value() { return global_ts_inc_value_; }





  MbusGlobalTsOffsetValue &global_ts_offset_value() { return global_ts_offset_value_; }





  MbusTsTimer &ts_timer() { return ts_timer_; }





  MbusTsCapture &ts_capture() { return ts_capture_; }





  MbusGlobalTsValue &global_ts_value() { return global_ts_value_; }





  MbusBaresyncTsValue &baresync_ts_value() { return baresync_ts_value_; }





  MbusIntStat &int_stat() { return int_stat_; }





  MbusIntEn_0 &int_en_0() { return int_en_0_; }





  MbusIntEn_1 &int_en_1() { return int_en_1_; }





  MbusFreezeEn &freeze_en() { return freeze_en_; }





  MbusIntInj &int_inj() { return int_inj_; }





  MbusMacTxDrRdErrLog &mac_tx_dr_rd_err_log() { return mac_tx_dr_rd_err_log_; }





  MbusControllerMbeLog &controller_mbe_log() { return controller_mbe_log_; }





  MbusControllerSbeLog &controller_sbe_log() { return controller_sbe_log_; }
















  MbusParityErrLog &parity_err_log(int j0) { return parity_err_log_[j0]; }







  MbusHostCreqCredit &host_creq_credit(int j0) { return host_creq_credit_[j0]; }







  MbusMacCreqCredit &mac_creq_credit(int j0) { return mac_creq_credit_[j0]; }





  MbusHostSlvCredit &host_slave_credit() { return host_slave_credit_; }





  MbusMacDmaStatemachine &mac_dma_statemachine() { return mac_dma_statemachine_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      ctrl_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      flush_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      baresync_ts_set_value_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x30) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      baresync_ts_inc_value_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x38) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      global_ts_set_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x40) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      global_ts_inc_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      global_ts_inc_value_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      global_ts_offset_value_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      ts_timer_.read( offset, data );
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      if (read_callback_) read_callback_();
      ts_capture_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      global_ts_value_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      baresync_ts_value_.read( offset, data );
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      if (read_callback_) read_callback_();
      int_stat_.read( offset, data );
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      if (read_callback_) read_callback_();
      int_en_0_.read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      if (read_callback_) read_callback_();
      int_en_1_.read( offset, data );
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      if (read_callback_) read_callback_();
      freeze_en_.read( offset, data );
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      if (read_callback_) read_callback_();
      int_inj_.read( offset, data );
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      if (read_callback_) read_callback_();
      mac_tx_dr_rd_err_log_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      controller_mbe_log_.read( offset, data );
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      if (read_callback_) read_callback_();
      controller_sbe_log_.read( offset, data );
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      parity_err_log_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      host_creq_credit_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mac_creq_credit_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xc4) {
      offset -= 0xc0;
      if (read_callback_) read_callback_();
      host_slave_credit_.read( offset, data );
    }
    else if (offset >= 0xc4 && offset < 0xc8) {
      offset -= 0xc4;
      if (read_callback_) read_callback_();
      mac_dma_statemachine_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      flush_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      baresync_ts_set_value_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x30) {
      offset -= 0x28;
      baresync_ts_inc_value_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x38) {
      offset -= 0x30;
      global_ts_set_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x40) {
      offset -= 0x38;
      global_ts_inc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      global_ts_inc_value_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      global_ts_offset_value_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      ts_timer_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      ts_capture_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      global_ts_value_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      baresync_ts_value_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      int_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      int_en_0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      int_en_1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      freeze_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      int_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      mac_tx_dr_rd_err_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      controller_mbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      controller_sbe_log_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      parity_err_log_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      host_creq_credit_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mac_creq_credit_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xc4) {
      offset -= 0xc0;
      host_slave_credit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc4 && offset < 0xc8) {
      offset -= 0xc4;
      mac_dma_statemachine_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    ctrl_.reset();
    flush_.reset();
    baresync_ts_set_value_.reset();
    baresync_ts_inc_value_.reset();
    global_ts_set_.reset();
    global_ts_inc_.reset();
    global_ts_inc_value_.reset();
    global_ts_offset_value_.reset();
    ts_timer_.reset();
    ts_capture_.reset();
    global_ts_value_.reset();
    baresync_ts_value_.reset();
    int_stat_.reset();
    int_en_0_.reset();
    int_en_1_.reset();
    freeze_en_.reset();
    int_inj_.reset();
    mac_tx_dr_rd_err_log_.reset();
    controller_mbe_log_.reset();
    controller_sbe_log_.reset();
    for (auto &f0 : parity_err_log_) {
      f0.reset();
    }
    for (auto &f0 : host_creq_credit_) {
      f0.reset();
    }
    for (auto &f0 : mac_creq_credit_) {
      f0.reset();
    }
    host_slave_credit_.reset();
    mac_dma_statemachine_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += flush_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      r += baresync_ts_set_value_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x30) {
      offset -= 0x28;
      r += baresync_ts_inc_value_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x38) {
      offset -= 0x30;
      r += global_ts_set_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x40) {
      offset -= 0x38;
      r += global_ts_inc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      r += global_ts_inc_value_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      r += global_ts_offset_value_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      r += ts_timer_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x54 && offset < 0x58) {
      offset -= 0x54;
      r += ts_capture_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      r += global_ts_value_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      r += baresync_ts_value_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x68 && offset < 0x6c) {
      offset -= 0x68;
      r += int_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6c && offset < 0x70) {
      offset -= 0x6c;
      r += int_en_0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x74) {
      offset -= 0x70;
      r += int_en_1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x74 && offset < 0x78) {
      offset -= 0x74;
      r += freeze_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x78 && offset < 0x7c) {
      offset -= 0x78;
      r += int_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x7c && offset < 0x80) {
      offset -= 0x7c;
      r += mac_tx_dr_rd_err_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x84) {
      offset -= 0x80;
      r += controller_mbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x84 && offset < 0x88) {
      offset -= 0x84;
      r += controller_sbe_log_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x90 && offset < 0xa0) {
      offset -= 0x90;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += parity_err_log_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xb0) {
      offset -= 0xa0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += host_creq_credit_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xc0) {
      offset -= 0xb0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mac_creq_credit_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xc4) {
      offset -= 0xc0;
      r += host_slave_credit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc4 && offset < 0xc8) {
      offset -= 0xc4;
      r += mac_dma_statemachine_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += ctrl_.to_string(print_zeros,indent_string) ;
    r += flush_.to_string(print_zeros,indent_string) ;
    r += baresync_ts_set_value_.to_string(print_zeros,indent_string) ;
    r += baresync_ts_inc_value_.to_string(print_zeros,indent_string) ;
    r += global_ts_set_.to_string(print_zeros,indent_string) ;
    r += global_ts_inc_.to_string(print_zeros,indent_string) ;
    r += global_ts_inc_value_.to_string(print_zeros,indent_string) ;
    r += global_ts_offset_value_.to_string(print_zeros,indent_string) ;
    r += ts_timer_.to_string(print_zeros,indent_string) ;
    r += ts_capture_.to_string(print_zeros,indent_string) ;
    r += global_ts_value_.to_string(print_zeros,indent_string) ;
    r += baresync_ts_value_.to_string(print_zeros,indent_string) ;
    r += int_stat_.to_string(print_zeros,indent_string) ;
    r += int_en_0_.to_string(print_zeros,indent_string) ;
    r += int_en_1_.to_string(print_zeros,indent_string) ;
    r += freeze_en_.to_string(print_zeros,indent_string) ;
    r += int_inj_.to_string(print_zeros,indent_string) ;
    r += mac_tx_dr_rd_err_log_.to_string(print_zeros,indent_string) ;
    r += controller_mbe_log_.to_string(print_zeros,indent_string) ;
    r += controller_sbe_log_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += parity_err_log_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += host_creq_credit_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += mac_creq_credit_[a0].to_string(print_zeros,indent_string) ;
    }
    r += host_slave_credit_.to_string(print_zeros,indent_string) ;
    r += mac_dma_statemachine_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  MbusCtrl ctrl_;
  MbusFlush flush_;
  MbusBaresyncTsSetValue baresync_ts_set_value_;
  MbusBaresyncTsIncValue baresync_ts_inc_value_;
  MbusGlobalTsSet global_ts_set_;
  MbusGlobalTsInc global_ts_inc_;
  MbusGlobalTsIncValue global_ts_inc_value_;
  MbusGlobalTsOffsetValue global_ts_offset_value_;
  MbusTsTimer ts_timer_;
  MbusTsCapture ts_capture_;
  MbusGlobalTsValue global_ts_value_;
  MbusBaresyncTsValue baresync_ts_value_;
  MbusIntStat int_stat_;
  MbusIntEn_0 int_en_0_;
  MbusIntEn_1 int_en_1_;
  MbusFreezeEn freeze_en_;
  MbusIntInj int_inj_;
  MbusMacTxDrRdErrLog mac_tx_dr_rd_err_log_;
  MbusControllerMbeLog controller_mbe_log_;
  MbusControllerSbeLog controller_sbe_log_;
  std::array< MbusParityErrLog, 4 > parity_err_log_;
  std::array< MbusHostCreqCredit, 4 > host_creq_credit_;
  std::array< MbusMacCreqCredit, 4 > mac_creq_credit_;
  MbusHostSlvCredit host_slave_credit_;
  MbusMacDmaStatemachine mac_dma_statemachine_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0xc0000; // to get to mbc
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_MBUS_RSPEC_H__
