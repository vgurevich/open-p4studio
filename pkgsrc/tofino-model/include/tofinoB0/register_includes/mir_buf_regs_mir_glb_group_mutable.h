/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MIR_BUF_REGS_MIR_GLB_GROUP_MUTABLE_H__
#define __REGISTER_INCLUDES_MIR_BUF_REGS_MIR_GLB_GROUP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "mir_buf_regs_coal_cred_used_mutable.h"
#include "mir_buf_regs_coal_pktdrop_mutable.h"
#include "mir_buf_regs_coal_pkterr_mutable.h"
#include "mir_buf_regs_coalescing_baseid_mutable.h"
#include "mir_buf_regs_coalescing_basetime_mutable.h"
#include "mir_buf_regs_cred_ini_mutable.h"
#include "mir_buf_regs_dbg_ctrl_mutable.h"
#include "mir_buf_regs_disable_mir_err_mutable.h"
#include "mir_buf_regs_egr_pktdrop_mutable.h"
#include "mir_buf_regs_glb_ctrl_mutable.h"
#include "mir_buf_regs_ingr_pktdrop_mutable.h"
#include "mir_buf_regs_min_bcnt_mutable.h"
#include "mir_buf_regs_mir_addr_err_dbuf_mutable.h"
#include "mir_buf_regs_mir_addr_err_edesc_mutable.h"
#include "mir_buf_regs_mir_addr_err_idesc_mutable.h"
#include "mir_buf_regs_mir_addr_err_odesc_mutable.h"
#include "mir_buf_regs_mir_addr_err_ptrff_mutable.h"
#include "mir_buf_regs_mir_int_dual_inj_mutable.h"
#include "mir_buf_regs_mir_int_en_mutable.h"
#include "mir_buf_regs_mir_int_freeze_mutable.h"
#include "mir_buf_regs_mir_int_pri_mutable.h"
#include "mir_buf_regs_mir_int_sngl_inj_mutable.h"
#include "mir_buf_regs_mir_int_stat_mutable.h"
#include "mir_buf_regs_mir_watermark_drop_mutable.h"
#include "mir_buf_regs_neg_mirr_ctrl_mutable.h"
#include "mir_buf_regs_neg_mirr_wtmk_mutable.h"
#include "mir_buf_regs_neg_pktdrop_mutable.h"
#include "mir_buf_regs_negm_cred_used_mutable.h"
#include "mir_buf_regs_norm_bank_entries_mutable.h"
#include "mir_buf_regs_odesc_init_done_mutable.h"
#include "mir_buf_regs_session_fifonum_mutable.h"
#include "mir_buf_regs_stall_drop_stat_mutable.h"
#include "mir_buf_regs_tot_bank_entries_mutable.h"

namespace tofinoB0 {
  namespace register_classes {

class MirBufRegsMirGlbGroupMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MirBufRegsMirGlbGroupMutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 336, true, write_callback, read_callback, std::string("MirBufRegsMirGlbGroupMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  MirBufRegsMirGlbGroupMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MirBufRegsMirGlbGroupMutable")
    {
    }
public:





  MirBufRegsGlbCtrlMutable &mir_glb_group_glb_ctrl() { return mir_glb_group_glb_ctrl_; }





  MirBufRegsMirWatermarkDropMutable &mir_glb_group_mir_watermark_drop() { return mir_glb_group_mir_watermark_drop_; }





  MirBufRegsNegMirrCtrlMutable &mir_glb_group_neg_mirr_ctrl() { return mir_glb_group_neg_mirr_ctrl_; }





  MirBufRegsNegMirrWtmkMutable &mir_glb_group_neg_mirr_wtmk() { return mir_glb_group_neg_mirr_wtmk_; }





  MirBufRegsCoalescingBasetimeMutable &mir_glb_group_coalescing_basetime() { return mir_glb_group_coalescing_basetime_; }





  MirBufRegsCoalescingBaseidMutable &mir_glb_group_coalescing_baseid() { return mir_glb_group_coalescing_baseid_; }






  MirBufRegsSessionFifonumMutable &mir_glb_group_session_fifonum() { return mir_glb_group_session_fifonum_; }







  MirBufRegsNormBankEntriesMutable &mir_glb_group_norm_bank_entries() { return mir_glb_group_norm_bank_entries_; }







  MirBufRegsTotBankEntriesMutable &mir_glb_group_tot_bank_entries() { return mir_glb_group_tot_bank_entries_; }





  MirBufRegsMirIntStatMutable &mir_glb_group_mir_int_stat() { return mir_glb_group_mir_int_stat_; }





  MirBufRegsMirIntEnMutable &mir_glb_group_mir_int_en() { return mir_glb_group_mir_int_en_; }





  MirBufRegsMirIntPriMutable &mir_glb_group_mir_int_pri() { return mir_glb_group_mir_int_pri_; }






  MirBufRegsMirIntDualInjMutable &mir_glb_group_mir_int_dual_inj() { return mir_glb_group_mir_int_dual_inj_; }






  MirBufRegsMirIntSnglInjMutable &mir_glb_group_mir_int_sngl_inj() { return mir_glb_group_mir_int_sngl_inj_; }









  MirBufRegsMirAddrErrDbufMutable &mir_glb_group_mir_addr_err_dbuf() { return mir_glb_group_mir_addr_err_dbuf_; }






  MirBufRegsMirAddrErrIdescMutable &mir_glb_group_mir_addr_err_idesc() { return mir_glb_group_mir_addr_err_idesc_; }






  MirBufRegsMirAddrErrEdescMutable &mir_glb_group_mir_addr_err_edesc() { return mir_glb_group_mir_addr_err_edesc_; }






  MirBufRegsMirAddrErrOdescMutable &mir_glb_group_mir_addr_err_odesc() { return mir_glb_group_mir_addr_err_odesc_; }






  MirBufRegsMirAddrErrPtrffMutable &mir_glb_group_mir_addr_err_ptrff() { return mir_glb_group_mir_addr_err_ptrff_; }





  MirBufRegsDisableMirErrMutable &mir_glb_group_disable_mir_err() { return mir_glb_group_disable_mir_err_; }






  MirBufRegsStallDropStatMutable &mir_glb_group_stall_drop_stat() { return mir_glb_group_stall_drop_stat_; }





  MirBufRegsIngrPktdropMutable &mir_glb_group_ingr_pktdrop() { return mir_glb_group_ingr_pktdrop_; }





  MirBufRegsEgrPktdropMutable &mir_glb_group_egr_pktdrop() { return mir_glb_group_egr_pktdrop_; }





  MirBufRegsNegPktdropMutable &mir_glb_group_neg_pktdrop() { return mir_glb_group_neg_pktdrop_; }







  MirBufRegsCoalPktdropMutable &mir_glb_group_coal_pktdrop(int j0) { return mir_glb_group_coal_pktdrop_[j0]; }







  MirBufRegsCoalCredUsedMutable &mir_glb_group_coal_cred_used(int j0) { return mir_glb_group_coal_cred_used_[j0]; }





  MirBufRegsNegmCredUsedMutable &mir_glb_group_negm_cred_used() { return mir_glb_group_negm_cred_used_; }





  MirBufRegsMirIntFreezeMutable &mir_glb_group_mir_int_freeze() { return mir_glb_group_mir_int_freeze_; }





  MirBufRegsCredIniMutable &mir_glb_group_cred_ini() { return mir_glb_group_cred_ini_; }







  MirBufRegsCoalPkterrMutable &mir_glb_group_coal_pkterr(int j0) { return mir_glb_group_coal_pkterr_[j0]; }





  MirBufRegsOdescInitDoneMutable &mir_glb_group_odesc_init_done() { return mir_glb_group_odesc_init_done_; }





  MirBufRegsDbgCtrlMutable &mir_glb_group_dbg_ctrl() { return mir_glb_group_dbg_ctrl_; }





  MirBufRegsMinBcntMutable &mir_glb_group_min_bcnt() { return mir_glb_group_min_bcnt_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      mir_glb_group_glb_ctrl_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      mir_glb_group_mir_watermark_drop_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      mir_glb_group_neg_mirr_ctrl_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      mir_glb_group_neg_mirr_wtmk_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      mir_glb_group_coalescing_basetime_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      mir_glb_group_coalescing_baseid_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      mir_glb_group_session_fifonum_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      mir_glb_group_norm_bank_entries_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      mir_glb_group_tot_bank_entries_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      mir_glb_group_mir_int_stat_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      mir_glb_group_mir_int_en_.read( offset, data );
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      if (read_callback_) read_callback_();
      mir_glb_group_mir_int_pri_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      mir_glb_group_mir_int_dual_inj_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      mir_glb_group_mir_int_sngl_inj_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      mir_glb_group_mir_addr_err_dbuf_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      mir_glb_group_mir_addr_err_idesc_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      mir_glb_group_mir_addr_err_edesc_.read( offset, data );
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      if (read_callback_) read_callback_();
      mir_glb_group_mir_addr_err_odesc_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      mir_glb_group_mir_addr_err_ptrff_.read( offset, data );
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      if (read_callback_) read_callback_();
      mir_glb_group_disable_mir_err_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      mir_glb_group_stall_drop_stat_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      mir_glb_group_ingr_pktdrop_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      mir_glb_group_egr_pktdrop_.read( offset, data );
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      if (read_callback_) read_callback_();
      mir_glb_group_neg_pktdrop_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xc0) {
      offset -= 0x80;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      mir_glb_group_coal_pktdrop_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xe0) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      mir_glb_group_coal_cred_used_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0xe4) {
      offset -= 0xe0;
      if (read_callback_) read_callback_();
      mir_glb_group_negm_cred_used_.read( offset, data );
    }
    else if (offset >= 0xe8 && offset < 0xec) {
      offset -= 0xe8;
      if (read_callback_) read_callback_();
      mir_glb_group_mir_int_freeze_.read( offset, data );
    }
    else if (offset >= 0xec && offset < 0xf0) {
      offset -= 0xec;
      if (read_callback_) read_callback_();
      mir_glb_group_cred_ini_.read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x140) {
      offset -= 0x100;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      mir_glb_group_coal_pkterr_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      if (read_callback_) read_callback_();
      mir_glb_group_odesc_init_done_.read( offset, data );
    }
    else if (offset >= 0x144 && offset < 0x148) {
      offset -= 0x144;
      if (read_callback_) read_callback_();
      mir_glb_group_dbg_ctrl_.read( offset, data );
    }
    else if (offset >= 0x14c && offset < 0x150) {
      offset -= 0x14c;
      if (read_callback_) read_callback_();
      mir_glb_group_min_bcnt_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      mir_glb_group_glb_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      mir_glb_group_mir_watermark_drop_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      mir_glb_group_neg_mirr_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      mir_glb_group_neg_mirr_wtmk_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      mir_glb_group_coalescing_basetime_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      mir_glb_group_coalescing_baseid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      mir_glb_group_session_fifonum_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      mir_glb_group_norm_bank_entries_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      mir_glb_group_tot_bank_entries_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      mir_glb_group_mir_int_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      mir_glb_group_mir_int_en_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      mir_glb_group_mir_int_pri_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      mir_glb_group_mir_int_dual_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      mir_glb_group_mir_int_sngl_inj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      mir_glb_group_mir_addr_err_dbuf_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      mir_glb_group_mir_addr_err_idesc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      mir_glb_group_mir_addr_err_edesc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      mir_glb_group_mir_addr_err_odesc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      mir_glb_group_mir_addr_err_ptrff_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      mir_glb_group_disable_mir_err_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      mir_glb_group_stall_drop_stat_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      mir_glb_group_ingr_pktdrop_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      mir_glb_group_egr_pktdrop_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      mir_glb_group_neg_pktdrop_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xc0) {
      offset -= 0x80;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      mir_glb_group_coal_pktdrop_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xe0) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      mir_glb_group_coal_cred_used_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0xe4) {
      offset -= 0xe0;
      mir_glb_group_negm_cred_used_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe8 && offset < 0xec) {
      offset -= 0xe8;
      mir_glb_group_mir_int_freeze_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xec && offset < 0xf0) {
      offset -= 0xec;
      mir_glb_group_cred_ini_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x140) {
      offset -= 0x100;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      mir_glb_group_coal_pkterr_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      mir_glb_group_odesc_init_done_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x144 && offset < 0x148) {
      offset -= 0x144;
      mir_glb_group_dbg_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14c && offset < 0x150) {
      offset -= 0x14c;
      mir_glb_group_min_bcnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    mir_glb_group_glb_ctrl_.reset();
    mir_glb_group_mir_watermark_drop_.reset();
    mir_glb_group_neg_mirr_ctrl_.reset();
    mir_glb_group_neg_mirr_wtmk_.reset();
    mir_glb_group_coalescing_basetime_.reset();
    mir_glb_group_coalescing_baseid_.reset();
    mir_glb_group_session_fifonum_.reset();
    mir_glb_group_norm_bank_entries_.reset();
    mir_glb_group_tot_bank_entries_.reset();
    mir_glb_group_mir_int_stat_.reset();
    mir_glb_group_mir_int_en_.reset();
    mir_glb_group_mir_int_pri_.reset();
    mir_glb_group_mir_int_dual_inj_.reset();
    mir_glb_group_mir_int_sngl_inj_.reset();
    mir_glb_group_mir_addr_err_dbuf_.reset();
    mir_glb_group_mir_addr_err_idesc_.reset();
    mir_glb_group_mir_addr_err_edesc_.reset();
    mir_glb_group_mir_addr_err_odesc_.reset();
    mir_glb_group_mir_addr_err_ptrff_.reset();
    mir_glb_group_disable_mir_err_.reset();
    mir_glb_group_stall_drop_stat_.reset();
    mir_glb_group_ingr_pktdrop_.reset();
    mir_glb_group_egr_pktdrop_.reset();
    mir_glb_group_neg_pktdrop_.reset();
    for (auto &f0 : mir_glb_group_coal_pktdrop_) {
      f0.reset();
    }
    for (auto &f0 : mir_glb_group_coal_cred_used_) {
      f0.reset();
    }
    mir_glb_group_negm_cred_used_.reset();
    mir_glb_group_mir_int_freeze_.reset();
    mir_glb_group_cred_ini_.reset();
    for (auto &f0 : mir_glb_group_coal_pkterr_) {
      f0.reset();
    }
    mir_glb_group_odesc_init_done_.reset();
    mir_glb_group_dbg_ctrl_.reset();
    mir_glb_group_min_bcnt_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += mir_glb_group_glb_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += mir_glb_group_mir_watermark_drop_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += mir_glb_group_neg_mirr_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += mir_glb_group_neg_mirr_wtmk_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += mir_glb_group_coalescing_basetime_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += mir_glb_group_coalescing_baseid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += mir_glb_group_session_fifonum_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += mir_glb_group_norm_bank_entries_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += mir_glb_group_tot_bank_entries_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += mir_glb_group_mir_int_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      offset -= 0x28;
      r += mir_glb_group_mir_int_en_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2c && offset < 0x30) {
      offset -= 0x2c;
      r += mir_glb_group_mir_int_pri_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x34) {
      offset -= 0x30;
      r += mir_glb_group_mir_int_dual_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += mir_glb_group_mir_int_sngl_inj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += mir_glb_group_mir_addr_err_dbuf_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += mir_glb_group_mir_addr_err_idesc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x44) {
      offset -= 0x40;
      r += mir_glb_group_mir_addr_err_edesc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x44 && offset < 0x48) {
      offset -= 0x44;
      r += mir_glb_group_mir_addr_err_odesc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x4c) {
      offset -= 0x48;
      r += mir_glb_group_mir_addr_err_ptrff_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4c && offset < 0x50) {
      offset -= 0x4c;
      r += mir_glb_group_disable_mir_err_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x54) {
      offset -= 0x50;
      r += mir_glb_group_stall_drop_stat_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      r += mir_glb_group_ingr_pktdrop_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      r += mir_glb_group_egr_pktdrop_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      r += mir_glb_group_neg_pktdrop_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xc0) {
      offset -= 0x80;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += mir_glb_group_coal_pktdrop_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xe0) {
      offset -= 0xc0;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += mir_glb_group_coal_cred_used_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0xe4) {
      offset -= 0xe0;
      r += mir_glb_group_negm_cred_used_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe8 && offset < 0xec) {
      offset -= 0xe8;
      r += mir_glb_group_mir_int_freeze_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xec && offset < 0xf0) {
      offset -= 0xec;
      r += mir_glb_group_cred_ini_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x140) {
      offset -= 0x100;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += mir_glb_group_coal_pkterr_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x144) {
      offset -= 0x140;
      r += mir_glb_group_odesc_init_done_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x144 && offset < 0x148) {
      offset -= 0x144;
      r += mir_glb_group_dbg_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14c && offset < 0x150) {
      offset -= 0x14c;
      r += mir_glb_group_min_bcnt_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += mir_glb_group_glb_ctrl_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_mir_watermark_drop_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_neg_mirr_ctrl_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_neg_mirr_wtmk_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_coalescing_basetime_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_coalescing_baseid_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_session_fifonum_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_norm_bank_entries_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_tot_bank_entries_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_mir_int_stat_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_mir_int_en_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_mir_int_pri_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_mir_int_dual_inj_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_mir_int_sngl_inj_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_mir_addr_err_dbuf_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_mir_addr_err_idesc_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_mir_addr_err_edesc_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_mir_addr_err_odesc_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_mir_addr_err_ptrff_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_disable_mir_err_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_stall_drop_stat_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_ingr_pktdrop_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_egr_pktdrop_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_neg_pktdrop_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<8;++a0) {
      r += mir_glb_group_coal_pktdrop_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<8;++a0) {
      r += mir_glb_group_coal_cred_used_[a0].to_string(print_zeros,indent_string) ;
    }
    r += mir_glb_group_negm_cred_used_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_mir_int_freeze_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_cred_ini_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<8;++a0) {
      r += mir_glb_group_coal_pkterr_[a0].to_string(print_zeros,indent_string) ;
    }
    r += mir_glb_group_odesc_init_done_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_dbg_ctrl_.to_string(print_zeros,indent_string) ;
    r += mir_glb_group_min_bcnt_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  MirBufRegsGlbCtrlMutable mir_glb_group_glb_ctrl_;
  MirBufRegsMirWatermarkDropMutable mir_glb_group_mir_watermark_drop_;
  MirBufRegsNegMirrCtrlMutable mir_glb_group_neg_mirr_ctrl_;
  MirBufRegsNegMirrWtmkMutable mir_glb_group_neg_mirr_wtmk_;
  MirBufRegsCoalescingBasetimeMutable mir_glb_group_coalescing_basetime_;
  MirBufRegsCoalescingBaseidMutable mir_glb_group_coalescing_baseid_;
  MirBufRegsSessionFifonumMutable mir_glb_group_session_fifonum_;
  MirBufRegsNormBankEntriesMutable mir_glb_group_norm_bank_entries_;
  MirBufRegsTotBankEntriesMutable mir_glb_group_tot_bank_entries_;
  MirBufRegsMirIntStatMutable mir_glb_group_mir_int_stat_;
  MirBufRegsMirIntEnMutable mir_glb_group_mir_int_en_;
  MirBufRegsMirIntPriMutable mir_glb_group_mir_int_pri_;
  MirBufRegsMirIntDualInjMutable mir_glb_group_mir_int_dual_inj_;
  MirBufRegsMirIntSnglInjMutable mir_glb_group_mir_int_sngl_inj_;
  MirBufRegsMirAddrErrDbufMutable mir_glb_group_mir_addr_err_dbuf_;
  MirBufRegsMirAddrErrIdescMutable mir_glb_group_mir_addr_err_idesc_;
  MirBufRegsMirAddrErrEdescMutable mir_glb_group_mir_addr_err_edesc_;
  MirBufRegsMirAddrErrOdescMutable mir_glb_group_mir_addr_err_odesc_;
  MirBufRegsMirAddrErrPtrffMutable mir_glb_group_mir_addr_err_ptrff_;
  MirBufRegsDisableMirErrMutable mir_glb_group_disable_mir_err_;
  MirBufRegsStallDropStatMutable mir_glb_group_stall_drop_stat_;
  MirBufRegsIngrPktdropMutable mir_glb_group_ingr_pktdrop_;
  MirBufRegsEgrPktdropMutable mir_glb_group_egr_pktdrop_;
  MirBufRegsNegPktdropMutable mir_glb_group_neg_pktdrop_;
  std::array< MirBufRegsCoalPktdropMutable, 8 > mir_glb_group_coal_pktdrop_;
  std::array< MirBufRegsCoalCredUsedMutable, 8 > mir_glb_group_coal_cred_used_;
  MirBufRegsNegmCredUsedMutable mir_glb_group_negm_cred_used_;
  MirBufRegsMirIntFreezeMutable mir_glb_group_mir_int_freeze_;
  MirBufRegsCredIniMutable mir_glb_group_cred_ini_;
  std::array< MirBufRegsCoalPkterrMutable, 8 > mir_glb_group_coal_pkterr_;
  MirBufRegsOdescInitDoneMutable mir_glb_group_odesc_init_done_;
  MirBufRegsDbgCtrlMutable mir_glb_group_dbg_ctrl_;
  MirBufRegsMinBcntMutable mir_glb_group_min_bcnt_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x780000; // to get to deparser
    offset += 0x20000; // to get to mirror
    offset += 0x8000; // to get to mir_buf_regs
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_MIR_BUF_REGS_MIR_GLB_GROUP_MUTABLE_H__
