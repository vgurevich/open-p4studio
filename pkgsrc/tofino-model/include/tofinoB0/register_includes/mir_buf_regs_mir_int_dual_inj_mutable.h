/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MIR_BUF_REGS_MIR_INT_DUAL_INJ_MUTABLE_H__
#define __REGISTER_INCLUDES_MIR_BUF_REGS_MIR_INT_DUAL_INJ_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class MirBufRegsMirIntDualInjMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  MirBufRegsMirIntDualInjMutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, true, write_callback, read_callback, std::string("MirBufRegsMirIntDualInjMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  MirBufRegsMirIntDualInjMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "MirBufRegsMirIntDualInjMutable")
    {
    }
public:

















  uint32_t mir_dual_err_inj() { return mir_dual_err_inj_; }
  void mir_dual_err_inj(const uint32_t &v) { mir_dual_err_inj_=v; }





  uint8_t dbuf_bank_sel() { return dbuf_bank_sel_; }
  void dbuf_bank_sel(const uint8_t &v) { dbuf_bank_sel_=v; }





  uint8_t crc12_inj() { return crc12_inj_; }
  void crc12_inj(const uint8_t &v) { crc12_inj_=v; }





  uint8_t opop_inj() { return opop_inj_; }
  void opop_inj(const uint8_t &v) { opop_inj_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (mir_dual_err_inj_ & 0xffffff);
    *data |= ((dbuf_bank_sel_ & 0x1) << 24);
    *data |= ((crc12_inj_ & 0x1) << 28);
    *data |= ((opop_inj_ & 0x1) << 29);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    mir_dual_err_inj_ = (data & 0xffffff);
    dbuf_bank_sel_ = ((data >> 24) & 0x1);
    crc12_inj_ = ((data >> 28) & 0x1);
    opop_inj_ = ((data >> 29) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    mir_dual_err_inj_ = 0x0;
    dbuf_bank_sel_ = 0x0;
    crc12_inj_ = 0x0;
    opop_inj_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirBufRegsMirIntDualInjMutable") + ":\n";
    r += indent_string + "  " + std::string("mir_dual_err_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mir_dual_err_inj_) ) + "\n";
    all_zeros &= (0 == mir_dual_err_inj_);
    r += indent_string + "  " + std::string("dbuf_bank_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dbuf_bank_sel_) ) + "\n";
    all_zeros &= (0 == dbuf_bank_sel_);
    r += indent_string + "  " + std::string("crc12_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crc12_inj_) ) + "\n";
    all_zeros &= (0 == crc12_inj_);
    r += indent_string + "  " + std::string("opop_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(opop_inj_) ) + "\n";
    all_zeros &= (0 == opop_inj_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirBufRegsMirIntDualInjMutable") + ":\n";
    r += indent_string + "  " + std::string("mir_dual_err_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mir_dual_err_inj_) ) + "\n";
    all_zeros &= (0 == mir_dual_err_inj_);
    r += indent_string + "  " + std::string("dbuf_bank_sel") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(dbuf_bank_sel_) ) + "\n";
    all_zeros &= (0 == dbuf_bank_sel_);
    r += indent_string + "  " + std::string("crc12_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crc12_inj_) ) + "\n";
    all_zeros &= (0 == crc12_inj_);
    r += indent_string + "  " + std::string("opop_inj") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(opop_inj_) ) + "\n";
    all_zeros &= (0 == opop_inj_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint32_t mir_dual_err_inj_;
  uint8_t dbuf_bank_sel_;
  uint8_t crc12_inj_;
  uint8_t opop_inj_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x780000; // to get to deparser
    offset += 0x20000; // to get to mirror
    offset += 0x8000; // to get to mir_buf_regs
    offset += 0x30; // to get to mir_glb_group_mir_int_dual_inj
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_MIR_BUF_REGS_MIR_INT_DUAL_INJ_MUTABLE_H__
