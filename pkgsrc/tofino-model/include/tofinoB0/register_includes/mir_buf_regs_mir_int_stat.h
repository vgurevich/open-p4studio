/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_MIR_BUF_REGS_MIR_INT_STAT_H__
#define __REGISTER_INCLUDES_MIR_BUF_REGS_MIR_INT_STAT_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class MirBufRegsMirIntStat : public model_core::RegisterBlock<RegisterCallback> {
public:
  MirBufRegsMirIntStat(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, false, write_callback, read_callback, std::string("MirBufRegsMirIntStat")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  MirBufRegsMirIntStat(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "MirBufRegsMirIntStat")
    {
    }
public:





  uint8_t &ofifo_ecc_dual_err() { return ofifo_ecc_dual_err_; }





  uint8_t &norm_idesc_ecc_dual_err() { return norm_idesc_ecc_dual_err_; }





  uint8_t &norm_edesc_ecc_dual_err() { return norm_edesc_ecc_dual_err_; }





  uint8_t &odesc_ecc_dual_err() { return odesc_ecc_dual_err_; }





  uint8_t &packet_buf_ecc_dual_err() { return packet_buf_ecc_dual_err_; }





  uint8_t &drop_negmir_pkt() { return drop_negmir_pkt_; }





  uint8_t &drop_coal_pkt() { return drop_coal_pkt_; }





  uint8_t &ingr_session_disable() { return ingr_session_disable_; }





  uint8_t &egr_session_disable() { return egr_session_disable_; }





  uint8_t &ofifo_ecc_sngl_err() { return ofifo_ecc_sngl_err_; }





  uint8_t &norm_idesc_ecc_sngl_err() { return norm_idesc_ecc_sngl_err_; }





  uint8_t &norm_edesc_ecc_sngl_err() { return norm_edesc_ecc_sngl_err_; }





  uint8_t &odesc_ecc_sngl_err() { return odesc_ecc_sngl_err_; }





  uint8_t &packet_buf_ecc_sngl_err() { return packet_buf_ecc_sngl_err_; }





  uint8_t &cred_ovf() { return cred_ovf_; }





  uint8_t &crc12_err() { return crc12_err_; }





  uint8_t &opop_err() { return opop_err_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (ofifo_ecc_dual_err_ & 0x1);
    *data |= ((norm_idesc_ecc_dual_err_ & 0x1) << 1);
    *data |= ((norm_edesc_ecc_dual_err_ & 0x1) << 2);
    *data |= ((odesc_ecc_dual_err_ & 0x1) << 3);
    *data |= ((packet_buf_ecc_dual_err_ & 0x1) << 4);
    *data |= ((drop_negmir_pkt_ & 0x1) << 5);
    *data |= ((drop_coal_pkt_ & 0x1) << 6);
    *data |= ((ingr_session_disable_ & 0x1) << 7);
    *data |= ((egr_session_disable_ & 0x1) << 8);
    *data |= ((ofifo_ecc_sngl_err_ & 0x1) << 9);
    *data |= ((norm_idesc_ecc_sngl_err_ & 0x1) << 10);
    *data |= ((norm_edesc_ecc_sngl_err_ & 0x1) << 11);
    *data |= ((odesc_ecc_sngl_err_ & 0x1) << 12);
    *data |= ((packet_buf_ecc_sngl_err_ & 0x1) << 13);
    *data |= ((cred_ovf_ & 0x1) << 14);
    *data |= ((crc12_err_ & 0x1) << 15);
    *data |= ((opop_err_ & 0x1) << 16);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    ofifo_ecc_dual_err_ &= ~(data & 0x1);
    norm_idesc_ecc_dual_err_ &= ~((data >> 1) & 0x1);
    norm_edesc_ecc_dual_err_ &= ~((data >> 2) & 0x1);
    odesc_ecc_dual_err_ &= ~((data >> 3) & 0x1);
    packet_buf_ecc_dual_err_ &= ~((data >> 4) & 0x1);
    drop_negmir_pkt_ &= ~((data >> 5) & 0x1);
    drop_coal_pkt_ &= ~((data >> 6) & 0x1);
    ingr_session_disable_ &= ~((data >> 7) & 0x1);
    egr_session_disable_ &= ~((data >> 8) & 0x1);
    ofifo_ecc_sngl_err_ &= ~((data >> 9) & 0x1);
    norm_idesc_ecc_sngl_err_ &= ~((data >> 10) & 0x1);
    norm_edesc_ecc_sngl_err_ &= ~((data >> 11) & 0x1);
    odesc_ecc_sngl_err_ &= ~((data >> 12) & 0x1);
    packet_buf_ecc_sngl_err_ &= ~((data >> 13) & 0x1);
    cred_ovf_ &= ~((data >> 14) & 0x1);
    crc12_err_ &= ~((data >> 15) & 0x1);
    opop_err_ &= ~((data >> 16) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    ofifo_ecc_dual_err_ = 0x0;
    norm_idesc_ecc_dual_err_ = 0x0;
    norm_edesc_ecc_dual_err_ = 0x0;
    odesc_ecc_dual_err_ = 0x0;
    packet_buf_ecc_dual_err_ = 0x0;
    drop_negmir_pkt_ = 0x0;
    drop_coal_pkt_ = 0x0;
    ingr_session_disable_ = 0x0;
    egr_session_disable_ = 0x0;
    ofifo_ecc_sngl_err_ = 0x0;
    norm_idesc_ecc_sngl_err_ = 0x0;
    norm_edesc_ecc_sngl_err_ = 0x0;
    odesc_ecc_sngl_err_ = 0x0;
    packet_buf_ecc_sngl_err_ = 0x0;
    cred_ovf_ = 0x0;
    crc12_err_ = 0x0;
    opop_err_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirBufRegsMirIntStat") + ":\n";
    r += indent_string + "  " + std::string("ofifo_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ofifo_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == ofifo_ecc_dual_err_);
    r += indent_string + "  " + std::string("norm_idesc_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(norm_idesc_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == norm_idesc_ecc_dual_err_);
    r += indent_string + "  " + std::string("norm_edesc_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(norm_edesc_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == norm_edesc_ecc_dual_err_);
    r += indent_string + "  " + std::string("odesc_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(odesc_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == odesc_ecc_dual_err_);
    r += indent_string + "  " + std::string("packet_buf_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(packet_buf_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == packet_buf_ecc_dual_err_);
    r += indent_string + "  " + std::string("drop_negmir_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_negmir_pkt_) ) + "\n";
    all_zeros &= (0 == drop_negmir_pkt_);
    r += indent_string + "  " + std::string("drop_coal_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_coal_pkt_) ) + "\n";
    all_zeros &= (0 == drop_coal_pkt_);
    r += indent_string + "  " + std::string("ingr_session_disable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ingr_session_disable_) ) + "\n";
    all_zeros &= (0 == ingr_session_disable_);
    r += indent_string + "  " + std::string("egr_session_disable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr_session_disable_) ) + "\n";
    all_zeros &= (0 == egr_session_disable_);
    r += indent_string + "  " + std::string("ofifo_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ofifo_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == ofifo_ecc_sngl_err_);
    r += indent_string + "  " + std::string("norm_idesc_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(norm_idesc_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == norm_idesc_ecc_sngl_err_);
    r += indent_string + "  " + std::string("norm_edesc_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(norm_edesc_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == norm_edesc_ecc_sngl_err_);
    r += indent_string + "  " + std::string("odesc_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(odesc_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == odesc_ecc_sngl_err_);
    r += indent_string + "  " + std::string("packet_buf_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(packet_buf_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == packet_buf_ecc_sngl_err_);
    r += indent_string + "  " + std::string("cred_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred_ovf_) ) + "\n";
    all_zeros &= (0 == cred_ovf_);
    r += indent_string + "  " + std::string("crc12_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crc12_err_) ) + "\n";
    all_zeros &= (0 == crc12_err_);
    r += indent_string + "  " + std::string("opop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(opop_err_) ) + "\n";
    all_zeros &= (0 == opop_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("MirBufRegsMirIntStat") + ":\n";
    r += indent_string + "  " + std::string("ofifo_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ofifo_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == ofifo_ecc_dual_err_);
    r += indent_string + "  " + std::string("norm_idesc_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(norm_idesc_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == norm_idesc_ecc_dual_err_);
    r += indent_string + "  " + std::string("norm_edesc_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(norm_edesc_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == norm_edesc_ecc_dual_err_);
    r += indent_string + "  " + std::string("odesc_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(odesc_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == odesc_ecc_dual_err_);
    r += indent_string + "  " + std::string("packet_buf_ecc_dual_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(packet_buf_ecc_dual_err_) ) + "\n";
    all_zeros &= (0 == packet_buf_ecc_dual_err_);
    r += indent_string + "  " + std::string("drop_negmir_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_negmir_pkt_) ) + "\n";
    all_zeros &= (0 == drop_negmir_pkt_);
    r += indent_string + "  " + std::string("drop_coal_pkt") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(drop_coal_pkt_) ) + "\n";
    all_zeros &= (0 == drop_coal_pkt_);
    r += indent_string + "  " + std::string("ingr_session_disable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ingr_session_disable_) ) + "\n";
    all_zeros &= (0 == ingr_session_disable_);
    r += indent_string + "  " + std::string("egr_session_disable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(egr_session_disable_) ) + "\n";
    all_zeros &= (0 == egr_session_disable_);
    r += indent_string + "  " + std::string("ofifo_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ofifo_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == ofifo_ecc_sngl_err_);
    r += indent_string + "  " + std::string("norm_idesc_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(norm_idesc_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == norm_idesc_ecc_sngl_err_);
    r += indent_string + "  " + std::string("norm_edesc_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(norm_edesc_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == norm_edesc_ecc_sngl_err_);
    r += indent_string + "  " + std::string("odesc_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(odesc_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == odesc_ecc_sngl_err_);
    r += indent_string + "  " + std::string("packet_buf_ecc_sngl_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(packet_buf_ecc_sngl_err_) ) + "\n";
    all_zeros &= (0 == packet_buf_ecc_sngl_err_);
    r += indent_string + "  " + std::string("cred_ovf") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(cred_ovf_) ) + "\n";
    all_zeros &= (0 == cred_ovf_);
    r += indent_string + "  " + std::string("crc12_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(crc12_err_) ) + "\n";
    all_zeros &= (0 == crc12_err_);
    r += indent_string + "  " + std::string("opop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(opop_err_) ) + "\n";
    all_zeros &= (0 == opop_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t ofifo_ecc_dual_err_;
  uint8_t norm_idesc_ecc_dual_err_;
  uint8_t norm_edesc_ecc_dual_err_;
  uint8_t odesc_ecc_dual_err_;
  uint8_t packet_buf_ecc_dual_err_;
  uint8_t drop_negmir_pkt_;
  uint8_t drop_coal_pkt_;
  uint8_t ingr_session_disable_;
  uint8_t egr_session_disable_;
  uint8_t ofifo_ecc_sngl_err_;
  uint8_t norm_idesc_ecc_sngl_err_;
  uint8_t norm_edesc_ecc_sngl_err_;
  uint8_t odesc_ecc_sngl_err_;
  uint8_t packet_buf_ecc_sngl_err_;
  uint8_t cred_ovf_;
  uint8_t crc12_err_;
  uint8_t opop_err_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x780000; // to get to deparser
    offset += 0x20000; // to get to mirror
    offset += 0x8000; // to get to mir_buf_regs
    offset += 0x24; // to get to mir_glb_group_mir_int_stat
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_MIR_BUF_REGS_MIR_INT_STAT_H__
