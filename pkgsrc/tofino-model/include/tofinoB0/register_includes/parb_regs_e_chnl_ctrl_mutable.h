/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PARB_REGS_E_CHNL_CTRL_MUTABLE_H__
#define __REGISTER_INCLUDES_PARB_REGS_E_CHNL_CTRL_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class ParbRegsEChnlCtrlMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  ParbRegsEChnlCtrlMutable(
      int chipNumber, int index_pipe_addrmap, int index_parb_regs_e_chnl_ctrl, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_parb_regs_e_chnl_ctrl), 4, true, write_callback, read_callback, std::string("ParbRegsEChnlCtrlMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_parb_regs_e_chnl_ctrl))
    {
    }
  ParbRegsEChnlCtrlMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "ParbRegsEChnlCtrlMutable")
    {
    }
public:






  uint8_t prtchl_norm_cred() { return prtchl_norm_cred_; }
  void prtchl_norm_cred(const uint8_t &v) { prtchl_norm_cred_=v; }






  uint8_t prtchl_ena() { return prtchl_ena_; }
  void prtchl_ena(const uint8_t &v) { prtchl_ena_=v; }






  uint8_t prtchl_hipri() { return prtchl_hipri_; }
  void prtchl_hipri(const uint8_t &v) { prtchl_hipri_=v; }






  uint8_t prtchl_norm_dist() { return prtchl_norm_dist_; }
  void prtchl_norm_dist(const uint8_t &v) { prtchl_norm_dist_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = prtchl_norm_cred_;
    *data |= ((prtchl_ena_ & 0x1) << 16);
    *data |= ((prtchl_hipri_ & 0x1) << 20);
    *data |= ((prtchl_norm_dist_ & 0xf) << 24);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    prtchl_norm_cred_ = data;
    prtchl_ena_ = ((data >> 16) & 0x1);
    prtchl_hipri_ = ((data >> 20) & 0x1);
    prtchl_norm_dist_ = ((data >> 24) & 0xf);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    prtchl_norm_cred_ = 0x0;
    prtchl_ena_ = 0x0;
    prtchl_hipri_ = 0x0;
    prtchl_norm_dist_ = 0x2;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("ParbRegsEChnlCtrlMutable") + ":\n";
    r += indent_string + "  " + std::string("prtchl_norm_cred") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prtchl_norm_cred_) ) + "\n";
    all_zeros &= (0 == prtchl_norm_cred_);
    r += indent_string + "  " + std::string("prtchl_ena") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prtchl_ena_) ) + "\n";
    all_zeros &= (0 == prtchl_ena_);
    r += indent_string + "  " + std::string("prtchl_hipri") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prtchl_hipri_) ) + "\n";
    all_zeros &= (0 == prtchl_hipri_);
    r += indent_string + "  " + std::string("prtchl_norm_dist") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prtchl_norm_dist_) ) + "\n";
    all_zeros &= (0 == prtchl_norm_dist_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("ParbRegsEChnlCtrlMutable") + ":\n";
    r += indent_string + "  " + std::string("prtchl_norm_cred") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prtchl_norm_cred_) ) + "\n";
    all_zeros &= (0 == prtchl_norm_cred_);
    r += indent_string + "  " + std::string("prtchl_ena") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prtchl_ena_) ) + "\n";
    all_zeros &= (0 == prtchl_ena_);
    r += indent_string + "  " + std::string("prtchl_hipri") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prtchl_hipri_) ) + "\n";
    all_zeros &= (0 == prtchl_hipri_);
    r += indent_string + "  " + std::string("prtchl_norm_dist") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(prtchl_norm_dist_) ) + "\n";
    all_zeros &= (0 == prtchl_norm_dist_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t prtchl_norm_cred_;
  uint8_t prtchl_ena_;
  uint8_t prtchl_hipri_;
  uint8_t prtchl_norm_dist_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_parb_regs_e_chnl_ctrl
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    offset += 0x30000; // to get to parb_reg
    offset += 0x400; // to get to parb_group_e_chnl_ctrl
    assert(index_parb_regs_e_chnl_ctrl < 72);
    offset += index_parb_regs_e_chnl_ctrl * 0x4; // parb_regs_e_chnl_ctrl[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_PARB_REGS_E_CHNL_CTRL_MUTABLE_H__
