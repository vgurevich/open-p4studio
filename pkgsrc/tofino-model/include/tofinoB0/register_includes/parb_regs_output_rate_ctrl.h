/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PARB_REGS_OUTPUT_RATE_CTRL_H__
#define __REGISTER_INCLUDES_PARB_REGS_OUTPUT_RATE_CTRL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class ParbRegsOutputRateCtrl : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum ParbRegsParbGroupEnum {
    kParbGroupEOutputRateCtrl,
    kParbGroupIOutputRateCtrl
  };
public:
  ParbRegsOutputRateCtrl(
      int chipNumber, int index_pipe_addrmap, ParbRegsParbGroupEnum selector_parb_regs_parb_group, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, selector_parb_regs_parb_group), 4, false, write_callback, read_callback, std::string("ParbRegsOutputRateCtrl")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(selector_parb_regs_parb_group))
    {
    }
  ParbRegsOutputRateCtrl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "ParbRegsOutputRateCtrl")
    {
    }
public:





  uint8_t &ratectrl_inc() { return ratectrl_inc_; }





  uint8_t &ratectrl_dec() { return ratectrl_dec_; }





  uint16_t &ratectrl_max() { return ratectrl_max_; }






  uint8_t &ratectrl_ena() { return ratectrl_ena_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = ratectrl_inc_;
    *data |= (ratectrl_dec_ << 8);
    *data |= ((ratectrl_max_ & 0x7fff) << 16);
    *data |= ((ratectrl_ena_ & 0x1) << 31);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    ratectrl_inc_ = data;
    ratectrl_dec_ = (data >> 8);
    ratectrl_max_ = ((data >> 16) & 0x7fff);
    ratectrl_ena_ = ((data >> 31) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    ratectrl_inc_ = 0x0;
    ratectrl_dec_ = 0x0;
    ratectrl_max_ = 0x0;
    ratectrl_ena_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("ParbRegsOutputRateCtrl") + ":\n";
    r += indent_string + "  " + std::string("ratectrl_inc") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ratectrl_inc_) ) + "\n";
    all_zeros &= (0 == ratectrl_inc_);
    r += indent_string + "  " + std::string("ratectrl_dec") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ratectrl_dec_) ) + "\n";
    all_zeros &= (0 == ratectrl_dec_);
    r += indent_string + "  " + std::string("ratectrl_max") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ratectrl_max_) ) + "\n";
    all_zeros &= (0 == ratectrl_max_);
    r += indent_string + "  " + std::string("ratectrl_ena") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ratectrl_ena_) ) + "\n";
    all_zeros &= (0 == ratectrl_ena_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("ParbRegsOutputRateCtrl") + ":\n";
    r += indent_string + "  " + std::string("ratectrl_inc") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ratectrl_inc_) ) + "\n";
    all_zeros &= (0 == ratectrl_inc_);
    r += indent_string + "  " + std::string("ratectrl_dec") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ratectrl_dec_) ) + "\n";
    all_zeros &= (0 == ratectrl_dec_);
    r += indent_string + "  " + std::string("ratectrl_max") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ratectrl_max_) ) + "\n";
    all_zeros &= (0 == ratectrl_max_);
    r += indent_string + "  " + std::string("ratectrl_ena") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ratectrl_ena_) ) + "\n";
    all_zeros &= (0 == ratectrl_ena_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t ratectrl_inc_;
  uint8_t ratectrl_dec_;
  uint16_t ratectrl_max_;
  uint8_t ratectrl_ena_;
private:
  static int StartOffset(
      int index_pipe_addrmap, ParbRegsParbGroupEnum selector_parb_regs_parb_group
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    offset += 0x30000; // to get to parb_reg
    switch (selector_parb_regs_parb_group) {
      case kParbGroupEOutputRateCtrl:
        offset += 0x8; // to get to parb_group_e_output_rate_ctrl
        break;
      case kParbGroupIOutputRateCtrl:
        offset += 0x4; // to get to parb_group_i_output_rate_ctrl
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_PARB_REGS_OUTPUT_RATE_CTRL_H__
