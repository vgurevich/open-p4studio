/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PARB_REGS_PARB_GROUP_MUTABLE_H__
#define __REGISTER_INCLUDES_PARB_REGS_PARB_GROUP_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "parb_regs_bubble_count_mutable.h"
#include "parb_regs_cong_phv_count_mutable.h"
#include "parb_regs_cong_slot_limiter_mutable.h"
#include "parb_regs_dprs_input_fifo_count_mutable.h"
#include "parb_regs_dprs_input_fifo_max_mutable.h"
#include "parb_regs_e_chnl_ctrl_mutable.h"
#include "parb_regs_hipri_phv_count_mutable.h"
#include "parb_regs_i_chnl_ctrl_mutable.h"
#include "parb_regs_mau_micro_update_mutable.h"
#include "parb_regs_output_rate_ctrl_mutable.h"
#include "parb_regs_pfc0_phv_count_mutable.h"
#include "parb_regs_pfc1_phv_count_mutable.h"
#include "parb_regs_pfc2_phv_count_mutable.h"
#include "parb_regs_pfc3_phv_count_mutable.h"
#include "parb_regs_pfc4_phv_count_mutable.h"
#include "parb_regs_pfc5_phv_count_mutable.h"
#include "parb_regs_pfc6_phv_count_mutable.h"
#include "parb_regs_pfc7_phv_count_mutable.h"
#include "parb_regs_phv_count_mutable.h"
#include "parb_regs_port_debug_mutable.h"

namespace tofinoB0 {
  namespace register_classes {

class ParbRegsParbGroupMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  ParbRegsParbGroupMutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 1608, true, write_callback, read_callback, std::string("ParbRegsParbGroupMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  ParbRegsParbGroupMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "ParbRegsParbGroupMutable")
    {
    }
public:





  ParbRegsCongSlotLimiterMutable &parb_group_cong_slot_limiter() { return parb_group_cong_slot_limiter_; }





  ParbRegsOutputRateCtrlMutable &parb_group_i_output_rate_ctrl() { return parb_group_i_output_rate_ctrl_; }





  ParbRegsOutputRateCtrlMutable &parb_group_e_output_rate_ctrl() { return parb_group_e_output_rate_ctrl_; }





  ParbRegsHipriPhvCountMutable &parb_group_i_hipri_phv_count() { return parb_group_i_hipri_phv_count_; }





  ParbRegsCongPhvCountMutable &parb_group_i_cong_phv_count() { return parb_group_i_cong_phv_count_; }





  ParbRegsPfc0PhvCountMutable &parb_group_i_pfc0_phv_count() { return parb_group_i_pfc0_phv_count_; }





  ParbRegsPfc1PhvCountMutable &parb_group_i_pfc1_phv_count() { return parb_group_i_pfc1_phv_count_; }





  ParbRegsPfc2PhvCountMutable &parb_group_i_pfc2_phv_count() { return parb_group_i_pfc2_phv_count_; }





  ParbRegsPfc3PhvCountMutable &parb_group_i_pfc3_phv_count() { return parb_group_i_pfc3_phv_count_; }





  ParbRegsPfc4PhvCountMutable &parb_group_i_pfc4_phv_count() { return parb_group_i_pfc4_phv_count_; }





  ParbRegsPfc5PhvCountMutable &parb_group_i_pfc5_phv_count() { return parb_group_i_pfc5_phv_count_; }





  ParbRegsPfc6PhvCountMutable &parb_group_i_pfc6_phv_count() { return parb_group_i_pfc6_phv_count_; }





  ParbRegsPfc7PhvCountMutable &parb_group_i_pfc7_phv_count() { return parb_group_i_pfc7_phv_count_; }





  ParbRegsPfc0PhvCountMutable &parb_group_e_pfc0_phv_count() { return parb_group_e_pfc0_phv_count_; }





  ParbRegsPfc1PhvCountMutable &parb_group_e_pfc1_phv_count() { return parb_group_e_pfc1_phv_count_; }





  ParbRegsPfc2PhvCountMutable &parb_group_e_pfc2_phv_count() { return parb_group_e_pfc2_phv_count_; }





  ParbRegsPfc3PhvCountMutable &parb_group_e_pfc3_phv_count() { return parb_group_e_pfc3_phv_count_; }





  ParbRegsPfc4PhvCountMutable &parb_group_e_pfc4_phv_count() { return parb_group_e_pfc4_phv_count_; }





  ParbRegsPfc5PhvCountMutable &parb_group_e_pfc5_phv_count() { return parb_group_e_pfc5_phv_count_; }





  ParbRegsPfc6PhvCountMutable &parb_group_e_pfc6_phv_count() { return parb_group_e_pfc6_phv_count_; }





  ParbRegsPfc7PhvCountMutable &parb_group_e_pfc7_phv_count() { return parb_group_e_pfc7_phv_count_; }





  ParbRegsHipriPhvCountMutable &parb_group_e_hipri_phv_count() { return parb_group_e_hipri_phv_count_; }





  ParbRegsBubbleCountMutable &parb_group_i_bubble_count() { return parb_group_i_bubble_count_; }





  ParbRegsBubbleCountMutable &parb_group_e_bubble_count() { return parb_group_e_bubble_count_; }





  ParbRegsMauMicroUpdateMutable &parb_group_mau_micro_update() { return parb_group_mau_micro_update_; }





  ParbRegsDprsInputFifoCountMutable &parb_group_dprs_input_fifo_count() { return parb_group_dprs_input_fifo_count_; }





  ParbRegsDprsInputFifoMaxMutable &parb_group_dprs_input_fifo_max() { return parb_group_dprs_input_fifo_max_; }





  ParbRegsPhvCountMutable &parb_group_i_phv_count() { return parb_group_i_phv_count_; }





  ParbRegsPhvCountMutable &parb_group_i_eop_count() { return parb_group_i_eop_count_; }





  ParbRegsPhvCountMutable &parb_group_e_phv_count() { return parb_group_e_phv_count_; }





  ParbRegsPhvCountMutable &parb_group_e_eop_count() { return parb_group_e_eop_count_; }





  ParbRegsPhvCountMutable &parb_group_i_norm_phv_count() { return parb_group_i_norm_phv_count_; }





  ParbRegsPhvCountMutable &parb_group_i_norm_eop_count() { return parb_group_i_norm_eop_count_; }





  ParbRegsPhvCountMutable &parb_group_i_resub_phv_count() { return parb_group_i_resub_phv_count_; }





  ParbRegsPhvCountMutable &parb_group_i_resub_eop_count() { return parb_group_i_resub_eop_count_; }







  ParbRegsIChnlCtrlMutable &parb_group_i_chnl_ctrl(int j0) { return parb_group_i_chnl_ctrl_[j0]; }







  ParbRegsEChnlCtrlMutable &parb_group_e_chnl_ctrl(int j0) { return parb_group_e_chnl_ctrl_[j0]; }







  ParbRegsPortDebugMutable &parb_group_i_port_dbg(int j0) { return parb_group_i_port_dbg_[j0]; }







  ParbRegsPortDebugMutable &parb_group_e_port_dbg(int j0) { return parb_group_e_port_dbg_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      parb_group_cong_slot_limiter_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      parb_group_i_output_rate_ctrl_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      parb_group_e_output_rate_ctrl_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      parb_group_i_hipri_phv_count_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x20) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      parb_group_i_cong_phv_count_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      parb_group_i_pfc0_phv_count_.read( offset, data );
    }
    else if (offset >= 0x28 && offset < 0x30) {
      offset -= 0x28;
      if (read_callback_) read_callback_();
      parb_group_i_pfc1_phv_count_.read( offset, data );
    }
    else if (offset >= 0x30 && offset < 0x38) {
      offset -= 0x30;
      if (read_callback_) read_callback_();
      parb_group_i_pfc2_phv_count_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x40) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      parb_group_i_pfc3_phv_count_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      parb_group_i_pfc4_phv_count_.read( offset, data );
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      if (read_callback_) read_callback_();
      parb_group_i_pfc5_phv_count_.read( offset, data );
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      if (read_callback_) read_callback_();
      parb_group_i_pfc6_phv_count_.read( offset, data );
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      if (read_callback_) read_callback_();
      parb_group_i_pfc7_phv_count_.read( offset, data );
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      if (read_callback_) read_callback_();
      parb_group_e_pfc0_phv_count_.read( offset, data );
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      if (read_callback_) read_callback_();
      parb_group_e_pfc1_phv_count_.read( offset, data );
    }
    else if (offset >= 0x70 && offset < 0x78) {
      offset -= 0x70;
      if (read_callback_) read_callback_();
      parb_group_e_pfc2_phv_count_.read( offset, data );
    }
    else if (offset >= 0x78 && offset < 0x80) {
      offset -= 0x78;
      if (read_callback_) read_callback_();
      parb_group_e_pfc3_phv_count_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0x88) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      parb_group_e_pfc4_phv_count_.read( offset, data );
    }
    else if (offset >= 0x88 && offset < 0x90) {
      offset -= 0x88;
      if (read_callback_) read_callback_();
      parb_group_e_pfc5_phv_count_.read( offset, data );
    }
    else if (offset >= 0x90 && offset < 0x98) {
      offset -= 0x90;
      if (read_callback_) read_callback_();
      parb_group_e_pfc6_phv_count_.read( offset, data );
    }
    else if (offset >= 0x98 && offset < 0xa0) {
      offset -= 0x98;
      if (read_callback_) read_callback_();
      parb_group_e_pfc7_phv_count_.read( offset, data );
    }
    else if (offset >= 0xa0 && offset < 0xa8) {
      offset -= 0xa0;
      if (read_callback_) read_callback_();
      parb_group_e_hipri_phv_count_.read( offset, data );
    }
    else if (offset >= 0xa8 && offset < 0xb0) {
      offset -= 0xa8;
      if (read_callback_) read_callback_();
      parb_group_i_bubble_count_.read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xb8) {
      offset -= 0xb0;
      if (read_callback_) read_callback_();
      parb_group_e_bubble_count_.read( offset, data );
    }
    else if (offset >= 0xb8 && offset < 0xbc) {
      offset -= 0xb8;
      if (read_callback_) read_callback_();
      parb_group_mau_micro_update_.read( offset, data );
    }
    else if (offset >= 0xbc && offset < 0xc0) {
      offset -= 0xbc;
      if (read_callback_) read_callback_();
      parb_group_dprs_input_fifo_count_.read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xc4) {
      offset -= 0xc0;
      if (read_callback_) read_callback_();
      parb_group_dprs_input_fifo_max_.read( offset, data );
    }
    else if (offset >= 0xc8 && offset < 0xd0) {
      offset -= 0xc8;
      if (read_callback_) read_callback_();
      parb_group_i_phv_count_.read( offset, data );
    }
    else if (offset >= 0xd0 && offset < 0xd8) {
      offset -= 0xd0;
      if (read_callback_) read_callback_();
      parb_group_i_eop_count_.read( offset, data );
    }
    else if (offset >= 0xd8 && offset < 0xe0) {
      offset -= 0xd8;
      if (read_callback_) read_callback_();
      parb_group_e_phv_count_.read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0xe8) {
      offset -= 0xe0;
      if (read_callback_) read_callback_();
      parb_group_e_eop_count_.read( offset, data );
    }
    else if (offset >= 0xe8 && offset < 0xf0) {
      offset -= 0xe8;
      if (read_callback_) read_callback_();
      parb_group_i_norm_phv_count_.read( offset, data );
    }
    else if (offset >= 0xf0 && offset < 0xf8) {
      offset -= 0xf0;
      if (read_callback_) read_callback_();
      parb_group_i_norm_eop_count_.read( offset, data );
    }
    else if (offset >= 0xf8 && offset < 0x100) {
      offset -= 0xf8;
      if (read_callback_) read_callback_();
      parb_group_i_resub_phv_count_.read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x108) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      parb_group_i_resub_eop_count_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x320) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      parb_group_i_chnl_ctrl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x400 && offset < 0x520) {
      offset -= 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      parb_group_e_chnl_ctrl_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x580 && offset < 0x5c8) {
      offset -= 0x580;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      parb_group_i_port_dbg_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x600 && offset < 0x648) {
      offset -= 0x600;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      parb_group_e_port_dbg_[ i0 ].read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      parb_group_cong_slot_limiter_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      parb_group_i_output_rate_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      parb_group_e_output_rate_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      parb_group_i_hipri_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x20) {
      offset -= 0x18;
      parb_group_i_cong_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      parb_group_i_pfc0_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x30) {
      offset -= 0x28;
      parb_group_i_pfc1_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30 && offset < 0x38) {
      offset -= 0x30;
      parb_group_i_pfc2_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x40) {
      offset -= 0x38;
      parb_group_i_pfc3_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      parb_group_i_pfc4_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      parb_group_i_pfc5_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      parb_group_i_pfc6_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      parb_group_i_pfc7_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      parb_group_e_pfc0_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      parb_group_e_pfc1_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x70 && offset < 0x78) {
      offset -= 0x70;
      parb_group_e_pfc2_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x78 && offset < 0x80) {
      offset -= 0x78;
      parb_group_e_pfc3_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0x88) {
      offset -= 0x80;
      parb_group_e_pfc4_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x88 && offset < 0x90) {
      offset -= 0x88;
      parb_group_e_pfc5_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x90 && offset < 0x98) {
      offset -= 0x90;
      parb_group_e_pfc6_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x98 && offset < 0xa0) {
      offset -= 0x98;
      parb_group_e_pfc7_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa0 && offset < 0xa8) {
      offset -= 0xa0;
      parb_group_e_hipri_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xa8 && offset < 0xb0) {
      offset -= 0xa8;
      parb_group_i_bubble_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xb8) {
      offset -= 0xb0;
      parb_group_e_bubble_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb8 && offset < 0xbc) {
      offset -= 0xb8;
      parb_group_mau_micro_update_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xbc && offset < 0xc0) {
      offset -= 0xbc;
      parb_group_dprs_input_fifo_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xc4) {
      offset -= 0xc0;
      parb_group_dprs_input_fifo_max_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc8 && offset < 0xd0) {
      offset -= 0xc8;
      parb_group_i_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd0 && offset < 0xd8) {
      offset -= 0xd0;
      parb_group_i_eop_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xd8 && offset < 0xe0) {
      offset -= 0xd8;
      parb_group_e_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0xe8) {
      offset -= 0xe0;
      parb_group_e_eop_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe8 && offset < 0xf0) {
      offset -= 0xe8;
      parb_group_i_norm_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf0 && offset < 0xf8) {
      offset -= 0xf0;
      parb_group_i_norm_eop_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xf8 && offset < 0x100) {
      offset -= 0xf8;
      parb_group_i_resub_phv_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x108) {
      offset -= 0x100;
      parb_group_i_resub_eop_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x320) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      parb_group_i_chnl_ctrl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400 && offset < 0x520) {
      offset -= 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      parb_group_e_chnl_ctrl_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x580 && offset < 0x5c8) {
      offset -= 0x580;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      parb_group_i_port_dbg_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x600 && offset < 0x648) {
      offset -= 0x600;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      parb_group_e_port_dbg_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    parb_group_cong_slot_limiter_.reset();
    parb_group_i_output_rate_ctrl_.reset();
    parb_group_e_output_rate_ctrl_.reset();
    parb_group_i_hipri_phv_count_.reset();
    parb_group_i_cong_phv_count_.reset();
    parb_group_i_pfc0_phv_count_.reset();
    parb_group_i_pfc1_phv_count_.reset();
    parb_group_i_pfc2_phv_count_.reset();
    parb_group_i_pfc3_phv_count_.reset();
    parb_group_i_pfc4_phv_count_.reset();
    parb_group_i_pfc5_phv_count_.reset();
    parb_group_i_pfc6_phv_count_.reset();
    parb_group_i_pfc7_phv_count_.reset();
    parb_group_e_pfc0_phv_count_.reset();
    parb_group_e_pfc1_phv_count_.reset();
    parb_group_e_pfc2_phv_count_.reset();
    parb_group_e_pfc3_phv_count_.reset();
    parb_group_e_pfc4_phv_count_.reset();
    parb_group_e_pfc5_phv_count_.reset();
    parb_group_e_pfc6_phv_count_.reset();
    parb_group_e_pfc7_phv_count_.reset();
    parb_group_e_hipri_phv_count_.reset();
    parb_group_i_bubble_count_.reset();
    parb_group_e_bubble_count_.reset();
    parb_group_mau_micro_update_.reset();
    parb_group_dprs_input_fifo_count_.reset();
    parb_group_dprs_input_fifo_max_.reset();
    parb_group_i_phv_count_.reset();
    parb_group_i_eop_count_.reset();
    parb_group_e_phv_count_.reset();
    parb_group_e_eop_count_.reset();
    parb_group_i_norm_phv_count_.reset();
    parb_group_i_norm_eop_count_.reset();
    parb_group_i_resub_phv_count_.reset();
    parb_group_i_resub_eop_count_.reset();
    for (auto &f0 : parb_group_i_chnl_ctrl_) {
      f0.reset();
    }
    for (auto &f0 : parb_group_e_chnl_ctrl_) {
      f0.reset();
    }
    for (auto &f0 : parb_group_i_port_dbg_) {
      f0.reset();
    }
    for (auto &f0 : parb_group_e_port_dbg_) {
      f0.reset();
    }
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += parb_group_cong_slot_limiter_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += parb_group_i_output_rate_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += parb_group_e_output_rate_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x18) {
      offset -= 0x10;
      r += parb_group_i_hipri_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x20) {
      offset -= 0x18;
      r += parb_group_i_cong_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x28) {
      offset -= 0x20;
      r += parb_group_i_pfc0_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x28 && offset < 0x30) {
      offset -= 0x28;
      r += parb_group_i_pfc1_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30 && offset < 0x38) {
      offset -= 0x30;
      r += parb_group_i_pfc2_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x40) {
      offset -= 0x38;
      r += parb_group_i_pfc3_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x48) {
      offset -= 0x40;
      r += parb_group_i_pfc4_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x48 && offset < 0x50) {
      offset -= 0x48;
      r += parb_group_i_pfc5_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x50 && offset < 0x58) {
      offset -= 0x50;
      r += parb_group_i_pfc6_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x58 && offset < 0x60) {
      offset -= 0x58;
      r += parb_group_i_pfc7_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x60 && offset < 0x68) {
      offset -= 0x60;
      r += parb_group_e_pfc0_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x68 && offset < 0x70) {
      offset -= 0x68;
      r += parb_group_e_pfc1_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x70 && offset < 0x78) {
      offset -= 0x70;
      r += parb_group_e_pfc2_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x78 && offset < 0x80) {
      offset -= 0x78;
      r += parb_group_e_pfc3_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0x88) {
      offset -= 0x80;
      r += parb_group_e_pfc4_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x88 && offset < 0x90) {
      offset -= 0x88;
      r += parb_group_e_pfc5_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x90 && offset < 0x98) {
      offset -= 0x90;
      r += parb_group_e_pfc6_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x98 && offset < 0xa0) {
      offset -= 0x98;
      r += parb_group_e_pfc7_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa0 && offset < 0xa8) {
      offset -= 0xa0;
      r += parb_group_e_hipri_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xa8 && offset < 0xb0) {
      offset -= 0xa8;
      r += parb_group_i_bubble_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xb8) {
      offset -= 0xb0;
      r += parb_group_e_bubble_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb8 && offset < 0xbc) {
      offset -= 0xb8;
      r += parb_group_mau_micro_update_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xbc && offset < 0xc0) {
      offset -= 0xbc;
      r += parb_group_dprs_input_fifo_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xc4) {
      offset -= 0xc0;
      r += parb_group_dprs_input_fifo_max_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc8 && offset < 0xd0) {
      offset -= 0xc8;
      r += parb_group_i_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd0 && offset < 0xd8) {
      offset -= 0xd0;
      r += parb_group_i_eop_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xd8 && offset < 0xe0) {
      offset -= 0xd8;
      r += parb_group_e_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0xe8) {
      offset -= 0xe0;
      r += parb_group_e_eop_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe8 && offset < 0xf0) {
      offset -= 0xe8;
      r += parb_group_i_norm_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf0 && offset < 0xf8) {
      offset -= 0xf0;
      r += parb_group_i_norm_eop_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xf8 && offset < 0x100) {
      offset -= 0xf8;
      r += parb_group_i_resub_phv_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x108) {
      offset -= 0x100;
      r += parb_group_i_resub_eop_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x320) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += parb_group_i_chnl_ctrl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400 && offset < 0x520) {
      offset -= 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += parb_group_e_chnl_ctrl_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x580 && offset < 0x5c8) {
      offset -= 0x580;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += parb_group_i_port_dbg_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x600 && offset < 0x648) {
      offset -= 0x600;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += parb_group_e_port_dbg_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += parb_group_cong_slot_limiter_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_output_rate_ctrl_.to_string(print_zeros,indent_string) ;
    r += parb_group_e_output_rate_ctrl_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_hipri_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_cong_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_pfc0_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_pfc1_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_pfc2_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_pfc3_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_pfc4_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_pfc5_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_pfc6_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_pfc7_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_e_pfc0_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_e_pfc1_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_e_pfc2_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_e_pfc3_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_e_pfc4_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_e_pfc5_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_e_pfc6_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_e_pfc7_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_e_hipri_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_bubble_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_e_bubble_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_mau_micro_update_.to_string(print_zeros,indent_string) ;
    r += parb_group_dprs_input_fifo_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_dprs_input_fifo_max_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_eop_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_e_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_e_eop_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_norm_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_norm_eop_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_resub_phv_count_.to_string(print_zeros,indent_string) ;
    r += parb_group_i_resub_eop_count_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<72;++a0) {
      r += parb_group_i_chnl_ctrl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<72;++a0) {
      r += parb_group_e_chnl_ctrl_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<18;++a0) {
      r += parb_group_i_port_dbg_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<18;++a0) {
      r += parb_group_e_port_dbg_[a0].to_string(print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  ParbRegsCongSlotLimiterMutable parb_group_cong_slot_limiter_;
  ParbRegsOutputRateCtrlMutable parb_group_i_output_rate_ctrl_;
  ParbRegsOutputRateCtrlMutable parb_group_e_output_rate_ctrl_;
  ParbRegsHipriPhvCountMutable parb_group_i_hipri_phv_count_;
  ParbRegsCongPhvCountMutable parb_group_i_cong_phv_count_;
  ParbRegsPfc0PhvCountMutable parb_group_i_pfc0_phv_count_;
  ParbRegsPfc1PhvCountMutable parb_group_i_pfc1_phv_count_;
  ParbRegsPfc2PhvCountMutable parb_group_i_pfc2_phv_count_;
  ParbRegsPfc3PhvCountMutable parb_group_i_pfc3_phv_count_;
  ParbRegsPfc4PhvCountMutable parb_group_i_pfc4_phv_count_;
  ParbRegsPfc5PhvCountMutable parb_group_i_pfc5_phv_count_;
  ParbRegsPfc6PhvCountMutable parb_group_i_pfc6_phv_count_;
  ParbRegsPfc7PhvCountMutable parb_group_i_pfc7_phv_count_;
  ParbRegsPfc0PhvCountMutable parb_group_e_pfc0_phv_count_;
  ParbRegsPfc1PhvCountMutable parb_group_e_pfc1_phv_count_;
  ParbRegsPfc2PhvCountMutable parb_group_e_pfc2_phv_count_;
  ParbRegsPfc3PhvCountMutable parb_group_e_pfc3_phv_count_;
  ParbRegsPfc4PhvCountMutable parb_group_e_pfc4_phv_count_;
  ParbRegsPfc5PhvCountMutable parb_group_e_pfc5_phv_count_;
  ParbRegsPfc6PhvCountMutable parb_group_e_pfc6_phv_count_;
  ParbRegsPfc7PhvCountMutable parb_group_e_pfc7_phv_count_;
  ParbRegsHipriPhvCountMutable parb_group_e_hipri_phv_count_;
  ParbRegsBubbleCountMutable parb_group_i_bubble_count_;
  ParbRegsBubbleCountMutable parb_group_e_bubble_count_;
  ParbRegsMauMicroUpdateMutable parb_group_mau_micro_update_;
  ParbRegsDprsInputFifoCountMutable parb_group_dprs_input_fifo_count_;
  ParbRegsDprsInputFifoMaxMutable parb_group_dprs_input_fifo_max_;
  ParbRegsPhvCountMutable parb_group_i_phv_count_;
  ParbRegsPhvCountMutable parb_group_i_eop_count_;
  ParbRegsPhvCountMutable parb_group_e_phv_count_;
  ParbRegsPhvCountMutable parb_group_e_eop_count_;
  ParbRegsPhvCountMutable parb_group_i_norm_phv_count_;
  ParbRegsPhvCountMutable parb_group_i_norm_eop_count_;
  ParbRegsPhvCountMutable parb_group_i_resub_phv_count_;
  ParbRegsPhvCountMutable parb_group_i_resub_eop_count_;
  std::array< ParbRegsIChnlCtrlMutable, 72 > parb_group_i_chnl_ctrl_;
  std::array< ParbRegsEChnlCtrlMutable, 72 > parb_group_e_chnl_ctrl_;
  std::array< ParbRegsPortDebugMutable, 18 > parb_group_i_port_dbg_;
  std::array< ParbRegsPortDebugMutable, 18 > parb_group_e_port_dbg_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    offset += 0x30000; // to get to parb_reg
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_PARB_REGS_PARB_GROUP_MUTABLE_H__
