/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PARB_REGS_PORT_DEBUG_H__
#define __REGISTER_INCLUDES_PARB_REGS_PORT_DEBUG_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class ParbRegsPortDebug : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum ParbRegsParbGroupEnum {
    kParbGroupEPortDbg,
    kParbGroupIPortDbg
  };
public:
  ParbRegsPortDebug(
      int chipNumber, int index_pipe_addrmap, ParbRegsParbGroupEnum selector_parb_regs_parb_group, int index_parb_regs_port_debug, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, selector_parb_regs_parb_group, index_parb_regs_port_debug), 4, false, write_callback, read_callback, std::string("ParbRegsPortDebug")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(selector_parb_regs_parb_group) + "," + boost::lexical_cast<std::string>(index_parb_regs_port_debug))
    {
    }
  ParbRegsPortDebug(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "ParbRegsPortDebug")
    {
    }
public:













  uint8_t &chnl0_sts() { return chnl0_sts_; }













  uint8_t &chnl1_sts() { return chnl1_sts_; }













  uint8_t &chnl2_sts() { return chnl2_sts_; }













  uint8_t &chnl3_sts() { return chnl3_sts_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = chnl0_sts_;
    *data |= (chnl1_sts_ << 8);
    *data |= (chnl2_sts_ << 16);
    *data |= (chnl3_sts_ << 24);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    chnl0_sts_ = data;
    chnl1_sts_ = (data >> 8);
    chnl2_sts_ = (data >> 16);
    chnl3_sts_ = (data >> 24);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    chnl0_sts_ = 0x0;
    chnl1_sts_ = 0x0;
    chnl2_sts_ = 0x0;
    chnl3_sts_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("ParbRegsPortDebug") + ":\n";
    r += indent_string + "  " + std::string("chnl0_sts") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl0_sts_) ) + "\n";
    all_zeros &= (0 == chnl0_sts_);
    r += indent_string + "  " + std::string("chnl1_sts") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl1_sts_) ) + "\n";
    all_zeros &= (0 == chnl1_sts_);
    r += indent_string + "  " + std::string("chnl2_sts") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl2_sts_) ) + "\n";
    all_zeros &= (0 == chnl2_sts_);
    r += indent_string + "  " + std::string("chnl3_sts") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl3_sts_) ) + "\n";
    all_zeros &= (0 == chnl3_sts_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("ParbRegsPortDebug") + ":\n";
    r += indent_string + "  " + std::string("chnl0_sts") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl0_sts_) ) + "\n";
    all_zeros &= (0 == chnl0_sts_);
    r += indent_string + "  " + std::string("chnl1_sts") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl1_sts_) ) + "\n";
    all_zeros &= (0 == chnl1_sts_);
    r += indent_string + "  " + std::string("chnl2_sts") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl2_sts_) ) + "\n";
    all_zeros &= (0 == chnl2_sts_);
    r += indent_string + "  " + std::string("chnl3_sts") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(chnl3_sts_) ) + "\n";
    all_zeros &= (0 == chnl3_sts_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t chnl0_sts_;
  uint8_t chnl1_sts_;
  uint8_t chnl2_sts_;
  uint8_t chnl3_sts_;
private:
  static int StartOffset(
      int index_pipe_addrmap, ParbRegsParbGroupEnum selector_parb_regs_parb_group, int index_parb_regs_port_debug
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    offset += 0x30000; // to get to parb_reg
    switch (selector_parb_regs_parb_group) {
      case kParbGroupEPortDbg:
        offset += 0x600; // to get to parb_group_e_port_dbg
        assert(index_parb_regs_port_debug < 18);
        offset += index_parb_regs_port_debug * 0x4; // parb_regs_port_debug[]
        break;
      case kParbGroupIPortDbg:
        offset += 0x580; // to get to parb_group_i_port_dbg
        assert(index_parb_regs_port_debug < 18);
        offset += index_parb_regs_port_debug * 0x4; // parb_regs_port_debug[]
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_PARB_REGS_PORT_DEBUG_H__
