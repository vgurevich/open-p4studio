/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PARTY_GLUE_REG_RSPEC_IBP18_INTR_STATUS0_H__
#define __REGISTER_INCLUDES_PARTY_GLUE_REG_RSPEC_IBP18_INTR_STATUS0_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class PartyGlueRegRspecIbp18IntrStatus0 : public model_core::RegisterBlock<RegisterCallback> {
public:
  PartyGlueRegRspecIbp18IntrStatus0(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 4, false, write_callback, read_callback, std::string("PartyGlueRegRspecIbp18IntrStatus0")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PartyGlueRegRspecIbp18IntrStatus0(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PartyGlueRegRspecIbp18IntrStatus0")
    {
    }
public:





  uint8_t &ibp0() { return ibp0_; }





  uint8_t &ibp1() { return ibp1_; }





  uint8_t &ibp2() { return ibp2_; }





  uint8_t &ibp3() { return ibp3_; }





  uint8_t &ibp4() { return ibp4_; }





  uint8_t &ibp5() { return ibp5_; }





  uint8_t &ibp6() { return ibp6_; }





  uint8_t &ibp7() { return ibp7_; }





  uint8_t &ibp8() { return ibp8_; }





  uint8_t &ibp9() { return ibp9_; }





  uint8_t &ibp10() { return ibp10_; }





  uint8_t &ibp11() { return ibp11_; }





  uint8_t &ibp12() { return ibp12_; }





  uint8_t &ibp13() { return ibp13_; }





  uint8_t &ibp14() { return ibp14_; }





  uint8_t &ibp15() { return ibp15_; }





  uint8_t &ibp16() { return ibp16_; }





  uint8_t &ibp17() { return ibp17_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (ibp0_ & 0x1);
    *data |= ((ibp1_ & 0x1) << 1);
    *data |= ((ibp2_ & 0x1) << 2);
    *data |= ((ibp3_ & 0x1) << 3);
    *data |= ((ibp4_ & 0x1) << 4);
    *data |= ((ibp5_ & 0x1) << 5);
    *data |= ((ibp6_ & 0x1) << 6);
    *data |= ((ibp7_ & 0x1) << 7);
    *data |= ((ibp8_ & 0x1) << 8);
    *data |= ((ibp9_ & 0x1) << 9);
    *data |= ((ibp10_ & 0x1) << 10);
    *data |= ((ibp11_ & 0x1) << 11);
    *data |= ((ibp12_ & 0x1) << 12);
    *data |= ((ibp13_ & 0x1) << 13);
    *data |= ((ibp14_ & 0x1) << 14);
    *data |= ((ibp15_ & 0x1) << 15);
    *data |= ((ibp16_ & 0x1) << 16);
    *data |= ((ibp17_ & 0x1) << 17);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    ibp0_ = (data & 0x1);
    ibp1_ = ((data >> 1) & 0x1);
    ibp2_ = ((data >> 2) & 0x1);
    ibp3_ = ((data >> 3) & 0x1);
    ibp4_ = ((data >> 4) & 0x1);
    ibp5_ = ((data >> 5) & 0x1);
    ibp6_ = ((data >> 6) & 0x1);
    ibp7_ = ((data >> 7) & 0x1);
    ibp8_ = ((data >> 8) & 0x1);
    ibp9_ = ((data >> 9) & 0x1);
    ibp10_ = ((data >> 10) & 0x1);
    ibp11_ = ((data >> 11) & 0x1);
    ibp12_ = ((data >> 12) & 0x1);
    ibp13_ = ((data >> 13) & 0x1);
    ibp14_ = ((data >> 14) & 0x1);
    ibp15_ = ((data >> 15) & 0x1);
    ibp16_ = ((data >> 16) & 0x1);
    ibp17_ = ((data >> 17) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    ibp0_ = 0;
    ibp1_ = 0;
    ibp2_ = 0;
    ibp3_ = 0;
    ibp4_ = 0;
    ibp5_ = 0;
    ibp6_ = 0;
    ibp7_ = 0;
    ibp8_ = 0;
    ibp9_ = 0;
    ibp10_ = 0;
    ibp11_ = 0;
    ibp12_ = 0;
    ibp13_ = 0;
    ibp14_ = 0;
    ibp15_ = 0;
    ibp16_ = 0;
    ibp17_ = 0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PartyGlueRegRspecIbp18IntrStatus0") + ":\n";
    r += indent_string + "  " + std::string("ibp0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp0_) ) + "\n";
    all_zeros &= (0 == ibp0_);
    r += indent_string + "  " + std::string("ibp1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp1_) ) + "\n";
    all_zeros &= (0 == ibp1_);
    r += indent_string + "  " + std::string("ibp2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp2_) ) + "\n";
    all_zeros &= (0 == ibp2_);
    r += indent_string + "  " + std::string("ibp3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp3_) ) + "\n";
    all_zeros &= (0 == ibp3_);
    r += indent_string + "  " + std::string("ibp4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp4_) ) + "\n";
    all_zeros &= (0 == ibp4_);
    r += indent_string + "  " + std::string("ibp5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp5_) ) + "\n";
    all_zeros &= (0 == ibp5_);
    r += indent_string + "  " + std::string("ibp6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp6_) ) + "\n";
    all_zeros &= (0 == ibp6_);
    r += indent_string + "  " + std::string("ibp7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp7_) ) + "\n";
    all_zeros &= (0 == ibp7_);
    r += indent_string + "  " + std::string("ibp8") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp8_) ) + "\n";
    all_zeros &= (0 == ibp8_);
    r += indent_string + "  " + std::string("ibp9") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp9_) ) + "\n";
    all_zeros &= (0 == ibp9_);
    r += indent_string + "  " + std::string("ibp10") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp10_) ) + "\n";
    all_zeros &= (0 == ibp10_);
    r += indent_string + "  " + std::string("ibp11") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp11_) ) + "\n";
    all_zeros &= (0 == ibp11_);
    r += indent_string + "  " + std::string("ibp12") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp12_) ) + "\n";
    all_zeros &= (0 == ibp12_);
    r += indent_string + "  " + std::string("ibp13") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp13_) ) + "\n";
    all_zeros &= (0 == ibp13_);
    r += indent_string + "  " + std::string("ibp14") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp14_) ) + "\n";
    all_zeros &= (0 == ibp14_);
    r += indent_string + "  " + std::string("ibp15") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp15_) ) + "\n";
    all_zeros &= (0 == ibp15_);
    r += indent_string + "  " + std::string("ibp16") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp16_) ) + "\n";
    all_zeros &= (0 == ibp16_);
    r += indent_string + "  " + std::string("ibp17") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp17_) ) + "\n";
    all_zeros &= (0 == ibp17_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PartyGlueRegRspecIbp18IntrStatus0") + ":\n";
    r += indent_string + "  " + std::string("ibp0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp0_) ) + "\n";
    all_zeros &= (0 == ibp0_);
    r += indent_string + "  " + std::string("ibp1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp1_) ) + "\n";
    all_zeros &= (0 == ibp1_);
    r += indent_string + "  " + std::string("ibp2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp2_) ) + "\n";
    all_zeros &= (0 == ibp2_);
    r += indent_string + "  " + std::string("ibp3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp3_) ) + "\n";
    all_zeros &= (0 == ibp3_);
    r += indent_string + "  " + std::string("ibp4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp4_) ) + "\n";
    all_zeros &= (0 == ibp4_);
    r += indent_string + "  " + std::string("ibp5") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp5_) ) + "\n";
    all_zeros &= (0 == ibp5_);
    r += indent_string + "  " + std::string("ibp6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp6_) ) + "\n";
    all_zeros &= (0 == ibp6_);
    r += indent_string + "  " + std::string("ibp7") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp7_) ) + "\n";
    all_zeros &= (0 == ibp7_);
    r += indent_string + "  " + std::string("ibp8") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp8_) ) + "\n";
    all_zeros &= (0 == ibp8_);
    r += indent_string + "  " + std::string("ibp9") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp9_) ) + "\n";
    all_zeros &= (0 == ibp9_);
    r += indent_string + "  " + std::string("ibp10") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp10_) ) + "\n";
    all_zeros &= (0 == ibp10_);
    r += indent_string + "  " + std::string("ibp11") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp11_) ) + "\n";
    all_zeros &= (0 == ibp11_);
    r += indent_string + "  " + std::string("ibp12") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp12_) ) + "\n";
    all_zeros &= (0 == ibp12_);
    r += indent_string + "  " + std::string("ibp13") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp13_) ) + "\n";
    all_zeros &= (0 == ibp13_);
    r += indent_string + "  " + std::string("ibp14") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp14_) ) + "\n";
    all_zeros &= (0 == ibp14_);
    r += indent_string + "  " + std::string("ibp15") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp15_) ) + "\n";
    all_zeros &= (0 == ibp15_);
    r += indent_string + "  " + std::string("ibp16") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp16_) ) + "\n";
    all_zeros &= (0 == ibp16_);
    r += indent_string + "  " + std::string("ibp17") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ibp17_) ) + "\n";
    all_zeros &= (0 == ibp17_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t ibp0_;
  uint8_t ibp1_;
  uint8_t ibp2_;
  uint8_t ibp3_;
  uint8_t ibp4_;
  uint8_t ibp5_;
  uint8_t ibp6_;
  uint8_t ibp7_;
  uint8_t ibp8_;
  uint8_t ibp9_;
  uint8_t ibp10_;
  uint8_t ibp11_;
  uint8_t ibp12_;
  uint8_t ibp13_;
  uint8_t ibp14_;
  uint8_t ibp15_;
  uint8_t ibp16_;
  uint8_t ibp17_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    offset += 0x3e000; // to get to party_glue_reg
    offset += 0x10; // to get to ibp18_intr_status0
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_PARTY_GLUE_REG_RSPEC_IBP18_INTR_STATUS0_H__
