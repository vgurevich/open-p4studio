/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PMARB_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_PMARB_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "ebp18_rspec_mutable.h"
#include "ibp18_rspec_mutable.h"
#include "parb_regs_mutable.h"
#include "party_glue_reg_rspec_mutable.h"
#include "party_pgr_reg_rspec_mutable.h"
#include "pbus_station_regs_mutable.h"
#include "prsr_reg_merge_rspec_mutable.h"

namespace tofinoB0 {
  namespace register_classes {

class PmarbRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PmarbRspecMutable(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 524288, true, write_callback, read_callback, std::string("PmarbRspecMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PmarbRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PmarbRspecMutable")
    {
    }
public:
  Ibp18RspecMutable &ibp18_reg() { return ibp18_reg_; }





  ParbRegsMutable &parb_reg() { return parb_reg_; }





  PrsrRegMergeRspecMutable &prsr_reg() { return prsr_reg_; }





  PbusStationRegsMutable &pbusstat_reg() { return pbusstat_reg_; }





  PartyPgrRegRspecMutable &pgr_reg() { return pgr_reg_; }





  PartyGlueRegRspecMutable &party_glue_reg() { return party_glue_reg_; }
  Ebp18RspecMutable &ebp18_reg() { return ebp18_reg_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x24000) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      ibp18_reg_.read( offset, data );
    }
    else if (offset >= 0x30000 && offset < 0x30648) {
      offset -= 0x30000;
      if (read_callback_) read_callback_();
      parb_reg_.read( offset, data );
    }
    else if (offset >= 0x32000 && offset < 0x32200) {
      offset -= 0x32000;
      if (read_callback_) read_callback_();
      prsr_reg_.read( offset, data );
    }
    else if (offset >= 0x34000 && offset < 0x34028) {
      offset -= 0x34000;
      if (read_callback_) read_callback_();
      pbusstat_reg_.read( offset, data );
    }
    else if (offset >= 0x3c000 && offset < 0x3e000) {
      offset -= 0x3c000;
      if (read_callback_) read_callback_();
      pgr_reg_.read( offset, data );
    }
    else if (offset >= 0x3e000 && offset < 0x3e100) {
      offset -= 0x3e000;
      if (read_callback_) read_callback_();
      party_glue_reg_.read( offset, data );
    }
    else if (offset >= 0x40000 && offset < 0x72400) {
      offset -= 0x40000;
      if (read_callback_) read_callback_();
      ebp18_reg_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x24000) {
      offset -= 0x0;
      ibp18_reg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x30000 && offset < 0x30648) {
      offset -= 0x30000;
      parb_reg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x32000 && offset < 0x32200) {
      offset -= 0x32000;
      prsr_reg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34000 && offset < 0x34028) {
      offset -= 0x34000;
      pbusstat_reg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c000 && offset < 0x3e000) {
      offset -= 0x3c000;
      pgr_reg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3e000 && offset < 0x3e100) {
      offset -= 0x3e000;
      party_glue_reg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40000 && offset < 0x72400) {
      offset -= 0x40000;
      ebp18_reg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    ibp18_reg_.reset();
    parb_reg_.reset();
    prsr_reg_.reset();
    pbusstat_reg_.reset();
    pgr_reg_.reset();
    party_glue_reg_.reset();
    ebp18_reg_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x24000) {
      offset -= 0x0;
      r += ibp18_reg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x30000 && offset < 0x30648) {
      offset -= 0x30000;
      r += parb_reg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x32000 && offset < 0x32200) {
      offset -= 0x32000;
      r += prsr_reg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34000 && offset < 0x34028) {
      offset -= 0x34000;
      r += pbusstat_reg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c000 && offset < 0x3e000) {
      offset -= 0x3c000;
      r += pgr_reg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3e000 && offset < 0x3e100) {
      offset -= 0x3e000;
      r += party_glue_reg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40000 && offset < 0x72400) {
      offset -= 0x40000;
      r += ebp18_reg_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += ibp18_reg_.to_string(print_zeros,indent_string) ;
    r += parb_reg_.to_string(print_zeros,indent_string) ;
    r += prsr_reg_.to_string(print_zeros,indent_string) ;
    r += pbusstat_reg_.to_string(print_zeros,indent_string) ;
    r += pgr_reg_.to_string(print_zeros,indent_string) ;
    r += party_glue_reg_.to_string(print_zeros,indent_string) ;
    r += ebp18_reg_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  Ibp18RspecMutable ibp18_reg_;
  ParbRegsMutable parb_reg_;
  PrsrRegMergeRspecMutable prsr_reg_;
  PbusStationRegsMutable pbusstat_reg_;
  PartyPgrRegRspecMutable pgr_reg_;
  PartyGlueRegRspecMutable party_glue_reg_;
  Ebp18RspecMutable ebp18_reg_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_PMARB_RSPEC_MUTABLE_H__
