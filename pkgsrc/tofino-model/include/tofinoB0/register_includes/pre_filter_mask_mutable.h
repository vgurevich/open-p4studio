/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PRE_FILTER_MASK_MUTABLE_H__
#define __REGISTER_INCLUDES_PRE_FILTER_MASK_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class PreFilterMaskMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PreFilterMaskMutable(
      int chipNumber, int index_tm_pre_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_pre_pipe_rspec), 12, true, write_callback, read_callback, std::string("PreFilterMaskMutable")+":"+boost::lexical_cast<std::string>(index_tm_pre_pipe_rspec))
    {
    }
  PreFilterMaskMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PreFilterMaskMutable")
    {
    }
public:





  uint16_t ingress_port() { return ingress_port_; }
  void ingress_port(const uint16_t &v) { ingress_port_=v; }





  uint16_t mgid() { return mgid_; }
  void mgid(const uint16_t &v) { mgid_=v; }





  uint16_t rid() { return rid_; }
  void rid(const uint16_t &v) { rid_=v; }





  uint16_t xid() { return xid_; }
  void xid(const uint16_t &v) { xid_=v; }





  uint16_t yid() { return yid_; }
  void yid(const uint16_t &v) { yid_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (ingress_port_ & 0x1ff);
      *data |= (mgid_ << 16);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = rid_;
      *data |= (xid_ << 16);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = (yid_ & 0x1ff);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      ingress_port_ = (data & 0x1ff);
      mgid_ = (data >> 16);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      rid_ = data;
      xid_ = (data >> 16);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      yid_ = (data & 0x1ff);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    ingress_port_ = 0x0;
    mgid_ = 0x0;
    rid_ = 0x0;
    xid_ = 0x0;
    yid_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PreFilterMaskMutable") + ":\n";
    r += indent_string + "  " + std::string("ingress_port") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ingress_port_) ) + "\n";
    all_zeros &= (0 == ingress_port_);
    r += indent_string + "  " + std::string("mgid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mgid_) ) + "\n";
    all_zeros &= (0 == mgid_);
    r += indent_string + "  " + std::string("rid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rid_) ) + "\n";
    all_zeros &= (0 == rid_);
    r += indent_string + "  " + std::string("xid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(xid_) ) + "\n";
    all_zeros &= (0 == xid_);
    r += indent_string + "  " + std::string("yid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(yid_) ) + "\n";
    all_zeros &= (0 == yid_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PreFilterMaskMutable") + ":\n";
    r += indent_string + "  " + std::string("ingress_port") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ingress_port_) ) + "\n";
    all_zeros &= (0 == ingress_port_);
    r += indent_string + "  " + std::string("mgid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mgid_) ) + "\n";
    all_zeros &= (0 == mgid_);
    r += indent_string + "  " + std::string("rid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rid_) ) + "\n";
    all_zeros &= (0 == rid_);
    r += indent_string + "  " + std::string("xid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(xid_) ) + "\n";
    all_zeros &= (0 == xid_);
    r += indent_string + "  " + std::string("yid") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(yid_) ) + "\n";
    all_zeros &= (0 == yid_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint16_t ingress_port_;
  uint16_t mgid_;
  uint16_t rid_;
  uint16_t xid_;
  uint16_t yid_;
private:
  static int StartOffset(
      int index_tm_pre_pipe_rspec
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x200000; // to get to tm_pre_top
    assert(index_tm_pre_pipe_rspec < 4);
    offset += index_tm_pre_pipe_rspec * 0x8000; // tm_pre_pipe_rspec[]
    offset += 0x40; // to get to filter_mask
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_PRE_FILTER_MASK_MUTABLE_H__
