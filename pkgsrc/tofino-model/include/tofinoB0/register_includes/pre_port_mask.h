/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PRE_PORT_MASK_H__
#define __REGISTER_INCLUDES_PRE_PORT_MASK_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class PrePortMask : public model_core::RegisterBlock<RegisterCallback> {
public:
  PrePortMask(
      int chipNumber, int index_pre_port_mask, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pre_port_mask), 36, false, write_callback, read_callback, std::string("PrePortMask")+":"+boost::lexical_cast<std::string>(index_pre_port_mask))
    {
    }
  PrePortMask(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PrePortMask")
    {
    }
public:







  uint8_t &mask(int j0) { return mask_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (mask_[0] & 0x1);
      *data |= ((mask_[1] & 0x1) << 1);
      *data |= ((mask_[2] & 0x1) << 2);
      *data |= ((mask_[3] & 0x1) << 3);
      *data |= ((mask_[4] & 0x1) << 4);
      *data |= ((mask_[5] & 0x1) << 5);
      *data |= ((mask_[6] & 0x1) << 6);
      *data |= ((mask_[7] & 0x1) << 7);
      *data |= ((mask_[8] & 0x1) << 8);
      *data |= ((mask_[9] & 0x1) << 9);
      *data |= ((mask_[10] & 0x1) << 10);
      *data |= ((mask_[11] & 0x1) << 11);
      *data |= ((mask_[12] & 0x1) << 12);
      *data |= ((mask_[13] & 0x1) << 13);
      *data |= ((mask_[14] & 0x1) << 14);
      *data |= ((mask_[15] & 0x1) << 15);
      *data |= ((mask_[16] & 0x1) << 16);
      *data |= ((mask_[17] & 0x1) << 17);
      *data |= ((mask_[18] & 0x1) << 18);
      *data |= ((mask_[19] & 0x1) << 19);
      *data |= ((mask_[20] & 0x1) << 20);
      *data |= ((mask_[21] & 0x1) << 21);
      *data |= ((mask_[22] & 0x1) << 22);
      *data |= ((mask_[23] & 0x1) << 23);
      *data |= ((mask_[24] & 0x1) << 24);
      *data |= ((mask_[25] & 0x1) << 25);
      *data |= ((mask_[26] & 0x1) << 26);
      *data |= ((mask_[27] & 0x1) << 27);
      *data |= ((mask_[28] & 0x1) << 28);
      *data |= ((mask_[29] & 0x1) << 29);
      *data |= ((mask_[30] & 0x1) << 30);
      *data |= ((mask_[31] & 0x1) << 31);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (mask_[32] & 0x1);
      *data |= ((mask_[33] & 0x1) << 1);
      *data |= ((mask_[34] & 0x1) << 2);
      *data |= ((mask_[35] & 0x1) << 3);
      *data |= ((mask_[36] & 0x1) << 4);
      *data |= ((mask_[37] & 0x1) << 5);
      *data |= ((mask_[38] & 0x1) << 6);
      *data |= ((mask_[39] & 0x1) << 7);
      *data |= ((mask_[40] & 0x1) << 8);
      *data |= ((mask_[41] & 0x1) << 9);
      *data |= ((mask_[42] & 0x1) << 10);
      *data |= ((mask_[43] & 0x1) << 11);
      *data |= ((mask_[44] & 0x1) << 12);
      *data |= ((mask_[45] & 0x1) << 13);
      *data |= ((mask_[46] & 0x1) << 14);
      *data |= ((mask_[47] & 0x1) << 15);
      *data |= ((mask_[48] & 0x1) << 16);
      *data |= ((mask_[49] & 0x1) << 17);
      *data |= ((mask_[50] & 0x1) << 18);
      *data |= ((mask_[51] & 0x1) << 19);
      *data |= ((mask_[52] & 0x1) << 20);
      *data |= ((mask_[53] & 0x1) << 21);
      *data |= ((mask_[54] & 0x1) << 22);
      *data |= ((mask_[55] & 0x1) << 23);
      *data |= ((mask_[56] & 0x1) << 24);
      *data |= ((mask_[57] & 0x1) << 25);
      *data |= ((mask_[58] & 0x1) << 26);
      *data |= ((mask_[59] & 0x1) << 27);
      *data |= ((mask_[60] & 0x1) << 28);
      *data |= ((mask_[61] & 0x1) << 29);
      *data |= ((mask_[62] & 0x1) << 30);
      *data |= ((mask_[63] & 0x1) << 31);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = (mask_[64] & 0x1);
      *data |= ((mask_[65] & 0x1) << 1);
      *data |= ((mask_[66] & 0x1) << 2);
      *data |= ((mask_[67] & 0x1) << 3);
      *data |= ((mask_[68] & 0x1) << 4);
      *data |= ((mask_[69] & 0x1) << 5);
      *data |= ((mask_[70] & 0x1) << 6);
      *data |= ((mask_[71] & 0x1) << 7);
      *data |= ((mask_[72] & 0x1) << 8);
      *data |= ((mask_[73] & 0x1) << 9);
      *data |= ((mask_[74] & 0x1) << 10);
      *data |= ((mask_[75] & 0x1) << 11);
      *data |= ((mask_[76] & 0x1) << 12);
      *data |= ((mask_[77] & 0x1) << 13);
      *data |= ((mask_[78] & 0x1) << 14);
      *data |= ((mask_[79] & 0x1) << 15);
      *data |= ((mask_[80] & 0x1) << 16);
      *data |= ((mask_[81] & 0x1) << 17);
      *data |= ((mask_[82] & 0x1) << 18);
      *data |= ((mask_[83] & 0x1) << 19);
      *data |= ((mask_[84] & 0x1) << 20);
      *data |= ((mask_[85] & 0x1) << 21);
      *data |= ((mask_[86] & 0x1) << 22);
      *data |= ((mask_[87] & 0x1) << 23);
      *data |= ((mask_[88] & 0x1) << 24);
      *data |= ((mask_[89] & 0x1) << 25);
      *data |= ((mask_[90] & 0x1) << 26);
      *data |= ((mask_[91] & 0x1) << 27);
      *data |= ((mask_[92] & 0x1) << 28);
      *data |= ((mask_[93] & 0x1) << 29);
      *data |= ((mask_[94] & 0x1) << 30);
      *data |= ((mask_[95] & 0x1) << 31);
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = (mask_[96] & 0x1);
      *data |= ((mask_[97] & 0x1) << 1);
      *data |= ((mask_[98] & 0x1) << 2);
      *data |= ((mask_[99] & 0x1) << 3);
      *data |= ((mask_[100] & 0x1) << 4);
      *data |= ((mask_[101] & 0x1) << 5);
      *data |= ((mask_[102] & 0x1) << 6);
      *data |= ((mask_[103] & 0x1) << 7);
      *data |= ((mask_[104] & 0x1) << 8);
      *data |= ((mask_[105] & 0x1) << 9);
      *data |= ((mask_[106] & 0x1) << 10);
      *data |= ((mask_[107] & 0x1) << 11);
      *data |= ((mask_[108] & 0x1) << 12);
      *data |= ((mask_[109] & 0x1) << 13);
      *data |= ((mask_[110] & 0x1) << 14);
      *data |= ((mask_[111] & 0x1) << 15);
      *data |= ((mask_[112] & 0x1) << 16);
      *data |= ((mask_[113] & 0x1) << 17);
      *data |= ((mask_[114] & 0x1) << 18);
      *data |= ((mask_[115] & 0x1) << 19);
      *data |= ((mask_[116] & 0x1) << 20);
      *data |= ((mask_[117] & 0x1) << 21);
      *data |= ((mask_[118] & 0x1) << 22);
      *data |= ((mask_[119] & 0x1) << 23);
      *data |= ((mask_[120] & 0x1) << 24);
      *data |= ((mask_[121] & 0x1) << 25);
      *data |= ((mask_[122] & 0x1) << 26);
      *data |= ((mask_[123] & 0x1) << 27);
      *data |= ((mask_[124] & 0x1) << 28);
      *data |= ((mask_[125] & 0x1) << 29);
      *data |= ((mask_[126] & 0x1) << 30);
      *data |= ((mask_[127] & 0x1) << 31);
    }
    else if (offset >= 0x10 && offset < 0x14) {
      if (read_callback_) read_callback_();
      *data = (mask_[128] & 0x1);
      *data |= ((mask_[129] & 0x1) << 1);
      *data |= ((mask_[130] & 0x1) << 2);
      *data |= ((mask_[131] & 0x1) << 3);
      *data |= ((mask_[132] & 0x1) << 4);
      *data |= ((mask_[133] & 0x1) << 5);
      *data |= ((mask_[134] & 0x1) << 6);
      *data |= ((mask_[135] & 0x1) << 7);
      *data |= ((mask_[136] & 0x1) << 8);
      *data |= ((mask_[137] & 0x1) << 9);
      *data |= ((mask_[138] & 0x1) << 10);
      *data |= ((mask_[139] & 0x1) << 11);
      *data |= ((mask_[140] & 0x1) << 12);
      *data |= ((mask_[141] & 0x1) << 13);
      *data |= ((mask_[142] & 0x1) << 14);
      *data |= ((mask_[143] & 0x1) << 15);
      *data |= ((mask_[144] & 0x1) << 16);
      *data |= ((mask_[145] & 0x1) << 17);
      *data |= ((mask_[146] & 0x1) << 18);
      *data |= ((mask_[147] & 0x1) << 19);
      *data |= ((mask_[148] & 0x1) << 20);
      *data |= ((mask_[149] & 0x1) << 21);
      *data |= ((mask_[150] & 0x1) << 22);
      *data |= ((mask_[151] & 0x1) << 23);
      *data |= ((mask_[152] & 0x1) << 24);
      *data |= ((mask_[153] & 0x1) << 25);
      *data |= ((mask_[154] & 0x1) << 26);
      *data |= ((mask_[155] & 0x1) << 27);
      *data |= ((mask_[156] & 0x1) << 28);
      *data |= ((mask_[157] & 0x1) << 29);
      *data |= ((mask_[158] & 0x1) << 30);
      *data |= ((mask_[159] & 0x1) << 31);
    }
    else if (offset >= 0x14 && offset < 0x18) {
      if (read_callback_) read_callback_();
      *data = (mask_[160] & 0x1);
      *data |= ((mask_[161] & 0x1) << 1);
      *data |= ((mask_[162] & 0x1) << 2);
      *data |= ((mask_[163] & 0x1) << 3);
      *data |= ((mask_[164] & 0x1) << 4);
      *data |= ((mask_[165] & 0x1) << 5);
      *data |= ((mask_[166] & 0x1) << 6);
      *data |= ((mask_[167] & 0x1) << 7);
      *data |= ((mask_[168] & 0x1) << 8);
      *data |= ((mask_[169] & 0x1) << 9);
      *data |= ((mask_[170] & 0x1) << 10);
      *data |= ((mask_[171] & 0x1) << 11);
      *data |= ((mask_[172] & 0x1) << 12);
      *data |= ((mask_[173] & 0x1) << 13);
      *data |= ((mask_[174] & 0x1) << 14);
      *data |= ((mask_[175] & 0x1) << 15);
      *data |= ((mask_[176] & 0x1) << 16);
      *data |= ((mask_[177] & 0x1) << 17);
      *data |= ((mask_[178] & 0x1) << 18);
      *data |= ((mask_[179] & 0x1) << 19);
      *data |= ((mask_[180] & 0x1) << 20);
      *data |= ((mask_[181] & 0x1) << 21);
      *data |= ((mask_[182] & 0x1) << 22);
      *data |= ((mask_[183] & 0x1) << 23);
      *data |= ((mask_[184] & 0x1) << 24);
      *data |= ((mask_[185] & 0x1) << 25);
      *data |= ((mask_[186] & 0x1) << 26);
      *data |= ((mask_[187] & 0x1) << 27);
      *data |= ((mask_[188] & 0x1) << 28);
      *data |= ((mask_[189] & 0x1) << 29);
      *data |= ((mask_[190] & 0x1) << 30);
      *data |= ((mask_[191] & 0x1) << 31);
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      if (read_callback_) read_callback_();
      *data = (mask_[192] & 0x1);
      *data |= ((mask_[193] & 0x1) << 1);
      *data |= ((mask_[194] & 0x1) << 2);
      *data |= ((mask_[195] & 0x1) << 3);
      *data |= ((mask_[196] & 0x1) << 4);
      *data |= ((mask_[197] & 0x1) << 5);
      *data |= ((mask_[198] & 0x1) << 6);
      *data |= ((mask_[199] & 0x1) << 7);
      *data |= ((mask_[200] & 0x1) << 8);
      *data |= ((mask_[201] & 0x1) << 9);
      *data |= ((mask_[202] & 0x1) << 10);
      *data |= ((mask_[203] & 0x1) << 11);
      *data |= ((mask_[204] & 0x1) << 12);
      *data |= ((mask_[205] & 0x1) << 13);
      *data |= ((mask_[206] & 0x1) << 14);
      *data |= ((mask_[207] & 0x1) << 15);
      *data |= ((mask_[208] & 0x1) << 16);
      *data |= ((mask_[209] & 0x1) << 17);
      *data |= ((mask_[210] & 0x1) << 18);
      *data |= ((mask_[211] & 0x1) << 19);
      *data |= ((mask_[212] & 0x1) << 20);
      *data |= ((mask_[213] & 0x1) << 21);
      *data |= ((mask_[214] & 0x1) << 22);
      *data |= ((mask_[215] & 0x1) << 23);
      *data |= ((mask_[216] & 0x1) << 24);
      *data |= ((mask_[217] & 0x1) << 25);
      *data |= ((mask_[218] & 0x1) << 26);
      *data |= ((mask_[219] & 0x1) << 27);
      *data |= ((mask_[220] & 0x1) << 28);
      *data |= ((mask_[221] & 0x1) << 29);
      *data |= ((mask_[222] & 0x1) << 30);
      *data |= ((mask_[223] & 0x1) << 31);
    }
    else if (offset >= 0x1c && offset < 0x20) {
      if (read_callback_) read_callback_();
      *data = (mask_[224] & 0x1);
      *data |= ((mask_[225] & 0x1) << 1);
      *data |= ((mask_[226] & 0x1) << 2);
      *data |= ((mask_[227] & 0x1) << 3);
      *data |= ((mask_[228] & 0x1) << 4);
      *data |= ((mask_[229] & 0x1) << 5);
      *data |= ((mask_[230] & 0x1) << 6);
      *data |= ((mask_[231] & 0x1) << 7);
      *data |= ((mask_[232] & 0x1) << 8);
      *data |= ((mask_[233] & 0x1) << 9);
      *data |= ((mask_[234] & 0x1) << 10);
      *data |= ((mask_[235] & 0x1) << 11);
      *data |= ((mask_[236] & 0x1) << 12);
      *data |= ((mask_[237] & 0x1) << 13);
      *data |= ((mask_[238] & 0x1) << 14);
      *data |= ((mask_[239] & 0x1) << 15);
      *data |= ((mask_[240] & 0x1) << 16);
      *data |= ((mask_[241] & 0x1) << 17);
      *data |= ((mask_[242] & 0x1) << 18);
      *data |= ((mask_[243] & 0x1) << 19);
      *data |= ((mask_[244] & 0x1) << 20);
      *data |= ((mask_[245] & 0x1) << 21);
      *data |= ((mask_[246] & 0x1) << 22);
      *data |= ((mask_[247] & 0x1) << 23);
      *data |= ((mask_[248] & 0x1) << 24);
      *data |= ((mask_[249] & 0x1) << 25);
      *data |= ((mask_[250] & 0x1) << 26);
      *data |= ((mask_[251] & 0x1) << 27);
      *data |= ((mask_[252] & 0x1) << 28);
      *data |= ((mask_[253] & 0x1) << 29);
      *data |= ((mask_[254] & 0x1) << 30);
      *data |= ((mask_[255] & 0x1) << 31);
    }
    else if (offset >= 0x20 && offset < 0x24) {
      if (read_callback_) read_callback_();
      *data = (mask_[256] & 0x1);
      *data |= ((mask_[257] & 0x1) << 1);
      *data |= ((mask_[258] & 0x1) << 2);
      *data |= ((mask_[259] & 0x1) << 3);
      *data |= ((mask_[260] & 0x1) << 4);
      *data |= ((mask_[261] & 0x1) << 5);
      *data |= ((mask_[262] & 0x1) << 6);
      *data |= ((mask_[263] & 0x1) << 7);
      *data |= ((mask_[264] & 0x1) << 8);
      *data |= ((mask_[265] & 0x1) << 9);
      *data |= ((mask_[266] & 0x1) << 10);
      *data |= ((mask_[267] & 0x1) << 11);
      *data |= ((mask_[268] & 0x1) << 12);
      *data |= ((mask_[269] & 0x1) << 13);
      *data |= ((mask_[270] & 0x1) << 14);
      *data |= ((mask_[271] & 0x1) << 15);
      *data |= ((mask_[272] & 0x1) << 16);
      *data |= ((mask_[273] & 0x1) << 17);
      *data |= ((mask_[274] & 0x1) << 18);
      *data |= ((mask_[275] & 0x1) << 19);
      *data |= ((mask_[276] & 0x1) << 20);
      *data |= ((mask_[277] & 0x1) << 21);
      *data |= ((mask_[278] & 0x1) << 22);
      *data |= ((mask_[279] & 0x1) << 23);
      *data |= ((mask_[280] & 0x1) << 24);
      *data |= ((mask_[281] & 0x1) << 25);
      *data |= ((mask_[282] & 0x1) << 26);
      *data |= ((mask_[283] & 0x1) << 27);
      *data |= ((mask_[284] & 0x1) << 28);
      *data |= ((mask_[285] & 0x1) << 29);
      *data |= ((mask_[286] & 0x1) << 30);
      *data |= ((mask_[287] & 0x1) << 31);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      mask_[0] = (data & 0x1);
      mask_[1] = ((data >> 1) & 0x1);
      mask_[2] = ((data >> 2) & 0x1);
      mask_[3] = ((data >> 3) & 0x1);
      mask_[4] = ((data >> 4) & 0x1);
      mask_[5] = ((data >> 5) & 0x1);
      mask_[6] = ((data >> 6) & 0x1);
      mask_[7] = ((data >> 7) & 0x1);
      mask_[8] = ((data >> 8) & 0x1);
      mask_[9] = ((data >> 9) & 0x1);
      mask_[10] = ((data >> 10) & 0x1);
      mask_[11] = ((data >> 11) & 0x1);
      mask_[12] = ((data >> 12) & 0x1);
      mask_[13] = ((data >> 13) & 0x1);
      mask_[14] = ((data >> 14) & 0x1);
      mask_[15] = ((data >> 15) & 0x1);
      mask_[16] = ((data >> 16) & 0x1);
      mask_[17] = ((data >> 17) & 0x1);
      mask_[18] = ((data >> 18) & 0x1);
      mask_[19] = ((data >> 19) & 0x1);
      mask_[20] = ((data >> 20) & 0x1);
      mask_[21] = ((data >> 21) & 0x1);
      mask_[22] = ((data >> 22) & 0x1);
      mask_[23] = ((data >> 23) & 0x1);
      mask_[24] = ((data >> 24) & 0x1);
      mask_[25] = ((data >> 25) & 0x1);
      mask_[26] = ((data >> 26) & 0x1);
      mask_[27] = ((data >> 27) & 0x1);
      mask_[28] = ((data >> 28) & 0x1);
      mask_[29] = ((data >> 29) & 0x1);
      mask_[30] = ((data >> 30) & 0x1);
      mask_[31] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      mask_[32] = (data & 0x1);
      mask_[33] = ((data >> 1) & 0x1);
      mask_[34] = ((data >> 2) & 0x1);
      mask_[35] = ((data >> 3) & 0x1);
      mask_[36] = ((data >> 4) & 0x1);
      mask_[37] = ((data >> 5) & 0x1);
      mask_[38] = ((data >> 6) & 0x1);
      mask_[39] = ((data >> 7) & 0x1);
      mask_[40] = ((data >> 8) & 0x1);
      mask_[41] = ((data >> 9) & 0x1);
      mask_[42] = ((data >> 10) & 0x1);
      mask_[43] = ((data >> 11) & 0x1);
      mask_[44] = ((data >> 12) & 0x1);
      mask_[45] = ((data >> 13) & 0x1);
      mask_[46] = ((data >> 14) & 0x1);
      mask_[47] = ((data >> 15) & 0x1);
      mask_[48] = ((data >> 16) & 0x1);
      mask_[49] = ((data >> 17) & 0x1);
      mask_[50] = ((data >> 18) & 0x1);
      mask_[51] = ((data >> 19) & 0x1);
      mask_[52] = ((data >> 20) & 0x1);
      mask_[53] = ((data >> 21) & 0x1);
      mask_[54] = ((data >> 22) & 0x1);
      mask_[55] = ((data >> 23) & 0x1);
      mask_[56] = ((data >> 24) & 0x1);
      mask_[57] = ((data >> 25) & 0x1);
      mask_[58] = ((data >> 26) & 0x1);
      mask_[59] = ((data >> 27) & 0x1);
      mask_[60] = ((data >> 28) & 0x1);
      mask_[61] = ((data >> 29) & 0x1);
      mask_[62] = ((data >> 30) & 0x1);
      mask_[63] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      mask_[64] = (data & 0x1);
      mask_[65] = ((data >> 1) & 0x1);
      mask_[66] = ((data >> 2) & 0x1);
      mask_[67] = ((data >> 3) & 0x1);
      mask_[68] = ((data >> 4) & 0x1);
      mask_[69] = ((data >> 5) & 0x1);
      mask_[70] = ((data >> 6) & 0x1);
      mask_[71] = ((data >> 7) & 0x1);
      mask_[72] = ((data >> 8) & 0x1);
      mask_[73] = ((data >> 9) & 0x1);
      mask_[74] = ((data >> 10) & 0x1);
      mask_[75] = ((data >> 11) & 0x1);
      mask_[76] = ((data >> 12) & 0x1);
      mask_[77] = ((data >> 13) & 0x1);
      mask_[78] = ((data >> 14) & 0x1);
      mask_[79] = ((data >> 15) & 0x1);
      mask_[80] = ((data >> 16) & 0x1);
      mask_[81] = ((data >> 17) & 0x1);
      mask_[82] = ((data >> 18) & 0x1);
      mask_[83] = ((data >> 19) & 0x1);
      mask_[84] = ((data >> 20) & 0x1);
      mask_[85] = ((data >> 21) & 0x1);
      mask_[86] = ((data >> 22) & 0x1);
      mask_[87] = ((data >> 23) & 0x1);
      mask_[88] = ((data >> 24) & 0x1);
      mask_[89] = ((data >> 25) & 0x1);
      mask_[90] = ((data >> 26) & 0x1);
      mask_[91] = ((data >> 27) & 0x1);
      mask_[92] = ((data >> 28) & 0x1);
      mask_[93] = ((data >> 29) & 0x1);
      mask_[94] = ((data >> 30) & 0x1);
      mask_[95] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      mask_[96] = (data & 0x1);
      mask_[97] = ((data >> 1) & 0x1);
      mask_[98] = ((data >> 2) & 0x1);
      mask_[99] = ((data >> 3) & 0x1);
      mask_[100] = ((data >> 4) & 0x1);
      mask_[101] = ((data >> 5) & 0x1);
      mask_[102] = ((data >> 6) & 0x1);
      mask_[103] = ((data >> 7) & 0x1);
      mask_[104] = ((data >> 8) & 0x1);
      mask_[105] = ((data >> 9) & 0x1);
      mask_[106] = ((data >> 10) & 0x1);
      mask_[107] = ((data >> 11) & 0x1);
      mask_[108] = ((data >> 12) & 0x1);
      mask_[109] = ((data >> 13) & 0x1);
      mask_[110] = ((data >> 14) & 0x1);
      mask_[111] = ((data >> 15) & 0x1);
      mask_[112] = ((data >> 16) & 0x1);
      mask_[113] = ((data >> 17) & 0x1);
      mask_[114] = ((data >> 18) & 0x1);
      mask_[115] = ((data >> 19) & 0x1);
      mask_[116] = ((data >> 20) & 0x1);
      mask_[117] = ((data >> 21) & 0x1);
      mask_[118] = ((data >> 22) & 0x1);
      mask_[119] = ((data >> 23) & 0x1);
      mask_[120] = ((data >> 24) & 0x1);
      mask_[121] = ((data >> 25) & 0x1);
      mask_[122] = ((data >> 26) & 0x1);
      mask_[123] = ((data >> 27) & 0x1);
      mask_[124] = ((data >> 28) & 0x1);
      mask_[125] = ((data >> 29) & 0x1);
      mask_[126] = ((data >> 30) & 0x1);
      mask_[127] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      mask_[128] = (data & 0x1);
      mask_[129] = ((data >> 1) & 0x1);
      mask_[130] = ((data >> 2) & 0x1);
      mask_[131] = ((data >> 3) & 0x1);
      mask_[132] = ((data >> 4) & 0x1);
      mask_[133] = ((data >> 5) & 0x1);
      mask_[134] = ((data >> 6) & 0x1);
      mask_[135] = ((data >> 7) & 0x1);
      mask_[136] = ((data >> 8) & 0x1);
      mask_[137] = ((data >> 9) & 0x1);
      mask_[138] = ((data >> 10) & 0x1);
      mask_[139] = ((data >> 11) & 0x1);
      mask_[140] = ((data >> 12) & 0x1);
      mask_[141] = ((data >> 13) & 0x1);
      mask_[142] = ((data >> 14) & 0x1);
      mask_[143] = ((data >> 15) & 0x1);
      mask_[144] = ((data >> 16) & 0x1);
      mask_[145] = ((data >> 17) & 0x1);
      mask_[146] = ((data >> 18) & 0x1);
      mask_[147] = ((data >> 19) & 0x1);
      mask_[148] = ((data >> 20) & 0x1);
      mask_[149] = ((data >> 21) & 0x1);
      mask_[150] = ((data >> 22) & 0x1);
      mask_[151] = ((data >> 23) & 0x1);
      mask_[152] = ((data >> 24) & 0x1);
      mask_[153] = ((data >> 25) & 0x1);
      mask_[154] = ((data >> 26) & 0x1);
      mask_[155] = ((data >> 27) & 0x1);
      mask_[156] = ((data >> 28) & 0x1);
      mask_[157] = ((data >> 29) & 0x1);
      mask_[158] = ((data >> 30) & 0x1);
      mask_[159] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      mask_[160] = (data & 0x1);
      mask_[161] = ((data >> 1) & 0x1);
      mask_[162] = ((data >> 2) & 0x1);
      mask_[163] = ((data >> 3) & 0x1);
      mask_[164] = ((data >> 4) & 0x1);
      mask_[165] = ((data >> 5) & 0x1);
      mask_[166] = ((data >> 6) & 0x1);
      mask_[167] = ((data >> 7) & 0x1);
      mask_[168] = ((data >> 8) & 0x1);
      mask_[169] = ((data >> 9) & 0x1);
      mask_[170] = ((data >> 10) & 0x1);
      mask_[171] = ((data >> 11) & 0x1);
      mask_[172] = ((data >> 12) & 0x1);
      mask_[173] = ((data >> 13) & 0x1);
      mask_[174] = ((data >> 14) & 0x1);
      mask_[175] = ((data >> 15) & 0x1);
      mask_[176] = ((data >> 16) & 0x1);
      mask_[177] = ((data >> 17) & 0x1);
      mask_[178] = ((data >> 18) & 0x1);
      mask_[179] = ((data >> 19) & 0x1);
      mask_[180] = ((data >> 20) & 0x1);
      mask_[181] = ((data >> 21) & 0x1);
      mask_[182] = ((data >> 22) & 0x1);
      mask_[183] = ((data >> 23) & 0x1);
      mask_[184] = ((data >> 24) & 0x1);
      mask_[185] = ((data >> 25) & 0x1);
      mask_[186] = ((data >> 26) & 0x1);
      mask_[187] = ((data >> 27) & 0x1);
      mask_[188] = ((data >> 28) & 0x1);
      mask_[189] = ((data >> 29) & 0x1);
      mask_[190] = ((data >> 30) & 0x1);
      mask_[191] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      mask_[192] = (data & 0x1);
      mask_[193] = ((data >> 1) & 0x1);
      mask_[194] = ((data >> 2) & 0x1);
      mask_[195] = ((data >> 3) & 0x1);
      mask_[196] = ((data >> 4) & 0x1);
      mask_[197] = ((data >> 5) & 0x1);
      mask_[198] = ((data >> 6) & 0x1);
      mask_[199] = ((data >> 7) & 0x1);
      mask_[200] = ((data >> 8) & 0x1);
      mask_[201] = ((data >> 9) & 0x1);
      mask_[202] = ((data >> 10) & 0x1);
      mask_[203] = ((data >> 11) & 0x1);
      mask_[204] = ((data >> 12) & 0x1);
      mask_[205] = ((data >> 13) & 0x1);
      mask_[206] = ((data >> 14) & 0x1);
      mask_[207] = ((data >> 15) & 0x1);
      mask_[208] = ((data >> 16) & 0x1);
      mask_[209] = ((data >> 17) & 0x1);
      mask_[210] = ((data >> 18) & 0x1);
      mask_[211] = ((data >> 19) & 0x1);
      mask_[212] = ((data >> 20) & 0x1);
      mask_[213] = ((data >> 21) & 0x1);
      mask_[214] = ((data >> 22) & 0x1);
      mask_[215] = ((data >> 23) & 0x1);
      mask_[216] = ((data >> 24) & 0x1);
      mask_[217] = ((data >> 25) & 0x1);
      mask_[218] = ((data >> 26) & 0x1);
      mask_[219] = ((data >> 27) & 0x1);
      mask_[220] = ((data >> 28) & 0x1);
      mask_[221] = ((data >> 29) & 0x1);
      mask_[222] = ((data >> 30) & 0x1);
      mask_[223] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      mask_[224] = (data & 0x1);
      mask_[225] = ((data >> 1) & 0x1);
      mask_[226] = ((data >> 2) & 0x1);
      mask_[227] = ((data >> 3) & 0x1);
      mask_[228] = ((data >> 4) & 0x1);
      mask_[229] = ((data >> 5) & 0x1);
      mask_[230] = ((data >> 6) & 0x1);
      mask_[231] = ((data >> 7) & 0x1);
      mask_[232] = ((data >> 8) & 0x1);
      mask_[233] = ((data >> 9) & 0x1);
      mask_[234] = ((data >> 10) & 0x1);
      mask_[235] = ((data >> 11) & 0x1);
      mask_[236] = ((data >> 12) & 0x1);
      mask_[237] = ((data >> 13) & 0x1);
      mask_[238] = ((data >> 14) & 0x1);
      mask_[239] = ((data >> 15) & 0x1);
      mask_[240] = ((data >> 16) & 0x1);
      mask_[241] = ((data >> 17) & 0x1);
      mask_[242] = ((data >> 18) & 0x1);
      mask_[243] = ((data >> 19) & 0x1);
      mask_[244] = ((data >> 20) & 0x1);
      mask_[245] = ((data >> 21) & 0x1);
      mask_[246] = ((data >> 22) & 0x1);
      mask_[247] = ((data >> 23) & 0x1);
      mask_[248] = ((data >> 24) & 0x1);
      mask_[249] = ((data >> 25) & 0x1);
      mask_[250] = ((data >> 26) & 0x1);
      mask_[251] = ((data >> 27) & 0x1);
      mask_[252] = ((data >> 28) & 0x1);
      mask_[253] = ((data >> 29) & 0x1);
      mask_[254] = ((data >> 30) & 0x1);
      mask_[255] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      mask_[256] = (data & 0x1);
      mask_[257] = ((data >> 1) & 0x1);
      mask_[258] = ((data >> 2) & 0x1);
      mask_[259] = ((data >> 3) & 0x1);
      mask_[260] = ((data >> 4) & 0x1);
      mask_[261] = ((data >> 5) & 0x1);
      mask_[262] = ((data >> 6) & 0x1);
      mask_[263] = ((data >> 7) & 0x1);
      mask_[264] = ((data >> 8) & 0x1);
      mask_[265] = ((data >> 9) & 0x1);
      mask_[266] = ((data >> 10) & 0x1);
      mask_[267] = ((data >> 11) & 0x1);
      mask_[268] = ((data >> 12) & 0x1);
      mask_[269] = ((data >> 13) & 0x1);
      mask_[270] = ((data >> 14) & 0x1);
      mask_[271] = ((data >> 15) & 0x1);
      mask_[272] = ((data >> 16) & 0x1);
      mask_[273] = ((data >> 17) & 0x1);
      mask_[274] = ((data >> 18) & 0x1);
      mask_[275] = ((data >> 19) & 0x1);
      mask_[276] = ((data >> 20) & 0x1);
      mask_[277] = ((data >> 21) & 0x1);
      mask_[278] = ((data >> 22) & 0x1);
      mask_[279] = ((data >> 23) & 0x1);
      mask_[280] = ((data >> 24) & 0x1);
      mask_[281] = ((data >> 25) & 0x1);
      mask_[282] = ((data >> 26) & 0x1);
      mask_[283] = ((data >> 27) & 0x1);
      mask_[284] = ((data >> 28) & 0x1);
      mask_[285] = ((data >> 29) & 0x1);
      mask_[286] = ((data >> 30) & 0x1);
      mask_[287] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    mask_[0] = 0x0;
    mask_[1] = 0x0;
    mask_[2] = 0x0;
    mask_[3] = 0x0;
    mask_[4] = 0x0;
    mask_[5] = 0x0;
    mask_[6] = 0x0;
    mask_[7] = 0x0;
    mask_[8] = 0x0;
    mask_[9] = 0x0;
    mask_[10] = 0x0;
    mask_[11] = 0x0;
    mask_[12] = 0x0;
    mask_[13] = 0x0;
    mask_[14] = 0x0;
    mask_[15] = 0x0;
    mask_[16] = 0x0;
    mask_[17] = 0x0;
    mask_[18] = 0x0;
    mask_[19] = 0x0;
    mask_[20] = 0x0;
    mask_[21] = 0x0;
    mask_[22] = 0x0;
    mask_[23] = 0x0;
    mask_[24] = 0x0;
    mask_[25] = 0x0;
    mask_[26] = 0x0;
    mask_[27] = 0x0;
    mask_[28] = 0x0;
    mask_[29] = 0x0;
    mask_[30] = 0x0;
    mask_[31] = 0x0;
    mask_[32] = 0x0;
    mask_[33] = 0x0;
    mask_[34] = 0x0;
    mask_[35] = 0x0;
    mask_[36] = 0x0;
    mask_[37] = 0x0;
    mask_[38] = 0x0;
    mask_[39] = 0x0;
    mask_[40] = 0x0;
    mask_[41] = 0x0;
    mask_[42] = 0x0;
    mask_[43] = 0x0;
    mask_[44] = 0x0;
    mask_[45] = 0x0;
    mask_[46] = 0x0;
    mask_[47] = 0x0;
    mask_[48] = 0x0;
    mask_[49] = 0x0;
    mask_[50] = 0x0;
    mask_[51] = 0x0;
    mask_[52] = 0x0;
    mask_[53] = 0x0;
    mask_[54] = 0x0;
    mask_[55] = 0x0;
    mask_[56] = 0x0;
    mask_[57] = 0x0;
    mask_[58] = 0x0;
    mask_[59] = 0x0;
    mask_[60] = 0x0;
    mask_[61] = 0x0;
    mask_[62] = 0x0;
    mask_[63] = 0x0;
    mask_[64] = 0x0;
    mask_[65] = 0x0;
    mask_[66] = 0x0;
    mask_[67] = 0x0;
    mask_[68] = 0x0;
    mask_[69] = 0x0;
    mask_[70] = 0x0;
    mask_[71] = 0x0;
    mask_[72] = 0x0;
    mask_[73] = 0x0;
    mask_[74] = 0x0;
    mask_[75] = 0x0;
    mask_[76] = 0x0;
    mask_[77] = 0x0;
    mask_[78] = 0x0;
    mask_[79] = 0x0;
    mask_[80] = 0x0;
    mask_[81] = 0x0;
    mask_[82] = 0x0;
    mask_[83] = 0x0;
    mask_[84] = 0x0;
    mask_[85] = 0x0;
    mask_[86] = 0x0;
    mask_[87] = 0x0;
    mask_[88] = 0x0;
    mask_[89] = 0x0;
    mask_[90] = 0x0;
    mask_[91] = 0x0;
    mask_[92] = 0x0;
    mask_[93] = 0x0;
    mask_[94] = 0x0;
    mask_[95] = 0x0;
    mask_[96] = 0x0;
    mask_[97] = 0x0;
    mask_[98] = 0x0;
    mask_[99] = 0x0;
    mask_[100] = 0x0;
    mask_[101] = 0x0;
    mask_[102] = 0x0;
    mask_[103] = 0x0;
    mask_[104] = 0x0;
    mask_[105] = 0x0;
    mask_[106] = 0x0;
    mask_[107] = 0x0;
    mask_[108] = 0x0;
    mask_[109] = 0x0;
    mask_[110] = 0x0;
    mask_[111] = 0x0;
    mask_[112] = 0x0;
    mask_[113] = 0x0;
    mask_[114] = 0x0;
    mask_[115] = 0x0;
    mask_[116] = 0x0;
    mask_[117] = 0x0;
    mask_[118] = 0x0;
    mask_[119] = 0x0;
    mask_[120] = 0x0;
    mask_[121] = 0x0;
    mask_[122] = 0x0;
    mask_[123] = 0x0;
    mask_[124] = 0x0;
    mask_[125] = 0x0;
    mask_[126] = 0x0;
    mask_[127] = 0x0;
    mask_[128] = 0x0;
    mask_[129] = 0x0;
    mask_[130] = 0x0;
    mask_[131] = 0x0;
    mask_[132] = 0x0;
    mask_[133] = 0x0;
    mask_[134] = 0x0;
    mask_[135] = 0x0;
    mask_[136] = 0x0;
    mask_[137] = 0x0;
    mask_[138] = 0x0;
    mask_[139] = 0x0;
    mask_[140] = 0x0;
    mask_[141] = 0x0;
    mask_[142] = 0x0;
    mask_[143] = 0x0;
    mask_[144] = 0x0;
    mask_[145] = 0x0;
    mask_[146] = 0x0;
    mask_[147] = 0x0;
    mask_[148] = 0x0;
    mask_[149] = 0x0;
    mask_[150] = 0x0;
    mask_[151] = 0x0;
    mask_[152] = 0x0;
    mask_[153] = 0x0;
    mask_[154] = 0x0;
    mask_[155] = 0x0;
    mask_[156] = 0x0;
    mask_[157] = 0x0;
    mask_[158] = 0x0;
    mask_[159] = 0x0;
    mask_[160] = 0x0;
    mask_[161] = 0x0;
    mask_[162] = 0x0;
    mask_[163] = 0x0;
    mask_[164] = 0x0;
    mask_[165] = 0x0;
    mask_[166] = 0x0;
    mask_[167] = 0x0;
    mask_[168] = 0x0;
    mask_[169] = 0x0;
    mask_[170] = 0x0;
    mask_[171] = 0x0;
    mask_[172] = 0x0;
    mask_[173] = 0x0;
    mask_[174] = 0x0;
    mask_[175] = 0x0;
    mask_[176] = 0x0;
    mask_[177] = 0x0;
    mask_[178] = 0x0;
    mask_[179] = 0x0;
    mask_[180] = 0x0;
    mask_[181] = 0x0;
    mask_[182] = 0x0;
    mask_[183] = 0x0;
    mask_[184] = 0x0;
    mask_[185] = 0x0;
    mask_[186] = 0x0;
    mask_[187] = 0x0;
    mask_[188] = 0x0;
    mask_[189] = 0x0;
    mask_[190] = 0x0;
    mask_[191] = 0x0;
    mask_[192] = 0x0;
    mask_[193] = 0x0;
    mask_[194] = 0x0;
    mask_[195] = 0x0;
    mask_[196] = 0x0;
    mask_[197] = 0x0;
    mask_[198] = 0x0;
    mask_[199] = 0x0;
    mask_[200] = 0x0;
    mask_[201] = 0x0;
    mask_[202] = 0x0;
    mask_[203] = 0x0;
    mask_[204] = 0x0;
    mask_[205] = 0x0;
    mask_[206] = 0x0;
    mask_[207] = 0x0;
    mask_[208] = 0x0;
    mask_[209] = 0x0;
    mask_[210] = 0x0;
    mask_[211] = 0x0;
    mask_[212] = 0x0;
    mask_[213] = 0x0;
    mask_[214] = 0x0;
    mask_[215] = 0x0;
    mask_[216] = 0x0;
    mask_[217] = 0x0;
    mask_[218] = 0x0;
    mask_[219] = 0x0;
    mask_[220] = 0x0;
    mask_[221] = 0x0;
    mask_[222] = 0x0;
    mask_[223] = 0x0;
    mask_[224] = 0x0;
    mask_[225] = 0x0;
    mask_[226] = 0x0;
    mask_[227] = 0x0;
    mask_[228] = 0x0;
    mask_[229] = 0x0;
    mask_[230] = 0x0;
    mask_[231] = 0x0;
    mask_[232] = 0x0;
    mask_[233] = 0x0;
    mask_[234] = 0x0;
    mask_[235] = 0x0;
    mask_[236] = 0x0;
    mask_[237] = 0x0;
    mask_[238] = 0x0;
    mask_[239] = 0x0;
    mask_[240] = 0x0;
    mask_[241] = 0x0;
    mask_[242] = 0x0;
    mask_[243] = 0x0;
    mask_[244] = 0x0;
    mask_[245] = 0x0;
    mask_[246] = 0x0;
    mask_[247] = 0x0;
    mask_[248] = 0x0;
    mask_[249] = 0x0;
    mask_[250] = 0x0;
    mask_[251] = 0x0;
    mask_[252] = 0x0;
    mask_[253] = 0x0;
    mask_[254] = 0x0;
    mask_[255] = 0x0;
    mask_[256] = 0x0;
    mask_[257] = 0x0;
    mask_[258] = 0x0;
    mask_[259] = 0x0;
    mask_[260] = 0x0;
    mask_[261] = 0x0;
    mask_[262] = 0x0;
    mask_[263] = 0x0;
    mask_[264] = 0x0;
    mask_[265] = 0x0;
    mask_[266] = 0x0;
    mask_[267] = 0x0;
    mask_[268] = 0x0;
    mask_[269] = 0x0;
    mask_[270] = 0x0;
    mask_[271] = 0x0;
    mask_[272] = 0x0;
    mask_[273] = 0x0;
    mask_[274] = 0x0;
    mask_[275] = 0x0;
    mask_[276] = 0x0;
    mask_[277] = 0x0;
    mask_[278] = 0x0;
    mask_[279] = 0x0;
    mask_[280] = 0x0;
    mask_[281] = 0x0;
    mask_[282] = 0x0;
    mask_[283] = 0x0;
    mask_[284] = 0x0;
    mask_[285] = 0x0;
    mask_[286] = 0x0;
    mask_[287] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PrePortMask") + ":\n";
    for (uint32_t f=0;f<288;++f) {
      r += indent_string + "  " + std::string("mask") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mask_[f]) ) + "\n";
      all_zeros &= (0 == mask_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PrePortMask") + ":\n";
    for (uint32_t f=0;f<288;++f) {
      r += indent_string + "  " + std::string("mask") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(mask_[f]) ) + "\n";
      all_zeros &= (0 == mask_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 288 > mask_;
private:
  static int StartOffset(
      int index_pre_port_mask
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x200000; // to get to tm_pre_top
    offset += 0x20000; // to get to pre_common
    offset += 0x80; // to get to port_mask
    assert(index_pre_port_mask < 2);
    offset += index_pre_port_mask * 0x24; // pre_port_mask[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_PRE_PORT_MASK_H__
