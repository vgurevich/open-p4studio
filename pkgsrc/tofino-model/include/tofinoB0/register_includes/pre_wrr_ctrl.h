/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PRE_WRR_CTRL_H__
#define __REGISTER_INCLUDES_PRE_WRR_CTRL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class PreWrrCtrl : public model_core::RegisterBlock<RegisterCallback> {
public:
  PreWrrCtrl(
      int chipNumber, int index_tm_pre_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_pre_pipe_rspec), 4, false, write_callback, read_callback, std::string("PreWrrCtrl")+":"+boost::lexical_cast<std::string>(index_tm_pre_pipe_rspec))
    {
    }
  PreWrrCtrl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PreWrrCtrl")
    {
    }
public:




  uint8_t &wrr_pri0() { return wrr_pri0_; }




  uint8_t &wrr_pri1() { return wrr_pri1_; }




  uint8_t &wrr_pri2() { return wrr_pri2_; }




  uint8_t &wrr_pri3() { return wrr_pri3_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = wrr_pri0_;
    *data |= (wrr_pri1_ << 8);
    *data |= (wrr_pri2_ << 16);
    *data |= (wrr_pri3_ << 24);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    wrr_pri0_ = data;
    wrr_pri1_ = (data >> 8);
    wrr_pri2_ = (data >> 16);
    wrr_pri3_ = (data >> 24);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    wrr_pri0_ = 0xff;
    wrr_pri1_ = 0xff;
    wrr_pri2_ = 0xff;
    wrr_pri3_ = 0xff;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PreWrrCtrl") + ":\n";
    r += indent_string + "  " + std::string("wrr_pri0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wrr_pri0_) ) + "\n";
    all_zeros &= (0 == wrr_pri0_);
    r += indent_string + "  " + std::string("wrr_pri1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wrr_pri1_) ) + "\n";
    all_zeros &= (0 == wrr_pri1_);
    r += indent_string + "  " + std::string("wrr_pri2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wrr_pri2_) ) + "\n";
    all_zeros &= (0 == wrr_pri2_);
    r += indent_string + "  " + std::string("wrr_pri3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wrr_pri3_) ) + "\n";
    all_zeros &= (0 == wrr_pri3_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PreWrrCtrl") + ":\n";
    r += indent_string + "  " + std::string("wrr_pri0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wrr_pri0_) ) + "\n";
    all_zeros &= (0 == wrr_pri0_);
    r += indent_string + "  " + std::string("wrr_pri1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wrr_pri1_) ) + "\n";
    all_zeros &= (0 == wrr_pri1_);
    r += indent_string + "  " + std::string("wrr_pri2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wrr_pri2_) ) + "\n";
    all_zeros &= (0 == wrr_pri2_);
    r += indent_string + "  " + std::string("wrr_pri3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(wrr_pri3_) ) + "\n";
    all_zeros &= (0 == wrr_pri3_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t wrr_pri0_;
  uint8_t wrr_pri1_;
  uint8_t wrr_pri2_;
  uint8_t wrr_pri3_;
private:
  static int StartOffset(
      int index_tm_pre_pipe_rspec
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x200000; // to get to tm_pre_top
    assert(index_tm_pre_pipe_rspec < 4);
    offset += index_tm_pre_pipe_rspec * 0x8000; // tm_pre_pipe_rspec[]
    offset += 0x8; // to get to wrr_ctrl
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_PRE_WRR_CTRL_H__
