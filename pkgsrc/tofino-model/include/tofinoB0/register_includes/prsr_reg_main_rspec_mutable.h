/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "parity_control_r_mutable.h"
#include "prsr_reg_main_rspec_a_emp_thresh_mutable.h"
#include "prsr_reg_main_rspec_aram_mbe_cnt_mutable.h"
#include "prsr_reg_main_rspec_aram_mbe_errlog_mutable.h"
#include "prsr_reg_main_rspec_aram_sbe_cnt_mutable.h"
#include "prsr_reg_main_rspec_aram_sbe_errlog_mutable.h"
#include "prsr_reg_main_rspec_csum_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_ctr_range_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_ctr_range_errlog_mutable.h"
#include "prsr_reg_main_rspec_debug_ctrl_mutable.h"
#include "prsr_reg_main_rspec_dst_cont_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_dst_cont_errlog_mutable.h"
#include "prsr_reg_main_rspec_ecc_mutable.h"
#include "prsr_reg_main_rspec_enable_mutable.h"
#include "prsr_reg_main_rspec_err_phv_cfg_mutable.h"
#include "prsr_reg_main_rspec_fcs_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_hdr_byte_cnt_mutable.h"
#include "prsr_reg_main_rspec_hdr_len_adj_mutable.h"
#include "prsr_reg_main_rspec_ibuf_oflow_errlog_mutable.h"
#include "prsr_reg_main_rspec_ibuf_uflow_errlog_mutable.h"
#include "prsr_reg_main_rspec_idle_cnt_mutable.h"
#include "prsr_reg_main_rspec_intr_mutable.h"
#include "prsr_reg_main_rspec_max_cycle_mutable.h"
#include "prsr_reg_main_rspec_max_iter_mutable.h"
#include "prsr_reg_main_rspec_mode_mutable.h"
#include "prsr_reg_main_rspec_multi_wr_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_multi_wr_errlog_mutable.h"
#include "prsr_reg_main_rspec_no_multi_wr_mutable.h"
#include "prsr_reg_main_rspec_no_tcam_match_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_no_tcam_match_errlog_mutable.h"
#include "prsr_reg_main_rspec_op_fifo_full_cnt_mutable.h"
#include "prsr_reg_main_rspec_op_fifo_full_stall_cnt_mutable.h"
#include "prsr_reg_main_rspec_op_fifo_oflow_errlog_mutable.h"
#include "prsr_reg_main_rspec_op_fifo_uflow_errlog_mutable.h"
#include "prsr_reg_main_rspec_partial_hdr_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_partial_hdr_errlog_mutable.h"
#include "prsr_reg_main_rspec_phv_owner_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_phv_owner_errlog_mutable.h"
#include "prsr_reg_main_rspec_phv_owner_mutable.h"
#include "prsr_reg_main_rspec_pkt_drop_cnt_mutable.h"
#include "prsr_reg_main_rspec_pri_start_mutable.h"
#include "prsr_reg_main_rspec_pri_thresh_mutable.h"
#include "prsr_reg_main_rspec_src_ext_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_src_ext_errlog_mutable.h"
#include "prsr_reg_main_rspec_start_state_mutable.h"
#include "prsr_reg_main_rspec_tcam_par_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_tcam_par_errlog_mutable.h"
#include "prsr_reg_main_rspec_timeout_cycle_err_cnt_mutable.h"
#include "prsr_reg_main_rspec_timeout_iter_err_cnt_mutable.h"
#include "scratch_r_mutable.h"

namespace tofinoB0 {
  namespace register_classes {

class PrsrRegMainRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum PmarbRspecEnum {
    kEbp18Reg,
    kIbp18Reg
  };
public:
  PrsrRegMainRspecMutable(
      int chipNumber, int index_pipe_addrmap, PmarbRspecEnum selector_pmarb_rspec, int index_ebp_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, selector_pmarb_rspec, index_ebp_rspec), 504, true, write_callback, read_callback, std::string("PrsrRegMainRspecMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(selector_pmarb_rspec) + "," + boost::lexical_cast<std::string>(index_ebp_rspec))
    {
    }
  PrsrRegMainRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PrsrRegMainRspecMutable")
    {
    }
public:





  ScratchRMutable &scratch() { return scratch_; }





  PrsrRegMainRspecModeMutable &mode() { return mode_; }





  PrsrRegMainRspecEnableMutable &enable() { return enable_; }





  PrsrRegMainRspecStartStateMutable &start_state() { return start_state_; }






  PrsrRegMainRspecMaxIterMutable &max_iter() { return max_iter_; }






  PrsrRegMainRspecMaxCycleMutable &max_cycle() { return max_cycle_; }





  PrsrRegMainRspecPriStartMutable &pri_start() { return pri_start_; }







  PrsrRegMainRspecPriThreshMutable &pri_thresh() { return pri_thresh_; }







  PrsrRegMainRspecAEmpThreshMutable &a_emp_thresh() { return a_emp_thresh_; }





  PrsrRegMainRspecHdrLenAdjMutable &hdr_len_adj() { return hdr_len_adj_; }





  PrsrRegMainRspecPhvOwnerMutable &phv_owner() { return phv_owner_; }







  PrsrRegMainRspecNoMultiWrMutable &no_multi_wr() { return no_multi_wr_; }





  PrsrRegMainRspecErrPhvCfgMutable &err_phv_cfg() { return err_phv_cfg_; }






  PrsrRegMainRspecHdrByteCntMutable &hdr_byte_cnt(int j0) { return hdr_byte_cnt_[j0]; }






  PrsrRegMainRspecIdleCntMutable &idle_cnt(int j0) { return idle_cnt_[j0]; }






  PrsrRegMainRspecPktDropCntMutable &pkt_drop_cnt(int j0) { return pkt_drop_cnt_[j0]; }




  PrsrRegMainRspecOpFifoFullCntMutable &op_fifo_full_cnt() { return op_fifo_full_cnt_; }




  PrsrRegMainRspecOpFifoFullStallCntMutable &op_fifo_full_stall_cnt() { return op_fifo_full_stall_cnt_; }




  PrsrRegMainRspecNoTcamMatchErrCntMutable &no_tcam_match_err_cnt() { return no_tcam_match_err_cnt_; }




  PrsrRegMainRspecPartialHdrErrCntMutable &partial_hdr_err_cnt() { return partial_hdr_err_cnt_; }




  PrsrRegMainRspecCtrRangeErrCntMutable &ctr_range_err_cnt() { return ctr_range_err_cnt_; }




  PrsrRegMainRspecTimeoutIterErrCntMutable &timeout_iter_err_cnt() { return timeout_iter_err_cnt_; }




  PrsrRegMainRspecTimeoutCycleErrCntMutable &timeout_cycle_err_cnt() { return timeout_cycle_err_cnt_; }




  PrsrRegMainRspecSrcExtErrCntMutable &src_ext_err_cnt() { return src_ext_err_cnt_; }




  PrsrRegMainRspecDstContErrCntMutable &dst_cont_err_cnt() { return dst_cont_err_cnt_; }




  PrsrRegMainRspecPhvOwnerErrCntMutable &phv_owner_err_cnt() { return phv_owner_err_cnt_; }




  PrsrRegMainRspecMultiWrErrCntMutable &multi_wr_err_cnt() { return multi_wr_err_cnt_; }




  PrsrRegMainRspecAramSbeCntMutable &aram_sbe_cnt() { return aram_sbe_cnt_; }




  PrsrRegMainRspecAramMbeCntMutable &aram_mbe_cnt() { return aram_mbe_cnt_; }




  PrsrRegMainRspecFcsErrCntMutable &fcs_err_cnt() { return fcs_err_cnt_; }




  PrsrRegMainRspecCsumErrCntMutable &csum_err_cnt() { return csum_err_cnt_; }




  PrsrRegMainRspecTcamParErrCntMutable &tcam_par_err_cnt() { return tcam_par_err_cnt_; }





  PrsrRegMainRspecNoTcamMatchErrlogMutable &no_tcam_match_errlog() { return no_tcam_match_errlog_; }





  PrsrRegMainRspecPartialHdrErrlogMutable &partial_hdr_errlog() { return partial_hdr_errlog_; }





  PrsrRegMainRspecCtrRangeErrlogMutable &ctr_range_errlog() { return ctr_range_errlog_; }





  PrsrRegMainRspecSrcExtErrlogMutable &src_ext_errlog() { return src_ext_errlog_; }





  PrsrRegMainRspecDstContErrlogMutable &dst_cont_errlog() { return dst_cont_errlog_; }





  PrsrRegMainRspecPhvOwnerErrlogMutable &phv_owner_errlog() { return phv_owner_errlog_; }





  PrsrRegMainRspecMultiWrErrlogMutable &multi_wr_errlog() { return multi_wr_errlog_; }





  PrsrRegMainRspecAramSbeErrlogMutable &aram_sbe_errlog() { return aram_sbe_errlog_; }





  PrsrRegMainRspecAramMbeErrlogMutable &aram_mbe_errlog() { return aram_mbe_errlog_; }





  PrsrRegMainRspecTcamParErrlogMutable &tcam_par_errlog() { return tcam_par_errlog_; }





  PrsrRegMainRspecIbufOflowErrlogMutable &ibuf_oflow_errlog() { return ibuf_oflow_errlog_; }





  PrsrRegMainRspecIbufUflowErrlogMutable &ibuf_uflow_errlog() { return ibuf_uflow_errlog_; }





  PrsrRegMainRspecOpFifoOflowErrlogMutable &op_fifo_oflow_errlog() { return op_fifo_oflow_errlog_; }





  PrsrRegMainRspecOpFifoUflowErrlogMutable &op_fifo_uflow_errlog() { return op_fifo_uflow_errlog_; }








  PrsrRegMainRspecEccMutable &ecc() { return ecc_; }





  ParityControlRMutable &parity() { return parity_; }





  PrsrRegMainRspecDebugCtrlMutable &debug_ctrl() { return debug_ctrl_; }
  PrsrRegMainRspecIntrMutable &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      scratch_.read( offset, data );
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      if (read_callback_) read_callback_();
      mode_.read( offset, data );
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      enable_.read( offset, data );
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      start_state_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      max_iter_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      max_cycle_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      pri_start_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      pri_thresh_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      a_emp_thresh_.read( offset, data );
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      if (read_callback_) read_callback_();
      hdr_len_adj_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x70) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      phv_owner_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xb0) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      no_multi_wr_.read( offset, data );
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      if (read_callback_) read_callback_();
      err_phv_cfg_.read( offset, data );
    }
    else if (offset >= 0xc0 && offset < 0xe0) {
      offset -= 0xc0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      hdr_byte_cnt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0xe0 && offset < 0x100) {
      offset -= 0xe0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      idle_cnt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x120) {
      offset -= 0x100;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      if (read_callback_) read_callback_();
      pkt_drop_cnt_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x120 && offset < 0x128) {
      offset -= 0x120;
      if (read_callback_) read_callback_();
      op_fifo_full_cnt_.read( offset, data );
    }
    else if (offset >= 0x128 && offset < 0x130) {
      offset -= 0x128;
      if (read_callback_) read_callback_();
      op_fifo_full_stall_cnt_.read( offset, data );
    }
    else if (offset >= 0x130 && offset < 0x138) {
      offset -= 0x130;
      if (read_callback_) read_callback_();
      no_tcam_match_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x138 && offset < 0x140) {
      offset -= 0x138;
      if (read_callback_) read_callback_();
      partial_hdr_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x140 && offset < 0x148) {
      offset -= 0x140;
      if (read_callback_) read_callback_();
      ctr_range_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x148 && offset < 0x150) {
      offset -= 0x148;
      if (read_callback_) read_callback_();
      timeout_iter_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x150 && offset < 0x158) {
      offset -= 0x150;
      if (read_callback_) read_callback_();
      timeout_cycle_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x158 && offset < 0x160) {
      offset -= 0x158;
      if (read_callback_) read_callback_();
      src_ext_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x160 && offset < 0x168) {
      offset -= 0x160;
      if (read_callback_) read_callback_();
      dst_cont_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x168 && offset < 0x170) {
      offset -= 0x168;
      if (read_callback_) read_callback_();
      phv_owner_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x170 && offset < 0x178) {
      offset -= 0x170;
      if (read_callback_) read_callback_();
      multi_wr_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x178 && offset < 0x180) {
      offset -= 0x178;
      if (read_callback_) read_callback_();
      aram_sbe_cnt_.read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x188) {
      offset -= 0x180;
      if (read_callback_) read_callback_();
      aram_mbe_cnt_.read( offset, data );
    }
    else if (offset >= 0x188 && offset < 0x190) {
      offset -= 0x188;
      if (read_callback_) read_callback_();
      fcs_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x190 && offset < 0x198) {
      offset -= 0x190;
      if (read_callback_) read_callback_();
      csum_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x198 && offset < 0x1a0) {
      offset -= 0x198;
      if (read_callback_) read_callback_();
      tcam_par_err_cnt_.read( offset, data );
    }
    else if (offset >= 0x1b4 && offset < 0x1b8) {
      offset -= 0x1b4;
      if (read_callback_) read_callback_();
      no_tcam_match_errlog_.read( offset, data );
    }
    else if (offset >= 0x1b8 && offset < 0x1bc) {
      offset -= 0x1b8;
      if (read_callback_) read_callback_();
      partial_hdr_errlog_.read( offset, data );
    }
    else if (offset >= 0x1bc && offset < 0x1c0) {
      offset -= 0x1bc;
      if (read_callback_) read_callback_();
      ctr_range_errlog_.read( offset, data );
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      if (read_callback_) read_callback_();
      src_ext_errlog_.read( offset, data );
    }
    else if (offset >= 0x1c4 && offset < 0x1c8) {
      offset -= 0x1c4;
      if (read_callback_) read_callback_();
      dst_cont_errlog_.read( offset, data );
    }
    else if (offset >= 0x1c8 && offset < 0x1cc) {
      offset -= 0x1c8;
      if (read_callback_) read_callback_();
      phv_owner_errlog_.read( offset, data );
    }
    else if (offset >= 0x1cc && offset < 0x1d0) {
      offset -= 0x1cc;
      if (read_callback_) read_callback_();
      multi_wr_errlog_.read( offset, data );
    }
    else if (offset >= 0x1d0 && offset < 0x1d4) {
      offset -= 0x1d0;
      if (read_callback_) read_callback_();
      aram_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x1d4 && offset < 0x1d8) {
      offset -= 0x1d4;
      if (read_callback_) read_callback_();
      aram_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x1d8 && offset < 0x1dc) {
      offset -= 0x1d8;
      if (read_callback_) read_callback_();
      tcam_par_errlog_.read( offset, data );
    }
    else if (offset >= 0x1dc && offset < 0x1e0) {
      offset -= 0x1dc;
      if (read_callback_) read_callback_();
      ibuf_oflow_errlog_.read( offset, data );
    }
    else if (offset >= 0x1e0 && offset < 0x1e4) {
      offset -= 0x1e0;
      if (read_callback_) read_callback_();
      ibuf_uflow_errlog_.read( offset, data );
    }
    else if (offset >= 0x1e4 && offset < 0x1e8) {
      offset -= 0x1e4;
      if (read_callback_) read_callback_();
      op_fifo_oflow_errlog_.read( offset, data );
    }
    else if (offset >= 0x1e8 && offset < 0x1ec) {
      offset -= 0x1e8;
      if (read_callback_) read_callback_();
      op_fifo_uflow_errlog_.read( offset, data );
    }
    else if (offset >= 0x1ec && offset < 0x1f0) {
      offset -= 0x1ec;
      if (read_callback_) read_callback_();
      ecc_.read( offset, data );
    }
    else if (offset >= 0x1f0 && offset < 0x1f4) {
      offset -= 0x1f0;
      if (read_callback_) read_callback_();
      parity_.read( offset, data );
    }
    else if (offset >= 0x1f4 && offset < 0x1f8) {
      offset -= 0x1f4;
      if (read_callback_) read_callback_();
      debug_ctrl_.read( offset, data );
    }
    else if (offset >= 0x1a0 && offset < 0x1b4) {
      offset -= 0x1a0;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      scratch_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      mode_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      start_state_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      max_iter_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      max_cycle_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      pri_start_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      pri_thresh_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      a_emp_thresh_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      hdr_len_adj_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x70) {
      offset -= 0x40;
      phv_owner_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xb0) {
      offset -= 0x80;
      no_multi_wr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      err_phv_cfg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc0 && offset < 0xe0) {
      offset -= 0xc0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      hdr_byte_cnt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xe0 && offset < 0x100) {
      offset -= 0xe0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      idle_cnt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x120) {
      offset -= 0x100;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      pkt_drop_cnt_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x120 && offset < 0x128) {
      offset -= 0x120;
      op_fifo_full_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x128 && offset < 0x130) {
      offset -= 0x128;
      op_fifo_full_stall_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x130 && offset < 0x138) {
      offset -= 0x130;
      no_tcam_match_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x138 && offset < 0x140) {
      offset -= 0x138;
      partial_hdr_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x140 && offset < 0x148) {
      offset -= 0x140;
      ctr_range_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x148 && offset < 0x150) {
      offset -= 0x148;
      timeout_iter_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x150 && offset < 0x158) {
      offset -= 0x150;
      timeout_cycle_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x158 && offset < 0x160) {
      offset -= 0x158;
      src_ext_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x160 && offset < 0x168) {
      offset -= 0x160;
      dst_cont_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x168 && offset < 0x170) {
      offset -= 0x168;
      phv_owner_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x170 && offset < 0x178) {
      offset -= 0x170;
      multi_wr_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x178 && offset < 0x180) {
      offset -= 0x178;
      aram_sbe_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x188) {
      offset -= 0x180;
      aram_mbe_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x188 && offset < 0x190) {
      offset -= 0x188;
      fcs_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x190 && offset < 0x198) {
      offset -= 0x190;
      csum_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x198 && offset < 0x1a0) {
      offset -= 0x198;
      tcam_par_err_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1b4 && offset < 0x1b8) {
      offset -= 0x1b4;
      no_tcam_match_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1b8 && offset < 0x1bc) {
      offset -= 0x1b8;
      partial_hdr_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1bc && offset < 0x1c0) {
      offset -= 0x1bc;
      ctr_range_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      src_ext_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c4 && offset < 0x1c8) {
      offset -= 0x1c4;
      dst_cont_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c8 && offset < 0x1cc) {
      offset -= 0x1c8;
      phv_owner_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1cc && offset < 0x1d0) {
      offset -= 0x1cc;
      multi_wr_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1d0 && offset < 0x1d4) {
      offset -= 0x1d0;
      aram_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1d4 && offset < 0x1d8) {
      offset -= 0x1d4;
      aram_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1d8 && offset < 0x1dc) {
      offset -= 0x1d8;
      tcam_par_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1dc && offset < 0x1e0) {
      offset -= 0x1dc;
      ibuf_oflow_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e0 && offset < 0x1e4) {
      offset -= 0x1e0;
      ibuf_uflow_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e4 && offset < 0x1e8) {
      offset -= 0x1e4;
      op_fifo_oflow_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1e8 && offset < 0x1ec) {
      offset -= 0x1e8;
      op_fifo_uflow_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1ec && offset < 0x1f0) {
      offset -= 0x1ec;
      ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1f0 && offset < 0x1f4) {
      offset -= 0x1f0;
      parity_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1f4 && offset < 0x1f8) {
      offset -= 0x1f4;
      debug_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1a0 && offset < 0x1b4) {
      offset -= 0x1a0;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    scratch_.reset();
    mode_.reset();
    enable_.reset();
    start_state_.reset();
    max_iter_.reset();
    max_cycle_.reset();
    pri_start_.reset();
    pri_thresh_.reset();
    a_emp_thresh_.reset();
    hdr_len_adj_.reset();
    phv_owner_.reset();
    no_multi_wr_.reset();
    err_phv_cfg_.reset();
    for (auto &f0 : hdr_byte_cnt_) {
      f0.reset();
    }
    for (auto &f0 : idle_cnt_) {
      f0.reset();
    }
    for (auto &f0 : pkt_drop_cnt_) {
      f0.reset();
    }
    op_fifo_full_cnt_.reset();
    op_fifo_full_stall_cnt_.reset();
    no_tcam_match_err_cnt_.reset();
    partial_hdr_err_cnt_.reset();
    ctr_range_err_cnt_.reset();
    timeout_iter_err_cnt_.reset();
    timeout_cycle_err_cnt_.reset();
    src_ext_err_cnt_.reset();
    dst_cont_err_cnt_.reset();
    phv_owner_err_cnt_.reset();
    multi_wr_err_cnt_.reset();
    aram_sbe_cnt_.reset();
    aram_mbe_cnt_.reset();
    fcs_err_cnt_.reset();
    csum_err_cnt_.reset();
    tcam_par_err_cnt_.reset();
    no_tcam_match_errlog_.reset();
    partial_hdr_errlog_.reset();
    ctr_range_errlog_.reset();
    src_ext_errlog_.reset();
    dst_cont_errlog_.reset();
    phv_owner_errlog_.reset();
    multi_wr_errlog_.reset();
    aram_sbe_errlog_.reset();
    aram_mbe_errlog_.reset();
    tcam_par_errlog_.reset();
    ibuf_oflow_errlog_.reset();
    ibuf_uflow_errlog_.reset();
    op_fifo_oflow_errlog_.reset();
    op_fifo_uflow_errlog_.reset();
    ecc_.reset();
    parity_.reset();
    debug_ctrl_.reset();
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += scratch_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4 && offset < 0x8) {
      offset -= 0x4;
      r += mode_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x8 && offset < 0xc) {
      offset -= 0x8;
      r += enable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += start_state_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += max_iter_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += max_cycle_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += pri_start_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += pri_thresh_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      offset -= 0x20;
      r += a_emp_thresh_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x24 && offset < 0x28) {
      offset -= 0x24;
      r += hdr_len_adj_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x70) {
      offset -= 0x40;
      r += phv_owner_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xb0) {
      offset -= 0x80;
      r += no_multi_wr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xb0 && offset < 0xb4) {
      offset -= 0xb0;
      r += err_phv_cfg_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xc0 && offset < 0xe0) {
      offset -= 0xc0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += hdr_byte_cnt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0xe0 && offset < 0x100) {
      offset -= 0xe0;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += idle_cnt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x120) {
      offset -= 0x100;
      int i0 = offset / 0x8;
      offset  -= i0 * 0x8;
      r += pkt_drop_cnt_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x120 && offset < 0x128) {
      offset -= 0x120;
      r += op_fifo_full_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x128 && offset < 0x130) {
      offset -= 0x128;
      r += op_fifo_full_stall_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x130 && offset < 0x138) {
      offset -= 0x130;
      r += no_tcam_match_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x138 && offset < 0x140) {
      offset -= 0x138;
      r += partial_hdr_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x140 && offset < 0x148) {
      offset -= 0x140;
      r += ctr_range_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x148 && offset < 0x150) {
      offset -= 0x148;
      r += timeout_iter_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x150 && offset < 0x158) {
      offset -= 0x150;
      r += timeout_cycle_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x158 && offset < 0x160) {
      offset -= 0x158;
      r += src_ext_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x160 && offset < 0x168) {
      offset -= 0x160;
      r += dst_cont_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x168 && offset < 0x170) {
      offset -= 0x168;
      r += phv_owner_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x170 && offset < 0x178) {
      offset -= 0x170;
      r += multi_wr_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x178 && offset < 0x180) {
      offset -= 0x178;
      r += aram_sbe_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x188) {
      offset -= 0x180;
      r += aram_mbe_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x188 && offset < 0x190) {
      offset -= 0x188;
      r += fcs_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x190 && offset < 0x198) {
      offset -= 0x190;
      r += csum_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x198 && offset < 0x1a0) {
      offset -= 0x198;
      r += tcam_par_err_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1b4 && offset < 0x1b8) {
      offset -= 0x1b4;
      r += no_tcam_match_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1b8 && offset < 0x1bc) {
      offset -= 0x1b8;
      r += partial_hdr_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1bc && offset < 0x1c0) {
      offset -= 0x1bc;
      r += ctr_range_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c0 && offset < 0x1c4) {
      offset -= 0x1c0;
      r += src_ext_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c4 && offset < 0x1c8) {
      offset -= 0x1c4;
      r += dst_cont_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c8 && offset < 0x1cc) {
      offset -= 0x1c8;
      r += phv_owner_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1cc && offset < 0x1d0) {
      offset -= 0x1cc;
      r += multi_wr_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1d0 && offset < 0x1d4) {
      offset -= 0x1d0;
      r += aram_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1d4 && offset < 0x1d8) {
      offset -= 0x1d4;
      r += aram_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1d8 && offset < 0x1dc) {
      offset -= 0x1d8;
      r += tcam_par_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1dc && offset < 0x1e0) {
      offset -= 0x1dc;
      r += ibuf_oflow_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e0 && offset < 0x1e4) {
      offset -= 0x1e0;
      r += ibuf_uflow_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e4 && offset < 0x1e8) {
      offset -= 0x1e4;
      r += op_fifo_oflow_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1e8 && offset < 0x1ec) {
      offset -= 0x1e8;
      r += op_fifo_uflow_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1ec && offset < 0x1f0) {
      offset -= 0x1ec;
      r += ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1f0 && offset < 0x1f4) {
      offset -= 0x1f0;
      r += parity_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1f4 && offset < 0x1f8) {
      offset -= 0x1f4;
      r += debug_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1a0 && offset < 0x1b4) {
      offset -= 0x1a0;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += scratch_.to_string(print_zeros,indent_string) ;
    r += mode_.to_string(print_zeros,indent_string) ;
    r += enable_.to_string(print_zeros,indent_string) ;
    r += start_state_.to_string(print_zeros,indent_string) ;
    r += max_iter_.to_string(print_zeros,indent_string) ;
    r += max_cycle_.to_string(print_zeros,indent_string) ;
    r += pri_start_.to_string(print_zeros,indent_string) ;
    r += pri_thresh_.to_string(print_zeros,indent_string) ;
    r += a_emp_thresh_.to_string(print_zeros,indent_string) ;
    r += hdr_len_adj_.to_string(print_zeros,indent_string) ;
    r += phv_owner_.to_string(print_zeros,indent_string) ;
    r += no_multi_wr_.to_string(print_zeros,indent_string) ;
    r += err_phv_cfg_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += hdr_byte_cnt_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += idle_cnt_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<4;++a0) {
      r += pkt_drop_cnt_[a0].to_string(print_zeros,indent_string) ;
    }
    r += op_fifo_full_cnt_.to_string(print_zeros,indent_string) ;
    r += op_fifo_full_stall_cnt_.to_string(print_zeros,indent_string) ;
    r += no_tcam_match_err_cnt_.to_string(print_zeros,indent_string) ;
    r += partial_hdr_err_cnt_.to_string(print_zeros,indent_string) ;
    r += ctr_range_err_cnt_.to_string(print_zeros,indent_string) ;
    r += timeout_iter_err_cnt_.to_string(print_zeros,indent_string) ;
    r += timeout_cycle_err_cnt_.to_string(print_zeros,indent_string) ;
    r += src_ext_err_cnt_.to_string(print_zeros,indent_string) ;
    r += dst_cont_err_cnt_.to_string(print_zeros,indent_string) ;
    r += phv_owner_err_cnt_.to_string(print_zeros,indent_string) ;
    r += multi_wr_err_cnt_.to_string(print_zeros,indent_string) ;
    r += aram_sbe_cnt_.to_string(print_zeros,indent_string) ;
    r += aram_mbe_cnt_.to_string(print_zeros,indent_string) ;
    r += fcs_err_cnt_.to_string(print_zeros,indent_string) ;
    r += csum_err_cnt_.to_string(print_zeros,indent_string) ;
    r += tcam_par_err_cnt_.to_string(print_zeros,indent_string) ;
    r += no_tcam_match_errlog_.to_string(print_zeros,indent_string) ;
    r += partial_hdr_errlog_.to_string(print_zeros,indent_string) ;
    r += ctr_range_errlog_.to_string(print_zeros,indent_string) ;
    r += src_ext_errlog_.to_string(print_zeros,indent_string) ;
    r += dst_cont_errlog_.to_string(print_zeros,indent_string) ;
    r += phv_owner_errlog_.to_string(print_zeros,indent_string) ;
    r += multi_wr_errlog_.to_string(print_zeros,indent_string) ;
    r += aram_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += aram_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += tcam_par_errlog_.to_string(print_zeros,indent_string) ;
    r += ibuf_oflow_errlog_.to_string(print_zeros,indent_string) ;
    r += ibuf_uflow_errlog_.to_string(print_zeros,indent_string) ;
    r += op_fifo_oflow_errlog_.to_string(print_zeros,indent_string) ;
    r += op_fifo_uflow_errlog_.to_string(print_zeros,indent_string) ;
    r += ecc_.to_string(print_zeros,indent_string) ;
    r += parity_.to_string(print_zeros,indent_string) ;
    r += debug_ctrl_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  ScratchRMutable scratch_;
  PrsrRegMainRspecModeMutable mode_;
  PrsrRegMainRspecEnableMutable enable_;
  PrsrRegMainRspecStartStateMutable start_state_;
  PrsrRegMainRspecMaxIterMutable max_iter_;
  PrsrRegMainRspecMaxCycleMutable max_cycle_;
  PrsrRegMainRspecPriStartMutable pri_start_;
  PrsrRegMainRspecPriThreshMutable pri_thresh_;
  PrsrRegMainRspecAEmpThreshMutable a_emp_thresh_;
  PrsrRegMainRspecHdrLenAdjMutable hdr_len_adj_;
  PrsrRegMainRspecPhvOwnerMutable phv_owner_;
  PrsrRegMainRspecNoMultiWrMutable no_multi_wr_;
  PrsrRegMainRspecErrPhvCfgMutable err_phv_cfg_;
  std::array< PrsrRegMainRspecHdrByteCntMutable, 4 > hdr_byte_cnt_;
  std::array< PrsrRegMainRspecIdleCntMutable, 4 > idle_cnt_;
  std::array< PrsrRegMainRspecPktDropCntMutable, 4 > pkt_drop_cnt_;
  PrsrRegMainRspecOpFifoFullCntMutable op_fifo_full_cnt_;
  PrsrRegMainRspecOpFifoFullStallCntMutable op_fifo_full_stall_cnt_;
  PrsrRegMainRspecNoTcamMatchErrCntMutable no_tcam_match_err_cnt_;
  PrsrRegMainRspecPartialHdrErrCntMutable partial_hdr_err_cnt_;
  PrsrRegMainRspecCtrRangeErrCntMutable ctr_range_err_cnt_;
  PrsrRegMainRspecTimeoutIterErrCntMutable timeout_iter_err_cnt_;
  PrsrRegMainRspecTimeoutCycleErrCntMutable timeout_cycle_err_cnt_;
  PrsrRegMainRspecSrcExtErrCntMutable src_ext_err_cnt_;
  PrsrRegMainRspecDstContErrCntMutable dst_cont_err_cnt_;
  PrsrRegMainRspecPhvOwnerErrCntMutable phv_owner_err_cnt_;
  PrsrRegMainRspecMultiWrErrCntMutable multi_wr_err_cnt_;
  PrsrRegMainRspecAramSbeCntMutable aram_sbe_cnt_;
  PrsrRegMainRspecAramMbeCntMutable aram_mbe_cnt_;
  PrsrRegMainRspecFcsErrCntMutable fcs_err_cnt_;
  PrsrRegMainRspecCsumErrCntMutable csum_err_cnt_;
  PrsrRegMainRspecTcamParErrCntMutable tcam_par_err_cnt_;
  PrsrRegMainRspecNoTcamMatchErrlogMutable no_tcam_match_errlog_;
  PrsrRegMainRspecPartialHdrErrlogMutable partial_hdr_errlog_;
  PrsrRegMainRspecCtrRangeErrlogMutable ctr_range_errlog_;
  PrsrRegMainRspecSrcExtErrlogMutable src_ext_errlog_;
  PrsrRegMainRspecDstContErrlogMutable dst_cont_errlog_;
  PrsrRegMainRspecPhvOwnerErrlogMutable phv_owner_errlog_;
  PrsrRegMainRspecMultiWrErrlogMutable multi_wr_errlog_;
  PrsrRegMainRspecAramSbeErrlogMutable aram_sbe_errlog_;
  PrsrRegMainRspecAramMbeErrlogMutable aram_mbe_errlog_;
  PrsrRegMainRspecTcamParErrlogMutable tcam_par_errlog_;
  PrsrRegMainRspecIbufOflowErrlogMutable ibuf_oflow_errlog_;
  PrsrRegMainRspecIbufUflowErrlogMutable ibuf_uflow_errlog_;
  PrsrRegMainRspecOpFifoOflowErrlogMutable op_fifo_oflow_errlog_;
  PrsrRegMainRspecOpFifoUflowErrlogMutable op_fifo_uflow_errlog_;
  PrsrRegMainRspecEccMutable ecc_;
  ParityControlRMutable parity_;
  PrsrRegMainRspecDebugCtrlMutable debug_ctrl_;
  PrsrRegMainRspecIntrMutable intr_;
private:
  static int StartOffset(
      int index_pipe_addrmap, PmarbRspecEnum selector_pmarb_rspec, int index_ebp_rspec
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    switch (selector_pmarb_rspec) {
      case kEbp18Reg:
        offset += 0x40000; // to get to ebp18_reg
        assert(index_ebp_rspec < 18);
        offset += index_ebp_rspec * 0x2000; // ebp_rspec[]
        break;
      case kIbp18Reg:
        assert(index_ebp_rspec < 18);
        offset += index_ebp_rspec * 0x2000; // ibp_rspec[]
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};





  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_MUTABLE_H__
