/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_NO_MULTI_WR_MUTABLE_H__
#define __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_NO_MULTI_WR_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class PrsrRegMainRspecNoMultiWrMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum PmarbRspecEnum {
    kEbp18Reg,
    kIbp18Reg
  };
public:
  PrsrRegMainRspecNoMultiWrMutable(
      int chipNumber, int index_pipe_addrmap, PmarbRspecEnum selector_pmarb_rspec, int index_ebp_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, selector_pmarb_rspec, index_ebp_rspec), 48, true, write_callback, read_callback, std::string("PrsrRegMainRspecNoMultiWrMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(selector_pmarb_rspec) + "," + boost::lexical_cast<std::string>(index_ebp_rspec))
    {
    }
  PrsrRegMainRspecNoMultiWrMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PrsrRegMainRspecNoMultiWrMutable")
    {
    }
public:



  uint8_t nmw(int j0) { return nmw_[j0]; }
  void nmw(int j0,const uint8_t &v) { nmw_[j0]=v; }



  uint8_t t_nmw(int j0) { return t_nmw_[j0]; }
  void t_nmw(int j0,const uint8_t &v) { t_nmw_[j0]=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (nmw_[0] & 0x1);
      *data |= ((nmw_[1] & 0x1) << 1);
      *data |= ((nmw_[2] & 0x1) << 2);
      *data |= ((nmw_[3] & 0x1) << 3);
      *data |= ((nmw_[4] & 0x1) << 4);
      *data |= ((nmw_[5] & 0x1) << 5);
      *data |= ((nmw_[6] & 0x1) << 6);
      *data |= ((nmw_[7] & 0x1) << 7);
      *data |= ((nmw_[8] & 0x1) << 8);
      *data |= ((nmw_[9] & 0x1) << 9);
      *data |= ((nmw_[10] & 0x1) << 10);
      *data |= ((nmw_[11] & 0x1) << 11);
      *data |= ((nmw_[12] & 0x1) << 12);
      *data |= ((nmw_[13] & 0x1) << 13);
      *data |= ((nmw_[14] & 0x1) << 14);
      *data |= ((nmw_[15] & 0x1) << 15);
      *data |= ((nmw_[16] & 0x1) << 16);
      *data |= ((nmw_[17] & 0x1) << 17);
      *data |= ((nmw_[18] & 0x1) << 18);
      *data |= ((nmw_[19] & 0x1) << 19);
      *data |= ((nmw_[20] & 0x1) << 20);
      *data |= ((nmw_[21] & 0x1) << 21);
      *data |= ((nmw_[22] & 0x1) << 22);
      *data |= ((nmw_[23] & 0x1) << 23);
      *data |= ((nmw_[24] & 0x1) << 24);
      *data |= ((nmw_[25] & 0x1) << 25);
      *data |= ((nmw_[26] & 0x1) << 26);
      *data |= ((nmw_[27] & 0x1) << 27);
      *data |= ((nmw_[28] & 0x1) << 28);
      *data |= ((nmw_[29] & 0x1) << 29);
      *data |= ((nmw_[30] & 0x1) << 30);
      *data |= ((nmw_[31] & 0x1) << 31);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (nmw_[32] & 0x1);
      *data |= ((nmw_[33] & 0x1) << 1);
      *data |= ((nmw_[34] & 0x1) << 2);
      *data |= ((nmw_[35] & 0x1) << 3);
      *data |= ((nmw_[36] & 0x1) << 4);
      *data |= ((nmw_[37] & 0x1) << 5);
      *data |= ((nmw_[38] & 0x1) << 6);
      *data |= ((nmw_[39] & 0x1) << 7);
      *data |= ((nmw_[40] & 0x1) << 8);
      *data |= ((nmw_[41] & 0x1) << 9);
      *data |= ((nmw_[42] & 0x1) << 10);
      *data |= ((nmw_[43] & 0x1) << 11);
      *data |= ((nmw_[44] & 0x1) << 12);
      *data |= ((nmw_[45] & 0x1) << 13);
      *data |= ((nmw_[46] & 0x1) << 14);
      *data |= ((nmw_[47] & 0x1) << 15);
      *data |= ((nmw_[48] & 0x1) << 16);
      *data |= ((nmw_[49] & 0x1) << 17);
      *data |= ((nmw_[50] & 0x1) << 18);
      *data |= ((nmw_[51] & 0x1) << 19);
      *data |= ((nmw_[52] & 0x1) << 20);
      *data |= ((nmw_[53] & 0x1) << 21);
      *data |= ((nmw_[54] & 0x1) << 22);
      *data |= ((nmw_[55] & 0x1) << 23);
      *data |= ((nmw_[56] & 0x1) << 24);
      *data |= ((nmw_[57] & 0x1) << 25);
      *data |= ((nmw_[58] & 0x1) << 26);
      *data |= ((nmw_[59] & 0x1) << 27);
      *data |= ((nmw_[60] & 0x1) << 28);
      *data |= ((nmw_[61] & 0x1) << 29);
      *data |= ((nmw_[62] & 0x1) << 30);
      *data |= ((nmw_[63] & 0x1) << 31);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = (nmw_[64] & 0x1);
      *data |= ((nmw_[65] & 0x1) << 1);
      *data |= ((nmw_[66] & 0x1) << 2);
      *data |= ((nmw_[67] & 0x1) << 3);
      *data |= ((nmw_[68] & 0x1) << 4);
      *data |= ((nmw_[69] & 0x1) << 5);
      *data |= ((nmw_[70] & 0x1) << 6);
      *data |= ((nmw_[71] & 0x1) << 7);
      *data |= ((nmw_[72] & 0x1) << 8);
      *data |= ((nmw_[73] & 0x1) << 9);
      *data |= ((nmw_[74] & 0x1) << 10);
      *data |= ((nmw_[75] & 0x1) << 11);
      *data |= ((nmw_[76] & 0x1) << 12);
      *data |= ((nmw_[77] & 0x1) << 13);
      *data |= ((nmw_[78] & 0x1) << 14);
      *data |= ((nmw_[79] & 0x1) << 15);
      *data |= ((nmw_[80] & 0x1) << 16);
      *data |= ((nmw_[81] & 0x1) << 17);
      *data |= ((nmw_[82] & 0x1) << 18);
      *data |= ((nmw_[83] & 0x1) << 19);
      *data |= ((nmw_[84] & 0x1) << 20);
      *data |= ((nmw_[85] & 0x1) << 21);
      *data |= ((nmw_[86] & 0x1) << 22);
      *data |= ((nmw_[87] & 0x1) << 23);
      *data |= ((nmw_[88] & 0x1) << 24);
      *data |= ((nmw_[89] & 0x1) << 25);
      *data |= ((nmw_[90] & 0x1) << 26);
      *data |= ((nmw_[91] & 0x1) << 27);
      *data |= ((nmw_[92] & 0x1) << 28);
      *data |= ((nmw_[93] & 0x1) << 29);
      *data |= ((nmw_[94] & 0x1) << 30);
      *data |= ((nmw_[95] & 0x1) << 31);
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = (nmw_[96] & 0x1);
      *data |= ((nmw_[97] & 0x1) << 1);
      *data |= ((nmw_[98] & 0x1) << 2);
      *data |= ((nmw_[99] & 0x1) << 3);
      *data |= ((nmw_[100] & 0x1) << 4);
      *data |= ((nmw_[101] & 0x1) << 5);
      *data |= ((nmw_[102] & 0x1) << 6);
      *data |= ((nmw_[103] & 0x1) << 7);
      *data |= ((nmw_[104] & 0x1) << 8);
      *data |= ((nmw_[105] & 0x1) << 9);
      *data |= ((nmw_[106] & 0x1) << 10);
      *data |= ((nmw_[107] & 0x1) << 11);
      *data |= ((nmw_[108] & 0x1) << 12);
      *data |= ((nmw_[109] & 0x1) << 13);
      *data |= ((nmw_[110] & 0x1) << 14);
      *data |= ((nmw_[111] & 0x1) << 15);
      *data |= ((nmw_[112] & 0x1) << 16);
      *data |= ((nmw_[113] & 0x1) << 17);
      *data |= ((nmw_[114] & 0x1) << 18);
      *data |= ((nmw_[115] & 0x1) << 19);
      *data |= ((nmw_[116] & 0x1) << 20);
      *data |= ((nmw_[117] & 0x1) << 21);
      *data |= ((nmw_[118] & 0x1) << 22);
      *data |= ((nmw_[119] & 0x1) << 23);
      *data |= ((nmw_[120] & 0x1) << 24);
      *data |= ((nmw_[121] & 0x1) << 25);
      *data |= ((nmw_[122] & 0x1) << 26);
      *data |= ((nmw_[123] & 0x1) << 27);
      *data |= ((nmw_[124] & 0x1) << 28);
      *data |= ((nmw_[125] & 0x1) << 29);
      *data |= ((nmw_[126] & 0x1) << 30);
      *data |= ((nmw_[127] & 0x1) << 31);
    }
    else if (offset >= 0x10 && offset < 0x14) {
      if (read_callback_) read_callback_();
      *data = (nmw_[128] & 0x1);
      *data |= ((nmw_[129] & 0x1) << 1);
      *data |= ((nmw_[130] & 0x1) << 2);
      *data |= ((nmw_[131] & 0x1) << 3);
      *data |= ((nmw_[132] & 0x1) << 4);
      *data |= ((nmw_[133] & 0x1) << 5);
      *data |= ((nmw_[134] & 0x1) << 6);
      *data |= ((nmw_[135] & 0x1) << 7);
      *data |= ((nmw_[136] & 0x1) << 8);
      *data |= ((nmw_[137] & 0x1) << 9);
      *data |= ((nmw_[138] & 0x1) << 10);
      *data |= ((nmw_[139] & 0x1) << 11);
      *data |= ((nmw_[140] & 0x1) << 12);
      *data |= ((nmw_[141] & 0x1) << 13);
      *data |= ((nmw_[142] & 0x1) << 14);
      *data |= ((nmw_[143] & 0x1) << 15);
      *data |= ((nmw_[144] & 0x1) << 16);
      *data |= ((nmw_[145] & 0x1) << 17);
      *data |= ((nmw_[146] & 0x1) << 18);
      *data |= ((nmw_[147] & 0x1) << 19);
      *data |= ((nmw_[148] & 0x1) << 20);
      *data |= ((nmw_[149] & 0x1) << 21);
      *data |= ((nmw_[150] & 0x1) << 22);
      *data |= ((nmw_[151] & 0x1) << 23);
      *data |= ((nmw_[152] & 0x1) << 24);
      *data |= ((nmw_[153] & 0x1) << 25);
      *data |= ((nmw_[154] & 0x1) << 26);
      *data |= ((nmw_[155] & 0x1) << 27);
      *data |= ((nmw_[156] & 0x1) << 28);
      *data |= ((nmw_[157] & 0x1) << 29);
      *data |= ((nmw_[158] & 0x1) << 30);
      *data |= ((nmw_[159] & 0x1) << 31);
    }
    else if (offset >= 0x14 && offset < 0x18) {
      if (read_callback_) read_callback_();
      *data = (nmw_[160] & 0x1);
      *data |= ((nmw_[161] & 0x1) << 1);
      *data |= ((nmw_[162] & 0x1) << 2);
      *data |= ((nmw_[163] & 0x1) << 3);
      *data |= ((nmw_[164] & 0x1) << 4);
      *data |= ((nmw_[165] & 0x1) << 5);
      *data |= ((nmw_[166] & 0x1) << 6);
      *data |= ((nmw_[167] & 0x1) << 7);
      *data |= ((nmw_[168] & 0x1) << 8);
      *data |= ((nmw_[169] & 0x1) << 9);
      *data |= ((nmw_[170] & 0x1) << 10);
      *data |= ((nmw_[171] & 0x1) << 11);
      *data |= ((nmw_[172] & 0x1) << 12);
      *data |= ((nmw_[173] & 0x1) << 13);
      *data |= ((nmw_[174] & 0x1) << 14);
      *data |= ((nmw_[175] & 0x1) << 15);
      *data |= ((nmw_[176] & 0x1) << 16);
      *data |= ((nmw_[177] & 0x1) << 17);
      *data |= ((nmw_[178] & 0x1) << 18);
      *data |= ((nmw_[179] & 0x1) << 19);
      *data |= ((nmw_[180] & 0x1) << 20);
      *data |= ((nmw_[181] & 0x1) << 21);
      *data |= ((nmw_[182] & 0x1) << 22);
      *data |= ((nmw_[183] & 0x1) << 23);
      *data |= ((nmw_[184] & 0x1) << 24);
      *data |= ((nmw_[185] & 0x1) << 25);
      *data |= ((nmw_[186] & 0x1) << 26);
      *data |= ((nmw_[187] & 0x1) << 27);
      *data |= ((nmw_[188] & 0x1) << 28);
      *data |= ((nmw_[189] & 0x1) << 29);
      *data |= ((nmw_[190] & 0x1) << 30);
      *data |= ((nmw_[191] & 0x1) << 31);
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      if (read_callback_) read_callback_();
      *data = (nmw_[192] & 0x1);
      *data |= ((nmw_[193] & 0x1) << 1);
      *data |= ((nmw_[194] & 0x1) << 2);
      *data |= ((nmw_[195] & 0x1) << 3);
      *data |= ((nmw_[196] & 0x1) << 4);
      *data |= ((nmw_[197] & 0x1) << 5);
      *data |= ((nmw_[198] & 0x1) << 6);
      *data |= ((nmw_[199] & 0x1) << 7);
      *data |= ((nmw_[200] & 0x1) << 8);
      *data |= ((nmw_[201] & 0x1) << 9);
      *data |= ((nmw_[202] & 0x1) << 10);
      *data |= ((nmw_[203] & 0x1) << 11);
      *data |= ((nmw_[204] & 0x1) << 12);
      *data |= ((nmw_[205] & 0x1) << 13);
      *data |= ((nmw_[206] & 0x1) << 14);
      *data |= ((nmw_[207] & 0x1) << 15);
      *data |= ((nmw_[208] & 0x1) << 16);
      *data |= ((nmw_[209] & 0x1) << 17);
      *data |= ((nmw_[210] & 0x1) << 18);
      *data |= ((nmw_[211] & 0x1) << 19);
      *data |= ((nmw_[212] & 0x1) << 20);
      *data |= ((nmw_[213] & 0x1) << 21);
      *data |= ((nmw_[214] & 0x1) << 22);
      *data |= ((nmw_[215] & 0x1) << 23);
      *data |= ((nmw_[216] & 0x1) << 24);
      *data |= ((nmw_[217] & 0x1) << 25);
      *data |= ((nmw_[218] & 0x1) << 26);
      *data |= ((nmw_[219] & 0x1) << 27);
      *data |= ((nmw_[220] & 0x1) << 28);
      *data |= ((nmw_[221] & 0x1) << 29);
      *data |= ((nmw_[222] & 0x1) << 30);
      *data |= ((nmw_[223] & 0x1) << 31);
    }
    else if (offset >= 0x1c && offset < 0x20) {
      if (read_callback_) read_callback_();
      *data = 0;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      if (read_callback_) read_callback_();
      *data = (t_nmw_[0] & 0x1);
      *data |= ((t_nmw_[1] & 0x1) << 1);
      *data |= ((t_nmw_[2] & 0x1) << 2);
      *data |= ((t_nmw_[3] & 0x1) << 3);
      *data |= ((t_nmw_[4] & 0x1) << 4);
      *data |= ((t_nmw_[5] & 0x1) << 5);
      *data |= ((t_nmw_[6] & 0x1) << 6);
      *data |= ((t_nmw_[7] & 0x1) << 7);
      *data |= ((t_nmw_[8] & 0x1) << 8);
      *data |= ((t_nmw_[9] & 0x1) << 9);
      *data |= ((t_nmw_[10] & 0x1) << 10);
      *data |= ((t_nmw_[11] & 0x1) << 11);
      *data |= ((t_nmw_[12] & 0x1) << 12);
      *data |= ((t_nmw_[13] & 0x1) << 13);
      *data |= ((t_nmw_[14] & 0x1) << 14);
      *data |= ((t_nmw_[15] & 0x1) << 15);
      *data |= ((t_nmw_[16] & 0x1) << 16);
      *data |= ((t_nmw_[17] & 0x1) << 17);
      *data |= ((t_nmw_[18] & 0x1) << 18);
      *data |= ((t_nmw_[19] & 0x1) << 19);
      *data |= ((t_nmw_[20] & 0x1) << 20);
      *data |= ((t_nmw_[21] & 0x1) << 21);
      *data |= ((t_nmw_[22] & 0x1) << 22);
      *data |= ((t_nmw_[23] & 0x1) << 23);
      *data |= ((t_nmw_[24] & 0x1) << 24);
      *data |= ((t_nmw_[25] & 0x1) << 25);
      *data |= ((t_nmw_[26] & 0x1) << 26);
      *data |= ((t_nmw_[27] & 0x1) << 27);
      *data |= ((t_nmw_[28] & 0x1) << 28);
      *data |= ((t_nmw_[29] & 0x1) << 29);
      *data |= ((t_nmw_[30] & 0x1) << 30);
      *data |= ((t_nmw_[31] & 0x1) << 31);
    }
    else if (offset >= 0x24 && offset < 0x28) {
      if (read_callback_) read_callback_();
      *data = (t_nmw_[32] & 0x1);
      *data |= ((t_nmw_[33] & 0x1) << 1);
      *data |= ((t_nmw_[34] & 0x1) << 2);
      *data |= ((t_nmw_[35] & 0x1) << 3);
      *data |= ((t_nmw_[36] & 0x1) << 4);
      *data |= ((t_nmw_[37] & 0x1) << 5);
      *data |= ((t_nmw_[38] & 0x1) << 6);
      *data |= ((t_nmw_[39] & 0x1) << 7);
      *data |= ((t_nmw_[40] & 0x1) << 8);
      *data |= ((t_nmw_[41] & 0x1) << 9);
      *data |= ((t_nmw_[42] & 0x1) << 10);
      *data |= ((t_nmw_[43] & 0x1) << 11);
      *data |= ((t_nmw_[44] & 0x1) << 12);
      *data |= ((t_nmw_[45] & 0x1) << 13);
      *data |= ((t_nmw_[46] & 0x1) << 14);
      *data |= ((t_nmw_[47] & 0x1) << 15);
      *data |= ((t_nmw_[48] & 0x1) << 16);
      *data |= ((t_nmw_[49] & 0x1) << 17);
      *data |= ((t_nmw_[50] & 0x1) << 18);
      *data |= ((t_nmw_[51] & 0x1) << 19);
      *data |= ((t_nmw_[52] & 0x1) << 20);
      *data |= ((t_nmw_[53] & 0x1) << 21);
      *data |= ((t_nmw_[54] & 0x1) << 22);
      *data |= ((t_nmw_[55] & 0x1) << 23);
      *data |= ((t_nmw_[56] & 0x1) << 24);
      *data |= ((t_nmw_[57] & 0x1) << 25);
      *data |= ((t_nmw_[58] & 0x1) << 26);
      *data |= ((t_nmw_[59] & 0x1) << 27);
      *data |= ((t_nmw_[60] & 0x1) << 28);
      *data |= ((t_nmw_[61] & 0x1) << 29);
      *data |= ((t_nmw_[62] & 0x1) << 30);
      *data |= ((t_nmw_[63] & 0x1) << 31);
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      if (read_callback_) read_callback_();
      *data = (t_nmw_[64] & 0x1);
      *data |= ((t_nmw_[65] & 0x1) << 1);
      *data |= ((t_nmw_[66] & 0x1) << 2);
      *data |= ((t_nmw_[67] & 0x1) << 3);
      *data |= ((t_nmw_[68] & 0x1) << 4);
      *data |= ((t_nmw_[69] & 0x1) << 5);
      *data |= ((t_nmw_[70] & 0x1) << 6);
      *data |= ((t_nmw_[71] & 0x1) << 7);
      *data |= ((t_nmw_[72] & 0x1) << 8);
      *data |= ((t_nmw_[73] & 0x1) << 9);
      *data |= ((t_nmw_[74] & 0x1) << 10);
      *data |= ((t_nmw_[75] & 0x1) << 11);
      *data |= ((t_nmw_[76] & 0x1) << 12);
      *data |= ((t_nmw_[77] & 0x1) << 13);
      *data |= ((t_nmw_[78] & 0x1) << 14);
      *data |= ((t_nmw_[79] & 0x1) << 15);
      *data |= ((t_nmw_[80] & 0x1) << 16);
      *data |= ((t_nmw_[81] & 0x1) << 17);
      *data |= ((t_nmw_[82] & 0x1) << 18);
      *data |= ((t_nmw_[83] & 0x1) << 19);
      *data |= ((t_nmw_[84] & 0x1) << 20);
      *data |= ((t_nmw_[85] & 0x1) << 21);
      *data |= ((t_nmw_[86] & 0x1) << 22);
      *data |= ((t_nmw_[87] & 0x1) << 23);
      *data |= ((t_nmw_[88] & 0x1) << 24);
      *data |= ((t_nmw_[89] & 0x1) << 25);
      *data |= ((t_nmw_[90] & 0x1) << 26);
      *data |= ((t_nmw_[91] & 0x1) << 27);
      *data |= ((t_nmw_[92] & 0x1) << 28);
      *data |= ((t_nmw_[93] & 0x1) << 29);
      *data |= ((t_nmw_[94] & 0x1) << 30);
      *data |= ((t_nmw_[95] & 0x1) << 31);
    }
    else if (offset >= 0x2c && offset < 0x30) {
      if (read_callback_) read_callback_();
      *data = (t_nmw_[96] & 0x1);
      *data |= ((t_nmw_[97] & 0x1) << 1);
      *data |= ((t_nmw_[98] & 0x1) << 2);
      *data |= ((t_nmw_[99] & 0x1) << 3);
      *data |= ((t_nmw_[100] & 0x1) << 4);
      *data |= ((t_nmw_[101] & 0x1) << 5);
      *data |= ((t_nmw_[102] & 0x1) << 6);
      *data |= ((t_nmw_[103] & 0x1) << 7);
      *data |= ((t_nmw_[104] & 0x1) << 8);
      *data |= ((t_nmw_[105] & 0x1) << 9);
      *data |= ((t_nmw_[106] & 0x1) << 10);
      *data |= ((t_nmw_[107] & 0x1) << 11);
      *data |= ((t_nmw_[108] & 0x1) << 12);
      *data |= ((t_nmw_[109] & 0x1) << 13);
      *data |= ((t_nmw_[110] & 0x1) << 14);
      *data |= ((t_nmw_[111] & 0x1) << 15);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      nmw_[0] = (data & 0x1);
      nmw_[1] = ((data >> 1) & 0x1);
      nmw_[2] = ((data >> 2) & 0x1);
      nmw_[3] = ((data >> 3) & 0x1);
      nmw_[4] = ((data >> 4) & 0x1);
      nmw_[5] = ((data >> 5) & 0x1);
      nmw_[6] = ((data >> 6) & 0x1);
      nmw_[7] = ((data >> 7) & 0x1);
      nmw_[8] = ((data >> 8) & 0x1);
      nmw_[9] = ((data >> 9) & 0x1);
      nmw_[10] = ((data >> 10) & 0x1);
      nmw_[11] = ((data >> 11) & 0x1);
      nmw_[12] = ((data >> 12) & 0x1);
      nmw_[13] = ((data >> 13) & 0x1);
      nmw_[14] = ((data >> 14) & 0x1);
      nmw_[15] = ((data >> 15) & 0x1);
      nmw_[16] = ((data >> 16) & 0x1);
      nmw_[17] = ((data >> 17) & 0x1);
      nmw_[18] = ((data >> 18) & 0x1);
      nmw_[19] = ((data >> 19) & 0x1);
      nmw_[20] = ((data >> 20) & 0x1);
      nmw_[21] = ((data >> 21) & 0x1);
      nmw_[22] = ((data >> 22) & 0x1);
      nmw_[23] = ((data >> 23) & 0x1);
      nmw_[24] = ((data >> 24) & 0x1);
      nmw_[25] = ((data >> 25) & 0x1);
      nmw_[26] = ((data >> 26) & 0x1);
      nmw_[27] = ((data >> 27) & 0x1);
      nmw_[28] = ((data >> 28) & 0x1);
      nmw_[29] = ((data >> 29) & 0x1);
      nmw_[30] = ((data >> 30) & 0x1);
      nmw_[31] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      nmw_[32] = (data & 0x1);
      nmw_[33] = ((data >> 1) & 0x1);
      nmw_[34] = ((data >> 2) & 0x1);
      nmw_[35] = ((data >> 3) & 0x1);
      nmw_[36] = ((data >> 4) & 0x1);
      nmw_[37] = ((data >> 5) & 0x1);
      nmw_[38] = ((data >> 6) & 0x1);
      nmw_[39] = ((data >> 7) & 0x1);
      nmw_[40] = ((data >> 8) & 0x1);
      nmw_[41] = ((data >> 9) & 0x1);
      nmw_[42] = ((data >> 10) & 0x1);
      nmw_[43] = ((data >> 11) & 0x1);
      nmw_[44] = ((data >> 12) & 0x1);
      nmw_[45] = ((data >> 13) & 0x1);
      nmw_[46] = ((data >> 14) & 0x1);
      nmw_[47] = ((data >> 15) & 0x1);
      nmw_[48] = ((data >> 16) & 0x1);
      nmw_[49] = ((data >> 17) & 0x1);
      nmw_[50] = ((data >> 18) & 0x1);
      nmw_[51] = ((data >> 19) & 0x1);
      nmw_[52] = ((data >> 20) & 0x1);
      nmw_[53] = ((data >> 21) & 0x1);
      nmw_[54] = ((data >> 22) & 0x1);
      nmw_[55] = ((data >> 23) & 0x1);
      nmw_[56] = ((data >> 24) & 0x1);
      nmw_[57] = ((data >> 25) & 0x1);
      nmw_[58] = ((data >> 26) & 0x1);
      nmw_[59] = ((data >> 27) & 0x1);
      nmw_[60] = ((data >> 28) & 0x1);
      nmw_[61] = ((data >> 29) & 0x1);
      nmw_[62] = ((data >> 30) & 0x1);
      nmw_[63] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      nmw_[64] = (data & 0x1);
      nmw_[65] = ((data >> 1) & 0x1);
      nmw_[66] = ((data >> 2) & 0x1);
      nmw_[67] = ((data >> 3) & 0x1);
      nmw_[68] = ((data >> 4) & 0x1);
      nmw_[69] = ((data >> 5) & 0x1);
      nmw_[70] = ((data >> 6) & 0x1);
      nmw_[71] = ((data >> 7) & 0x1);
      nmw_[72] = ((data >> 8) & 0x1);
      nmw_[73] = ((data >> 9) & 0x1);
      nmw_[74] = ((data >> 10) & 0x1);
      nmw_[75] = ((data >> 11) & 0x1);
      nmw_[76] = ((data >> 12) & 0x1);
      nmw_[77] = ((data >> 13) & 0x1);
      nmw_[78] = ((data >> 14) & 0x1);
      nmw_[79] = ((data >> 15) & 0x1);
      nmw_[80] = ((data >> 16) & 0x1);
      nmw_[81] = ((data >> 17) & 0x1);
      nmw_[82] = ((data >> 18) & 0x1);
      nmw_[83] = ((data >> 19) & 0x1);
      nmw_[84] = ((data >> 20) & 0x1);
      nmw_[85] = ((data >> 21) & 0x1);
      nmw_[86] = ((data >> 22) & 0x1);
      nmw_[87] = ((data >> 23) & 0x1);
      nmw_[88] = ((data >> 24) & 0x1);
      nmw_[89] = ((data >> 25) & 0x1);
      nmw_[90] = ((data >> 26) & 0x1);
      nmw_[91] = ((data >> 27) & 0x1);
      nmw_[92] = ((data >> 28) & 0x1);
      nmw_[93] = ((data >> 29) & 0x1);
      nmw_[94] = ((data >> 30) & 0x1);
      nmw_[95] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      nmw_[96] = (data & 0x1);
      nmw_[97] = ((data >> 1) & 0x1);
      nmw_[98] = ((data >> 2) & 0x1);
      nmw_[99] = ((data >> 3) & 0x1);
      nmw_[100] = ((data >> 4) & 0x1);
      nmw_[101] = ((data >> 5) & 0x1);
      nmw_[102] = ((data >> 6) & 0x1);
      nmw_[103] = ((data >> 7) & 0x1);
      nmw_[104] = ((data >> 8) & 0x1);
      nmw_[105] = ((data >> 9) & 0x1);
      nmw_[106] = ((data >> 10) & 0x1);
      nmw_[107] = ((data >> 11) & 0x1);
      nmw_[108] = ((data >> 12) & 0x1);
      nmw_[109] = ((data >> 13) & 0x1);
      nmw_[110] = ((data >> 14) & 0x1);
      nmw_[111] = ((data >> 15) & 0x1);
      nmw_[112] = ((data >> 16) & 0x1);
      nmw_[113] = ((data >> 17) & 0x1);
      nmw_[114] = ((data >> 18) & 0x1);
      nmw_[115] = ((data >> 19) & 0x1);
      nmw_[116] = ((data >> 20) & 0x1);
      nmw_[117] = ((data >> 21) & 0x1);
      nmw_[118] = ((data >> 22) & 0x1);
      nmw_[119] = ((data >> 23) & 0x1);
      nmw_[120] = ((data >> 24) & 0x1);
      nmw_[121] = ((data >> 25) & 0x1);
      nmw_[122] = ((data >> 26) & 0x1);
      nmw_[123] = ((data >> 27) & 0x1);
      nmw_[124] = ((data >> 28) & 0x1);
      nmw_[125] = ((data >> 29) & 0x1);
      nmw_[126] = ((data >> 30) & 0x1);
      nmw_[127] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      nmw_[128] = (data & 0x1);
      nmw_[129] = ((data >> 1) & 0x1);
      nmw_[130] = ((data >> 2) & 0x1);
      nmw_[131] = ((data >> 3) & 0x1);
      nmw_[132] = ((data >> 4) & 0x1);
      nmw_[133] = ((data >> 5) & 0x1);
      nmw_[134] = ((data >> 6) & 0x1);
      nmw_[135] = ((data >> 7) & 0x1);
      nmw_[136] = ((data >> 8) & 0x1);
      nmw_[137] = ((data >> 9) & 0x1);
      nmw_[138] = ((data >> 10) & 0x1);
      nmw_[139] = ((data >> 11) & 0x1);
      nmw_[140] = ((data >> 12) & 0x1);
      nmw_[141] = ((data >> 13) & 0x1);
      nmw_[142] = ((data >> 14) & 0x1);
      nmw_[143] = ((data >> 15) & 0x1);
      nmw_[144] = ((data >> 16) & 0x1);
      nmw_[145] = ((data >> 17) & 0x1);
      nmw_[146] = ((data >> 18) & 0x1);
      nmw_[147] = ((data >> 19) & 0x1);
      nmw_[148] = ((data >> 20) & 0x1);
      nmw_[149] = ((data >> 21) & 0x1);
      nmw_[150] = ((data >> 22) & 0x1);
      nmw_[151] = ((data >> 23) & 0x1);
      nmw_[152] = ((data >> 24) & 0x1);
      nmw_[153] = ((data >> 25) & 0x1);
      nmw_[154] = ((data >> 26) & 0x1);
      nmw_[155] = ((data >> 27) & 0x1);
      nmw_[156] = ((data >> 28) & 0x1);
      nmw_[157] = ((data >> 29) & 0x1);
      nmw_[158] = ((data >> 30) & 0x1);
      nmw_[159] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      nmw_[160] = (data & 0x1);
      nmw_[161] = ((data >> 1) & 0x1);
      nmw_[162] = ((data >> 2) & 0x1);
      nmw_[163] = ((data >> 3) & 0x1);
      nmw_[164] = ((data >> 4) & 0x1);
      nmw_[165] = ((data >> 5) & 0x1);
      nmw_[166] = ((data >> 6) & 0x1);
      nmw_[167] = ((data >> 7) & 0x1);
      nmw_[168] = ((data >> 8) & 0x1);
      nmw_[169] = ((data >> 9) & 0x1);
      nmw_[170] = ((data >> 10) & 0x1);
      nmw_[171] = ((data >> 11) & 0x1);
      nmw_[172] = ((data >> 12) & 0x1);
      nmw_[173] = ((data >> 13) & 0x1);
      nmw_[174] = ((data >> 14) & 0x1);
      nmw_[175] = ((data >> 15) & 0x1);
      nmw_[176] = ((data >> 16) & 0x1);
      nmw_[177] = ((data >> 17) & 0x1);
      nmw_[178] = ((data >> 18) & 0x1);
      nmw_[179] = ((data >> 19) & 0x1);
      nmw_[180] = ((data >> 20) & 0x1);
      nmw_[181] = ((data >> 21) & 0x1);
      nmw_[182] = ((data >> 22) & 0x1);
      nmw_[183] = ((data >> 23) & 0x1);
      nmw_[184] = ((data >> 24) & 0x1);
      nmw_[185] = ((data >> 25) & 0x1);
      nmw_[186] = ((data >> 26) & 0x1);
      nmw_[187] = ((data >> 27) & 0x1);
      nmw_[188] = ((data >> 28) & 0x1);
      nmw_[189] = ((data >> 29) & 0x1);
      nmw_[190] = ((data >> 30) & 0x1);
      nmw_[191] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      nmw_[192] = (data & 0x1);
      nmw_[193] = ((data >> 1) & 0x1);
      nmw_[194] = ((data >> 2) & 0x1);
      nmw_[195] = ((data >> 3) & 0x1);
      nmw_[196] = ((data >> 4) & 0x1);
      nmw_[197] = ((data >> 5) & 0x1);
      nmw_[198] = ((data >> 6) & 0x1);
      nmw_[199] = ((data >> 7) & 0x1);
      nmw_[200] = ((data >> 8) & 0x1);
      nmw_[201] = ((data >> 9) & 0x1);
      nmw_[202] = ((data >> 10) & 0x1);
      nmw_[203] = ((data >> 11) & 0x1);
      nmw_[204] = ((data >> 12) & 0x1);
      nmw_[205] = ((data >> 13) & 0x1);
      nmw_[206] = ((data >> 14) & 0x1);
      nmw_[207] = ((data >> 15) & 0x1);
      nmw_[208] = ((data >> 16) & 0x1);
      nmw_[209] = ((data >> 17) & 0x1);
      nmw_[210] = ((data >> 18) & 0x1);
      nmw_[211] = ((data >> 19) & 0x1);
      nmw_[212] = ((data >> 20) & 0x1);
      nmw_[213] = ((data >> 21) & 0x1);
      nmw_[214] = ((data >> 22) & 0x1);
      nmw_[215] = ((data >> 23) & 0x1);
      nmw_[216] = ((data >> 24) & 0x1);
      nmw_[217] = ((data >> 25) & 0x1);
      nmw_[218] = ((data >> 26) & 0x1);
      nmw_[219] = ((data >> 27) & 0x1);
      nmw_[220] = ((data >> 28) & 0x1);
      nmw_[221] = ((data >> 29) & 0x1);
      nmw_[222] = ((data >> 30) & 0x1);
      nmw_[223] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      t_nmw_[0] = (data & 0x1);
      t_nmw_[1] = ((data >> 1) & 0x1);
      t_nmw_[2] = ((data >> 2) & 0x1);
      t_nmw_[3] = ((data >> 3) & 0x1);
      t_nmw_[4] = ((data >> 4) & 0x1);
      t_nmw_[5] = ((data >> 5) & 0x1);
      t_nmw_[6] = ((data >> 6) & 0x1);
      t_nmw_[7] = ((data >> 7) & 0x1);
      t_nmw_[8] = ((data >> 8) & 0x1);
      t_nmw_[9] = ((data >> 9) & 0x1);
      t_nmw_[10] = ((data >> 10) & 0x1);
      t_nmw_[11] = ((data >> 11) & 0x1);
      t_nmw_[12] = ((data >> 12) & 0x1);
      t_nmw_[13] = ((data >> 13) & 0x1);
      t_nmw_[14] = ((data >> 14) & 0x1);
      t_nmw_[15] = ((data >> 15) & 0x1);
      t_nmw_[16] = ((data >> 16) & 0x1);
      t_nmw_[17] = ((data >> 17) & 0x1);
      t_nmw_[18] = ((data >> 18) & 0x1);
      t_nmw_[19] = ((data >> 19) & 0x1);
      t_nmw_[20] = ((data >> 20) & 0x1);
      t_nmw_[21] = ((data >> 21) & 0x1);
      t_nmw_[22] = ((data >> 22) & 0x1);
      t_nmw_[23] = ((data >> 23) & 0x1);
      t_nmw_[24] = ((data >> 24) & 0x1);
      t_nmw_[25] = ((data >> 25) & 0x1);
      t_nmw_[26] = ((data >> 26) & 0x1);
      t_nmw_[27] = ((data >> 27) & 0x1);
      t_nmw_[28] = ((data >> 28) & 0x1);
      t_nmw_[29] = ((data >> 29) & 0x1);
      t_nmw_[30] = ((data >> 30) & 0x1);
      t_nmw_[31] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      t_nmw_[32] = (data & 0x1);
      t_nmw_[33] = ((data >> 1) & 0x1);
      t_nmw_[34] = ((data >> 2) & 0x1);
      t_nmw_[35] = ((data >> 3) & 0x1);
      t_nmw_[36] = ((data >> 4) & 0x1);
      t_nmw_[37] = ((data >> 5) & 0x1);
      t_nmw_[38] = ((data >> 6) & 0x1);
      t_nmw_[39] = ((data >> 7) & 0x1);
      t_nmw_[40] = ((data >> 8) & 0x1);
      t_nmw_[41] = ((data >> 9) & 0x1);
      t_nmw_[42] = ((data >> 10) & 0x1);
      t_nmw_[43] = ((data >> 11) & 0x1);
      t_nmw_[44] = ((data >> 12) & 0x1);
      t_nmw_[45] = ((data >> 13) & 0x1);
      t_nmw_[46] = ((data >> 14) & 0x1);
      t_nmw_[47] = ((data >> 15) & 0x1);
      t_nmw_[48] = ((data >> 16) & 0x1);
      t_nmw_[49] = ((data >> 17) & 0x1);
      t_nmw_[50] = ((data >> 18) & 0x1);
      t_nmw_[51] = ((data >> 19) & 0x1);
      t_nmw_[52] = ((data >> 20) & 0x1);
      t_nmw_[53] = ((data >> 21) & 0x1);
      t_nmw_[54] = ((data >> 22) & 0x1);
      t_nmw_[55] = ((data >> 23) & 0x1);
      t_nmw_[56] = ((data >> 24) & 0x1);
      t_nmw_[57] = ((data >> 25) & 0x1);
      t_nmw_[58] = ((data >> 26) & 0x1);
      t_nmw_[59] = ((data >> 27) & 0x1);
      t_nmw_[60] = ((data >> 28) & 0x1);
      t_nmw_[61] = ((data >> 29) & 0x1);
      t_nmw_[62] = ((data >> 30) & 0x1);
      t_nmw_[63] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      t_nmw_[64] = (data & 0x1);
      t_nmw_[65] = ((data >> 1) & 0x1);
      t_nmw_[66] = ((data >> 2) & 0x1);
      t_nmw_[67] = ((data >> 3) & 0x1);
      t_nmw_[68] = ((data >> 4) & 0x1);
      t_nmw_[69] = ((data >> 5) & 0x1);
      t_nmw_[70] = ((data >> 6) & 0x1);
      t_nmw_[71] = ((data >> 7) & 0x1);
      t_nmw_[72] = ((data >> 8) & 0x1);
      t_nmw_[73] = ((data >> 9) & 0x1);
      t_nmw_[74] = ((data >> 10) & 0x1);
      t_nmw_[75] = ((data >> 11) & 0x1);
      t_nmw_[76] = ((data >> 12) & 0x1);
      t_nmw_[77] = ((data >> 13) & 0x1);
      t_nmw_[78] = ((data >> 14) & 0x1);
      t_nmw_[79] = ((data >> 15) & 0x1);
      t_nmw_[80] = ((data >> 16) & 0x1);
      t_nmw_[81] = ((data >> 17) & 0x1);
      t_nmw_[82] = ((data >> 18) & 0x1);
      t_nmw_[83] = ((data >> 19) & 0x1);
      t_nmw_[84] = ((data >> 20) & 0x1);
      t_nmw_[85] = ((data >> 21) & 0x1);
      t_nmw_[86] = ((data >> 22) & 0x1);
      t_nmw_[87] = ((data >> 23) & 0x1);
      t_nmw_[88] = ((data >> 24) & 0x1);
      t_nmw_[89] = ((data >> 25) & 0x1);
      t_nmw_[90] = ((data >> 26) & 0x1);
      t_nmw_[91] = ((data >> 27) & 0x1);
      t_nmw_[92] = ((data >> 28) & 0x1);
      t_nmw_[93] = ((data >> 29) & 0x1);
      t_nmw_[94] = ((data >> 30) & 0x1);
      t_nmw_[95] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      t_nmw_[96] = (data & 0x1);
      t_nmw_[97] = ((data >> 1) & 0x1);
      t_nmw_[98] = ((data >> 2) & 0x1);
      t_nmw_[99] = ((data >> 3) & 0x1);
      t_nmw_[100] = ((data >> 4) & 0x1);
      t_nmw_[101] = ((data >> 5) & 0x1);
      t_nmw_[102] = ((data >> 6) & 0x1);
      t_nmw_[103] = ((data >> 7) & 0x1);
      t_nmw_[104] = ((data >> 8) & 0x1);
      t_nmw_[105] = ((data >> 9) & 0x1);
      t_nmw_[106] = ((data >> 10) & 0x1);
      t_nmw_[107] = ((data >> 11) & 0x1);
      t_nmw_[108] = ((data >> 12) & 0x1);
      t_nmw_[109] = ((data >> 13) & 0x1);
      t_nmw_[110] = ((data >> 14) & 0x1);
      t_nmw_[111] = ((data >> 15) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    nmw_[0] = 0x0;
    nmw_[1] = 0x0;
    nmw_[2] = 0x0;
    nmw_[3] = 0x0;
    nmw_[4] = 0x0;
    nmw_[5] = 0x0;
    nmw_[6] = 0x0;
    nmw_[7] = 0x0;
    nmw_[8] = 0x0;
    nmw_[9] = 0x0;
    nmw_[10] = 0x0;
    nmw_[11] = 0x0;
    nmw_[12] = 0x0;
    nmw_[13] = 0x0;
    nmw_[14] = 0x0;
    nmw_[15] = 0x0;
    nmw_[16] = 0x0;
    nmw_[17] = 0x0;
    nmw_[18] = 0x0;
    nmw_[19] = 0x0;
    nmw_[20] = 0x0;
    nmw_[21] = 0x0;
    nmw_[22] = 0x0;
    nmw_[23] = 0x0;
    nmw_[24] = 0x0;
    nmw_[25] = 0x0;
    nmw_[26] = 0x0;
    nmw_[27] = 0x0;
    nmw_[28] = 0x0;
    nmw_[29] = 0x0;
    nmw_[30] = 0x0;
    nmw_[31] = 0x0;
    nmw_[32] = 0x0;
    nmw_[33] = 0x0;
    nmw_[34] = 0x0;
    nmw_[35] = 0x0;
    nmw_[36] = 0x0;
    nmw_[37] = 0x0;
    nmw_[38] = 0x0;
    nmw_[39] = 0x0;
    nmw_[40] = 0x0;
    nmw_[41] = 0x0;
    nmw_[42] = 0x0;
    nmw_[43] = 0x0;
    nmw_[44] = 0x0;
    nmw_[45] = 0x0;
    nmw_[46] = 0x0;
    nmw_[47] = 0x0;
    nmw_[48] = 0x0;
    nmw_[49] = 0x0;
    nmw_[50] = 0x0;
    nmw_[51] = 0x0;
    nmw_[52] = 0x0;
    nmw_[53] = 0x0;
    nmw_[54] = 0x0;
    nmw_[55] = 0x0;
    nmw_[56] = 0x0;
    nmw_[57] = 0x0;
    nmw_[58] = 0x0;
    nmw_[59] = 0x0;
    nmw_[60] = 0x0;
    nmw_[61] = 0x0;
    nmw_[62] = 0x0;
    nmw_[63] = 0x0;
    nmw_[64] = 0x0;
    nmw_[65] = 0x0;
    nmw_[66] = 0x0;
    nmw_[67] = 0x0;
    nmw_[68] = 0x0;
    nmw_[69] = 0x0;
    nmw_[70] = 0x0;
    nmw_[71] = 0x0;
    nmw_[72] = 0x0;
    nmw_[73] = 0x0;
    nmw_[74] = 0x0;
    nmw_[75] = 0x0;
    nmw_[76] = 0x0;
    nmw_[77] = 0x0;
    nmw_[78] = 0x0;
    nmw_[79] = 0x0;
    nmw_[80] = 0x0;
    nmw_[81] = 0x0;
    nmw_[82] = 0x0;
    nmw_[83] = 0x0;
    nmw_[84] = 0x0;
    nmw_[85] = 0x0;
    nmw_[86] = 0x0;
    nmw_[87] = 0x0;
    nmw_[88] = 0x0;
    nmw_[89] = 0x0;
    nmw_[90] = 0x0;
    nmw_[91] = 0x0;
    nmw_[92] = 0x0;
    nmw_[93] = 0x0;
    nmw_[94] = 0x0;
    nmw_[95] = 0x0;
    nmw_[96] = 0x0;
    nmw_[97] = 0x0;
    nmw_[98] = 0x0;
    nmw_[99] = 0x0;
    nmw_[100] = 0x0;
    nmw_[101] = 0x0;
    nmw_[102] = 0x0;
    nmw_[103] = 0x0;
    nmw_[104] = 0x0;
    nmw_[105] = 0x0;
    nmw_[106] = 0x0;
    nmw_[107] = 0x0;
    nmw_[108] = 0x0;
    nmw_[109] = 0x0;
    nmw_[110] = 0x0;
    nmw_[111] = 0x0;
    nmw_[112] = 0x0;
    nmw_[113] = 0x0;
    nmw_[114] = 0x0;
    nmw_[115] = 0x0;
    nmw_[116] = 0x0;
    nmw_[117] = 0x0;
    nmw_[118] = 0x0;
    nmw_[119] = 0x0;
    nmw_[120] = 0x0;
    nmw_[121] = 0x0;
    nmw_[122] = 0x0;
    nmw_[123] = 0x0;
    nmw_[124] = 0x0;
    nmw_[125] = 0x0;
    nmw_[126] = 0x0;
    nmw_[127] = 0x0;
    nmw_[128] = 0x0;
    nmw_[129] = 0x0;
    nmw_[130] = 0x0;
    nmw_[131] = 0x0;
    nmw_[132] = 0x0;
    nmw_[133] = 0x0;
    nmw_[134] = 0x0;
    nmw_[135] = 0x0;
    nmw_[136] = 0x0;
    nmw_[137] = 0x0;
    nmw_[138] = 0x0;
    nmw_[139] = 0x0;
    nmw_[140] = 0x0;
    nmw_[141] = 0x0;
    nmw_[142] = 0x0;
    nmw_[143] = 0x0;
    nmw_[144] = 0x0;
    nmw_[145] = 0x0;
    nmw_[146] = 0x0;
    nmw_[147] = 0x0;
    nmw_[148] = 0x0;
    nmw_[149] = 0x0;
    nmw_[150] = 0x0;
    nmw_[151] = 0x0;
    nmw_[152] = 0x0;
    nmw_[153] = 0x0;
    nmw_[154] = 0x0;
    nmw_[155] = 0x0;
    nmw_[156] = 0x0;
    nmw_[157] = 0x0;
    nmw_[158] = 0x0;
    nmw_[159] = 0x0;
    nmw_[160] = 0x0;
    nmw_[161] = 0x0;
    nmw_[162] = 0x0;
    nmw_[163] = 0x0;
    nmw_[164] = 0x0;
    nmw_[165] = 0x0;
    nmw_[166] = 0x0;
    nmw_[167] = 0x0;
    nmw_[168] = 0x0;
    nmw_[169] = 0x0;
    nmw_[170] = 0x0;
    nmw_[171] = 0x0;
    nmw_[172] = 0x0;
    nmw_[173] = 0x0;
    nmw_[174] = 0x0;
    nmw_[175] = 0x0;
    nmw_[176] = 0x0;
    nmw_[177] = 0x0;
    nmw_[178] = 0x0;
    nmw_[179] = 0x0;
    nmw_[180] = 0x0;
    nmw_[181] = 0x0;
    nmw_[182] = 0x0;
    nmw_[183] = 0x0;
    nmw_[184] = 0x0;
    nmw_[185] = 0x0;
    nmw_[186] = 0x0;
    nmw_[187] = 0x0;
    nmw_[188] = 0x0;
    nmw_[189] = 0x0;
    nmw_[190] = 0x0;
    nmw_[191] = 0x0;
    nmw_[192] = 0x0;
    nmw_[193] = 0x0;
    nmw_[194] = 0x0;
    nmw_[195] = 0x0;
    nmw_[196] = 0x0;
    nmw_[197] = 0x0;
    nmw_[198] = 0x0;
    nmw_[199] = 0x0;
    nmw_[200] = 0x0;
    nmw_[201] = 0x0;
    nmw_[202] = 0x0;
    nmw_[203] = 0x0;
    nmw_[204] = 0x0;
    nmw_[205] = 0x0;
    nmw_[206] = 0x0;
    nmw_[207] = 0x0;
    nmw_[208] = 0x0;
    nmw_[209] = 0x0;
    nmw_[210] = 0x0;
    nmw_[211] = 0x0;
    nmw_[212] = 0x0;
    nmw_[213] = 0x0;
    nmw_[214] = 0x0;
    nmw_[215] = 0x0;
    nmw_[216] = 0x0;
    nmw_[217] = 0x0;
    nmw_[218] = 0x0;
    nmw_[219] = 0x0;
    nmw_[220] = 0x0;
    nmw_[221] = 0x0;
    nmw_[222] = 0x0;
    nmw_[223] = 0x0;
    t_nmw_[0] = 0x0;
    t_nmw_[1] = 0x0;
    t_nmw_[2] = 0x0;
    t_nmw_[3] = 0x0;
    t_nmw_[4] = 0x0;
    t_nmw_[5] = 0x0;
    t_nmw_[6] = 0x0;
    t_nmw_[7] = 0x0;
    t_nmw_[8] = 0x0;
    t_nmw_[9] = 0x0;
    t_nmw_[10] = 0x0;
    t_nmw_[11] = 0x0;
    t_nmw_[12] = 0x0;
    t_nmw_[13] = 0x0;
    t_nmw_[14] = 0x0;
    t_nmw_[15] = 0x0;
    t_nmw_[16] = 0x0;
    t_nmw_[17] = 0x0;
    t_nmw_[18] = 0x0;
    t_nmw_[19] = 0x0;
    t_nmw_[20] = 0x0;
    t_nmw_[21] = 0x0;
    t_nmw_[22] = 0x0;
    t_nmw_[23] = 0x0;
    t_nmw_[24] = 0x0;
    t_nmw_[25] = 0x0;
    t_nmw_[26] = 0x0;
    t_nmw_[27] = 0x0;
    t_nmw_[28] = 0x0;
    t_nmw_[29] = 0x0;
    t_nmw_[30] = 0x0;
    t_nmw_[31] = 0x0;
    t_nmw_[32] = 0x0;
    t_nmw_[33] = 0x0;
    t_nmw_[34] = 0x0;
    t_nmw_[35] = 0x0;
    t_nmw_[36] = 0x0;
    t_nmw_[37] = 0x0;
    t_nmw_[38] = 0x0;
    t_nmw_[39] = 0x0;
    t_nmw_[40] = 0x0;
    t_nmw_[41] = 0x0;
    t_nmw_[42] = 0x0;
    t_nmw_[43] = 0x0;
    t_nmw_[44] = 0x0;
    t_nmw_[45] = 0x0;
    t_nmw_[46] = 0x0;
    t_nmw_[47] = 0x0;
    t_nmw_[48] = 0x0;
    t_nmw_[49] = 0x0;
    t_nmw_[50] = 0x0;
    t_nmw_[51] = 0x0;
    t_nmw_[52] = 0x0;
    t_nmw_[53] = 0x0;
    t_nmw_[54] = 0x0;
    t_nmw_[55] = 0x0;
    t_nmw_[56] = 0x0;
    t_nmw_[57] = 0x0;
    t_nmw_[58] = 0x0;
    t_nmw_[59] = 0x0;
    t_nmw_[60] = 0x0;
    t_nmw_[61] = 0x0;
    t_nmw_[62] = 0x0;
    t_nmw_[63] = 0x0;
    t_nmw_[64] = 0x0;
    t_nmw_[65] = 0x0;
    t_nmw_[66] = 0x0;
    t_nmw_[67] = 0x0;
    t_nmw_[68] = 0x0;
    t_nmw_[69] = 0x0;
    t_nmw_[70] = 0x0;
    t_nmw_[71] = 0x0;
    t_nmw_[72] = 0x0;
    t_nmw_[73] = 0x0;
    t_nmw_[74] = 0x0;
    t_nmw_[75] = 0x0;
    t_nmw_[76] = 0x0;
    t_nmw_[77] = 0x0;
    t_nmw_[78] = 0x0;
    t_nmw_[79] = 0x0;
    t_nmw_[80] = 0x0;
    t_nmw_[81] = 0x0;
    t_nmw_[82] = 0x0;
    t_nmw_[83] = 0x0;
    t_nmw_[84] = 0x0;
    t_nmw_[85] = 0x0;
    t_nmw_[86] = 0x0;
    t_nmw_[87] = 0x0;
    t_nmw_[88] = 0x0;
    t_nmw_[89] = 0x0;
    t_nmw_[90] = 0x0;
    t_nmw_[91] = 0x0;
    t_nmw_[92] = 0x0;
    t_nmw_[93] = 0x0;
    t_nmw_[94] = 0x0;
    t_nmw_[95] = 0x0;
    t_nmw_[96] = 0x0;
    t_nmw_[97] = 0x0;
    t_nmw_[98] = 0x0;
    t_nmw_[99] = 0x0;
    t_nmw_[100] = 0x0;
    t_nmw_[101] = 0x0;
    t_nmw_[102] = 0x0;
    t_nmw_[103] = 0x0;
    t_nmw_[104] = 0x0;
    t_nmw_[105] = 0x0;
    t_nmw_[106] = 0x0;
    t_nmw_[107] = 0x0;
    t_nmw_[108] = 0x0;
    t_nmw_[109] = 0x0;
    t_nmw_[110] = 0x0;
    t_nmw_[111] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PrsrRegMainRspecNoMultiWrMutable") + ":\n";
    for (uint32_t f=0;f<224;++f) {
      r += indent_string + "  " + std::string("nmw") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(nmw_[f]) ) + "\n";
      all_zeros &= (0 == nmw_[f]);
    }
    for (uint32_t f=0;f<112;++f) {
      r += indent_string + "  " + std::string("t_nmw") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(t_nmw_[f]) ) + "\n";
      all_zeros &= (0 == t_nmw_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PrsrRegMainRspecNoMultiWrMutable") + ":\n";
    for (uint32_t f=0;f<224;++f) {
      r += indent_string + "  " + std::string("nmw") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(nmw_[f]) ) + "\n";
      all_zeros &= (0 == nmw_[f]);
    }
    for (uint32_t f=0;f<112;++f) {
      r += indent_string + "  " + std::string("t_nmw") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(t_nmw_[f]) ) + "\n";
      all_zeros &= (0 == t_nmw_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 224 > nmw_;
  std::array< uint8_t, 112 > t_nmw_;
private:
  static int StartOffset(
      int index_pipe_addrmap, PmarbRspecEnum selector_pmarb_rspec, int index_ebp_rspec
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    switch (selector_pmarb_rspec) {
      case kEbp18Reg:
        offset += 0x40000; // to get to ebp18_reg
        assert(index_ebp_rspec < 18);
        offset += index_ebp_rspec * 0x2000; // ebp_rspec[]
        offset += 0x80; // to get to no_multi_wr
        break;
      case kIbp18Reg:
        assert(index_ebp_rspec < 18);
        offset += index_ebp_rspec * 0x2000; // ibp_rspec[]
        offset += 0x80; // to get to no_multi_wr
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_NO_MULTI_WR_MUTABLE_H__
