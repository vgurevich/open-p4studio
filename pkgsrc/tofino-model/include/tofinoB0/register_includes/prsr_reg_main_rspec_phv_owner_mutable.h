/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_PHV_OWNER_MUTABLE_H__
#define __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_PHV_OWNER_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class PrsrRegMainRspecPhvOwnerMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum PmarbRspecEnum {
    kEbp18Reg,
    kIbp18Reg
  };
public:
  PrsrRegMainRspecPhvOwnerMutable(
      int chipNumber, int index_pipe_addrmap, PmarbRspecEnum selector_pmarb_rspec, int index_ebp_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, selector_pmarb_rspec, index_ebp_rspec), 48, true, write_callback, read_callback, std::string("PrsrRegMainRspecPhvOwnerMutable")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(selector_pmarb_rspec) + "," + boost::lexical_cast<std::string>(index_ebp_rspec))
    {
    }
  PrsrRegMainRspecPhvOwnerMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PrsrRegMainRspecPhvOwnerMutable")
    {
    }
public:



  uint8_t owner(int j0) { return owner_[j0]; }
  void owner(int j0,const uint8_t &v) { owner_[j0]=v; }



  uint8_t t_owner(int j0) { return t_owner_[j0]; }
  void t_owner(int j0,const uint8_t &v) { t_owner_[j0]=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (owner_[0] & 0x1);
      *data |= ((owner_[1] & 0x1) << 1);
      *data |= ((owner_[2] & 0x1) << 2);
      *data |= ((owner_[3] & 0x1) << 3);
      *data |= ((owner_[4] & 0x1) << 4);
      *data |= ((owner_[5] & 0x1) << 5);
      *data |= ((owner_[6] & 0x1) << 6);
      *data |= ((owner_[7] & 0x1) << 7);
      *data |= ((owner_[8] & 0x1) << 8);
      *data |= ((owner_[9] & 0x1) << 9);
      *data |= ((owner_[10] & 0x1) << 10);
      *data |= ((owner_[11] & 0x1) << 11);
      *data |= ((owner_[12] & 0x1) << 12);
      *data |= ((owner_[13] & 0x1) << 13);
      *data |= ((owner_[14] & 0x1) << 14);
      *data |= ((owner_[15] & 0x1) << 15);
      *data |= ((owner_[16] & 0x1) << 16);
      *data |= ((owner_[17] & 0x1) << 17);
      *data |= ((owner_[18] & 0x1) << 18);
      *data |= ((owner_[19] & 0x1) << 19);
      *data |= ((owner_[20] & 0x1) << 20);
      *data |= ((owner_[21] & 0x1) << 21);
      *data |= ((owner_[22] & 0x1) << 22);
      *data |= ((owner_[23] & 0x1) << 23);
      *data |= ((owner_[24] & 0x1) << 24);
      *data |= ((owner_[25] & 0x1) << 25);
      *data |= ((owner_[26] & 0x1) << 26);
      *data |= ((owner_[27] & 0x1) << 27);
      *data |= ((owner_[28] & 0x1) << 28);
      *data |= ((owner_[29] & 0x1) << 29);
      *data |= ((owner_[30] & 0x1) << 30);
      *data |= ((owner_[31] & 0x1) << 31);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (owner_[32] & 0x1);
      *data |= ((owner_[33] & 0x1) << 1);
      *data |= ((owner_[34] & 0x1) << 2);
      *data |= ((owner_[35] & 0x1) << 3);
      *data |= ((owner_[36] & 0x1) << 4);
      *data |= ((owner_[37] & 0x1) << 5);
      *data |= ((owner_[38] & 0x1) << 6);
      *data |= ((owner_[39] & 0x1) << 7);
      *data |= ((owner_[40] & 0x1) << 8);
      *data |= ((owner_[41] & 0x1) << 9);
      *data |= ((owner_[42] & 0x1) << 10);
      *data |= ((owner_[43] & 0x1) << 11);
      *data |= ((owner_[44] & 0x1) << 12);
      *data |= ((owner_[45] & 0x1) << 13);
      *data |= ((owner_[46] & 0x1) << 14);
      *data |= ((owner_[47] & 0x1) << 15);
      *data |= ((owner_[48] & 0x1) << 16);
      *data |= ((owner_[49] & 0x1) << 17);
      *data |= ((owner_[50] & 0x1) << 18);
      *data |= ((owner_[51] & 0x1) << 19);
      *data |= ((owner_[52] & 0x1) << 20);
      *data |= ((owner_[53] & 0x1) << 21);
      *data |= ((owner_[54] & 0x1) << 22);
      *data |= ((owner_[55] & 0x1) << 23);
      *data |= ((owner_[56] & 0x1) << 24);
      *data |= ((owner_[57] & 0x1) << 25);
      *data |= ((owner_[58] & 0x1) << 26);
      *data |= ((owner_[59] & 0x1) << 27);
      *data |= ((owner_[60] & 0x1) << 28);
      *data |= ((owner_[61] & 0x1) << 29);
      *data |= ((owner_[62] & 0x1) << 30);
      *data |= ((owner_[63] & 0x1) << 31);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = (owner_[64] & 0x1);
      *data |= ((owner_[65] & 0x1) << 1);
      *data |= ((owner_[66] & 0x1) << 2);
      *data |= ((owner_[67] & 0x1) << 3);
      *data |= ((owner_[68] & 0x1) << 4);
      *data |= ((owner_[69] & 0x1) << 5);
      *data |= ((owner_[70] & 0x1) << 6);
      *data |= ((owner_[71] & 0x1) << 7);
      *data |= ((owner_[72] & 0x1) << 8);
      *data |= ((owner_[73] & 0x1) << 9);
      *data |= ((owner_[74] & 0x1) << 10);
      *data |= ((owner_[75] & 0x1) << 11);
      *data |= ((owner_[76] & 0x1) << 12);
      *data |= ((owner_[77] & 0x1) << 13);
      *data |= ((owner_[78] & 0x1) << 14);
      *data |= ((owner_[79] & 0x1) << 15);
      *data |= ((owner_[80] & 0x1) << 16);
      *data |= ((owner_[81] & 0x1) << 17);
      *data |= ((owner_[82] & 0x1) << 18);
      *data |= ((owner_[83] & 0x1) << 19);
      *data |= ((owner_[84] & 0x1) << 20);
      *data |= ((owner_[85] & 0x1) << 21);
      *data |= ((owner_[86] & 0x1) << 22);
      *data |= ((owner_[87] & 0x1) << 23);
      *data |= ((owner_[88] & 0x1) << 24);
      *data |= ((owner_[89] & 0x1) << 25);
      *data |= ((owner_[90] & 0x1) << 26);
      *data |= ((owner_[91] & 0x1) << 27);
      *data |= ((owner_[92] & 0x1) << 28);
      *data |= ((owner_[93] & 0x1) << 29);
      *data |= ((owner_[94] & 0x1) << 30);
      *data |= ((owner_[95] & 0x1) << 31);
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = (owner_[96] & 0x1);
      *data |= ((owner_[97] & 0x1) << 1);
      *data |= ((owner_[98] & 0x1) << 2);
      *data |= ((owner_[99] & 0x1) << 3);
      *data |= ((owner_[100] & 0x1) << 4);
      *data |= ((owner_[101] & 0x1) << 5);
      *data |= ((owner_[102] & 0x1) << 6);
      *data |= ((owner_[103] & 0x1) << 7);
      *data |= ((owner_[104] & 0x1) << 8);
      *data |= ((owner_[105] & 0x1) << 9);
      *data |= ((owner_[106] & 0x1) << 10);
      *data |= ((owner_[107] & 0x1) << 11);
      *data |= ((owner_[108] & 0x1) << 12);
      *data |= ((owner_[109] & 0x1) << 13);
      *data |= ((owner_[110] & 0x1) << 14);
      *data |= ((owner_[111] & 0x1) << 15);
      *data |= ((owner_[112] & 0x1) << 16);
      *data |= ((owner_[113] & 0x1) << 17);
      *data |= ((owner_[114] & 0x1) << 18);
      *data |= ((owner_[115] & 0x1) << 19);
      *data |= ((owner_[116] & 0x1) << 20);
      *data |= ((owner_[117] & 0x1) << 21);
      *data |= ((owner_[118] & 0x1) << 22);
      *data |= ((owner_[119] & 0x1) << 23);
      *data |= ((owner_[120] & 0x1) << 24);
      *data |= ((owner_[121] & 0x1) << 25);
      *data |= ((owner_[122] & 0x1) << 26);
      *data |= ((owner_[123] & 0x1) << 27);
      *data |= ((owner_[124] & 0x1) << 28);
      *data |= ((owner_[125] & 0x1) << 29);
      *data |= ((owner_[126] & 0x1) << 30);
      *data |= ((owner_[127] & 0x1) << 31);
    }
    else if (offset >= 0x10 && offset < 0x14) {
      if (read_callback_) read_callback_();
      *data = (owner_[128] & 0x1);
      *data |= ((owner_[129] & 0x1) << 1);
      *data |= ((owner_[130] & 0x1) << 2);
      *data |= ((owner_[131] & 0x1) << 3);
      *data |= ((owner_[132] & 0x1) << 4);
      *data |= ((owner_[133] & 0x1) << 5);
      *data |= ((owner_[134] & 0x1) << 6);
      *data |= ((owner_[135] & 0x1) << 7);
      *data |= ((owner_[136] & 0x1) << 8);
      *data |= ((owner_[137] & 0x1) << 9);
      *data |= ((owner_[138] & 0x1) << 10);
      *data |= ((owner_[139] & 0x1) << 11);
      *data |= ((owner_[140] & 0x1) << 12);
      *data |= ((owner_[141] & 0x1) << 13);
      *data |= ((owner_[142] & 0x1) << 14);
      *data |= ((owner_[143] & 0x1) << 15);
      *data |= ((owner_[144] & 0x1) << 16);
      *data |= ((owner_[145] & 0x1) << 17);
      *data |= ((owner_[146] & 0x1) << 18);
      *data |= ((owner_[147] & 0x1) << 19);
      *data |= ((owner_[148] & 0x1) << 20);
      *data |= ((owner_[149] & 0x1) << 21);
      *data |= ((owner_[150] & 0x1) << 22);
      *data |= ((owner_[151] & 0x1) << 23);
      *data |= ((owner_[152] & 0x1) << 24);
      *data |= ((owner_[153] & 0x1) << 25);
      *data |= ((owner_[154] & 0x1) << 26);
      *data |= ((owner_[155] & 0x1) << 27);
      *data |= ((owner_[156] & 0x1) << 28);
      *data |= ((owner_[157] & 0x1) << 29);
      *data |= ((owner_[158] & 0x1) << 30);
      *data |= ((owner_[159] & 0x1) << 31);
    }
    else if (offset >= 0x14 && offset < 0x18) {
      if (read_callback_) read_callback_();
      *data = (owner_[160] & 0x1);
      *data |= ((owner_[161] & 0x1) << 1);
      *data |= ((owner_[162] & 0x1) << 2);
      *data |= ((owner_[163] & 0x1) << 3);
      *data |= ((owner_[164] & 0x1) << 4);
      *data |= ((owner_[165] & 0x1) << 5);
      *data |= ((owner_[166] & 0x1) << 6);
      *data |= ((owner_[167] & 0x1) << 7);
      *data |= ((owner_[168] & 0x1) << 8);
      *data |= ((owner_[169] & 0x1) << 9);
      *data |= ((owner_[170] & 0x1) << 10);
      *data |= ((owner_[171] & 0x1) << 11);
      *data |= ((owner_[172] & 0x1) << 12);
      *data |= ((owner_[173] & 0x1) << 13);
      *data |= ((owner_[174] & 0x1) << 14);
      *data |= ((owner_[175] & 0x1) << 15);
      *data |= ((owner_[176] & 0x1) << 16);
      *data |= ((owner_[177] & 0x1) << 17);
      *data |= ((owner_[178] & 0x1) << 18);
      *data |= ((owner_[179] & 0x1) << 19);
      *data |= ((owner_[180] & 0x1) << 20);
      *data |= ((owner_[181] & 0x1) << 21);
      *data |= ((owner_[182] & 0x1) << 22);
      *data |= ((owner_[183] & 0x1) << 23);
      *data |= ((owner_[184] & 0x1) << 24);
      *data |= ((owner_[185] & 0x1) << 25);
      *data |= ((owner_[186] & 0x1) << 26);
      *data |= ((owner_[187] & 0x1) << 27);
      *data |= ((owner_[188] & 0x1) << 28);
      *data |= ((owner_[189] & 0x1) << 29);
      *data |= ((owner_[190] & 0x1) << 30);
      *data |= ((owner_[191] & 0x1) << 31);
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      if (read_callback_) read_callback_();
      *data = (owner_[192] & 0x1);
      *data |= ((owner_[193] & 0x1) << 1);
      *data |= ((owner_[194] & 0x1) << 2);
      *data |= ((owner_[195] & 0x1) << 3);
      *data |= ((owner_[196] & 0x1) << 4);
      *data |= ((owner_[197] & 0x1) << 5);
      *data |= ((owner_[198] & 0x1) << 6);
      *data |= ((owner_[199] & 0x1) << 7);
      *data |= ((owner_[200] & 0x1) << 8);
      *data |= ((owner_[201] & 0x1) << 9);
      *data |= ((owner_[202] & 0x1) << 10);
      *data |= ((owner_[203] & 0x1) << 11);
      *data |= ((owner_[204] & 0x1) << 12);
      *data |= ((owner_[205] & 0x1) << 13);
      *data |= ((owner_[206] & 0x1) << 14);
      *data |= ((owner_[207] & 0x1) << 15);
      *data |= ((owner_[208] & 0x1) << 16);
      *data |= ((owner_[209] & 0x1) << 17);
      *data |= ((owner_[210] & 0x1) << 18);
      *data |= ((owner_[211] & 0x1) << 19);
      *data |= ((owner_[212] & 0x1) << 20);
      *data |= ((owner_[213] & 0x1) << 21);
      *data |= ((owner_[214] & 0x1) << 22);
      *data |= ((owner_[215] & 0x1) << 23);
      *data |= ((owner_[216] & 0x1) << 24);
      *data |= ((owner_[217] & 0x1) << 25);
      *data |= ((owner_[218] & 0x1) << 26);
      *data |= ((owner_[219] & 0x1) << 27);
      *data |= ((owner_[220] & 0x1) << 28);
      *data |= ((owner_[221] & 0x1) << 29);
      *data |= ((owner_[222] & 0x1) << 30);
      *data |= ((owner_[223] & 0x1) << 31);
    }
    else if (offset >= 0x1c && offset < 0x20) {
      if (read_callback_) read_callback_();
      *data = 0;
    }
    else if (offset >= 0x20 && offset < 0x24) {
      if (read_callback_) read_callback_();
      *data = (t_owner_[0] & 0x1);
      *data |= ((t_owner_[1] & 0x1) << 1);
      *data |= ((t_owner_[2] & 0x1) << 2);
      *data |= ((t_owner_[3] & 0x1) << 3);
      *data |= ((t_owner_[4] & 0x1) << 4);
      *data |= ((t_owner_[5] & 0x1) << 5);
      *data |= ((t_owner_[6] & 0x1) << 6);
      *data |= ((t_owner_[7] & 0x1) << 7);
      *data |= ((t_owner_[8] & 0x1) << 8);
      *data |= ((t_owner_[9] & 0x1) << 9);
      *data |= ((t_owner_[10] & 0x1) << 10);
      *data |= ((t_owner_[11] & 0x1) << 11);
      *data |= ((t_owner_[12] & 0x1) << 12);
      *data |= ((t_owner_[13] & 0x1) << 13);
      *data |= ((t_owner_[14] & 0x1) << 14);
      *data |= ((t_owner_[15] & 0x1) << 15);
      *data |= ((t_owner_[16] & 0x1) << 16);
      *data |= ((t_owner_[17] & 0x1) << 17);
      *data |= ((t_owner_[18] & 0x1) << 18);
      *data |= ((t_owner_[19] & 0x1) << 19);
      *data |= ((t_owner_[20] & 0x1) << 20);
      *data |= ((t_owner_[21] & 0x1) << 21);
      *data |= ((t_owner_[22] & 0x1) << 22);
      *data |= ((t_owner_[23] & 0x1) << 23);
      *data |= ((t_owner_[24] & 0x1) << 24);
      *data |= ((t_owner_[25] & 0x1) << 25);
      *data |= ((t_owner_[26] & 0x1) << 26);
      *data |= ((t_owner_[27] & 0x1) << 27);
      *data |= ((t_owner_[28] & 0x1) << 28);
      *data |= ((t_owner_[29] & 0x1) << 29);
      *data |= ((t_owner_[30] & 0x1) << 30);
      *data |= ((t_owner_[31] & 0x1) << 31);
    }
    else if (offset >= 0x24 && offset < 0x28) {
      if (read_callback_) read_callback_();
      *data = (t_owner_[32] & 0x1);
      *data |= ((t_owner_[33] & 0x1) << 1);
      *data |= ((t_owner_[34] & 0x1) << 2);
      *data |= ((t_owner_[35] & 0x1) << 3);
      *data |= ((t_owner_[36] & 0x1) << 4);
      *data |= ((t_owner_[37] & 0x1) << 5);
      *data |= ((t_owner_[38] & 0x1) << 6);
      *data |= ((t_owner_[39] & 0x1) << 7);
      *data |= ((t_owner_[40] & 0x1) << 8);
      *data |= ((t_owner_[41] & 0x1) << 9);
      *data |= ((t_owner_[42] & 0x1) << 10);
      *data |= ((t_owner_[43] & 0x1) << 11);
      *data |= ((t_owner_[44] & 0x1) << 12);
      *data |= ((t_owner_[45] & 0x1) << 13);
      *data |= ((t_owner_[46] & 0x1) << 14);
      *data |= ((t_owner_[47] & 0x1) << 15);
      *data |= ((t_owner_[48] & 0x1) << 16);
      *data |= ((t_owner_[49] & 0x1) << 17);
      *data |= ((t_owner_[50] & 0x1) << 18);
      *data |= ((t_owner_[51] & 0x1) << 19);
      *data |= ((t_owner_[52] & 0x1) << 20);
      *data |= ((t_owner_[53] & 0x1) << 21);
      *data |= ((t_owner_[54] & 0x1) << 22);
      *data |= ((t_owner_[55] & 0x1) << 23);
      *data |= ((t_owner_[56] & 0x1) << 24);
      *data |= ((t_owner_[57] & 0x1) << 25);
      *data |= ((t_owner_[58] & 0x1) << 26);
      *data |= ((t_owner_[59] & 0x1) << 27);
      *data |= ((t_owner_[60] & 0x1) << 28);
      *data |= ((t_owner_[61] & 0x1) << 29);
      *data |= ((t_owner_[62] & 0x1) << 30);
      *data |= ((t_owner_[63] & 0x1) << 31);
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      if (read_callback_) read_callback_();
      *data = (t_owner_[64] & 0x1);
      *data |= ((t_owner_[65] & 0x1) << 1);
      *data |= ((t_owner_[66] & 0x1) << 2);
      *data |= ((t_owner_[67] & 0x1) << 3);
      *data |= ((t_owner_[68] & 0x1) << 4);
      *data |= ((t_owner_[69] & 0x1) << 5);
      *data |= ((t_owner_[70] & 0x1) << 6);
      *data |= ((t_owner_[71] & 0x1) << 7);
      *data |= ((t_owner_[72] & 0x1) << 8);
      *data |= ((t_owner_[73] & 0x1) << 9);
      *data |= ((t_owner_[74] & 0x1) << 10);
      *data |= ((t_owner_[75] & 0x1) << 11);
      *data |= ((t_owner_[76] & 0x1) << 12);
      *data |= ((t_owner_[77] & 0x1) << 13);
      *data |= ((t_owner_[78] & 0x1) << 14);
      *data |= ((t_owner_[79] & 0x1) << 15);
      *data |= ((t_owner_[80] & 0x1) << 16);
      *data |= ((t_owner_[81] & 0x1) << 17);
      *data |= ((t_owner_[82] & 0x1) << 18);
      *data |= ((t_owner_[83] & 0x1) << 19);
      *data |= ((t_owner_[84] & 0x1) << 20);
      *data |= ((t_owner_[85] & 0x1) << 21);
      *data |= ((t_owner_[86] & 0x1) << 22);
      *data |= ((t_owner_[87] & 0x1) << 23);
      *data |= ((t_owner_[88] & 0x1) << 24);
      *data |= ((t_owner_[89] & 0x1) << 25);
      *data |= ((t_owner_[90] & 0x1) << 26);
      *data |= ((t_owner_[91] & 0x1) << 27);
      *data |= ((t_owner_[92] & 0x1) << 28);
      *data |= ((t_owner_[93] & 0x1) << 29);
      *data |= ((t_owner_[94] & 0x1) << 30);
      *data |= ((t_owner_[95] & 0x1) << 31);
    }
    else if (offset >= 0x2c && offset < 0x30) {
      if (read_callback_) read_callback_();
      *data = (t_owner_[96] & 0x1);
      *data |= ((t_owner_[97] & 0x1) << 1);
      *data |= ((t_owner_[98] & 0x1) << 2);
      *data |= ((t_owner_[99] & 0x1) << 3);
      *data |= ((t_owner_[100] & 0x1) << 4);
      *data |= ((t_owner_[101] & 0x1) << 5);
      *data |= ((t_owner_[102] & 0x1) << 6);
      *data |= ((t_owner_[103] & 0x1) << 7);
      *data |= ((t_owner_[104] & 0x1) << 8);
      *data |= ((t_owner_[105] & 0x1) << 9);
      *data |= ((t_owner_[106] & 0x1) << 10);
      *data |= ((t_owner_[107] & 0x1) << 11);
      *data |= ((t_owner_[108] & 0x1) << 12);
      *data |= ((t_owner_[109] & 0x1) << 13);
      *data |= ((t_owner_[110] & 0x1) << 14);
      *data |= ((t_owner_[111] & 0x1) << 15);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      owner_[0] = (data & 0x1);
      owner_[1] = ((data >> 1) & 0x1);
      owner_[2] = ((data >> 2) & 0x1);
      owner_[3] = ((data >> 3) & 0x1);
      owner_[4] = ((data >> 4) & 0x1);
      owner_[5] = ((data >> 5) & 0x1);
      owner_[6] = ((data >> 6) & 0x1);
      owner_[7] = ((data >> 7) & 0x1);
      owner_[8] = ((data >> 8) & 0x1);
      owner_[9] = ((data >> 9) & 0x1);
      owner_[10] = ((data >> 10) & 0x1);
      owner_[11] = ((data >> 11) & 0x1);
      owner_[12] = ((data >> 12) & 0x1);
      owner_[13] = ((data >> 13) & 0x1);
      owner_[14] = ((data >> 14) & 0x1);
      owner_[15] = ((data >> 15) & 0x1);
      owner_[16] = ((data >> 16) & 0x1);
      owner_[17] = ((data >> 17) & 0x1);
      owner_[18] = ((data >> 18) & 0x1);
      owner_[19] = ((data >> 19) & 0x1);
      owner_[20] = ((data >> 20) & 0x1);
      owner_[21] = ((data >> 21) & 0x1);
      owner_[22] = ((data >> 22) & 0x1);
      owner_[23] = ((data >> 23) & 0x1);
      owner_[24] = ((data >> 24) & 0x1);
      owner_[25] = ((data >> 25) & 0x1);
      owner_[26] = ((data >> 26) & 0x1);
      owner_[27] = ((data >> 27) & 0x1);
      owner_[28] = ((data >> 28) & 0x1);
      owner_[29] = ((data >> 29) & 0x1);
      owner_[30] = ((data >> 30) & 0x1);
      owner_[31] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      owner_[32] = (data & 0x1);
      owner_[33] = ((data >> 1) & 0x1);
      owner_[34] = ((data >> 2) & 0x1);
      owner_[35] = ((data >> 3) & 0x1);
      owner_[36] = ((data >> 4) & 0x1);
      owner_[37] = ((data >> 5) & 0x1);
      owner_[38] = ((data >> 6) & 0x1);
      owner_[39] = ((data >> 7) & 0x1);
      owner_[40] = ((data >> 8) & 0x1);
      owner_[41] = ((data >> 9) & 0x1);
      owner_[42] = ((data >> 10) & 0x1);
      owner_[43] = ((data >> 11) & 0x1);
      owner_[44] = ((data >> 12) & 0x1);
      owner_[45] = ((data >> 13) & 0x1);
      owner_[46] = ((data >> 14) & 0x1);
      owner_[47] = ((data >> 15) & 0x1);
      owner_[48] = ((data >> 16) & 0x1);
      owner_[49] = ((data >> 17) & 0x1);
      owner_[50] = ((data >> 18) & 0x1);
      owner_[51] = ((data >> 19) & 0x1);
      owner_[52] = ((data >> 20) & 0x1);
      owner_[53] = ((data >> 21) & 0x1);
      owner_[54] = ((data >> 22) & 0x1);
      owner_[55] = ((data >> 23) & 0x1);
      owner_[56] = ((data >> 24) & 0x1);
      owner_[57] = ((data >> 25) & 0x1);
      owner_[58] = ((data >> 26) & 0x1);
      owner_[59] = ((data >> 27) & 0x1);
      owner_[60] = ((data >> 28) & 0x1);
      owner_[61] = ((data >> 29) & 0x1);
      owner_[62] = ((data >> 30) & 0x1);
      owner_[63] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      owner_[64] = (data & 0x1);
      owner_[65] = ((data >> 1) & 0x1);
      owner_[66] = ((data >> 2) & 0x1);
      owner_[67] = ((data >> 3) & 0x1);
      owner_[68] = ((data >> 4) & 0x1);
      owner_[69] = ((data >> 5) & 0x1);
      owner_[70] = ((data >> 6) & 0x1);
      owner_[71] = ((data >> 7) & 0x1);
      owner_[72] = ((data >> 8) & 0x1);
      owner_[73] = ((data >> 9) & 0x1);
      owner_[74] = ((data >> 10) & 0x1);
      owner_[75] = ((data >> 11) & 0x1);
      owner_[76] = ((data >> 12) & 0x1);
      owner_[77] = ((data >> 13) & 0x1);
      owner_[78] = ((data >> 14) & 0x1);
      owner_[79] = ((data >> 15) & 0x1);
      owner_[80] = ((data >> 16) & 0x1);
      owner_[81] = ((data >> 17) & 0x1);
      owner_[82] = ((data >> 18) & 0x1);
      owner_[83] = ((data >> 19) & 0x1);
      owner_[84] = ((data >> 20) & 0x1);
      owner_[85] = ((data >> 21) & 0x1);
      owner_[86] = ((data >> 22) & 0x1);
      owner_[87] = ((data >> 23) & 0x1);
      owner_[88] = ((data >> 24) & 0x1);
      owner_[89] = ((data >> 25) & 0x1);
      owner_[90] = ((data >> 26) & 0x1);
      owner_[91] = ((data >> 27) & 0x1);
      owner_[92] = ((data >> 28) & 0x1);
      owner_[93] = ((data >> 29) & 0x1);
      owner_[94] = ((data >> 30) & 0x1);
      owner_[95] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      owner_[96] = (data & 0x1);
      owner_[97] = ((data >> 1) & 0x1);
      owner_[98] = ((data >> 2) & 0x1);
      owner_[99] = ((data >> 3) & 0x1);
      owner_[100] = ((data >> 4) & 0x1);
      owner_[101] = ((data >> 5) & 0x1);
      owner_[102] = ((data >> 6) & 0x1);
      owner_[103] = ((data >> 7) & 0x1);
      owner_[104] = ((data >> 8) & 0x1);
      owner_[105] = ((data >> 9) & 0x1);
      owner_[106] = ((data >> 10) & 0x1);
      owner_[107] = ((data >> 11) & 0x1);
      owner_[108] = ((data >> 12) & 0x1);
      owner_[109] = ((data >> 13) & 0x1);
      owner_[110] = ((data >> 14) & 0x1);
      owner_[111] = ((data >> 15) & 0x1);
      owner_[112] = ((data >> 16) & 0x1);
      owner_[113] = ((data >> 17) & 0x1);
      owner_[114] = ((data >> 18) & 0x1);
      owner_[115] = ((data >> 19) & 0x1);
      owner_[116] = ((data >> 20) & 0x1);
      owner_[117] = ((data >> 21) & 0x1);
      owner_[118] = ((data >> 22) & 0x1);
      owner_[119] = ((data >> 23) & 0x1);
      owner_[120] = ((data >> 24) & 0x1);
      owner_[121] = ((data >> 25) & 0x1);
      owner_[122] = ((data >> 26) & 0x1);
      owner_[123] = ((data >> 27) & 0x1);
      owner_[124] = ((data >> 28) & 0x1);
      owner_[125] = ((data >> 29) & 0x1);
      owner_[126] = ((data >> 30) & 0x1);
      owner_[127] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      owner_[128] = (data & 0x1);
      owner_[129] = ((data >> 1) & 0x1);
      owner_[130] = ((data >> 2) & 0x1);
      owner_[131] = ((data >> 3) & 0x1);
      owner_[132] = ((data >> 4) & 0x1);
      owner_[133] = ((data >> 5) & 0x1);
      owner_[134] = ((data >> 6) & 0x1);
      owner_[135] = ((data >> 7) & 0x1);
      owner_[136] = ((data >> 8) & 0x1);
      owner_[137] = ((data >> 9) & 0x1);
      owner_[138] = ((data >> 10) & 0x1);
      owner_[139] = ((data >> 11) & 0x1);
      owner_[140] = ((data >> 12) & 0x1);
      owner_[141] = ((data >> 13) & 0x1);
      owner_[142] = ((data >> 14) & 0x1);
      owner_[143] = ((data >> 15) & 0x1);
      owner_[144] = ((data >> 16) & 0x1);
      owner_[145] = ((data >> 17) & 0x1);
      owner_[146] = ((data >> 18) & 0x1);
      owner_[147] = ((data >> 19) & 0x1);
      owner_[148] = ((data >> 20) & 0x1);
      owner_[149] = ((data >> 21) & 0x1);
      owner_[150] = ((data >> 22) & 0x1);
      owner_[151] = ((data >> 23) & 0x1);
      owner_[152] = ((data >> 24) & 0x1);
      owner_[153] = ((data >> 25) & 0x1);
      owner_[154] = ((data >> 26) & 0x1);
      owner_[155] = ((data >> 27) & 0x1);
      owner_[156] = ((data >> 28) & 0x1);
      owner_[157] = ((data >> 29) & 0x1);
      owner_[158] = ((data >> 30) & 0x1);
      owner_[159] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      owner_[160] = (data & 0x1);
      owner_[161] = ((data >> 1) & 0x1);
      owner_[162] = ((data >> 2) & 0x1);
      owner_[163] = ((data >> 3) & 0x1);
      owner_[164] = ((data >> 4) & 0x1);
      owner_[165] = ((data >> 5) & 0x1);
      owner_[166] = ((data >> 6) & 0x1);
      owner_[167] = ((data >> 7) & 0x1);
      owner_[168] = ((data >> 8) & 0x1);
      owner_[169] = ((data >> 9) & 0x1);
      owner_[170] = ((data >> 10) & 0x1);
      owner_[171] = ((data >> 11) & 0x1);
      owner_[172] = ((data >> 12) & 0x1);
      owner_[173] = ((data >> 13) & 0x1);
      owner_[174] = ((data >> 14) & 0x1);
      owner_[175] = ((data >> 15) & 0x1);
      owner_[176] = ((data >> 16) & 0x1);
      owner_[177] = ((data >> 17) & 0x1);
      owner_[178] = ((data >> 18) & 0x1);
      owner_[179] = ((data >> 19) & 0x1);
      owner_[180] = ((data >> 20) & 0x1);
      owner_[181] = ((data >> 21) & 0x1);
      owner_[182] = ((data >> 22) & 0x1);
      owner_[183] = ((data >> 23) & 0x1);
      owner_[184] = ((data >> 24) & 0x1);
      owner_[185] = ((data >> 25) & 0x1);
      owner_[186] = ((data >> 26) & 0x1);
      owner_[187] = ((data >> 27) & 0x1);
      owner_[188] = ((data >> 28) & 0x1);
      owner_[189] = ((data >> 29) & 0x1);
      owner_[190] = ((data >> 30) & 0x1);
      owner_[191] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      owner_[192] = (data & 0x1);
      owner_[193] = ((data >> 1) & 0x1);
      owner_[194] = ((data >> 2) & 0x1);
      owner_[195] = ((data >> 3) & 0x1);
      owner_[196] = ((data >> 4) & 0x1);
      owner_[197] = ((data >> 5) & 0x1);
      owner_[198] = ((data >> 6) & 0x1);
      owner_[199] = ((data >> 7) & 0x1);
      owner_[200] = ((data >> 8) & 0x1);
      owner_[201] = ((data >> 9) & 0x1);
      owner_[202] = ((data >> 10) & 0x1);
      owner_[203] = ((data >> 11) & 0x1);
      owner_[204] = ((data >> 12) & 0x1);
      owner_[205] = ((data >> 13) & 0x1);
      owner_[206] = ((data >> 14) & 0x1);
      owner_[207] = ((data >> 15) & 0x1);
      owner_[208] = ((data >> 16) & 0x1);
      owner_[209] = ((data >> 17) & 0x1);
      owner_[210] = ((data >> 18) & 0x1);
      owner_[211] = ((data >> 19) & 0x1);
      owner_[212] = ((data >> 20) & 0x1);
      owner_[213] = ((data >> 21) & 0x1);
      owner_[214] = ((data >> 22) & 0x1);
      owner_[215] = ((data >> 23) & 0x1);
      owner_[216] = ((data >> 24) & 0x1);
      owner_[217] = ((data >> 25) & 0x1);
      owner_[218] = ((data >> 26) & 0x1);
      owner_[219] = ((data >> 27) & 0x1);
      owner_[220] = ((data >> 28) & 0x1);
      owner_[221] = ((data >> 29) & 0x1);
      owner_[222] = ((data >> 30) & 0x1);
      owner_[223] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x24) {
      t_owner_[0] = (data & 0x1);
      t_owner_[1] = ((data >> 1) & 0x1);
      t_owner_[2] = ((data >> 2) & 0x1);
      t_owner_[3] = ((data >> 3) & 0x1);
      t_owner_[4] = ((data >> 4) & 0x1);
      t_owner_[5] = ((data >> 5) & 0x1);
      t_owner_[6] = ((data >> 6) & 0x1);
      t_owner_[7] = ((data >> 7) & 0x1);
      t_owner_[8] = ((data >> 8) & 0x1);
      t_owner_[9] = ((data >> 9) & 0x1);
      t_owner_[10] = ((data >> 10) & 0x1);
      t_owner_[11] = ((data >> 11) & 0x1);
      t_owner_[12] = ((data >> 12) & 0x1);
      t_owner_[13] = ((data >> 13) & 0x1);
      t_owner_[14] = ((data >> 14) & 0x1);
      t_owner_[15] = ((data >> 15) & 0x1);
      t_owner_[16] = ((data >> 16) & 0x1);
      t_owner_[17] = ((data >> 17) & 0x1);
      t_owner_[18] = ((data >> 18) & 0x1);
      t_owner_[19] = ((data >> 19) & 0x1);
      t_owner_[20] = ((data >> 20) & 0x1);
      t_owner_[21] = ((data >> 21) & 0x1);
      t_owner_[22] = ((data >> 22) & 0x1);
      t_owner_[23] = ((data >> 23) & 0x1);
      t_owner_[24] = ((data >> 24) & 0x1);
      t_owner_[25] = ((data >> 25) & 0x1);
      t_owner_[26] = ((data >> 26) & 0x1);
      t_owner_[27] = ((data >> 27) & 0x1);
      t_owner_[28] = ((data >> 28) & 0x1);
      t_owner_[29] = ((data >> 29) & 0x1);
      t_owner_[30] = ((data >> 30) & 0x1);
      t_owner_[31] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x24 && offset < 0x28) {
      t_owner_[32] = (data & 0x1);
      t_owner_[33] = ((data >> 1) & 0x1);
      t_owner_[34] = ((data >> 2) & 0x1);
      t_owner_[35] = ((data >> 3) & 0x1);
      t_owner_[36] = ((data >> 4) & 0x1);
      t_owner_[37] = ((data >> 5) & 0x1);
      t_owner_[38] = ((data >> 6) & 0x1);
      t_owner_[39] = ((data >> 7) & 0x1);
      t_owner_[40] = ((data >> 8) & 0x1);
      t_owner_[41] = ((data >> 9) & 0x1);
      t_owner_[42] = ((data >> 10) & 0x1);
      t_owner_[43] = ((data >> 11) & 0x1);
      t_owner_[44] = ((data >> 12) & 0x1);
      t_owner_[45] = ((data >> 13) & 0x1);
      t_owner_[46] = ((data >> 14) & 0x1);
      t_owner_[47] = ((data >> 15) & 0x1);
      t_owner_[48] = ((data >> 16) & 0x1);
      t_owner_[49] = ((data >> 17) & 0x1);
      t_owner_[50] = ((data >> 18) & 0x1);
      t_owner_[51] = ((data >> 19) & 0x1);
      t_owner_[52] = ((data >> 20) & 0x1);
      t_owner_[53] = ((data >> 21) & 0x1);
      t_owner_[54] = ((data >> 22) & 0x1);
      t_owner_[55] = ((data >> 23) & 0x1);
      t_owner_[56] = ((data >> 24) & 0x1);
      t_owner_[57] = ((data >> 25) & 0x1);
      t_owner_[58] = ((data >> 26) & 0x1);
      t_owner_[59] = ((data >> 27) & 0x1);
      t_owner_[60] = ((data >> 28) & 0x1);
      t_owner_[61] = ((data >> 29) & 0x1);
      t_owner_[62] = ((data >> 30) & 0x1);
      t_owner_[63] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x28 && offset < 0x2c) {
      t_owner_[64] = (data & 0x1);
      t_owner_[65] = ((data >> 1) & 0x1);
      t_owner_[66] = ((data >> 2) & 0x1);
      t_owner_[67] = ((data >> 3) & 0x1);
      t_owner_[68] = ((data >> 4) & 0x1);
      t_owner_[69] = ((data >> 5) & 0x1);
      t_owner_[70] = ((data >> 6) & 0x1);
      t_owner_[71] = ((data >> 7) & 0x1);
      t_owner_[72] = ((data >> 8) & 0x1);
      t_owner_[73] = ((data >> 9) & 0x1);
      t_owner_[74] = ((data >> 10) & 0x1);
      t_owner_[75] = ((data >> 11) & 0x1);
      t_owner_[76] = ((data >> 12) & 0x1);
      t_owner_[77] = ((data >> 13) & 0x1);
      t_owner_[78] = ((data >> 14) & 0x1);
      t_owner_[79] = ((data >> 15) & 0x1);
      t_owner_[80] = ((data >> 16) & 0x1);
      t_owner_[81] = ((data >> 17) & 0x1);
      t_owner_[82] = ((data >> 18) & 0x1);
      t_owner_[83] = ((data >> 19) & 0x1);
      t_owner_[84] = ((data >> 20) & 0x1);
      t_owner_[85] = ((data >> 21) & 0x1);
      t_owner_[86] = ((data >> 22) & 0x1);
      t_owner_[87] = ((data >> 23) & 0x1);
      t_owner_[88] = ((data >> 24) & 0x1);
      t_owner_[89] = ((data >> 25) & 0x1);
      t_owner_[90] = ((data >> 26) & 0x1);
      t_owner_[91] = ((data >> 27) & 0x1);
      t_owner_[92] = ((data >> 28) & 0x1);
      t_owner_[93] = ((data >> 29) & 0x1);
      t_owner_[94] = ((data >> 30) & 0x1);
      t_owner_[95] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2c && offset < 0x30) {
      t_owner_[96] = (data & 0x1);
      t_owner_[97] = ((data >> 1) & 0x1);
      t_owner_[98] = ((data >> 2) & 0x1);
      t_owner_[99] = ((data >> 3) & 0x1);
      t_owner_[100] = ((data >> 4) & 0x1);
      t_owner_[101] = ((data >> 5) & 0x1);
      t_owner_[102] = ((data >> 6) & 0x1);
      t_owner_[103] = ((data >> 7) & 0x1);
      t_owner_[104] = ((data >> 8) & 0x1);
      t_owner_[105] = ((data >> 9) & 0x1);
      t_owner_[106] = ((data >> 10) & 0x1);
      t_owner_[107] = ((data >> 11) & 0x1);
      t_owner_[108] = ((data >> 12) & 0x1);
      t_owner_[109] = ((data >> 13) & 0x1);
      t_owner_[110] = ((data >> 14) & 0x1);
      t_owner_[111] = ((data >> 15) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    owner_[0] = 0x0;
    owner_[1] = 0x0;
    owner_[2] = 0x0;
    owner_[3] = 0x0;
    owner_[4] = 0x0;
    owner_[5] = 0x0;
    owner_[6] = 0x0;
    owner_[7] = 0x0;
    owner_[8] = 0x0;
    owner_[9] = 0x0;
    owner_[10] = 0x0;
    owner_[11] = 0x0;
    owner_[12] = 0x0;
    owner_[13] = 0x0;
    owner_[14] = 0x0;
    owner_[15] = 0x0;
    owner_[16] = 0x0;
    owner_[17] = 0x0;
    owner_[18] = 0x0;
    owner_[19] = 0x0;
    owner_[20] = 0x0;
    owner_[21] = 0x0;
    owner_[22] = 0x0;
    owner_[23] = 0x0;
    owner_[24] = 0x0;
    owner_[25] = 0x0;
    owner_[26] = 0x0;
    owner_[27] = 0x0;
    owner_[28] = 0x0;
    owner_[29] = 0x0;
    owner_[30] = 0x0;
    owner_[31] = 0x0;
    owner_[32] = 0x0;
    owner_[33] = 0x0;
    owner_[34] = 0x0;
    owner_[35] = 0x0;
    owner_[36] = 0x0;
    owner_[37] = 0x0;
    owner_[38] = 0x0;
    owner_[39] = 0x0;
    owner_[40] = 0x0;
    owner_[41] = 0x0;
    owner_[42] = 0x0;
    owner_[43] = 0x0;
    owner_[44] = 0x0;
    owner_[45] = 0x0;
    owner_[46] = 0x0;
    owner_[47] = 0x0;
    owner_[48] = 0x0;
    owner_[49] = 0x0;
    owner_[50] = 0x0;
    owner_[51] = 0x0;
    owner_[52] = 0x0;
    owner_[53] = 0x0;
    owner_[54] = 0x0;
    owner_[55] = 0x0;
    owner_[56] = 0x0;
    owner_[57] = 0x0;
    owner_[58] = 0x0;
    owner_[59] = 0x0;
    owner_[60] = 0x0;
    owner_[61] = 0x0;
    owner_[62] = 0x0;
    owner_[63] = 0x0;
    owner_[64] = 0x0;
    owner_[65] = 0x0;
    owner_[66] = 0x0;
    owner_[67] = 0x0;
    owner_[68] = 0x0;
    owner_[69] = 0x0;
    owner_[70] = 0x0;
    owner_[71] = 0x0;
    owner_[72] = 0x0;
    owner_[73] = 0x0;
    owner_[74] = 0x0;
    owner_[75] = 0x0;
    owner_[76] = 0x0;
    owner_[77] = 0x0;
    owner_[78] = 0x0;
    owner_[79] = 0x0;
    owner_[80] = 0x0;
    owner_[81] = 0x0;
    owner_[82] = 0x0;
    owner_[83] = 0x0;
    owner_[84] = 0x0;
    owner_[85] = 0x0;
    owner_[86] = 0x0;
    owner_[87] = 0x0;
    owner_[88] = 0x0;
    owner_[89] = 0x0;
    owner_[90] = 0x0;
    owner_[91] = 0x0;
    owner_[92] = 0x0;
    owner_[93] = 0x0;
    owner_[94] = 0x0;
    owner_[95] = 0x0;
    owner_[96] = 0x0;
    owner_[97] = 0x0;
    owner_[98] = 0x0;
    owner_[99] = 0x0;
    owner_[100] = 0x0;
    owner_[101] = 0x0;
    owner_[102] = 0x0;
    owner_[103] = 0x0;
    owner_[104] = 0x0;
    owner_[105] = 0x0;
    owner_[106] = 0x0;
    owner_[107] = 0x0;
    owner_[108] = 0x0;
    owner_[109] = 0x0;
    owner_[110] = 0x0;
    owner_[111] = 0x0;
    owner_[112] = 0x0;
    owner_[113] = 0x0;
    owner_[114] = 0x0;
    owner_[115] = 0x0;
    owner_[116] = 0x0;
    owner_[117] = 0x0;
    owner_[118] = 0x0;
    owner_[119] = 0x0;
    owner_[120] = 0x0;
    owner_[121] = 0x0;
    owner_[122] = 0x0;
    owner_[123] = 0x0;
    owner_[124] = 0x0;
    owner_[125] = 0x0;
    owner_[126] = 0x0;
    owner_[127] = 0x0;
    owner_[128] = 0x0;
    owner_[129] = 0x0;
    owner_[130] = 0x0;
    owner_[131] = 0x0;
    owner_[132] = 0x0;
    owner_[133] = 0x0;
    owner_[134] = 0x0;
    owner_[135] = 0x0;
    owner_[136] = 0x0;
    owner_[137] = 0x0;
    owner_[138] = 0x0;
    owner_[139] = 0x0;
    owner_[140] = 0x0;
    owner_[141] = 0x0;
    owner_[142] = 0x0;
    owner_[143] = 0x0;
    owner_[144] = 0x0;
    owner_[145] = 0x0;
    owner_[146] = 0x0;
    owner_[147] = 0x0;
    owner_[148] = 0x0;
    owner_[149] = 0x0;
    owner_[150] = 0x0;
    owner_[151] = 0x0;
    owner_[152] = 0x0;
    owner_[153] = 0x0;
    owner_[154] = 0x0;
    owner_[155] = 0x0;
    owner_[156] = 0x0;
    owner_[157] = 0x0;
    owner_[158] = 0x0;
    owner_[159] = 0x0;
    owner_[160] = 0x0;
    owner_[161] = 0x0;
    owner_[162] = 0x0;
    owner_[163] = 0x0;
    owner_[164] = 0x0;
    owner_[165] = 0x0;
    owner_[166] = 0x0;
    owner_[167] = 0x0;
    owner_[168] = 0x0;
    owner_[169] = 0x0;
    owner_[170] = 0x0;
    owner_[171] = 0x0;
    owner_[172] = 0x0;
    owner_[173] = 0x0;
    owner_[174] = 0x0;
    owner_[175] = 0x0;
    owner_[176] = 0x0;
    owner_[177] = 0x0;
    owner_[178] = 0x0;
    owner_[179] = 0x0;
    owner_[180] = 0x0;
    owner_[181] = 0x0;
    owner_[182] = 0x0;
    owner_[183] = 0x0;
    owner_[184] = 0x0;
    owner_[185] = 0x0;
    owner_[186] = 0x0;
    owner_[187] = 0x0;
    owner_[188] = 0x0;
    owner_[189] = 0x0;
    owner_[190] = 0x0;
    owner_[191] = 0x0;
    owner_[192] = 0x0;
    owner_[193] = 0x0;
    owner_[194] = 0x0;
    owner_[195] = 0x0;
    owner_[196] = 0x0;
    owner_[197] = 0x0;
    owner_[198] = 0x0;
    owner_[199] = 0x0;
    owner_[200] = 0x0;
    owner_[201] = 0x0;
    owner_[202] = 0x0;
    owner_[203] = 0x0;
    owner_[204] = 0x0;
    owner_[205] = 0x0;
    owner_[206] = 0x0;
    owner_[207] = 0x0;
    owner_[208] = 0x0;
    owner_[209] = 0x0;
    owner_[210] = 0x0;
    owner_[211] = 0x0;
    owner_[212] = 0x0;
    owner_[213] = 0x0;
    owner_[214] = 0x0;
    owner_[215] = 0x0;
    owner_[216] = 0x0;
    owner_[217] = 0x0;
    owner_[218] = 0x0;
    owner_[219] = 0x0;
    owner_[220] = 0x0;
    owner_[221] = 0x0;
    owner_[222] = 0x0;
    owner_[223] = 0x0;
    t_owner_[0] = 0x0;
    t_owner_[1] = 0x0;
    t_owner_[2] = 0x0;
    t_owner_[3] = 0x0;
    t_owner_[4] = 0x0;
    t_owner_[5] = 0x0;
    t_owner_[6] = 0x0;
    t_owner_[7] = 0x0;
    t_owner_[8] = 0x0;
    t_owner_[9] = 0x0;
    t_owner_[10] = 0x0;
    t_owner_[11] = 0x0;
    t_owner_[12] = 0x0;
    t_owner_[13] = 0x0;
    t_owner_[14] = 0x0;
    t_owner_[15] = 0x0;
    t_owner_[16] = 0x0;
    t_owner_[17] = 0x0;
    t_owner_[18] = 0x0;
    t_owner_[19] = 0x0;
    t_owner_[20] = 0x0;
    t_owner_[21] = 0x0;
    t_owner_[22] = 0x0;
    t_owner_[23] = 0x0;
    t_owner_[24] = 0x0;
    t_owner_[25] = 0x0;
    t_owner_[26] = 0x0;
    t_owner_[27] = 0x0;
    t_owner_[28] = 0x0;
    t_owner_[29] = 0x0;
    t_owner_[30] = 0x0;
    t_owner_[31] = 0x0;
    t_owner_[32] = 0x0;
    t_owner_[33] = 0x0;
    t_owner_[34] = 0x0;
    t_owner_[35] = 0x0;
    t_owner_[36] = 0x0;
    t_owner_[37] = 0x0;
    t_owner_[38] = 0x0;
    t_owner_[39] = 0x0;
    t_owner_[40] = 0x0;
    t_owner_[41] = 0x0;
    t_owner_[42] = 0x0;
    t_owner_[43] = 0x0;
    t_owner_[44] = 0x0;
    t_owner_[45] = 0x0;
    t_owner_[46] = 0x0;
    t_owner_[47] = 0x0;
    t_owner_[48] = 0x0;
    t_owner_[49] = 0x0;
    t_owner_[50] = 0x0;
    t_owner_[51] = 0x0;
    t_owner_[52] = 0x0;
    t_owner_[53] = 0x0;
    t_owner_[54] = 0x0;
    t_owner_[55] = 0x0;
    t_owner_[56] = 0x0;
    t_owner_[57] = 0x0;
    t_owner_[58] = 0x0;
    t_owner_[59] = 0x0;
    t_owner_[60] = 0x0;
    t_owner_[61] = 0x0;
    t_owner_[62] = 0x0;
    t_owner_[63] = 0x0;
    t_owner_[64] = 0x0;
    t_owner_[65] = 0x0;
    t_owner_[66] = 0x0;
    t_owner_[67] = 0x0;
    t_owner_[68] = 0x0;
    t_owner_[69] = 0x0;
    t_owner_[70] = 0x0;
    t_owner_[71] = 0x0;
    t_owner_[72] = 0x0;
    t_owner_[73] = 0x0;
    t_owner_[74] = 0x0;
    t_owner_[75] = 0x0;
    t_owner_[76] = 0x0;
    t_owner_[77] = 0x0;
    t_owner_[78] = 0x0;
    t_owner_[79] = 0x0;
    t_owner_[80] = 0x0;
    t_owner_[81] = 0x0;
    t_owner_[82] = 0x0;
    t_owner_[83] = 0x0;
    t_owner_[84] = 0x0;
    t_owner_[85] = 0x0;
    t_owner_[86] = 0x0;
    t_owner_[87] = 0x0;
    t_owner_[88] = 0x0;
    t_owner_[89] = 0x0;
    t_owner_[90] = 0x0;
    t_owner_[91] = 0x0;
    t_owner_[92] = 0x0;
    t_owner_[93] = 0x0;
    t_owner_[94] = 0x0;
    t_owner_[95] = 0x0;
    t_owner_[96] = 0x0;
    t_owner_[97] = 0x0;
    t_owner_[98] = 0x0;
    t_owner_[99] = 0x0;
    t_owner_[100] = 0x0;
    t_owner_[101] = 0x0;
    t_owner_[102] = 0x0;
    t_owner_[103] = 0x0;
    t_owner_[104] = 0x0;
    t_owner_[105] = 0x0;
    t_owner_[106] = 0x0;
    t_owner_[107] = 0x0;
    t_owner_[108] = 0x0;
    t_owner_[109] = 0x0;
    t_owner_[110] = 0x0;
    t_owner_[111] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PrsrRegMainRspecPhvOwnerMutable") + ":\n";
    for (uint32_t f=0;f<224;++f) {
      r += indent_string + "  " + std::string("owner") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(owner_[f]) ) + "\n";
      all_zeros &= (0 == owner_[f]);
    }
    for (uint32_t f=0;f<112;++f) {
      r += indent_string + "  " + std::string("t_owner") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(t_owner_[f]) ) + "\n";
      all_zeros &= (0 == t_owner_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PrsrRegMainRspecPhvOwnerMutable") + ":\n";
    for (uint32_t f=0;f<224;++f) {
      r += indent_string + "  " + std::string("owner") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(owner_[f]) ) + "\n";
      all_zeros &= (0 == owner_[f]);
    }
    for (uint32_t f=0;f<112;++f) {
      r += indent_string + "  " + std::string("t_owner") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(t_owner_[f]) ) + "\n";
      all_zeros &= (0 == t_owner_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 224 > owner_;
  std::array< uint8_t, 112 > t_owner_;
private:
  static int StartOffset(
      int index_pipe_addrmap, PmarbRspecEnum selector_pmarb_rspec, int index_ebp_rspec
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    switch (selector_pmarb_rspec) {
      case kEbp18Reg:
        offset += 0x40000; // to get to ebp18_reg
        assert(index_ebp_rspec < 18);
        offset += index_ebp_rspec * 0x2000; // ebp_rspec[]
        offset += 0x40; // to get to phv_owner
        break;
      case kIbp18Reg:
        assert(index_ebp_rspec < 18);
        offset += index_ebp_rspec * 0x2000; // ibp_rspec[]
        offset += 0x40; // to get to phv_owner
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_PRSR_REG_MAIN_RSPEC_PHV_OWNER_MUTABLE_H__
