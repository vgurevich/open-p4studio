/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PRSR_REG_MERGE_RSPEC_PHV_VALID_H__
#define __REGISTER_INCLUDES_PRSR_REG_MERGE_RSPEC_PHV_VALID_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class PrsrRegMergeRspecPhvValid : public model_core::RegisterBlock<RegisterCallback> {
public:
  PrsrRegMergeRspecPhvValid(
      int chipNumber, int index_pipe_addrmap, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap), 28, false, write_callback, read_callback, std::string("PrsrRegMergeRspecPhvValid")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap))
    {
    }
  PrsrRegMergeRspecPhvValid(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "PrsrRegMergeRspecPhvValid")
    {
    }
public:



  uint8_t &vld(int j0) { return vld_[j0]; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (vld_[0] & 0x1);
      *data |= ((vld_[1] & 0x1) << 1);
      *data |= ((vld_[2] & 0x1) << 2);
      *data |= ((vld_[3] & 0x1) << 3);
      *data |= ((vld_[4] & 0x1) << 4);
      *data |= ((vld_[5] & 0x1) << 5);
      *data |= ((vld_[6] & 0x1) << 6);
      *data |= ((vld_[7] & 0x1) << 7);
      *data |= ((vld_[8] & 0x1) << 8);
      *data |= ((vld_[9] & 0x1) << 9);
      *data |= ((vld_[10] & 0x1) << 10);
      *data |= ((vld_[11] & 0x1) << 11);
      *data |= ((vld_[12] & 0x1) << 12);
      *data |= ((vld_[13] & 0x1) << 13);
      *data |= ((vld_[14] & 0x1) << 14);
      *data |= ((vld_[15] & 0x1) << 15);
      *data |= ((vld_[16] & 0x1) << 16);
      *data |= ((vld_[17] & 0x1) << 17);
      *data |= ((vld_[18] & 0x1) << 18);
      *data |= ((vld_[19] & 0x1) << 19);
      *data |= ((vld_[20] & 0x1) << 20);
      *data |= ((vld_[21] & 0x1) << 21);
      *data |= ((vld_[22] & 0x1) << 22);
      *data |= ((vld_[23] & 0x1) << 23);
      *data |= ((vld_[24] & 0x1) << 24);
      *data |= ((vld_[25] & 0x1) << 25);
      *data |= ((vld_[26] & 0x1) << 26);
      *data |= ((vld_[27] & 0x1) << 27);
      *data |= ((vld_[28] & 0x1) << 28);
      *data |= ((vld_[29] & 0x1) << 29);
      *data |= ((vld_[30] & 0x1) << 30);
      *data |= ((vld_[31] & 0x1) << 31);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = (vld_[32] & 0x1);
      *data |= ((vld_[33] & 0x1) << 1);
      *data |= ((vld_[34] & 0x1) << 2);
      *data |= ((vld_[35] & 0x1) << 3);
      *data |= ((vld_[36] & 0x1) << 4);
      *data |= ((vld_[37] & 0x1) << 5);
      *data |= ((vld_[38] & 0x1) << 6);
      *data |= ((vld_[39] & 0x1) << 7);
      *data |= ((vld_[40] & 0x1) << 8);
      *data |= ((vld_[41] & 0x1) << 9);
      *data |= ((vld_[42] & 0x1) << 10);
      *data |= ((vld_[43] & 0x1) << 11);
      *data |= ((vld_[44] & 0x1) << 12);
      *data |= ((vld_[45] & 0x1) << 13);
      *data |= ((vld_[46] & 0x1) << 14);
      *data |= ((vld_[47] & 0x1) << 15);
      *data |= ((vld_[48] & 0x1) << 16);
      *data |= ((vld_[49] & 0x1) << 17);
      *data |= ((vld_[50] & 0x1) << 18);
      *data |= ((vld_[51] & 0x1) << 19);
      *data |= ((vld_[52] & 0x1) << 20);
      *data |= ((vld_[53] & 0x1) << 21);
      *data |= ((vld_[54] & 0x1) << 22);
      *data |= ((vld_[55] & 0x1) << 23);
      *data |= ((vld_[56] & 0x1) << 24);
      *data |= ((vld_[57] & 0x1) << 25);
      *data |= ((vld_[58] & 0x1) << 26);
      *data |= ((vld_[59] & 0x1) << 27);
      *data |= ((vld_[60] & 0x1) << 28);
      *data |= ((vld_[61] & 0x1) << 29);
      *data |= ((vld_[62] & 0x1) << 30);
      *data |= ((vld_[63] & 0x1) << 31);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = (vld_[64] & 0x1);
      *data |= ((vld_[65] & 0x1) << 1);
      *data |= ((vld_[66] & 0x1) << 2);
      *data |= ((vld_[67] & 0x1) << 3);
      *data |= ((vld_[68] & 0x1) << 4);
      *data |= ((vld_[69] & 0x1) << 5);
      *data |= ((vld_[70] & 0x1) << 6);
      *data |= ((vld_[71] & 0x1) << 7);
      *data |= ((vld_[72] & 0x1) << 8);
      *data |= ((vld_[73] & 0x1) << 9);
      *data |= ((vld_[74] & 0x1) << 10);
      *data |= ((vld_[75] & 0x1) << 11);
      *data |= ((vld_[76] & 0x1) << 12);
      *data |= ((vld_[77] & 0x1) << 13);
      *data |= ((vld_[78] & 0x1) << 14);
      *data |= ((vld_[79] & 0x1) << 15);
      *data |= ((vld_[80] & 0x1) << 16);
      *data |= ((vld_[81] & 0x1) << 17);
      *data |= ((vld_[82] & 0x1) << 18);
      *data |= ((vld_[83] & 0x1) << 19);
      *data |= ((vld_[84] & 0x1) << 20);
      *data |= ((vld_[85] & 0x1) << 21);
      *data |= ((vld_[86] & 0x1) << 22);
      *data |= ((vld_[87] & 0x1) << 23);
      *data |= ((vld_[88] & 0x1) << 24);
      *data |= ((vld_[89] & 0x1) << 25);
      *data |= ((vld_[90] & 0x1) << 26);
      *data |= ((vld_[91] & 0x1) << 27);
      *data |= ((vld_[92] & 0x1) << 28);
      *data |= ((vld_[93] & 0x1) << 29);
      *data |= ((vld_[94] & 0x1) << 30);
      *data |= ((vld_[95] & 0x1) << 31);
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = (vld_[96] & 0x1);
      *data |= ((vld_[97] & 0x1) << 1);
      *data |= ((vld_[98] & 0x1) << 2);
      *data |= ((vld_[99] & 0x1) << 3);
      *data |= ((vld_[100] & 0x1) << 4);
      *data |= ((vld_[101] & 0x1) << 5);
      *data |= ((vld_[102] & 0x1) << 6);
      *data |= ((vld_[103] & 0x1) << 7);
      *data |= ((vld_[104] & 0x1) << 8);
      *data |= ((vld_[105] & 0x1) << 9);
      *data |= ((vld_[106] & 0x1) << 10);
      *data |= ((vld_[107] & 0x1) << 11);
      *data |= ((vld_[108] & 0x1) << 12);
      *data |= ((vld_[109] & 0x1) << 13);
      *data |= ((vld_[110] & 0x1) << 14);
      *data |= ((vld_[111] & 0x1) << 15);
      *data |= ((vld_[112] & 0x1) << 16);
      *data |= ((vld_[113] & 0x1) << 17);
      *data |= ((vld_[114] & 0x1) << 18);
      *data |= ((vld_[115] & 0x1) << 19);
      *data |= ((vld_[116] & 0x1) << 20);
      *data |= ((vld_[117] & 0x1) << 21);
      *data |= ((vld_[118] & 0x1) << 22);
      *data |= ((vld_[119] & 0x1) << 23);
      *data |= ((vld_[120] & 0x1) << 24);
      *data |= ((vld_[121] & 0x1) << 25);
      *data |= ((vld_[122] & 0x1) << 26);
      *data |= ((vld_[123] & 0x1) << 27);
      *data |= ((vld_[124] & 0x1) << 28);
      *data |= ((vld_[125] & 0x1) << 29);
      *data |= ((vld_[126] & 0x1) << 30);
      *data |= ((vld_[127] & 0x1) << 31);
    }
    else if (offset >= 0x10 && offset < 0x14) {
      if (read_callback_) read_callback_();
      *data = (vld_[128] & 0x1);
      *data |= ((vld_[129] & 0x1) << 1);
      *data |= ((vld_[130] & 0x1) << 2);
      *data |= ((vld_[131] & 0x1) << 3);
      *data |= ((vld_[132] & 0x1) << 4);
      *data |= ((vld_[133] & 0x1) << 5);
      *data |= ((vld_[134] & 0x1) << 6);
      *data |= ((vld_[135] & 0x1) << 7);
      *data |= ((vld_[136] & 0x1) << 8);
      *data |= ((vld_[137] & 0x1) << 9);
      *data |= ((vld_[138] & 0x1) << 10);
      *data |= ((vld_[139] & 0x1) << 11);
      *data |= ((vld_[140] & 0x1) << 12);
      *data |= ((vld_[141] & 0x1) << 13);
      *data |= ((vld_[142] & 0x1) << 14);
      *data |= ((vld_[143] & 0x1) << 15);
      *data |= ((vld_[144] & 0x1) << 16);
      *data |= ((vld_[145] & 0x1) << 17);
      *data |= ((vld_[146] & 0x1) << 18);
      *data |= ((vld_[147] & 0x1) << 19);
      *data |= ((vld_[148] & 0x1) << 20);
      *data |= ((vld_[149] & 0x1) << 21);
      *data |= ((vld_[150] & 0x1) << 22);
      *data |= ((vld_[151] & 0x1) << 23);
      *data |= ((vld_[152] & 0x1) << 24);
      *data |= ((vld_[153] & 0x1) << 25);
      *data |= ((vld_[154] & 0x1) << 26);
      *data |= ((vld_[155] & 0x1) << 27);
      *data |= ((vld_[156] & 0x1) << 28);
      *data |= ((vld_[157] & 0x1) << 29);
      *data |= ((vld_[158] & 0x1) << 30);
      *data |= ((vld_[159] & 0x1) << 31);
    }
    else if (offset >= 0x14 && offset < 0x18) {
      if (read_callback_) read_callback_();
      *data = (vld_[160] & 0x1);
      *data |= ((vld_[161] & 0x1) << 1);
      *data |= ((vld_[162] & 0x1) << 2);
      *data |= ((vld_[163] & 0x1) << 3);
      *data |= ((vld_[164] & 0x1) << 4);
      *data |= ((vld_[165] & 0x1) << 5);
      *data |= ((vld_[166] & 0x1) << 6);
      *data |= ((vld_[167] & 0x1) << 7);
      *data |= ((vld_[168] & 0x1) << 8);
      *data |= ((vld_[169] & 0x1) << 9);
      *data |= ((vld_[170] & 0x1) << 10);
      *data |= ((vld_[171] & 0x1) << 11);
      *data |= ((vld_[172] & 0x1) << 12);
      *data |= ((vld_[173] & 0x1) << 13);
      *data |= ((vld_[174] & 0x1) << 14);
      *data |= ((vld_[175] & 0x1) << 15);
      *data |= ((vld_[176] & 0x1) << 16);
      *data |= ((vld_[177] & 0x1) << 17);
      *data |= ((vld_[178] & 0x1) << 18);
      *data |= ((vld_[179] & 0x1) << 19);
      *data |= ((vld_[180] & 0x1) << 20);
      *data |= ((vld_[181] & 0x1) << 21);
      *data |= ((vld_[182] & 0x1) << 22);
      *data |= ((vld_[183] & 0x1) << 23);
      *data |= ((vld_[184] & 0x1) << 24);
      *data |= ((vld_[185] & 0x1) << 25);
      *data |= ((vld_[186] & 0x1) << 26);
      *data |= ((vld_[187] & 0x1) << 27);
      *data |= ((vld_[188] & 0x1) << 28);
      *data |= ((vld_[189] & 0x1) << 29);
      *data |= ((vld_[190] & 0x1) << 30);
      *data |= ((vld_[191] & 0x1) << 31);
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      if (read_callback_) read_callback_();
      *data = (vld_[192] & 0x1);
      *data |= ((vld_[193] & 0x1) << 1);
      *data |= ((vld_[194] & 0x1) << 2);
      *data |= ((vld_[195] & 0x1) << 3);
      *data |= ((vld_[196] & 0x1) << 4);
      *data |= ((vld_[197] & 0x1) << 5);
      *data |= ((vld_[198] & 0x1) << 6);
      *data |= ((vld_[199] & 0x1) << 7);
      *data |= ((vld_[200] & 0x1) << 8);
      *data |= ((vld_[201] & 0x1) << 9);
      *data |= ((vld_[202] & 0x1) << 10);
      *data |= ((vld_[203] & 0x1) << 11);
      *data |= ((vld_[204] & 0x1) << 12);
      *data |= ((vld_[205] & 0x1) << 13);
      *data |= ((vld_[206] & 0x1) << 14);
      *data |= ((vld_[207] & 0x1) << 15);
      *data |= ((vld_[208] & 0x1) << 16);
      *data |= ((vld_[209] & 0x1) << 17);
      *data |= ((vld_[210] & 0x1) << 18);
      *data |= ((vld_[211] & 0x1) << 19);
      *data |= ((vld_[212] & 0x1) << 20);
      *data |= ((vld_[213] & 0x1) << 21);
      *data |= ((vld_[214] & 0x1) << 22);
      *data |= ((vld_[215] & 0x1) << 23);
      *data |= ((vld_[216] & 0x1) << 24);
      *data |= ((vld_[217] & 0x1) << 25);
      *data |= ((vld_[218] & 0x1) << 26);
      *data |= ((vld_[219] & 0x1) << 27);
      *data |= ((vld_[220] & 0x1) << 28);
      *data |= ((vld_[221] & 0x1) << 29);
      *data |= ((vld_[222] & 0x1) << 30);
      *data |= ((vld_[223] & 0x1) << 31);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      vld_[0] = (data & 0x1);
      vld_[1] = ((data >> 1) & 0x1);
      vld_[2] = ((data >> 2) & 0x1);
      vld_[3] = ((data >> 3) & 0x1);
      vld_[4] = ((data >> 4) & 0x1);
      vld_[5] = ((data >> 5) & 0x1);
      vld_[6] = ((data >> 6) & 0x1);
      vld_[7] = ((data >> 7) & 0x1);
      vld_[8] = ((data >> 8) & 0x1);
      vld_[9] = ((data >> 9) & 0x1);
      vld_[10] = ((data >> 10) & 0x1);
      vld_[11] = ((data >> 11) & 0x1);
      vld_[12] = ((data >> 12) & 0x1);
      vld_[13] = ((data >> 13) & 0x1);
      vld_[14] = ((data >> 14) & 0x1);
      vld_[15] = ((data >> 15) & 0x1);
      vld_[16] = ((data >> 16) & 0x1);
      vld_[17] = ((data >> 17) & 0x1);
      vld_[18] = ((data >> 18) & 0x1);
      vld_[19] = ((data >> 19) & 0x1);
      vld_[20] = ((data >> 20) & 0x1);
      vld_[21] = ((data >> 21) & 0x1);
      vld_[22] = ((data >> 22) & 0x1);
      vld_[23] = ((data >> 23) & 0x1);
      vld_[24] = ((data >> 24) & 0x1);
      vld_[25] = ((data >> 25) & 0x1);
      vld_[26] = ((data >> 26) & 0x1);
      vld_[27] = ((data >> 27) & 0x1);
      vld_[28] = ((data >> 28) & 0x1);
      vld_[29] = ((data >> 29) & 0x1);
      vld_[30] = ((data >> 30) & 0x1);
      vld_[31] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      vld_[32] = (data & 0x1);
      vld_[33] = ((data >> 1) & 0x1);
      vld_[34] = ((data >> 2) & 0x1);
      vld_[35] = ((data >> 3) & 0x1);
      vld_[36] = ((data >> 4) & 0x1);
      vld_[37] = ((data >> 5) & 0x1);
      vld_[38] = ((data >> 6) & 0x1);
      vld_[39] = ((data >> 7) & 0x1);
      vld_[40] = ((data >> 8) & 0x1);
      vld_[41] = ((data >> 9) & 0x1);
      vld_[42] = ((data >> 10) & 0x1);
      vld_[43] = ((data >> 11) & 0x1);
      vld_[44] = ((data >> 12) & 0x1);
      vld_[45] = ((data >> 13) & 0x1);
      vld_[46] = ((data >> 14) & 0x1);
      vld_[47] = ((data >> 15) & 0x1);
      vld_[48] = ((data >> 16) & 0x1);
      vld_[49] = ((data >> 17) & 0x1);
      vld_[50] = ((data >> 18) & 0x1);
      vld_[51] = ((data >> 19) & 0x1);
      vld_[52] = ((data >> 20) & 0x1);
      vld_[53] = ((data >> 21) & 0x1);
      vld_[54] = ((data >> 22) & 0x1);
      vld_[55] = ((data >> 23) & 0x1);
      vld_[56] = ((data >> 24) & 0x1);
      vld_[57] = ((data >> 25) & 0x1);
      vld_[58] = ((data >> 26) & 0x1);
      vld_[59] = ((data >> 27) & 0x1);
      vld_[60] = ((data >> 28) & 0x1);
      vld_[61] = ((data >> 29) & 0x1);
      vld_[62] = ((data >> 30) & 0x1);
      vld_[63] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      vld_[64] = (data & 0x1);
      vld_[65] = ((data >> 1) & 0x1);
      vld_[66] = ((data >> 2) & 0x1);
      vld_[67] = ((data >> 3) & 0x1);
      vld_[68] = ((data >> 4) & 0x1);
      vld_[69] = ((data >> 5) & 0x1);
      vld_[70] = ((data >> 6) & 0x1);
      vld_[71] = ((data >> 7) & 0x1);
      vld_[72] = ((data >> 8) & 0x1);
      vld_[73] = ((data >> 9) & 0x1);
      vld_[74] = ((data >> 10) & 0x1);
      vld_[75] = ((data >> 11) & 0x1);
      vld_[76] = ((data >> 12) & 0x1);
      vld_[77] = ((data >> 13) & 0x1);
      vld_[78] = ((data >> 14) & 0x1);
      vld_[79] = ((data >> 15) & 0x1);
      vld_[80] = ((data >> 16) & 0x1);
      vld_[81] = ((data >> 17) & 0x1);
      vld_[82] = ((data >> 18) & 0x1);
      vld_[83] = ((data >> 19) & 0x1);
      vld_[84] = ((data >> 20) & 0x1);
      vld_[85] = ((data >> 21) & 0x1);
      vld_[86] = ((data >> 22) & 0x1);
      vld_[87] = ((data >> 23) & 0x1);
      vld_[88] = ((data >> 24) & 0x1);
      vld_[89] = ((data >> 25) & 0x1);
      vld_[90] = ((data >> 26) & 0x1);
      vld_[91] = ((data >> 27) & 0x1);
      vld_[92] = ((data >> 28) & 0x1);
      vld_[93] = ((data >> 29) & 0x1);
      vld_[94] = ((data >> 30) & 0x1);
      vld_[95] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      vld_[96] = (data & 0x1);
      vld_[97] = ((data >> 1) & 0x1);
      vld_[98] = ((data >> 2) & 0x1);
      vld_[99] = ((data >> 3) & 0x1);
      vld_[100] = ((data >> 4) & 0x1);
      vld_[101] = ((data >> 5) & 0x1);
      vld_[102] = ((data >> 6) & 0x1);
      vld_[103] = ((data >> 7) & 0x1);
      vld_[104] = ((data >> 8) & 0x1);
      vld_[105] = ((data >> 9) & 0x1);
      vld_[106] = ((data >> 10) & 0x1);
      vld_[107] = ((data >> 11) & 0x1);
      vld_[108] = ((data >> 12) & 0x1);
      vld_[109] = ((data >> 13) & 0x1);
      vld_[110] = ((data >> 14) & 0x1);
      vld_[111] = ((data >> 15) & 0x1);
      vld_[112] = ((data >> 16) & 0x1);
      vld_[113] = ((data >> 17) & 0x1);
      vld_[114] = ((data >> 18) & 0x1);
      vld_[115] = ((data >> 19) & 0x1);
      vld_[116] = ((data >> 20) & 0x1);
      vld_[117] = ((data >> 21) & 0x1);
      vld_[118] = ((data >> 22) & 0x1);
      vld_[119] = ((data >> 23) & 0x1);
      vld_[120] = ((data >> 24) & 0x1);
      vld_[121] = ((data >> 25) & 0x1);
      vld_[122] = ((data >> 26) & 0x1);
      vld_[123] = ((data >> 27) & 0x1);
      vld_[124] = ((data >> 28) & 0x1);
      vld_[125] = ((data >> 29) & 0x1);
      vld_[126] = ((data >> 30) & 0x1);
      vld_[127] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      vld_[128] = (data & 0x1);
      vld_[129] = ((data >> 1) & 0x1);
      vld_[130] = ((data >> 2) & 0x1);
      vld_[131] = ((data >> 3) & 0x1);
      vld_[132] = ((data >> 4) & 0x1);
      vld_[133] = ((data >> 5) & 0x1);
      vld_[134] = ((data >> 6) & 0x1);
      vld_[135] = ((data >> 7) & 0x1);
      vld_[136] = ((data >> 8) & 0x1);
      vld_[137] = ((data >> 9) & 0x1);
      vld_[138] = ((data >> 10) & 0x1);
      vld_[139] = ((data >> 11) & 0x1);
      vld_[140] = ((data >> 12) & 0x1);
      vld_[141] = ((data >> 13) & 0x1);
      vld_[142] = ((data >> 14) & 0x1);
      vld_[143] = ((data >> 15) & 0x1);
      vld_[144] = ((data >> 16) & 0x1);
      vld_[145] = ((data >> 17) & 0x1);
      vld_[146] = ((data >> 18) & 0x1);
      vld_[147] = ((data >> 19) & 0x1);
      vld_[148] = ((data >> 20) & 0x1);
      vld_[149] = ((data >> 21) & 0x1);
      vld_[150] = ((data >> 22) & 0x1);
      vld_[151] = ((data >> 23) & 0x1);
      vld_[152] = ((data >> 24) & 0x1);
      vld_[153] = ((data >> 25) & 0x1);
      vld_[154] = ((data >> 26) & 0x1);
      vld_[155] = ((data >> 27) & 0x1);
      vld_[156] = ((data >> 28) & 0x1);
      vld_[157] = ((data >> 29) & 0x1);
      vld_[158] = ((data >> 30) & 0x1);
      vld_[159] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      vld_[160] = (data & 0x1);
      vld_[161] = ((data >> 1) & 0x1);
      vld_[162] = ((data >> 2) & 0x1);
      vld_[163] = ((data >> 3) & 0x1);
      vld_[164] = ((data >> 4) & 0x1);
      vld_[165] = ((data >> 5) & 0x1);
      vld_[166] = ((data >> 6) & 0x1);
      vld_[167] = ((data >> 7) & 0x1);
      vld_[168] = ((data >> 8) & 0x1);
      vld_[169] = ((data >> 9) & 0x1);
      vld_[170] = ((data >> 10) & 0x1);
      vld_[171] = ((data >> 11) & 0x1);
      vld_[172] = ((data >> 12) & 0x1);
      vld_[173] = ((data >> 13) & 0x1);
      vld_[174] = ((data >> 14) & 0x1);
      vld_[175] = ((data >> 15) & 0x1);
      vld_[176] = ((data >> 16) & 0x1);
      vld_[177] = ((data >> 17) & 0x1);
      vld_[178] = ((data >> 18) & 0x1);
      vld_[179] = ((data >> 19) & 0x1);
      vld_[180] = ((data >> 20) & 0x1);
      vld_[181] = ((data >> 21) & 0x1);
      vld_[182] = ((data >> 22) & 0x1);
      vld_[183] = ((data >> 23) & 0x1);
      vld_[184] = ((data >> 24) & 0x1);
      vld_[185] = ((data >> 25) & 0x1);
      vld_[186] = ((data >> 26) & 0x1);
      vld_[187] = ((data >> 27) & 0x1);
      vld_[188] = ((data >> 28) & 0x1);
      vld_[189] = ((data >> 29) & 0x1);
      vld_[190] = ((data >> 30) & 0x1);
      vld_[191] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      vld_[192] = (data & 0x1);
      vld_[193] = ((data >> 1) & 0x1);
      vld_[194] = ((data >> 2) & 0x1);
      vld_[195] = ((data >> 3) & 0x1);
      vld_[196] = ((data >> 4) & 0x1);
      vld_[197] = ((data >> 5) & 0x1);
      vld_[198] = ((data >> 6) & 0x1);
      vld_[199] = ((data >> 7) & 0x1);
      vld_[200] = ((data >> 8) & 0x1);
      vld_[201] = ((data >> 9) & 0x1);
      vld_[202] = ((data >> 10) & 0x1);
      vld_[203] = ((data >> 11) & 0x1);
      vld_[204] = ((data >> 12) & 0x1);
      vld_[205] = ((data >> 13) & 0x1);
      vld_[206] = ((data >> 14) & 0x1);
      vld_[207] = ((data >> 15) & 0x1);
      vld_[208] = ((data >> 16) & 0x1);
      vld_[209] = ((data >> 17) & 0x1);
      vld_[210] = ((data >> 18) & 0x1);
      vld_[211] = ((data >> 19) & 0x1);
      vld_[212] = ((data >> 20) & 0x1);
      vld_[213] = ((data >> 21) & 0x1);
      vld_[214] = ((data >> 22) & 0x1);
      vld_[215] = ((data >> 23) & 0x1);
      vld_[216] = ((data >> 24) & 0x1);
      vld_[217] = ((data >> 25) & 0x1);
      vld_[218] = ((data >> 26) & 0x1);
      vld_[219] = ((data >> 27) & 0x1);
      vld_[220] = ((data >> 28) & 0x1);
      vld_[221] = ((data >> 29) & 0x1);
      vld_[222] = ((data >> 30) & 0x1);
      vld_[223] = ((data >> 31) & 0x1);
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    vld_[0] = 0x0;
    vld_[1] = 0x0;
    vld_[2] = 0x0;
    vld_[3] = 0x0;
    vld_[4] = 0x0;
    vld_[5] = 0x0;
    vld_[6] = 0x0;
    vld_[7] = 0x0;
    vld_[8] = 0x0;
    vld_[9] = 0x0;
    vld_[10] = 0x0;
    vld_[11] = 0x0;
    vld_[12] = 0x0;
    vld_[13] = 0x0;
    vld_[14] = 0x0;
    vld_[15] = 0x0;
    vld_[16] = 0x0;
    vld_[17] = 0x0;
    vld_[18] = 0x0;
    vld_[19] = 0x0;
    vld_[20] = 0x0;
    vld_[21] = 0x0;
    vld_[22] = 0x0;
    vld_[23] = 0x0;
    vld_[24] = 0x0;
    vld_[25] = 0x0;
    vld_[26] = 0x0;
    vld_[27] = 0x0;
    vld_[28] = 0x0;
    vld_[29] = 0x0;
    vld_[30] = 0x0;
    vld_[31] = 0x0;
    vld_[32] = 0x0;
    vld_[33] = 0x0;
    vld_[34] = 0x0;
    vld_[35] = 0x0;
    vld_[36] = 0x0;
    vld_[37] = 0x0;
    vld_[38] = 0x0;
    vld_[39] = 0x0;
    vld_[40] = 0x0;
    vld_[41] = 0x0;
    vld_[42] = 0x0;
    vld_[43] = 0x0;
    vld_[44] = 0x0;
    vld_[45] = 0x0;
    vld_[46] = 0x0;
    vld_[47] = 0x0;
    vld_[48] = 0x0;
    vld_[49] = 0x0;
    vld_[50] = 0x0;
    vld_[51] = 0x0;
    vld_[52] = 0x0;
    vld_[53] = 0x0;
    vld_[54] = 0x0;
    vld_[55] = 0x0;
    vld_[56] = 0x0;
    vld_[57] = 0x0;
    vld_[58] = 0x0;
    vld_[59] = 0x0;
    vld_[60] = 0x0;
    vld_[61] = 0x0;
    vld_[62] = 0x0;
    vld_[63] = 0x0;
    vld_[64] = 0x0;
    vld_[65] = 0x0;
    vld_[66] = 0x0;
    vld_[67] = 0x0;
    vld_[68] = 0x0;
    vld_[69] = 0x0;
    vld_[70] = 0x0;
    vld_[71] = 0x0;
    vld_[72] = 0x0;
    vld_[73] = 0x0;
    vld_[74] = 0x0;
    vld_[75] = 0x0;
    vld_[76] = 0x0;
    vld_[77] = 0x0;
    vld_[78] = 0x0;
    vld_[79] = 0x0;
    vld_[80] = 0x0;
    vld_[81] = 0x0;
    vld_[82] = 0x0;
    vld_[83] = 0x0;
    vld_[84] = 0x0;
    vld_[85] = 0x0;
    vld_[86] = 0x0;
    vld_[87] = 0x0;
    vld_[88] = 0x0;
    vld_[89] = 0x0;
    vld_[90] = 0x0;
    vld_[91] = 0x0;
    vld_[92] = 0x0;
    vld_[93] = 0x0;
    vld_[94] = 0x0;
    vld_[95] = 0x0;
    vld_[96] = 0x0;
    vld_[97] = 0x0;
    vld_[98] = 0x0;
    vld_[99] = 0x0;
    vld_[100] = 0x0;
    vld_[101] = 0x0;
    vld_[102] = 0x0;
    vld_[103] = 0x0;
    vld_[104] = 0x0;
    vld_[105] = 0x0;
    vld_[106] = 0x0;
    vld_[107] = 0x0;
    vld_[108] = 0x0;
    vld_[109] = 0x0;
    vld_[110] = 0x0;
    vld_[111] = 0x0;
    vld_[112] = 0x0;
    vld_[113] = 0x0;
    vld_[114] = 0x0;
    vld_[115] = 0x0;
    vld_[116] = 0x0;
    vld_[117] = 0x0;
    vld_[118] = 0x0;
    vld_[119] = 0x0;
    vld_[120] = 0x0;
    vld_[121] = 0x0;
    vld_[122] = 0x0;
    vld_[123] = 0x0;
    vld_[124] = 0x0;
    vld_[125] = 0x0;
    vld_[126] = 0x0;
    vld_[127] = 0x0;
    vld_[128] = 0x0;
    vld_[129] = 0x0;
    vld_[130] = 0x0;
    vld_[131] = 0x0;
    vld_[132] = 0x0;
    vld_[133] = 0x0;
    vld_[134] = 0x0;
    vld_[135] = 0x0;
    vld_[136] = 0x0;
    vld_[137] = 0x0;
    vld_[138] = 0x0;
    vld_[139] = 0x0;
    vld_[140] = 0x0;
    vld_[141] = 0x0;
    vld_[142] = 0x0;
    vld_[143] = 0x0;
    vld_[144] = 0x0;
    vld_[145] = 0x0;
    vld_[146] = 0x0;
    vld_[147] = 0x0;
    vld_[148] = 0x0;
    vld_[149] = 0x0;
    vld_[150] = 0x0;
    vld_[151] = 0x0;
    vld_[152] = 0x0;
    vld_[153] = 0x0;
    vld_[154] = 0x0;
    vld_[155] = 0x0;
    vld_[156] = 0x0;
    vld_[157] = 0x0;
    vld_[158] = 0x0;
    vld_[159] = 0x0;
    vld_[160] = 0x0;
    vld_[161] = 0x0;
    vld_[162] = 0x0;
    vld_[163] = 0x0;
    vld_[164] = 0x0;
    vld_[165] = 0x0;
    vld_[166] = 0x0;
    vld_[167] = 0x0;
    vld_[168] = 0x0;
    vld_[169] = 0x0;
    vld_[170] = 0x0;
    vld_[171] = 0x0;
    vld_[172] = 0x0;
    vld_[173] = 0x0;
    vld_[174] = 0x0;
    vld_[175] = 0x0;
    vld_[176] = 0x0;
    vld_[177] = 0x0;
    vld_[178] = 0x0;
    vld_[179] = 0x0;
    vld_[180] = 0x0;
    vld_[181] = 0x0;
    vld_[182] = 0x0;
    vld_[183] = 0x0;
    vld_[184] = 0x0;
    vld_[185] = 0x0;
    vld_[186] = 0x0;
    vld_[187] = 0x0;
    vld_[188] = 0x0;
    vld_[189] = 0x0;
    vld_[190] = 0x0;
    vld_[191] = 0x0;
    vld_[192] = 0x0;
    vld_[193] = 0x0;
    vld_[194] = 0x0;
    vld_[195] = 0x0;
    vld_[196] = 0x0;
    vld_[197] = 0x0;
    vld_[198] = 0x0;
    vld_[199] = 0x0;
    vld_[200] = 0x0;
    vld_[201] = 0x0;
    vld_[202] = 0x0;
    vld_[203] = 0x0;
    vld_[204] = 0x0;
    vld_[205] = 0x0;
    vld_[206] = 0x0;
    vld_[207] = 0x0;
    vld_[208] = 0x0;
    vld_[209] = 0x0;
    vld_[210] = 0x0;
    vld_[211] = 0x0;
    vld_[212] = 0x0;
    vld_[213] = 0x0;
    vld_[214] = 0x0;
    vld_[215] = 0x0;
    vld_[216] = 0x0;
    vld_[217] = 0x0;
    vld_[218] = 0x0;
    vld_[219] = 0x0;
    vld_[220] = 0x0;
    vld_[221] = 0x0;
    vld_[222] = 0x0;
    vld_[223] = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PrsrRegMergeRspecPhvValid") + ":\n";
    for (uint32_t f=0;f<224;++f) {
      r += indent_string + "  " + std::string("vld") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(vld_[f]) ) + "\n";
      all_zeros &= (0 == vld_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PrsrRegMergeRspecPhvValid") + ":\n";
    for (uint32_t f=0;f<224;++f) {
      r += indent_string + "  " + std::string("vld") + "["+boost::lexical_cast<std::string>(f)+"]"+ ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(vld_[f]) ) + "\n";
      all_zeros &= (0 == vld_[f]);
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::array< uint8_t, 224 > vld_;
private:
  static int StartOffset(
      int index_pipe_addrmap
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    offset += 0x700000; // to get to pmarb
    offset += 0x32000; // to get to prsr_reg
    offset += 0x80; // to get to phv_valid
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_PRSR_REG_MERGE_RSPEC_PHV_VALID_H__
