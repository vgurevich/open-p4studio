/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PSC_EPIPE_G_MUTABLE_H__
#define __REGISTER_INCLUDES_PSC_EPIPE_G_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "psc_epipe_blocks_max_usecnt_r_mutable.h"
#include "psc_epipe_blocks_usecnt_r_mutable.h"
#include "psc_epipe_enable_r_mutable.h"
#include "psc_epipe_pkt_dropcnt_r_mutable.h"

namespace tofinoB0 {
  namespace register_classes {

class PscEpipeGMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PscEpipeGMutable(
      int chipNumber, int index_psc_epipe_g, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_psc_epipe_g), 24, true, write_callback, read_callback, std::string("PscEpipeGMutable")+":"+boost::lexical_cast<std::string>(index_psc_epipe_g))
    {
    }
  PscEpipeGMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PscEpipeGMutable")
    {
    }
public:





  PscEpipeEnableRMutable &epipe_enable() { return epipe_enable_; }






  PscEpipeBlocksUsecntRMutable &epipe_blks_usecnt() { return epipe_blks_usecnt_; }





  PscEpipeBlocksMaxUsecntRMutable &epipe_blks_max_usecnt() { return epipe_blks_max_usecnt_; }





  PscEpipePktDropcntRMutable &epipe_pkt_dropcnt() { return epipe_pkt_dropcnt_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x1000 && offset < 0x1004) {
      offset -= 0x1000;
      if (read_callback_) read_callback_();
      epipe_enable_.read( offset, data );
    }
    else if (offset >= 0x1004 && offset < 0x1008) {
      offset -= 0x1004;
      if (read_callback_) read_callback_();
      epipe_blks_usecnt_.read( offset, data );
    }
    else if (offset >= 0x1008 && offset < 0x100c) {
      offset -= 0x1008;
      if (read_callback_) read_callback_();
      epipe_blks_max_usecnt_.read( offset, data );
    }
    else if (offset >= 0x1010 && offset < 0x1018) {
      offset -= 0x1010;
      if (read_callback_) read_callback_();
      epipe_pkt_dropcnt_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x1000 && offset < 0x1004) {
      offset -= 0x1000;
      epipe_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1004 && offset < 0x1008) {
      offset -= 0x1004;
      epipe_blks_usecnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1008 && offset < 0x100c) {
      offset -= 0x1008;
      epipe_blks_max_usecnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1010 && offset < 0x1018) {
      offset -= 0x1010;
      epipe_pkt_dropcnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    epipe_enable_.reset();
    epipe_blks_usecnt_.reset();
    epipe_blks_max_usecnt_.reset();
    epipe_pkt_dropcnt_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x1000 && offset < 0x1004) {
      offset -= 0x1000;
      r += epipe_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1004 && offset < 0x1008) {
      offset -= 0x1004;
      r += epipe_blks_usecnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1008 && offset < 0x100c) {
      offset -= 0x1008;
      r += epipe_blks_max_usecnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1010 && offset < 0x1018) {
      offset -= 0x1010;
      r += epipe_pkt_dropcnt_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += epipe_enable_.to_string(print_zeros,indent_string) ;
    r += epipe_blks_usecnt_.to_string(print_zeros,indent_string) ;
    r += epipe_blks_max_usecnt_.to_string(print_zeros,indent_string) ;
    r += epipe_pkt_dropcnt_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  PscEpipeEnableRMutable epipe_enable_;
  PscEpipeBlocksUsecntRMutable epipe_blks_usecnt_;
  PscEpipeBlocksMaxUsecntRMutable epipe_blks_max_usecnt_;
  PscEpipePktDropcntRMutable epipe_pkt_dropcnt_;
private:
  static int StartOffset(
      int index_psc_epipe_g
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x240000; // to get to tm_psc_top
    offset += 0x20000; // to get to psc_common
    offset += 0x1000; // to get to epipe
    assert(index_psc_epipe_g < 4);
    offset += index_psc_epipe_g * 0x18; // psc_epipe_g[]
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_PSC_EPIPE_G_MUTABLE_H__
