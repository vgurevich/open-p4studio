/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_PSC_PSM_INDIR_ACCESS_DATA_R_MUTABLE_H__
#define __REGISTER_INCLUDES_PSC_PSM_INDIR_ACCESS_DATA_R_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class PscPsmIndirAccessDataRMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  PscPsmIndirAccessDataRMutable(
      int chipNumber, int index_tm_psc_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_psc_pipe_rspec), 24, true, write_callback, read_callback, std::string("PscPsmIndirAccessDataRMutable")+":"+boost::lexical_cast<std::string>(index_tm_psc_pipe_rspec))
    {
    }
  PscPsmIndirAccessDataRMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "PscPsmIndirAccessDataRMutable")
    {
    }
public:




  uint32_t field6() { return field6_; }
  void field6(const uint32_t &v) { field6_=v; }




  uint32_t field4() { return field4_; }
  void field4(const uint32_t &v) { field4_=v; }




  uint32_t field3() { return field3_; }
  void field3(const uint32_t &v) { field3_=v; }




  uint32_t field2() { return field2_; }
  void field2(const uint32_t &v) { field2_=v; }




  uint32_t field1() { return field1_; }
  void field1(const uint32_t &v) { field1_=v; }




  uint32_t field0() { return field0_; }
  void field0(const uint32_t &v) { field0_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      if (read_callback_) read_callback_();
      *data = (field6_ & 0x7ffff);
      *data |= ((field4_ & 0x1fff) << 19);
    }
    else if (offset >= 0x4 && offset < 0x8) {
      if (read_callback_) read_callback_();
      *data = ((field4_ & 0xffffe000) >> 13);
      *data |= ((field3_ & 0x1fff) << 19);
    }
    else if (offset >= 0x8 && offset < 0xc) {
      if (read_callback_) read_callback_();
      *data = ((field3_ & 0xffffe000) >> 13);
      *data |= ((field2_ & 0x1fff) << 19);
    }
    else if (offset >= 0xc && offset < 0x10) {
      if (read_callback_) read_callback_();
      *data = ((field2_ & 0xffffe000) >> 13);
      *data |= ((field1_ & 0x1fff) << 19);
    }
    else if (offset >= 0x10 && offset < 0x14) {
      if (read_callback_) read_callback_();
      *data = ((field1_ & 0xffffe000) >> 13);
      *data |= ((field0_ & 0x1fff) << 19);
    }
    else if (offset >= 0x14 && offset < 0x18) {
      if (read_callback_) read_callback_();
      *data = ((field0_ & 0xffffe000) >> 13);
    }
    else {
      assert(0);
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      field6_ = (data & 0x7ffff);
      field4_ = (((data >> 19) & 0x1fff) | (field4_ & 0xffffe000));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4 && offset < 0x8) {
      field4_ = (((data << 13) & 0xffffe000) | (field4_ & 0x1fff));
      field3_ = (((data >> 19) & 0x1fff) | (field3_ & 0xffffe000));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x8 && offset < 0xc) {
      field3_ = (((data << 13) & 0xffffe000) | (field3_ & 0x1fff));
      field2_ = (((data >> 19) & 0x1fff) | (field2_ & 0xffffe000));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0xc && offset < 0x10) {
      field2_ = (((data << 13) & 0xffffe000) | (field2_ & 0x1fff));
      field1_ = (((data >> 19) & 0x1fff) | (field1_ & 0xffffe000));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      field1_ = (((data << 13) & 0xffffe000) | (field1_ & 0x1fff));
      field0_ = (((data >> 19) & 0x1fff) | (field0_ & 0xffffe000));
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      field0_ = (((data << 13) & 0xffffe000) | (field0_ & 0x1fff));
      if (write_callback_) write_callback_();
    }
    else {
      assert(0);
    }
    return true;
  }

  void reset(
      
      ) {
    field6_ = 0x0;
    field4_ = 0x0;
    field3_ = 0x0;
    field2_ = 0x0;
    field1_ = 0x0;
    field0_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PscPsmIndirAccessDataRMutable") + ":\n";
    r += indent_string + "  " + std::string("field6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(field6_) ) + "\n";
    all_zeros &= (0 == field6_);
    r += indent_string + "  " + std::string("field4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(field4_) ) + "\n";
    all_zeros &= (0 == field4_);
    r += indent_string + "  " + std::string("field3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(field3_) ) + "\n";
    all_zeros &= (0 == field3_);
    r += indent_string + "  " + std::string("field2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(field2_) ) + "\n";
    all_zeros &= (0 == field2_);
    r += indent_string + "  " + std::string("field1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(field1_) ) + "\n";
    all_zeros &= (0 == field1_);
    r += indent_string + "  " + std::string("field0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(field0_) ) + "\n";
    all_zeros &= (0 == field0_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("PscPsmIndirAccessDataRMutable") + ":\n";
    r += indent_string + "  " + std::string("field6") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(field6_) ) + "\n";
    all_zeros &= (0 == field6_);
    r += indent_string + "  " + std::string("field4") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(field4_) ) + "\n";
    all_zeros &= (0 == field4_);
    r += indent_string + "  " + std::string("field3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(field3_) ) + "\n";
    all_zeros &= (0 == field3_);
    r += indent_string + "  " + std::string("field2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(field2_) ) + "\n";
    all_zeros &= (0 == field2_);
    r += indent_string + "  " + std::string("field1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(field1_) ) + "\n";
    all_zeros &= (0 == field1_);
    r += indent_string + "  " + std::string("field0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(field0_) ) + "\n";
    all_zeros &= (0 == field0_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint32_t field6_;
  uint32_t field4_;
  uint32_t field3_;
  uint32_t field2_;
  uint32_t field1_;
  uint32_t field0_;
private:
  static int StartOffset(
      int index_tm_psc_pipe_rspec
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x240000; // to get to tm_psc_top
    assert(index_tm_psc_pipe_rspec < 4);
    offset += index_tm_psc_pipe_rspec * 0x8000; // tm_psc_pipe_rspec[]
    offset += 0x40; // to get to psm_indir_access_data
    return offset;
  }

};












  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_PSC_PSM_INDIR_ACCESS_DATA_R_MUTABLE_H__
