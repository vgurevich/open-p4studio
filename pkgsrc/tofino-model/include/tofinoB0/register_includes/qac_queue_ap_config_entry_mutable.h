/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_QAC_QUEUE_AP_CONFIG_ENTRY_MUTABLE_H__
#define __REGISTER_INCLUDES_QAC_QUEUE_AP_CONFIG_ENTRY_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class QacQueueApConfigEntryMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  QacQueueApConfigEntryMutable(
      int chipNumber, int index_tm_qac_pipe_rspec, int index_qac_queue_ap_config_entry, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_qac_pipe_rspec, index_qac_queue_ap_config_entry), 4, true, write_callback, read_callback, std::string("QacQueueApConfigEntryMutable")+":"+boost::lexical_cast<std::string>(index_tm_qac_pipe_rspec) + "," + boost::lexical_cast<std::string>(index_qac_queue_ap_config_entry))
    {
    }
  QacQueueApConfigEntryMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "QacQueueApConfigEntryMutable")
    {
    }
public:
  uint8_t ap_id() { return ap_id_; }
  void ap_id(const uint8_t &v) { ap_id_=v; }
  uint8_t q_color_drop_en() { return q_color_drop_en_; }
  void q_color_drop_en(const uint8_t &v) { q_color_drop_en_=v; }
  uint8_t q_drop_en() { return q_drop_en_; }
  void q_drop_en(const uint8_t &v) { q_drop_en_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (ap_id_ & 0x3);
    *data |= ((q_color_drop_en_ & 0x1) << 2);
    *data |= ((q_drop_en_ & 0x1) << 3);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    ap_id_ = (data & 0x3);
    q_color_drop_en_ = ((data >> 2) & 0x1);
    q_drop_en_ = ((data >> 3) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    ap_id_ = 0;
    q_color_drop_en_ = 0;
    q_drop_en_ = 0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("QacQueueApConfigEntryMutable") + ":\n";
    r += indent_string + "  " + std::string("ap_id") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ap_id_) ) + "\n";
    all_zeros &= (0 == ap_id_);
    r += indent_string + "  " + std::string("q_color_drop_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_color_drop_en_) ) + "\n";
    all_zeros &= (0 == q_color_drop_en_);
    r += indent_string + "  " + std::string("q_drop_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_drop_en_) ) + "\n";
    all_zeros &= (0 == q_drop_en_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("QacQueueApConfigEntryMutable") + ":\n";
    r += indent_string + "  " + std::string("ap_id") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ap_id_) ) + "\n";
    all_zeros &= (0 == ap_id_);
    r += indent_string + "  " + std::string("q_color_drop_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_color_drop_en_) ) + "\n";
    all_zeros &= (0 == q_color_drop_en_);
    r += indent_string + "  " + std::string("q_drop_en") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(q_drop_en_) ) + "\n";
    all_zeros &= (0 == q_drop_en_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t ap_id_;
  uint8_t q_color_drop_en_;
  uint8_t q_drop_en_;
private:
  static int StartOffset(
      int index_tm_qac_pipe_rspec, int index_qac_queue_ap_config_entry
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x80000; // to get to tm_qac_top
    assert(index_tm_qac_pipe_rspec < 4);
    offset += index_tm_qac_pipe_rspec * 0x8000; // tm_qac_pipe_rspec[]
    offset += 0x2000; // to get to csr_mem_qac_queue_ap_config_entry
    assert(index_qac_queue_ap_config_entry < 576);
    offset += index_qac_queue_ap_config_entry * 0x4; // qac_queue_ap_config_entry[]
    return offset;
  }

};











  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_QAC_QUEUE_AP_CONFIG_ENTRY_MUTABLE_H__
