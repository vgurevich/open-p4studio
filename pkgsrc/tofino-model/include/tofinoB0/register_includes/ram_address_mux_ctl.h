/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_RAM_ADDRESS_MUX_CTL_H__
#define __REGISTER_INCLUDES_RAM_ADDRESS_MUX_CTL_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class RamAddressMuxCtl : public model_core::RegisterBlock<RegisterCallback> {
public:
  RamAddressMuxCtl(
      int chipNumber, int index_pipe_addrmap, int index_mau_addrmap, int index_mau_map_and_alu_row_addrmap, int index_ram_address_mux_ctl_0, int index_ram_address_mux_ctl_1, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_pipe_addrmap, index_mau_addrmap, index_mau_map_and_alu_row_addrmap, index_ram_address_mux_ctl_0, index_ram_address_mux_ctl_1), 4, false, write_callback, read_callback, std::string("RamAddressMuxCtl")+":"+boost::lexical_cast<std::string>(index_pipe_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_addrmap) + "," + boost::lexical_cast<std::string>(index_mau_map_and_alu_row_addrmap) + "," + boost::lexical_cast<std::string>(index_ram_address_mux_ctl_0) + "," + boost::lexical_cast<std::string>(index_ram_address_mux_ctl_1))
    {
    }
  RamAddressMuxCtl(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "RamAddressMuxCtl")
    {
    }
public:


  uint8_t &map_ram_wadr_shift() { return map_ram_wadr_shift_; }







  uint8_t &map_ram_wadr_mux_select() { return map_ram_wadr_mux_select_; }


  uint8_t &map_ram_wadr_mux_enable() { return map_ram_wadr_mux_enable_; }



  uint8_t &map_ram_radr_mux_select_color() { return map_ram_radr_mux_select_color_; }


  uint8_t &map_ram_radr_mux_select_smoflo() { return map_ram_radr_mux_select_smoflo_; }














  uint8_t &ram_unitram_adr_mux_select() { return ram_unitram_adr_mux_select_; }


  uint8_t &ram_ofo_stats_mux_select_oflo() { return ram_ofo_stats_mux_select_oflo_; }


  uint8_t &ram_ofo_stats_mux_select_statsmeter() { return ram_ofo_stats_mux_select_statsmeter_; }


  uint8_t &ram_stats_meter_adr_mux_select_stats() { return ram_stats_meter_adr_mux_select_stats_; }


  uint8_t &ram_stats_meter_adr_mux_select_meter() { return ram_stats_meter_adr_mux_select_meter_; }


  uint8_t &ram_stats_meter_adr_mux_select_idlet() { return ram_stats_meter_adr_mux_select_idlet_; }


  uint8_t &ram_oflo_adr_mux_select_oflo() { return ram_oflo_adr_mux_select_oflo_; }


  uint8_t &ram_oflo_adr_mux_select_oflo2() { return ram_oflo_adr_mux_select_oflo2_; }




  uint8_t &synth2port_radr_mux_select_home_row() { return synth2port_radr_mux_select_home_row_; }


  uint8_t &synth2port_radr_mux_select_oflo() { return synth2port_radr_mux_select_oflo_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (map_ram_wadr_shift_ & 0x1);
    *data |= ((map_ram_wadr_mux_select_ & 0x3) << 1);
    *data |= ((map_ram_wadr_mux_enable_ & 0x1) << 3);
    *data |= ((map_ram_radr_mux_select_color_ & 0x1) << 4);
    *data |= ((map_ram_radr_mux_select_smoflo_ & 0x1) << 5);
    *data |= ((ram_unitram_adr_mux_select_ & 0xf) << 6);
    *data |= ((ram_ofo_stats_mux_select_oflo_ & 0x1) << 10);
    *data |= ((ram_ofo_stats_mux_select_statsmeter_ & 0x1) << 11);
    *data |= ((ram_stats_meter_adr_mux_select_stats_ & 0x1) << 12);
    *data |= ((ram_stats_meter_adr_mux_select_meter_ & 0x1) << 13);
    *data |= ((ram_stats_meter_adr_mux_select_idlet_ & 0x1) << 14);
    *data |= ((ram_oflo_adr_mux_select_oflo_ & 0x1) << 15);
    *data |= ((ram_oflo_adr_mux_select_oflo2_ & 0x1) << 16);
    *data |= ((synth2port_radr_mux_select_home_row_ & 0x1) << 17);
    *data |= ((synth2port_radr_mux_select_oflo_ & 0x1) << 18);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    map_ram_wadr_shift_ = (data & 0x1);
    map_ram_wadr_mux_select_ = ((data >> 1) & 0x3);
    map_ram_wadr_mux_enable_ = ((data >> 3) & 0x1);
    map_ram_radr_mux_select_color_ = ((data >> 4) & 0x1);
    map_ram_radr_mux_select_smoflo_ = ((data >> 5) & 0x1);
    ram_unitram_adr_mux_select_ = ((data >> 6) & 0xf);
    ram_ofo_stats_mux_select_oflo_ = ((data >> 10) & 0x1);
    ram_ofo_stats_mux_select_statsmeter_ = ((data >> 11) & 0x1);
    ram_stats_meter_adr_mux_select_stats_ = ((data >> 12) & 0x1);
    ram_stats_meter_adr_mux_select_meter_ = ((data >> 13) & 0x1);
    ram_stats_meter_adr_mux_select_idlet_ = ((data >> 14) & 0x1);
    ram_oflo_adr_mux_select_oflo_ = ((data >> 15) & 0x1);
    ram_oflo_adr_mux_select_oflo2_ = ((data >> 16) & 0x1);
    synth2port_radr_mux_select_home_row_ = ((data >> 17) & 0x1);
    synth2port_radr_mux_select_oflo_ = ((data >> 18) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    map_ram_wadr_shift_ = 0x0;
    map_ram_wadr_mux_select_ = 0x0;
    map_ram_wadr_mux_enable_ = 0x0;
    map_ram_radr_mux_select_color_ = 0x0;
    map_ram_radr_mux_select_smoflo_ = 0x0;
    ram_unitram_adr_mux_select_ = 0x0;
    ram_ofo_stats_mux_select_oflo_ = 0x0;
    ram_ofo_stats_mux_select_statsmeter_ = 0x0;
    ram_stats_meter_adr_mux_select_stats_ = 0x0;
    ram_stats_meter_adr_mux_select_meter_ = 0x0;
    ram_stats_meter_adr_mux_select_idlet_ = 0x0;
    ram_oflo_adr_mux_select_oflo_ = 0x0;
    ram_oflo_adr_mux_select_oflo2_ = 0x0;
    synth2port_radr_mux_select_home_row_ = 0x0;
    synth2port_radr_mux_select_oflo_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("RamAddressMuxCtl") + ":\n";
    r += indent_string + "  " + std::string("map_ram_wadr_shift") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(map_ram_wadr_shift_) ) + "\n";
    all_zeros &= (0 == map_ram_wadr_shift_);
    r += indent_string + "  " + std::string("map_ram_wadr_mux_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(map_ram_wadr_mux_select_) ) + "\n";
    all_zeros &= (0 == map_ram_wadr_mux_select_);
    r += indent_string + "  " + std::string("map_ram_wadr_mux_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(map_ram_wadr_mux_enable_) ) + "\n";
    all_zeros &= (0 == map_ram_wadr_mux_enable_);
    r += indent_string + "  " + std::string("map_ram_radr_mux_select_color") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(map_ram_radr_mux_select_color_) ) + "\n";
    all_zeros &= (0 == map_ram_radr_mux_select_color_);
    r += indent_string + "  " + std::string("map_ram_radr_mux_select_smoflo") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(map_ram_radr_mux_select_smoflo_) ) + "\n";
    all_zeros &= (0 == map_ram_radr_mux_select_smoflo_);
    r += indent_string + "  " + std::string("ram_unitram_adr_mux_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ram_unitram_adr_mux_select_) ) + "\n";
    all_zeros &= (0 == ram_unitram_adr_mux_select_);
    r += indent_string + "  " + std::string("ram_ofo_stats_mux_select_oflo") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ram_ofo_stats_mux_select_oflo_) ) + "\n";
    all_zeros &= (0 == ram_ofo_stats_mux_select_oflo_);
    r += indent_string + "  " + std::string("ram_ofo_stats_mux_select_statsmeter") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ram_ofo_stats_mux_select_statsmeter_) ) + "\n";
    all_zeros &= (0 == ram_ofo_stats_mux_select_statsmeter_);
    r += indent_string + "  " + std::string("ram_stats_meter_adr_mux_select_stats") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ram_stats_meter_adr_mux_select_stats_) ) + "\n";
    all_zeros &= (0 == ram_stats_meter_adr_mux_select_stats_);
    r += indent_string + "  " + std::string("ram_stats_meter_adr_mux_select_meter") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ram_stats_meter_adr_mux_select_meter_) ) + "\n";
    all_zeros &= (0 == ram_stats_meter_adr_mux_select_meter_);
    r += indent_string + "  " + std::string("ram_stats_meter_adr_mux_select_idlet") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ram_stats_meter_adr_mux_select_idlet_) ) + "\n";
    all_zeros &= (0 == ram_stats_meter_adr_mux_select_idlet_);
    r += indent_string + "  " + std::string("ram_oflo_adr_mux_select_oflo") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ram_oflo_adr_mux_select_oflo_) ) + "\n";
    all_zeros &= (0 == ram_oflo_adr_mux_select_oflo_);
    r += indent_string + "  " + std::string("ram_oflo_adr_mux_select_oflo2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ram_oflo_adr_mux_select_oflo2_) ) + "\n";
    all_zeros &= (0 == ram_oflo_adr_mux_select_oflo2_);
    r += indent_string + "  " + std::string("synth2port_radr_mux_select_home_row") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(synth2port_radr_mux_select_home_row_) ) + "\n";
    all_zeros &= (0 == synth2port_radr_mux_select_home_row_);
    r += indent_string + "  " + std::string("synth2port_radr_mux_select_oflo") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(synth2port_radr_mux_select_oflo_) ) + "\n";
    all_zeros &= (0 == synth2port_radr_mux_select_oflo_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("RamAddressMuxCtl") + ":\n";
    r += indent_string + "  " + std::string("map_ram_wadr_shift") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(map_ram_wadr_shift_) ) + "\n";
    all_zeros &= (0 == map_ram_wadr_shift_);
    r += indent_string + "  " + std::string("map_ram_wadr_mux_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(map_ram_wadr_mux_select_) ) + "\n";
    all_zeros &= (0 == map_ram_wadr_mux_select_);
    r += indent_string + "  " + std::string("map_ram_wadr_mux_enable") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(map_ram_wadr_mux_enable_) ) + "\n";
    all_zeros &= (0 == map_ram_wadr_mux_enable_);
    r += indent_string + "  " + std::string("map_ram_radr_mux_select_color") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(map_ram_radr_mux_select_color_) ) + "\n";
    all_zeros &= (0 == map_ram_radr_mux_select_color_);
    r += indent_string + "  " + std::string("map_ram_radr_mux_select_smoflo") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(map_ram_radr_mux_select_smoflo_) ) + "\n";
    all_zeros &= (0 == map_ram_radr_mux_select_smoflo_);
    r += indent_string + "  " + std::string("ram_unitram_adr_mux_select") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ram_unitram_adr_mux_select_) ) + "\n";
    all_zeros &= (0 == ram_unitram_adr_mux_select_);
    r += indent_string + "  " + std::string("ram_ofo_stats_mux_select_oflo") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ram_ofo_stats_mux_select_oflo_) ) + "\n";
    all_zeros &= (0 == ram_ofo_stats_mux_select_oflo_);
    r += indent_string + "  " + std::string("ram_ofo_stats_mux_select_statsmeter") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ram_ofo_stats_mux_select_statsmeter_) ) + "\n";
    all_zeros &= (0 == ram_ofo_stats_mux_select_statsmeter_);
    r += indent_string + "  " + std::string("ram_stats_meter_adr_mux_select_stats") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ram_stats_meter_adr_mux_select_stats_) ) + "\n";
    all_zeros &= (0 == ram_stats_meter_adr_mux_select_stats_);
    r += indent_string + "  " + std::string("ram_stats_meter_adr_mux_select_meter") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ram_stats_meter_adr_mux_select_meter_) ) + "\n";
    all_zeros &= (0 == ram_stats_meter_adr_mux_select_meter_);
    r += indent_string + "  " + std::string("ram_stats_meter_adr_mux_select_idlet") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ram_stats_meter_adr_mux_select_idlet_) ) + "\n";
    all_zeros &= (0 == ram_stats_meter_adr_mux_select_idlet_);
    r += indent_string + "  " + std::string("ram_oflo_adr_mux_select_oflo") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ram_oflo_adr_mux_select_oflo_) ) + "\n";
    all_zeros &= (0 == ram_oflo_adr_mux_select_oflo_);
    r += indent_string + "  " + std::string("ram_oflo_adr_mux_select_oflo2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ram_oflo_adr_mux_select_oflo2_) ) + "\n";
    all_zeros &= (0 == ram_oflo_adr_mux_select_oflo2_);
    r += indent_string + "  " + std::string("synth2port_radr_mux_select_home_row") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(synth2port_radr_mux_select_home_row_) ) + "\n";
    all_zeros &= (0 == synth2port_radr_mux_select_home_row_);
    r += indent_string + "  " + std::string("synth2port_radr_mux_select_oflo") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(synth2port_radr_mux_select_oflo_) ) + "\n";
    all_zeros &= (0 == synth2port_radr_mux_select_oflo_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t map_ram_wadr_shift_;
  uint8_t map_ram_wadr_mux_select_;
  uint8_t map_ram_wadr_mux_enable_;
  uint8_t map_ram_radr_mux_select_color_;
  uint8_t map_ram_radr_mux_select_smoflo_;
  uint8_t ram_unitram_adr_mux_select_;
  uint8_t ram_ofo_stats_mux_select_oflo_;
  uint8_t ram_ofo_stats_mux_select_statsmeter_;
  uint8_t ram_stats_meter_adr_mux_select_stats_;
  uint8_t ram_stats_meter_adr_mux_select_meter_;
  uint8_t ram_stats_meter_adr_mux_select_idlet_;
  uint8_t ram_oflo_adr_mux_select_oflo_;
  uint8_t ram_oflo_adr_mux_select_oflo2_;
  uint8_t synth2port_radr_mux_select_home_row_;
  uint8_t synth2port_radr_mux_select_oflo_;
private:
  static int StartOffset(
      int index_pipe_addrmap, int index_mau_addrmap, int index_mau_map_and_alu_row_addrmap, int index_ram_address_mux_ctl_0, int index_ram_address_mux_ctl_1
      ) {
    int offset=0;
    offset += 0x2000000; // to get to pipes
    assert(index_pipe_addrmap < 4);
    offset += index_pipe_addrmap * 0x800000; // pipe_addrmap[]
    assert(index_mau_addrmap < 12);
    offset += index_mau_addrmap * 0x80000; // mau_addrmap[]
    offset += 0x10000; // to get to map_alu
    offset += 0x2000; // to get to row
    assert(index_mau_map_and_alu_row_addrmap < 8);
    offset += index_mau_map_and_alu_row_addrmap * 0x400; // mau_map_and_alu_row_addrmap[]
    offset += 0x200; // to get to adrmux
    offset += 0x140; // to get to ram_address_mux_ctl
    assert(index_ram_address_mux_ctl_0 < 2);
    offset += index_ram_address_mux_ctl_0 * 0x20; // ram_address_mux_ctl[]
    assert(index_ram_address_mux_ctl_1 < 6);
    offset += index_ram_address_mux_ctl_1 * 0x4; // ram_address_mux_ctl[][]
    return offset;
  }

};
























  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_RAM_ADDRESS_MUX_CTL_H__
