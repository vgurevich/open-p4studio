/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_SCH_LEAKYBUCKET_STATIC_R_MUTABLE_H__
#define __REGISTER_INCLUDES_SCH_LEAKYBUCKET_STATIC_R_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class SchLeakybucketStaticRMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  enum TmSchPipeRspecEnum {
    kPortMaxLbStaticMem,
    kQMaxLbStaticMem,
    kQMinLbStaticMem
  };
public:
  SchLeakybucketStaticRMutable(
      int chipNumber, int index_tm_sch_pipe_rspec, TmSchPipeRspecEnum selector_tm_sch_pipe_rspec, int index_sch_leakybucket_static_r, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_sch_pipe_rspec, selector_tm_sch_pipe_rspec, index_sch_leakybucket_static_r), 4, true, write_callback, read_callback, std::string("SchLeakybucketStaticRMutable")+":"+boost::lexical_cast<std::string>(index_tm_sch_pipe_rspec) + "," + boost::lexical_cast<std::string>(selector_tm_sch_pipe_rspec) + "," + boost::lexical_cast<std::string>(index_sch_leakybucket_static_r))
    {
    }
  SchLeakybucketStaticRMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "SchLeakybucketStaticRMutable")
    {
    }
public:





  uint8_t pps() { return pps_; }
  void pps(const uint8_t &v) { pps_=v; }




  uint8_t bs_exp() { return bs_exp_; }
  void bs_exp(const uint8_t &v) { bs_exp_=v; }








  uint8_t bs_mant() { return bs_mant_; }
  void bs_mant(const uint8_t &v) { bs_mant_=v; }




  uint8_t rate_exp() { return rate_exp_; }
  void rate_exp(const uint8_t &v) { rate_exp_=v; }









  uint16_t rate_mant() { return rate_mant_; }
  void rate_mant(const uint16_t &v) { rate_mant_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (pps_ & 0x1);
    *data |= ((bs_exp_ & 0xf) << 1);
    *data |= ((bs_mant_ & 0xf) << 5);
    *data |= ((rate_exp_ & 0xf) << 9);
    *data |= ((rate_mant_ & 0x3ff) << 13);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    pps_ = (data & 0x1);
    bs_exp_ = ((data >> 1) & 0xf);
    bs_mant_ = ((data >> 5) & 0xf);
    rate_exp_ = ((data >> 9) & 0xf);
    rate_mant_ = ((data >> 13) & 0x3ff);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    pps_ = 0x0;
    bs_exp_ = 0x7;
    bs_mant_ = 0xf;
    rate_exp_ = 0x0;
    rate_mant_ = 0x3ff;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("SchLeakybucketStaticRMutable") + ":\n";
    r += indent_string + "  " + std::string("pps") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pps_) ) + "\n";
    all_zeros &= (0 == pps_);
    r += indent_string + "  " + std::string("bs_exp") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bs_exp_) ) + "\n";
    all_zeros &= (0 == bs_exp_);
    r += indent_string + "  " + std::string("bs_mant") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bs_mant_) ) + "\n";
    all_zeros &= (0 == bs_mant_);
    r += indent_string + "  " + std::string("rate_exp") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rate_exp_) ) + "\n";
    all_zeros &= (0 == rate_exp_);
    r += indent_string + "  " + std::string("rate_mant") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rate_mant_) ) + "\n";
    all_zeros &= (0 == rate_mant_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("SchLeakybucketStaticRMutable") + ":\n";
    r += indent_string + "  " + std::string("pps") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pps_) ) + "\n";
    all_zeros &= (0 == pps_);
    r += indent_string + "  " + std::string("bs_exp") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bs_exp_) ) + "\n";
    all_zeros &= (0 == bs_exp_);
    r += indent_string + "  " + std::string("bs_mant") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(bs_mant_) ) + "\n";
    all_zeros &= (0 == bs_mant_);
    r += indent_string + "  " + std::string("rate_exp") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rate_exp_) ) + "\n";
    all_zeros &= (0 == rate_exp_);
    r += indent_string + "  " + std::string("rate_mant") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(rate_mant_) ) + "\n";
    all_zeros &= (0 == rate_mant_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t pps_;
  uint8_t bs_exp_;
  uint8_t bs_mant_;
  uint8_t rate_exp_;
  uint16_t rate_mant_;
private:
  static int StartOffset(
      int index_tm_sch_pipe_rspec, TmSchPipeRspecEnum selector_tm_sch_pipe_rspec, int index_sch_leakybucket_static_r
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0xc0000; // to get to tm_sch_top
    assert(index_tm_sch_pipe_rspec < 4);
    offset += index_tm_sch_pipe_rspec * 0x10000; // tm_sch_pipe_rspec[]
    switch (selector_tm_sch_pipe_rspec) {
      case kPortMaxLbStaticMem:
        offset += 0x1200; // to get to port_max_lb_static_mem
        assert(index_sch_leakybucket_static_r < 72);
        offset += index_sch_leakybucket_static_r * 0x4; // sch_leakybucket_static_r[]
        break;
      case kQMaxLbStaticMem:
        offset += 0x5000; // to get to q_max_lb_static_mem
        assert(index_sch_leakybucket_static_r < 576);
        offset += index_sch_leakybucket_static_r * 0x4; // sch_leakybucket_static_r[]
        break;
      case kQMinLbStaticMem:
        offset += 0x3000; // to get to q_min_lb_static_mem
        assert(index_sch_leakybucket_static_r < 576);
        offset += index_sch_leakybucket_static_r * 0x4; // sch_leakybucket_static_r[]
        break;
      default:
        assert(0);
        break;
    }
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_SCH_LEAKYBUCKET_STATIC_R_MUTABLE_H__
