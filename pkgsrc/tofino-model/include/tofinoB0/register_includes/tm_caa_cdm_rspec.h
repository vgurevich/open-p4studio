/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_CAA_CDM_RSPEC_H__
#define __REGISTER_INCLUDES_TM_CAA_CDM_RSPEC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "caa_cdm_indir_access_addr_r.h"
#include "caa_cdm_indir_access_data_r.h"
#include "tm_caa_cdm_rspec_cdm_mbe_errlog.h"
#include "tm_caa_cdm_rspec_cdm_sbe_errlog.h"
#include "tm_caa_cdm_rspec_ecc.h"
#include "tm_caa_cdm_rspec_intr.h"

namespace tofinoB0 {
  namespace register_classes {

class TmCaaCdmRspec : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmCaaCdmRspec(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 32768, false, write_callback, read_callback, std::string("TmCaaCdmRspec"))
    {
    }
  TmCaaCdmRspec(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "TmCaaCdmRspec")
    {
    }
public:








  TmCaaCdmRspecEcc &ecc() { return ecc_; }





  TmCaaCdmRspecCdmSbeErrlog &cdm_sbe_errlog() { return cdm_sbe_errlog_; }





  TmCaaCdmRspecCdmMbeErrlog &cdm_mbe_errlog() { return cdm_mbe_errlog_; }








  CaaCdmIndirAccessAddrR &cdm_indir_access_addr() { return cdm_indir_access_addr_; }






  CaaCdmIndirAccessDataR &cdm_indir_access_data() { return cdm_indir_access_data_; }
  TmCaaCdmRspecIntr &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x8 && offset < 0x10) {
      offset -= 0x8;
      if (read_callback_) read_callback_();
      ecc_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      cdm_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      cdm_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      if (read_callback_) read_callback_();
      cdm_indir_access_addr_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xd0) {
      offset -= 0x80;
      if (read_callback_) read_callback_();
      cdm_indir_access_data_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x8 && offset < 0x10) {
      offset -= 0x8;
      ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      cdm_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      cdm_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      cdm_indir_access_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xd0) {
      offset -= 0x80;
      cdm_indir_access_data_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    ecc_.reset();
    cdm_sbe_errlog_.reset();
    cdm_mbe_errlog_.reset();
    cdm_indir_access_addr_.reset();
    cdm_indir_access_data_.reset();
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x8 && offset < 0x10) {
      offset -= 0x8;
      r += ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += cdm_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += cdm_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3c && offset < 0x40) {
      offset -= 0x3c;
      r += cdm_indir_access_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xd0) {
      offset -= 0x80;
      r += cdm_indir_access_data_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += ecc_.to_string(print_zeros,indent_string) ;
    r += cdm_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += cdm_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += cdm_indir_access_addr_.to_string(print_zeros,indent_string) ;
    r += cdm_indir_access_data_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  TmCaaCdmRspecEcc ecc_;
  TmCaaCdmRspecCdmSbeErrlog cdm_sbe_errlog_;
  TmCaaCdmRspecCdmMbeErrlog cdm_mbe_errlog_;
  CaaCdmIndirAccessAddrR cdm_indir_access_addr_;
  CaaCdmIndirAccessDataR cdm_indir_access_data_;
  TmCaaCdmRspecIntr intr_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x40000; // to get to tm_caa
    offset += 0x20000; // to get to cdm
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_TM_CAA_CDM_RSPEC_H__
