/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_CAA_RSPEC_H__
#define __REGISTER_INCLUDES_TM_CAA_RSPEC_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "caa_ba_blocks_freecnt_r.h"
#include "caa_bank_ctrl_r.h"
#include "caa_block_enable_r.h"
#include "caa_block_g.h"
#include "caa_block_linkmem_r.h"
#include "caa_block_ready_r.h"
#include "caa_block_reset_r.h"
#include "caa_block_valid_r.h"
#include "caa_cdm_org_r.h"
#include "caa_ctrl_r.h"
#include "caa_epipe_g.h"
#include "caa_fa_full_threshold_r.h"
#include "caa_fa_hyst_threshold_r.h"
#include "caa_indir_access_addr_r.h"
#include "tm_caa_cdm_rspec.h"
#include "tm_caa_rspec_debug_bus_ctrl.h"
#include "tm_caa_rspec_ecc.h"
#include "tm_caa_rspec_intr.h"
#include "tm_caa_rspec_linkmem_mbe_errlog.h"
#include "tm_caa_rspec_linkmem_sbe_errlog.h"
#include "tm_caa_rspec_lmem_indir_access_addr.h"
#include "tm_caa_rspec_overflow_errlog.h"
#include "tm_caa_rspec_underflow_errlog.h"

namespace tofinoB0 {
  namespace register_classes {

class TmCaaRspec : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmCaaRspec(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 262144, false, write_callback, read_callback, std::string("TmCaaRspec"))
    {
    }
  TmCaaRspec(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "TmCaaRspec")
    {
    }
public:






  CaaCdmOrgR &cdm_org() { return cdm_org_; }






  CaaCtrlR &ctrl() { return ctrl_; }







  CaaFaFullThresholdR &full_threshold() { return full_threshold_; }







  CaaFaHystThresholdR &hyst_threshold() { return hyst_threshold_; }






  CaaBlockValidR &block_valid() { return block_valid_; }






  CaaBlockResetR &block_reset() { return block_reset_; }






  CaaBlockEnableR &block_enable() { return block_enable_; }






  CaaBlockReadyR &block_ready() { return block_ready_; }







  CaaBaBlocksFreecntR &blocks_freecnt() { return blocks_freecnt_; }








  CaaIndirAccessAddrR &bank_indir_access_addr() { return bank_indir_access_addr_; }







  CaaBankCtrlR &bank_indir_access_data() { return bank_indir_access_data_; }








  TmCaaRspecLmemIndirAccessAddr &lmem_indir_access_addr() { return lmem_indir_access_addr_; }











  CaaBlockLinkmemR &lmem_indir_access_data() { return lmem_indir_access_data_; }








  TmCaaRspecEcc &ecc() { return ecc_; }





  TmCaaRspecLinkmemSbeErrlog &linkmem_sbe_errlog() { return linkmem_sbe_errlog_; }





  TmCaaRspecLinkmemMbeErrlog &linkmem_mbe_errlog() { return linkmem_mbe_errlog_; }





  TmCaaRspecOverflowErrlog &overflow_errlog() { return overflow_errlog_; }





  TmCaaRspecUnderflowErrlog &underflow_errlog() { return underflow_errlog_; }





  TmCaaRspecDebugBusCtrl &debug_bus_ctrl() { return debug_bus_ctrl_; }





  TmCaaCdmRspec &cdm() { return cdm_; }








  CaaEpipeG &epipe(int j0) { return epipe_[j0]; }







  CaaBlockG &block(int j0) { return block_[j0]; }
  TmCaaRspecIntr &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      cdm_org_.read( offset, data );
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      if (read_callback_) read_callback_();
      ctrl_.read( offset, data );
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      if (read_callback_) read_callback_();
      full_threshold_.read( offset, data );
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      if (read_callback_) read_callback_();
      hyst_threshold_.read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x204) {
      offset -= 0x200;
      if (read_callback_) read_callback_();
      block_valid_.read( offset, data );
    }
    else if (offset >= 0x204 && offset < 0x208) {
      offset -= 0x204;
      if (read_callback_) read_callback_();
      block_reset_.read( offset, data );
    }
    else if (offset >= 0x208 && offset < 0x20c) {
      offset -= 0x208;
      if (read_callback_) read_callback_();
      block_enable_.read( offset, data );
    }
    else if (offset >= 0x20c && offset < 0x210) {
      offset -= 0x20c;
      if (read_callback_) read_callback_();
      block_ready_.read( offset, data );
    }
    else if (offset >= 0x210 && offset < 0x214) {
      offset -= 0x210;
      if (read_callback_) read_callback_();
      blocks_freecnt_.read( offset, data );
    }
    else if (offset >= 0x3000 && offset < 0x3004) {
      offset -= 0x3000;
      if (read_callback_) read_callback_();
      bank_indir_access_addr_.read( offset, data );
    }
    else if (offset >= 0x3008 && offset < 0x3010) {
      offset -= 0x3008;
      if (read_callback_) read_callback_();
      bank_indir_access_data_.read( offset, data );
    }
    else if (offset >= 0x3010 && offset < 0x3014) {
      offset -= 0x3010;
      if (read_callback_) read_callback_();
      lmem_indir_access_addr_.read( offset, data );
    }
    else if (offset >= 0x3014 && offset < 0x3018) {
      offset -= 0x3014;
      if (read_callback_) read_callback_();
      lmem_indir_access_data_.read( offset, data );
    }
    else if (offset >= 0x3020 && offset < 0x3030) {
      offset -= 0x3020;
      if (read_callback_) read_callback_();
      ecc_.read( offset, data );
    }
    else if (offset >= 0x3054 && offset < 0x3058) {
      offset -= 0x3054;
      if (read_callback_) read_callback_();
      linkmem_sbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x3058 && offset < 0x305c) {
      offset -= 0x3058;
      if (read_callback_) read_callback_();
      linkmem_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x305c && offset < 0x3060) {
      offset -= 0x305c;
      if (read_callback_) read_callback_();
      overflow_errlog_.read( offset, data );
    }
    else if (offset >= 0x3060 && offset < 0x3064) {
      offset -= 0x3060;
      if (read_callback_) read_callback_();
      underflow_errlog_.read( offset, data );
    }
    else if (offset >= 0x3064 && offset < 0x3068) {
      offset -= 0x3064;
      if (read_callback_) read_callback_();
      debug_bus_ctrl_.read( offset, data );
    }
    else if (offset >= 0x20000 && offset < 0x28000) {
      offset -= 0x20000;
      if (read_callback_) read_callback_();
      cdm_.read( offset, data );
    }
    else if (offset >= 0x1000 && offset < 0x1060) {
      offset -= 0x1000;
      int i0 = offset / 0x18;
      offset  -= i0 * 0x18;
      if (read_callback_) read_callback_();
      epipe_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x2000 && offset < 0x2150) {
      offset -= 0x2000;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      if (read_callback_) read_callback_();
      block_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x3040 && offset < 0x3054) {
      offset -= 0x3040;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      cdm_org_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      full_threshold_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      hyst_threshold_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x204) {
      offset -= 0x200;
      block_valid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x204 && offset < 0x208) {
      offset -= 0x204;
      block_reset_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x208 && offset < 0x20c) {
      offset -= 0x208;
      block_enable_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20c && offset < 0x210) {
      offset -= 0x20c;
      block_ready_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x210 && offset < 0x214) {
      offset -= 0x210;
      blocks_freecnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3000 && offset < 0x3004) {
      offset -= 0x3000;
      bank_indir_access_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3008 && offset < 0x3010) {
      offset -= 0x3008;
      bank_indir_access_data_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3010 && offset < 0x3014) {
      offset -= 0x3010;
      lmem_indir_access_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3014 && offset < 0x3018) {
      offset -= 0x3014;
      lmem_indir_access_data_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3020 && offset < 0x3030) {
      offset -= 0x3020;
      ecc_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3054 && offset < 0x3058) {
      offset -= 0x3054;
      linkmem_sbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3058 && offset < 0x305c) {
      offset -= 0x3058;
      linkmem_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x305c && offset < 0x3060) {
      offset -= 0x305c;
      overflow_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3060 && offset < 0x3064) {
      offset -= 0x3060;
      underflow_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3064 && offset < 0x3068) {
      offset -= 0x3064;
      debug_bus_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20000 && offset < 0x28000) {
      offset -= 0x20000;
      cdm_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1000 && offset < 0x1060) {
      offset -= 0x1000;
      int i0 = offset / 0x18;
      offset  -= i0 * 0x18;
      epipe_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2000 && offset < 0x2150) {
      offset -= 0x2000;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      block_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3040 && offset < 0x3054) {
      offset -= 0x3040;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    cdm_org_.reset();
    ctrl_.reset();
    full_threshold_.reset();
    hyst_threshold_.reset();
    block_valid_.reset();
    block_reset_.reset();
    block_enable_.reset();
    block_ready_.reset();
    blocks_freecnt_.reset();
    bank_indir_access_addr_.reset();
    bank_indir_access_data_.reset();
    lmem_indir_access_addr_.reset();
    lmem_indir_access_data_.reset();
    ecc_.reset();
    linkmem_sbe_errlog_.reset();
    linkmem_mbe_errlog_.reset();
    overflow_errlog_.reset();
    underflow_errlog_.reset();
    debug_bus_ctrl_.reset();
    cdm_.reset();
    for (auto &f0 : epipe_) {
      f0.reset();
    }
    for (auto &f0 : block_) {
      f0.reset();
    }
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += cdm_org_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x14 && offset < 0x18) {
      offset -= 0x14;
      r += ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x18 && offset < 0x1c) {
      offset -= 0x18;
      r += full_threshold_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1c && offset < 0x20) {
      offset -= 0x1c;
      r += hyst_threshold_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x204) {
      offset -= 0x200;
      r += block_valid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x204 && offset < 0x208) {
      offset -= 0x204;
      r += block_reset_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x208 && offset < 0x20c) {
      offset -= 0x208;
      r += block_enable_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20c && offset < 0x210) {
      offset -= 0x20c;
      r += block_ready_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x210 && offset < 0x214) {
      offset -= 0x210;
      r += blocks_freecnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3000 && offset < 0x3004) {
      offset -= 0x3000;
      r += bank_indir_access_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3008 && offset < 0x3010) {
      offset -= 0x3008;
      r += bank_indir_access_data_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3010 && offset < 0x3014) {
      offset -= 0x3010;
      r += lmem_indir_access_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3014 && offset < 0x3018) {
      offset -= 0x3014;
      r += lmem_indir_access_data_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3020 && offset < 0x3030) {
      offset -= 0x3020;
      r += ecc_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3054 && offset < 0x3058) {
      offset -= 0x3054;
      r += linkmem_sbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3058 && offset < 0x305c) {
      offset -= 0x3058;
      r += linkmem_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x305c && offset < 0x3060) {
      offset -= 0x305c;
      r += overflow_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3060 && offset < 0x3064) {
      offset -= 0x3060;
      r += underflow_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3064 && offset < 0x3068) {
      offset -= 0x3064;
      r += debug_bus_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20000 && offset < 0x28000) {
      offset -= 0x20000;
      r += cdm_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1000 && offset < 0x1060) {
      offset -= 0x1000;
      int i0 = offset / 0x18;
      offset  -= i0 * 0x18;
      r += epipe_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2000 && offset < 0x2150) {
      offset -= 0x2000;
      int i0 = offset / 0xc;
      offset  -= i0 * 0xc;
      r += block_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3040 && offset < 0x3054) {
      offset -= 0x3040;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += cdm_org_.to_string(print_zeros,indent_string) ;
    r += ctrl_.to_string(print_zeros,indent_string) ;
    r += full_threshold_.to_string(print_zeros,indent_string) ;
    r += hyst_threshold_.to_string(print_zeros,indent_string) ;
    r += block_valid_.to_string(print_zeros,indent_string) ;
    r += block_reset_.to_string(print_zeros,indent_string) ;
    r += block_enable_.to_string(print_zeros,indent_string) ;
    r += block_ready_.to_string(print_zeros,indent_string) ;
    r += blocks_freecnt_.to_string(print_zeros,indent_string) ;
    r += bank_indir_access_addr_.to_string(print_zeros,indent_string) ;
    r += bank_indir_access_data_.to_string(print_zeros,indent_string) ;
    r += lmem_indir_access_addr_.to_string(print_zeros,indent_string) ;
    r += lmem_indir_access_data_.to_string(print_zeros,indent_string) ;
    r += ecc_.to_string(print_zeros,indent_string) ;
    r += linkmem_sbe_errlog_.to_string(print_zeros,indent_string) ;
    r += linkmem_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += overflow_errlog_.to_string(print_zeros,indent_string) ;
    r += underflow_errlog_.to_string(print_zeros,indent_string) ;
    r += debug_bus_ctrl_.to_string(print_zeros,indent_string) ;
    r += cdm_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<4;++a0) {
      r += epipe_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<28;++a0) {
      r += block_[a0].to_string(print_zeros,indent_string) ;
    }
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  CaaCdmOrgR cdm_org_;
  CaaCtrlR ctrl_;
  CaaFaFullThresholdR full_threshold_;
  CaaFaHystThresholdR hyst_threshold_;
  CaaBlockValidR block_valid_;
  CaaBlockResetR block_reset_;
  CaaBlockEnableR block_enable_;
  CaaBlockReadyR block_ready_;
  CaaBaBlocksFreecntR blocks_freecnt_;
  CaaIndirAccessAddrR bank_indir_access_addr_;
  CaaBankCtrlR bank_indir_access_data_;
  TmCaaRspecLmemIndirAccessAddr lmem_indir_access_addr_;
  CaaBlockLinkmemR lmem_indir_access_data_;
  TmCaaRspecEcc ecc_;
  TmCaaRspecLinkmemSbeErrlog linkmem_sbe_errlog_;
  TmCaaRspecLinkmemMbeErrlog linkmem_mbe_errlog_;
  TmCaaRspecOverflowErrlog overflow_errlog_;
  TmCaaRspecUnderflowErrlog underflow_errlog_;
  TmCaaRspecDebugBusCtrl debug_bus_ctrl_;
  TmCaaCdmRspec cdm_;
  std::array< CaaEpipeG, 4 > epipe_;
  std::array< CaaBlockG, 28 > block_;
  TmCaaRspecIntr intr_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x40000; // to get to tm_caa
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_TM_CAA_RSPEC_H__
