/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_CAA_RSPEC_INTR_STATUS_H__
#define __REGISTER_INCLUDES_TM_CAA_RSPEC_INTR_STATUS_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class TmCaaRspecIntrStatus : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmCaaRspecIntrStatus(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 4, false, write_callback, read_callback, std::string("TmCaaRspecIntrStatus"))
    {
    }
  TmCaaRspecIntrStatus(
      
  )
    : RegisterBlock(0, 0, 0, false, 0, 0, "TmCaaRspecIntrStatus")
    {
    }
public:





  uint8_t &pktdrop_err() { return pktdrop_err_; }





  uint8_t &linkmem_sbe() { return linkmem_sbe_; }





  uint8_t &linkmem_mbe() { return linkmem_mbe_; }





  uint8_t &overflow_err() { return overflow_err_; }





  uint8_t &underflow_err() { return underflow_err_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (pktdrop_err_ & 0x1);
    *data |= ((linkmem_sbe_ & 0x1) << 1);
    *data |= ((linkmem_mbe_ & 0x1) << 2);
    *data |= ((overflow_err_ & 0x1) << 3);
    *data |= ((underflow_err_ & 0x1) << 4);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    pktdrop_err_ &= ~(data & 0x1);
    linkmem_sbe_ &= ~((data >> 1) & 0x1);
    linkmem_mbe_ &= ~((data >> 2) & 0x1);
    overflow_err_ &= ~((data >> 3) & 0x1);
    underflow_err_ &= ~((data >> 4) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    pktdrop_err_ = 0x0;
    linkmem_sbe_ = 0x0;
    linkmem_mbe_ = 0x0;
    overflow_err_ = 0x0;
    underflow_err_ = 0x0;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TmCaaRspecIntrStatus") + ":\n";
    r += indent_string + "  " + std::string("pktdrop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdrop_err_) ) + "\n";
    all_zeros &= (0 == pktdrop_err_);
    r += indent_string + "  " + std::string("linkmem_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(linkmem_sbe_) ) + "\n";
    all_zeros &= (0 == linkmem_sbe_);
    r += indent_string + "  " + std::string("linkmem_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(linkmem_mbe_) ) + "\n";
    all_zeros &= (0 == linkmem_mbe_);
    r += indent_string + "  " + std::string("overflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(overflow_err_) ) + "\n";
    all_zeros &= (0 == overflow_err_);
    r += indent_string + "  " + std::string("underflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(underflow_err_) ) + "\n";
    all_zeros &= (0 == underflow_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TmCaaRspecIntrStatus") + ":\n";
    r += indent_string + "  " + std::string("pktdrop_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(pktdrop_err_) ) + "\n";
    all_zeros &= (0 == pktdrop_err_);
    r += indent_string + "  " + std::string("linkmem_sbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(linkmem_sbe_) ) + "\n";
    all_zeros &= (0 == linkmem_sbe_);
    r += indent_string + "  " + std::string("linkmem_mbe") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(linkmem_mbe_) ) + "\n";
    all_zeros &= (0 == linkmem_mbe_);
    r += indent_string + "  " + std::string("overflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(overflow_err_) ) + "\n";
    all_zeros &= (0 == overflow_err_);
    r += indent_string + "  " + std::string("underflow_err") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(underflow_err_) ) + "\n";
    all_zeros &= (0 == underflow_err_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t pktdrop_err_;
  uint8_t linkmem_sbe_;
  uint8_t linkmem_mbe_;
  uint8_t overflow_err_;
  uint8_t underflow_err_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x40000; // to get to tm_caa
    offset += 0x3040; // to get to intr_status
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_TM_CAA_RSPEC_INTR_STATUS_H__
