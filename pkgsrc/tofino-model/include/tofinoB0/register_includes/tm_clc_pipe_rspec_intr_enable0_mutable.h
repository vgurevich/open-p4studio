/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_CLC_PIPE_RSPEC_INTR_ENABLE0_MUTABLE_H__
#define __REGISTER_INCLUDES_TM_CLC_PIPE_RSPEC_INTR_ENABLE0_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>












namespace tofinoB0 {
  namespace register_classes {

class TmClcPipeRspecIntrEnable0Mutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmClcPipeRspecIntrEnable0Mutable(
      int chipNumber, int index_tm_clc_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_clc_pipe_rspec), 4, true, write_callback, read_callback, std::string("TmClcPipeRspecIntrEnable0Mutable")+":"+boost::lexical_cast<std::string>(index_tm_clc_pipe_rspec))
    {
    }
  TmClcPipeRspecIntrEnable0Mutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "TmClcPipeRspecIntrEnable0Mutable")
    {
    }
public:
  uint8_t ph_fifo_full_ep0() { return ph_fifo_full_ep0_; }
  void ph_fifo_full_ep0(const uint8_t &v) { ph_fifo_full_ep0_=v; }
  uint8_t ph_fifo_full_ep1() { return ph_fifo_full_ep1_; }
  void ph_fifo_full_ep1(const uint8_t &v) { ph_fifo_full_ep1_=v; }
  uint8_t ph_fifo_full_ep2() { return ph_fifo_full_ep2_; }
  void ph_fifo_full_ep2(const uint8_t &v) { ph_fifo_full_ep2_=v; }
  uint8_t ph_fifo_full_ep3() { return ph_fifo_full_ep3_; }
  void ph_fifo_full_ep3(const uint8_t &v) { ph_fifo_full_ep3_=v; }
  uint8_t enfifo_serr_ep0() { return enfifo_serr_ep0_; }
  void enfifo_serr_ep0(const uint8_t &v) { enfifo_serr_ep0_=v; }
  uint8_t enfifo_serr_ep1() { return enfifo_serr_ep1_; }
  void enfifo_serr_ep1(const uint8_t &v) { enfifo_serr_ep1_=v; }
  uint8_t enfifo_serr_ep2() { return enfifo_serr_ep2_; }
  void enfifo_serr_ep2(const uint8_t &v) { enfifo_serr_ep2_=v; }
  uint8_t enfifo_serr_ep3() { return enfifo_serr_ep3_; }
  void enfifo_serr_ep3(const uint8_t &v) { enfifo_serr_ep3_=v; }
  uint8_t enfifo_merr_ep0() { return enfifo_merr_ep0_; }
  void enfifo_merr_ep0(const uint8_t &v) { enfifo_merr_ep0_=v; }
  uint8_t enfifo_merr_ep1() { return enfifo_merr_ep1_; }
  void enfifo_merr_ep1(const uint8_t &v) { enfifo_merr_ep1_=v; }
  uint8_t enfifo_merr_ep2() { return enfifo_merr_ep2_; }
  void enfifo_merr_ep2(const uint8_t &v) { enfifo_merr_ep2_=v; }
  uint8_t enfifo_merr_ep3() { return enfifo_merr_ep3_; }
  void enfifo_merr_ep3(const uint8_t &v) { enfifo_merr_ep3_=v; }
  uint8_t qac_ph_fifo_full_ep0() { return qac_ph_fifo_full_ep0_; }
  void qac_ph_fifo_full_ep0(const uint8_t &v) { qac_ph_fifo_full_ep0_=v; }
  uint8_t qac_ph_fifo_full_ep1() { return qac_ph_fifo_full_ep1_; }
  void qac_ph_fifo_full_ep1(const uint8_t &v) { qac_ph_fifo_full_ep1_=v; }
  uint8_t qac_ph_fifo_full_ep2() { return qac_ph_fifo_full_ep2_; }
  void qac_ph_fifo_full_ep2(const uint8_t &v) { qac_ph_fifo_full_ep2_=v; }
  uint8_t qac_ph_fifo_full_ep3() { return qac_ph_fifo_full_ep3_; }
  void qac_ph_fifo_full_ep3(const uint8_t &v) { qac_ph_fifo_full_ep3_=v; }
  uint8_t qac_mir_fifo_full_ep0() { return qac_mir_fifo_full_ep0_; }
  void qac_mir_fifo_full_ep0(const uint8_t &v) { qac_mir_fifo_full_ep0_=v; }
  uint8_t qac_mir_fifo_full_ep1() { return qac_mir_fifo_full_ep1_; }
  void qac_mir_fifo_full_ep1(const uint8_t &v) { qac_mir_fifo_full_ep1_=v; }
  uint8_t qac_mir_fifo_full_ep2() { return qac_mir_fifo_full_ep2_; }
  void qac_mir_fifo_full_ep2(const uint8_t &v) { qac_mir_fifo_full_ep2_=v; }
  uint8_t qac_mir_fifo_full_ep3() { return qac_mir_fifo_full_ep3_; }
  void qac_mir_fifo_full_ep3(const uint8_t &v) { qac_mir_fifo_full_ep3_=v; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (read_callback_) read_callback_();
    *data = (ph_fifo_full_ep0_ & 0x1);
    *data |= ((ph_fifo_full_ep1_ & 0x1) << 1);
    *data |= ((ph_fifo_full_ep2_ & 0x1) << 2);
    *data |= ((ph_fifo_full_ep3_ & 0x1) << 3);
    *data |= ((enfifo_serr_ep0_ & 0x1) << 4);
    *data |= ((enfifo_serr_ep1_ & 0x1) << 5);
    *data |= ((enfifo_serr_ep2_ & 0x1) << 6);
    *data |= ((enfifo_serr_ep3_ & 0x1) << 7);
    *data |= ((enfifo_merr_ep0_ & 0x1) << 8);
    *data |= ((enfifo_merr_ep1_ & 0x1) << 9);
    *data |= ((enfifo_merr_ep2_ & 0x1) << 10);
    *data |= ((enfifo_merr_ep3_ & 0x1) << 11);
    *data |= ((qac_ph_fifo_full_ep0_ & 0x1) << 12);
    *data |= ((qac_ph_fifo_full_ep1_ & 0x1) << 13);
    *data |= ((qac_ph_fifo_full_ep2_ & 0x1) << 14);
    *data |= ((qac_ph_fifo_full_ep3_ & 0x1) << 15);
    *data |= ((qac_mir_fifo_full_ep0_ & 0x1) << 16);
    *data |= ((qac_mir_fifo_full_ep1_ & 0x1) << 17);
    *data |= ((qac_mir_fifo_full_ep2_ & 0x1) << 18);
    *data |= ((qac_mir_fifo_full_ep3_ & 0x1) << 19);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    ph_fifo_full_ep0_ = (data & 0x1);
    ph_fifo_full_ep1_ = ((data >> 1) & 0x1);
    ph_fifo_full_ep2_ = ((data >> 2) & 0x1);
    ph_fifo_full_ep3_ = ((data >> 3) & 0x1);
    enfifo_serr_ep0_ = ((data >> 4) & 0x1);
    enfifo_serr_ep1_ = ((data >> 5) & 0x1);
    enfifo_serr_ep2_ = ((data >> 6) & 0x1);
    enfifo_serr_ep3_ = ((data >> 7) & 0x1);
    enfifo_merr_ep0_ = ((data >> 8) & 0x1);
    enfifo_merr_ep1_ = ((data >> 9) & 0x1);
    enfifo_merr_ep2_ = ((data >> 10) & 0x1);
    enfifo_merr_ep3_ = ((data >> 11) & 0x1);
    qac_ph_fifo_full_ep0_ = ((data >> 12) & 0x1);
    qac_ph_fifo_full_ep1_ = ((data >> 13) & 0x1);
    qac_ph_fifo_full_ep2_ = ((data >> 14) & 0x1);
    qac_ph_fifo_full_ep3_ = ((data >> 15) & 0x1);
    qac_mir_fifo_full_ep0_ = ((data >> 16) & 0x1);
    qac_mir_fifo_full_ep1_ = ((data >> 17) & 0x1);
    qac_mir_fifo_full_ep2_ = ((data >> 18) & 0x1);
    qac_mir_fifo_full_ep3_ = ((data >> 19) & 0x1);
    if (write_callback_) write_callback_();
    return true;
  }

  void reset(
      
      ) {
    ph_fifo_full_ep0_ = 0x1;
    ph_fifo_full_ep1_ = 0x1;
    ph_fifo_full_ep2_ = 0x1;
    ph_fifo_full_ep3_ = 0x1;
    enfifo_serr_ep0_ = 0x1;
    enfifo_serr_ep1_ = 0x1;
    enfifo_serr_ep2_ = 0x1;
    enfifo_serr_ep3_ = 0x1;
    enfifo_merr_ep0_ = 0x1;
    enfifo_merr_ep1_ = 0x1;
    enfifo_merr_ep2_ = 0x1;
    enfifo_merr_ep3_ = 0x1;
    qac_ph_fifo_full_ep0_ = 0x1;
    qac_ph_fifo_full_ep1_ = 0x1;
    qac_ph_fifo_full_ep2_ = 0x1;
    qac_ph_fifo_full_ep3_ = 0x1;
    qac_mir_fifo_full_ep0_ = 0x1;
    qac_mir_fifo_full_ep1_ = 0x1;
    qac_mir_fifo_full_ep2_ = 0x1;
    qac_mir_fifo_full_ep3_ = 0x1;
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TmClcPipeRspecIntrEnable0Mutable") + ":\n";
    r += indent_string + "  " + std::string("ph_fifo_full_ep0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ph_fifo_full_ep0_) ) + "\n";
    all_zeros &= (0 == ph_fifo_full_ep0_);
    r += indent_string + "  " + std::string("ph_fifo_full_ep1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ph_fifo_full_ep1_) ) + "\n";
    all_zeros &= (0 == ph_fifo_full_ep1_);
    r += indent_string + "  " + std::string("ph_fifo_full_ep2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ph_fifo_full_ep2_) ) + "\n";
    all_zeros &= (0 == ph_fifo_full_ep2_);
    r += indent_string + "  " + std::string("ph_fifo_full_ep3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ph_fifo_full_ep3_) ) + "\n";
    all_zeros &= (0 == ph_fifo_full_ep3_);
    r += indent_string + "  " + std::string("enfifo_serr_ep0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enfifo_serr_ep0_) ) + "\n";
    all_zeros &= (0 == enfifo_serr_ep0_);
    r += indent_string + "  " + std::string("enfifo_serr_ep1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enfifo_serr_ep1_) ) + "\n";
    all_zeros &= (0 == enfifo_serr_ep1_);
    r += indent_string + "  " + std::string("enfifo_serr_ep2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enfifo_serr_ep2_) ) + "\n";
    all_zeros &= (0 == enfifo_serr_ep2_);
    r += indent_string + "  " + std::string("enfifo_serr_ep3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enfifo_serr_ep3_) ) + "\n";
    all_zeros &= (0 == enfifo_serr_ep3_);
    r += indent_string + "  " + std::string("enfifo_merr_ep0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enfifo_merr_ep0_) ) + "\n";
    all_zeros &= (0 == enfifo_merr_ep0_);
    r += indent_string + "  " + std::string("enfifo_merr_ep1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enfifo_merr_ep1_) ) + "\n";
    all_zeros &= (0 == enfifo_merr_ep1_);
    r += indent_string + "  " + std::string("enfifo_merr_ep2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enfifo_merr_ep2_) ) + "\n";
    all_zeros &= (0 == enfifo_merr_ep2_);
    r += indent_string + "  " + std::string("enfifo_merr_ep3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enfifo_merr_ep3_) ) + "\n";
    all_zeros &= (0 == enfifo_merr_ep3_);
    r += indent_string + "  " + std::string("qac_ph_fifo_full_ep0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qac_ph_fifo_full_ep0_) ) + "\n";
    all_zeros &= (0 == qac_ph_fifo_full_ep0_);
    r += indent_string + "  " + std::string("qac_ph_fifo_full_ep1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qac_ph_fifo_full_ep1_) ) + "\n";
    all_zeros &= (0 == qac_ph_fifo_full_ep1_);
    r += indent_string + "  " + std::string("qac_ph_fifo_full_ep2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qac_ph_fifo_full_ep2_) ) + "\n";
    all_zeros &= (0 == qac_ph_fifo_full_ep2_);
    r += indent_string + "  " + std::string("qac_ph_fifo_full_ep3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qac_ph_fifo_full_ep3_) ) + "\n";
    all_zeros &= (0 == qac_ph_fifo_full_ep3_);
    r += indent_string + "  " + std::string("qac_mir_fifo_full_ep0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qac_mir_fifo_full_ep0_) ) + "\n";
    all_zeros &= (0 == qac_mir_fifo_full_ep0_);
    r += indent_string + "  " + std::string("qac_mir_fifo_full_ep1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qac_mir_fifo_full_ep1_) ) + "\n";
    all_zeros &= (0 == qac_mir_fifo_full_ep1_);
    r += indent_string + "  " + std::string("qac_mir_fifo_full_ep2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qac_mir_fifo_full_ep2_) ) + "\n";
    all_zeros &= (0 == qac_mir_fifo_full_ep2_);
    r += indent_string + "  " + std::string("qac_mir_fifo_full_ep3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qac_mir_fifo_full_ep3_) ) + "\n";
    all_zeros &= (0 == qac_mir_fifo_full_ep3_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    r += indent_string + std::string("TmClcPipeRspecIntrEnable0Mutable") + ":\n";
    r += indent_string + "  " + std::string("ph_fifo_full_ep0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ph_fifo_full_ep0_) ) + "\n";
    all_zeros &= (0 == ph_fifo_full_ep0_);
    r += indent_string + "  " + std::string("ph_fifo_full_ep1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ph_fifo_full_ep1_) ) + "\n";
    all_zeros &= (0 == ph_fifo_full_ep1_);
    r += indent_string + "  " + std::string("ph_fifo_full_ep2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ph_fifo_full_ep2_) ) + "\n";
    all_zeros &= (0 == ph_fifo_full_ep2_);
    r += indent_string + "  " + std::string("ph_fifo_full_ep3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(ph_fifo_full_ep3_) ) + "\n";
    all_zeros &= (0 == ph_fifo_full_ep3_);
    r += indent_string + "  " + std::string("enfifo_serr_ep0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enfifo_serr_ep0_) ) + "\n";
    all_zeros &= (0 == enfifo_serr_ep0_);
    r += indent_string + "  " + std::string("enfifo_serr_ep1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enfifo_serr_ep1_) ) + "\n";
    all_zeros &= (0 == enfifo_serr_ep1_);
    r += indent_string + "  " + std::string("enfifo_serr_ep2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enfifo_serr_ep2_) ) + "\n";
    all_zeros &= (0 == enfifo_serr_ep2_);
    r += indent_string + "  " + std::string("enfifo_serr_ep3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enfifo_serr_ep3_) ) + "\n";
    all_zeros &= (0 == enfifo_serr_ep3_);
    r += indent_string + "  " + std::string("enfifo_merr_ep0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enfifo_merr_ep0_) ) + "\n";
    all_zeros &= (0 == enfifo_merr_ep0_);
    r += indent_string + "  " + std::string("enfifo_merr_ep1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enfifo_merr_ep1_) ) + "\n";
    all_zeros &= (0 == enfifo_merr_ep1_);
    r += indent_string + "  " + std::string("enfifo_merr_ep2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enfifo_merr_ep2_) ) + "\n";
    all_zeros &= (0 == enfifo_merr_ep2_);
    r += indent_string + "  " + std::string("enfifo_merr_ep3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(enfifo_merr_ep3_) ) + "\n";
    all_zeros &= (0 == enfifo_merr_ep3_);
    r += indent_string + "  " + std::string("qac_ph_fifo_full_ep0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qac_ph_fifo_full_ep0_) ) + "\n";
    all_zeros &= (0 == qac_ph_fifo_full_ep0_);
    r += indent_string + "  " + std::string("qac_ph_fifo_full_ep1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qac_ph_fifo_full_ep1_) ) + "\n";
    all_zeros &= (0 == qac_ph_fifo_full_ep1_);
    r += indent_string + "  " + std::string("qac_ph_fifo_full_ep2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qac_ph_fifo_full_ep2_) ) + "\n";
    all_zeros &= (0 == qac_ph_fifo_full_ep2_);
    r += indent_string + "  " + std::string("qac_ph_fifo_full_ep3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qac_ph_fifo_full_ep3_) ) + "\n";
    all_zeros &= (0 == qac_ph_fifo_full_ep3_);
    r += indent_string + "  " + std::string("qac_mir_fifo_full_ep0") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qac_mir_fifo_full_ep0_) ) + "\n";
    all_zeros &= (0 == qac_mir_fifo_full_ep0_);
    r += indent_string + "  " + std::string("qac_mir_fifo_full_ep1") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qac_mir_fifo_full_ep1_) ) + "\n";
    all_zeros &= (0 == qac_mir_fifo_full_ep1_);
    r += indent_string + "  " + std::string("qac_mir_fifo_full_ep2") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qac_mir_fifo_full_ep2_) ) + "\n";
    all_zeros &= (0 == qac_mir_fifo_full_ep2_);
    r += indent_string + "  " + std::string("qac_mir_fifo_full_ep3") +  ": 0x" + boost::str( boost::format("%x") % static_cast<uint>(qac_mir_fifo_full_ep3_) ) + "\n";
    all_zeros &= (0 == qac_mir_fifo_full_ep3_);
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  uint8_t ph_fifo_full_ep0_;
  uint8_t ph_fifo_full_ep1_;
  uint8_t ph_fifo_full_ep2_;
  uint8_t ph_fifo_full_ep3_;
  uint8_t enfifo_serr_ep0_;
  uint8_t enfifo_serr_ep1_;
  uint8_t enfifo_serr_ep2_;
  uint8_t enfifo_serr_ep3_;
  uint8_t enfifo_merr_ep0_;
  uint8_t enfifo_merr_ep1_;
  uint8_t enfifo_merr_ep2_;
  uint8_t enfifo_merr_ep3_;
  uint8_t qac_ph_fifo_full_ep0_;
  uint8_t qac_ph_fifo_full_ep1_;
  uint8_t qac_ph_fifo_full_ep2_;
  uint8_t qac_ph_fifo_full_ep3_;
  uint8_t qac_mir_fifo_full_ep0_;
  uint8_t qac_mir_fifo_full_ep1_;
  uint8_t qac_mir_fifo_full_ep2_;
  uint8_t qac_mir_fifo_full_ep3_;
private:
  static int StartOffset(
      int index_tm_clc_pipe_rspec
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x100000; // to get to tm_clc_top
    assert(index_tm_clc_pipe_rspec < 4);
    offset += index_tm_clc_pipe_rspec * 0x4000; // tm_clc_pipe_rspec[]
    offset += 0x24; // to get to intr_enable0
    return offset;
  }

};










  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_TM_CLC_PIPE_RSPEC_INTR_ENABLE0_MUTABLE_H__
