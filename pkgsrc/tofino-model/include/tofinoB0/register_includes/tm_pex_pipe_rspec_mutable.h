/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_PEX_PIPE_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_TM_PEX_PIPE_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "ct_timer_mutable.h"
#include "pex_ind_addr_mutable.h"
#include "pex_ind_data_mutable.h"
#include "pex_port_cell_cnt_mutable.h"
#include "pex_port_fp_cnt_mutable.h"
#include "pex_port_pkt_cnt_mutable.h"
#include "pex_port_sp_cnt_mutable.h"
#include "pex_tot_cell_cnt0_mutable.h"
#include "pex_tot_cell_cnt1_mutable.h"
#include "pex_tot_cell_cnt2_mutable.h"
#include "pex_tot_err_pkt_cnt_mutable.h"
#include "pex_tot_pkt_cnt_mutable.h"
#include "qpex_epb_cred_cnt_mutable.h"
#include "qpex_oversub_pg_map_mutable.h"
#include "qpex_pg_single_mutable.h"
#include "qpex_pipe_ctrl_mutable.h"
#include "qpex_pt_gap_lim_mutable.h"
#include "qpex_pt_gap_wm_mutable.h"
#include "qpex_pt_state_mutable.h"
#include "qpex_q_empty_mutable.h"
#include "tm_pex_pipe_rspec_debug_bus_ctrl_mutable.h"
#include "tm_pex_pipe_rspec_intr_mutable.h"
#include "tm_pex_pipe_rspec_linkmem_mbe_errlog_mutable.h"

namespace tofinoB0 {
  namespace register_classes {

class TmPexPipeRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmPexPipeRspecMutable(
      int chipNumber, int index_tm_pex_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_pex_pipe_rspec), 16384, true, write_callback, read_callback, std::string("TmPexPipeRspecMutable")+":"+boost::lexical_cast<std::string>(index_tm_pex_pipe_rspec))
    {
    }
  TmPexPipeRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "TmPexPipeRspecMutable")
    {
    }
public:





  QpexPipeCtrlMutable &pipe_ctrl() { return pipe_ctrl_; }





  TmPexPipeRspecLinkmemMbeErrlogMutable &linkmem_mbe_errlog() { return linkmem_mbe_errlog_; }





  QpexOversubPgMapMutable &os_pg_map() { return os_pg_map_; }







  QpexPtStateMutable &pt_state(int j0) { return pt_state_[j0]; }







  QpexEpbCredCntMutable &pt_epb_cred(int j0) { return pt_epb_cred_[j0]; }







  QpexQEmptyMutable &q_empty(int j0) { return q_empty_[j0]; }










  QpexPtGapLimMutable &pt_gap_lim(int j0) { return pt_gap_lim_[j0]; }










  QpexPgSingleMutable &pg_single(int j0) { return pg_single_[j0]; }







  QpexPtGapWmMutable &pt_gap_wm(int j0) { return pt_gap_wm_[j0]; }







  CtTimerMutable &ct_timer(int j0) { return ct_timer_[j0]; }





  PexIndAddrMutable &ind_addr() { return ind_addr_; }





  PexIndDataMutable &ind_data() { return ind_data_; }





  PexPortFpCntMutable &port_first_cnt() { return port_first_cnt_; }





  PexPortSpCntMutable &port_second_cnt() { return port_second_cnt_; }





  PexPortCellCntMutable &port_cell_cnt() { return port_cell_cnt_; }





  PexPortPktCntMutable &port_pkt_cnt() { return port_pkt_cnt_; }





  PexTotCellCnt0Mutable &tot_cell_cnt0() { return tot_cell_cnt0_; }





  PexTotCellCnt1Mutable &tot_cell_cnt1() { return tot_cell_cnt1_; }





  PexTotCellCnt2Mutable &tot_cell_cnt2() { return tot_cell_cnt2_; }





  PexTotPktCntMutable &tot_pkt_cnt() { return tot_pkt_cnt_; }





  PexTotErrPktCntMutable &tot_err_pkt_cnt() { return tot_err_pkt_cnt_; }





  TmPexPipeRspecDebugBusCtrlMutable &debug_bus_ctrl() { return debug_bus_ctrl_; }
  TmPexPipeRspecIntrMutable &intr() { return intr_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x4) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      pipe_ctrl_.read( offset, data );
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      if (read_callback_) read_callback_();
      linkmem_mbe_errlog_.read( offset, data );
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      if (read_callback_) read_callback_();
      os_pg_map_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x6c) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pt_state_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pt_epb_cred_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x150) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      q_empty_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x180 && offset < 0x1c8) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pt_gap_lim_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x200 && offset < 0x248) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pg_single_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x400 && offset < 0x520) {
      offset -= 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      pt_gap_wm_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x580 && offset < 0x5c8) {
      offset -= 0x580;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      if (read_callback_) read_callback_();
      ct_timer_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x5c8 && offset < 0x5cc) {
      offset -= 0x5c8;
      if (read_callback_) read_callback_();
      ind_addr_.read( offset, data );
    }
    else if (offset >= 0x5cc && offset < 0x5d0) {
      offset -= 0x5cc;
      if (read_callback_) read_callback_();
      ind_data_.read( offset, data );
    }
    else if (offset >= 0x5d0 && offset < 0x5d8) {
      offset -= 0x5d0;
      if (read_callback_) read_callback_();
      port_first_cnt_.read( offset, data );
    }
    else if (offset >= 0x5d8 && offset < 0x5e0) {
      offset -= 0x5d8;
      if (read_callback_) read_callback_();
      port_second_cnt_.read( offset, data );
    }
    else if (offset >= 0x5e0 && offset < 0x5e8) {
      offset -= 0x5e0;
      if (read_callback_) read_callback_();
      port_cell_cnt_.read( offset, data );
    }
    else if (offset >= 0x5e8 && offset < 0x5f0) {
      offset -= 0x5e8;
      if (read_callback_) read_callback_();
      port_pkt_cnt_.read( offset, data );
    }
    else if (offset >= 0x5f0 && offset < 0x5f8) {
      offset -= 0x5f0;
      if (read_callback_) read_callback_();
      tot_cell_cnt0_.read( offset, data );
    }
    else if (offset >= 0x5f8 && offset < 0x600) {
      offset -= 0x5f8;
      if (read_callback_) read_callback_();
      tot_cell_cnt1_.read( offset, data );
    }
    else if (offset >= 0x600 && offset < 0x608) {
      offset -= 0x600;
      if (read_callback_) read_callback_();
      tot_cell_cnt2_.read( offset, data );
    }
    else if (offset >= 0x608 && offset < 0x610) {
      offset -= 0x608;
      if (read_callback_) read_callback_();
      tot_pkt_cnt_.read( offset, data );
    }
    else if (offset >= 0x610 && offset < 0x618) {
      offset -= 0x610;
      if (read_callback_) read_callback_();
      tot_err_pkt_cnt_.read( offset, data );
    }
    else if (offset >= 0x618 && offset < 0x61c) {
      offset -= 0x618;
      if (read_callback_) read_callback_();
      debug_bus_ctrl_.read( offset, data );
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      if (read_callback_) read_callback_();
      intr_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x4) {
      offset -= 0x0;
      pipe_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      linkmem_mbe_errlog_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      os_pg_map_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x6c) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pt_state_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pt_epb_cred_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x150) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      q_empty_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x180 && offset < 0x1c8) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pt_gap_lim_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x200 && offset < 0x248) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pg_single_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x400 && offset < 0x520) {
      offset -= 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      pt_gap_wm_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x580 && offset < 0x5c8) {
      offset -= 0x580;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      ct_timer_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c8 && offset < 0x5cc) {
      offset -= 0x5c8;
      ind_addr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5cc && offset < 0x5d0) {
      offset -= 0x5cc;
      ind_data_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5d0 && offset < 0x5d8) {
      offset -= 0x5d0;
      port_first_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5d8 && offset < 0x5e0) {
      offset -= 0x5d8;
      port_second_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5e0 && offset < 0x5e8) {
      offset -= 0x5e0;
      port_cell_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5e8 && offset < 0x5f0) {
      offset -= 0x5e8;
      port_pkt_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5f0 && offset < 0x5f8) {
      offset -= 0x5f0;
      tot_cell_cnt0_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5f8 && offset < 0x600) {
      offset -= 0x5f8;
      tot_cell_cnt1_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x600 && offset < 0x608) {
      offset -= 0x600;
      tot_cell_cnt2_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x608 && offset < 0x610) {
      offset -= 0x608;
      tot_pkt_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x610 && offset < 0x618) {
      offset -= 0x610;
      tot_err_pkt_cnt_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x618 && offset < 0x61c) {
      offset -= 0x618;
      debug_bus_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      intr_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    pipe_ctrl_.reset();
    linkmem_mbe_errlog_.reset();
    os_pg_map_.reset();
    for (auto &f0 : pt_state_) {
      f0.reset();
    }
    for (auto &f0 : pt_epb_cred_) {
      f0.reset();
    }
    for (auto &f0 : q_empty_) {
      f0.reset();
    }
    for (auto &f0 : pt_gap_lim_) {
      f0.reset();
    }
    for (auto &f0 : pg_single_) {
      f0.reset();
    }
    for (auto &f0 : pt_gap_wm_) {
      f0.reset();
    }
    for (auto &f0 : ct_timer_) {
      f0.reset();
    }
    ind_addr_.reset();
    ind_data_.reset();
    port_first_cnt_.reset();
    port_second_cnt_.reset();
    port_cell_cnt_.reset();
    port_pkt_cnt_.reset();
    tot_cell_cnt0_.reset();
    tot_cell_cnt1_.reset();
    tot_cell_cnt2_.reset();
    tot_pkt_cnt_.reset();
    tot_err_pkt_cnt_.reset();
    debug_bus_ctrl_.reset();
    intr_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x4) {
      offset -= 0x0;
      r += pipe_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x34 && offset < 0x38) {
      offset -= 0x34;
      r += linkmem_mbe_errlog_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x38 && offset < 0x3c) {
      offset -= 0x38;
      r += os_pg_map_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x6c) {
      offset -= 0x40;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pt_state_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pt_epb_cred_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x150) {
      offset -= 0x100;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += q_empty_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x180 && offset < 0x1c8) {
      offset -= 0x180;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pt_gap_lim_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x200 && offset < 0x248) {
      offset -= 0x200;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pg_single_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x400 && offset < 0x520) {
      offset -= 0x400;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += pt_gap_wm_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x580 && offset < 0x5c8) {
      offset -= 0x580;
      int i0 = offset / 0x4;
      offset  -= i0 * 0x4;
      r += ct_timer_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5c8 && offset < 0x5cc) {
      offset -= 0x5c8;
      r += ind_addr_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5cc && offset < 0x5d0) {
      offset -= 0x5cc;
      r += ind_data_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5d0 && offset < 0x5d8) {
      offset -= 0x5d0;
      r += port_first_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5d8 && offset < 0x5e0) {
      offset -= 0x5d8;
      r += port_second_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5e0 && offset < 0x5e8) {
      offset -= 0x5e0;
      r += port_cell_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5e8 && offset < 0x5f0) {
      offset -= 0x5e8;
      r += port_pkt_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5f0 && offset < 0x5f8) {
      offset -= 0x5f0;
      r += tot_cell_cnt0_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5f8 && offset < 0x600) {
      offset -= 0x5f8;
      r += tot_cell_cnt1_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x600 && offset < 0x608) {
      offset -= 0x600;
      r += tot_cell_cnt2_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x608 && offset < 0x610) {
      offset -= 0x608;
      r += tot_pkt_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x610 && offset < 0x618) {
      offset -= 0x610;
      r += tot_err_pkt_cnt_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x618 && offset < 0x61c) {
      offset -= 0x618;
      r += debug_bus_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x20 && offset < 0x34) {
      offset -= 0x20;
      r += intr_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += pipe_ctrl_.to_string(print_zeros,indent_string) ;
    r += linkmem_mbe_errlog_.to_string(print_zeros,indent_string) ;
    r += os_pg_map_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<11;++a0) {
      r += pt_state_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<18;++a0) {
      r += pt_epb_cred_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<20;++a0) {
      r += q_empty_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<18;++a0) {
      r += pt_gap_lim_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<18;++a0) {
      r += pg_single_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<72;++a0) {
      r += pt_gap_wm_[a0].to_string(print_zeros,indent_string) ;
    }
    for (uint32_t a0=0;a0<18;++a0) {
      r += ct_timer_[a0].to_string(print_zeros,indent_string) ;
    }
    r += ind_addr_.to_string(print_zeros,indent_string) ;
    r += ind_data_.to_string(print_zeros,indent_string) ;
    r += port_first_cnt_.to_string(print_zeros,indent_string) ;
    r += port_second_cnt_.to_string(print_zeros,indent_string) ;
    r += port_cell_cnt_.to_string(print_zeros,indent_string) ;
    r += port_pkt_cnt_.to_string(print_zeros,indent_string) ;
    r += tot_cell_cnt0_.to_string(print_zeros,indent_string) ;
    r += tot_cell_cnt1_.to_string(print_zeros,indent_string) ;
    r += tot_cell_cnt2_.to_string(print_zeros,indent_string) ;
    r += tot_pkt_cnt_.to_string(print_zeros,indent_string) ;
    r += tot_err_pkt_cnt_.to_string(print_zeros,indent_string) ;
    r += debug_bus_ctrl_.to_string(print_zeros,indent_string) ;
    r += intr_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  QpexPipeCtrlMutable pipe_ctrl_;
  TmPexPipeRspecLinkmemMbeErrlogMutable linkmem_mbe_errlog_;
  QpexOversubPgMapMutable os_pg_map_;
  std::array< QpexPtStateMutable, 11 > pt_state_;
  std::array< QpexEpbCredCntMutable, 18 > pt_epb_cred_;
  std::array< QpexQEmptyMutable, 20 > q_empty_;
  std::array< QpexPtGapLimMutable, 18 > pt_gap_lim_;
  std::array< QpexPgSingleMutable, 18 > pg_single_;
  std::array< QpexPtGapWmMutable, 72 > pt_gap_wm_;
  std::array< CtTimerMutable, 18 > ct_timer_;
  PexIndAddrMutable ind_addr_;
  PexIndDataMutable ind_data_;
  PexPortFpCntMutable port_first_cnt_;
  PexPortSpCntMutable port_second_cnt_;
  PexPortCellCntMutable port_cell_cnt_;
  PexPortPktCntMutable port_pkt_cnt_;
  PexTotCellCnt0Mutable tot_cell_cnt0_;
  PexTotCellCnt1Mutable tot_cell_cnt1_;
  PexTotCellCnt2Mutable tot_cell_cnt2_;
  PexTotPktCntMutable tot_pkt_cnt_;
  PexTotErrPktCntMutable tot_err_pkt_cnt_;
  TmPexPipeRspecDebugBusCtrlMutable debug_bus_ctrl_;
  TmPexPipeRspecIntrMutable intr_;
private:
  static int StartOffset(
      int index_tm_pex_pipe_rspec
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x100000; // to get to tm_clc_top
    offset += 0x10000; // to get to pex
    assert(index_tm_pex_pipe_rspec < 4);
    offset += index_tm_pex_pipe_rspec * 0x4000; // tm_pex_pipe_rspec[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_TM_PEX_PIPE_RSPEC_MUTABLE_H__
