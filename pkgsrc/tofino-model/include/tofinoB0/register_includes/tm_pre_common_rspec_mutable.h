/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_PRE_COMMON_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_TM_PRE_COMMON_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "pre_common_ctrl_mutable.h"
#include "pre_pipe_int_status_mutable.h"
#include "pre_port_down_mutable.h"
#include "pre_port_mask_mutable.h"
#include "pre_prune_rid_mutable.h"
#include "pre_rdm_blk_id_mutable.h"

namespace tofinoB0 {
  namespace register_classes {

class TmPreCommonRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmPreCommonRspecMutable(
      int chipNumber, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 32768, true, write_callback, read_callback, std::string("TmPreCommonRspecMutable"))
    {
    }
  TmPreCommonRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "TmPreCommonRspecMutable")
    {
    }
public:





  PreCommonCtrlMutable &common_ctrl() { return common_ctrl_; }





  PrePruneRidMutable &prune_rid() { return prune_rid_; }





  PreRdmBlkIdMutable &blk_id() { return blk_id_; }







  PrePortMaskMutable &port_mask(int j0) { return port_mask_[j0]; }





  PrePortDownMutable &port_down() { return port_down_; }





  PrePipeIntStatusMutable &pipe_int_status() { return pipe_int_status_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      if (read_callback_) read_callback_();
      common_ctrl_.read( offset, data );
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      if (read_callback_) read_callback_();
      prune_rid_.read( offset, data );
    }
    else if (offset >= 0x40 && offset < 0x74) {
      offset -= 0x40;
      if (read_callback_) read_callback_();
      blk_id_.read( offset, data );
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      int i0 = offset / 0x24;
      offset  -= i0 * 0x24;
      if (read_callback_) read_callback_();
      port_mask_[ i0 ].read( offset, data );
    }
    else if (offset >= 0x100 && offset < 0x124) {
      offset -= 0x100;
      if (read_callback_) read_callback_();
      port_down_.read( offset, data );
    }
    else if (offset >= 0x124 && offset < 0x128) {
      offset -= 0x124;
      if (read_callback_) read_callback_();
      pipe_int_status_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      common_ctrl_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      prune_rid_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x40 && offset < 0x74) {
      offset -= 0x40;
      blk_id_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      int i0 = offset / 0x24;
      offset  -= i0 * 0x24;
      port_mask_[ i0 ].write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x100 && offset < 0x124) {
      offset -= 0x100;
      port_down_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x124 && offset < 0x128) {
      offset -= 0x124;
      pipe_int_status_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    common_ctrl_.reset();
    prune_rid_.reset();
    blk_id_.reset();
    for (auto &f0 : port_mask_) {
      f0.reset();
    }
    port_down_.reset();
    pipe_int_status_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset >= 0xc && offset < 0x10) {
      offset -= 0xc;
      r += common_ctrl_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x10 && offset < 0x14) {
      offset -= 0x10;
      r += prune_rid_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x40 && offset < 0x74) {
      offset -= 0x40;
      r += blk_id_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x80 && offset < 0xc8) {
      offset -= 0x80;
      int i0 = offset / 0x24;
      offset  -= i0 * 0x24;
      r += port_mask_[ i0 ].to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x100 && offset < 0x124) {
      offset -= 0x100;
      r += port_down_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x124 && offset < 0x128) {
      offset -= 0x124;
      r += pipe_int_status_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += common_ctrl_.to_string(print_zeros,indent_string) ;
    r += prune_rid_.to_string(print_zeros,indent_string) ;
    r += blk_id_.to_string(print_zeros,indent_string) ;
    for (uint32_t a0=0;a0<2;++a0) {
      r += port_mask_[a0].to_string(print_zeros,indent_string) ;
    }
    r += port_down_.to_string(print_zeros,indent_string) ;
    r += pipe_int_status_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  PreCommonCtrlMutable common_ctrl_;
  PrePruneRidMutable prune_rid_;
  PreRdmBlkIdMutable blk_id_;
  std::array< PrePortMaskMutable, 2 > port_mask_;
  PrePortDownMutable port_down_;
  PrePipeIntStatusMutable pipe_int_status_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x200000; // to get to tm_pre_top
    offset += 0x20000; // to get to pre_common
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_TM_PRE_COMMON_RSPEC_MUTABLE_H__
