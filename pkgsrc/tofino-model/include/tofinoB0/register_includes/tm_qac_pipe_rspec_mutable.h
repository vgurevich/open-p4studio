/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_QAC_PIPE_RSPEC_MUTABLE_H__
#define __REGISTER_INCLUDES_TM_QAC_PIPE_RSPEC_MUTABLE_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "pipe_block_reg_mutable.h"
#include "qac_port_cell_count_mutable.h"
#include "qac_port_config_mutable.h"
#include "qac_port_wm_cell_count_mutable.h"
#include "qac_queue_ap_config_mutable.h"
#include "qac_queue_cell_count_mutable.h"
#include "qac_queue_color_limit_mutable.h"
#include "qac_queue_min_thrd_config_mutable.h"
#include "qac_queue_shr_thrd_config_mutable.h"
#include "qac_queue_wm_cell_count_mutable.h"

namespace tofinoB0 {
  namespace register_classes {

class TmQacPipeRspecMutable : public model_core::RegisterBlock<RegisterCallback> {
public:
  TmQacPipeRspecMutable(
      int chipNumber, int index_tm_qac_pipe_rspec, RegisterCallback& write_callback = 0, RegisterCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(index_tm_qac_pipe_rspec), 32768, true, write_callback, read_callback, std::string("TmQacPipeRspecMutable")+":"+boost::lexical_cast<std::string>(index_tm_qac_pipe_rspec))
    {
    }
  TmQacPipeRspecMutable(
      
  )
    : RegisterBlock(0, 0, 0, true, 0, 0, "TmQacPipeRspecMutable")
    {
    }
public:






  QacQueueMinThrdConfigMutable &csr_mem_qac_queue_min_thrd_config() { return csr_mem_qac_queue_min_thrd_config_; }







  QacQueueShrThrdConfigMutable &csr_mem_qac_queue_shr_thrd_config() { return csr_mem_qac_queue_shr_thrd_config_; }






  QacQueueApConfigMutable &csr_mem_qac_queue_ap_config() { return csr_mem_qac_queue_ap_config_; }







  QacQueueColorLimitMutable &csr_mem_qac_queue_color_limit() { return csr_mem_qac_queue_color_limit_; }






  QacQueueCellCountMutable &csr_mem_qac_queue_cell_count() { return csr_mem_qac_queue_cell_count_; }






  QacQueueWmCellCountMutable &csr_mem_qac_queue_wm_cell_count() { return csr_mem_qac_queue_wm_cell_count_; }






  QacPortWmCellCountMutable &csr_mem_qac_port_wm_cell_count() { return csr_mem_qac_port_wm_cell_count_; }






  QacPortConfigMutable &csr_mem_qac_port_config() { return csr_mem_qac_port_config_; }






  QacPortCellCountMutable &csr_mem_qac_port_cell_count() { return csr_mem_qac_port_cell_count_; }
  PipeBlockRegMutable &qac_reg() { return qac_reg_; }

  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    if (offset < 0x900) {
      offset -= 0x0;
      if (read_callback_) read_callback_();
      csr_mem_qac_queue_min_thrd_config_.read( offset, data );
    }
    else if (offset >= 0x1000 && offset < 0x1900) {
      offset -= 0x1000;
      if (read_callback_) read_callback_();
      csr_mem_qac_queue_shr_thrd_config_.read( offset, data );
    }
    else if (offset >= 0x2000 && offset < 0x2900) {
      offset -= 0x2000;
      if (read_callback_) read_callback_();
      csr_mem_qac_queue_ap_config_.read( offset, data );
    }
    else if (offset >= 0x3000 && offset < 0x3900) {
      offset -= 0x3000;
      if (read_callback_) read_callback_();
      csr_mem_qac_queue_color_limit_.read( offset, data );
    }
    else if (offset >= 0x4000 && offset < 0x4900) {
      offset -= 0x4000;
      if (read_callback_) read_callback_();
      csr_mem_qac_queue_cell_count_.read( offset, data );
    }
    else if (offset >= 0x5000 && offset < 0x5900) {
      offset -= 0x5000;
      if (read_callback_) read_callback_();
      csr_mem_qac_queue_wm_cell_count_.read( offset, data );
    }
    else if (offset >= 0x5a00 && offset < 0x5b20) {
      offset -= 0x5a00;
      if (read_callback_) read_callback_();
      csr_mem_qac_port_wm_cell_count_.read( offset, data );
    }
    else if (offset >= 0x5c00 && offset < 0x5d20) {
      offset -= 0x5c00;
      if (read_callback_) read_callback_();
      csr_mem_qac_port_config_.read( offset, data );
    }
    else if (offset >= 0x5e00 && offset < 0x5f20) {
      offset -= 0x5e00;
      if (read_callback_) read_callback_();
      csr_mem_qac_port_cell_count_.read( offset, data );
    }
    else if (offset >= 0x6000 && offset < 0x7520) {
      offset -= 0x6000;
      if (read_callback_) read_callback_();
      qac_reg_.read( offset, data );
    }
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    if (offset < 0x900) {
      offset -= 0x0;
      csr_mem_qac_queue_min_thrd_config_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x1000 && offset < 0x1900) {
      offset -= 0x1000;
      csr_mem_qac_queue_shr_thrd_config_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x2000 && offset < 0x2900) {
      offset -= 0x2000;
      csr_mem_qac_queue_ap_config_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x3000 && offset < 0x3900) {
      offset -= 0x3000;
      csr_mem_qac_queue_color_limit_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x4000 && offset < 0x4900) {
      offset -= 0x4000;
      csr_mem_qac_queue_cell_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5000 && offset < 0x5900) {
      offset -= 0x5000;
      csr_mem_qac_queue_wm_cell_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5a00 && offset < 0x5b20) {
      offset -= 0x5a00;
      csr_mem_qac_port_wm_cell_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5c00 && offset < 0x5d20) {
      offset -= 0x5c00;
      csr_mem_qac_port_config_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x5e00 && offset < 0x5f20) {
      offset -= 0x5e00;
      csr_mem_qac_port_cell_count_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    else if (offset >= 0x6000 && offset < 0x7520) {
      offset -= 0x6000;
      qac_reg_.write( offset, data );
      if (write_callback_) write_callback_();
    }
    return true;
  }

  void reset(
      
      ) {
    csr_mem_qac_queue_min_thrd_config_.reset();
    csr_mem_qac_queue_shr_thrd_config_.reset();
    csr_mem_qac_queue_ap_config_.reset();
    csr_mem_qac_queue_color_limit_.reset();
    csr_mem_qac_queue_cell_count_.reset();
    csr_mem_qac_queue_wm_cell_count_.reset();
    csr_mem_qac_port_wm_cell_count_.reset();
    csr_mem_qac_port_config_.reset();
    csr_mem_qac_port_cell_count_.reset();
    qac_reg_.reset();
    if (write_callback_) write_callback_();
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    if (offset < 0x900) {
      offset -= 0x0;
      r += csr_mem_qac_queue_min_thrd_config_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x1000 && offset < 0x1900) {
      offset -= 0x1000;
      r += csr_mem_qac_queue_shr_thrd_config_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x2000 && offset < 0x2900) {
      offset -= 0x2000;
      r += csr_mem_qac_queue_ap_config_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x3000 && offset < 0x3900) {
      offset -= 0x3000;
      r += csr_mem_qac_queue_color_limit_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x4000 && offset < 0x4900) {
      offset -= 0x4000;
      r += csr_mem_qac_queue_cell_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5000 && offset < 0x5900) {
      offset -= 0x5000;
      r += csr_mem_qac_queue_wm_cell_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5a00 && offset < 0x5b20) {
      offset -= 0x5a00;
      r += csr_mem_qac_port_wm_cell_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5c00 && offset < 0x5d20) {
      offset -= 0x5c00;
      r += csr_mem_qac_port_config_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x5e00 && offset < 0x5f20) {
      offset -= 0x5e00;
      r += csr_mem_qac_port_cell_count_.to_string(offset,print_zeros,indent_string) ;
    }
    else if (offset >= 0x6000 && offset < 0x7520) {
      offset -= 0x6000;
      r += qac_reg_.to_string(offset,print_zeros,indent_string) ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    r += csr_mem_qac_queue_min_thrd_config_.to_string(print_zeros,indent_string) ;
    r += csr_mem_qac_queue_shr_thrd_config_.to_string(print_zeros,indent_string) ;
    r += csr_mem_qac_queue_ap_config_.to_string(print_zeros,indent_string) ;
    r += csr_mem_qac_queue_color_limit_.to_string(print_zeros,indent_string) ;
    r += csr_mem_qac_queue_cell_count_.to_string(print_zeros,indent_string) ;
    r += csr_mem_qac_queue_wm_cell_count_.to_string(print_zeros,indent_string) ;
    r += csr_mem_qac_port_wm_cell_count_.to_string(print_zeros,indent_string) ;
    r += csr_mem_qac_port_config_.to_string(print_zeros,indent_string) ;
    r += csr_mem_qac_port_cell_count_.to_string(print_zeros,indent_string) ;
    r += qac_reg_.to_string(print_zeros,indent_string) ;
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  QacQueueMinThrdConfigMutable csr_mem_qac_queue_min_thrd_config_;
  QacQueueShrThrdConfigMutable csr_mem_qac_queue_shr_thrd_config_;
  QacQueueApConfigMutable csr_mem_qac_queue_ap_config_;
  QacQueueColorLimitMutable csr_mem_qac_queue_color_limit_;
  QacQueueCellCountMutable csr_mem_qac_queue_cell_count_;
  QacQueueWmCellCountMutable csr_mem_qac_queue_wm_cell_count_;
  QacPortWmCellCountMutable csr_mem_qac_port_wm_cell_count_;
  QacPortConfigMutable csr_mem_qac_port_config_;
  QacPortCellCountMutable csr_mem_qac_port_cell_count_;
  PipeBlockRegMutable qac_reg_;
private:
  static int StartOffset(
      int index_tm_qac_pipe_rspec
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0x80000; // to get to tm_qac_top
    assert(index_tm_qac_pipe_rspec < 4);
    offset += index_tm_qac_pipe_rspec * 0x8000; // tm_qac_pipe_rspec[]
    return offset;
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_TM_QAC_PIPE_RSPEC_MUTABLE_H__
