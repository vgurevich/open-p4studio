/*******************************************************************************
 *  Copyright (C) 2024 Intel Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 *
 *  SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

// generated by split_classes.pl
#ifndef __REGISTER_INCLUDES_TM_SCH_PIPE_RSPEC_ARRAY_H__
#define __REGISTER_INCLUDES_TM_SCH_PIPE_RSPEC_ARRAY_H__


#include <cstdint>
#include <cassert>
#include <array>
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>
#include <model_core/register_block.h>
#include <shared/bitvector.h>











#include "sch_byte_count_adjust_r.h"
#include "sch_ctrl_r.h"
#include "sch_excessbucket_dynamic_r.h"
#include "sch_excessbucket_static_r.h"
#include "sch_leakybucket_dynamic_r.h"
#include "sch_leakybucket_static_r.h"
#include "sch_port_config_r.h"
#include "sch_port_pex_status_r.h"
#include "sch_port_pfc_status_r.h"
#include "sch_queue_config_r.h"
#include "sch_queue_pfc_status_r.h"
#include "sch_ready_r.h"
#include "sch_tdm_config_r.h"
#include "sch_tdm_table_entry_r.h"
#include "tm_sch_pipe_rspec.h"
#include "tm_sch_pipe_rspec_debug_bus_ctrl.h"
#include "tm_sch_pipe_rspec_ecc.h"
#include "tm_sch_pipe_rspec_intr.h"
#include "tm_sch_pipe_rspec_p_maxrate_mbe_errlog.h"
#include "tm_sch_pipe_rspec_p_maxrate_sbe_errlog.h"
#include "tm_sch_pipe_rspec_pex_credit_errlog.h"
#include "tm_sch_pipe_rspec_q_excrate_mbe_errlog.h"
#include "tm_sch_pipe_rspec_q_excrate_sbe_errlog.h"
#include "tm_sch_pipe_rspec_q_maxrate_mbe_errlog.h"
#include "tm_sch_pipe_rspec_q_maxrate_sbe_errlog.h"
#include "tm_sch_pipe_rspec_q_minrate_mbe_errlog.h"
#include "tm_sch_pipe_rspec_q_minrate_sbe_errlog.h"
#include "tm_sch_pipe_rspec_tdm_table_mbe_errlog.h"
#include "tm_sch_pipe_rspec_tdm_table_sbe_errlog.h"
#include "tm_sch_pipe_rspec_upd_edprsr_mbe_errlog.h"
#include "tm_sch_pipe_rspec_upd_edprsr_sbe_errlog.h"
#include "tm_sch_pipe_rspec_upd_pex0_mbe_errlog.h"
#include "tm_sch_pipe_rspec_upd_pex0_sbe_errlog.h"
#include "tm_sch_pipe_rspec_upd_pex1_mbe_errlog.h"
#include "tm_sch_pipe_rspec_upd_pex1_sbe_errlog.h"

namespace tofinoB0 {
  namespace register_classes {

class TmSchPipeRspecArray : public model_core::RegisterBlock<RegisterArrayCallback> {
public:
  TmSchPipeRspecArray(
      int chipNumber, RegisterArrayCallback& write_callback = 0, RegisterArrayCallback& read_callback = 0
  )
    : RegisterBlock(chipNumber, StartOffset(), 65536 * ArraySize(-1), false, write_callback, read_callback, std::string("TmSchPipeRspecArray")),
    array(RealArraySize(-1)),
    size0_(ArraySize(0)),
    real_size0_(RealArraySize(0))
    {
    }
public:








  TmSchPipeRspecEcc &ecc(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].ecc();
  }





  TmSchPipeRspecTdmTableSbeErrlog &tdm_table_sbe_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].tdm_table_sbe_errlog();
  }





  TmSchPipeRspecTdmTableMbeErrlog &tdm_table_mbe_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].tdm_table_mbe_errlog();
  }





  TmSchPipeRspecQMinrateSbeErrlog &q_minrate_sbe_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_minrate_sbe_errlog();
  }





  TmSchPipeRspecQMinrateMbeErrlog &q_minrate_mbe_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_minrate_mbe_errlog();
  }





  TmSchPipeRspecQExcrateSbeErrlog &q_excrate_sbe_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_excrate_sbe_errlog();
  }





  TmSchPipeRspecQExcrateMbeErrlog &q_excrate_mbe_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_excrate_mbe_errlog();
  }





  TmSchPipeRspecQMaxrateSbeErrlog &q_maxrate_sbe_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_maxrate_sbe_errlog();
  }





  TmSchPipeRspecQMaxrateMbeErrlog &q_maxrate_mbe_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_maxrate_mbe_errlog();
  }





  TmSchPipeRspecPMaxrateSbeErrlog &p_maxrate_sbe_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].p_maxrate_sbe_errlog();
  }





  TmSchPipeRspecPMaxrateMbeErrlog &p_maxrate_mbe_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].p_maxrate_mbe_errlog();
  }










  TmSchPipeRspecUpdPex0SbeErrlog &upd_pex0_sbe_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].upd_pex0_sbe_errlog();
  }










  TmSchPipeRspecUpdPex0MbeErrlog &upd_pex0_mbe_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].upd_pex0_mbe_errlog();
  }










  TmSchPipeRspecUpdPex1SbeErrlog &upd_pex1_sbe_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].upd_pex1_sbe_errlog();
  }










  TmSchPipeRspecUpdPex1MbeErrlog &upd_pex1_mbe_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].upd_pex1_mbe_errlog();
  }










  TmSchPipeRspecUpdEdprsrSbeErrlog &upd_edprsr_sbe_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].upd_edprsr_sbe_errlog();
  }










  TmSchPipeRspecUpdEdprsrMbeErrlog &upd_edprsr_mbe_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].upd_edprsr_mbe_errlog();
  }





  TmSchPipeRspecPexCreditErrlog &pex_credit_errlog(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].pex_credit_errlog();
  }






  SchCtrlR &ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].ctrl();
  }






  SchReadyR &ready(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].ready();
  }






  SchByteCountAdjustR &global_bytecnt_adj(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].global_bytecnt_adj();
  }





  SchTdmConfigR &tdm_config(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].tdm_config();
  }












  SchTdmTableEntryR &tdm_table(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].tdm_table(j0);
  }








  SchPortConfigR &port_config(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].port_config(j0);
  }








  SchLeakybucketStaticR &port_max_lb_static_mem(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].port_max_lb_static_mem(j0);
  }










  SchLeakybucketDynamicR &port_max_lb_dynamic_mem(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].port_max_lb_dynamic_mem(j0);
  }






  SchPortPfcStatusR &port_pfc_status_mem(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].port_pfc_status_mem(j0);
  }






  SchPortPexStatusR &port_pex_status_mem(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].port_pex_status_mem(j0);
  }









  SchQueueConfigR &queue_config(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].queue_config(j0);
  }








  SchLeakybucketStaticR &q_min_lb_static_mem(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_min_lb_static_mem(j0);
  }










  SchLeakybucketDynamicR &q_min_lb_dynamic_mem(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_min_lb_dynamic_mem(j0);
  }








  SchLeakybucketStaticR &q_max_lb_static_mem(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_max_lb_static_mem(j0);
  }










  SchLeakybucketDynamicR &q_max_lb_dynamic_mem(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_max_lb_dynamic_mem(j0);
  }










  SchExcessbucketStaticR &q_exc_static_mem(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_exc_static_mem(j0);
  }










  SchExcessbucketDynamicR &q_exc_dynamic_mem(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_exc_dynamic_mem(j0);
  }






  SchQueuePfcStatusR &q_pfc_status_mem(uint32_t a0,int j0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].q_pfc_status_mem(j0);
  }





  TmSchPipeRspecDebugBusCtrl &debug_bus_ctrl(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].debug_bus_ctrl();
  }
  TmSchPipeRspecIntr &intr(uint32_t a0)
  {
    CheckArrayBounds(a0,real_size0_,size0_,0,0,false);
    return array[a0].intr();
  }
  bool calculate_index(
      uint32_t* offset, uint32_t* a0
      ) const {
    int i = (*offset)/65536;
    (*offset) -= (i*65536);
    uint32_t t = i;
    *a0 = t;
    bool in_bounds = true;
    in_bounds &= CheckArrayBounds(*a0,real_size0_,size0_,*offset,0,true);
    return in_bounds;
  }


  bool read(
      uint32_t offset, uint32_t* data
      ) const {
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return true;
    if (read_callback_) read_callback_(a0);
    array[a0].read(offset,data);
    return true;
  }


  bool write(
      uint32_t offset, uint32_t data
      ) {
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return true;
    array[a0].write(offset,data);
    if (write_callback_) write_callback_(a0);
    return true;
  }

  void reset(
      
      ) {
    for (uint32_t i=0;i<array.size();++i) {
      array[i].reset();
      int t = i;
      int a0 = t;
      if (write_callback_) write_callback_(a0);
    }
  }

  std::string to_string(
      uint32_t offset, bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    uint32_t a0;
     if (!calculate_index(&offset,&a0)) return "OUT_OF_BOUNDS";
    std::string r_s = array[a0].to_string(print_zeros,indent_string+"  ");
    if (! r_s.empty()) {
      r += indent_string + std::string("TmSchPipeRspecArray") + "["+boost::lexical_cast<std::string>(a0)+"]"+ ":\n" + r_s ;
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

  std::string to_string(
      bool print_zeros = false, std::string indent_string = ""
      ) const {
    std::string r("");
    bool all_zeros=true;
    all_zeros=false;
    for (uint32_t a0=0;a0<real_size0_;++a0) {
      std::string r_s = array[a0].to_string(print_zeros,indent_string+"  ");
      if (! r_s.empty()) {
        r += indent_string + std::string("TmSchPipeRspecArray") + "["+boost::lexical_cast<std::string>(a0)+"]"+ ":\n" + r_s ;
      }
    }
    if (all_zeros && !print_zeros) {
      return("");
    }
    else {
      return r;
    }
  }

private:
  std::vector<TmSchPipeRspec> array;
  uint32_t size0_;
  uint32_t real_size0_;
private:
  static int StartOffset(
      
      ) {
    int offset=0;
    offset += 0x400000; // to get to tm_top
    offset += 0xc0000; // to get to tm_sch_top
    return offset;
  }

  static int ArraySize(
      int dimension
      ) {
    switch (dimension) {
      case -1:
        return 4;
        break;
      case 0:
        return 4;
        break;
      default:
        assert(0);
        break;
    }
  }

  static int RealArraySize(
      int dimension
      ) {
    switch (dimension) {
      case -1:
        return 4;
        break;
      case 0:
        return 4;
        break;
      default:
        assert(0);
        break;
    }
  }

};









  }; // namespace register_classes
}; // namespace tofinoB0

#endif // __REGISTER_INCLUDES_TM_SCH_PIPE_RSPEC_ARRAY_H__
